
STM32F303_TMC2209_Absolute_Homing_stallguard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007738  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  080078c8  080078c8  000178c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dbc  08007dbc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08007dbc  08007dbc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007dbc  08007dbc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dbc  08007dbc  00017dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007dc0  08007dc0  00017dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000880  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008f0  200008f0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011b05  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002674  00000000  00000000  00031ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef0  00000000  00000000  00034220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000df8  00000000  00000000  00035110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d1bb  00000000  00000000  00035f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012430  00000000  00000000  000530c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a98b3  00000000  00000000  000654f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010eda6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004688  00000000  00000000  0010edf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078b0 	.word	0x080078b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080078b0 	.word	0x080078b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <tmc2209_readWriteArray>:
    if (htim == &htim3){ //htim3に設定したタイマー割り込みの時間で発火する
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);//ピンの出力を切り替え
    }
}*/
void tmc2209_readWriteArray(uint8_t channel, uint8_t *data, size_t writeLength, size_t readLength)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	60b9      	str	r1, [r7, #8]
 8000278:	607a      	str	r2, [r7, #4]
 800027a:	603b      	str	r3, [r7, #0]
 800027c:	4603      	mov	r3, r0
 800027e:	73fb      	strb	r3, [r7, #15]
	//set your uart read write
	//UART_readWrite(channelToUART(channel), data, writeLength, readLength);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8000280:	480e      	ldr	r0, [pc, #56]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000282:	f004 ffc9 	bl	8005218 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart1, data, writeLength,3000);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	b29a      	uxth	r2, r3
 800028a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800028e:	68b9      	ldr	r1, [r7, #8]
 8000290:	480a      	ldr	r0, [pc, #40]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000292:	f004 faa1 	bl	80047d8 <HAL_UART_Transmit>

	if(readLength > 0){
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d00a      	beq.n	80002b2 <tmc2209_readWriteArray+0x42>
		HAL_HalfDuplex_EnableReceiver(&huart1);
 800029c:	4807      	ldr	r0, [pc, #28]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 800029e:	f005 f80d 	bl	80052bc <HAL_HalfDuplex_EnableReceiver>
		HAL_UART_Receive(&huart1, data, readLength, 3000);
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002aa:	68b9      	ldr	r1, [r7, #8]
 80002ac:	4803      	ldr	r0, [pc, #12]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 80002ae:	f004 fb27 	bl	8004900 <HAL_UART_Receive>
	}
}
 80002b2:	bf00      	nop
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	200000d8 	.word	0x200000d8

080002c0 <tmc2209_CRC8>:

uint8_t tmc2209_CRC8(uint8_t *data, size_t length)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
	return TMC2209_CRC(data, length);
 80002ca:	2201      	movs	r2, #1
 80002cc:	6839      	ldr	r1, [r7, #0]
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f005 ff56 	bl	8006180 <tmc_CRC8>
 80002d4:	4603      	mov	r3, r0
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <reset>:
//
//	//StepDir_periodicJob(0);
//}

static uint8_t reset()
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	//StepDir_init(STEPDIR_PRECISION);
	//StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.DIAG);

	return tmc2209_reset(&TMC2209);
 80002e4:	4802      	ldr	r0, [pc, #8]	; (80002f0 <reset+0x10>)
 80002e6:	f006 f983 	bl	80065f0 <tmc2209_reset>
 80002ea:	4603      	mov	r3, r0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	200001e0 	.word	0x200001e0

080002f4 <restore>:

static uint8_t restore()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	return tmc2209_restore(&TMC2209);
 80002f8:	4802      	ldr	r0, [pc, #8]	; (8000304 <restore+0x10>)
 80002fa:	f006 f9b3 	bl	8006664 <tmc2209_restore>
 80002fe:	4603      	mov	r3, r0
}
 8000300:	4618      	mov	r0, r3
 8000302:	bd80      	pop	{r7, pc}
 8000304:	200001e0 	.word	0x200001e0

08000308 <TMC2209_INIT>:


void TMC2209_INIT()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 800030e:	2201      	movs	r2, #1
 8000310:	2101      	movs	r1, #1
 8000312:	2007      	movs	r0, #7
 8000314:	f005 fe7c 	bl	8006010 <tmc_fillCRC8Table>

	TMC2209_config.reset = reset;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <TMC2209_INIT+0x38>)
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <TMC2209_INIT+0x3c>)
 800031c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	TMC2209_config.restore = restore;
 8000320:	4b07      	ldr	r3, [pc, #28]	; (8000340 <TMC2209_INIT+0x38>)
 8000322:	4a09      	ldr	r2, [pc, #36]	; (8000348 <TMC2209_INIT+0x40>)
 8000324:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	tmc2209_init(&TMC2209, 0, 0, &TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <TMC2209_INIT+0x44>)
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <TMC2209_INIT+0x38>)
 800032e:	2200      	movs	r2, #0
 8000330:	2100      	movs	r1, #0
 8000332:	4807      	ldr	r0, [pc, #28]	; (8000350 <TMC2209_INIT+0x48>)
 8000334:	f006 f878 	bl	8006428 <tmc2209_init>


	//restore();
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000468 	.word	0x20000468
 8000344:	080002e1 	.word	0x080002e1
 8000348:	080002f5 	.word	0x080002f5
 800034c:	08007a6c 	.word	0x08007a6c
 8000350:	200001e0 	.word	0x200001e0

08000354 <HAL_GPIO_EXTI_Callback>:
	return &TMC2209;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	80fb      	strh	r3, [r7, #6]
	//stepper 0 end stop senssor
	if(GPIO_Pin == GPIO_PIN_6 ){
 800035e:	88fb      	ldrh	r3, [r7, #6]
 8000360:	2b40      	cmp	r3, #64	; 0x40
 8000362:	d11b      	bne.n	800039c <HAL_GPIO_EXTI_Callback+0x48>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 8000364:	2140      	movs	r1, #64	; 0x40
 8000366:	481b      	ldr	r0, [pc, #108]	; (80003d4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000368:	f001 fcc8 	bl	8001cfc <HAL_GPIO_ReadPin>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d106      	bne.n	8000380 <HAL_GPIO_EXTI_Callback+0x2c>
			end_stop_state |= 1;
 8000372:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <HAL_GPIO_EXTI_Callback+0x84>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	b2da      	uxtb	r2, r3
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <HAL_GPIO_EXTI_Callback+0x84>)
 800037e:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 8000380:	2140      	movs	r1, #64	; 0x40
 8000382:	4814      	ldr	r0, [pc, #80]	; (80003d4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000384:	f001 fcba 	bl	8001cfc <HAL_GPIO_ReadPin>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d006      	beq.n	800039c <HAL_GPIO_EXTI_Callback+0x48>
			end_stop_state &= ~1;
 800038e:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <HAL_GPIO_EXTI_Callback+0x84>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	f023 0301 	bic.w	r3, r3, #1
 8000396:	b2da      	uxtb	r2, r3
 8000398:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <HAL_GPIO_EXTI_Callback+0x84>)
 800039a:	701a      	strb	r2, [r3, #0]
		}
	}
	if(GPIO_Pin == GPIO_PIN_7 ){
 800039c:	88fb      	ldrh	r3, [r7, #6]
 800039e:	2b80      	cmp	r3, #128	; 0x80
 80003a0:	d114      	bne.n	80003cc <HAL_GPIO_EXTI_Callback+0x78>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)){
 80003a2:	2180      	movs	r1, #128	; 0x80
 80003a4:	480b      	ldr	r0, [pc, #44]	; (80003d4 <HAL_GPIO_EXTI_Callback+0x80>)
 80003a6:	f001 fca9 	bl	8001cfc <HAL_GPIO_ReadPin>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d103      	bne.n	80003b8 <HAL_GPIO_EXTI_Callback+0x64>
			current_stall|= 0;
 80003b0:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <HAL_GPIO_EXTI_Callback+0x88>)
 80003b2:	781a      	ldrb	r2, [r3, #0]
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <HAL_GPIO_EXTI_Callback+0x88>)
 80003b6:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)){
 80003b8:	2180      	movs	r1, #128	; 0x80
 80003ba:	4806      	ldr	r0, [pc, #24]	; (80003d4 <HAL_GPIO_EXTI_Callback+0x80>)
 80003bc:	f001 fc9e 	bl	8001cfc <HAL_GPIO_ReadPin>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d002      	beq.n	80003cc <HAL_GPIO_EXTI_Callback+0x78>
			current_stall = 1;
 80003c6:	4b05      	ldr	r3, [pc, #20]	; (80003dc <HAL_GPIO_EXTI_Callback+0x88>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	48000400 	.word	0x48000400
 80003d8:	200006cc 	.word	0x200006cc
 80003dc:	200006ce 	.word	0x200006ce

080003e0 <Step0>:
void Step0(){                                       //step pin
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	//pull+

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2120      	movs	r1, #32
 80003e8:	4804      	ldr	r0, [pc, #16]	; (80003fc <Step0+0x1c>)
 80003ea:	f001 fc9f 	bl	8001d2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	2120      	movs	r1, #32
 80003f2:	4802      	ldr	r0, [pc, #8]	; (80003fc <Step0+0x1c>)
 80003f4:	f001 fc9a 	bl	8001d2c <HAL_GPIO_WritePin>
	/*
	 * pull-
	 * HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
	 * HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
	 */
}
 80003f8:	bf00      	nop
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	48000400 	.word	0x48000400

08000400 <Dir0>:

void Dir0(int dir){
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dir); //Dir0関数にdirピンを指定して格納
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	b2db      	uxtb	r3, r3
 800040c:	461a      	mov	r2, r3
 800040e:	2110      	movs	r1, #16
 8000410:	4803      	ldr	r0, [pc, #12]	; (8000420 <Dir0+0x20>)
 8000412:	f001 fc8b 	bl	8001d2c <HAL_GPIO_WritePin>
}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	48000400 	.word	0x48000400

08000424 <resetStepper>:
	si->stepPosition = 0;
	si->movementDone = 0;
}


void resetStepper(volatile stepperInfo* si){    //resetStepper関数に引数をstepperInfo構造隊にポイント型変数siとして与える
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	si->c0 = si->acceleration;      //変数*siがメンバc0にアクセス.した値に変数*siがメンバaccelerationにアクセス.した値を代入する
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	edd3 7a00 	vldr	s15, [r3]
 8000432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000436:	ee17 2a90 	vmov	r2, s15
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	615a      	str	r2, [r3, #20]
	si->d = si->c0;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	ee07 3a90 	vmov	s15, r3
 8000446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	si->di = si->d;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800045a:	ee17 2a90 	vmov	r2, s15
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	649a      	str	r2, [r3, #72]	; 0x48
	si->stepCount = 0;
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2200      	movs	r2, #0
 8000466:	64da      	str	r2, [r3, #76]	; 0x4c
	si->n = 0;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	2200      	movs	r2, #0
 800046c:	641a      	str	r2, [r3, #64]	; 0x40
	si->rampUpStepCount = 0;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	2200      	movs	r2, #0
 8000472:	63da      	str	r2, [r3, #60]	; 0x3c
	si->movementDone = 0;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2200      	movs	r2, #0
 8000478:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 800047c:	bf00      	nop
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr

08000488 <prepareMovement>:

volatile uint8_t remainingSteppersFlag = 0; //remainingSteppersFlagをuint8_t型で定義し、初期化

void prepareMovement(int steps){
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	if(steps == 0){
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d039      	beq.n	800050a <prepareMovement+0x82>
		return;
	}
	volatile stepperInfo* si = &steppers[0];
 8000496:	4b1f      	ldr	r3, [pc, #124]	; (8000514 <prepareMovement+0x8c>)
 8000498:	60fb      	str	r3, [r7, #12]
	if(si->dir_inv){
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	6a1b      	ldr	r3, [r3, #32]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d011      	beq.n	80004c6 <prepareMovement+0x3e>
		si->dirFunc( steps < 0 ? 0 : 1);
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	689b      	ldr	r3, [r3, #8]
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	43d2      	mvns	r2, r2
 80004aa:	0fd2      	lsrs	r2, r2, #31
 80004ac:	b2d2      	uxtb	r2, r2
 80004ae:	4610      	mov	r0, r2
 80004b0:	4798      	blx	r3
		si->dir = steps > 0 ? -1:1;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	dd02      	ble.n	80004be <prepareMovement+0x36>
 80004b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004bc:	e000      	b.n	80004c0 <prepareMovement+0x38>
 80004be:	2201      	movs	r2, #1
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	61da      	str	r2, [r3, #28]
 80004c4:	e00e      	b.n	80004e4 <prepareMovement+0x5c>
	}else{
		si->dirFunc( steps < 0 ? 1 : 0);
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	689b      	ldr	r3, [r3, #8]
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	0fd2      	lsrs	r2, r2, #31
 80004ce:	4610      	mov	r0, r2
 80004d0:	4798      	blx	r3
		si->dir = steps > 0 ? 1:-1;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	dd01      	ble.n	80004dc <prepareMovement+0x54>
 80004d8:	2201      	movs	r2, #1
 80004da:	e001      	b.n	80004e0 <prepareMovement+0x58>
 80004dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	61da      	str	r2, [r3, #28]
	}
		si->totalSteps = abs(steps);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	bfb8      	it	lt
 80004ea:	425b      	neglt	r3, r3
 80004ec:	461a      	mov	r2, r3
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	635a      	str	r2, [r3, #52]	; 0x34
		resetStepper(si);
 80004f2:	68f8      	ldr	r0, [r7, #12]
 80004f4:	f7ff ff96 	bl	8000424 <resetStepper>
		remainingSteppersFlag |= (1 << 0);
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <prepareMovement+0x90>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	f043 0301 	orr.w	r3, r3, #1
 8000502:	b2da      	uxtb	r2, r3
 8000504:	4b04      	ldr	r3, [pc, #16]	; (8000518 <prepareMovement+0x90>)
 8000506:	701a      	strb	r2, [r3, #0]
 8000508:	e000      	b.n	800050c <prepareMovement+0x84>
		return;
 800050a:	bf00      	nop

}
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	2000067c 	.word	0x2000067c
 8000518:	200006cf 	.word	0x200006cf

0800051c <prepareAbsoluteMovement>:

void prepareAbsoluteMovement(int absolute_steps){   //prepareAbsoluteMovementで与えられたステップ数だけモータを回す(main文から）
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	printf("absolute_steps:%d\r\n",absolute_steps);
 8000524:	6879      	ldr	r1, [r7, #4]
 8000526:	4820      	ldr	r0, [pc, #128]	; (80005a8 <prepareAbsoluteMovement+0x8c>)
 8000528:	f006 f8e8 	bl	80066fc <iprintf>
	volatile stepperInfo* si = &steppers[0];	//steppers[0]のアドレスをstepperInfo* si に代入
 800052c:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <prepareAbsoluteMovement+0x90>)
 800052e:	60fb      	str	r3, [r7, #12]
	int steps = absolute_steps - si->stepPosition;	//目標値からstepPositionを引いた値（stepposition=毎ステップカウントされるdirの値)
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	1ad3      	subs	r3, r2, r3
 8000538:	60bb      	str	r3, [r7, #8]
	printf("steps:%d\r\n",steps);
 800053a:	68b9      	ldr	r1, [r7, #8]
 800053c:	481c      	ldr	r0, [pc, #112]	; (80005b0 <prepareAbsoluteMovement+0x94>)
 800053e:	f006 f8dd 	bl	80066fc <iprintf>
	if(steps == 0){
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d02b      	beq.n	80005a0 <prepareAbsoluteMovement+0x84>
					return;
				}
	si->dirFunc( steps < 0 ? 1 : 0);
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	68ba      	ldr	r2, [r7, #8]
 800054e:	0fd2      	lsrs	r2, r2, #31
 8000550:	4610      	mov	r0, r2
 8000552:	4798      	blx	r3
	si->dir = steps > 0 ? 1:-1;
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	2b00      	cmp	r3, #0
 8000558:	dd01      	ble.n	800055e <prepareAbsoluteMovement+0x42>
 800055a:	2201      	movs	r2, #1
 800055c:	e001      	b.n	8000562 <prepareAbsoluteMovement+0x46>
 800055e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	61da      	str	r2, [r3, #28]
	//printf("prepareAbsoluteMovement\r\n");
	si->totalSteps = abs(steps);	//stepsの値をアブソリュートでtotalstepsに格納
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	2b00      	cmp	r3, #0
 800056a:	bfb8      	it	lt
 800056c:	425b      	neglt	r3, r3
 800056e:	461a      	mov	r2, r3
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	635a      	str	r2, [r3, #52]	; 0x34
	printf("steps:%d\r\n",si->totalSteps);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000578:	4619      	mov	r1, r3
 800057a:	480d      	ldr	r0, [pc, #52]	; (80005b0 <prepareAbsoluteMovement+0x94>)
 800057c:	f006 f8be 	bl	80066fc <iprintf>

	resetStepper(si);
 8000580:	68f8      	ldr	r0, [r7, #12]
 8000582:	f7ff ff4f 	bl	8000424 <resetStepper>
	printf("steps:%d\r\n",steps);
 8000586:	68b9      	ldr	r1, [r7, #8]
 8000588:	4809      	ldr	r0, [pc, #36]	; (80005b0 <prepareAbsoluteMovement+0x94>)
 800058a:	f006 f8b7 	bl	80066fc <iprintf>
	remainingSteppersFlag |= (1 << 0);
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <prepareAbsoluteMovement+0x98>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	b2db      	uxtb	r3, r3
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <prepareAbsoluteMovement+0x98>)
 800059c:	701a      	strb	r2, [r3, #0]
 800059e:	e000      	b.n	80005a2 <prepareAbsoluteMovement+0x86>
					return;
 80005a0:	bf00      	nop
}
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	080078c8 	.word	0x080078c8
 80005ac:	2000067c 	.word	0x2000067c
 80005b0:	080078dc 	.word	0x080078dc
 80005b4:	200006cf 	.word	0x200006cf

080005b8 <setNextInterruptInterval>:
volatile uint8_t nextStepperFlag = 0;

void setNextInterruptInterval(){
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0

	unsigned int mind = 999999;
 80005be:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <setNextInterruptInterval+0x7c>)
 80005c0:	607b      	str	r3, [r7, #4]

		if( ((1 << 0)& remainingSteppersFlag) && steppers[0].di < mind ){
 80005c2:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <setNextInterruptInterval+0x80>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	f003 0301 	and.w	r3, r3, #1
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d007      	beq.n	80005e2 <setNextInterruptInterval+0x2a>
 80005d2:	4b1a      	ldr	r3, [pc, #104]	; (800063c <setNextInterruptInterval+0x84>)
 80005d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d902      	bls.n	80005e2 <setNextInterruptInterval+0x2a>
			mind = steppers[0].di;
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <setNextInterruptInterval+0x84>)
 80005de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005e0:	607b      	str	r3, [r7, #4]
		}
		nextStepperFlag = 0;
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <setNextInterruptInterval+0x88>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]

			if( (1 << 0) && steppers[0].di == mind ){
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <setNextInterruptInterval+0x84>)
 80005ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d107      	bne.n	8000602 <setNextInterruptInterval+0x4a>
				nextStepperFlag |= (1 << 0);
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <setNextInterruptInterval+0x88>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <setNextInterruptInterval+0x88>)
 8000600:	701a      	strb	r2, [r3, #0]
			}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);		//mindにコンペアを設定
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <setNextInterruptInterval+0x8c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	635a      	str	r2, [r3, #52]	; 0x34
			//printf("mind:%d \r\n",mind);

	if (remainingSteppersFlag == 0){
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <setNextInterruptInterval+0x80>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	2b00      	cmp	r3, #0
 8000612:	d104      	bne.n	800061e <setNextInterruptInterval+0x66>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);    //65500→コンペアマッチさせない
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <setNextInterruptInterval+0x8c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800061c:	635a      	str	r2, [r3, #52]	; 0x34
	}

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <setNextInterruptInterval+0x8c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 8000626:	bf00      	nop

}
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	000f423f 	.word	0x000f423f
 8000638:	200006cf 	.word	0x200006cf
 800063c:	2000067c 	.word	0x2000067c
 8000640:	200006d0 	.word	0x200006d0
 8000644:	2000008c 	.word	0x2000008c

08000648 <HAL_TIM_OC_DelayElapsedCallback>:
//	DIAG_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_DIAG_MASK, TMC2209_DIAG_SHIFT);
//	printf("DIAG : %ld\r\n", DIAG_value);
//	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
//
//}
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){      //指定したコンペアを超えた時発火
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	//HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
	if(htim == &htim3){
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a6e      	ldr	r2, [pc, #440]	; (800080c <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 8000654:	4293      	cmp	r3, r2
 8000656:	f040 80d5 	bne.w	8000804 <HAL_TIM_OC_DelayElapsedCallback+0x1bc>
	unsigned int tmpCtr = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1);	//指定されたタイマーチャンネルのコンペアを所得
 800065a:	4b6c      	ldr	r3, [pc, #432]	; (800080c <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000660:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);			//コンペアを65500にセット
 8000662:	4b6a      	ldr	r3, [pc, #424]	; (800080c <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800066a:	635a      	str	r2, [r3, #52]	; 0x34

	if( homing_flag & (1 << 0)){
 800066c:	4b68      	ldr	r3, [pc, #416]	; (8000810 <HAL_TIM_OC_DelayElapsedCallback+0x1c8>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	2b00      	cmp	r3, #0
 8000676:	d00d      	beq.n	8000694 <HAL_TIM_OC_DelayElapsedCallback+0x4c>
				if(end_stop_state & (1 << 0)){
 8000678:	4b66      	ldr	r3, [pc, #408]	; (8000814 <HAL_TIM_OC_DelayElapsedCallback+0x1cc>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	2b00      	cmp	r3, #0
 8000682:	d007      	beq.n	8000694 <HAL_TIM_OC_DelayElapsedCallback+0x4c>
					remainingSteppersFlag &= ~(1 << 0);
 8000684:	4b64      	ldr	r3, [pc, #400]	; (8000818 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	f023 0301 	bic.w	r3, r3, #1
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4b61      	ldr	r3, [pc, #388]	; (8000818 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 8000692:	701a      	strb	r2, [r3, #0]
				}
			}
	if ( ! (nextStepperFlag & (1 << 0)) ){				//nextStepperFlagが真でない(0なら)
 8000694:	4b61      	ldr	r3, [pc, #388]	; (800081c <HAL_TIM_OC_DelayElapsedCallback+0x1d4>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d105      	bne.n	80006ae <HAL_TIM_OC_DelayElapsedCallback+0x66>
			steppers[0].di -= tmpCtr;           //tmpCtrの値からsteppers[i].di引いた値を新しくsteppers[i].diに代入
 80006a2:	4b5f      	ldr	r3, [pc, #380]	; (8000820 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80006a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	4a5d      	ldr	r2, [pc, #372]	; (8000820 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80006ac:	6493      	str	r3, [r2, #72]	; 0x48
		}
		//printf("steppers:%ld \r\n",steppers[0].di);

		volatile stepperInfo* s = &steppers[0];
 80006ae:	4b5c      	ldr	r3, [pc, #368]	; (8000820 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80006b0:	60bb      	str	r3, [r7, #8]

		if( (s->stepCount) < (s->totalSteps)&& !(current_stall)  ){		//1周ごとにカウントしたstepCountがabs(steps)より小さかったら==動作が終了するまで
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d224      	bcs.n	8000708 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
 80006be:	4b59      	ldr	r3, [pc, #356]	; (8000824 <HAL_TIM_OC_DelayElapsedCallback+0x1dc>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d120      	bne.n	8000708 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
			s->stepFunc();
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	4798      	blx	r3
			s->stepCount++;							//カウントし続ける
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d0:	1c5a      	adds	r2, r3, #1
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	64da      	str	r2, [r3, #76]	; 0x4c
			s->stepPosition += s->dir;		//dir(+もしくはー(dirの向き）を加算してstepPositionに格納
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	69da      	ldr	r2, [r3, #28]
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	441a      	add	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	619a      	str	r2, [r3, #24]
			if ( (s->stepCount) >= (s->totalSteps) ){	//stepCountがtotalStepsを超えたとき
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d30b      	bcc.n	8000708 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
				s->movementDone = 1;	//movementDoneを1にする
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	2201      	movs	r2, #1
 80006f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				remainingSteppersFlag &= ~(1 << 0);
 80006f8:	4b47      	ldr	r3, [pc, #284]	; (8000818 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	f023 0301 	bic.w	r3, r3, #1
 8000702:	b2da      	uxtb	r2, r3
 8000704:	4b44      	ldr	r3, [pc, #272]	; (8000818 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 8000706:	701a      	strb	r2, [r3, #0]
			}
		}

		if (s->rampUpStepCount == 0){
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800070c:	2b00      	cmp	r3, #0
 800070e:	d142      	bne.n	8000796 <HAL_TIM_OC_DelayElapsedCallback+0x14e>
			s->n++;									//sにnを代入して、nをプラス1する
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	1c5a      	adds	r2, r3, #1
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	641a      	str	r2, [r3, #64]	; 0x40
			s->d = s->d - (2*s->d) / (4*s->n +1);	//加減速遅延時間
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000726:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	3301      	adds	r3, #1
 8000732:	ee07 3a90 	vmov	s15, r3
 8000736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800073a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800073e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			if (s->d <= s->minStepInterval ){		//加減速遅延時間がminStepIntervalより短いなら（定数で指定）
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	ee07 3a90 	vmov	s15, r3
 8000756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800075a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800075e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000762:	d80c      	bhi.n	800077e <HAL_TIM_OC_DelayElapsedCallback+0x136>
				s->d = s->minStepInterval;			//minStepIntervalを加減速遅延時間にする
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	ee07 3a90 	vmov	s15, r3
 800076c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
				s->rampUpStepCount = s->stepCount;	//rampUpStepCountはstepCountとする
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	63da      	str	r2, [r3, #60]	; 0x3c
			}
			if (s->stepCount >= (s->totalSteps / 2) ){  //目標値から現在のステップを引いた値の1/2よりstepCountが大きくなったとき
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000786:	085b      	lsrs	r3, r3, #1
 8000788:	429a      	cmp	r2, r3
 800078a:	d32c      	bcc.n	80007e6 <HAL_TIM_OC_DelayElapsedCallback+0x19e>
				s->rampUpStepCount = s->stepCount;		//rampUpStepCountはstepCountとする
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	63da      	str	r2, [r3, #60]	; 0x3c
 8000794:	e027      	b.n	80007e6 <HAL_TIM_OC_DelayElapsedCallback+0x19e>
			}
		} else if ( s->stepCount >= s->totalSteps - s->rampUpStepCount) {	//目標値から現在のステップを引いた値からrampUpStepCountを引いた値がstepCountより小さいなら
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007a2:	1acb      	subs	r3, r1, r3
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d31e      	bcc.n	80007e6 <HAL_TIM_OC_DelayElapsedCallback+0x19e>
			s->d = (s->d * (4 * s->n + 1)) / (4 * s->n + 1 -2);				//減速の時のステップ
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	3301      	adds	r3, #1
 80007b6:	ee07 3a90 	vmov	s15, r3
 80007ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007be:	ee67 6a27 	vmul.f32	s13, s14, s15
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	3b01      	subs	r3, #1
 80007ca:	ee07 3a90 	vmov	s15, r3
 80007ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80007d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			s->n--;		//sにnを代入し、nから1を引く
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	1e5a      	subs	r2, r3, #1
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	641a      	str	r2, [r3, #64]	; 0x40
		}
		s->di = s->d;	//計算結果sをstepperInfoのメンバdに代入したものをメンバdiに代入
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80007ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007f0:	ee17 2a90 	vmov	r2, s15
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	649a      	str	r2, [r3, #72]	; 0x48
		//printf("stepPosition:%ld \r\n",s->stepPosition);
		setNextInterruptInterval();
 80007f8:	f7ff fede 	bl	80005b8 <setNextInterruptInterval>
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2200      	movs	r2, #0
 8000802:	625a      	str	r2, [r3, #36]	; 0x24


	}
}
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	2000008c 	.word	0x2000008c
 8000810:	200006cd 	.word	0x200006cd
 8000814:	200006cc 	.word	0x200006cc
 8000818:	200006cf 	.word	0x200006cf
 800081c:	200006d0 	.word	0x200006d0
 8000820:	2000067c 	.word	0x2000067c
 8000824:	200006ce 	.word	0x200006ce

08000828 <stallguard_back>:
	if( ! HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)){	//割り込みピンが真でない(1でない=0なら)
		end_stop_state |= 1;					//end_stop_stateに左辺か右辺が1なら1を代入
	}
}

void stallguard_back(){
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	prepareMovement(steppers[0].stall_off);	//stall_off
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <stallguard_back+0x18>)
 800082e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fe29 	bl	8000488 <prepareMovement>
	current_stall=0;
 8000836:	4b03      	ldr	r3, [pc, #12]	; (8000844 <stallguard_back+0x1c>)
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
	return;
 800083c:	bf00      	nop
//
//	st->totalSteps = abs(backsteps);
//
//	printf("totalSteps After%d\r\n", st->totalSteps);

}
 800083e:	bd80      	pop	{r7, pc}
 8000840:	2000067c 	.word	0x2000067c
 8000844:	200006ce 	.word	0x200006ce

08000848 <runAndWait>:
void runAndWait(){
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	setNextInterruptInterval();
 800084c:	f7ff feb4 	bl	80005b8 <setNextInterruptInterval>
	while(remainingSteppersFlag && !(current_stall));
 8000850:	bf00      	nop
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <runAndWait+0x34>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	d003      	beq.n	8000864 <runAndWait+0x1c>
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <runAndWait+0x38>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d0f6      	beq.n	8000852 <runAndWait+0xa>
	if(current_stall==1){
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <runAndWait+0x38>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d101      	bne.n	8000870 <runAndWait+0x28>
		stallguard_back();
 800086c:	f7ff ffdc 	bl	8000828 <stallguard_back>
	}
	HAL_Delay(100);
 8000870:	2064      	movs	r0, #100	; 0x64
 8000872:	f000 ff25 	bl	80016c0 <HAL_Delay>

	//printf("posi%d\r\n",re->totalSteps);
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200006cf 	.word	0x200006cf
 8000880:	200006ce 	.word	0x200006ce

08000884 <AbsoluteReset>:
void AbsoluteReset(){
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
	volatile stepperInfo* re = &steppers[0];
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <AbsoluteReset+0x44>)
 800088c:	607b      	str	r3, [r7, #4]

	re->n = 0;  //変数*siがメンバnにアクセス.した値に0を代入する
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2200      	movs	r2, #0
 8000892:	641a      	str	r2, [r3, #64]	; 0x40
	re->d = 0;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f04f 0200 	mov.w	r2, #0
 800089a:	645a      	str	r2, [r3, #68]	; 0x44
	re->di = 0;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2200      	movs	r2, #0
 80008a0:	649a      	str	r2, [r3, #72]	; 0x48
	re->stepCount = 0;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2200      	movs	r2, #0
 80008a6:	64da      	str	r2, [r3, #76]	; 0x4c
	re->rampUpStepCount = 0;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2200      	movs	r2, #0
 80008ac:	63da      	str	r2, [r3, #60]	; 0x3c
	re->totalSteps = 0;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2200      	movs	r2, #0
 80008b2:	635a      	str	r2, [r3, #52]	; 0x34
	re->stepPosition = 0;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
	printf("RestOK\r\n");
 80008ba:	4804      	ldr	r0, [pc, #16]	; (80008cc <AbsoluteReset+0x48>)
 80008bc:	f005 ffa4 	bl	8006808 <puts>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000067c 	.word	0x2000067c
 80008cc:	080078e8 	.word	0x080078e8

080008d0 <stepperHoming>:


void stepperHoming(){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	homing_flag |= (1 << 0);
 80008d4:	4b2e      	ldr	r3, [pc, #184]	; (8000990 <stepperHoming+0xc0>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b2c      	ldr	r3, [pc, #176]	; (8000990 <stepperHoming+0xc0>)
 80008e0:	701a      	strb	r2, [r3, #0]
	//seeking
	steppers[0].minStepInterval = steppers[0].seeking_vel;	//ホームピンに反応するまでモータ回す
 80008e2:	4b2c      	ldr	r3, [pc, #176]	; (8000994 <stepperHoming+0xc4>)
 80008e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e6:	461a      	mov	r2, r3
 80008e8:	4b2a      	ldr	r3, [pc, #168]	; (8000994 <stepperHoming+0xc4>)
 80008ea:	605a      	str	r2, [r3, #4]
	prepareMovement( -100000000);
 80008ec:	482a      	ldr	r0, [pc, #168]	; (8000998 <stepperHoming+0xc8>)
 80008ee:	f7ff fdcb 	bl	8000488 <prepareMovement>
	runAndWait();
 80008f2:	f7ff ffa9 	bl	8000848 <runAndWait>
	HAL_Delay(500);
 80008f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008fa:	f000 fee1 	bl	80016c0 <HAL_Delay>
	//pull-off

	homing_flag &= ~(1 << 0);								//homing_flagが反応したらpull_offだけモータ回す
 80008fe:	4b24      	ldr	r3, [pc, #144]	; (8000990 <stepperHoming+0xc0>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	f023 0301 	bic.w	r3, r3, #1
 8000906:	b2da      	uxtb	r2, r3
 8000908:	4b21      	ldr	r3, [pc, #132]	; (8000990 <stepperHoming+0xc0>)
 800090a:	701a      	strb	r2, [r3, #0]
	prepareMovement(steppers[0].pull_off);
 800090c:	4b21      	ldr	r3, [pc, #132]	; (8000994 <stepperHoming+0xc4>)
 800090e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fdb9 	bl	8000488 <prepareMovement>
	runAndWait();
 8000916:	f7ff ff97 	bl	8000848 <runAndWait>
	HAL_Delay(500);
 800091a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800091e:	f000 fecf 	bl	80016c0 <HAL_Delay>
	//homing

	homing_flag |= (1 << 0);								//ホームピンに反応するまでモータ回す
 8000922:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <stepperHoming+0xc0>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	b2da      	uxtb	r2, r3
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <stepperHoming+0xc0>)
 800092e:	701a      	strb	r2, [r3, #0]
	steppers[0].minStepInterval = steppers[0].homing_vel;
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <stepperHoming+0xc4>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000934:	461a      	mov	r2, r3
 8000936:	4b17      	ldr	r3, [pc, #92]	; (8000994 <stepperHoming+0xc4>)
 8000938:	605a      	str	r2, [r3, #4]
	prepareMovement( -100000000);
 800093a:	4817      	ldr	r0, [pc, #92]	; (8000998 <stepperHoming+0xc8>)
 800093c:	f7ff fda4 	bl	8000488 <prepareMovement>
	runAndWait();
 8000940:	f7ff ff82 	bl	8000848 <runAndWait>
	HAL_Delay(500);
 8000944:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000948:	f000 feba 	bl	80016c0 <HAL_Delay>
	//pull-off
	homing_flag &= ~(1 << 0);
 800094c:	4b10      	ldr	r3, [pc, #64]	; (8000990 <stepperHoming+0xc0>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	f023 0301 	bic.w	r3, r3, #1
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <stepperHoming+0xc0>)
 8000958:	701a      	strb	r2, [r3, #0]
	prepareMovement(steppers[0].pull_off);
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <stepperHoming+0xc4>)
 800095c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fd92 	bl	8000488 <prepareMovement>
	runAndWait();
 8000964:	f7ff ff70 	bl	8000848 <runAndWait>
	HAL_Delay(500);
 8000968:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800096c:	f000 fea8 	bl	80016c0 <HAL_Delay>

	steppers[0].stepPosition = 0;
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <stepperHoming+0xc4>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
	steppers[0].homing = 1;
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <stepperHoming+0xc4>)
 8000978:	2201      	movs	r2, #1
 800097a:	741a      	strb	r2, [r3, #16]
	steppers[0].minStepInterval = 500;
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <stepperHoming+0xc4>)
 800097e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000982:	605a      	str	r2, [r3, #4]
	printf("homing:\r\n");
 8000984:	4805      	ldr	r0, [pc, #20]	; (800099c <stepperHoming+0xcc>)
 8000986:	f005 ff3f 	bl	8006808 <puts>

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200006cd 	.word	0x200006cd
 8000994:	2000067c 	.word	0x2000067c
 8000998:	fa0a1f00 	.word	0xfa0a1f00
 800099c:	080078f0 	.word	0x080078f0

080009a0 <TMCsetup>:

void TMCsetup(){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
	int32_t mstep_value = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t toff_value = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
	int32_t microstep_value = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
	int32_t IRUN_value = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61bb      	str	r3, [r7, #24]
	int32_t IHOLD_value = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
	int32_t IHOLDDELAY_value= 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
	int32_t stallgard_setup_value=0;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
	int32_t TCOOLTHRS_value=0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
	int32_t SEMIN_value=0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
	int32_t SEMAX_value=0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]

	IRUN_value = 20;
 80009ce:	2314      	movs	r3, #20
 80009d0:	61bb      	str	r3, [r7, #24]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT, IRUN_value);	//実行電流
 80009d2:	2110      	movs	r1, #16
 80009d4:	48be      	ldr	r0, [pc, #760]	; (8000cd0 <TMCsetup+0x330>)
 80009d6:	f005 fcc4 	bl	8006362 <tmc2209_readInt>
 80009da:	4603      	mov	r3, r0
 80009dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	021b      	lsls	r3, r3, #8
 80009e4:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80009e8:	4313      	orrs	r3, r2
 80009ea:	461a      	mov	r2, r3
 80009ec:	2110      	movs	r1, #16
 80009ee:	48b8      	ldr	r0, [pc, #736]	; (8000cd0 <TMCsetup+0x330>)
 80009f0:	f005 fc67 	bl	80062c2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80009f4:	f000 fe58 	bl	80016a8 <HAL_GetTick>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4619      	mov	r1, r3
 80009fc:	48b4      	ldr	r0, [pc, #720]	; (8000cd0 <TMCsetup+0x330>)
 80009fe:	f005 fde6 	bl	80065ce <tmc2209_periodicJob>
	HAL_Delay(100);
 8000a02:	2064      	movs	r0, #100	; 0x64
 8000a04:	f000 fe5c 	bl	80016c0 <HAL_Delay>
	IHOLD_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 8000a08:	2110      	movs	r1, #16
 8000a0a:	48b1      	ldr	r0, [pc, #708]	; (8000cd0 <TMCsetup+0x330>)
 8000a0c:	f005 fca9 	bl	8006362 <tmc2209_readInt>
 8000a10:	4603      	mov	r3, r0
 8000a12:	121b      	asrs	r3, r3, #8
 8000a14:	f003 031f 	and.w	r3, r3, #31
 8000a18:	617b      	str	r3, [r7, #20]
	printf("IRUN: %ld\r\n", IRUN_value);
 8000a1a:	69b9      	ldr	r1, [r7, #24]
 8000a1c:	48ad      	ldr	r0, [pc, #692]	; (8000cd4 <TMCsetup+0x334>)
 8000a1e:	f005 fe6d 	bl	80066fc <iprintf>

	IHOLD_value=3;																							//モーター待機時の電流の設定
 8000a22:	2303      	movs	r3, #3
 8000a24:	617b      	str	r3, [r7, #20]
	TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, IHOLD_value);
 8000a26:	2110      	movs	r1, #16
 8000a28:	48a9      	ldr	r0, [pc, #676]	; (8000cd0 <TMCsetup+0x330>)
 8000a2a:	f005 fc9a 	bl	8006362 <tmc2209_readInt>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	f023 021f 	bic.w	r2, r3, #31
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	f003 031f 	and.w	r3, r3, #31
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	2110      	movs	r1, #16
 8000a40:	48a3      	ldr	r0, [pc, #652]	; (8000cd0 <TMCsetup+0x330>)
 8000a42:	f005 fc3e 	bl	80062c2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000a46:	f000 fe2f 	bl	80016a8 <HAL_GetTick>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	48a0      	ldr	r0, [pc, #640]	; (8000cd0 <TMCsetup+0x330>)
 8000a50:	f005 fdbd 	bl	80065ce <tmc2209_periodicJob>
	HAL_Delay(100);
 8000a54:	2064      	movs	r0, #100	; 0x64
 8000a56:	f000 fe33 	bl	80016c0 <HAL_Delay>
	IHOLD_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);	//保持電流
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	489c      	ldr	r0, [pc, #624]	; (8000cd0 <TMCsetup+0x330>)
 8000a5e:	f005 fc80 	bl	8006362 <tmc2209_readInt>
 8000a62:	4603      	mov	r3, r0
 8000a64:	f003 031f 	and.w	r3, r3, #31
 8000a68:	617b      	str	r3, [r7, #20]
	printf("IHOLD: %ld\r\n", IHOLD_value);
 8000a6a:	6979      	ldr	r1, [r7, #20]
 8000a6c:	489a      	ldr	r0, [pc, #616]	; (8000cd8 <TMCsetup+0x338>)
 8000a6e:	f005 fe45 	bl	80066fc <iprintf>

	mstep_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK,TMC2209_MSTEP_REG_SELECT_SHIFT);	//uartでのmicrostepの有効化
 8000a72:	2100      	movs	r1, #0
 8000a74:	4896      	ldr	r0, [pc, #600]	; (8000cd0 <TMCsetup+0x330>)
 8000a76:	f005 fc74 	bl	8006362 <tmc2209_readInt>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	11db      	asrs	r3, r3, #7
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
	printf("mstep_before : %ld\r\n", mstep_value);
 8000a84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a86:	4895      	ldr	r0, [pc, #596]	; (8000cdc <TMCsetup+0x33c>)
 8000a88:	f005 fe38 	bl	80066fc <iprintf>
	mstep_value = 1;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT,mstep_value);
 8000a90:	2100      	movs	r1, #0
 8000a92:	488f      	ldr	r0, [pc, #572]	; (8000cd0 <TMCsetup+0x330>)
 8000a94:	f005 fc65 	bl	8006362 <tmc2209_readInt>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	01db      	lsls	r3, r3, #7
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4889      	ldr	r0, [pc, #548]	; (8000cd0 <TMCsetup+0x330>)
 8000aac:	f005 fc09 	bl	80062c2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000ab0:	f000 fdfa 	bl	80016a8 <HAL_GetTick>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4885      	ldr	r0, [pc, #532]	; (8000cd0 <TMCsetup+0x330>)
 8000aba:	f005 fd88 	bl	80065ce <tmc2209_periodicJob>
	mstep_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT);
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4883      	ldr	r0, [pc, #524]	; (8000cd0 <TMCsetup+0x330>)
 8000ac2:	f005 fc4e 	bl	8006362 <tmc2209_readInt>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	11db      	asrs	r3, r3, #7
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
	printf("mstep_after : %ld\r\n", mstep_value);
 8000ad0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ad2:	4883      	ldr	r0, [pc, #524]	; (8000ce0 <TMCsetup+0x340>)
 8000ad4:	f005 fe12 	bl	80066fc <iprintf>

	toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);	//保持トルクの設定
 8000ad8:	216c      	movs	r1, #108	; 0x6c
 8000ada:	487d      	ldr	r0, [pc, #500]	; (8000cd0 <TMCsetup+0x330>)
 8000adc:	f005 fc41 	bl	8006362 <tmc2209_readInt>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	623b      	str	r3, [r7, #32]
	printf("toff_before : %ld\r\n", toff_value);
 8000ae8:	6a39      	ldr	r1, [r7, #32]
 8000aea:	487e      	ldr	r0, [pc, #504]	; (8000ce4 <TMCsetup+0x344>)
 8000aec:	f005 fe06 	bl	80066fc <iprintf>
	toff_value = 4;
 8000af0:	2304      	movs	r3, #4
 8000af2:	623b      	str	r3, [r7, #32]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT,toff_value);
 8000af4:	216c      	movs	r1, #108	; 0x6c
 8000af6:	4876      	ldr	r0, [pc, #472]	; (8000cd0 <TMCsetup+0x330>)
 8000af8:	f005 fc33 	bl	8006362 <tmc2209_readInt>
 8000afc:	4603      	mov	r3, r0
 8000afe:	f023 020f 	bic.w	r2, r3, #15
 8000b02:	6a3b      	ldr	r3, [r7, #32]
 8000b04:	f003 030f 	and.w	r3, r3, #15
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	216c      	movs	r1, #108	; 0x6c
 8000b0e:	4870      	ldr	r0, [pc, #448]	; (8000cd0 <TMCsetup+0x330>)
 8000b10:	f005 fbd7 	bl	80062c2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000b14:	f000 fdc8 	bl	80016a8 <HAL_GetTick>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	486c      	ldr	r0, [pc, #432]	; (8000cd0 <TMCsetup+0x330>)
 8000b1e:	f005 fd56 	bl	80065ce <tmc2209_periodicJob>
	toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 8000b22:	216c      	movs	r1, #108	; 0x6c
 8000b24:	486a      	ldr	r0, [pc, #424]	; (8000cd0 <TMCsetup+0x330>)
 8000b26:	f005 fc1c 	bl	8006362 <tmc2209_readInt>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	f003 030f 	and.w	r3, r3, #15
 8000b30:	623b      	str	r3, [r7, #32]
	printf("toff_after : %ld\r\n", toff_value);
 8000b32:	6a39      	ldr	r1, [r7, #32]
 8000b34:	486c      	ldr	r0, [pc, #432]	; (8000ce8 <TMCsetup+0x348>)
 8000b36:	f005 fde1 	bl	80066fc <iprintf>

	microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);	//microstepの設定
 8000b3a:	216c      	movs	r1, #108	; 0x6c
 8000b3c:	4864      	ldr	r0, [pc, #400]	; (8000cd0 <TMCsetup+0x330>)
 8000b3e:	f005 fc10 	bl	8006362 <tmc2209_readInt>
 8000b42:	4603      	mov	r3, r0
 8000b44:	161b      	asrs	r3, r3, #24
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b4e:	fa42 f303 	asr.w	r3, r2, r3
 8000b52:	61fb      	str	r3, [r7, #28]
	printf("microstep_before : %ld\r\n", microstep_value);
 8000b54:	69f9      	ldr	r1, [r7, #28]
 8000b56:	4865      	ldr	r0, [pc, #404]	; (8000cec <TMCsetup+0x34c>)
 8000b58:	f005 fdd0 	bl	80066fc <iprintf>
	microstep_value = 4;
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	61fb      	str	r3, [r7, #28]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT,microstep_value);
 8000b60:	216c      	movs	r1, #108	; 0x6c
 8000b62:	485b      	ldr	r0, [pc, #364]	; (8000cd0 <TMCsetup+0x330>)
 8000b64:	f005 fbfd 	bl	8006362 <tmc2209_readInt>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	061b      	lsls	r3, r3, #24
 8000b72:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000b76:	4313      	orrs	r3, r2
 8000b78:	461a      	mov	r2, r3
 8000b7a:	216c      	movs	r1, #108	; 0x6c
 8000b7c:	4854      	ldr	r0, [pc, #336]	; (8000cd0 <TMCsetup+0x330>)
 8000b7e:	f005 fba0 	bl	80062c2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000b82:	f000 fd91 	bl	80016a8 <HAL_GetTick>
 8000b86:	4603      	mov	r3, r0
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4851      	ldr	r0, [pc, #324]	; (8000cd0 <TMCsetup+0x330>)
 8000b8c:	f005 fd1f 	bl	80065ce <tmc2209_periodicJob>
	microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);
 8000b90:	216c      	movs	r1, #108	; 0x6c
 8000b92:	484f      	ldr	r0, [pc, #316]	; (8000cd0 <TMCsetup+0x330>)
 8000b94:	f005 fbe5 	bl	8006362 <tmc2209_readInt>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	161b      	asrs	r3, r3, #24
 8000b9c:	f003 030f 	and.w	r3, r3, #15
 8000ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba4:	fa42 f303 	asr.w	r3, r2, r3
 8000ba8:	61fb      	str	r3, [r7, #28]
	printf("microstep_after : %ld\r\n", microstep_value);
 8000baa:	69f9      	ldr	r1, [r7, #28]
 8000bac:	4850      	ldr	r0, [pc, #320]	; (8000cf0 <TMCsetup+0x350>)
 8000bae:	f005 fda5 	bl	80066fc <iprintf>

	IHOLDDELAY_value=4;
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	613b      	str	r3, [r7, #16]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT, IHOLDDELAY_value);
 8000bb6:	2110      	movs	r1, #16
 8000bb8:	4845      	ldr	r0, [pc, #276]	; (8000cd0 <TMCsetup+0x330>)
 8000bba:	f005 fbd2 	bl	8006362 <tmc2209_readInt>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	041b      	lsls	r3, r3, #16
 8000bc8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	461a      	mov	r2, r3
 8000bd0:	2110      	movs	r1, #16
 8000bd2:	483f      	ldr	r0, [pc, #252]	; (8000cd0 <TMCsetup+0x330>)
 8000bd4:	f005 fb75 	bl	80062c2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000bd8:	f000 fd66 	bl	80016a8 <HAL_GetTick>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	4619      	mov	r1, r3
 8000be0:	483b      	ldr	r0, [pc, #236]	; (8000cd0 <TMCsetup+0x330>)
 8000be2:	f005 fcf4 	bl	80065ce <tmc2209_periodicJob>
	IHOLDDELAY_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT);
 8000be6:	2110      	movs	r1, #16
 8000be8:	4839      	ldr	r0, [pc, #228]	; (8000cd0 <TMCsetup+0x330>)
 8000bea:	f005 fbba 	bl	8006362 <tmc2209_readInt>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	141b      	asrs	r3, r3, #16
 8000bf2:	f003 030f 	and.w	r3, r3, #15
 8000bf6:	613b      	str	r3, [r7, #16]
	printf("IHOLDDELAY: %ld\r\n", IHOLDDELAY_value);
 8000bf8:	6939      	ldr	r1, [r7, #16]
 8000bfa:	483e      	ldr	r0, [pc, #248]	; (8000cf4 <TMCsetup+0x354>)
 8000bfc:	f005 fd7e 	bl	80066fc <iprintf>

	stallgard_setup_value=55;											//SG_RESULTと比較して、
 8000c00:	2337      	movs	r3, #55	; 0x37
 8000c02:	60fb      	str	r3, [r7, #12]
	tmc2209_writeInt(&TMC2209, TMC2209_SGTHRS, stallgard_setup_value);
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	2140      	movs	r1, #64	; 0x40
 8000c08:	4831      	ldr	r0, [pc, #196]	; (8000cd0 <TMCsetup+0x330>)
 8000c0a:	f005 fb5a 	bl	80062c2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000c0e:	f000 fd4b 	bl	80016a8 <HAL_GetTick>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4619      	mov	r1, r3
 8000c16:	482e      	ldr	r0, [pc, #184]	; (8000cd0 <TMCsetup+0x330>)
 8000c18:	f005 fcd9 	bl	80065ce <tmc2209_periodicJob>
	stallgard_setup_value = tmc2209_readInt(&TMC2209, TMC2209_SGTHRS);
 8000c1c:	2140      	movs	r1, #64	; 0x40
 8000c1e:	482c      	ldr	r0, [pc, #176]	; (8000cd0 <TMCsetup+0x330>)
 8000c20:	f005 fb9f 	bl	8006362 <tmc2209_readInt>
 8000c24:	60f8      	str	r0, [r7, #12]
	printf("SGTHRS: %ld\r\n", stallgard_setup_value);
 8000c26:	68f9      	ldr	r1, [r7, #12]
 8000c28:	4833      	ldr	r0, [pc, #204]	; (8000cf8 <TMCsetup+0x358>)
 8000c2a:	f005 fd67 	bl	80066fc <iprintf>

	TCOOLTHRS_value=1000;
 8000c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c32:	60bb      	str	r3, [r7, #8]

	tmc2209_writeInt(&TMC2209, TMC2209_TCOOLTHRS, TCOOLTHRS_value);
 8000c34:	68ba      	ldr	r2, [r7, #8]
 8000c36:	2114      	movs	r1, #20
 8000c38:	4825      	ldr	r0, [pc, #148]	; (8000cd0 <TMCsetup+0x330>)
 8000c3a:	f005 fb42 	bl	80062c2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000c3e:	f000 fd33 	bl	80016a8 <HAL_GetTick>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4619      	mov	r1, r3
 8000c46:	4822      	ldr	r0, [pc, #136]	; (8000cd0 <TMCsetup+0x330>)
 8000c48:	f005 fcc1 	bl	80065ce <tmc2209_periodicJob>
	printf("TCOOLTHRS: %ld\r\n", TCOOLTHRS_value);
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	482b      	ldr	r0, [pc, #172]	; (8000cfc <TMCsetup+0x35c>)
 8000c50:	f005 fd54 	bl	80066fc <iprintf>

	SEMIN_value=5;
 8000c54:	2305      	movs	r3, #5
 8000c56:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT, SEMIN_value);
 8000c58:	2142      	movs	r1, #66	; 0x42
 8000c5a:	481d      	ldr	r0, [pc, #116]	; (8000cd0 <TMCsetup+0x330>)
 8000c5c:	f005 fb81 	bl	8006362 <tmc2209_readInt>
 8000c60:	4603      	mov	r3, r0
 8000c62:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	03db      	lsls	r3, r3, #15
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	461a      	mov	r2, r3
 8000c70:	2142      	movs	r1, #66	; 0x42
 8000c72:	4817      	ldr	r0, [pc, #92]	; (8000cd0 <TMCsetup+0x330>)
 8000c74:	f005 fb25 	bl	80062c2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000c78:	f000 fd16 	bl	80016a8 <HAL_GetTick>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4813      	ldr	r0, [pc, #76]	; (8000cd0 <TMCsetup+0x330>)
 8000c82:	f005 fca4 	bl	80065ce <tmc2209_periodicJob>
	printf("SEMIN: %ld\r\n", SEMIN_value);
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	481d      	ldr	r0, [pc, #116]	; (8000d00 <TMCsetup+0x360>)
 8000c8a:	f005 fd37 	bl	80066fc <iprintf>

	SEMAX_value = 2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	603b      	str	r3, [r7, #0]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT, SEMIN_value);
 8000c92:	2142      	movs	r1, #66	; 0x42
 8000c94:	480e      	ldr	r0, [pc, #56]	; (8000cd0 <TMCsetup+0x330>)
 8000c96:	f005 fb64 	bl	8006362 <tmc2209_readInt>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	03db      	lsls	r3, r3, #15
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	461a      	mov	r2, r3
 8000caa:	2142      	movs	r1, #66	; 0x42
 8000cac:	4808      	ldr	r0, [pc, #32]	; (8000cd0 <TMCsetup+0x330>)
 8000cae:	f005 fb08 	bl	80062c2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000cb2:	f000 fcf9 	bl	80016a8 <HAL_GetTick>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <TMCsetup+0x330>)
 8000cbc:	f005 fc87 	bl	80065ce <tmc2209_periodicJob>
	printf("SEMAX: %ld\r\n", SEMAX_value);
 8000cc0:	6839      	ldr	r1, [r7, #0]
 8000cc2:	4810      	ldr	r0, [pc, #64]	; (8000d04 <TMCsetup+0x364>)
 8000cc4:	f005 fd1a 	bl	80066fc <iprintf>

}
 8000cc8:	bf00      	nop
 8000cca:	3728      	adds	r7, #40	; 0x28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200001e0 	.word	0x200001e0
 8000cd4:	080078fc 	.word	0x080078fc
 8000cd8:	08007908 	.word	0x08007908
 8000cdc:	08007918 	.word	0x08007918
 8000ce0:	08007930 	.word	0x08007930
 8000ce4:	08007944 	.word	0x08007944
 8000ce8:	08007958 	.word	0x08007958
 8000cec:	0800796c 	.word	0x0800796c
 8000cf0:	08007988 	.word	0x08007988
 8000cf4:	080079a0 	.word	0x080079a0
 8000cf8:	080079b4 	.word	0x080079b4
 8000cfc:	080079c4 	.word	0x080079c4
 8000d00:	080079d8 	.word	0x080079d8
 8000d04:	080079e8 	.word	0x080079e8

08000d08 <HAL_UART_RxCpltCallback>:

uint8_t uartflag1=0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	uartflag1 = 1;
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <HAL_UART_RxCpltCallback+0x1c>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	701a      	strb	r2, [r3, #0]
	printf("uart_timer\r\n");
 8000d16:	4804      	ldr	r0, [pc, #16]	; (8000d28 <HAL_UART_RxCpltCallback+0x20>)
 8000d18:	f005 fd76 	bl	8006808 <puts>

}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	200006d1 	.word	0x200006d1
 8000d28:	080079f8 	.word	0x080079f8

08000d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d2c:	b5b0      	push	{r4, r5, r7, lr}
 8000d2e:	b090      	sub	sp, #64	; 0x40
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8000d32:	4b64      	ldr	r3, [pc, #400]	; (8000ec4 <main+0x198>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f005 fd6c 	bl	8006818 <setbuf>
	char start[] ="0:initializeTMC,1:Absolute,2:Homing\r\n";
 8000d40:	4b61      	ldr	r3, [pc, #388]	; (8000ec8 <main+0x19c>)
 8000d42:	f107 0418 	add.w	r4, r7, #24
 8000d46:	461d      	mov	r5, r3
 8000d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d50:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d54:	6020      	str	r0, [r4, #0]
 8000d56:	3404      	adds	r4, #4
 8000d58:	8021      	strh	r1, [r4, #0]
	char nonans[] ="Not Understand \r\n";
 8000d5a:	4b5c      	ldr	r3, [pc, #368]	; (8000ecc <main+0x1a0>)
 8000d5c:	1d3c      	adds	r4, r7, #4
 8000d5e:	461d      	mov	r5, r3
 8000d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d64:	682b      	ldr	r3, [r5, #0]
 8000d66:	8023      	strh	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d68:	f000 fc44 	bl	80015f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6c:	f000 f8c8 	bl	8000f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d70:	f000 f9f2 	bl	8001158 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d74:	f000 f9c0 	bl	80010f8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000d78:	f000 f98e 	bl	8001098 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000d7c:	f000 f918 	bl	8000fb0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //int getserial=0;
  TMC2209_INIT();
 8000d80:	f7ff fac2 	bl	8000308 <TMC2209_INIT>
//rxbufを受信したらフラグを
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000d84:	2100      	movs	r1, #0
 8000d86:	4852      	ldr	r0, [pc, #328]	; (8000ed0 <main+0x1a4>)
 8000d88:	f002 fc52 	bl	8003630 <HAL_TIM_OC_Start_IT>
  printf("Hello\r\n");
 8000d8c:	4851      	ldr	r0, [pc, #324]	; (8000ed4 <main+0x1a8>)
 8000d8e:	f005 fd3b 	bl	8006808 <puts>
  HAL_UART_Transmit(&huart2,(uint8_t *)start,sizeof(start),3000);
 8000d92:	f107 0118 	add.w	r1, r7, #24
 8000d96:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000d9a:	2226      	movs	r2, #38	; 0x26
 8000d9c:	484e      	ldr	r0, [pc, #312]	; (8000ed8 <main+0x1ac>)
 8000d9e:	f003 fd1b 	bl	80047d8 <HAL_UART_Transmit>
  //uint8_t rxbuf[1];
   //int32_t *value=3;

   //TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT, 3 );
   //Set stepper 1
   steppers[0].dirFunc = Dir0;
 8000da2:	4b4e      	ldr	r3, [pc, #312]	; (8000edc <main+0x1b0>)
 8000da4:	4a4e      	ldr	r2, [pc, #312]	; (8000ee0 <main+0x1b4>)
 8000da6:	609a      	str	r2, [r3, #8]
   steppers[0].stepFunc = Step0;
 8000da8:	4b4c      	ldr	r3, [pc, #304]	; (8000edc <main+0x1b0>)
 8000daa:	4a4e      	ldr	r2, [pc, #312]	; (8000ee4 <main+0x1b8>)
 8000dac:	60da      	str	r2, [r3, #12]
   steppers[0].acceleration = 1000;
 8000dae:	4b4b      	ldr	r3, [pc, #300]	; (8000edc <main+0x1b0>)
 8000db0:	4a4d      	ldr	r2, [pc, #308]	; (8000ee8 <main+0x1bc>)
 8000db2:	601a      	str	r2, [r3, #0]
   steppers[0].minStepInterval = 100;
 8000db4:	4b49      	ldr	r3, [pc, #292]	; (8000edc <main+0x1b0>)
 8000db6:	2264      	movs	r2, #100	; 0x64
 8000db8:	605a      	str	r2, [r3, #4]
   steppers[0].homing = 0;
 8000dba:	4b48      	ldr	r3, [pc, #288]	; (8000edc <main+0x1b0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	741a      	strb	r2, [r3, #16]
   steppers[0].dir_inv = 1;
 8000dc0:	4b46      	ldr	r3, [pc, #280]	; (8000edc <main+0x1b0>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	621a      	str	r2, [r3, #32]
   steppers[0].seeking_vel = 100;
 8000dc6:	4b45      	ldr	r3, [pc, #276]	; (8000edc <main+0x1b0>)
 8000dc8:	2264      	movs	r2, #100	; 0x64
 8000dca:	62da      	str	r2, [r3, #44]	; 0x2c
   steppers[0].homing_vel = 200;
 8000dcc:	4b43      	ldr	r3, [pc, #268]	; (8000edc <main+0x1b0>)
 8000dce:	22c8      	movs	r2, #200	; 0xc8
 8000dd0:	631a      	str	r2, [r3, #48]	; 0x30
   steppers[0].pull_off = 500;
 8000dd2:	4b42      	ldr	r3, [pc, #264]	; (8000edc <main+0x1b0>)
 8000dd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
   steppers[0].stall_off=10000;
 8000dda:	4b40      	ldr	r3, [pc, #256]	; (8000edc <main+0x1b0>)
 8000ddc:	f242 7210 	movw	r2, #10000	; 0x2710
 8000de0:	629a      	str	r2, [r3, #40]	; 0x28
   uartflag1=0;
 8000de2:	4b42      	ldr	r3, [pc, #264]	; (8000eec <main+0x1c0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
   rxbuf[0]=0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	703b      	strb	r3, [r7, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //example read register value
	  //int32_t value = 0;
	  HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf,sizeof(rxbuf));
 8000dec:	463b      	mov	r3, r7
 8000dee:	2201      	movs	r2, #1
 8000df0:	4619      	mov	r1, r3
 8000df2:	4839      	ldr	r0, [pc, #228]	; (8000ed8 <main+0x1ac>)
 8000df4:	f003 fec4 	bl	8004b80 <HAL_UART_Receive_IT>
	  HAL_UART_Transmit_IT(&huart2,(uint8_t *)rxbuf,sizeof(rxbuf));
 8000df8:	463b      	mov	r3, r7
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4836      	ldr	r0, [pc, #216]	; (8000ed8 <main+0x1ac>)
 8000e00:	f003 fe50 	bl	8004aa4 <HAL_UART_Transmit_IT>

	  if(uartflag1==1){
 8000e04:	4b39      	ldr	r3, [pc, #228]	; (8000eec <main+0x1c0>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d1ef      	bne.n	8000dec <main+0xc0>
		  printf("rxbuf 2 %d\r\n",rxbuf[0]);
 8000e0c:	783b      	ldrb	r3, [r7, #0]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4837      	ldr	r0, [pc, #220]	; (8000ef0 <main+0x1c4>)
 8000e12:	f005 fc73 	bl	80066fc <iprintf>
		  if(rxbuf[0]!=0)
 8000e16:	783b      	ldrb	r3, [r7, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0e7      	beq.n	8000dec <main+0xc0>
		  {
			  switch(rxbuf[0])
 8000e1c:	783b      	ldrb	r3, [r7, #0]
 8000e1e:	3b30      	subs	r3, #48	; 0x30
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	d842      	bhi.n	8000eaa <main+0x17e>
 8000e24:	a201      	add	r2, pc, #4	; (adr r2, 8000e2c <main+0x100>)
 8000e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2a:	bf00      	nop
 8000e2c:	08000e41 	.word	0x08000e41
 8000e30:	08000e4b 	.word	0x08000e4b
 8000e34:	08000e6f 	.word	0x08000e6f
 8000e38:	08000e91 	.word	0x08000e91
 8000e3c:	08000ea3 	.word	0x08000ea3
			  {
				  case '0':
					  TMCsetup();
 8000e40:	f7ff fdae 	bl	80009a0 <TMCsetup>
					  rxbuf[0]=0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	703b      	strb	r3, [r7, #0]
					  break;
 8000e48:	e038      	b.n	8000ebc <main+0x190>
				  case '1':
					  //HAL_UART_Transmit_IT(&huart2,(uint8_t *)front, sizeof(front));
					  printf("1:start\r\n");
 8000e4a:	482a      	ldr	r0, [pc, #168]	; (8000ef4 <main+0x1c8>)
 8000e4c:	f005 fcdc 	bl	8006808 <puts>
					  prepareAbsoluteMovement(20000);
 8000e50:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000e54:	f7ff fb62 	bl	800051c <prepareAbsoluteMovement>
					  runAndWait();
 8000e58:	f7ff fcf6 	bl	8000848 <runAndWait>
					  HAL_Delay(100);
 8000e5c:	2064      	movs	r0, #100	; 0x64
 8000e5e:	f000 fc2f 	bl	80016c0 <HAL_Delay>
					  printf("1:end\r\n");
 8000e62:	4825      	ldr	r0, [pc, #148]	; (8000ef8 <main+0x1cc>)
 8000e64:	f005 fcd0 	bl	8006808 <puts>
					  rxbuf[0]=0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	703b      	strb	r3, [r7, #0]
					  break;
 8000e6c:	e026      	b.n	8000ebc <main+0x190>

				  case '2':
					  printf("1:start\r\n");
 8000e6e:	4821      	ldr	r0, [pc, #132]	; (8000ef4 <main+0x1c8>)
 8000e70:	f005 fcca 	bl	8006808 <puts>
					  prepareAbsoluteMovement(-5000);
 8000e74:	4821      	ldr	r0, [pc, #132]	; (8000efc <main+0x1d0>)
 8000e76:	f7ff fb51 	bl	800051c <prepareAbsoluteMovement>
					  runAndWait();
 8000e7a:	f7ff fce5 	bl	8000848 <runAndWait>
					  HAL_Delay(100);
 8000e7e:	2064      	movs	r0, #100	; 0x64
 8000e80:	f000 fc1e 	bl	80016c0 <HAL_Delay>
					  printf("1:end\r\n");
 8000e84:	481c      	ldr	r0, [pc, #112]	; (8000ef8 <main+0x1cc>)
 8000e86:	f005 fcbf 	bl	8006808 <puts>
					  rxbuf[0]=0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	703b      	strb	r3, [r7, #0]
					  break;
 8000e8e:	e015      	b.n	8000ebc <main+0x190>

				  case '3':
					  stepperHoming();
 8000e90:	f7ff fd1e 	bl	80008d0 <stepperHoming>
					  runAndWait();
 8000e94:	f7ff fcd8 	bl	8000848 <runAndWait>
					  HAL_Delay(100);
 8000e98:	2064      	movs	r0, #100	; 0x64
 8000e9a:	f000 fc11 	bl	80016c0 <HAL_Delay>
					  rxbuf[0]=0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	703b      	strb	r3, [r7, #0]

				  case '4':
					  AbsoluteReset();
 8000ea2:	f7ff fcef 	bl	8000884 <AbsoluteReset>
					  rxbuf[0]=0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	703b      	strb	r3, [r7, #0]
				  default:
					  HAL_UART_Transmit_IT(&huart2,(uint8_t *)nonans, sizeof(nonans));
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2212      	movs	r2, #18
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <main+0x1ac>)
 8000eb2:	f003 fdf7 	bl	8004aa4 <HAL_UART_Transmit_IT>
					  rxbuf[0]=0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	703b      	strb	r3, [r7, #0]
					  break;
 8000eba:	bf00      	nop
			  }
			  uartflag1=0;
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <main+0x1c0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf,sizeof(rxbuf));
 8000ec2:	e793      	b.n	8000dec <main+0xc0>
 8000ec4:	2000000c 	.word	0x2000000c
 8000ec8:	08007a30 	.word	0x08007a30
 8000ecc:	08007a58 	.word	0x08007a58
 8000ed0:	2000008c 	.word	0x2000008c
 8000ed4:	08007a04 	.word	0x08007a04
 8000ed8:	2000015c 	.word	0x2000015c
 8000edc:	2000067c 	.word	0x2000067c
 8000ee0:	08000401 	.word	0x08000401
 8000ee4:	080003e1 	.word	0x080003e1
 8000ee8:	447a0000 	.word	0x447a0000
 8000eec:	200006d1 	.word	0x200006d1
 8000ef0:	08007a0c 	.word	0x08007a0c
 8000ef4:	08007a1c 	.word	0x08007a1c
 8000ef8:	08007a28 	.word	0x08007a28
 8000efc:	ffffec78 	.word	0xffffec78

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b096      	sub	sp, #88	; 0x58
 8000f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f0a:	2228      	movs	r2, #40	; 0x28
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f005 fbec 	bl	80066ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]
 8000f32:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f34:	2302      	movs	r3, #2
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3c:	2310      	movs	r3, #16
 8000f3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f40:	2302      	movs	r3, #2
 8000f42:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f44:	2300      	movs	r3, #0
 8000f46:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f48:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f4c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 ff1a 	bl	8001d8c <HAL_RCC_OscConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000f5e:	f000 f96f 	bl	8001240 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f62:	230f      	movs	r3, #15
 8000f64:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f66:	2302      	movs	r3, #2
 8000f68:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f001 ff42 	bl	8002e08 <HAL_RCC_ClockConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f8a:	f000 f959 	bl	8001240 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f002 f96b 	bl	8003274 <HAL_RCCEx_PeriphCLKConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000fa4:	f000 f94c 	bl	8001240 <Error_Handler>
  }
}
 8000fa8:	bf00      	nop
 8000faa:	3758      	adds	r7, #88	; 0x58
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08e      	sub	sp, #56	; 0x38
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]
 8000fde:	615a      	str	r2, [r3, #20]
 8000fe0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fe2:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <MX_TIM3_Init+0xe0>)
 8000fe4:	4a2b      	ldr	r2, [pc, #172]	; (8001094 <MX_TIM3_Init+0xe4>)
 8000fe6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8000fe8:	4b29      	ldr	r3, [pc, #164]	; (8001090 <MX_TIM3_Init+0xe0>)
 8000fea:	223f      	movs	r2, #63	; 0x3f
 8000fec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fee:	4b28      	ldr	r3, [pc, #160]	; (8001090 <MX_TIM3_Init+0xe0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ff4:	4b26      	ldr	r3, [pc, #152]	; (8001090 <MX_TIM3_Init+0xe0>)
 8000ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ffa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffc:	4b24      	ldr	r3, [pc, #144]	; (8001090 <MX_TIM3_Init+0xe0>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001002:	4b23      	ldr	r3, [pc, #140]	; (8001090 <MX_TIM3_Init+0xe0>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001008:	4821      	ldr	r0, [pc, #132]	; (8001090 <MX_TIM3_Init+0xe0>)
 800100a:	f002 fa59 	bl	80034c0 <HAL_TIM_Base_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001014:	f000 f914 	bl	8001240 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800101e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001022:	4619      	mov	r1, r3
 8001024:	481a      	ldr	r0, [pc, #104]	; (8001090 <MX_TIM3_Init+0xe0>)
 8001026:	f002 fdd7 	bl	8003bd8 <HAL_TIM_ConfigClockSource>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001030:	f000 f906 	bl	8001240 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001034:	4816      	ldr	r0, [pc, #88]	; (8001090 <MX_TIM3_Init+0xe0>)
 8001036:	f002 fa9a 	bl	800356e <HAL_TIM_OC_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001040:	f000 f8fe 	bl	8001240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	4619      	mov	r1, r3
 8001052:	480f      	ldr	r0, [pc, #60]	; (8001090 <MX_TIM3_Init+0xe0>)
 8001054:	f003 fa90 	bl	8004578 <HAL_TIMEx_MasterConfigSynchronization>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800105e:	f000 f8ef 	bl	8001240 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001062:	2300      	movs	r3, #0
 8001064:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001072:	463b      	mov	r3, r7
 8001074:	2200      	movs	r2, #0
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_TIM3_Init+0xe0>)
 800107a:	f002 fd33 	bl	8003ae4 <HAL_TIM_OC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001084:	f000 f8dc 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3738      	adds	r7, #56	; 0x38
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000008c 	.word	0x2000008c
 8001094:	40000400 	.word	0x40000400

08001098 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <MX_USART1_UART_Init+0x54>)
 800109e:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <MX_USART1_UART_Init+0x58>)
 80010a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_USART1_UART_Init+0x54>)
 80010a4:	4a13      	ldr	r2, [pc, #76]	; (80010f4 <MX_USART1_UART_Init+0x5c>)
 80010a6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010a8:	4b10      	ldr	r3, [pc, #64]	; (80010ec <MX_USART1_UART_Init+0x54>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_USART1_UART_Init+0x54>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010b4:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <MX_USART1_UART_Init+0x54>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_USART1_UART_Init+0x54>)
 80010bc:	220c      	movs	r2, #12
 80010be:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <MX_USART1_UART_Init+0x54>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_USART1_UART_Init+0x54>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <MX_USART1_UART_Init+0x54>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_USART1_UART_Init+0x54>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_USART1_UART_Init+0x54>)
 80010da:	f003 fb27 	bl	800472c <HAL_HalfDuplex_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 80010e4:	f000 f8ac 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200000d8 	.word	0x200000d8
 80010f0:	40013800 	.word	0x40013800
 80010f4:	0007a120 	.word	0x0007a120

080010f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_USART2_UART_Init+0x58>)
 80010fe:	4a15      	ldr	r2, [pc, #84]	; (8001154 <MX_USART2_UART_Init+0x5c>)
 8001100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001108:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_USART2_UART_Init+0x58>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_USART2_UART_Init+0x58>)
 800111e:	220c      	movs	r2, #12
 8001120:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_USART2_UART_Init+0x58>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001136:	2200      	movs	r2, #0
 8001138:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_USART2_UART_Init+0x58>)
 800113c:	f003 faa8 	bl	8004690 <HAL_UART_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001146:	f000 f87b 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000015c 	.word	0x2000015c
 8001154:	40004400 	.word	0x40004400

08001158 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800116e:	4b28      	ldr	r3, [pc, #160]	; (8001210 <MX_GPIO_Init+0xb8>)
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	4a27      	ldr	r2, [pc, #156]	; (8001210 <MX_GPIO_Init+0xb8>)
 8001174:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001178:	6153      	str	r3, [r2, #20]
 800117a:	4b25      	ldr	r3, [pc, #148]	; (8001210 <MX_GPIO_Init+0xb8>)
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	4b22      	ldr	r3, [pc, #136]	; (8001210 <MX_GPIO_Init+0xb8>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	4a21      	ldr	r2, [pc, #132]	; (8001210 <MX_GPIO_Init+0xb8>)
 800118c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001190:	6153      	str	r3, [r2, #20]
 8001192:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <MX_GPIO_Init+0xb8>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <MX_GPIO_Init+0xb8>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	4a1b      	ldr	r2, [pc, #108]	; (8001210 <MX_GPIO_Init+0xb8>)
 80011a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a8:	6153      	str	r3, [r2, #20]
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <MX_GPIO_Init+0xb8>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2130      	movs	r1, #48	; 0x30
 80011ba:	4816      	ldr	r0, [pc, #88]	; (8001214 <MX_GPIO_Init+0xbc>)
 80011bc:	f000 fdb6 	bl	8001d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011c0:	2330      	movs	r3, #48	; 0x30
 80011c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	4619      	mov	r1, r3
 80011d6:	480f      	ldr	r0, [pc, #60]	; (8001214 <MX_GPIO_Init+0xbc>)
 80011d8:	f000 fc1e 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011dc:	23c0      	movs	r3, #192	; 0xc0
 80011de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80011e0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80011e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	4619      	mov	r1, r3
 80011f0:	4808      	ldr	r0, [pc, #32]	; (8001214 <MX_GPIO_Init+0xbc>)
 80011f2:	f000 fc11 	bl	8001a18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2101      	movs	r1, #1
 80011fa:	2017      	movs	r0, #23
 80011fc:	f000 fb5f 	bl	80018be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001200:	2017      	movs	r0, #23
 8001202:	f000 fb78 	bl	80018f6 <HAL_NVIC_EnableIRQ>

}
 8001206:	bf00      	nop
 8001208:	3720      	adds	r7, #32
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40021000 	.word	0x40021000
 8001214:	48000400 	.word	0x48000400

08001218 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	b29a      	uxth	r2, r3
 8001228:	230a      	movs	r3, #10
 800122a:	68b9      	ldr	r1, [r7, #8]
 800122c:	4803      	ldr	r0, [pc, #12]	; (800123c <_write+0x24>)
 800122e:	f003 fad3 	bl	80047d8 <HAL_UART_Transmit>
  return len;
 8001232:	687b      	ldr	r3, [r7, #4]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	2000015c 	.word	0x2000015c

08001240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001244:	b672      	cpsid	i
}
 8001246:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001248:	e7fe      	b.n	8001248 <Error_Handler+0x8>
	...

0800124c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <HAL_MspInit+0x44>)
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <HAL_MspInit+0x44>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6193      	str	r3, [r2, #24]
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <HAL_MspInit+0x44>)
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_MspInit+0x44>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	4a08      	ldr	r2, [pc, #32]	; (8001290 <HAL_MspInit+0x44>)
 8001270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001274:	61d3      	str	r3, [r2, #28]
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_MspInit+0x44>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000

08001294 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <HAL_TIM_Base_MspInit+0x44>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d113      	bne.n	80012ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <HAL_TIM_Base_MspInit+0x48>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	4a0c      	ldr	r2, [pc, #48]	; (80012dc <HAL_TIM_Base_MspInit+0x48>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	61d3      	str	r3, [r2, #28]
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_TIM_Base_MspInit+0x48>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2102      	movs	r1, #2
 80012c2:	201d      	movs	r0, #29
 80012c4:	f000 fafb 	bl	80018be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012c8:	201d      	movs	r0, #29
 80012ca:	f000 fb14 	bl	80018f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40000400 	.word	0x40000400
 80012dc:	40021000 	.word	0x40021000

080012e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08c      	sub	sp, #48	; 0x30
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a34      	ldr	r2, [pc, #208]	; (80013d0 <HAL_UART_MspInit+0xf0>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d12a      	bne.n	8001358 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001302:	4b34      	ldr	r3, [pc, #208]	; (80013d4 <HAL_UART_MspInit+0xf4>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	4a33      	ldr	r2, [pc, #204]	; (80013d4 <HAL_UART_MspInit+0xf4>)
 8001308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130c:	6193      	str	r3, [r2, #24]
 800130e:	4b31      	ldr	r3, [pc, #196]	; (80013d4 <HAL_UART_MspInit+0xf4>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001316:	61bb      	str	r3, [r7, #24]
 8001318:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	4b2e      	ldr	r3, [pc, #184]	; (80013d4 <HAL_UART_MspInit+0xf4>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	4a2d      	ldr	r2, [pc, #180]	; (80013d4 <HAL_UART_MspInit+0xf4>)
 8001320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001324:	6153      	str	r3, [r2, #20]
 8001326:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <HAL_UART_MspInit+0xf4>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001332:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001338:	2312      	movs	r3, #18
 800133a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001344:	2307      	movs	r3, #7
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001352:	f000 fb61 	bl	8001a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001356:	e036      	b.n	80013c6 <HAL_UART_MspInit+0xe6>
  else if(huart->Instance==USART2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a1e      	ldr	r2, [pc, #120]	; (80013d8 <HAL_UART_MspInit+0xf8>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d131      	bne.n	80013c6 <HAL_UART_MspInit+0xe6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <HAL_UART_MspInit+0xf4>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	4a1b      	ldr	r2, [pc, #108]	; (80013d4 <HAL_UART_MspInit+0xf4>)
 8001368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136c:	61d3      	str	r3, [r2, #28]
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_UART_MspInit+0xf4>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_UART_MspInit+0xf4>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	4a15      	ldr	r2, [pc, #84]	; (80013d4 <HAL_UART_MspInit+0xf4>)
 8001380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001384:	6153      	str	r3, [r2, #20]
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HAL_UART_MspInit+0xf4>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001392:	f248 0304 	movw	r3, #32772	; 0x8004
 8001396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013a4:	2307      	movs	r3, #7
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	4619      	mov	r1, r3
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b2:	f000 fb31 	bl	8001a18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	2026      	movs	r0, #38	; 0x26
 80013bc:	f000 fa7f 	bl	80018be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013c0:	2026      	movs	r0, #38	; 0x26
 80013c2:	f000 fa98 	bl	80018f6 <HAL_NVIC_EnableIRQ>
}
 80013c6:	bf00      	nop
 80013c8:	3730      	adds	r7, #48	; 0x30
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40013800 	.word	0x40013800
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40004400 	.word	0x40004400

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <NMI_Handler+0x4>

080013e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <HardFault_Handler+0x4>

080013e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <MemManage_Handler+0x4>

080013ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <BusFault_Handler+0x4>

080013f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <UsageFault_Handler+0x4>

080013fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001428:	f000 f92a 	bl	8001680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}

08001430 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001434:	2040      	movs	r0, #64	; 0x40
 8001436:	f000 fc91 	bl	8001d5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800143a:	2080      	movs	r0, #128	; 0x80
 800143c:	f000 fc8e 	bl	8001d5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}

08001444 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <TIM3_IRQHandler+0x10>)
 800144a:	f002 fa2b 	bl	80038a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2000008c 	.word	0x2000008c

08001458 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <USART2_IRQHandler+0x10>)
 800145e:	f003 fbdd 	bl	8004c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2000015c 	.word	0x2000015c

0800146c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	e00a      	b.n	8001494 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800147e:	f3af 8000 	nop.w
 8001482:	4601      	mov	r1, r0
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	60ba      	str	r2, [r7, #8]
 800148a:	b2ca      	uxtb	r2, r1
 800148c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	3301      	adds	r3, #1
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	429a      	cmp	r2, r3
 800149a:	dbf0      	blt.n	800147e <_read+0x12>
	}

return len;
 800149c:	687b      	ldr	r3, [r7, #4]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
	return -1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ce:	605a      	str	r2, [r3, #4]
	return 0;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <_isatty>:

int _isatty(int file)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
	return 1;
 80014e6:	2301      	movs	r3, #1
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001518:	4a14      	ldr	r2, [pc, #80]	; (800156c <_sbrk+0x5c>)
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <_sbrk+0x60>)
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <_sbrk+0x64>)
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <_sbrk+0x68>)
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	429a      	cmp	r2, r3
 800153e:	d207      	bcs.n	8001550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001540:	f005 f8aa 	bl	8006698 <__errno>
 8001544:	4603      	mov	r3, r0
 8001546:	220c      	movs	r2, #12
 8001548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800154e:	e009      	b.n	8001564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <_sbrk+0x64>)
 8001560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20003000 	.word	0x20003000
 8001570:	00000400 	.word	0x00000400
 8001574:	200006d4 	.word	0x200006d4
 8001578:	200008f0 	.word	0x200008f0

0800157c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <SystemInit+0x20>)
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001586:	4a05      	ldr	r2, [pc, #20]	; (800159c <SystemInit+0x20>)
 8001588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800158c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a4:	480d      	ldr	r0, [pc, #52]	; (80015dc <LoopForever+0x6>)
  ldr r1, =_edata
 80015a6:	490e      	ldr	r1, [pc, #56]	; (80015e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015a8:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <LoopForever+0xe>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ac:	e002      	b.n	80015b4 <LoopCopyDataInit>

080015ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b2:	3304      	adds	r3, #4

080015b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b8:	d3f9      	bcc.n	80015ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ba:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015bc:	4c0b      	ldr	r4, [pc, #44]	; (80015ec <LoopForever+0x16>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c0:	e001      	b.n	80015c6 <LoopFillZerobss>

080015c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c4:	3204      	adds	r2, #4

080015c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c8:	d3fb      	bcc.n	80015c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015ca:	f7ff ffd7 	bl	800157c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ce:	f005 f869 	bl	80066a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015d2:	f7ff fbab 	bl	8000d2c <main>

080015d6 <LoopForever>:

LoopForever:
    b LoopForever
 80015d6:	e7fe      	b.n	80015d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015d8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80015dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015e4:	08007dc4 	.word	0x08007dc4
  ldr r2, =_sbss
 80015e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80015ec:	200008f0 	.word	0x200008f0

080015f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015f0:	e7fe      	b.n	80015f0 <ADC1_2_IRQHandler>
	...

080015f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <HAL_Init+0x28>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a07      	ldr	r2, [pc, #28]	; (800161c <HAL_Init+0x28>)
 80015fe:	f043 0310 	orr.w	r3, r3, #16
 8001602:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001604:	2003      	movs	r0, #3
 8001606:	f000 f94f 	bl	80018a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160a:	2000      	movs	r0, #0
 800160c:	f000 f808 	bl	8001620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001610:	f7ff fe1c 	bl	800124c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40022000 	.word	0x40022000

08001620 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_InitTick+0x54>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_InitTick+0x58>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001636:	fbb3 f3f1 	udiv	r3, r3, r1
 800163a:	fbb2 f3f3 	udiv	r3, r2, r3
 800163e:	4618      	mov	r0, r3
 8001640:	f000 f967 	bl	8001912 <HAL_SYSTICK_Config>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e00e      	b.n	800166c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b0f      	cmp	r3, #15
 8001652:	d80a      	bhi.n	800166a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001654:	2200      	movs	r2, #0
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800165c:	f000 f92f 	bl	80018be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001660:	4a06      	ldr	r2, [pc, #24]	; (800167c <HAL_InitTick+0x5c>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	e000      	b.n	800166c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000000 	.word	0x20000000
 8001678:	20000008 	.word	0x20000008
 800167c:	20000004 	.word	0x20000004

08001680 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_IncTick+0x20>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_IncTick+0x24>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4413      	add	r3, r2
 8001690:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <HAL_IncTick+0x24>)
 8001692:	6013      	str	r3, [r2, #0]
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000008 	.word	0x20000008
 80016a4:	200006d8 	.word	0x200006d8

080016a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80016ac:	4b03      	ldr	r3, [pc, #12]	; (80016bc <HAL_GetTick+0x14>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	200006d8 	.word	0x200006d8

080016c0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c8:	f7ff ffee 	bl	80016a8 <HAL_GetTick>
 80016cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016d8:	d005      	beq.n	80016e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_Delay+0x44>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4413      	add	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80016e6:	bf00      	nop
 80016e8:	f7ff ffde 	bl	80016a8 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d8f7      	bhi.n	80016e8 <HAL_Delay+0x28>
  {
  }
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000008 	.word	0x20000008

08001708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <__NVIC_SetPriorityGrouping+0x44>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001724:	4013      	ands	r3, r2
 8001726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173a:	4a04      	ldr	r2, [pc, #16]	; (800174c <__NVIC_SetPriorityGrouping+0x44>)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	60d3      	str	r3, [r2, #12]
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <__NVIC_GetPriorityGrouping+0x18>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	0a1b      	lsrs	r3, r3, #8
 800175a:	f003 0307 	and.w	r3, r3, #7
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	2b00      	cmp	r3, #0
 800177c:	db0b      	blt.n	8001796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	f003 021f 	and.w	r2, r3, #31
 8001784:	4907      	ldr	r1, [pc, #28]	; (80017a4 <__NVIC_EnableIRQ+0x38>)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	095b      	lsrs	r3, r3, #5
 800178c:	2001      	movs	r0, #1
 800178e:	fa00 f202 	lsl.w	r2, r0, r2
 8001792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000e100 	.word	0xe000e100

080017a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	db0a      	blt.n	80017d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	490c      	ldr	r1, [pc, #48]	; (80017f4 <__NVIC_SetPriority+0x4c>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	0112      	lsls	r2, r2, #4
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	440b      	add	r3, r1
 80017cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d0:	e00a      	b.n	80017e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4908      	ldr	r1, [pc, #32]	; (80017f8 <__NVIC_SetPriority+0x50>)
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	3b04      	subs	r3, #4
 80017e0:	0112      	lsls	r2, r2, #4
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	440b      	add	r3, r1
 80017e6:	761a      	strb	r2, [r3, #24]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000e100 	.word	0xe000e100
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	; 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f1c3 0307 	rsb	r3, r3, #7
 8001816:	2b04      	cmp	r3, #4
 8001818:	bf28      	it	cs
 800181a:	2304      	movcs	r3, #4
 800181c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3304      	adds	r3, #4
 8001822:	2b06      	cmp	r3, #6
 8001824:	d902      	bls.n	800182c <NVIC_EncodePriority+0x30>
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3b03      	subs	r3, #3
 800182a:	e000      	b.n	800182e <NVIC_EncodePriority+0x32>
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43da      	mvns	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	401a      	ands	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001844:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa01 f303 	lsl.w	r3, r1, r3
 800184e:	43d9      	mvns	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	4313      	orrs	r3, r2
         );
}
 8001856:	4618      	mov	r0, r3
 8001858:	3724      	adds	r7, #36	; 0x24
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001874:	d301      	bcc.n	800187a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001876:	2301      	movs	r3, #1
 8001878:	e00f      	b.n	800189a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <SysTick_Config+0x40>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001882:	210f      	movs	r1, #15
 8001884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001888:	f7ff ff8e 	bl	80017a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <SysTick_Config+0x40>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001892:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <SysTick_Config+0x40>)
 8001894:	2207      	movs	r2, #7
 8001896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	e000e010 	.word	0xe000e010

080018a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ff29 	bl	8001708 <__NVIC_SetPriorityGrouping>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d0:	f7ff ff3e 	bl	8001750 <__NVIC_GetPriorityGrouping>
 80018d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	68b9      	ldr	r1, [r7, #8]
 80018da:	6978      	ldr	r0, [r7, #20]
 80018dc:	f7ff ff8e 	bl	80017fc <NVIC_EncodePriority>
 80018e0:	4602      	mov	r2, r0
 80018e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e6:	4611      	mov	r1, r2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff5d 	bl	80017a8 <__NVIC_SetPriority>
}
 80018ee:	bf00      	nop
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff31 	bl	800176c <__NVIC_EnableIRQ>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff ffa2 	bl	8001864 <SysTick_Config>
 8001920:	4603      	mov	r3, r0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001938:	2b02      	cmp	r3, #2
 800193a:	d008      	beq.n	800194e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2204      	movs	r2, #4
 8001940:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e020      	b.n	8001990 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 020e 	bic.w	r2, r2, #14
 800195c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0201 	bic.w	r2, r2, #1
 800196c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001976:	2101      	movs	r1, #1
 8001978:	fa01 f202 	lsl.w	r2, r1, r2
 800197c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d005      	beq.n	80019be <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2204      	movs	r2, #4
 80019b6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	e027      	b.n	8001a0e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 020e 	bic.w	r2, r2, #14
 80019cc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0201 	bic.w	r2, r2, #1
 80019dc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e6:	2101      	movs	r1, #1
 80019e8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ec:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	4798      	blx	r3
    } 
  }
  return status;
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a26:	e14e      	b.n	8001cc6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	fa01 f303 	lsl.w	r3, r1, r3
 8001a34:	4013      	ands	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 8140 	beq.w	8001cc0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d005      	beq.n	8001a58 <HAL_GPIO_Init+0x40>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d130      	bne.n	8001aba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	2203      	movs	r2, #3
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a8e:	2201      	movs	r2, #1
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	091b      	lsrs	r3, r3, #4
 8001aa4:	f003 0201 	and.w	r2, r3, #1
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d017      	beq.n	8001af6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4013      	ands	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d123      	bne.n	8001b4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	08da      	lsrs	r2, r3, #3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3208      	adds	r2, #8
 8001b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	220f      	movs	r2, #15
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	691a      	ldr	r2, [r3, #16]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	08da      	lsrs	r2, r3, #3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3208      	adds	r2, #8
 8001b44:	6939      	ldr	r1, [r7, #16]
 8001b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	2203      	movs	r2, #3
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0203 	and.w	r2, r3, #3
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 809a 	beq.w	8001cc0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8c:	4b55      	ldr	r3, [pc, #340]	; (8001ce4 <HAL_GPIO_Init+0x2cc>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	4a54      	ldr	r2, [pc, #336]	; (8001ce4 <HAL_GPIO_Init+0x2cc>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	6193      	str	r3, [r2, #24]
 8001b98:	4b52      	ldr	r3, [pc, #328]	; (8001ce4 <HAL_GPIO_Init+0x2cc>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ba4:	4a50      	ldr	r2, [pc, #320]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	089b      	lsrs	r3, r3, #2
 8001baa:	3302      	adds	r3, #2
 8001bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	220f      	movs	r2, #15
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bce:	d013      	beq.n	8001bf8 <HAL_GPIO_Init+0x1e0>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a46      	ldr	r2, [pc, #280]	; (8001cec <HAL_GPIO_Init+0x2d4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d00d      	beq.n	8001bf4 <HAL_GPIO_Init+0x1dc>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a45      	ldr	r2, [pc, #276]	; (8001cf0 <HAL_GPIO_Init+0x2d8>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d007      	beq.n	8001bf0 <HAL_GPIO_Init+0x1d8>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a44      	ldr	r2, [pc, #272]	; (8001cf4 <HAL_GPIO_Init+0x2dc>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d101      	bne.n	8001bec <HAL_GPIO_Init+0x1d4>
 8001be8:	2303      	movs	r3, #3
 8001bea:	e006      	b.n	8001bfa <HAL_GPIO_Init+0x1e2>
 8001bec:	2305      	movs	r3, #5
 8001bee:	e004      	b.n	8001bfa <HAL_GPIO_Init+0x1e2>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e002      	b.n	8001bfa <HAL_GPIO_Init+0x1e2>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <HAL_GPIO_Init+0x1e2>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	f002 0203 	and.w	r2, r2, #3
 8001c00:	0092      	lsls	r2, r2, #2
 8001c02:	4093      	lsls	r3, r2
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c0a:	4937      	ldr	r1, [pc, #220]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	089b      	lsrs	r3, r3, #2
 8001c10:	3302      	adds	r3, #2
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c18:	4b37      	ldr	r3, [pc, #220]	; (8001cf8 <HAL_GPIO_Init+0x2e0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c3c:	4a2e      	ldr	r2, [pc, #184]	; (8001cf8 <HAL_GPIO_Init+0x2e0>)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c42:	4b2d      	ldr	r3, [pc, #180]	; (8001cf8 <HAL_GPIO_Init+0x2e0>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c66:	4a24      	ldr	r2, [pc, #144]	; (8001cf8 <HAL_GPIO_Init+0x2e0>)
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c6c:	4b22      	ldr	r3, [pc, #136]	; (8001cf8 <HAL_GPIO_Init+0x2e0>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c90:	4a19      	ldr	r2, [pc, #100]	; (8001cf8 <HAL_GPIO_Init+0x2e0>)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c96:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <HAL_GPIO_Init+0x2e0>)
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cba:	4a0f      	ldr	r2, [pc, #60]	; (8001cf8 <HAL_GPIO_Init+0x2e0>)
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f47f aea9 	bne.w	8001a28 <HAL_GPIO_Init+0x10>
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	bf00      	nop
 8001cda:	371c      	adds	r7, #28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40010000 	.word	0x40010000
 8001cec:	48000400 	.word	0x48000400
 8001cf0:	48000800 	.word	0x48000800
 8001cf4:	48000c00 	.word	0x48000c00
 8001cf8:	40010400 	.word	0x40010400

08001cfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	887b      	ldrh	r3, [r7, #2]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d002      	beq.n	8001d1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
 8001d18:	e001      	b.n	8001d1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d3c:	787b      	ldrb	r3, [r7, #1]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d42:	887a      	ldrh	r2, [r7, #2]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d48:	e002      	b.n	8001d50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d4a:	887a      	ldrh	r2, [r7, #2]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d006      	beq.n	8001d80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d72:	4a05      	ldr	r2, [pc, #20]	; (8001d88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe faea 	bl	8000354 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40010400 	.word	0x40010400

08001d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d9c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	f001 b823 	b.w	8002df8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 817d 	beq.w	80020c2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001dc8:	4bbc      	ldr	r3, [pc, #752]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d00c      	beq.n	8001dee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dd4:	4bb9      	ldr	r3, [pc, #740]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d15c      	bne.n	8001e9a <HAL_RCC_OscConfig+0x10e>
 8001de0:	4bb6      	ldr	r3, [pc, #728]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dec:	d155      	bne.n	8001e9a <HAL_RCC_OscConfig+0x10e>
 8001dee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e02:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	095b      	lsrs	r3, r3, #5
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d102      	bne.n	8001e20 <HAL_RCC_OscConfig+0x94>
 8001e1a:	4ba8      	ldr	r3, [pc, #672]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	e015      	b.n	8001e4c <HAL_RCC_OscConfig+0xc0>
 8001e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e24:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e38:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e3c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001e48:	4b9c      	ldr	r3, [pc, #624]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e50:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001e54:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e58:	fa92 f2a2 	rbit	r2, r2
 8001e5c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001e60:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001e64:	fab2 f282 	clz	r2, r2
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	f042 0220 	orr.w	r2, r2, #32
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	f002 021f 	and.w	r2, r2, #31
 8001e74:	2101      	movs	r1, #1
 8001e76:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 811f 	beq.w	80020c0 <HAL_RCC_OscConfig+0x334>
 8001e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f040 8116 	bne.w	80020c0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	f000 bfaf 	b.w	8002df8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x12e>
 8001eac:	4b83      	ldr	r3, [pc, #524]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a82      	ldr	r2, [pc, #520]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	e036      	b.n	8001f28 <HAL_RCC_OscConfig+0x19c>
 8001eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x158>
 8001eca:	4b7c      	ldr	r3, [pc, #496]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a7b      	ldr	r2, [pc, #492]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	4b79      	ldr	r3, [pc, #484]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a78      	ldr	r2, [pc, #480]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001edc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e021      	b.n	8001f28 <HAL_RCC_OscConfig+0x19c>
 8001ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x184>
 8001ef6:	4b71      	ldr	r3, [pc, #452]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a70      	ldr	r2, [pc, #448]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b6e      	ldr	r3, [pc, #440]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a6d      	ldr	r2, [pc, #436]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e00b      	b.n	8001f28 <HAL_RCC_OscConfig+0x19c>
 8001f10:	4b6a      	ldr	r3, [pc, #424]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a69      	ldr	r2, [pc, #420]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b67      	ldr	r3, [pc, #412]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a66      	ldr	r2, [pc, #408]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f26:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f28:	4b64      	ldr	r3, [pc, #400]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	f023 020f 	bic.w	r2, r3, #15
 8001f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	495f      	ldr	r1, [pc, #380]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d059      	beq.n	8002006 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7ff fba9 	bl	80016a8 <HAL_GetTick>
 8001f56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	e00a      	b.n	8001f72 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7ff fba4 	bl	80016a8 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b64      	cmp	r3, #100	; 0x64
 8001f6a:	d902      	bls.n	8001f72 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	f000 bf43 	b.w	8002df8 <HAL_RCC_OscConfig+0x106c>
 8001f72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f76:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001f7e:	fa93 f3a3 	rbit	r3, r3
 8001f82:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001f86:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	fab3 f383 	clz	r3, r3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	095b      	lsrs	r3, r3, #5
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d102      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x218>
 8001f9e:	4b47      	ldr	r3, [pc, #284]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	e015      	b.n	8001fd0 <HAL_RCC_OscConfig+0x244>
 8001fa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001fb0:	fa93 f3a3 	rbit	r3, r3
 8001fb4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001fb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fbc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001fc0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001fcc:	4b3b      	ldr	r3, [pc, #236]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fd4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001fd8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001fdc:	fa92 f2a2 	rbit	r2, r2
 8001fe0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001fe4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001fe8:	fab2 f282 	clz	r2, r2
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	f042 0220 	orr.w	r2, r2, #32
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	f002 021f 	and.w	r2, r2, #31
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0ab      	beq.n	8001f5c <HAL_RCC_OscConfig+0x1d0>
 8002004:	e05d      	b.n	80020c2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7ff fb4f 	bl	80016a8 <HAL_GetTick>
 800200a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200e:	e00a      	b.n	8002026 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002010:	f7ff fb4a 	bl	80016a8 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b64      	cmp	r3, #100	; 0x64
 800201e:	d902      	bls.n	8002026 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	f000 bee9 	b.w	8002df8 <HAL_RCC_OscConfig+0x106c>
 8002026:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800202a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800203a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	095b      	lsrs	r3, r3, #5
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b01      	cmp	r3, #1
 8002050:	d102      	bne.n	8002058 <HAL_RCC_OscConfig+0x2cc>
 8002052:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	e015      	b.n	8002084 <HAL_RCC_OscConfig+0x2f8>
 8002058:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800205c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800206c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002070:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002074:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002080:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002088:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800208c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002090:	fa92 f2a2 	rbit	r2, r2
 8002094:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002098:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800209c:	fab2 f282 	clz	r2, r2
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	f042 0220 	orr.w	r2, r2, #32
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	f002 021f 	and.w	r2, r2, #31
 80020ac:	2101      	movs	r1, #1
 80020ae:	fa01 f202 	lsl.w	r2, r1, r2
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1ab      	bne.n	8002010 <HAL_RCC_OscConfig+0x284>
 80020b8:	e003      	b.n	80020c2 <HAL_RCC_OscConfig+0x336>
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 817d 	beq.w	80023d2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020d8:	4ba6      	ldr	r3, [pc, #664]	; (8002374 <HAL_RCC_OscConfig+0x5e8>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 030c 	and.w	r3, r3, #12
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00b      	beq.n	80020fc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020e4:	4ba3      	ldr	r3, [pc, #652]	; (8002374 <HAL_RCC_OscConfig+0x5e8>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 030c 	and.w	r3, r3, #12
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d172      	bne.n	80021d6 <HAL_RCC_OscConfig+0x44a>
 80020f0:	4ba0      	ldr	r3, [pc, #640]	; (8002374 <HAL_RCC_OscConfig+0x5e8>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d16c      	bne.n	80021d6 <HAL_RCC_OscConfig+0x44a>
 80020fc:	2302      	movs	r3, #2
 80020fe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002102:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002106:	fa93 f3a3 	rbit	r3, r3
 800210a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800210e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002112:	fab3 f383 	clz	r3, r3
 8002116:	b2db      	uxtb	r3, r3
 8002118:	095b      	lsrs	r3, r3, #5
 800211a:	b2db      	uxtb	r3, r3
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b01      	cmp	r3, #1
 8002124:	d102      	bne.n	800212c <HAL_RCC_OscConfig+0x3a0>
 8002126:	4b93      	ldr	r3, [pc, #588]	; (8002374 <HAL_RCC_OscConfig+0x5e8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	e013      	b.n	8002154 <HAL_RCC_OscConfig+0x3c8>
 800212c:	2302      	movs	r3, #2
 800212e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800213e:	2302      	movs	r3, #2
 8002140:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002144:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002148:	fa93 f3a3 	rbit	r3, r3
 800214c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002150:	4b88      	ldr	r3, [pc, #544]	; (8002374 <HAL_RCC_OscConfig+0x5e8>)
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	2202      	movs	r2, #2
 8002156:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800215a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800215e:	fa92 f2a2 	rbit	r2, r2
 8002162:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002166:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800216a:	fab2 f282 	clz	r2, r2
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	f042 0220 	orr.w	r2, r2, #32
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	f002 021f 	and.w	r2, r2, #31
 800217a:	2101      	movs	r1, #1
 800217c:	fa01 f202 	lsl.w	r2, r1, r2
 8002180:	4013      	ands	r3, r2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_RCC_OscConfig+0x410>
 8002186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d002      	beq.n	800219c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	f000 be2e 	b.w	8002df8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219c:	4b75      	ldr	r3, [pc, #468]	; (8002374 <HAL_RCC_OscConfig+0x5e8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	21f8      	movs	r1, #248	; 0xf8
 80021b2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80021ba:	fa91 f1a1 	rbit	r1, r1
 80021be:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80021c2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80021c6:	fab1 f181 	clz	r1, r1
 80021ca:	b2c9      	uxtb	r1, r1
 80021cc:	408b      	lsls	r3, r1
 80021ce:	4969      	ldr	r1, [pc, #420]	; (8002374 <HAL_RCC_OscConfig+0x5e8>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d4:	e0fd      	b.n	80023d2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 8088 	beq.w	80022f8 <HAL_RCC_OscConfig+0x56c>
 80021e8:	2301      	movs	r3, #1
 80021ea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80021fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002208:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	461a      	mov	r2, r3
 8002210:	2301      	movs	r3, #1
 8002212:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002214:	f7ff fa48 	bl	80016a8 <HAL_GetTick>
 8002218:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221c:	e00a      	b.n	8002234 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800221e:	f7ff fa43 	bl	80016a8 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d902      	bls.n	8002234 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	f000 bde2 	b.w	8002df8 <HAL_RCC_OscConfig+0x106c>
 8002234:	2302      	movs	r3, #2
 8002236:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002246:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	095b      	lsrs	r3, r3, #5
 8002252:	b2db      	uxtb	r3, r3
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b01      	cmp	r3, #1
 800225c:	d102      	bne.n	8002264 <HAL_RCC_OscConfig+0x4d8>
 800225e:	4b45      	ldr	r3, [pc, #276]	; (8002374 <HAL_RCC_OscConfig+0x5e8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	e013      	b.n	800228c <HAL_RCC_OscConfig+0x500>
 8002264:	2302      	movs	r3, #2
 8002266:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800226e:	fa93 f3a3 	rbit	r3, r3
 8002272:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002276:	2302      	movs	r3, #2
 8002278:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800227c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002288:	4b3a      	ldr	r3, [pc, #232]	; (8002374 <HAL_RCC_OscConfig+0x5e8>)
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	2202      	movs	r2, #2
 800228e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002292:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002296:	fa92 f2a2 	rbit	r2, r2
 800229a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800229e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80022a2:	fab2 f282 	clz	r2, r2
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	f042 0220 	orr.w	r2, r2, #32
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	f002 021f 	and.w	r2, r2, #31
 80022b2:	2101      	movs	r1, #1
 80022b4:	fa01 f202 	lsl.w	r2, r1, r2
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0af      	beq.n	800221e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022be:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <HAL_RCC_OscConfig+0x5e8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	21f8      	movs	r1, #248	; 0xf8
 80022d4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80022dc:	fa91 f1a1 	rbit	r1, r1
 80022e0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80022e4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80022e8:	fab1 f181 	clz	r1, r1
 80022ec:	b2c9      	uxtb	r1, r1
 80022ee:	408b      	lsls	r3, r1
 80022f0:	4920      	ldr	r1, [pc, #128]	; (8002374 <HAL_RCC_OscConfig+0x5e8>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]
 80022f6:	e06c      	b.n	80023d2 <HAL_RCC_OscConfig+0x646>
 80022f8:	2301      	movs	r3, #1
 80022fa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800230a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002318:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	461a      	mov	r2, r3
 8002320:	2300      	movs	r3, #0
 8002322:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7ff f9c0 	bl	80016a8 <HAL_GetTick>
 8002328:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232c:	e00a      	b.n	8002344 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800232e:	f7ff f9bb 	bl	80016a8 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d902      	bls.n	8002344 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	f000 bd5a 	b.w	8002df8 <HAL_RCC_OscConfig+0x106c>
 8002344:	2302      	movs	r3, #2
 8002346:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	095b      	lsrs	r3, r3, #5
 8002362:	b2db      	uxtb	r3, r3
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b01      	cmp	r3, #1
 800236c:	d104      	bne.n	8002378 <HAL_RCC_OscConfig+0x5ec>
 800236e:	4b01      	ldr	r3, [pc, #4]	; (8002374 <HAL_RCC_OscConfig+0x5e8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	e015      	b.n	80023a0 <HAL_RCC_OscConfig+0x614>
 8002374:	40021000 	.word	0x40021000
 8002378:	2302      	movs	r3, #2
 800237a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800238a:	2302      	movs	r3, #2
 800238c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002390:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800239c:	4bc8      	ldr	r3, [pc, #800]	; (80026c0 <HAL_RCC_OscConfig+0x934>)
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	2202      	movs	r2, #2
 80023a2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80023a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80023aa:	fa92 f2a2 	rbit	r2, r2
 80023ae:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80023b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80023b6:	fab2 f282 	clz	r2, r2
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	f042 0220 	orr.w	r2, r2, #32
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	f002 021f 	and.w	r2, r2, #31
 80023c6:	2101      	movs	r1, #1
 80023c8:	fa01 f202 	lsl.w	r2, r1, r2
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1ad      	bne.n	800232e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 8110 	beq.w	8002608 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d079      	beq.n	80024ec <HAL_RCC_OscConfig+0x760>
 80023f8:	2301      	movs	r3, #1
 80023fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800240a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240e:	fab3 f383 	clz	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	4bab      	ldr	r3, [pc, #684]	; (80026c4 <HAL_RCC_OscConfig+0x938>)
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	461a      	mov	r2, r3
 800241e:	2301      	movs	r3, #1
 8002420:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002422:	f7ff f941 	bl	80016a8 <HAL_GetTick>
 8002426:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242a:	e00a      	b.n	8002442 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800242c:	f7ff f93c 	bl	80016a8 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d902      	bls.n	8002442 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	f000 bcdb 	b.w	8002df8 <HAL_RCC_OscConfig+0x106c>
 8002442:	2302      	movs	r3, #2
 8002444:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002458:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800245c:	2202      	movs	r2, #2
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002464:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	fa93 f2a3 	rbit	r2, r3
 800246e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002472:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002480:	2202      	movs	r2, #2
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	fa93 f2a3 	rbit	r2, r3
 8002492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002496:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800249a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249c:	4b88      	ldr	r3, [pc, #544]	; (80026c0 <HAL_RCC_OscConfig+0x934>)
 800249e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80024a8:	2102      	movs	r1, #2
 80024aa:	6019      	str	r1, [r3, #0]
 80024ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	fa93 f1a3 	rbit	r1, r3
 80024ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80024c2:	6019      	str	r1, [r3, #0]
  return result;
 80024c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	2101      	movs	r1, #1
 80024e0:	fa01 f303 	lsl.w	r3, r1, r3
 80024e4:	4013      	ands	r3, r2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0a0      	beq.n	800242c <HAL_RCC_OscConfig+0x6a0>
 80024ea:	e08d      	b.n	8002608 <HAL_RCC_OscConfig+0x87c>
 80024ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024f4:	2201      	movs	r2, #1
 80024f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	fa93 f2a3 	rbit	r2, r3
 8002506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800250e:	601a      	str	r2, [r3, #0]
  return result;
 8002510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002514:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002518:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	4b68      	ldr	r3, [pc, #416]	; (80026c4 <HAL_RCC_OscConfig+0x938>)
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	461a      	mov	r2, r3
 800252a:	2300      	movs	r3, #0
 800252c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252e:	f7ff f8bb 	bl	80016a8 <HAL_GetTick>
 8002532:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002536:	e00a      	b.n	800254e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002538:	f7ff f8b6 	bl	80016a8 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d902      	bls.n	800254e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	f000 bc55 	b.w	8002df8 <HAL_RCC_OscConfig+0x106c>
 800254e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002552:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002556:	2202      	movs	r2, #2
 8002558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	fa93 f2a3 	rbit	r2, r3
 8002568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002576:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800257a:	2202      	movs	r2, #2
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002582:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	fa93 f2a3 	rbit	r2, r3
 800258c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002590:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800259e:	2202      	movs	r2, #2
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	fa93 f2a3 	rbit	r2, r3
 80025b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80025b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ba:	4b41      	ldr	r3, [pc, #260]	; (80026c0 <HAL_RCC_OscConfig+0x934>)
 80025bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80025c6:	2102      	movs	r1, #2
 80025c8:	6019      	str	r1, [r3, #0]
 80025ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	fa93 f1a3 	rbit	r1, r3
 80025d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80025e0:	6019      	str	r1, [r3, #0]
  return result;
 80025e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	fab3 f383 	clz	r3, r3
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	2101      	movs	r1, #1
 80025fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d197      	bne.n	8002538 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 81a1 	beq.w	8002960 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261e:	2300      	movs	r3, #0
 8002620:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002624:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <HAL_RCC_OscConfig+0x934>)
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d116      	bne.n	800265e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002630:	4b23      	ldr	r3, [pc, #140]	; (80026c0 <HAL_RCC_OscConfig+0x934>)
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	4a22      	ldr	r2, [pc, #136]	; (80026c0 <HAL_RCC_OscConfig+0x934>)
 8002636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800263a:	61d3      	str	r3, [r2, #28]
 800263c:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <HAL_RCC_OscConfig+0x934>)
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002648:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002652:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002656:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002658:	2301      	movs	r3, #1
 800265a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265e:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <HAL_RCC_OscConfig+0x93c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d11a      	bne.n	80026a0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800266a:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <HAL_RCC_OscConfig+0x93c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a16      	ldr	r2, [pc, #88]	; (80026c8 <HAL_RCC_OscConfig+0x93c>)
 8002670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002674:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002676:	f7ff f817 	bl	80016a8 <HAL_GetTick>
 800267a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267e:	e009      	b.n	8002694 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002680:	f7ff f812 	bl	80016a8 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b64      	cmp	r3, #100	; 0x64
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e3b1      	b.n	8002df8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <HAL_RCC_OscConfig+0x93c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0ef      	beq.n	8002680 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d10d      	bne.n	80026cc <HAL_RCC_OscConfig+0x940>
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <HAL_RCC_OscConfig+0x934>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4a02      	ldr	r2, [pc, #8]	; (80026c0 <HAL_RCC_OscConfig+0x934>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6213      	str	r3, [r2, #32]
 80026bc:	e03c      	b.n	8002738 <HAL_RCC_OscConfig+0x9ac>
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000
 80026c4:	10908120 	.word	0x10908120
 80026c8:	40007000 	.word	0x40007000
 80026cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10c      	bne.n	80026f6 <HAL_RCC_OscConfig+0x96a>
 80026dc:	4bc1      	ldr	r3, [pc, #772]	; (80029e4 <HAL_RCC_OscConfig+0xc58>)
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	4ac0      	ldr	r2, [pc, #768]	; (80029e4 <HAL_RCC_OscConfig+0xc58>)
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	6213      	str	r3, [r2, #32]
 80026e8:	4bbe      	ldr	r3, [pc, #760]	; (80029e4 <HAL_RCC_OscConfig+0xc58>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4abd      	ldr	r2, [pc, #756]	; (80029e4 <HAL_RCC_OscConfig+0xc58>)
 80026ee:	f023 0304 	bic.w	r3, r3, #4
 80026f2:	6213      	str	r3, [r2, #32]
 80026f4:	e020      	b.n	8002738 <HAL_RCC_OscConfig+0x9ac>
 80026f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b05      	cmp	r3, #5
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0x994>
 8002706:	4bb7      	ldr	r3, [pc, #732]	; (80029e4 <HAL_RCC_OscConfig+0xc58>)
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	4ab6      	ldr	r2, [pc, #728]	; (80029e4 <HAL_RCC_OscConfig+0xc58>)
 800270c:	f043 0304 	orr.w	r3, r3, #4
 8002710:	6213      	str	r3, [r2, #32]
 8002712:	4bb4      	ldr	r3, [pc, #720]	; (80029e4 <HAL_RCC_OscConfig+0xc58>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	4ab3      	ldr	r2, [pc, #716]	; (80029e4 <HAL_RCC_OscConfig+0xc58>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6213      	str	r3, [r2, #32]
 800271e:	e00b      	b.n	8002738 <HAL_RCC_OscConfig+0x9ac>
 8002720:	4bb0      	ldr	r3, [pc, #704]	; (80029e4 <HAL_RCC_OscConfig+0xc58>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	4aaf      	ldr	r2, [pc, #700]	; (80029e4 <HAL_RCC_OscConfig+0xc58>)
 8002726:	f023 0301 	bic.w	r3, r3, #1
 800272a:	6213      	str	r3, [r2, #32]
 800272c:	4bad      	ldr	r3, [pc, #692]	; (80029e4 <HAL_RCC_OscConfig+0xc58>)
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	4aac      	ldr	r2, [pc, #688]	; (80029e4 <HAL_RCC_OscConfig+0xc58>)
 8002732:	f023 0304 	bic.w	r3, r3, #4
 8002736:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 8081 	beq.w	800284c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274a:	f7fe ffad 	bl	80016a8 <HAL_GetTick>
 800274e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002752:	e00b      	b.n	800276c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002754:	f7fe ffa8 	bl	80016a8 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	f241 3288 	movw	r2, #5000	; 0x1388
 8002764:	4293      	cmp	r3, r2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e345      	b.n	8002df8 <HAL_RCC_OscConfig+0x106c>
 800276c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002770:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002774:	2202      	movs	r2, #2
 8002776:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	fa93 f2a3 	rbit	r2, r3
 8002786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002794:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002798:	2202      	movs	r2, #2
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	fa93 f2a3 	rbit	r2, r3
 80027aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80027b2:	601a      	str	r2, [r3, #0]
  return result;
 80027b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80027bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027be:	fab3 f383 	clz	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	095b      	lsrs	r3, r3, #5
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f043 0302 	orr.w	r3, r3, #2
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d102      	bne.n	80027d8 <HAL_RCC_OscConfig+0xa4c>
 80027d2:	4b84      	ldr	r3, [pc, #528]	; (80029e4 <HAL_RCC_OscConfig+0xc58>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	e013      	b.n	8002800 <HAL_RCC_OscConfig+0xa74>
 80027d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027dc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027e0:	2202      	movs	r2, #2
 80027e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	fa93 f2a3 	rbit	r2, r3
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	4b79      	ldr	r3, [pc, #484]	; (80029e4 <HAL_RCC_OscConfig+0xc58>)
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002804:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002808:	2102      	movs	r1, #2
 800280a:	6011      	str	r1, [r2, #0]
 800280c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002810:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	fa92 f1a2 	rbit	r1, r2
 800281a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800281e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002822:	6011      	str	r1, [r2, #0]
  return result;
 8002824:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002828:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	fab2 f282 	clz	r2, r2
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	f002 021f 	and.w	r2, r2, #31
 800283e:	2101      	movs	r1, #1
 8002840:	fa01 f202 	lsl.w	r2, r1, r2
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d084      	beq.n	8002754 <HAL_RCC_OscConfig+0x9c8>
 800284a:	e07f      	b.n	800294c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284c:	f7fe ff2c 	bl	80016a8 <HAL_GetTick>
 8002850:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002854:	e00b      	b.n	800286e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002856:	f7fe ff27 	bl	80016a8 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f241 3288 	movw	r2, #5000	; 0x1388
 8002866:	4293      	cmp	r3, r2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e2c4      	b.n	8002df8 <HAL_RCC_OscConfig+0x106c>
 800286e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002872:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002876:	2202      	movs	r2, #2
 8002878:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	fa93 f2a3 	rbit	r2, r3
 8002888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002896:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800289a:	2202      	movs	r2, #2
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	fa93 f2a3 	rbit	r2, r3
 80028ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80028b4:	601a      	str	r2, [r3, #0]
  return result;
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80028be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c0:	fab3 f383 	clz	r3, r3
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	095b      	lsrs	r3, r3, #5
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	f043 0302 	orr.w	r3, r3, #2
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d102      	bne.n	80028da <HAL_RCC_OscConfig+0xb4e>
 80028d4:	4b43      	ldr	r3, [pc, #268]	; (80029e4 <HAL_RCC_OscConfig+0xc58>)
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	e013      	b.n	8002902 <HAL_RCC_OscConfig+0xb76>
 80028da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028de:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028e2:	2202      	movs	r2, #2
 80028e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	fa93 f2a3 	rbit	r2, r3
 80028f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	4b39      	ldr	r3, [pc, #228]	; (80029e4 <HAL_RCC_OscConfig+0xc58>)
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002906:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800290a:	2102      	movs	r1, #2
 800290c:	6011      	str	r1, [r2, #0]
 800290e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002912:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	fa92 f1a2 	rbit	r1, r2
 800291c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002920:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002924:	6011      	str	r1, [r2, #0]
  return result;
 8002926:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800292a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	fab2 f282 	clz	r2, r2
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	f002 021f 	and.w	r2, r2, #31
 8002940:	2101      	movs	r1, #1
 8002942:	fa01 f202 	lsl.w	r2, r1, r2
 8002946:	4013      	ands	r3, r2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d184      	bne.n	8002856 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800294c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002950:	2b01      	cmp	r3, #1
 8002952:	d105      	bne.n	8002960 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002954:	4b23      	ldr	r3, [pc, #140]	; (80029e4 <HAL_RCC_OscConfig+0xc58>)
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	4a22      	ldr	r2, [pc, #136]	; (80029e4 <HAL_RCC_OscConfig+0xc58>)
 800295a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800295e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002964:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 8242 	beq.w	8002df6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002972:	4b1c      	ldr	r3, [pc, #112]	; (80029e4 <HAL_RCC_OscConfig+0xc58>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b08      	cmp	r3, #8
 800297c:	f000 8213 	beq.w	8002da6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002984:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	2b02      	cmp	r3, #2
 800298e:	f040 8162 	bne.w	8002c56 <HAL_RCC_OscConfig+0xeca>
 8002992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002996:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800299a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800299e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	fa93 f2a3 	rbit	r2, r3
 80029ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80029b6:	601a      	str	r2, [r3, #0]
  return result;
 80029b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029bc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80029c0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	461a      	mov	r2, r3
 80029d4:	2300      	movs	r3, #0
 80029d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fe fe66 	bl	80016a8 <HAL_GetTick>
 80029dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e0:	e00c      	b.n	80029fc <HAL_RCC_OscConfig+0xc70>
 80029e2:	bf00      	nop
 80029e4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e8:	f7fe fe5e 	bl	80016a8 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e1fd      	b.n	8002df8 <HAL_RCC_OscConfig+0x106c>
 80029fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a00:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002a04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	fa93 f2a3 	rbit	r2, r3
 8002a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a20:	601a      	str	r2, [r3, #0]
  return result;
 8002a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a26:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a2c:	fab3 f383 	clz	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d102      	bne.n	8002a46 <HAL_RCC_OscConfig+0xcba>
 8002a40:	4bb0      	ldr	r3, [pc, #704]	; (8002d04 <HAL_RCC_OscConfig+0xf78>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	e027      	b.n	8002a96 <HAL_RCC_OscConfig+0xd0a>
 8002a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a58:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	fa93 f2a3 	rbit	r2, r3
 8002a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a66:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a70:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	fa93 f2a3 	rbit	r2, r3
 8002a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	4b9c      	ldr	r3, [pc, #624]	; (8002d04 <HAL_RCC_OscConfig+0xf78>)
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a9a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a9e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002aa2:	6011      	str	r1, [r2, #0]
 8002aa4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aa8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	fa92 f1a2 	rbit	r1, r2
 8002ab2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ab6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002aba:	6011      	str	r1, [r2, #0]
  return result;
 8002abc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ac0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	fab2 f282 	clz	r2, r2
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	f042 0220 	orr.w	r2, r2, #32
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	f002 021f 	and.w	r2, r2, #31
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d182      	bne.n	80029e8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ae2:	4b88      	ldr	r3, [pc, #544]	; (8002d04 <HAL_RCC_OscConfig+0xf78>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	430b      	orrs	r3, r1
 8002b04:	497f      	ldr	r1, [pc, #508]	; (8002d04 <HAL_RCC_OscConfig+0xf78>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	604b      	str	r3, [r1, #4]
 8002b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	fa93 f2a3 	rbit	r2, r3
 8002b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b2e:	601a      	str	r2, [r3, #0]
  return result;
 8002b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b34:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b38:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b50:	f7fe fdaa 	bl	80016a8 <HAL_GetTick>
 8002b54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b58:	e009      	b.n	8002b6e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5a:	f7fe fda5 	bl	80016a8 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e144      	b.n	8002df8 <HAL_RCC_OscConfig+0x106c>
 8002b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b72:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b80:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	fa93 f2a3 	rbit	r2, r3
 8002b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b92:	601a      	str	r2, [r3, #0]
  return result;
 8002b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b98:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d102      	bne.n	8002bb8 <HAL_RCC_OscConfig+0xe2c>
 8002bb2:	4b54      	ldr	r3, [pc, #336]	; (8002d04 <HAL_RCC_OscConfig+0xf78>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	e027      	b.n	8002c08 <HAL_RCC_OscConfig+0xe7c>
 8002bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002bc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bca:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	fa93 f2a3 	rbit	r2, r3
 8002bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002be6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	fa93 f2a3 	rbit	r2, r3
 8002bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	4b3f      	ldr	r3, [pc, #252]	; (8002d04 <HAL_RCC_OscConfig+0xf78>)
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c0c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002c10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c14:	6011      	str	r1, [r2, #0]
 8002c16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c1a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	fa92 f1a2 	rbit	r1, r2
 8002c24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c28:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c2c:	6011      	str	r1, [r2, #0]
  return result;
 8002c2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c32:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	fab2 f282 	clz	r2, r2
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	f042 0220 	orr.w	r2, r2, #32
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	f002 021f 	and.w	r2, r2, #31
 8002c48:	2101      	movs	r1, #1
 8002c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d082      	beq.n	8002b5a <HAL_RCC_OscConfig+0xdce>
 8002c54:	e0cf      	b.n	8002df6 <HAL_RCC_OscConfig+0x106a>
 8002c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c68:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	fa93 f2a3 	rbit	r2, r3
 8002c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c76:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c7a:	601a      	str	r2, [r3, #0]
  return result;
 8002c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c80:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c84:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c86:	fab3 f383 	clz	r3, r3
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	461a      	mov	r2, r3
 8002c98:	2300      	movs	r3, #0
 8002c9a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fd04 	bl	80016a8 <HAL_GetTick>
 8002ca0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca4:	e009      	b.n	8002cba <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca6:	f7fe fcff 	bl	80016a8 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e09e      	b.n	8002df8 <HAL_RCC_OscConfig+0x106c>
 8002cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002cc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ccc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	fa93 f2a3 	rbit	r2, r3
 8002cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cda:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002cde:	601a      	str	r2, [r3, #0]
  return result;
 8002ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002ce8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d104      	bne.n	8002d08 <HAL_RCC_OscConfig+0xf7c>
 8002cfe:	4b01      	ldr	r3, [pc, #4]	; (8002d04 <HAL_RCC_OscConfig+0xf78>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	e029      	b.n	8002d58 <HAL_RCC_OscConfig+0xfcc>
 8002d04:	40021000 	.word	0x40021000
 8002d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	fa93 f2a3 	rbit	r2, r3
 8002d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d28:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d32:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d40:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	fa93 f2a3 	rbit	r2, r3
 8002d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	4b2b      	ldr	r3, [pc, #172]	; (8002e04 <HAL_RCC_OscConfig+0x1078>)
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d5c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d64:	6011      	str	r1, [r2, #0]
 8002d66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d6a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	fa92 f1a2 	rbit	r1, r2
 8002d74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d78:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d7c:	6011      	str	r1, [r2, #0]
  return result;
 8002d7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d82:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	fab2 f282 	clz	r2, r2
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	f042 0220 	orr.w	r2, r2, #32
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	f002 021f 	and.w	r2, r2, #31
 8002d98:	2101      	movs	r1, #1
 8002d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d180      	bne.n	8002ca6 <HAL_RCC_OscConfig+0xf1a>
 8002da4:	e027      	b.n	8002df6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002daa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e01e      	b.n	8002df8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dba:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <HAL_RCC_OscConfig+0x1078>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002dc2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002dc6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d10b      	bne.n	8002df2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002dda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002dde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d001      	beq.n	8002df6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000

08002e08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b09e      	sub	sp, #120	; 0x78
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e162      	b.n	80030e6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e20:	4b90      	ldr	r3, [pc, #576]	; (8003064 <HAL_RCC_ClockConfig+0x25c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d910      	bls.n	8002e50 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2e:	4b8d      	ldr	r3, [pc, #564]	; (8003064 <HAL_RCC_ClockConfig+0x25c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f023 0207 	bic.w	r2, r3, #7
 8002e36:	498b      	ldr	r1, [pc, #556]	; (8003064 <HAL_RCC_ClockConfig+0x25c>)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3e:	4b89      	ldr	r3, [pc, #548]	; (8003064 <HAL_RCC_ClockConfig+0x25c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e14a      	b.n	80030e6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d008      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e5c:	4b82      	ldr	r3, [pc, #520]	; (8003068 <HAL_RCC_ClockConfig+0x260>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	497f      	ldr	r1, [pc, #508]	; (8003068 <HAL_RCC_ClockConfig+0x260>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 80dc 	beq.w	8003034 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d13c      	bne.n	8002efe <HAL_RCC_ClockConfig+0xf6>
 8002e84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e88:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e8c:	fa93 f3a3 	rbit	r3, r3
 8002e90:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e94:	fab3 f383 	clz	r3, r3
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d102      	bne.n	8002eae <HAL_RCC_ClockConfig+0xa6>
 8002ea8:	4b6f      	ldr	r3, [pc, #444]	; (8003068 <HAL_RCC_ClockConfig+0x260>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	e00f      	b.n	8002ece <HAL_RCC_ClockConfig+0xc6>
 8002eae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eb2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eb6:	fa93 f3a3 	rbit	r3, r3
 8002eba:	667b      	str	r3, [r7, #100]	; 0x64
 8002ebc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ec0:	663b      	str	r3, [r7, #96]	; 0x60
 8002ec2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ec4:	fa93 f3a3 	rbit	r3, r3
 8002ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002eca:	4b67      	ldr	r3, [pc, #412]	; (8003068 <HAL_RCC_ClockConfig+0x260>)
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ed2:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ed4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ed6:	fa92 f2a2 	rbit	r2, r2
 8002eda:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002edc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ede:	fab2 f282 	clz	r2, r2
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	f042 0220 	orr.w	r2, r2, #32
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	f002 021f 	and.w	r2, r2, #31
 8002eee:	2101      	movs	r1, #1
 8002ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d17b      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e0f3      	b.n	80030e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d13c      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x178>
 8002f06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f0a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f0e:	fa93 f3a3 	rbit	r3, r3
 8002f12:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d102      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x128>
 8002f2a:	4b4f      	ldr	r3, [pc, #316]	; (8003068 <HAL_RCC_ClockConfig+0x260>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	e00f      	b.n	8002f50 <HAL_RCC_ClockConfig+0x148>
 8002f30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f34:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f38:	fa93 f3a3 	rbit	r3, r3
 8002f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f42:	643b      	str	r3, [r7, #64]	; 0x40
 8002f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f46:	fa93 f3a3 	rbit	r3, r3
 8002f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f4c:	4b46      	ldr	r3, [pc, #280]	; (8003068 <HAL_RCC_ClockConfig+0x260>)
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f54:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f58:	fa92 f2a2 	rbit	r2, r2
 8002f5c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f60:	fab2 f282 	clz	r2, r2
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	f042 0220 	orr.w	r2, r2, #32
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	f002 021f 	and.w	r2, r2, #31
 8002f70:	2101      	movs	r1, #1
 8002f72:	fa01 f202 	lsl.w	r2, r1, r2
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d13a      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0b2      	b.n	80030e6 <HAL_RCC_ClockConfig+0x2de>
 8002f80:	2302      	movs	r3, #2
 8002f82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8e:	fab3 f383 	clz	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	095b      	lsrs	r3, r3, #5
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d102      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0x1a0>
 8002fa2:	4b31      	ldr	r3, [pc, #196]	; (8003068 <HAL_RCC_ClockConfig+0x260>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	e00d      	b.n	8002fc4 <HAL_RCC_ClockConfig+0x1bc>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	623b      	str	r3, [r7, #32]
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	61fb      	str	r3, [r7, #28]
 8002fc0:	4b29      	ldr	r3, [pc, #164]	; (8003068 <HAL_RCC_ClockConfig+0x260>)
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	61ba      	str	r2, [r7, #24]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	fa92 f2a2 	rbit	r2, r2
 8002fce:	617a      	str	r2, [r7, #20]
  return result;
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	fab2 f282 	clz	r2, r2
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	f042 0220 	orr.w	r2, r2, #32
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	f002 021f 	and.w	r2, r2, #31
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e079      	b.n	80030e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ff2:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <HAL_RCC_ClockConfig+0x260>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f023 0203 	bic.w	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	491a      	ldr	r1, [pc, #104]	; (8003068 <HAL_RCC_ClockConfig+0x260>)
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003004:	f7fe fb50 	bl	80016a8 <HAL_GetTick>
 8003008:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300a:	e00a      	b.n	8003022 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300c:	f7fe fb4c 	bl	80016a8 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	; 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e061      	b.n	80030e6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003022:	4b11      	ldr	r3, [pc, #68]	; (8003068 <HAL_RCC_ClockConfig+0x260>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 020c 	and.w	r2, r3, #12
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	429a      	cmp	r2, r3
 8003032:	d1eb      	bne.n	800300c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003034:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <HAL_RCC_ClockConfig+0x25c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d214      	bcs.n	800306c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003042:	4b08      	ldr	r3, [pc, #32]	; (8003064 <HAL_RCC_ClockConfig+0x25c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 0207 	bic.w	r2, r3, #7
 800304a:	4906      	ldr	r1, [pc, #24]	; (8003064 <HAL_RCC_ClockConfig+0x25c>)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	4313      	orrs	r3, r2
 8003050:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b04      	ldr	r3, [pc, #16]	; (8003064 <HAL_RCC_ClockConfig+0x25c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d005      	beq.n	800306c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e040      	b.n	80030e6 <HAL_RCC_ClockConfig+0x2de>
 8003064:	40022000 	.word	0x40022000
 8003068:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003078:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <HAL_RCC_ClockConfig+0x2e8>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	491a      	ldr	r1, [pc, #104]	; (80030f0 <HAL_RCC_ClockConfig+0x2e8>)
 8003086:	4313      	orrs	r3, r2
 8003088:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003096:	4b16      	ldr	r3, [pc, #88]	; (80030f0 <HAL_RCC_ClockConfig+0x2e8>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4912      	ldr	r1, [pc, #72]	; (80030f0 <HAL_RCC_ClockConfig+0x2e8>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030aa:	f000 f829 	bl	8003100 <HAL_RCC_GetSysClockFreq>
 80030ae:	4601      	mov	r1, r0
 80030b0:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <HAL_RCC_ClockConfig+0x2e8>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030b8:	22f0      	movs	r2, #240	; 0xf0
 80030ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	fa92 f2a2 	rbit	r2, r2
 80030c2:	60fa      	str	r2, [r7, #12]
  return result;
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	fab2 f282 	clz	r2, r2
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	40d3      	lsrs	r3, r2
 80030ce:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <HAL_RCC_ClockConfig+0x2ec>)
 80030d0:	5cd3      	ldrb	r3, [r2, r3]
 80030d2:	fa21 f303 	lsr.w	r3, r1, r3
 80030d6:	4a08      	ldr	r2, [pc, #32]	; (80030f8 <HAL_RCC_ClockConfig+0x2f0>)
 80030d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80030da:	4b08      	ldr	r3, [pc, #32]	; (80030fc <HAL_RCC_ClockConfig+0x2f4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe fa9e 	bl	8001620 <HAL_InitTick>
  
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3778      	adds	r7, #120	; 0x78
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40021000 	.word	0x40021000
 80030f4:	08007c6c 	.word	0x08007c6c
 80030f8:	20000000 	.word	0x20000000
 80030fc:	20000004 	.word	0x20000004

08003100 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003100:	b480      	push	{r7}
 8003102:	b08b      	sub	sp, #44	; 0x2c
 8003104:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	2300      	movs	r3, #0
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	2300      	movs	r3, #0
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800311a:	4b29      	ldr	r3, [pc, #164]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	2b04      	cmp	r3, #4
 8003128:	d002      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x30>
 800312a:	2b08      	cmp	r3, #8
 800312c:	d003      	beq.n	8003136 <HAL_RCC_GetSysClockFreq+0x36>
 800312e:	e03c      	b.n	80031aa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003130:	4b24      	ldr	r3, [pc, #144]	; (80031c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003132:	623b      	str	r3, [r7, #32]
      break;
 8003134:	e03c      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800313c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003140:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	fa92 f2a2 	rbit	r2, r2
 8003148:	607a      	str	r2, [r7, #4]
  return result;
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	fab2 f282 	clz	r2, r2
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	40d3      	lsrs	r3, r2
 8003154:	4a1c      	ldr	r2, [pc, #112]	; (80031c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003156:	5cd3      	ldrb	r3, [r2, r3]
 8003158:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800315a:	4b19      	ldr	r3, [pc, #100]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	220f      	movs	r2, #15
 8003164:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	fa92 f2a2 	rbit	r2, r2
 800316c:	60fa      	str	r2, [r7, #12]
  return result;
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	fab2 f282 	clz	r2, r2
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	40d3      	lsrs	r3, r2
 8003178:	4a14      	ldr	r2, [pc, #80]	; (80031cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800317a:	5cd3      	ldrb	r3, [r2, r3]
 800317c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003188:	4a0e      	ldr	r2, [pc, #56]	; (80031c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	fb02 f303 	mul.w	r3, r2, r3
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
 8003198:	e004      	b.n	80031a4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	4a0c      	ldr	r2, [pc, #48]	; (80031d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	623b      	str	r3, [r7, #32]
      break;
 80031a8:	e002      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031ac:	623b      	str	r3, [r7, #32]
      break;
 80031ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031b0:	6a3b      	ldr	r3, [r7, #32]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	372c      	adds	r7, #44	; 0x2c
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000
 80031c4:	007a1200 	.word	0x007a1200
 80031c8:	08007c84 	.word	0x08007c84
 80031cc:	08007c94 	.word	0x08007c94
 80031d0:	003d0900 	.word	0x003d0900

080031d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031d8:	4b03      	ldr	r3, [pc, #12]	; (80031e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031da:	681b      	ldr	r3, [r3, #0]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	20000000 	.word	0x20000000

080031ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80031f2:	f7ff ffef 	bl	80031d4 <HAL_RCC_GetHCLKFreq>
 80031f6:	4601      	mov	r1, r0
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003200:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003204:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	fa92 f2a2 	rbit	r2, r2
 800320c:	603a      	str	r2, [r7, #0]
  return result;
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	fab2 f282 	clz	r2, r2
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	40d3      	lsrs	r3, r2
 8003218:	4a04      	ldr	r2, [pc, #16]	; (800322c <HAL_RCC_GetPCLK1Freq+0x40>)
 800321a:	5cd3      	ldrb	r3, [r2, r3]
 800321c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40021000 	.word	0x40021000
 800322c:	08007c7c 	.word	0x08007c7c

08003230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003236:	f7ff ffcd 	bl	80031d4 <HAL_RCC_GetHCLKFreq>
 800323a:	4601      	mov	r1, r0
 800323c:	4b0b      	ldr	r3, [pc, #44]	; (800326c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003244:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003248:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	fa92 f2a2 	rbit	r2, r2
 8003250:	603a      	str	r2, [r7, #0]
  return result;
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	fab2 f282 	clz	r2, r2
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	40d3      	lsrs	r3, r2
 800325c:	4a04      	ldr	r2, [pc, #16]	; (8003270 <HAL_RCC_GetPCLK2Freq+0x40>)
 800325e:	5cd3      	ldrb	r3, [r2, r3]
 8003260:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003264:	4618      	mov	r0, r3
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40021000 	.word	0x40021000
 8003270:	08007c7c 	.word	0x08007c7c

08003274 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b092      	sub	sp, #72	; 0x48
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003284:	2300      	movs	r3, #0
 8003286:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80cd 	beq.w	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003298:	4b86      	ldr	r3, [pc, #536]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10e      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a4:	4b83      	ldr	r3, [pc, #524]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	4a82      	ldr	r2, [pc, #520]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ae:	61d3      	str	r3, [r2, #28]
 80032b0:	4b80      	ldr	r3, [pc, #512]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032bc:	2301      	movs	r3, #1
 80032be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c2:	4b7d      	ldr	r3, [pc, #500]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d118      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ce:	4b7a      	ldr	r3, [pc, #488]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a79      	ldr	r2, [pc, #484]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032da:	f7fe f9e5 	bl	80016a8 <HAL_GetTick>
 80032de:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e0:	e008      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e2:	f7fe f9e1 	bl	80016a8 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b64      	cmp	r3, #100	; 0x64
 80032ee:	d901      	bls.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e0db      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f4:	4b70      	ldr	r3, [pc, #448]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003300:	4b6c      	ldr	r3, [pc, #432]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003308:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800330a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330c:	2b00      	cmp	r3, #0
 800330e:	d07d      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003318:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800331a:	429a      	cmp	r2, r3
 800331c:	d076      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800331e:	4b65      	ldr	r3, [pc, #404]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003328:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800332c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003330:	fa93 f3a3 	rbit	r3, r3
 8003334:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003338:	fab3 f383 	clz	r3, r3
 800333c:	b2db      	uxtb	r3, r3
 800333e:	461a      	mov	r2, r3
 8003340:	4b5e      	ldr	r3, [pc, #376]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	461a      	mov	r2, r3
 8003348:	2301      	movs	r3, #1
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003350:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003354:	fa93 f3a3 	rbit	r3, r3
 8003358:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800335a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800335c:	fab3 f383 	clz	r3, r3
 8003360:	b2db      	uxtb	r3, r3
 8003362:	461a      	mov	r2, r3
 8003364:	4b55      	ldr	r3, [pc, #340]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	461a      	mov	r2, r3
 800336c:	2300      	movs	r3, #0
 800336e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003370:	4a50      	ldr	r2, [pc, #320]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003374:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d045      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7fe f992 	bl	80016a8 <HAL_GetTick>
 8003384:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003386:	e00a      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003388:	f7fe f98e 	bl	80016a8 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f241 3288 	movw	r2, #5000	; 0x1388
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e086      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x238>
 800339e:	2302      	movs	r3, #2
 80033a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a4:	fa93 f3a3 	rbit	r3, r3
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
 80033aa:	2302      	movs	r3, #2
 80033ac:	623b      	str	r3, [r7, #32]
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	fa93 f3a3 	rbit	r3, r3
 80033b4:	61fb      	str	r3, [r7, #28]
  return result;
 80033b6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b8:	fab3 f383 	clz	r3, r3
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	f043 0302 	orr.w	r3, r3, #2
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d102      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80033cc:	4b39      	ldr	r3, [pc, #228]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	e007      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80033d2:	2302      	movs	r3, #2
 80033d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	fa93 f3a3 	rbit	r3, r3
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	4b35      	ldr	r3, [pc, #212]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	2202      	movs	r2, #2
 80033e4:	613a      	str	r2, [r7, #16]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	fa92 f2a2 	rbit	r2, r2
 80033ec:	60fa      	str	r2, [r7, #12]
  return result;
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	fab2 f282 	clz	r2, r2
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	f002 021f 	and.w	r2, r2, #31
 8003400:	2101      	movs	r1, #1
 8003402:	fa01 f202 	lsl.w	r2, r1, r2
 8003406:	4013      	ands	r3, r2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0bd      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800340c:	4b29      	ldr	r3, [pc, #164]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	4926      	ldr	r1, [pc, #152]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800341a:	4313      	orrs	r3, r2
 800341c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800341e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003422:	2b01      	cmp	r3, #1
 8003424:	d105      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003426:	4b23      	ldr	r3, [pc, #140]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	4a22      	ldr	r2, [pc, #136]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800342c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003430:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d008      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800343e:	4b1d      	ldr	r3, [pc, #116]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f023 0203 	bic.w	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	491a      	ldr	r1, [pc, #104]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800344c:	4313      	orrs	r3, r2
 800344e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800345c:	4b15      	ldr	r3, [pc, #84]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	f023 0210 	bic.w	r2, r3, #16
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4912      	ldr	r1, [pc, #72]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800346a:	4313      	orrs	r3, r2
 800346c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003476:	2b00      	cmp	r3, #0
 8003478:	d008      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800347a:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	490b      	ldr	r1, [pc, #44]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003488:	4313      	orrs	r3, r2
 800348a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	4903      	ldr	r1, [pc, #12]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3748      	adds	r7, #72	; 0x48
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40021000 	.word	0x40021000
 80034b8:	40007000 	.word	0x40007000
 80034bc:	10908100 	.word	0x10908100

080034c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e049      	b.n	8003566 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fd fed4 	bl	8001294 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3304      	adds	r3, #4
 80034fc:	4619      	mov	r1, r3
 80034fe:	4610      	mov	r0, r2
 8003500:	f000 fc5c 	bl	8003dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e049      	b.n	8003614 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d106      	bne.n	800359a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f841 	bl	800361c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2202      	movs	r2, #2
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3304      	adds	r3, #4
 80035aa:	4619      	mov	r1, r3
 80035ac:	4610      	mov	r0, r2
 80035ae:	f000 fc05 	bl	8003dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d109      	bne.n	8003658 <HAL_TIM_OC_Start_IT+0x28>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b01      	cmp	r3, #1
 800364e:	bf14      	ite	ne
 8003650:	2301      	movne	r3, #1
 8003652:	2300      	moveq	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	e03c      	b.n	80036d2 <HAL_TIM_OC_Start_IT+0xa2>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b04      	cmp	r3, #4
 800365c:	d109      	bne.n	8003672 <HAL_TIM_OC_Start_IT+0x42>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b01      	cmp	r3, #1
 8003668:	bf14      	ite	ne
 800366a:	2301      	movne	r3, #1
 800366c:	2300      	moveq	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	e02f      	b.n	80036d2 <HAL_TIM_OC_Start_IT+0xa2>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b08      	cmp	r3, #8
 8003676:	d109      	bne.n	800368c <HAL_TIM_OC_Start_IT+0x5c>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b01      	cmp	r3, #1
 8003682:	bf14      	ite	ne
 8003684:	2301      	movne	r3, #1
 8003686:	2300      	moveq	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	e022      	b.n	80036d2 <HAL_TIM_OC_Start_IT+0xa2>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2b0c      	cmp	r3, #12
 8003690:	d109      	bne.n	80036a6 <HAL_TIM_OC_Start_IT+0x76>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b01      	cmp	r3, #1
 800369c:	bf14      	ite	ne
 800369e:	2301      	movne	r3, #1
 80036a0:	2300      	moveq	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	e015      	b.n	80036d2 <HAL_TIM_OC_Start_IT+0xa2>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b10      	cmp	r3, #16
 80036aa:	d109      	bne.n	80036c0 <HAL_TIM_OC_Start_IT+0x90>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	bf14      	ite	ne
 80036b8:	2301      	movne	r3, #1
 80036ba:	2300      	moveq	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	e008      	b.n	80036d2 <HAL_TIM_OC_Start_IT+0xa2>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	bf14      	ite	ne
 80036cc:	2301      	movne	r3, #1
 80036ce:	2300      	moveq	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e0d3      	b.n	8003882 <HAL_TIM_OC_Start_IT+0x252>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d104      	bne.n	80036ea <HAL_TIM_OC_Start_IT+0xba>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e8:	e023      	b.n	8003732 <HAL_TIM_OC_Start_IT+0x102>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d104      	bne.n	80036fa <HAL_TIM_OC_Start_IT+0xca>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036f8:	e01b      	b.n	8003732 <HAL_TIM_OC_Start_IT+0x102>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d104      	bne.n	800370a <HAL_TIM_OC_Start_IT+0xda>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003708:	e013      	b.n	8003732 <HAL_TIM_OC_Start_IT+0x102>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b0c      	cmp	r3, #12
 800370e:	d104      	bne.n	800371a <HAL_TIM_OC_Start_IT+0xea>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003718:	e00b      	b.n	8003732 <HAL_TIM_OC_Start_IT+0x102>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b10      	cmp	r3, #16
 800371e:	d104      	bne.n	800372a <HAL_TIM_OC_Start_IT+0xfa>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003728:	e003      	b.n	8003732 <HAL_TIM_OC_Start_IT+0x102>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2202      	movs	r2, #2
 800372e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b0c      	cmp	r3, #12
 8003736:	d841      	bhi.n	80037bc <HAL_TIM_OC_Start_IT+0x18c>
 8003738:	a201      	add	r2, pc, #4	; (adr r2, 8003740 <HAL_TIM_OC_Start_IT+0x110>)
 800373a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373e:	bf00      	nop
 8003740:	08003775 	.word	0x08003775
 8003744:	080037bd 	.word	0x080037bd
 8003748:	080037bd 	.word	0x080037bd
 800374c:	080037bd 	.word	0x080037bd
 8003750:	08003787 	.word	0x08003787
 8003754:	080037bd 	.word	0x080037bd
 8003758:	080037bd 	.word	0x080037bd
 800375c:	080037bd 	.word	0x080037bd
 8003760:	08003799 	.word	0x08003799
 8003764:	080037bd 	.word	0x080037bd
 8003768:	080037bd 	.word	0x080037bd
 800376c:	080037bd 	.word	0x080037bd
 8003770:	080037ab 	.word	0x080037ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0202 	orr.w	r2, r2, #2
 8003782:	60da      	str	r2, [r3, #12]
      break;
 8003784:	e01d      	b.n	80037c2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0204 	orr.w	r2, r2, #4
 8003794:	60da      	str	r2, [r3, #12]
      break;
 8003796:	e014      	b.n	80037c2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0208 	orr.w	r2, r2, #8
 80037a6:	60da      	str	r2, [r3, #12]
      break;
 80037a8:	e00b      	b.n	80037c2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0210 	orr.w	r2, r2, #16
 80037b8:	60da      	str	r2, [r3, #12]
      break;
 80037ba:	e002      	b.n	80037c2 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
      break;
 80037c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d15b      	bne.n	8003880 <HAL_TIM_OC_Start_IT+0x250>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2201      	movs	r2, #1
 80037ce:	6839      	ldr	r1, [r7, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 feab 	bl	800452c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2c      	ldr	r2, [pc, #176]	; (800388c <HAL_TIM_OC_Start_IT+0x25c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00e      	beq.n	80037fe <HAL_TIM_OC_Start_IT+0x1ce>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a2a      	ldr	r2, [pc, #168]	; (8003890 <HAL_TIM_OC_Start_IT+0x260>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d009      	beq.n	80037fe <HAL_TIM_OC_Start_IT+0x1ce>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a29      	ldr	r2, [pc, #164]	; (8003894 <HAL_TIM_OC_Start_IT+0x264>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d004      	beq.n	80037fe <HAL_TIM_OC_Start_IT+0x1ce>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a27      	ldr	r2, [pc, #156]	; (8003898 <HAL_TIM_OC_Start_IT+0x268>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d101      	bne.n	8003802 <HAL_TIM_OC_Start_IT+0x1d2>
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <HAL_TIM_OC_Start_IT+0x1d4>
 8003802:	2300      	movs	r3, #0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d007      	beq.n	8003818 <HAL_TIM_OC_Start_IT+0x1e8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003816:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1b      	ldr	r2, [pc, #108]	; (800388c <HAL_TIM_OC_Start_IT+0x25c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00e      	beq.n	8003840 <HAL_TIM_OC_Start_IT+0x210>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382a:	d009      	beq.n	8003840 <HAL_TIM_OC_Start_IT+0x210>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1a      	ldr	r2, [pc, #104]	; (800389c <HAL_TIM_OC_Start_IT+0x26c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d004      	beq.n	8003840 <HAL_TIM_OC_Start_IT+0x210>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a15      	ldr	r2, [pc, #84]	; (8003890 <HAL_TIM_OC_Start_IT+0x260>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d115      	bne.n	800386c <HAL_TIM_OC_Start_IT+0x23c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	4b16      	ldr	r3, [pc, #88]	; (80038a0 <HAL_TIM_OC_Start_IT+0x270>)
 8003848:	4013      	ands	r3, r2
 800384a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b06      	cmp	r3, #6
 8003850:	d015      	beq.n	800387e <HAL_TIM_OC_Start_IT+0x24e>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003858:	d011      	beq.n	800387e <HAL_TIM_OC_Start_IT+0x24e>
      {
        __HAL_TIM_ENABLE(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386a:	e008      	b.n	800387e <HAL_TIM_OC_Start_IT+0x24e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	e000      	b.n	8003880 <HAL_TIM_OC_Start_IT+0x250>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800387e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003880:	7bfb      	ldrb	r3, [r7, #15]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40014000 	.word	0x40014000
 8003894:	40014400 	.word	0x40014400
 8003898:	40014800 	.word	0x40014800
 800389c:	40000400 	.word	0x40000400
 80038a0:	00010007 	.word	0x00010007

080038a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d122      	bne.n	8003900 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d11b      	bne.n	8003900 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0202 	mvn.w	r2, #2
 80038d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fa49 	bl	8003d7e <HAL_TIM_IC_CaptureCallback>
 80038ec:	e005      	b.n	80038fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fc feaa 	bl	8000648 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fa4c 	bl	8003d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	2b04      	cmp	r3, #4
 800390c:	d122      	bne.n	8003954 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b04      	cmp	r3, #4
 800391a:	d11b      	bne.n	8003954 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0204 	mvn.w	r2, #4
 8003924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2202      	movs	r2, #2
 800392a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fa1f 	bl	8003d7e <HAL_TIM_IC_CaptureCallback>
 8003940:	e005      	b.n	800394e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fc fe80 	bl	8000648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 fa22 	bl	8003d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b08      	cmp	r3, #8
 8003960:	d122      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	2b08      	cmp	r3, #8
 800396e:	d11b      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0208 	mvn.w	r2, #8
 8003978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2204      	movs	r2, #4
 800397e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f9f5 	bl	8003d7e <HAL_TIM_IC_CaptureCallback>
 8003994:	e005      	b.n	80039a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7fc fe56 	bl	8000648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f9f8 	bl	8003d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f003 0310 	and.w	r3, r3, #16
 80039b2:	2b10      	cmp	r3, #16
 80039b4:	d122      	bne.n	80039fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f003 0310 	and.w	r3, r3, #16
 80039c0:	2b10      	cmp	r3, #16
 80039c2:	d11b      	bne.n	80039fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0210 	mvn.w	r2, #16
 80039cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2208      	movs	r2, #8
 80039d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f9cb 	bl	8003d7e <HAL_TIM_IC_CaptureCallback>
 80039e8:	e005      	b.n	80039f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fc fe2c 	bl	8000648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f9ce 	bl	8003d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d10e      	bne.n	8003a28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d107      	bne.n	8003a28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f06f 0201 	mvn.w	r2, #1
 8003a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f9a1 	bl	8003d6a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a32:	2b80      	cmp	r3, #128	; 0x80
 8003a34:	d10e      	bne.n	8003a54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a40:	2b80      	cmp	r3, #128	; 0x80
 8003a42:	d107      	bne.n	8003a54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fe0a 	bl	8004668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a62:	d10e      	bne.n	8003a82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6e:	2b80      	cmp	r3, #128	; 0x80
 8003a70:	d107      	bne.n	8003a82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 fdfd 	bl	800467c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8c:	2b40      	cmp	r3, #64	; 0x40
 8003a8e:	d10e      	bne.n	8003aae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9a:	2b40      	cmp	r3, #64	; 0x40
 8003a9c:	d107      	bne.n	8003aae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f97c 	bl	8003da6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	d10e      	bne.n	8003ada <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	d107      	bne.n	8003ada <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f06f 0220 	mvn.w	r2, #32
 8003ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 fdbd 	bl	8004654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ada:	bf00      	nop
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d101      	bne.n	8003b02 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003afe:	2302      	movs	r3, #2
 8003b00:	e066      	b.n	8003bd0 <HAL_TIM_OC_ConfigChannel+0xec>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b14      	cmp	r3, #20
 8003b0e:	d857      	bhi.n	8003bc0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003b10:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b16:	bf00      	nop
 8003b18:	08003b6d 	.word	0x08003b6d
 8003b1c:	08003bc1 	.word	0x08003bc1
 8003b20:	08003bc1 	.word	0x08003bc1
 8003b24:	08003bc1 	.word	0x08003bc1
 8003b28:	08003b7b 	.word	0x08003b7b
 8003b2c:	08003bc1 	.word	0x08003bc1
 8003b30:	08003bc1 	.word	0x08003bc1
 8003b34:	08003bc1 	.word	0x08003bc1
 8003b38:	08003b89 	.word	0x08003b89
 8003b3c:	08003bc1 	.word	0x08003bc1
 8003b40:	08003bc1 	.word	0x08003bc1
 8003b44:	08003bc1 	.word	0x08003bc1
 8003b48:	08003b97 	.word	0x08003b97
 8003b4c:	08003bc1 	.word	0x08003bc1
 8003b50:	08003bc1 	.word	0x08003bc1
 8003b54:	08003bc1 	.word	0x08003bc1
 8003b58:	08003ba5 	.word	0x08003ba5
 8003b5c:	08003bc1 	.word	0x08003bc1
 8003b60:	08003bc1 	.word	0x08003bc1
 8003b64:	08003bc1 	.word	0x08003bc1
 8003b68:	08003bb3 	.word	0x08003bb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 f99a 	bl	8003eac <TIM_OC1_SetConfig>
      break;
 8003b78:	e025      	b.n	8003bc6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68b9      	ldr	r1, [r7, #8]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 fa19 	bl	8003fb8 <TIM_OC2_SetConfig>
      break;
 8003b86:	e01e      	b.n	8003bc6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 fa92 	bl	80040b8 <TIM_OC3_SetConfig>
      break;
 8003b94:	e017      	b.n	8003bc6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fb09 	bl	80041b4 <TIM_OC4_SetConfig>
      break;
 8003ba2:	e010      	b.n	8003bc6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68b9      	ldr	r1, [r7, #8]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fb66 	bl	800427c <TIM_OC5_SetConfig>
      break;
 8003bb0:	e009      	b.n	8003bc6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68b9      	ldr	r1, [r7, #8]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 fbbd 	bl	8004338 <TIM_OC6_SetConfig>
      break;
 8003bbe:	e002      	b.n	8003bc6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_TIM_ConfigClockSource+0x1c>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e0b6      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x18a>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c30:	d03e      	beq.n	8003cb0 <HAL_TIM_ConfigClockSource+0xd8>
 8003c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c36:	f200 8087 	bhi.w	8003d48 <HAL_TIM_ConfigClockSource+0x170>
 8003c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3e:	f000 8086 	beq.w	8003d4e <HAL_TIM_ConfigClockSource+0x176>
 8003c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c46:	d87f      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x170>
 8003c48:	2b70      	cmp	r3, #112	; 0x70
 8003c4a:	d01a      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0xaa>
 8003c4c:	2b70      	cmp	r3, #112	; 0x70
 8003c4e:	d87b      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x170>
 8003c50:	2b60      	cmp	r3, #96	; 0x60
 8003c52:	d050      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0x11e>
 8003c54:	2b60      	cmp	r3, #96	; 0x60
 8003c56:	d877      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x170>
 8003c58:	2b50      	cmp	r3, #80	; 0x50
 8003c5a:	d03c      	beq.n	8003cd6 <HAL_TIM_ConfigClockSource+0xfe>
 8003c5c:	2b50      	cmp	r3, #80	; 0x50
 8003c5e:	d873      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x170>
 8003c60:	2b40      	cmp	r3, #64	; 0x40
 8003c62:	d058      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0x13e>
 8003c64:	2b40      	cmp	r3, #64	; 0x40
 8003c66:	d86f      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x170>
 8003c68:	2b30      	cmp	r3, #48	; 0x30
 8003c6a:	d064      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x15e>
 8003c6c:	2b30      	cmp	r3, #48	; 0x30
 8003c6e:	d86b      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x170>
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d060      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x15e>
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d867      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x170>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d05c      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x15e>
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d05a      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x15e>
 8003c80:	e062      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6899      	ldr	r1, [r3, #8]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f000 fc2b 	bl	80044ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	609a      	str	r2, [r3, #8]
      break;
 8003cae:	e04f      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	6899      	ldr	r1, [r3, #8]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f000 fc14 	bl	80044ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cd2:	609a      	str	r2, [r3, #8]
      break;
 8003cd4:	e03c      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	6859      	ldr	r1, [r3, #4]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f000 fb88 	bl	80043f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2150      	movs	r1, #80	; 0x50
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fbe1 	bl	80044b6 <TIM_ITRx_SetConfig>
      break;
 8003cf4:	e02c      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6859      	ldr	r1, [r3, #4]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	461a      	mov	r2, r3
 8003d04:	f000 fba7 	bl	8004456 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2160      	movs	r1, #96	; 0x60
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fbd1 	bl	80044b6 <TIM_ITRx_SetConfig>
      break;
 8003d14:	e01c      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6859      	ldr	r1, [r3, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	461a      	mov	r2, r3
 8003d24:	f000 fb68 	bl	80043f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2140      	movs	r1, #64	; 0x40
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fbc1 	bl	80044b6 <TIM_ITRx_SetConfig>
      break;
 8003d34:	e00c      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4610      	mov	r0, r2
 8003d42:	f000 fbb8 	bl	80044b6 <TIM_ITRx_SetConfig>
      break;
 8003d46:	e003      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d4c:	e000      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003d4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
	...

08003dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a32      	ldr	r2, [pc, #200]	; (8003e98 <TIM_Base_SetConfig+0xdc>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d007      	beq.n	8003de4 <TIM_Base_SetConfig+0x28>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dda:	d003      	beq.n	8003de4 <TIM_Base_SetConfig+0x28>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a2f      	ldr	r2, [pc, #188]	; (8003e9c <TIM_Base_SetConfig+0xe0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d108      	bne.n	8003df6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a27      	ldr	r2, [pc, #156]	; (8003e98 <TIM_Base_SetConfig+0xdc>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d013      	beq.n	8003e26 <TIM_Base_SetConfig+0x6a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e04:	d00f      	beq.n	8003e26 <TIM_Base_SetConfig+0x6a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a24      	ldr	r2, [pc, #144]	; (8003e9c <TIM_Base_SetConfig+0xe0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00b      	beq.n	8003e26 <TIM_Base_SetConfig+0x6a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a23      	ldr	r2, [pc, #140]	; (8003ea0 <TIM_Base_SetConfig+0xe4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d007      	beq.n	8003e26 <TIM_Base_SetConfig+0x6a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a22      	ldr	r2, [pc, #136]	; (8003ea4 <TIM_Base_SetConfig+0xe8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d003      	beq.n	8003e26 <TIM_Base_SetConfig+0x6a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a21      	ldr	r2, [pc, #132]	; (8003ea8 <TIM_Base_SetConfig+0xec>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d108      	bne.n	8003e38 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a0e      	ldr	r2, [pc, #56]	; (8003e98 <TIM_Base_SetConfig+0xdc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00b      	beq.n	8003e7c <TIM_Base_SetConfig+0xc0>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a0e      	ldr	r2, [pc, #56]	; (8003ea0 <TIM_Base_SetConfig+0xe4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d007      	beq.n	8003e7c <TIM_Base_SetConfig+0xc0>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a0d      	ldr	r2, [pc, #52]	; (8003ea4 <TIM_Base_SetConfig+0xe8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d003      	beq.n	8003e7c <TIM_Base_SetConfig+0xc0>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a0c      	ldr	r2, [pc, #48]	; (8003ea8 <TIM_Base_SetConfig+0xec>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d103      	bne.n	8003e84 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	615a      	str	r2, [r3, #20]
}
 8003e8a:	bf00      	nop
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40000400 	.word	0x40000400
 8003ea0:	40014000 	.word	0x40014000
 8003ea4:	40014400 	.word	0x40014400
 8003ea8:	40014800 	.word	0x40014800

08003eac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	f023 0201 	bic.w	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0303 	bic.w	r3, r3, #3
 8003ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f023 0302 	bic.w	r3, r3, #2
 8003ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a28      	ldr	r2, [pc, #160]	; (8003fa8 <TIM_OC1_SetConfig+0xfc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00b      	beq.n	8003f24 <TIM_OC1_SetConfig+0x78>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a27      	ldr	r2, [pc, #156]	; (8003fac <TIM_OC1_SetConfig+0x100>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d007      	beq.n	8003f24 <TIM_OC1_SetConfig+0x78>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a26      	ldr	r2, [pc, #152]	; (8003fb0 <TIM_OC1_SetConfig+0x104>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d003      	beq.n	8003f24 <TIM_OC1_SetConfig+0x78>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a25      	ldr	r2, [pc, #148]	; (8003fb4 <TIM_OC1_SetConfig+0x108>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d10c      	bne.n	8003f3e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f023 0308 	bic.w	r3, r3, #8
 8003f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f023 0304 	bic.w	r3, r3, #4
 8003f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a19      	ldr	r2, [pc, #100]	; (8003fa8 <TIM_OC1_SetConfig+0xfc>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00b      	beq.n	8003f5e <TIM_OC1_SetConfig+0xb2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a18      	ldr	r2, [pc, #96]	; (8003fac <TIM_OC1_SetConfig+0x100>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d007      	beq.n	8003f5e <TIM_OC1_SetConfig+0xb2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a17      	ldr	r2, [pc, #92]	; (8003fb0 <TIM_OC1_SetConfig+0x104>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d003      	beq.n	8003f5e <TIM_OC1_SetConfig+0xb2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a16      	ldr	r2, [pc, #88]	; (8003fb4 <TIM_OC1_SetConfig+0x108>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d111      	bne.n	8003f82 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	621a      	str	r2, [r3, #32]
}
 8003f9c:	bf00      	nop
 8003f9e:	371c      	adds	r7, #28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	40012c00 	.word	0x40012c00
 8003fac:	40014000 	.word	0x40014000
 8003fb0:	40014400 	.word	0x40014400
 8003fb4:	40014800 	.word	0x40014800

08003fb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f023 0210 	bic.w	r2, r3, #16
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	021b      	lsls	r3, r3, #8
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f023 0320 	bic.w	r3, r3, #32
 8004006:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a24      	ldr	r2, [pc, #144]	; (80040a8 <TIM_OC2_SetConfig+0xf0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d10d      	bne.n	8004038 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004036:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a1b      	ldr	r2, [pc, #108]	; (80040a8 <TIM_OC2_SetConfig+0xf0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00b      	beq.n	8004058 <TIM_OC2_SetConfig+0xa0>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a1a      	ldr	r2, [pc, #104]	; (80040ac <TIM_OC2_SetConfig+0xf4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d007      	beq.n	8004058 <TIM_OC2_SetConfig+0xa0>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a19      	ldr	r2, [pc, #100]	; (80040b0 <TIM_OC2_SetConfig+0xf8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d003      	beq.n	8004058 <TIM_OC2_SetConfig+0xa0>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a18      	ldr	r2, [pc, #96]	; (80040b4 <TIM_OC2_SetConfig+0xfc>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d113      	bne.n	8004080 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800405e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004066:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	4313      	orrs	r3, r2
 800407e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	621a      	str	r2, [r3, #32]
}
 800409a:	bf00      	nop
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40012c00 	.word	0x40012c00
 80040ac:	40014000 	.word	0x40014000
 80040b0:	40014400 	.word	0x40014400
 80040b4:	40014800 	.word	0x40014800

080040b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0303 	bic.w	r3, r3, #3
 80040f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	021b      	lsls	r3, r3, #8
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a23      	ldr	r2, [pc, #140]	; (80041a4 <TIM_OC3_SetConfig+0xec>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d10d      	bne.n	8004136 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004120:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	021b      	lsls	r3, r3, #8
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004134:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a1a      	ldr	r2, [pc, #104]	; (80041a4 <TIM_OC3_SetConfig+0xec>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00b      	beq.n	8004156 <TIM_OC3_SetConfig+0x9e>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a19      	ldr	r2, [pc, #100]	; (80041a8 <TIM_OC3_SetConfig+0xf0>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d007      	beq.n	8004156 <TIM_OC3_SetConfig+0x9e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a18      	ldr	r2, [pc, #96]	; (80041ac <TIM_OC3_SetConfig+0xf4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d003      	beq.n	8004156 <TIM_OC3_SetConfig+0x9e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a17      	ldr	r2, [pc, #92]	; (80041b0 <TIM_OC3_SetConfig+0xf8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d113      	bne.n	800417e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800415c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4313      	orrs	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	621a      	str	r2, [r3, #32]
}
 8004198:	bf00      	nop
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	40012c00 	.word	0x40012c00
 80041a8:	40014000 	.word	0x40014000
 80041ac:	40014400 	.word	0x40014400
 80041b0:	40014800 	.word	0x40014800

080041b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	031b      	lsls	r3, r3, #12
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a16      	ldr	r2, [pc, #88]	; (800426c <TIM_OC4_SetConfig+0xb8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00b      	beq.n	8004230 <TIM_OC4_SetConfig+0x7c>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a15      	ldr	r2, [pc, #84]	; (8004270 <TIM_OC4_SetConfig+0xbc>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d007      	beq.n	8004230 <TIM_OC4_SetConfig+0x7c>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a14      	ldr	r2, [pc, #80]	; (8004274 <TIM_OC4_SetConfig+0xc0>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d003      	beq.n	8004230 <TIM_OC4_SetConfig+0x7c>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a13      	ldr	r2, [pc, #76]	; (8004278 <TIM_OC4_SetConfig+0xc4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d109      	bne.n	8004244 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004236:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	019b      	lsls	r3, r3, #6
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	621a      	str	r2, [r3, #32]
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40012c00 	.word	0x40012c00
 8004270:	40014000 	.word	0x40014000
 8004274:	40014400 	.word	0x40014400
 8004278:	40014800 	.word	0x40014800

0800427c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80042c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	041b      	lsls	r3, r3, #16
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a15      	ldr	r2, [pc, #84]	; (8004328 <TIM_OC5_SetConfig+0xac>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00b      	beq.n	80042ee <TIM_OC5_SetConfig+0x72>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a14      	ldr	r2, [pc, #80]	; (800432c <TIM_OC5_SetConfig+0xb0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d007      	beq.n	80042ee <TIM_OC5_SetConfig+0x72>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a13      	ldr	r2, [pc, #76]	; (8004330 <TIM_OC5_SetConfig+0xb4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d003      	beq.n	80042ee <TIM_OC5_SetConfig+0x72>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a12      	ldr	r2, [pc, #72]	; (8004334 <TIM_OC5_SetConfig+0xb8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d109      	bne.n	8004302 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	021b      	lsls	r3, r3, #8
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	621a      	str	r2, [r3, #32]
}
 800431c:	bf00      	nop
 800431e:	371c      	adds	r7, #28
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	40012c00 	.word	0x40012c00
 800432c:	40014000 	.word	0x40014000
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800

08004338 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800436a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	4313      	orrs	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800437e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	051b      	lsls	r3, r3, #20
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a16      	ldr	r2, [pc, #88]	; (80043e8 <TIM_OC6_SetConfig+0xb0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00b      	beq.n	80043ac <TIM_OC6_SetConfig+0x74>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a15      	ldr	r2, [pc, #84]	; (80043ec <TIM_OC6_SetConfig+0xb4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d007      	beq.n	80043ac <TIM_OC6_SetConfig+0x74>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a14      	ldr	r2, [pc, #80]	; (80043f0 <TIM_OC6_SetConfig+0xb8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d003      	beq.n	80043ac <TIM_OC6_SetConfig+0x74>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a13      	ldr	r2, [pc, #76]	; (80043f4 <TIM_OC6_SetConfig+0xbc>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d109      	bne.n	80043c0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	029b      	lsls	r3, r3, #10
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	621a      	str	r2, [r3, #32]
}
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40012c00 	.word	0x40012c00
 80043ec:	40014000 	.word	0x40014000
 80043f0:	40014400 	.word	0x40014400
 80043f4:	40014800 	.word	0x40014800

080043f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	f023 0201 	bic.w	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f023 030a 	bic.w	r3, r3, #10
 8004434:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	621a      	str	r2, [r3, #32]
}
 800444a:	bf00      	nop
 800444c:	371c      	adds	r7, #28
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004456:	b480      	push	{r7}
 8004458:	b087      	sub	sp, #28
 800445a:	af00      	add	r7, sp, #0
 800445c:	60f8      	str	r0, [r7, #12]
 800445e:	60b9      	str	r1, [r7, #8]
 8004460:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f023 0210 	bic.w	r2, r3, #16
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004480:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	031b      	lsls	r3, r3, #12
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	4313      	orrs	r3, r2
 800448a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004492:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	621a      	str	r2, [r3, #32]
}
 80044aa:	bf00      	nop
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b085      	sub	sp, #20
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f043 0307 	orr.w	r3, r3, #7
 80044d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	609a      	str	r2, [r3, #8]
}
 80044e0:	bf00      	nop
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004506:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	021a      	lsls	r2, r3, #8
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	431a      	orrs	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4313      	orrs	r3, r2
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	609a      	str	r2, [r3, #8]
}
 8004520:	bf00      	nop
 8004522:	371c      	adds	r7, #28
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	2201      	movs	r2, #1
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a1a      	ldr	r2, [r3, #32]
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	43db      	mvns	r3, r3
 800454e:	401a      	ands	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6a1a      	ldr	r2, [r3, #32]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f003 031f 	and.w	r3, r3, #31
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	fa01 f303 	lsl.w	r3, r1, r3
 8004564:	431a      	orrs	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	621a      	str	r2, [r3, #32]
}
 800456a:	bf00      	nop
 800456c:	371c      	adds	r7, #28
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
	...

08004578 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800458c:	2302      	movs	r3, #2
 800458e:	e054      	b.n	800463a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a24      	ldr	r2, [pc, #144]	; (8004648 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d108      	bne.n	80045cc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80045c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a17      	ldr	r2, [pc, #92]	; (8004648 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00e      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f8:	d009      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a13      	ldr	r2, [pc, #76]	; (800464c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d004      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a11      	ldr	r2, [pc, #68]	; (8004650 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d10c      	bne.n	8004628 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004614:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	4313      	orrs	r3, r2
 800461e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40012c00 	.word	0x40012c00
 800464c:	40000400 	.word	0x40000400
 8004650:	40014000 	.word	0x40014000

08004654 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e040      	b.n	8004724 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fc fe14 	bl	80012e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2224      	movs	r2, #36	; 0x24
 80046bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0201 	bic.w	r2, r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fe46 	bl	8005360 <UART_SetConfig>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e022      	b.n	8004724 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 ff70 	bl	80055cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689a      	ldr	r2, [r3, #8]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800470a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fff7 	bl	8005710 <UART_CheckIdleState>
 8004722:	4603      	mov	r3, r0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e048      	b.n	80047d0 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fc fdc6 	bl	80012e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2224      	movs	r2, #36	; 0x24
 8004758:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0201 	bic.w	r2, r2, #1
 8004768:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fdf8 	bl	8005360 <UART_SetConfig>
 8004770:	4603      	mov	r3, r0
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e02a      	b.n	80047d0 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 ff22 	bl	80055cc <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004796:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80047a6:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0208 	orr.w	r2, r2, #8
 80047b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0201 	orr.w	r2, r2, #1
 80047c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 ffa1 	bl	8005710 <UART_CheckIdleState>
 80047ce:	4603      	mov	r3, r0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08a      	sub	sp, #40	; 0x28
 80047dc:	af02      	add	r7, sp, #8
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047ec:	2b20      	cmp	r3, #32
 80047ee:	f040 8082 	bne.w	80048f6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <HAL_UART_Transmit+0x26>
 80047f8:	88fb      	ldrh	r3, [r7, #6]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e07a      	b.n	80048f8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <HAL_UART_Transmit+0x38>
 800480c:	2302      	movs	r3, #2
 800480e:	e073      	b.n	80048f8 <HAL_UART_Transmit+0x120>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2221      	movs	r2, #33	; 0x21
 8004824:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004826:	f7fc ff3f 	bl	80016a8 <HAL_GetTick>
 800482a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	88fa      	ldrh	r2, [r7, #6]
 8004830:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	88fa      	ldrh	r2, [r7, #6]
 8004838:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004844:	d108      	bne.n	8004858 <HAL_UART_Transmit+0x80>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d104      	bne.n	8004858 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	61bb      	str	r3, [r7, #24]
 8004856:	e003      	b.n	8004860 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800485c:	2300      	movs	r3, #0
 800485e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004868:	e02d      	b.n	80048c6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2200      	movs	r2, #0
 8004872:	2180      	movs	r1, #128	; 0x80
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 ff94 	bl	80057a2 <UART_WaitOnFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e039      	b.n	80048f8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10b      	bne.n	80048a2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	881a      	ldrh	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004896:	b292      	uxth	r2, r2
 8004898:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	3302      	adds	r3, #2
 800489e:	61bb      	str	r3, [r7, #24]
 80048a0:	e008      	b.n	80048b4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	781a      	ldrb	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	b292      	uxth	r2, r2
 80048ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	3301      	adds	r3, #1
 80048b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1cb      	bne.n	800486a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2200      	movs	r2, #0
 80048da:	2140      	movs	r1, #64	; 0x40
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 ff60 	bl	80057a2 <UART_WaitOnFlagUntilTimeout>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e005      	b.n	80048f8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2220      	movs	r2, #32
 80048f0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	e000      	b.n	80048f8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80048f6:	2302      	movs	r3, #2
  }
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3720      	adds	r7, #32
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08a      	sub	sp, #40	; 0x28
 8004904:	af02      	add	r7, sp, #8
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	4613      	mov	r3, r2
 800490e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004914:	2b20      	cmp	r3, #32
 8004916:	f040 80bf 	bne.w	8004a98 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <HAL_UART_Receive+0x26>
 8004920:	88fb      	ldrh	r3, [r7, #6]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e0b7      	b.n	8004a9a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_UART_Receive+0x38>
 8004934:	2302      	movs	r3, #2
 8004936:	e0b0      	b.n	8004a9a <HAL_UART_Receive+0x19a>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2222      	movs	r2, #34	; 0x22
 800494c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004954:	f7fc fea8 	bl	80016a8 <HAL_GetTick>
 8004958:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	88fa      	ldrh	r2, [r7, #6]
 800495e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	88fa      	ldrh	r2, [r7, #6]
 8004966:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004972:	d10e      	bne.n	8004992 <HAL_UART_Receive+0x92>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d105      	bne.n	8004988 <HAL_UART_Receive+0x88>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004982:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004986:	e02d      	b.n	80049e4 <HAL_UART_Receive+0xe4>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	22ff      	movs	r2, #255	; 0xff
 800498c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004990:	e028      	b.n	80049e4 <HAL_UART_Receive+0xe4>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10d      	bne.n	80049b6 <HAL_UART_Receive+0xb6>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d104      	bne.n	80049ac <HAL_UART_Receive+0xac>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	22ff      	movs	r2, #255	; 0xff
 80049a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049aa:	e01b      	b.n	80049e4 <HAL_UART_Receive+0xe4>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	227f      	movs	r2, #127	; 0x7f
 80049b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049b4:	e016      	b.n	80049e4 <HAL_UART_Receive+0xe4>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049be:	d10d      	bne.n	80049dc <HAL_UART_Receive+0xdc>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d104      	bne.n	80049d2 <HAL_UART_Receive+0xd2>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	227f      	movs	r2, #127	; 0x7f
 80049cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049d0:	e008      	b.n	80049e4 <HAL_UART_Receive+0xe4>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	223f      	movs	r2, #63	; 0x3f
 80049d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049da:	e003      	b.n	80049e4 <HAL_UART_Receive+0xe4>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80049ea:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f4:	d108      	bne.n	8004a08 <HAL_UART_Receive+0x108>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d104      	bne.n	8004a08 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	61bb      	str	r3, [r7, #24]
 8004a06:	e003      	b.n	8004a10 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004a18:	e033      	b.n	8004a82 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2200      	movs	r2, #0
 8004a22:	2120      	movs	r1, #32
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 febc 	bl	80057a2 <UART_WaitOnFlagUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e032      	b.n	8004a9a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10c      	bne.n	8004a54 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	8a7b      	ldrh	r3, [r7, #18]
 8004a44:	4013      	ands	r3, r2
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	3302      	adds	r3, #2
 8004a50:	61bb      	str	r3, [r7, #24]
 8004a52:	e00d      	b.n	8004a70 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	8a7b      	ldrh	r3, [r7, #18]
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	4013      	ands	r3, r2
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1c5      	bne.n	8004a1a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2220      	movs	r2, #32
 8004a92:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	e000      	b.n	8004a9a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004a98:	2302      	movs	r3, #2
  }
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3720      	adds	r7, #32
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b08b      	sub	sp, #44	; 0x2c
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ab6:	2b20      	cmp	r3, #32
 8004ab8:	d156      	bne.n	8004b68 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <HAL_UART_Transmit_IT+0x22>
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e04f      	b.n	8004b6a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_UART_Transmit_IT+0x34>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e048      	b.n	8004b6a <HAL_UART_Transmit_IT+0xc6>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	88fa      	ldrh	r2, [r7, #6]
 8004aea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	88fa      	ldrh	r2, [r7, #6]
 8004af2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2221      	movs	r2, #33	; 0x21
 8004b08:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b12:	d107      	bne.n	8004b24 <HAL_UART_Transmit_IT+0x80>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d103      	bne.n	8004b24 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4a16      	ldr	r2, [pc, #88]	; (8004b78 <HAL_UART_Transmit_IT+0xd4>)
 8004b20:	669a      	str	r2, [r3, #104]	; 0x68
 8004b22:	e002      	b.n	8004b2a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4a15      	ldr	r2, [pc, #84]	; (8004b7c <HAL_UART_Transmit_IT+0xd8>)
 8004b28:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	e853 3f00 	ldrex	r3, [r3]
 8004b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	623b      	str	r3, [r7, #32]
 8004b52:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b54:	69f9      	ldr	r1, [r7, #28]
 8004b56:	6a3a      	ldr	r2, [r7, #32]
 8004b58:	e841 2300 	strex	r3, r2, [r1]
 8004b5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1e6      	bne.n	8004b32 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	e000      	b.n	8004b6a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004b68:	2302      	movs	r3, #2
  }
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	372c      	adds	r7, #44	; 0x2c
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	08005c2f 	.word	0x08005c2f
 8004b7c:	08005b77 	.word	0x08005b77

08004b80 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08a      	sub	sp, #40	; 0x28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b92:	2b20      	cmp	r3, #32
 8004b94:	d13d      	bne.n	8004c12 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <HAL_UART_Receive_IT+0x22>
 8004b9c:	88fb      	ldrh	r3, [r7, #6]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e036      	b.n	8004c14 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d101      	bne.n	8004bb4 <HAL_UART_Receive_IT+0x34>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	e02f      	b.n	8004c14 <HAL_UART_Receive_IT+0x94>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d018      	beq.n	8004c02 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	461a      	mov	r2, r3
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	623b      	str	r3, [r7, #32]
 8004bf0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	69f9      	ldr	r1, [r7, #28]
 8004bf4:	6a3a      	ldr	r2, [r7, #32]
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e6      	bne.n	8004bd0 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c02:	88fb      	ldrh	r3, [r7, #6]
 8004c04:	461a      	mov	r2, r3
 8004c06:	68b9      	ldr	r1, [r7, #8]
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 fe8f 	bl	800592c <UART_Start_Receive_IT>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	e000      	b.n	8004c14 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c12:	2302      	movs	r3, #2
  }
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3728      	adds	r7, #40	; 0x28
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b0ba      	sub	sp, #232	; 0xe8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004c46:	f640 030f 	movw	r3, #2063	; 0x80f
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004c50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d115      	bne.n	8004c84 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00f      	beq.n	8004c84 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d009      	beq.n	8004c84 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 82a3 	beq.w	80051c0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	4798      	blx	r3
      }
      return;
 8004c82:	e29d      	b.n	80051c0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 8117 	beq.w	8004ebc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004c9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004c9e:	4b85      	ldr	r3, [pc, #532]	; (8004eb4 <HAL_UART_IRQHandler+0x298>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 810a 	beq.w	8004ebc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d011      	beq.n	8004cd8 <HAL_UART_IRQHandler+0xbc>
 8004cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00b      	beq.n	8004cd8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cce:	f043 0201 	orr.w	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d011      	beq.n	8004d08 <HAL_UART_IRQHandler+0xec>
 8004ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00b      	beq.n	8004d08 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cfe:	f043 0204 	orr.w	r2, r3, #4
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d011      	beq.n	8004d38 <HAL_UART_IRQHandler+0x11c>
 8004d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00b      	beq.n	8004d38 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2204      	movs	r2, #4
 8004d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d2e:	f043 0202 	orr.w	r2, r3, #2
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d3c:	f003 0308 	and.w	r3, r3, #8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d017      	beq.n	8004d74 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d105      	bne.n	8004d5c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d54:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00b      	beq.n	8004d74 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2208      	movs	r2, #8
 8004d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d6a:	f043 0208 	orr.w	r2, r3, #8
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d012      	beq.n	8004da6 <HAL_UART_IRQHandler+0x18a>
 8004d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00c      	beq.n	8004da6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d9c:	f043 0220 	orr.w	r2, r3, #32
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 8209 	beq.w	80051c4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00d      	beq.n	8004dda <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004de0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dee:	2b40      	cmp	r3, #64	; 0x40
 8004df0:	d005      	beq.n	8004dfe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004df6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d04f      	beq.n	8004e9e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fe40 	bl	8005a84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0e:	2b40      	cmp	r3, #64	; 0x40
 8004e10:	d141      	bne.n	8004e96 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3308      	adds	r3, #8
 8004e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3308      	adds	r3, #8
 8004e3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e4e:	e841 2300 	strex	r3, r2, [r1]
 8004e52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1d9      	bne.n	8004e12 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d013      	beq.n	8004e8e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6a:	4a13      	ldr	r2, [pc, #76]	; (8004eb8 <HAL_UART_IRQHandler+0x29c>)
 8004e6c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fc fd92 	bl	800199c <HAL_DMA_Abort_IT>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d017      	beq.n	8004eae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004e88:	4610      	mov	r0, r2
 8004e8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8c:	e00f      	b.n	8004eae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f9ac 	bl	80051ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e94:	e00b      	b.n	8004eae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f9a8 	bl	80051ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e9c:	e007      	b.n	8004eae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f9a4 	bl	80051ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004eac:	e18a      	b.n	80051c4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eae:	bf00      	nop
    return;
 8004eb0:	e188      	b.n	80051c4 <HAL_UART_IRQHandler+0x5a8>
 8004eb2:	bf00      	nop
 8004eb4:	04000120 	.word	0x04000120
 8004eb8:	08005b4b 	.word	0x08005b4b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	f040 8143 	bne.w	800514c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eca:	f003 0310 	and.w	r3, r3, #16
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 813c 	beq.w	800514c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ed8:	f003 0310 	and.w	r3, r3, #16
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 8135 	beq.w	800514c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2210      	movs	r2, #16
 8004ee8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef4:	2b40      	cmp	r3, #64	; 0x40
 8004ef6:	f040 80b1 	bne.w	800505c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 815c 	beq.w	80051c8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	f080 8154 	bcs.w	80051c8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	2b20      	cmp	r3, #32
 8004f32:	f000 8085 	beq.w	8005040 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f42:	e853 3f00 	ldrex	r3, [r3]
 8004f46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f64:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f68:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f6c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f70:	e841 2300 	strex	r3, r2, [r1]
 8004f74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1da      	bne.n	8004f36 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3308      	adds	r3, #8
 8004f86:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f8a:	e853 3f00 	ldrex	r3, [r3]
 8004f8e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f92:	f023 0301 	bic.w	r3, r3, #1
 8004f96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3308      	adds	r3, #8
 8004fa0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fa4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004fa8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004faa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004fac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fb0:	e841 2300 	strex	r3, r2, [r1]
 8004fb4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e1      	bne.n	8004f80 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fc6:	e853 3f00 	ldrex	r3, [r3]
 8004fca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3308      	adds	r3, #8
 8004fdc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004fe0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004fe2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004fe6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004fe8:	e841 2300 	strex	r3, r2, [r1]
 8004fec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004fee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1e3      	bne.n	8004fbc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005008:	e853 3f00 	ldrex	r3, [r3]
 800500c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800500e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005010:	f023 0310 	bic.w	r3, r3, #16
 8005014:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	461a      	mov	r2, r3
 800501e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005022:	65bb      	str	r3, [r7, #88]	; 0x58
 8005024:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005026:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005028:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800502a:	e841 2300 	strex	r3, r2, [r1]
 800502e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1e4      	bne.n	8005000 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503a:	4618      	mov	r0, r3
 800503c:	f7fc fc75 	bl	800192a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800504c:	b29b      	uxth	r3, r3
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	b29b      	uxth	r3, r3
 8005052:	4619      	mov	r1, r3
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f8d3 	bl	8005200 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800505a:	e0b5      	b.n	80051c8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005068:	b29b      	uxth	r3, r3
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005076:	b29b      	uxth	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80a7 	beq.w	80051cc <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800507e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 80a2 	beq.w	80051cc <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005090:	e853 3f00 	ldrex	r3, [r3]
 8005094:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005098:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800509c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	461a      	mov	r2, r3
 80050a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050aa:	647b      	str	r3, [r7, #68]	; 0x44
 80050ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e4      	bne.n	8005088 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3308      	adds	r3, #8
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	e853 3f00 	ldrex	r3, [r3]
 80050cc:	623b      	str	r3, [r7, #32]
   return(result);
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	f023 0301 	bic.w	r3, r3, #1
 80050d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3308      	adds	r3, #8
 80050de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050e2:	633a      	str	r2, [r7, #48]	; 0x30
 80050e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1e3      	bne.n	80050be <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	e853 3f00 	ldrex	r3, [r3]
 8005114:	60fb      	str	r3, [r7, #12]
   return(result);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f023 0310 	bic.w	r3, r3, #16
 800511c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	461a      	mov	r2, r3
 8005126:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800512a:	61fb      	str	r3, [r7, #28]
 800512c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	69b9      	ldr	r1, [r7, #24]
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	617b      	str	r3, [r7, #20]
   return(result);
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e4      	bne.n	8005108 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800513e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005142:	4619      	mov	r1, r3
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f85b 	bl	8005200 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800514a:	e03f      	b.n	80051cc <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800514c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00e      	beq.n	8005176 <HAL_UART_IRQHandler+0x55a>
 8005158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800515c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d008      	beq.n	8005176 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800516c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 ff43 	bl	8005ffa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005174:	e02d      	b.n	80051d2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800517a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00e      	beq.n	80051a0 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518a:	2b00      	cmp	r3, #0
 800518c:	d008      	beq.n	80051a0 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005192:	2b00      	cmp	r3, #0
 8005194:	d01c      	beq.n	80051d0 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	4798      	blx	r3
    }
    return;
 800519e:	e017      	b.n	80051d0 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d012      	beq.n	80051d2 <HAL_UART_IRQHandler+0x5b6>
 80051ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00c      	beq.n	80051d2 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fd98 	bl	8005cee <UART_EndTransmit_IT>
    return;
 80051be:	e008      	b.n	80051d2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80051c0:	bf00      	nop
 80051c2:	e006      	b.n	80051d2 <HAL_UART_IRQHandler+0x5b6>
    return;
 80051c4:	bf00      	nop
 80051c6:	e004      	b.n	80051d2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80051c8:	bf00      	nop
 80051ca:	e002      	b.n	80051d2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80051cc:	bf00      	nop
 80051ce:	e000      	b.n	80051d2 <HAL_UART_IRQHandler+0x5b6>
    return;
 80051d0:	bf00      	nop
  }

}
 80051d2:	37e8      	adds	r7, #232	; 0xe8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8005218:	b480      	push	{r7}
 800521a:	b08f      	sub	sp, #60	; 0x3c
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005226:	2b01      	cmp	r3, #1
 8005228:	d101      	bne.n	800522e <HAL_HalfDuplex_EnableTransmitter+0x16>
 800522a:	2302      	movs	r3, #2
 800522c:	e040      	b.n	80052b0 <HAL_HalfDuplex_EnableTransmitter+0x98>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2224      	movs	r2, #36	; 0x24
 800523a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	61fb      	str	r3, [r7, #28]
   return(result);
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	f023 030c 	bic.w	r3, r3, #12
 8005250:	637b      	str	r3, [r7, #52]	; 0x34
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800525c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1e6      	bne.n	800523c <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	e853 3f00 	ldrex	r3, [r3]
 800527a:	60bb      	str	r3, [r7, #8]
   return(result);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f043 0308 	orr.w	r3, r3, #8
 8005282:	633b      	str	r3, [r7, #48]	; 0x30
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	461a      	mov	r2, r3
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	61bb      	str	r3, [r7, #24]
 800528e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	6979      	ldr	r1, [r7, #20]
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	613b      	str	r3, [r7, #16]
   return(result);
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e6      	bne.n	800526e <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	373c      	adds	r7, #60	; 0x3c
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80052bc:	b480      	push	{r7}
 80052be:	b08f      	sub	sp, #60	; 0x3c
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_HalfDuplex_EnableReceiver+0x16>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e040      	b.n	8005354 <HAL_HalfDuplex_EnableReceiver+0x98>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2224      	movs	r2, #36	; 0x24
 80052de:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	e853 3f00 	ldrex	r3, [r3]
 80052ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	f023 030c 	bic.w	r3, r3, #12
 80052f4:	637b      	str	r3, [r7, #52]	; 0x34
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	461a      	mov	r2, r3
 80052fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005300:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005302:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005306:	e841 2300 	strex	r3, r2, [r1]
 800530a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1e6      	bne.n	80052e0 <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	e853 3f00 	ldrex	r3, [r3]
 800531e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f043 0304 	orr.w	r3, r3, #4
 8005326:	633b      	str	r3, [r7, #48]	; 0x30
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	461a      	mov	r2, r3
 800532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005330:	61bb      	str	r3, [r7, #24]
 8005332:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	6979      	ldr	r1, [r7, #20]
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	e841 2300 	strex	r3, r2, [r1]
 800533c:	613b      	str	r3, [r7, #16]
   return(result);
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e6      	bne.n	8005312 <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2220      	movs	r2, #32
 8005348:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	373c      	adds	r7, #60	; 0x3c
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b088      	sub	sp, #32
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005368:	2300      	movs	r3, #0
 800536a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	431a      	orrs	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	4b8a      	ldr	r3, [pc, #552]	; (80055b4 <UART_SetConfig+0x254>)
 800538c:	4013      	ands	r3, r2
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	6812      	ldr	r2, [r2, #0]
 8005392:	6979      	ldr	r1, [r7, #20]
 8005394:	430b      	orrs	r3, r1
 8005396:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a78      	ldr	r2, [pc, #480]	; (80055b8 <UART_SetConfig+0x258>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d120      	bne.n	800541e <UART_SetConfig+0xbe>
 80053dc:	4b77      	ldr	r3, [pc, #476]	; (80055bc <UART_SetConfig+0x25c>)
 80053de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e0:	f003 0303 	and.w	r3, r3, #3
 80053e4:	2b03      	cmp	r3, #3
 80053e6:	d817      	bhi.n	8005418 <UART_SetConfig+0xb8>
 80053e8:	a201      	add	r2, pc, #4	; (adr r2, 80053f0 <UART_SetConfig+0x90>)
 80053ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ee:	bf00      	nop
 80053f0:	08005401 	.word	0x08005401
 80053f4:	0800540d 	.word	0x0800540d
 80053f8:	08005413 	.word	0x08005413
 80053fc:	08005407 	.word	0x08005407
 8005400:	2300      	movs	r3, #0
 8005402:	77fb      	strb	r3, [r7, #31]
 8005404:	e01d      	b.n	8005442 <UART_SetConfig+0xe2>
 8005406:	2302      	movs	r3, #2
 8005408:	77fb      	strb	r3, [r7, #31]
 800540a:	e01a      	b.n	8005442 <UART_SetConfig+0xe2>
 800540c:	2304      	movs	r3, #4
 800540e:	77fb      	strb	r3, [r7, #31]
 8005410:	e017      	b.n	8005442 <UART_SetConfig+0xe2>
 8005412:	2308      	movs	r3, #8
 8005414:	77fb      	strb	r3, [r7, #31]
 8005416:	e014      	b.n	8005442 <UART_SetConfig+0xe2>
 8005418:	2310      	movs	r3, #16
 800541a:	77fb      	strb	r3, [r7, #31]
 800541c:	e011      	b.n	8005442 <UART_SetConfig+0xe2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a67      	ldr	r2, [pc, #412]	; (80055c0 <UART_SetConfig+0x260>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d102      	bne.n	800542e <UART_SetConfig+0xce>
 8005428:	2300      	movs	r3, #0
 800542a:	77fb      	strb	r3, [r7, #31]
 800542c:	e009      	b.n	8005442 <UART_SetConfig+0xe2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a64      	ldr	r2, [pc, #400]	; (80055c4 <UART_SetConfig+0x264>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d102      	bne.n	800543e <UART_SetConfig+0xde>
 8005438:	2300      	movs	r3, #0
 800543a:	77fb      	strb	r3, [r7, #31]
 800543c:	e001      	b.n	8005442 <UART_SetConfig+0xe2>
 800543e:	2310      	movs	r3, #16
 8005440:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800544a:	d15b      	bne.n	8005504 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 800544c:	7ffb      	ldrb	r3, [r7, #31]
 800544e:	2b08      	cmp	r3, #8
 8005450:	d827      	bhi.n	80054a2 <UART_SetConfig+0x142>
 8005452:	a201      	add	r2, pc, #4	; (adr r2, 8005458 <UART_SetConfig+0xf8>)
 8005454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005458:	0800547d 	.word	0x0800547d
 800545c:	08005485 	.word	0x08005485
 8005460:	0800548d 	.word	0x0800548d
 8005464:	080054a3 	.word	0x080054a3
 8005468:	08005493 	.word	0x08005493
 800546c:	080054a3 	.word	0x080054a3
 8005470:	080054a3 	.word	0x080054a3
 8005474:	080054a3 	.word	0x080054a3
 8005478:	0800549b 	.word	0x0800549b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800547c:	f7fd feb6 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8005480:	61b8      	str	r0, [r7, #24]
        break;
 8005482:	e013      	b.n	80054ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005484:	f7fd fed4 	bl	8003230 <HAL_RCC_GetPCLK2Freq>
 8005488:	61b8      	str	r0, [r7, #24]
        break;
 800548a:	e00f      	b.n	80054ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800548c:	4b4e      	ldr	r3, [pc, #312]	; (80055c8 <UART_SetConfig+0x268>)
 800548e:	61bb      	str	r3, [r7, #24]
        break;
 8005490:	e00c      	b.n	80054ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005492:	f7fd fe35 	bl	8003100 <HAL_RCC_GetSysClockFreq>
 8005496:	61b8      	str	r0, [r7, #24]
        break;
 8005498:	e008      	b.n	80054ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800549a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800549e:	61bb      	str	r3, [r7, #24]
        break;
 80054a0:	e004      	b.n	80054ac <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	77bb      	strb	r3, [r7, #30]
        break;
 80054aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d074      	beq.n	800559c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	005a      	lsls	r2, r3, #1
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	085b      	lsrs	r3, r3, #1
 80054bc:	441a      	add	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2b0f      	cmp	r3, #15
 80054ce:	d916      	bls.n	80054fe <UART_SetConfig+0x19e>
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d6:	d212      	bcs.n	80054fe <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	b29b      	uxth	r3, r3
 80054dc:	f023 030f 	bic.w	r3, r3, #15
 80054e0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	085b      	lsrs	r3, r3, #1
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	89fb      	ldrh	r3, [r7, #14]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	89fa      	ldrh	r2, [r7, #14]
 80054fa:	60da      	str	r2, [r3, #12]
 80054fc:	e04e      	b.n	800559c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	77bb      	strb	r3, [r7, #30]
 8005502:	e04b      	b.n	800559c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005504:	7ffb      	ldrb	r3, [r7, #31]
 8005506:	2b08      	cmp	r3, #8
 8005508:	d827      	bhi.n	800555a <UART_SetConfig+0x1fa>
 800550a:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <UART_SetConfig+0x1b0>)
 800550c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005510:	08005535 	.word	0x08005535
 8005514:	0800553d 	.word	0x0800553d
 8005518:	08005545 	.word	0x08005545
 800551c:	0800555b 	.word	0x0800555b
 8005520:	0800554b 	.word	0x0800554b
 8005524:	0800555b 	.word	0x0800555b
 8005528:	0800555b 	.word	0x0800555b
 800552c:	0800555b 	.word	0x0800555b
 8005530:	08005553 	.word	0x08005553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005534:	f7fd fe5a 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8005538:	61b8      	str	r0, [r7, #24]
        break;
 800553a:	e013      	b.n	8005564 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800553c:	f7fd fe78 	bl	8003230 <HAL_RCC_GetPCLK2Freq>
 8005540:	61b8      	str	r0, [r7, #24]
        break;
 8005542:	e00f      	b.n	8005564 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005544:	4b20      	ldr	r3, [pc, #128]	; (80055c8 <UART_SetConfig+0x268>)
 8005546:	61bb      	str	r3, [r7, #24]
        break;
 8005548:	e00c      	b.n	8005564 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800554a:	f7fd fdd9 	bl	8003100 <HAL_RCC_GetSysClockFreq>
 800554e:	61b8      	str	r0, [r7, #24]
        break;
 8005550:	e008      	b.n	8005564 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005556:	61bb      	str	r3, [r7, #24]
        break;
 8005558:	e004      	b.n	8005564 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	77bb      	strb	r3, [r7, #30]
        break;
 8005562:	bf00      	nop
    }

    if (pclk != 0U)
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d018      	beq.n	800559c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	085a      	lsrs	r2, r3, #1
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	441a      	add	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	fbb2 f3f3 	udiv	r3, r2, r3
 800557c:	b29b      	uxth	r3, r3
 800557e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	2b0f      	cmp	r3, #15
 8005584:	d908      	bls.n	8005598 <UART_SetConfig+0x238>
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800558c:	d204      	bcs.n	8005598 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	60da      	str	r2, [r3, #12]
 8005596:	e001      	b.n	800559c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80055a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3720      	adds	r7, #32
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	efff69f3 	.word	0xefff69f3
 80055b8:	40013800 	.word	0x40013800
 80055bc:	40021000 	.word	0x40021000
 80055c0:	40004400 	.word	0x40004400
 80055c4:	40004800 	.word	0x40004800
 80055c8:	007a1200 	.word	0x007a1200

080055cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00a      	beq.n	80055f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00a      	beq.n	8005618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00a      	beq.n	800563a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00a      	beq.n	800565c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	f003 0310 	and.w	r3, r3, #16
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00a      	beq.n	800567e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	f003 0320 	and.w	r3, r3, #32
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00a      	beq.n	80056a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01a      	beq.n	80056e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ca:	d10a      	bne.n	80056e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	605a      	str	r2, [r3, #4]
  }
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af02      	add	r7, sp, #8
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005720:	f7fb ffc2 	bl	80016a8 <HAL_GetTick>
 8005724:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0308 	and.w	r3, r3, #8
 8005730:	2b08      	cmp	r3, #8
 8005732:	d10e      	bne.n	8005752 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005734:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f82d 	bl	80057a2 <UART_WaitOnFlagUntilTimeout>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e023      	b.n	800579a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b04      	cmp	r3, #4
 800575e:	d10e      	bne.n	800577e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005760:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f817 	bl	80057a2 <UART_WaitOnFlagUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e00d      	b.n	800579a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2220      	movs	r2, #32
 8005782:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2220      	movs	r2, #32
 8005788:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b09c      	sub	sp, #112	; 0x70
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	603b      	str	r3, [r7, #0]
 80057ae:	4613      	mov	r3, r2
 80057b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057b2:	e0a5      	b.n	8005900 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057ba:	f000 80a1 	beq.w	8005900 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057be:	f7fb ff73 	bl	80016a8 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d302      	bcc.n	80057d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80057ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d13e      	bne.n	8005852 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057dc:	e853 3f00 	ldrex	r3, [r3]
 80057e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057e8:	667b      	str	r3, [r7, #100]	; 0x64
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057f4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057fa:	e841 2300 	strex	r3, r2, [r1]
 80057fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1e6      	bne.n	80057d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3308      	adds	r3, #8
 800580c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005810:	e853 3f00 	ldrex	r3, [r3]
 8005814:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005818:	f023 0301 	bic.w	r3, r3, #1
 800581c:	663b      	str	r3, [r7, #96]	; 0x60
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3308      	adds	r3, #8
 8005824:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005826:	64ba      	str	r2, [r7, #72]	; 0x48
 8005828:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800582c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e5      	bne.n	8005806 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2220      	movs	r2, #32
 800583e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2220      	movs	r2, #32
 8005844:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e067      	b.n	8005922 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	d04f      	beq.n	8005900 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800586a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800586e:	d147      	bne.n	8005900 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005878:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005882:	e853 3f00 	ldrex	r3, [r3]
 8005886:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800588e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005898:	637b      	str	r3, [r7, #52]	; 0x34
 800589a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800589e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058a0:	e841 2300 	strex	r3, r2, [r1]
 80058a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1e6      	bne.n	800587a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3308      	adds	r3, #8
 80058b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	e853 3f00 	ldrex	r3, [r3]
 80058ba:	613b      	str	r3, [r7, #16]
   return(result);
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f023 0301 	bic.w	r3, r3, #1
 80058c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3308      	adds	r3, #8
 80058ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058cc:	623a      	str	r2, [r7, #32]
 80058ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d0:	69f9      	ldr	r1, [r7, #28]
 80058d2:	6a3a      	ldr	r2, [r7, #32]
 80058d4:	e841 2300 	strex	r3, r2, [r1]
 80058d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1e5      	bne.n	80058ac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2220      	movs	r2, #32
 80058e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2220      	movs	r2, #32
 80058ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e010      	b.n	8005922 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	69da      	ldr	r2, [r3, #28]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	4013      	ands	r3, r2
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	429a      	cmp	r2, r3
 800590e:	bf0c      	ite	eq
 8005910:	2301      	moveq	r3, #1
 8005912:	2300      	movne	r3, #0
 8005914:	b2db      	uxtb	r3, r3
 8005916:	461a      	mov	r2, r3
 8005918:	79fb      	ldrb	r3, [r7, #7]
 800591a:	429a      	cmp	r2, r3
 800591c:	f43f af4a 	beq.w	80057b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3770      	adds	r7, #112	; 0x70
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
	...

0800592c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800592c:	b480      	push	{r7}
 800592e:	b091      	sub	sp, #68	; 0x44
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	4613      	mov	r3, r2
 8005938:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	88fa      	ldrh	r2, [r7, #6]
 8005944:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	88fa      	ldrh	r2, [r7, #6]
 800594c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800595e:	d10e      	bne.n	800597e <UART_Start_Receive_IT+0x52>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d105      	bne.n	8005974 <UART_Start_Receive_IT+0x48>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800596e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005972:	e02d      	b.n	80059d0 <UART_Start_Receive_IT+0xa4>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	22ff      	movs	r2, #255	; 0xff
 8005978:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800597c:	e028      	b.n	80059d0 <UART_Start_Receive_IT+0xa4>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10d      	bne.n	80059a2 <UART_Start_Receive_IT+0x76>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d104      	bne.n	8005998 <UART_Start_Receive_IT+0x6c>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	22ff      	movs	r2, #255	; 0xff
 8005992:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005996:	e01b      	b.n	80059d0 <UART_Start_Receive_IT+0xa4>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	227f      	movs	r2, #127	; 0x7f
 800599c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059a0:	e016      	b.n	80059d0 <UART_Start_Receive_IT+0xa4>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059aa:	d10d      	bne.n	80059c8 <UART_Start_Receive_IT+0x9c>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d104      	bne.n	80059be <UART_Start_Receive_IT+0x92>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	227f      	movs	r2, #127	; 0x7f
 80059b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059bc:	e008      	b.n	80059d0 <UART_Start_Receive_IT+0xa4>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	223f      	movs	r2, #63	; 0x3f
 80059c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059c6:	e003      	b.n	80059d0 <UART_Start_Receive_IT+0xa4>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2222      	movs	r2, #34	; 0x22
 80059dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3308      	adds	r3, #8
 80059e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	f043 0301 	orr.w	r3, r3, #1
 80059f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3308      	adds	r3, #8
 80059fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059fe:	637a      	str	r2, [r7, #52]	; 0x34
 8005a00:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e5      	bne.n	80059de <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a1a:	d107      	bne.n	8005a2c <UART_Start_Receive_IT+0x100>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d103      	bne.n	8005a2c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4a15      	ldr	r2, [pc, #84]	; (8005a7c <UART_Start_Receive_IT+0x150>)
 8005a28:	665a      	str	r2, [r3, #100]	; 0x64
 8005a2a:	e002      	b.n	8005a32 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4a14      	ldr	r2, [pc, #80]	; (8005a80 <UART_Start_Receive_IT+0x154>)
 8005a30:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	613b      	str	r3, [r7, #16]
   return(result);
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005a4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	461a      	mov	r2, r3
 8005a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a58:	623b      	str	r3, [r7, #32]
 8005a5a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	69f9      	ldr	r1, [r7, #28]
 8005a5e:	6a3a      	ldr	r2, [r7, #32]
 8005a60:	e841 2300 	strex	r3, r2, [r1]
 8005a64:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e6      	bne.n	8005a3a <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3744      	adds	r7, #68	; 0x44
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	08005e9f 	.word	0x08005e9f
 8005a80:	08005d43 	.word	0x08005d43

08005a84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b095      	sub	sp, #84	; 0x54
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a94:	e853 3f00 	ldrex	r3, [r3]
 8005a98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aaa:	643b      	str	r3, [r7, #64]	; 0x40
 8005aac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ab0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e6      	bne.n	8005a8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	f023 0301 	bic.w	r3, r3, #1
 8005ad4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3308      	adds	r3, #8
 8005adc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ade:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ae0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1e5      	bne.n	8005abe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d118      	bne.n	8005b2c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	e853 3f00 	ldrex	r3, [r3]
 8005b06:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f023 0310 	bic.w	r3, r3, #16
 8005b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	461a      	mov	r2, r3
 8005b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b18:	61bb      	str	r3, [r7, #24]
 8005b1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1c:	6979      	ldr	r1, [r7, #20]
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	e841 2300 	strex	r3, r2, [r1]
 8005b24:	613b      	str	r3, [r7, #16]
   return(result);
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1e6      	bne.n	8005afa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005b3e:	bf00      	nop
 8005b40:	3754      	adds	r7, #84	; 0x54
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b084      	sub	sp, #16
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f7ff fb3f 	bl	80051ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b6e:	bf00      	nop
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b08f      	sub	sp, #60	; 0x3c
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b82:	2b21      	cmp	r3, #33	; 0x21
 8005b84:	d14d      	bne.n	8005c22 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d132      	bne.n	8005bf8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	e853 3f00 	ldrex	r3, [r3]
 8005b9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	461a      	mov	r2, r3
 8005bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bb2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bb8:	e841 2300 	strex	r3, r2, [r1]
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1e6      	bne.n	8005b92 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be2:	61bb      	str	r3, [r7, #24]
 8005be4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6979      	ldr	r1, [r7, #20]
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	613b      	str	r3, [r7, #16]
   return(result);
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e6      	bne.n	8005bc4 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005bf6:	e014      	b.n	8005c22 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bfc:	781a      	ldrb	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	b292      	uxth	r2, r2
 8005c04:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c0a:	1c5a      	adds	r2, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005c22:	bf00      	nop
 8005c24:	373c      	adds	r7, #60	; 0x3c
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b091      	sub	sp, #68	; 0x44
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c3a:	2b21      	cmp	r3, #33	; 0x21
 8005c3c:	d151      	bne.n	8005ce2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d132      	bne.n	8005cb0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	e853 3f00 	ldrex	r3, [r3]
 8005c56:	623b      	str	r3, [r7, #32]
   return(result);
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	461a      	mov	r2, r3
 8005c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c68:	633b      	str	r3, [r7, #48]	; 0x30
 8005c6a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c70:	e841 2300 	strex	r3, r2, [r1]
 8005c74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e6      	bne.n	8005c4a <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c90:	637b      	str	r3, [r7, #52]	; 0x34
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9a:	61fb      	str	r3, [r7, #28]
 8005c9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9e:	69b9      	ldr	r1, [r7, #24]
 8005ca0:	69fa      	ldr	r2, [r7, #28]
 8005ca2:	e841 2300 	strex	r3, r2, [r1]
 8005ca6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1e6      	bne.n	8005c7c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005cae:	e018      	b.n	8005ce2 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb8:	881a      	ldrh	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cc2:	b292      	uxth	r2, r2
 8005cc4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cca:	1c9a      	adds	r2, r3, #2
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005ce2:	bf00      	nop
 8005ce4:	3744      	adds	r7, #68	; 0x44
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b088      	sub	sp, #32
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	e853 3f00 	ldrex	r3, [r3]
 8005d02:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	461a      	mov	r2, r3
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	61bb      	str	r3, [r7, #24]
 8005d16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d18:	6979      	ldr	r1, [r7, #20]
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	e841 2300 	strex	r3, r2, [r1]
 8005d20:	613b      	str	r3, [r7, #16]
   return(result);
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1e6      	bne.n	8005cf6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7ff fa4f 	bl	80051d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d3a:	bf00      	nop
 8005d3c:	3720      	adds	r7, #32
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b096      	sub	sp, #88	; 0x58
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d50:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d58:	2b22      	cmp	r3, #34	; 0x22
 8005d5a:	f040 8094 	bne.w	8005e86 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d64:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d68:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005d6c:	b2d9      	uxtb	r1, r3
 8005d6e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d78:	400a      	ands	r2, r1
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d177      	bne.n	8005e96 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	e853 3f00 	ldrex	r3, [r3]
 8005db2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dba:	653b      	str	r3, [r7, #80]	; 0x50
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8005dc6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dcc:	e841 2300 	strex	r3, r2, [r1]
 8005dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1e6      	bne.n	8005da6 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3308      	adds	r3, #8
 8005dde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	e853 3f00 	ldrex	r3, [r3]
 8005de6:	623b      	str	r3, [r7, #32]
   return(result);
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	f023 0301 	bic.w	r3, r3, #1
 8005dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3308      	adds	r3, #8
 8005df6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005df8:	633a      	str	r2, [r7, #48]	; 0x30
 8005dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e00:	e841 2300 	strex	r3, r2, [r1]
 8005e04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e5      	bne.n	8005dd8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d12e      	bne.n	8005e7e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	e853 3f00 	ldrex	r3, [r3]
 8005e32:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 0310 	bic.w	r3, r3, #16
 8005e3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	461a      	mov	r2, r3
 8005e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e44:	61fb      	str	r3, [r7, #28]
 8005e46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e48:	69b9      	ldr	r1, [r7, #24]
 8005e4a:	69fa      	ldr	r2, [r7, #28]
 8005e4c:	e841 2300 	strex	r3, r2, [r1]
 8005e50:	617b      	str	r3, [r7, #20]
   return(result);
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1e6      	bne.n	8005e26 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	f003 0310 	and.w	r3, r3, #16
 8005e62:	2b10      	cmp	r3, #16
 8005e64:	d103      	bne.n	8005e6e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2210      	movs	r2, #16
 8005e6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e74:	4619      	mov	r1, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff f9c2 	bl	8005200 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e7c:	e00b      	b.n	8005e96 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7fa ff42 	bl	8000d08 <HAL_UART_RxCpltCallback>
}
 8005e84:	e007      	b.n	8005e96 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	699a      	ldr	r2, [r3, #24]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f042 0208 	orr.w	r2, r2, #8
 8005e94:	619a      	str	r2, [r3, #24]
}
 8005e96:	bf00      	nop
 8005e98:	3758      	adds	r7, #88	; 0x58
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b096      	sub	sp, #88	; 0x58
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005eac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eb4:	2b22      	cmp	r3, #34	; 0x22
 8005eb6:	f040 8094 	bne.w	8005fe2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ec0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005eca:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005ece:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ed8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ede:	1c9a      	adds	r2, r3, #2
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d177      	bne.n	8005ff2 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f20:	643b      	str	r3, [r7, #64]	; 0x40
 8005f22:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e6      	bne.n	8005f02 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3308      	adds	r3, #8
 8005f3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f023 0301 	bic.w	r3, r3, #1
 8005f4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3308      	adds	r3, #8
 8005f52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f5c:	e841 2300 	strex	r3, r2, [r1]
 8005f60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1e5      	bne.n	8005f34 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d12e      	bne.n	8005fda <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	e853 3f00 	ldrex	r3, [r3]
 8005f8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f023 0310 	bic.w	r3, r3, #16
 8005f96:	647b      	str	r3, [r7, #68]	; 0x44
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fa0:	61bb      	str	r3, [r7, #24]
 8005fa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa4:	6979      	ldr	r1, [r7, #20]
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	e841 2300 	strex	r3, r2, [r1]
 8005fac:	613b      	str	r3, [r7, #16]
   return(result);
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1e6      	bne.n	8005f82 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	f003 0310 	and.w	r3, r3, #16
 8005fbe:	2b10      	cmp	r3, #16
 8005fc0:	d103      	bne.n	8005fca <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2210      	movs	r2, #16
 8005fc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7ff f914 	bl	8005200 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fd8:	e00b      	b.n	8005ff2 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fa fe94 	bl	8000d08 <HAL_UART_RxCpltCallback>
}
 8005fe0:	e007      	b.n	8005ff2 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	699a      	ldr	r2, [r3, #24]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f042 0208 	orr.w	r2, r2, #8
 8005ff0:	619a      	str	r2, [r3, #24]
}
 8005ff2:	bf00      	nop
 8005ff4:	3758      	adds	r7, #88	; 0x58
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
	...

08006010 <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b088      	sub	sp, #32
 8006014:	af00      	add	r7, sp, #0
 8006016:	4603      	mov	r3, r0
 8006018:	71fb      	strb	r3, [r7, #7]
 800601a:	460b      	mov	r3, r1
 800601c:	71bb      	strb	r3, [r7, #6]
 800601e:	4613      	mov	r3, r2
 8006020:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8006022:	797b      	ldrb	r3, [r7, #5]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d901      	bls.n	800602c <tmc_fillCRC8Table+0x1c>
		return 0;
 8006028:	2300      	movs	r3, #0
 800602a:	e09e      	b.n	800616a <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 800602c:	797a      	ldrb	r2, [r7, #5]
 800602e:	4951      	ldr	r1, [pc, #324]	; (8006174 <tmc_fillCRC8Table+0x164>)
 8006030:	4613      	mov	r3, r2
 8006032:	01db      	lsls	r3, r3, #7
 8006034:	4413      	add	r3, r2
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	440b      	add	r3, r1
 800603a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800603e:	79fa      	ldrb	r2, [r7, #7]
 8006040:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 8006042:	797a      	ldrb	r2, [r7, #5]
 8006044:	494b      	ldr	r1, [pc, #300]	; (8006174 <tmc_fillCRC8Table+0x164>)
 8006046:	4613      	mov	r3, r2
 8006048:	01db      	lsls	r3, r3, #7
 800604a:	4413      	add	r3, r2
 800604c:	005b      	lsls	r3, r3, #1
 800604e:	440b      	add	r3, r1
 8006050:	f203 1301 	addw	r3, r3, #257	; 0x101
 8006054:	79ba      	ldrb	r2, [r7, #6]
 8006056:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 8006058:	797a      	ldrb	r2, [r7, #5]
 800605a:	4613      	mov	r3, r2
 800605c:	01db      	lsls	r3, r3, #7
 800605e:	4413      	add	r3, r2
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	4a44      	ldr	r2, [pc, #272]	; (8006174 <tmc_fillCRC8Table+0x164>)
 8006064:	4413      	add	r3, r2
 8006066:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 8006068:	79fb      	ldrb	r3, [r7, #7]
 800606a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800606e:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8006070:	4b41      	ldr	r3, [pc, #260]	; (8006178 <tmc_fillCRC8Table+0x168>)
 8006072:	617b      	str	r3, [r7, #20]
 8006074:	e074      	b.n	8006160 <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 8006076:	79bb      	ldrb	r3, [r7, #6]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d004      	beq.n	8006086 <tmc_fillCRC8Table+0x76>
 800607c:	6978      	ldr	r0, [r7, #20]
 800607e:	f000 f8f7 	bl	8006270 <flipBitsInBytes>
 8006082:	4603      	mov	r3, r0
 8006084:	e000      	b.n	8006088 <tmc_fillCRC8Table+0x78>
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 800608a:	2300      	movs	r3, #0
 800608c:	613b      	str	r3, [r7, #16]
 800608e:	e035      	b.n	80060fc <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	0fdb      	lsrs	r3, r3, #31
 8006094:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	005b      	lsls	r3, r3, #1
 800609a:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <tmc_fillCRC8Table+0x9a>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	e000      	b.n	80060ac <tmc_fillCRC8Table+0x9c>
 80060aa:	2300      	movs	r3, #0
 80060ac:	69fa      	ldr	r2, [r7, #28]
 80060ae:	4053      	eors	r3, r2
 80060b0:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d002      	beq.n	80060c2 <tmc_fillCRC8Table+0xb2>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	021b      	lsls	r3, r3, #8
 80060c0:	e000      	b.n	80060c4 <tmc_fillCRC8Table+0xb4>
 80060c2:	2300      	movs	r3, #0
 80060c4:	69fa      	ldr	r2, [r7, #28]
 80060c6:	4053      	eors	r3, r2
 80060c8:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d002      	beq.n	80060da <tmc_fillCRC8Table+0xca>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	041b      	lsls	r3, r3, #16
 80060d8:	e000      	b.n	80060dc <tmc_fillCRC8Table+0xcc>
 80060da:	2300      	movs	r3, #0
 80060dc:	69fa      	ldr	r2, [r7, #28]
 80060de:	4053      	eors	r3, r2
 80060e0:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 80060e2:	7afb      	ldrb	r3, [r7, #11]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <tmc_fillCRC8Table+0xde>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	061b      	lsls	r3, r3, #24
 80060ec:	e000      	b.n	80060f0 <tmc_fillCRC8Table+0xe0>
 80060ee:	2300      	movs	r3, #0
 80060f0:	69fa      	ldr	r2, [r7, #28]
 80060f2:	4053      	eors	r3, r2
 80060f4:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	3301      	adds	r3, #1
 80060fa:	613b      	str	r3, [r7, #16]
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	2b07      	cmp	r3, #7
 8006100:	ddc6      	ble.n	8006090 <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 8006102:	79bb      	ldrb	r3, [r7, #6]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d004      	beq.n	8006112 <tmc_fillCRC8Table+0x102>
 8006108:	69f8      	ldr	r0, [r7, #28]
 800610a:	f000 f8b1 	bl	8006270 <flipBitsInBytes>
 800610e:	4603      	mov	r3, r0
 8006110:	e000      	b.n	8006114 <tmc_fillCRC8Table+0x104>
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	61ba      	str	r2, [r7, #24]
 800611c:	69fa      	ldr	r2, [r7, #28]
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	0a1b      	lsrs	r3, r3, #8
 8006126:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	61ba      	str	r2, [r7, #24]
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	b2d2      	uxtb	r2, r2
 8006132:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	0a1b      	lsrs	r3, r3, #8
 8006138:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	61ba      	str	r2, [r7, #24]
 8006140:	69fa      	ldr	r2, [r7, #28]
 8006142:	b2d2      	uxtb	r2, r2
 8006144:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	0a1b      	lsrs	r3, r3, #8
 800614a:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	61ba      	str	r2, [r7, #24]
 8006152:	69fa      	ldr	r2, [r7, #28]
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	4a06      	ldr	r2, [pc, #24]	; (800617c <tmc_fillCRC8Table+0x16c>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d186      	bne.n	8006076 <tmc_fillCRC8Table+0x66>
	}

	return 1;
 8006168:	2301      	movs	r3, #1
}
 800616a:	4618      	mov	r0, r3
 800616c:	3720      	adds	r7, #32
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	200006dc 	.word	0x200006dc
 8006178:	03020100 	.word	0x03020100
 800617c:	04030200 	.word	0x04030200

08006180 <tmc_CRC8>:
 *     uint8_t *data: A pointer to the data that will be CRC'd.
 *     uint32_t bytes: The length of the data buffer.
 *     uint8_t index: The index of the CRC table to be used.
 */
uint8_t tmc_CRC8(uint8_t *data, uint32_t bytes, uint8_t index)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	4613      	mov	r3, r2
 800618c:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	75fb      	strb	r3, [r7, #23]
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8006192:	79fb      	ldrb	r3, [r7, #7]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d901      	bls.n	800619c <tmc_CRC8+0x1c>
		return 0;
 8006198:	2300      	movs	r3, #0
 800619a:	e02c      	b.n	80061f6 <tmc_CRC8+0x76>

	table = &CRCTables[index].table[0];
 800619c:	79fa      	ldrb	r2, [r7, #7]
 800619e:	4613      	mov	r3, r2
 80061a0:	01db      	lsls	r3, r3, #7
 80061a2:	4413      	add	r3, r2
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	4a16      	ldr	r2, [pc, #88]	; (8006200 <tmc_CRC8+0x80>)
 80061a8:	4413      	add	r3, r2
 80061aa:	613b      	str	r3, [r7, #16]

	while(bytes--)
 80061ac:	e00b      	b.n	80061c6 <tmc_CRC8+0x46>
		result = table[result ^ *data++];
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	1c5a      	adds	r2, r3, #1
 80061b2:	60fa      	str	r2, [r7, #12]
 80061b4:	781a      	ldrb	r2, [r3, #0]
 80061b6:	7dfb      	ldrb	r3, [r7, #23]
 80061b8:	4053      	eors	r3, r2
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	461a      	mov	r2, r3
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	4413      	add	r3, r2
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	1e5a      	subs	r2, r3, #1
 80061ca:	60ba      	str	r2, [r7, #8]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1ee      	bne.n	80061ae <tmc_CRC8+0x2e>

	return (CRCTables[index].isReflected)? flipByte(result) : result;
 80061d0:	79fa      	ldrb	r2, [r7, #7]
 80061d2:	490b      	ldr	r1, [pc, #44]	; (8006200 <tmc_CRC8+0x80>)
 80061d4:	4613      	mov	r3, r2
 80061d6:	01db      	lsls	r3, r3, #7
 80061d8:	4413      	add	r3, r2
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	440b      	add	r3, r1
 80061de:	f203 1301 	addw	r3, r3, #257	; 0x101
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d005      	beq.n	80061f4 <tmc_CRC8+0x74>
 80061e8:	7dfb      	ldrb	r3, [r7, #23]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 f80a 	bl	8006204 <flipByte>
 80061f0:	4603      	mov	r3, r0
 80061f2:	e000      	b.n	80061f6 <tmc_CRC8+0x76>
 80061f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	200006dc 	.word	0x200006dc

08006204 <flipByte>:
	return CRCTables[index].isReflected;
}

// Helper functions
static uint8_t flipByte(uint8_t value)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	4603      	mov	r3, r0
 800620c:	71fb      	strb	r3, [r7, #7]
	// swap odd and even bits
	value = ((value >> 1) & 0x55) | ((value & 0x55) << 1);
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	085b      	lsrs	r3, r3, #1
 8006212:	b2db      	uxtb	r3, r3
 8006214:	b25b      	sxtb	r3, r3
 8006216:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800621a:	b25a      	sxtb	r2, r3
 800621c:	79fb      	ldrb	r3, [r7, #7]
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	b25b      	sxtb	r3, r3
 8006222:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8006226:	b25b      	sxtb	r3, r3
 8006228:	4313      	orrs	r3, r2
 800622a:	b25b      	sxtb	r3, r3
 800622c:	71fb      	strb	r3, [r7, #7]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33) | ((value & 0x33) << 2);
 800622e:	79fb      	ldrb	r3, [r7, #7]
 8006230:	089b      	lsrs	r3, r3, #2
 8006232:	b2db      	uxtb	r3, r3
 8006234:	b25b      	sxtb	r3, r3
 8006236:	f003 0333 	and.w	r3, r3, #51	; 0x33
 800623a:	b25a      	sxtb	r2, r3
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	b25b      	sxtb	r3, r3
 8006242:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8006246:	b25b      	sxtb	r3, r3
 8006248:	4313      	orrs	r3, r2
 800624a:	b25b      	sxtb	r3, r3
 800624c:	71fb      	strb	r3, [r7, #7]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F) | ((value & 0x0F) << 4);
 800624e:	79fb      	ldrb	r3, [r7, #7]
 8006250:	091b      	lsrs	r3, r3, #4
 8006252:	b2db      	uxtb	r3, r3
 8006254:	b25a      	sxtb	r2, r3
 8006256:	79fb      	ldrb	r3, [r7, #7]
 8006258:	011b      	lsls	r3, r3, #4
 800625a:	b25b      	sxtb	r3, r3
 800625c:	4313      	orrs	r3, r2
 800625e:	b25b      	sxtb	r3, r3
 8006260:	71fb      	strb	r3, [r7, #7]

	return value;
 8006262:	79fb      	ldrb	r3, [r7, #7]
}
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	085b      	lsrs	r3, r3, #1
 800627c:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8006288:	4313      	orrs	r3, r2
 800628a:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	089b      	lsrs	r3, r3, #2
 8006290:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 800629c:	4313      	orrs	r3, r2
 800629e:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	091b      	lsrs	r3, r3, #4
 80062a4:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80062b0:	4313      	orrs	r3, r2
 80062b2:	607b      	str	r3, [r7, #4]

	return value;
 80062b4:	687b      	ldr	r3, [r7, #4]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <tmc2209_writeInt>:
// => CRC wrapper
extern uint8_t tmc2209_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2209_writeInt(TMC2209TypeDef *tmc2209, uint8_t address, int32_t value)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b086      	sub	sp, #24
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	60f8      	str	r0, [r7, #12]
 80062ca:	460b      	mov	r3, r1
 80062cc:	607a      	str	r2, [r7, #4]
 80062ce:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8];

	data[0] = 0x05;
 80062d0:	2305      	movs	r3, #5
 80062d2:	743b      	strb	r3, [r7, #16]
	data[1] = tmc2209->slaveAddress;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 80062da:	747b      	strb	r3, [r7, #17]
	data[2] = address | TMC_WRITE_BIT;
 80062dc:	7afb      	ldrb	r3, [r7, #11]
 80062de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	74bb      	strb	r3, [r7, #18]
	data[3] = (value >> 24) & 0xFF;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	0e1b      	lsrs	r3, r3, #24
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	74fb      	strb	r3, [r7, #19]
	data[4] = (value >> 16) & 0xFF;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	141b      	asrs	r3, r3, #16
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	753b      	strb	r3, [r7, #20]
	data[5] = (value >> 8 ) & 0xFF;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	121b      	asrs	r3, r3, #8
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	757b      	strb	r3, [r7, #21]
	data[6] = (value      ) & 0xFF;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	b2db      	uxtb	r3, r3
 8006302:	75bb      	strb	r3, [r7, #22]
	data[7] = tmc2209_CRC8(data, 7);
 8006304:	f107 0310 	add.w	r3, r7, #16
 8006308:	2107      	movs	r1, #7
 800630a:	4618      	mov	r0, r3
 800630c:	f7f9 ffd8 	bl	80002c0 <tmc2209_CRC8>
 8006310:	4603      	mov	r3, r0
 8006312:	75fb      	strb	r3, [r7, #23]

	tmc2209_readWriteArray(tmc2209->config->channel, &data[0], 8, 0);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 800631c:	f107 0110 	add.w	r1, r7, #16
 8006320:	2300      	movs	r3, #0
 8006322:	2208      	movs	r2, #8
 8006324:	f7f9 ffa4 	bl	8000270 <tmc2209_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
 8006328:	7afb      	ldrb	r3, [r7, #11]
 800632a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800632e:	72fb      	strb	r3, [r7, #11]
	tmc2209->config->shadowRegister[address] = value;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	7afb      	ldrb	r3, [r7, #11]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	605a      	str	r2, [r3, #4]
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
 800633e:	7afb      	ldrb	r3, [r7, #11]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	4413      	add	r3, r2
 8006344:	f893 2204 	ldrb.w	r2, [r3, #516]	; 0x204
 8006348:	7afb      	ldrb	r3, [r7, #11]
 800634a:	f042 0208 	orr.w	r2, r2, #8
 800634e:	b2d1      	uxtb	r1, r2
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	4413      	add	r3, r2
 8006354:	460a      	mov	r2, r1
 8006356:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 800635a:	bf00      	nop
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <tmc2209_readInt>:

int32_t tmc2209_readInt(TMC2209TypeDef *tmc2209, uint8_t address)
{
 8006362:	b590      	push	{r4, r7, lr}
 8006364:	b085      	sub	sp, #20
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	460b      	mov	r3, r1
 800636c:	70fb      	strb	r3, [r7, #3]
	uint8_t data[8] = { 0 };
 800636e:	2300      	movs	r3, #0
 8006370:	60bb      	str	r3, [r7, #8]
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]

	address = TMC_ADDRESS(address);
 8006376:	78fb      	ldrb	r3, [r7, #3]
 8006378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800637c:	70fb      	strb	r3, [r7, #3]

	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
 800637e:	78fb      	ldrb	r3, [r7, #3]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	4413      	add	r3, r2
 8006384:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	d106      	bne.n	800639e <tmc2209_readInt+0x3c>
		return tmc2209->config->shadowRegister[address];
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	78fb      	ldrb	r3, [r7, #3]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	e03f      	b.n	800641e <tmc2209_readInt+0xbc>

	data[0] = 0x05;
 800639e:	2305      	movs	r3, #5
 80063a0:	723b      	strb	r3, [r7, #8]
	data[1] = tmc2209->slaveAddress;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 80063a8:	727b      	strb	r3, [r7, #9]
	data[2] = address;
 80063aa:	78fb      	ldrb	r3, [r7, #3]
 80063ac:	72bb      	strb	r3, [r7, #10]
	data[3] = tmc2209_CRC8(data, 3);
 80063ae:	f107 0308 	add.w	r3, r7, #8
 80063b2:	2103      	movs	r1, #3
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7f9 ff83 	bl	80002c0 <tmc2209_CRC8>
 80063ba:	4603      	mov	r3, r0
 80063bc:	72fb      	strb	r3, [r7, #11]

	tmc2209_readWriteArray(tmc2209->config->channel, data, 4, 8);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 80063c6:	f107 0108 	add.w	r1, r7, #8
 80063ca:	2308      	movs	r3, #8
 80063cc:	2204      	movs	r2, #4
 80063ce:	f7f9 ff4f 	bl	8000270 <tmc2209_readWriteArray>

	// Byte 0: Sync nibble correct?
	if (data[0] != 0x05)
 80063d2:	7a3b      	ldrb	r3, [r7, #8]
 80063d4:	2b05      	cmp	r3, #5
 80063d6:	d001      	beq.n	80063dc <tmc2209_readInt+0x7a>
		return 0;
 80063d8:	2300      	movs	r3, #0
 80063da:	e020      	b.n	800641e <tmc2209_readInt+0xbc>

	// Byte 1: Master address correct?
	if (data[1] != 0xFF)
 80063dc:	7a7b      	ldrb	r3, [r7, #9]
 80063de:	2bff      	cmp	r3, #255	; 0xff
 80063e0:	d001      	beq.n	80063e6 <tmc2209_readInt+0x84>
		return 0;
 80063e2:	2300      	movs	r3, #0
 80063e4:	e01b      	b.n	800641e <tmc2209_readInt+0xbc>

	// Byte 2: Address correct?
	if (data[2] != address)
 80063e6:	7abb      	ldrb	r3, [r7, #10]
 80063e8:	78fa      	ldrb	r2, [r7, #3]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d001      	beq.n	80063f2 <tmc2209_readInt+0x90>
		return 0;
 80063ee:	2300      	movs	r3, #0
 80063f0:	e015      	b.n	800641e <tmc2209_readInt+0xbc>

	// Byte 7: CRC correct?
	if (data[7] != tmc2209_CRC8(data, 7))
 80063f2:	7bfc      	ldrb	r4, [r7, #15]
 80063f4:	f107 0308 	add.w	r3, r7, #8
 80063f8:	2107      	movs	r1, #7
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7f9 ff60 	bl	80002c0 <tmc2209_CRC8>
 8006400:	4603      	mov	r3, r0
 8006402:	429c      	cmp	r4, r3
 8006404:	d001      	beq.n	800640a <tmc2209_readInt+0xa8>
		return 0;
 8006406:	2300      	movs	r3, #0
 8006408:	e009      	b.n	800641e <tmc2209_readInt+0xbc>

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
 800640a:	7afb      	ldrb	r3, [r7, #11]
 800640c:	061a      	lsls	r2, r3, #24
 800640e:	7b3b      	ldrb	r3, [r7, #12]
 8006410:	041b      	lsls	r3, r3, #16
 8006412:	4313      	orrs	r3, r2
 8006414:	7b7a      	ldrb	r2, [r7, #13]
 8006416:	0212      	lsls	r2, r2, #8
 8006418:	4313      	orrs	r3, r2
 800641a:	7bba      	ldrb	r2, [r7, #14]
 800641c:	4313      	orrs	r3, r2
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	bd90      	pop	{r4, r7, pc}
	...

08006428 <tmc2209_init>:

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	607b      	str	r3, [r7, #4]
 8006432:	460b      	mov	r3, r1
 8006434:	72fb      	strb	r3, [r7, #11]
 8006436:	4613      	mov	r3, r2
 8006438:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	7aba      	ldrb	r2, [r7, #10]
 800643e:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2200      	movs	r2, #0
 800644e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	7afa      	ldrb	r2, [r7, #11]
 8006458:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2200      	movs	r2, #0
 8006462:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2200      	movs	r2, #0
 800646a:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 800646c:	2300      	movs	r3, #0
 800646e:	617b      	str	r3, [r7, #20]
 8006470:	e017      	b.n	80064a2 <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 8006472:	4a11      	ldr	r2, [pc, #68]	; (80064b8 <tmc2209_init+0x90>)
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	4413      	add	r3, r2
 8006478:	7819      	ldrb	r1, [r3, #0]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	4413      	add	r3, r2
 8006480:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006484:	460a      	mov	r2, r1
 8006486:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	6a3a      	ldr	r2, [r7, #32]
 800648e:	4413      	add	r3, r2
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	68f9      	ldr	r1, [r7, #12]
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	440b      	add	r3, r1
 800649a:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	3301      	adds	r3, #1
 80064a0:	617b      	str	r3, [r7, #20]
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b7f      	cmp	r3, #127	; 0x7f
 80064a6:	d9e4      	bls.n	8006472 <tmc2209_init+0x4a>
	}
}
 80064a8:	bf00      	nop
 80064aa:	bf00      	nop
 80064ac:	371c      	adds	r7, #28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	08007ca4 	.word	0x08007ca4

080064bc <writeConfiguration>:

static void writeConfiguration(TMC2209TypeDef *tmc2209)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
	uint8_t *ptr = &tmc2209->config->configIndex;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3301      	adds	r3, #1
 80064ca:	60bb      	str	r3, [r7, #8]
	const int32_t *settings;

	if(tmc2209->config->state == CONFIG_RESTORE)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d131      	bne.n	800653a <writeConfiguration+0x7e>
	{
		settings = tmc2209->config->shadowRegister;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	3304      	adds	r3, #4
 80064dc:	60fb      	str	r3, [r7, #12]
		// Find the next restorable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 80064de:	e005      	b.n	80064ec <writeConfiguration+0x30>
		{
			(*ptr)++;
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	3301      	adds	r3, #1
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	b25b      	sxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	db3b      	blt.n	800656e <writeConfiguration+0xb2>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	461a      	mov	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4413      	add	r3, r2
 8006500:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d0e9      	beq.n	80064e0 <writeConfiguration+0x24>
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	461a      	mov	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4413      	add	r3, r2
 8006516:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800651a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651e:	2b00      	cmp	r3, #0
 8006520:	d025      	beq.n	800656e <writeConfiguration+0xb2>
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4413      	add	r3, r2
 800652c:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006530:	f003 0308 	and.w	r3, r3, #8
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0d3      	beq.n	80064e0 <writeConfiguration+0x24>
 8006538:	e019      	b.n	800656e <writeConfiguration+0xb2>
		}
	}
	else
	{
		settings = tmc2209->registerResetState;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3304      	adds	r3, #4
 800653e:	60fb      	str	r3, [r7, #12]
		// Find the next resettable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 8006540:	e005      	b.n	800654e <writeConfiguration+0x92>
		{
			(*ptr)++;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	3301      	adds	r3, #1
 8006548:	b2da      	uxtb	r2, r3
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	b25b      	sxtb	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	db0a      	blt.n	800656e <writeConfiguration+0xb2>
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	461a      	mov	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4413      	add	r3, r2
 8006562:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006566:	f003 0342 	and.w	r3, r3, #66	; 0x42
 800656a:	2b02      	cmp	r3, #2
 800656c:	d1e9      	bne.n	8006542 <writeConfiguration+0x86>
		}
	}

	if(*ptr < TMC2209_REGISTER_COUNT)
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	b25b      	sxtb	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	db12      	blt.n	800659e <writeConfiguration+0xe2>
	{
		tmc2209_writeInt(tmc2209, *ptr, settings[*ptr]);
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	7819      	ldrb	r1, [r3, #0]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	4413      	add	r3, r2
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	461a      	mov	r2, r3
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7ff fe99 	bl	80062c2 <tmc2209_writeInt>
		(*ptr)++;
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	3301      	adds	r3, #1
 8006596:	b2da      	uxtb	r2, r3
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	701a      	strb	r2, [r3, #0]
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
		}

		tmc2209->config->state = CONFIG_READY;
	}
}
 800659c:	e013      	b.n	80065c6 <writeConfiguration+0x10a>
		if(tmc2209->config->callback)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d009      	beq.n	80065be <writeConfiguration+0x102>
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	6812      	ldr	r2, [r2, #0]
 80065b6:	7812      	ldrb	r2, [r2, #0]
 80065b8:	4611      	mov	r1, r2
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	4798      	blx	r3
		tmc2209->config->state = CONFIG_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2200      	movs	r2, #0
 80065c4:	701a      	strb	r2, [r3, #0]
}
 80065c6:	bf00      	nop
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <tmc2209_periodicJob>:

void tmc2209_periodicJob(TMC2209TypeDef *tmc2209, uint32_t tick)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b082      	sub	sp, #8
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
 80065d6:	6039      	str	r1, [r7, #0]
	UNUSED(tick);

	if(tmc2209->config->state != CONFIG_READY)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <tmc2209_periodicJob+0x1c>
	{
		writeConfiguration(tmc2209);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff ff6a 	bl	80064bc <writeConfiguration>
		return;
 80065e8:	bf00      	nop
	}
}
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <tmc2209_reset>:
{
	tmc2209->config->callback = (tmc_callback_config) callback;
}

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <tmc2209_reset+0x16>
		return false;
 8006602:	2300      	movs	r3, #0
 8006604:	e028      	b.n	8006658 <tmc2209_reset+0x68>

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	e019      	b.n	8006640 <tmc2209_reset+0x50>
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4413      	add	r3, r2
 8006612:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	f023 0308 	bic.w	r3, r3, #8
 800661c:	b2d9      	uxtb	r1, r3
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006628:	460a      	mov	r2, r1
 800662a:	701a      	strb	r2, [r3, #0]
		tmc2209->config->shadowRegister[i] = 0;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	2200      	movs	r2, #0
 8006638:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3301      	adds	r3, #1
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2b7f      	cmp	r3, #127	; 0x7f
 8006644:	d9e2      	bls.n	800660c <tmc2209_reset+0x1c>
	}

	tmc2209->config->state        = CONFIG_RESET;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2201      	movs	r2, #1
 800664c:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2200      	movs	r2, #0
 8006654:	705a      	strb	r2, [r3, #1]

	return true;
 8006656:	2301      	movs	r3, #1
}
 8006658:	4618      	mov	r0, r3
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <tmc2209_restore+0x16>
		return false;
 8006676:	2300      	movs	r3, #0
 8006678:	e008      	b.n	800668c <tmc2209_restore+0x28>

	tmc2209->config->state        = CONFIG_RESTORE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2202      	movs	r2, #2
 8006680:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2200      	movs	r2, #0
 8006688:	705a      	strb	r2, [r3, #1]

	return true;
 800668a:	2301      	movs	r3, #1
}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <__errno>:
 8006698:	4b01      	ldr	r3, [pc, #4]	; (80066a0 <__errno+0x8>)
 800669a:	6818      	ldr	r0, [r3, #0]
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	2000000c 	.word	0x2000000c

080066a4 <__libc_init_array>:
 80066a4:	b570      	push	{r4, r5, r6, lr}
 80066a6:	4d0d      	ldr	r5, [pc, #52]	; (80066dc <__libc_init_array+0x38>)
 80066a8:	4c0d      	ldr	r4, [pc, #52]	; (80066e0 <__libc_init_array+0x3c>)
 80066aa:	1b64      	subs	r4, r4, r5
 80066ac:	10a4      	asrs	r4, r4, #2
 80066ae:	2600      	movs	r6, #0
 80066b0:	42a6      	cmp	r6, r4
 80066b2:	d109      	bne.n	80066c8 <__libc_init_array+0x24>
 80066b4:	4d0b      	ldr	r5, [pc, #44]	; (80066e4 <__libc_init_array+0x40>)
 80066b6:	4c0c      	ldr	r4, [pc, #48]	; (80066e8 <__libc_init_array+0x44>)
 80066b8:	f001 f8fa 	bl	80078b0 <_init>
 80066bc:	1b64      	subs	r4, r4, r5
 80066be:	10a4      	asrs	r4, r4, #2
 80066c0:	2600      	movs	r6, #0
 80066c2:	42a6      	cmp	r6, r4
 80066c4:	d105      	bne.n	80066d2 <__libc_init_array+0x2e>
 80066c6:	bd70      	pop	{r4, r5, r6, pc}
 80066c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066cc:	4798      	blx	r3
 80066ce:	3601      	adds	r6, #1
 80066d0:	e7ee      	b.n	80066b0 <__libc_init_array+0xc>
 80066d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066d6:	4798      	blx	r3
 80066d8:	3601      	adds	r6, #1
 80066da:	e7f2      	b.n	80066c2 <__libc_init_array+0x1e>
 80066dc:	08007dbc 	.word	0x08007dbc
 80066e0:	08007dbc 	.word	0x08007dbc
 80066e4:	08007dbc 	.word	0x08007dbc
 80066e8:	08007dc0 	.word	0x08007dc0

080066ec <memset>:
 80066ec:	4402      	add	r2, r0
 80066ee:	4603      	mov	r3, r0
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d100      	bne.n	80066f6 <memset+0xa>
 80066f4:	4770      	bx	lr
 80066f6:	f803 1b01 	strb.w	r1, [r3], #1
 80066fa:	e7f9      	b.n	80066f0 <memset+0x4>

080066fc <iprintf>:
 80066fc:	b40f      	push	{r0, r1, r2, r3}
 80066fe:	4b0a      	ldr	r3, [pc, #40]	; (8006728 <iprintf+0x2c>)
 8006700:	b513      	push	{r0, r1, r4, lr}
 8006702:	681c      	ldr	r4, [r3, #0]
 8006704:	b124      	cbz	r4, 8006710 <iprintf+0x14>
 8006706:	69a3      	ldr	r3, [r4, #24]
 8006708:	b913      	cbnz	r3, 8006710 <iprintf+0x14>
 800670a:	4620      	mov	r0, r4
 800670c:	f000 fb2c 	bl	8006d68 <__sinit>
 8006710:	ab05      	add	r3, sp, #20
 8006712:	9a04      	ldr	r2, [sp, #16]
 8006714:	68a1      	ldr	r1, [r4, #8]
 8006716:	9301      	str	r3, [sp, #4]
 8006718:	4620      	mov	r0, r4
 800671a:	f000 fd3d 	bl	8007198 <_vfiprintf_r>
 800671e:	b002      	add	sp, #8
 8006720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006724:	b004      	add	sp, #16
 8006726:	4770      	bx	lr
 8006728:	2000000c 	.word	0x2000000c

0800672c <_puts_r>:
 800672c:	b570      	push	{r4, r5, r6, lr}
 800672e:	460e      	mov	r6, r1
 8006730:	4605      	mov	r5, r0
 8006732:	b118      	cbz	r0, 800673c <_puts_r+0x10>
 8006734:	6983      	ldr	r3, [r0, #24]
 8006736:	b90b      	cbnz	r3, 800673c <_puts_r+0x10>
 8006738:	f000 fb16 	bl	8006d68 <__sinit>
 800673c:	69ab      	ldr	r3, [r5, #24]
 800673e:	68ac      	ldr	r4, [r5, #8]
 8006740:	b913      	cbnz	r3, 8006748 <_puts_r+0x1c>
 8006742:	4628      	mov	r0, r5
 8006744:	f000 fb10 	bl	8006d68 <__sinit>
 8006748:	4b2c      	ldr	r3, [pc, #176]	; (80067fc <_puts_r+0xd0>)
 800674a:	429c      	cmp	r4, r3
 800674c:	d120      	bne.n	8006790 <_puts_r+0x64>
 800674e:	686c      	ldr	r4, [r5, #4]
 8006750:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006752:	07db      	lsls	r3, r3, #31
 8006754:	d405      	bmi.n	8006762 <_puts_r+0x36>
 8006756:	89a3      	ldrh	r3, [r4, #12]
 8006758:	0598      	lsls	r0, r3, #22
 800675a:	d402      	bmi.n	8006762 <_puts_r+0x36>
 800675c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800675e:	f000 fba1 	bl	8006ea4 <__retarget_lock_acquire_recursive>
 8006762:	89a3      	ldrh	r3, [r4, #12]
 8006764:	0719      	lsls	r1, r3, #28
 8006766:	d51d      	bpl.n	80067a4 <_puts_r+0x78>
 8006768:	6923      	ldr	r3, [r4, #16]
 800676a:	b1db      	cbz	r3, 80067a4 <_puts_r+0x78>
 800676c:	3e01      	subs	r6, #1
 800676e:	68a3      	ldr	r3, [r4, #8]
 8006770:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006774:	3b01      	subs	r3, #1
 8006776:	60a3      	str	r3, [r4, #8]
 8006778:	bb39      	cbnz	r1, 80067ca <_puts_r+0x9e>
 800677a:	2b00      	cmp	r3, #0
 800677c:	da38      	bge.n	80067f0 <_puts_r+0xc4>
 800677e:	4622      	mov	r2, r4
 8006780:	210a      	movs	r1, #10
 8006782:	4628      	mov	r0, r5
 8006784:	f000 f916 	bl	80069b4 <__swbuf_r>
 8006788:	3001      	adds	r0, #1
 800678a:	d011      	beq.n	80067b0 <_puts_r+0x84>
 800678c:	250a      	movs	r5, #10
 800678e:	e011      	b.n	80067b4 <_puts_r+0x88>
 8006790:	4b1b      	ldr	r3, [pc, #108]	; (8006800 <_puts_r+0xd4>)
 8006792:	429c      	cmp	r4, r3
 8006794:	d101      	bne.n	800679a <_puts_r+0x6e>
 8006796:	68ac      	ldr	r4, [r5, #8]
 8006798:	e7da      	b.n	8006750 <_puts_r+0x24>
 800679a:	4b1a      	ldr	r3, [pc, #104]	; (8006804 <_puts_r+0xd8>)
 800679c:	429c      	cmp	r4, r3
 800679e:	bf08      	it	eq
 80067a0:	68ec      	ldreq	r4, [r5, #12]
 80067a2:	e7d5      	b.n	8006750 <_puts_r+0x24>
 80067a4:	4621      	mov	r1, r4
 80067a6:	4628      	mov	r0, r5
 80067a8:	f000 f956 	bl	8006a58 <__swsetup_r>
 80067ac:	2800      	cmp	r0, #0
 80067ae:	d0dd      	beq.n	800676c <_puts_r+0x40>
 80067b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80067b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067b6:	07da      	lsls	r2, r3, #31
 80067b8:	d405      	bmi.n	80067c6 <_puts_r+0x9a>
 80067ba:	89a3      	ldrh	r3, [r4, #12]
 80067bc:	059b      	lsls	r3, r3, #22
 80067be:	d402      	bmi.n	80067c6 <_puts_r+0x9a>
 80067c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067c2:	f000 fb70 	bl	8006ea6 <__retarget_lock_release_recursive>
 80067c6:	4628      	mov	r0, r5
 80067c8:	bd70      	pop	{r4, r5, r6, pc}
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	da04      	bge.n	80067d8 <_puts_r+0xac>
 80067ce:	69a2      	ldr	r2, [r4, #24]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	dc06      	bgt.n	80067e2 <_puts_r+0xb6>
 80067d4:	290a      	cmp	r1, #10
 80067d6:	d004      	beq.n	80067e2 <_puts_r+0xb6>
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	6022      	str	r2, [r4, #0]
 80067de:	7019      	strb	r1, [r3, #0]
 80067e0:	e7c5      	b.n	800676e <_puts_r+0x42>
 80067e2:	4622      	mov	r2, r4
 80067e4:	4628      	mov	r0, r5
 80067e6:	f000 f8e5 	bl	80069b4 <__swbuf_r>
 80067ea:	3001      	adds	r0, #1
 80067ec:	d1bf      	bne.n	800676e <_puts_r+0x42>
 80067ee:	e7df      	b.n	80067b0 <_puts_r+0x84>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	250a      	movs	r5, #10
 80067f4:	1c5a      	adds	r2, r3, #1
 80067f6:	6022      	str	r2, [r4, #0]
 80067f8:	701d      	strb	r5, [r3, #0]
 80067fa:	e7db      	b.n	80067b4 <_puts_r+0x88>
 80067fc:	08007d48 	.word	0x08007d48
 8006800:	08007d68 	.word	0x08007d68
 8006804:	08007d28 	.word	0x08007d28

08006808 <puts>:
 8006808:	4b02      	ldr	r3, [pc, #8]	; (8006814 <puts+0xc>)
 800680a:	4601      	mov	r1, r0
 800680c:	6818      	ldr	r0, [r3, #0]
 800680e:	f7ff bf8d 	b.w	800672c <_puts_r>
 8006812:	bf00      	nop
 8006814:	2000000c 	.word	0x2000000c

08006818 <setbuf>:
 8006818:	2900      	cmp	r1, #0
 800681a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800681e:	bf0c      	ite	eq
 8006820:	2202      	moveq	r2, #2
 8006822:	2200      	movne	r2, #0
 8006824:	f000 b800 	b.w	8006828 <setvbuf>

08006828 <setvbuf>:
 8006828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800682c:	461d      	mov	r5, r3
 800682e:	4b5d      	ldr	r3, [pc, #372]	; (80069a4 <setvbuf+0x17c>)
 8006830:	681f      	ldr	r7, [r3, #0]
 8006832:	4604      	mov	r4, r0
 8006834:	460e      	mov	r6, r1
 8006836:	4690      	mov	r8, r2
 8006838:	b127      	cbz	r7, 8006844 <setvbuf+0x1c>
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	b913      	cbnz	r3, 8006844 <setvbuf+0x1c>
 800683e:	4638      	mov	r0, r7
 8006840:	f000 fa92 	bl	8006d68 <__sinit>
 8006844:	4b58      	ldr	r3, [pc, #352]	; (80069a8 <setvbuf+0x180>)
 8006846:	429c      	cmp	r4, r3
 8006848:	d167      	bne.n	800691a <setvbuf+0xf2>
 800684a:	687c      	ldr	r4, [r7, #4]
 800684c:	f1b8 0f02 	cmp.w	r8, #2
 8006850:	d006      	beq.n	8006860 <setvbuf+0x38>
 8006852:	f1b8 0f01 	cmp.w	r8, #1
 8006856:	f200 809f 	bhi.w	8006998 <setvbuf+0x170>
 800685a:	2d00      	cmp	r5, #0
 800685c:	f2c0 809c 	blt.w	8006998 <setvbuf+0x170>
 8006860:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006862:	07db      	lsls	r3, r3, #31
 8006864:	d405      	bmi.n	8006872 <setvbuf+0x4a>
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	0598      	lsls	r0, r3, #22
 800686a:	d402      	bmi.n	8006872 <setvbuf+0x4a>
 800686c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800686e:	f000 fb19 	bl	8006ea4 <__retarget_lock_acquire_recursive>
 8006872:	4621      	mov	r1, r4
 8006874:	4638      	mov	r0, r7
 8006876:	f000 f9e3 	bl	8006c40 <_fflush_r>
 800687a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800687c:	b141      	cbz	r1, 8006890 <setvbuf+0x68>
 800687e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006882:	4299      	cmp	r1, r3
 8006884:	d002      	beq.n	800688c <setvbuf+0x64>
 8006886:	4638      	mov	r0, r7
 8006888:	f000 fb7c 	bl	8006f84 <_free_r>
 800688c:	2300      	movs	r3, #0
 800688e:	6363      	str	r3, [r4, #52]	; 0x34
 8006890:	2300      	movs	r3, #0
 8006892:	61a3      	str	r3, [r4, #24]
 8006894:	6063      	str	r3, [r4, #4]
 8006896:	89a3      	ldrh	r3, [r4, #12]
 8006898:	0619      	lsls	r1, r3, #24
 800689a:	d503      	bpl.n	80068a4 <setvbuf+0x7c>
 800689c:	6921      	ldr	r1, [r4, #16]
 800689e:	4638      	mov	r0, r7
 80068a0:	f000 fb70 	bl	8006f84 <_free_r>
 80068a4:	89a3      	ldrh	r3, [r4, #12]
 80068a6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80068aa:	f023 0303 	bic.w	r3, r3, #3
 80068ae:	f1b8 0f02 	cmp.w	r8, #2
 80068b2:	81a3      	strh	r3, [r4, #12]
 80068b4:	d06c      	beq.n	8006990 <setvbuf+0x168>
 80068b6:	ab01      	add	r3, sp, #4
 80068b8:	466a      	mov	r2, sp
 80068ba:	4621      	mov	r1, r4
 80068bc:	4638      	mov	r0, r7
 80068be:	f000 faf3 	bl	8006ea8 <__swhatbuf_r>
 80068c2:	89a3      	ldrh	r3, [r4, #12]
 80068c4:	4318      	orrs	r0, r3
 80068c6:	81a0      	strh	r0, [r4, #12]
 80068c8:	2d00      	cmp	r5, #0
 80068ca:	d130      	bne.n	800692e <setvbuf+0x106>
 80068cc:	9d00      	ldr	r5, [sp, #0]
 80068ce:	4628      	mov	r0, r5
 80068d0:	f000 fb50 	bl	8006f74 <malloc>
 80068d4:	4606      	mov	r6, r0
 80068d6:	2800      	cmp	r0, #0
 80068d8:	d155      	bne.n	8006986 <setvbuf+0x15e>
 80068da:	f8dd 9000 	ldr.w	r9, [sp]
 80068de:	45a9      	cmp	r9, r5
 80068e0:	d14a      	bne.n	8006978 <setvbuf+0x150>
 80068e2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80068e6:	2200      	movs	r2, #0
 80068e8:	60a2      	str	r2, [r4, #8]
 80068ea:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80068ee:	6022      	str	r2, [r4, #0]
 80068f0:	6122      	str	r2, [r4, #16]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068f8:	6162      	str	r2, [r4, #20]
 80068fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068fc:	f043 0302 	orr.w	r3, r3, #2
 8006900:	07d2      	lsls	r2, r2, #31
 8006902:	81a3      	strh	r3, [r4, #12]
 8006904:	d405      	bmi.n	8006912 <setvbuf+0xea>
 8006906:	f413 7f00 	tst.w	r3, #512	; 0x200
 800690a:	d102      	bne.n	8006912 <setvbuf+0xea>
 800690c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800690e:	f000 faca 	bl	8006ea6 <__retarget_lock_release_recursive>
 8006912:	4628      	mov	r0, r5
 8006914:	b003      	add	sp, #12
 8006916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800691a:	4b24      	ldr	r3, [pc, #144]	; (80069ac <setvbuf+0x184>)
 800691c:	429c      	cmp	r4, r3
 800691e:	d101      	bne.n	8006924 <setvbuf+0xfc>
 8006920:	68bc      	ldr	r4, [r7, #8]
 8006922:	e793      	b.n	800684c <setvbuf+0x24>
 8006924:	4b22      	ldr	r3, [pc, #136]	; (80069b0 <setvbuf+0x188>)
 8006926:	429c      	cmp	r4, r3
 8006928:	bf08      	it	eq
 800692a:	68fc      	ldreq	r4, [r7, #12]
 800692c:	e78e      	b.n	800684c <setvbuf+0x24>
 800692e:	2e00      	cmp	r6, #0
 8006930:	d0cd      	beq.n	80068ce <setvbuf+0xa6>
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	b913      	cbnz	r3, 800693c <setvbuf+0x114>
 8006936:	4638      	mov	r0, r7
 8006938:	f000 fa16 	bl	8006d68 <__sinit>
 800693c:	f1b8 0f01 	cmp.w	r8, #1
 8006940:	bf08      	it	eq
 8006942:	89a3      	ldrheq	r3, [r4, #12]
 8006944:	6026      	str	r6, [r4, #0]
 8006946:	bf04      	itt	eq
 8006948:	f043 0301 	orreq.w	r3, r3, #1
 800694c:	81a3      	strheq	r3, [r4, #12]
 800694e:	89a2      	ldrh	r2, [r4, #12]
 8006950:	f012 0308 	ands.w	r3, r2, #8
 8006954:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006958:	d01c      	beq.n	8006994 <setvbuf+0x16c>
 800695a:	07d3      	lsls	r3, r2, #31
 800695c:	bf41      	itttt	mi
 800695e:	2300      	movmi	r3, #0
 8006960:	426d      	negmi	r5, r5
 8006962:	60a3      	strmi	r3, [r4, #8]
 8006964:	61a5      	strmi	r5, [r4, #24]
 8006966:	bf58      	it	pl
 8006968:	60a5      	strpl	r5, [r4, #8]
 800696a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800696c:	f015 0501 	ands.w	r5, r5, #1
 8006970:	d115      	bne.n	800699e <setvbuf+0x176>
 8006972:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006976:	e7c8      	b.n	800690a <setvbuf+0xe2>
 8006978:	4648      	mov	r0, r9
 800697a:	f000 fafb 	bl	8006f74 <malloc>
 800697e:	4606      	mov	r6, r0
 8006980:	2800      	cmp	r0, #0
 8006982:	d0ae      	beq.n	80068e2 <setvbuf+0xba>
 8006984:	464d      	mov	r5, r9
 8006986:	89a3      	ldrh	r3, [r4, #12]
 8006988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800698c:	81a3      	strh	r3, [r4, #12]
 800698e:	e7d0      	b.n	8006932 <setvbuf+0x10a>
 8006990:	2500      	movs	r5, #0
 8006992:	e7a8      	b.n	80068e6 <setvbuf+0xbe>
 8006994:	60a3      	str	r3, [r4, #8]
 8006996:	e7e8      	b.n	800696a <setvbuf+0x142>
 8006998:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800699c:	e7b9      	b.n	8006912 <setvbuf+0xea>
 800699e:	2500      	movs	r5, #0
 80069a0:	e7b7      	b.n	8006912 <setvbuf+0xea>
 80069a2:	bf00      	nop
 80069a4:	2000000c 	.word	0x2000000c
 80069a8:	08007d48 	.word	0x08007d48
 80069ac:	08007d68 	.word	0x08007d68
 80069b0:	08007d28 	.word	0x08007d28

080069b4 <__swbuf_r>:
 80069b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b6:	460e      	mov	r6, r1
 80069b8:	4614      	mov	r4, r2
 80069ba:	4605      	mov	r5, r0
 80069bc:	b118      	cbz	r0, 80069c6 <__swbuf_r+0x12>
 80069be:	6983      	ldr	r3, [r0, #24]
 80069c0:	b90b      	cbnz	r3, 80069c6 <__swbuf_r+0x12>
 80069c2:	f000 f9d1 	bl	8006d68 <__sinit>
 80069c6:	4b21      	ldr	r3, [pc, #132]	; (8006a4c <__swbuf_r+0x98>)
 80069c8:	429c      	cmp	r4, r3
 80069ca:	d12b      	bne.n	8006a24 <__swbuf_r+0x70>
 80069cc:	686c      	ldr	r4, [r5, #4]
 80069ce:	69a3      	ldr	r3, [r4, #24]
 80069d0:	60a3      	str	r3, [r4, #8]
 80069d2:	89a3      	ldrh	r3, [r4, #12]
 80069d4:	071a      	lsls	r2, r3, #28
 80069d6:	d52f      	bpl.n	8006a38 <__swbuf_r+0x84>
 80069d8:	6923      	ldr	r3, [r4, #16]
 80069da:	b36b      	cbz	r3, 8006a38 <__swbuf_r+0x84>
 80069dc:	6923      	ldr	r3, [r4, #16]
 80069de:	6820      	ldr	r0, [r4, #0]
 80069e0:	1ac0      	subs	r0, r0, r3
 80069e2:	6963      	ldr	r3, [r4, #20]
 80069e4:	b2f6      	uxtb	r6, r6
 80069e6:	4283      	cmp	r3, r0
 80069e8:	4637      	mov	r7, r6
 80069ea:	dc04      	bgt.n	80069f6 <__swbuf_r+0x42>
 80069ec:	4621      	mov	r1, r4
 80069ee:	4628      	mov	r0, r5
 80069f0:	f000 f926 	bl	8006c40 <_fflush_r>
 80069f4:	bb30      	cbnz	r0, 8006a44 <__swbuf_r+0x90>
 80069f6:	68a3      	ldr	r3, [r4, #8]
 80069f8:	3b01      	subs	r3, #1
 80069fa:	60a3      	str	r3, [r4, #8]
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	6022      	str	r2, [r4, #0]
 8006a02:	701e      	strb	r6, [r3, #0]
 8006a04:	6963      	ldr	r3, [r4, #20]
 8006a06:	3001      	adds	r0, #1
 8006a08:	4283      	cmp	r3, r0
 8006a0a:	d004      	beq.n	8006a16 <__swbuf_r+0x62>
 8006a0c:	89a3      	ldrh	r3, [r4, #12]
 8006a0e:	07db      	lsls	r3, r3, #31
 8006a10:	d506      	bpl.n	8006a20 <__swbuf_r+0x6c>
 8006a12:	2e0a      	cmp	r6, #10
 8006a14:	d104      	bne.n	8006a20 <__swbuf_r+0x6c>
 8006a16:	4621      	mov	r1, r4
 8006a18:	4628      	mov	r0, r5
 8006a1a:	f000 f911 	bl	8006c40 <_fflush_r>
 8006a1e:	b988      	cbnz	r0, 8006a44 <__swbuf_r+0x90>
 8006a20:	4638      	mov	r0, r7
 8006a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a24:	4b0a      	ldr	r3, [pc, #40]	; (8006a50 <__swbuf_r+0x9c>)
 8006a26:	429c      	cmp	r4, r3
 8006a28:	d101      	bne.n	8006a2e <__swbuf_r+0x7a>
 8006a2a:	68ac      	ldr	r4, [r5, #8]
 8006a2c:	e7cf      	b.n	80069ce <__swbuf_r+0x1a>
 8006a2e:	4b09      	ldr	r3, [pc, #36]	; (8006a54 <__swbuf_r+0xa0>)
 8006a30:	429c      	cmp	r4, r3
 8006a32:	bf08      	it	eq
 8006a34:	68ec      	ldreq	r4, [r5, #12]
 8006a36:	e7ca      	b.n	80069ce <__swbuf_r+0x1a>
 8006a38:	4621      	mov	r1, r4
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	f000 f80c 	bl	8006a58 <__swsetup_r>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	d0cb      	beq.n	80069dc <__swbuf_r+0x28>
 8006a44:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006a48:	e7ea      	b.n	8006a20 <__swbuf_r+0x6c>
 8006a4a:	bf00      	nop
 8006a4c:	08007d48 	.word	0x08007d48
 8006a50:	08007d68 	.word	0x08007d68
 8006a54:	08007d28 	.word	0x08007d28

08006a58 <__swsetup_r>:
 8006a58:	4b32      	ldr	r3, [pc, #200]	; (8006b24 <__swsetup_r+0xcc>)
 8006a5a:	b570      	push	{r4, r5, r6, lr}
 8006a5c:	681d      	ldr	r5, [r3, #0]
 8006a5e:	4606      	mov	r6, r0
 8006a60:	460c      	mov	r4, r1
 8006a62:	b125      	cbz	r5, 8006a6e <__swsetup_r+0x16>
 8006a64:	69ab      	ldr	r3, [r5, #24]
 8006a66:	b913      	cbnz	r3, 8006a6e <__swsetup_r+0x16>
 8006a68:	4628      	mov	r0, r5
 8006a6a:	f000 f97d 	bl	8006d68 <__sinit>
 8006a6e:	4b2e      	ldr	r3, [pc, #184]	; (8006b28 <__swsetup_r+0xd0>)
 8006a70:	429c      	cmp	r4, r3
 8006a72:	d10f      	bne.n	8006a94 <__swsetup_r+0x3c>
 8006a74:	686c      	ldr	r4, [r5, #4]
 8006a76:	89a3      	ldrh	r3, [r4, #12]
 8006a78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a7c:	0719      	lsls	r1, r3, #28
 8006a7e:	d42c      	bmi.n	8006ada <__swsetup_r+0x82>
 8006a80:	06dd      	lsls	r5, r3, #27
 8006a82:	d411      	bmi.n	8006aa8 <__swsetup_r+0x50>
 8006a84:	2309      	movs	r3, #9
 8006a86:	6033      	str	r3, [r6, #0]
 8006a88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a8c:	81a3      	strh	r3, [r4, #12]
 8006a8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a92:	e03e      	b.n	8006b12 <__swsetup_r+0xba>
 8006a94:	4b25      	ldr	r3, [pc, #148]	; (8006b2c <__swsetup_r+0xd4>)
 8006a96:	429c      	cmp	r4, r3
 8006a98:	d101      	bne.n	8006a9e <__swsetup_r+0x46>
 8006a9a:	68ac      	ldr	r4, [r5, #8]
 8006a9c:	e7eb      	b.n	8006a76 <__swsetup_r+0x1e>
 8006a9e:	4b24      	ldr	r3, [pc, #144]	; (8006b30 <__swsetup_r+0xd8>)
 8006aa0:	429c      	cmp	r4, r3
 8006aa2:	bf08      	it	eq
 8006aa4:	68ec      	ldreq	r4, [r5, #12]
 8006aa6:	e7e6      	b.n	8006a76 <__swsetup_r+0x1e>
 8006aa8:	0758      	lsls	r0, r3, #29
 8006aaa:	d512      	bpl.n	8006ad2 <__swsetup_r+0x7a>
 8006aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aae:	b141      	cbz	r1, 8006ac2 <__swsetup_r+0x6a>
 8006ab0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ab4:	4299      	cmp	r1, r3
 8006ab6:	d002      	beq.n	8006abe <__swsetup_r+0x66>
 8006ab8:	4630      	mov	r0, r6
 8006aba:	f000 fa63 	bl	8006f84 <_free_r>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	6363      	str	r3, [r4, #52]	; 0x34
 8006ac2:	89a3      	ldrh	r3, [r4, #12]
 8006ac4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ac8:	81a3      	strh	r3, [r4, #12]
 8006aca:	2300      	movs	r3, #0
 8006acc:	6063      	str	r3, [r4, #4]
 8006ace:	6923      	ldr	r3, [r4, #16]
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	89a3      	ldrh	r3, [r4, #12]
 8006ad4:	f043 0308 	orr.w	r3, r3, #8
 8006ad8:	81a3      	strh	r3, [r4, #12]
 8006ada:	6923      	ldr	r3, [r4, #16]
 8006adc:	b94b      	cbnz	r3, 8006af2 <__swsetup_r+0x9a>
 8006ade:	89a3      	ldrh	r3, [r4, #12]
 8006ae0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ae8:	d003      	beq.n	8006af2 <__swsetup_r+0x9a>
 8006aea:	4621      	mov	r1, r4
 8006aec:	4630      	mov	r0, r6
 8006aee:	f000 fa01 	bl	8006ef4 <__smakebuf_r>
 8006af2:	89a0      	ldrh	r0, [r4, #12]
 8006af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006af8:	f010 0301 	ands.w	r3, r0, #1
 8006afc:	d00a      	beq.n	8006b14 <__swsetup_r+0xbc>
 8006afe:	2300      	movs	r3, #0
 8006b00:	60a3      	str	r3, [r4, #8]
 8006b02:	6963      	ldr	r3, [r4, #20]
 8006b04:	425b      	negs	r3, r3
 8006b06:	61a3      	str	r3, [r4, #24]
 8006b08:	6923      	ldr	r3, [r4, #16]
 8006b0a:	b943      	cbnz	r3, 8006b1e <__swsetup_r+0xc6>
 8006b0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b10:	d1ba      	bne.n	8006a88 <__swsetup_r+0x30>
 8006b12:	bd70      	pop	{r4, r5, r6, pc}
 8006b14:	0781      	lsls	r1, r0, #30
 8006b16:	bf58      	it	pl
 8006b18:	6963      	ldrpl	r3, [r4, #20]
 8006b1a:	60a3      	str	r3, [r4, #8]
 8006b1c:	e7f4      	b.n	8006b08 <__swsetup_r+0xb0>
 8006b1e:	2000      	movs	r0, #0
 8006b20:	e7f7      	b.n	8006b12 <__swsetup_r+0xba>
 8006b22:	bf00      	nop
 8006b24:	2000000c 	.word	0x2000000c
 8006b28:	08007d48 	.word	0x08007d48
 8006b2c:	08007d68 	.word	0x08007d68
 8006b30:	08007d28 	.word	0x08007d28

08006b34 <__sflush_r>:
 8006b34:	898a      	ldrh	r2, [r1, #12]
 8006b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b3a:	4605      	mov	r5, r0
 8006b3c:	0710      	lsls	r0, r2, #28
 8006b3e:	460c      	mov	r4, r1
 8006b40:	d458      	bmi.n	8006bf4 <__sflush_r+0xc0>
 8006b42:	684b      	ldr	r3, [r1, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	dc05      	bgt.n	8006b54 <__sflush_r+0x20>
 8006b48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	dc02      	bgt.n	8006b54 <__sflush_r+0x20>
 8006b4e:	2000      	movs	r0, #0
 8006b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b56:	2e00      	cmp	r6, #0
 8006b58:	d0f9      	beq.n	8006b4e <__sflush_r+0x1a>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b60:	682f      	ldr	r7, [r5, #0]
 8006b62:	602b      	str	r3, [r5, #0]
 8006b64:	d032      	beq.n	8006bcc <__sflush_r+0x98>
 8006b66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b68:	89a3      	ldrh	r3, [r4, #12]
 8006b6a:	075a      	lsls	r2, r3, #29
 8006b6c:	d505      	bpl.n	8006b7a <__sflush_r+0x46>
 8006b6e:	6863      	ldr	r3, [r4, #4]
 8006b70:	1ac0      	subs	r0, r0, r3
 8006b72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b74:	b10b      	cbz	r3, 8006b7a <__sflush_r+0x46>
 8006b76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b78:	1ac0      	subs	r0, r0, r3
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b80:	6a21      	ldr	r1, [r4, #32]
 8006b82:	4628      	mov	r0, r5
 8006b84:	47b0      	blx	r6
 8006b86:	1c43      	adds	r3, r0, #1
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	d106      	bne.n	8006b9a <__sflush_r+0x66>
 8006b8c:	6829      	ldr	r1, [r5, #0]
 8006b8e:	291d      	cmp	r1, #29
 8006b90:	d82c      	bhi.n	8006bec <__sflush_r+0xb8>
 8006b92:	4a2a      	ldr	r2, [pc, #168]	; (8006c3c <__sflush_r+0x108>)
 8006b94:	40ca      	lsrs	r2, r1
 8006b96:	07d6      	lsls	r6, r2, #31
 8006b98:	d528      	bpl.n	8006bec <__sflush_r+0xb8>
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	6062      	str	r2, [r4, #4]
 8006b9e:	04d9      	lsls	r1, r3, #19
 8006ba0:	6922      	ldr	r2, [r4, #16]
 8006ba2:	6022      	str	r2, [r4, #0]
 8006ba4:	d504      	bpl.n	8006bb0 <__sflush_r+0x7c>
 8006ba6:	1c42      	adds	r2, r0, #1
 8006ba8:	d101      	bne.n	8006bae <__sflush_r+0x7a>
 8006baa:	682b      	ldr	r3, [r5, #0]
 8006bac:	b903      	cbnz	r3, 8006bb0 <__sflush_r+0x7c>
 8006bae:	6560      	str	r0, [r4, #84]	; 0x54
 8006bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bb2:	602f      	str	r7, [r5, #0]
 8006bb4:	2900      	cmp	r1, #0
 8006bb6:	d0ca      	beq.n	8006b4e <__sflush_r+0x1a>
 8006bb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bbc:	4299      	cmp	r1, r3
 8006bbe:	d002      	beq.n	8006bc6 <__sflush_r+0x92>
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	f000 f9df 	bl	8006f84 <_free_r>
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	6360      	str	r0, [r4, #52]	; 0x34
 8006bca:	e7c1      	b.n	8006b50 <__sflush_r+0x1c>
 8006bcc:	6a21      	ldr	r1, [r4, #32]
 8006bce:	2301      	movs	r3, #1
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	47b0      	blx	r6
 8006bd4:	1c41      	adds	r1, r0, #1
 8006bd6:	d1c7      	bne.n	8006b68 <__sflush_r+0x34>
 8006bd8:	682b      	ldr	r3, [r5, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0c4      	beq.n	8006b68 <__sflush_r+0x34>
 8006bde:	2b1d      	cmp	r3, #29
 8006be0:	d001      	beq.n	8006be6 <__sflush_r+0xb2>
 8006be2:	2b16      	cmp	r3, #22
 8006be4:	d101      	bne.n	8006bea <__sflush_r+0xb6>
 8006be6:	602f      	str	r7, [r5, #0]
 8006be8:	e7b1      	b.n	8006b4e <__sflush_r+0x1a>
 8006bea:	89a3      	ldrh	r3, [r4, #12]
 8006bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bf0:	81a3      	strh	r3, [r4, #12]
 8006bf2:	e7ad      	b.n	8006b50 <__sflush_r+0x1c>
 8006bf4:	690f      	ldr	r7, [r1, #16]
 8006bf6:	2f00      	cmp	r7, #0
 8006bf8:	d0a9      	beq.n	8006b4e <__sflush_r+0x1a>
 8006bfa:	0793      	lsls	r3, r2, #30
 8006bfc:	680e      	ldr	r6, [r1, #0]
 8006bfe:	bf08      	it	eq
 8006c00:	694b      	ldreq	r3, [r1, #20]
 8006c02:	600f      	str	r7, [r1, #0]
 8006c04:	bf18      	it	ne
 8006c06:	2300      	movne	r3, #0
 8006c08:	eba6 0807 	sub.w	r8, r6, r7
 8006c0c:	608b      	str	r3, [r1, #8]
 8006c0e:	f1b8 0f00 	cmp.w	r8, #0
 8006c12:	dd9c      	ble.n	8006b4e <__sflush_r+0x1a>
 8006c14:	6a21      	ldr	r1, [r4, #32]
 8006c16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c18:	4643      	mov	r3, r8
 8006c1a:	463a      	mov	r2, r7
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	47b0      	blx	r6
 8006c20:	2800      	cmp	r0, #0
 8006c22:	dc06      	bgt.n	8006c32 <__sflush_r+0xfe>
 8006c24:	89a3      	ldrh	r3, [r4, #12]
 8006c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c2a:	81a3      	strh	r3, [r4, #12]
 8006c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c30:	e78e      	b.n	8006b50 <__sflush_r+0x1c>
 8006c32:	4407      	add	r7, r0
 8006c34:	eba8 0800 	sub.w	r8, r8, r0
 8006c38:	e7e9      	b.n	8006c0e <__sflush_r+0xda>
 8006c3a:	bf00      	nop
 8006c3c:	20400001 	.word	0x20400001

08006c40 <_fflush_r>:
 8006c40:	b538      	push	{r3, r4, r5, lr}
 8006c42:	690b      	ldr	r3, [r1, #16]
 8006c44:	4605      	mov	r5, r0
 8006c46:	460c      	mov	r4, r1
 8006c48:	b913      	cbnz	r3, 8006c50 <_fflush_r+0x10>
 8006c4a:	2500      	movs	r5, #0
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	bd38      	pop	{r3, r4, r5, pc}
 8006c50:	b118      	cbz	r0, 8006c5a <_fflush_r+0x1a>
 8006c52:	6983      	ldr	r3, [r0, #24]
 8006c54:	b90b      	cbnz	r3, 8006c5a <_fflush_r+0x1a>
 8006c56:	f000 f887 	bl	8006d68 <__sinit>
 8006c5a:	4b14      	ldr	r3, [pc, #80]	; (8006cac <_fflush_r+0x6c>)
 8006c5c:	429c      	cmp	r4, r3
 8006c5e:	d11b      	bne.n	8006c98 <_fflush_r+0x58>
 8006c60:	686c      	ldr	r4, [r5, #4]
 8006c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d0ef      	beq.n	8006c4a <_fflush_r+0xa>
 8006c6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c6c:	07d0      	lsls	r0, r2, #31
 8006c6e:	d404      	bmi.n	8006c7a <_fflush_r+0x3a>
 8006c70:	0599      	lsls	r1, r3, #22
 8006c72:	d402      	bmi.n	8006c7a <_fflush_r+0x3a>
 8006c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c76:	f000 f915 	bl	8006ea4 <__retarget_lock_acquire_recursive>
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	f7ff ff59 	bl	8006b34 <__sflush_r>
 8006c82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c84:	07da      	lsls	r2, r3, #31
 8006c86:	4605      	mov	r5, r0
 8006c88:	d4e0      	bmi.n	8006c4c <_fflush_r+0xc>
 8006c8a:	89a3      	ldrh	r3, [r4, #12]
 8006c8c:	059b      	lsls	r3, r3, #22
 8006c8e:	d4dd      	bmi.n	8006c4c <_fflush_r+0xc>
 8006c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c92:	f000 f908 	bl	8006ea6 <__retarget_lock_release_recursive>
 8006c96:	e7d9      	b.n	8006c4c <_fflush_r+0xc>
 8006c98:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <_fflush_r+0x70>)
 8006c9a:	429c      	cmp	r4, r3
 8006c9c:	d101      	bne.n	8006ca2 <_fflush_r+0x62>
 8006c9e:	68ac      	ldr	r4, [r5, #8]
 8006ca0:	e7df      	b.n	8006c62 <_fflush_r+0x22>
 8006ca2:	4b04      	ldr	r3, [pc, #16]	; (8006cb4 <_fflush_r+0x74>)
 8006ca4:	429c      	cmp	r4, r3
 8006ca6:	bf08      	it	eq
 8006ca8:	68ec      	ldreq	r4, [r5, #12]
 8006caa:	e7da      	b.n	8006c62 <_fflush_r+0x22>
 8006cac:	08007d48 	.word	0x08007d48
 8006cb0:	08007d68 	.word	0x08007d68
 8006cb4:	08007d28 	.word	0x08007d28

08006cb8 <std>:
 8006cb8:	2300      	movs	r3, #0
 8006cba:	b510      	push	{r4, lr}
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	e9c0 3300 	strd	r3, r3, [r0]
 8006cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cc6:	6083      	str	r3, [r0, #8]
 8006cc8:	8181      	strh	r1, [r0, #12]
 8006cca:	6643      	str	r3, [r0, #100]	; 0x64
 8006ccc:	81c2      	strh	r2, [r0, #14]
 8006cce:	6183      	str	r3, [r0, #24]
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	2208      	movs	r2, #8
 8006cd4:	305c      	adds	r0, #92	; 0x5c
 8006cd6:	f7ff fd09 	bl	80066ec <memset>
 8006cda:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <std+0x38>)
 8006cdc:	6263      	str	r3, [r4, #36]	; 0x24
 8006cde:	4b05      	ldr	r3, [pc, #20]	; (8006cf4 <std+0x3c>)
 8006ce0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ce2:	4b05      	ldr	r3, [pc, #20]	; (8006cf8 <std+0x40>)
 8006ce4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ce6:	4b05      	ldr	r3, [pc, #20]	; (8006cfc <std+0x44>)
 8006ce8:	6224      	str	r4, [r4, #32]
 8006cea:	6323      	str	r3, [r4, #48]	; 0x30
 8006cec:	bd10      	pop	{r4, pc}
 8006cee:	bf00      	nop
 8006cf0:	08007741 	.word	0x08007741
 8006cf4:	08007763 	.word	0x08007763
 8006cf8:	0800779b 	.word	0x0800779b
 8006cfc:	080077bf 	.word	0x080077bf

08006d00 <_cleanup_r>:
 8006d00:	4901      	ldr	r1, [pc, #4]	; (8006d08 <_cleanup_r+0x8>)
 8006d02:	f000 b8af 	b.w	8006e64 <_fwalk_reent>
 8006d06:	bf00      	nop
 8006d08:	08006c41 	.word	0x08006c41

08006d0c <__sfmoreglue>:
 8006d0c:	b570      	push	{r4, r5, r6, lr}
 8006d0e:	2268      	movs	r2, #104	; 0x68
 8006d10:	1e4d      	subs	r5, r1, #1
 8006d12:	4355      	muls	r5, r2
 8006d14:	460e      	mov	r6, r1
 8006d16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d1a:	f000 f99f 	bl	800705c <_malloc_r>
 8006d1e:	4604      	mov	r4, r0
 8006d20:	b140      	cbz	r0, 8006d34 <__sfmoreglue+0x28>
 8006d22:	2100      	movs	r1, #0
 8006d24:	e9c0 1600 	strd	r1, r6, [r0]
 8006d28:	300c      	adds	r0, #12
 8006d2a:	60a0      	str	r0, [r4, #8]
 8006d2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d30:	f7ff fcdc 	bl	80066ec <memset>
 8006d34:	4620      	mov	r0, r4
 8006d36:	bd70      	pop	{r4, r5, r6, pc}

08006d38 <__sfp_lock_acquire>:
 8006d38:	4801      	ldr	r0, [pc, #4]	; (8006d40 <__sfp_lock_acquire+0x8>)
 8006d3a:	f000 b8b3 	b.w	8006ea4 <__retarget_lock_acquire_recursive>
 8006d3e:	bf00      	nop
 8006d40:	200008e1 	.word	0x200008e1

08006d44 <__sfp_lock_release>:
 8006d44:	4801      	ldr	r0, [pc, #4]	; (8006d4c <__sfp_lock_release+0x8>)
 8006d46:	f000 b8ae 	b.w	8006ea6 <__retarget_lock_release_recursive>
 8006d4a:	bf00      	nop
 8006d4c:	200008e1 	.word	0x200008e1

08006d50 <__sinit_lock_acquire>:
 8006d50:	4801      	ldr	r0, [pc, #4]	; (8006d58 <__sinit_lock_acquire+0x8>)
 8006d52:	f000 b8a7 	b.w	8006ea4 <__retarget_lock_acquire_recursive>
 8006d56:	bf00      	nop
 8006d58:	200008e2 	.word	0x200008e2

08006d5c <__sinit_lock_release>:
 8006d5c:	4801      	ldr	r0, [pc, #4]	; (8006d64 <__sinit_lock_release+0x8>)
 8006d5e:	f000 b8a2 	b.w	8006ea6 <__retarget_lock_release_recursive>
 8006d62:	bf00      	nop
 8006d64:	200008e2 	.word	0x200008e2

08006d68 <__sinit>:
 8006d68:	b510      	push	{r4, lr}
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	f7ff fff0 	bl	8006d50 <__sinit_lock_acquire>
 8006d70:	69a3      	ldr	r3, [r4, #24]
 8006d72:	b11b      	cbz	r3, 8006d7c <__sinit+0x14>
 8006d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d78:	f7ff bff0 	b.w	8006d5c <__sinit_lock_release>
 8006d7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d80:	6523      	str	r3, [r4, #80]	; 0x50
 8006d82:	4b13      	ldr	r3, [pc, #76]	; (8006dd0 <__sinit+0x68>)
 8006d84:	4a13      	ldr	r2, [pc, #76]	; (8006dd4 <__sinit+0x6c>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d8a:	42a3      	cmp	r3, r4
 8006d8c:	bf04      	itt	eq
 8006d8e:	2301      	moveq	r3, #1
 8006d90:	61a3      	streq	r3, [r4, #24]
 8006d92:	4620      	mov	r0, r4
 8006d94:	f000 f820 	bl	8006dd8 <__sfp>
 8006d98:	6060      	str	r0, [r4, #4]
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f000 f81c 	bl	8006dd8 <__sfp>
 8006da0:	60a0      	str	r0, [r4, #8]
 8006da2:	4620      	mov	r0, r4
 8006da4:	f000 f818 	bl	8006dd8 <__sfp>
 8006da8:	2200      	movs	r2, #0
 8006daa:	60e0      	str	r0, [r4, #12]
 8006dac:	2104      	movs	r1, #4
 8006dae:	6860      	ldr	r0, [r4, #4]
 8006db0:	f7ff ff82 	bl	8006cb8 <std>
 8006db4:	68a0      	ldr	r0, [r4, #8]
 8006db6:	2201      	movs	r2, #1
 8006db8:	2109      	movs	r1, #9
 8006dba:	f7ff ff7d 	bl	8006cb8 <std>
 8006dbe:	68e0      	ldr	r0, [r4, #12]
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	2112      	movs	r1, #18
 8006dc4:	f7ff ff78 	bl	8006cb8 <std>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	61a3      	str	r3, [r4, #24]
 8006dcc:	e7d2      	b.n	8006d74 <__sinit+0xc>
 8006dce:	bf00      	nop
 8006dd0:	08007d24 	.word	0x08007d24
 8006dd4:	08006d01 	.word	0x08006d01

08006dd8 <__sfp>:
 8006dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dda:	4607      	mov	r7, r0
 8006ddc:	f7ff ffac 	bl	8006d38 <__sfp_lock_acquire>
 8006de0:	4b1e      	ldr	r3, [pc, #120]	; (8006e5c <__sfp+0x84>)
 8006de2:	681e      	ldr	r6, [r3, #0]
 8006de4:	69b3      	ldr	r3, [r6, #24]
 8006de6:	b913      	cbnz	r3, 8006dee <__sfp+0x16>
 8006de8:	4630      	mov	r0, r6
 8006dea:	f7ff ffbd 	bl	8006d68 <__sinit>
 8006dee:	3648      	adds	r6, #72	; 0x48
 8006df0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006df4:	3b01      	subs	r3, #1
 8006df6:	d503      	bpl.n	8006e00 <__sfp+0x28>
 8006df8:	6833      	ldr	r3, [r6, #0]
 8006dfa:	b30b      	cbz	r3, 8006e40 <__sfp+0x68>
 8006dfc:	6836      	ldr	r6, [r6, #0]
 8006dfe:	e7f7      	b.n	8006df0 <__sfp+0x18>
 8006e00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e04:	b9d5      	cbnz	r5, 8006e3c <__sfp+0x64>
 8006e06:	4b16      	ldr	r3, [pc, #88]	; (8006e60 <__sfp+0x88>)
 8006e08:	60e3      	str	r3, [r4, #12]
 8006e0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e0e:	6665      	str	r5, [r4, #100]	; 0x64
 8006e10:	f000 f847 	bl	8006ea2 <__retarget_lock_init_recursive>
 8006e14:	f7ff ff96 	bl	8006d44 <__sfp_lock_release>
 8006e18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e20:	6025      	str	r5, [r4, #0]
 8006e22:	61a5      	str	r5, [r4, #24]
 8006e24:	2208      	movs	r2, #8
 8006e26:	4629      	mov	r1, r5
 8006e28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e2c:	f7ff fc5e 	bl	80066ec <memset>
 8006e30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e38:	4620      	mov	r0, r4
 8006e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e3c:	3468      	adds	r4, #104	; 0x68
 8006e3e:	e7d9      	b.n	8006df4 <__sfp+0x1c>
 8006e40:	2104      	movs	r1, #4
 8006e42:	4638      	mov	r0, r7
 8006e44:	f7ff ff62 	bl	8006d0c <__sfmoreglue>
 8006e48:	4604      	mov	r4, r0
 8006e4a:	6030      	str	r0, [r6, #0]
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d1d5      	bne.n	8006dfc <__sfp+0x24>
 8006e50:	f7ff ff78 	bl	8006d44 <__sfp_lock_release>
 8006e54:	230c      	movs	r3, #12
 8006e56:	603b      	str	r3, [r7, #0]
 8006e58:	e7ee      	b.n	8006e38 <__sfp+0x60>
 8006e5a:	bf00      	nop
 8006e5c:	08007d24 	.word	0x08007d24
 8006e60:	ffff0001 	.word	0xffff0001

08006e64 <_fwalk_reent>:
 8006e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e68:	4606      	mov	r6, r0
 8006e6a:	4688      	mov	r8, r1
 8006e6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e70:	2700      	movs	r7, #0
 8006e72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e76:	f1b9 0901 	subs.w	r9, r9, #1
 8006e7a:	d505      	bpl.n	8006e88 <_fwalk_reent+0x24>
 8006e7c:	6824      	ldr	r4, [r4, #0]
 8006e7e:	2c00      	cmp	r4, #0
 8006e80:	d1f7      	bne.n	8006e72 <_fwalk_reent+0xe>
 8006e82:	4638      	mov	r0, r7
 8006e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e88:	89ab      	ldrh	r3, [r5, #12]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d907      	bls.n	8006e9e <_fwalk_reent+0x3a>
 8006e8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e92:	3301      	adds	r3, #1
 8006e94:	d003      	beq.n	8006e9e <_fwalk_reent+0x3a>
 8006e96:	4629      	mov	r1, r5
 8006e98:	4630      	mov	r0, r6
 8006e9a:	47c0      	blx	r8
 8006e9c:	4307      	orrs	r7, r0
 8006e9e:	3568      	adds	r5, #104	; 0x68
 8006ea0:	e7e9      	b.n	8006e76 <_fwalk_reent+0x12>

08006ea2 <__retarget_lock_init_recursive>:
 8006ea2:	4770      	bx	lr

08006ea4 <__retarget_lock_acquire_recursive>:
 8006ea4:	4770      	bx	lr

08006ea6 <__retarget_lock_release_recursive>:
 8006ea6:	4770      	bx	lr

08006ea8 <__swhatbuf_r>:
 8006ea8:	b570      	push	{r4, r5, r6, lr}
 8006eaa:	460e      	mov	r6, r1
 8006eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb0:	2900      	cmp	r1, #0
 8006eb2:	b096      	sub	sp, #88	; 0x58
 8006eb4:	4614      	mov	r4, r2
 8006eb6:	461d      	mov	r5, r3
 8006eb8:	da08      	bge.n	8006ecc <__swhatbuf_r+0x24>
 8006eba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	602a      	str	r2, [r5, #0]
 8006ec2:	061a      	lsls	r2, r3, #24
 8006ec4:	d410      	bmi.n	8006ee8 <__swhatbuf_r+0x40>
 8006ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eca:	e00e      	b.n	8006eea <__swhatbuf_r+0x42>
 8006ecc:	466a      	mov	r2, sp
 8006ece:	f000 fc9d 	bl	800780c <_fstat_r>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	dbf1      	blt.n	8006eba <__swhatbuf_r+0x12>
 8006ed6:	9a01      	ldr	r2, [sp, #4]
 8006ed8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006edc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ee0:	425a      	negs	r2, r3
 8006ee2:	415a      	adcs	r2, r3
 8006ee4:	602a      	str	r2, [r5, #0]
 8006ee6:	e7ee      	b.n	8006ec6 <__swhatbuf_r+0x1e>
 8006ee8:	2340      	movs	r3, #64	; 0x40
 8006eea:	2000      	movs	r0, #0
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	b016      	add	sp, #88	; 0x58
 8006ef0:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ef4 <__smakebuf_r>:
 8006ef4:	898b      	ldrh	r3, [r1, #12]
 8006ef6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ef8:	079d      	lsls	r5, r3, #30
 8006efa:	4606      	mov	r6, r0
 8006efc:	460c      	mov	r4, r1
 8006efe:	d507      	bpl.n	8006f10 <__smakebuf_r+0x1c>
 8006f00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f04:	6023      	str	r3, [r4, #0]
 8006f06:	6123      	str	r3, [r4, #16]
 8006f08:	2301      	movs	r3, #1
 8006f0a:	6163      	str	r3, [r4, #20]
 8006f0c:	b002      	add	sp, #8
 8006f0e:	bd70      	pop	{r4, r5, r6, pc}
 8006f10:	ab01      	add	r3, sp, #4
 8006f12:	466a      	mov	r2, sp
 8006f14:	f7ff ffc8 	bl	8006ea8 <__swhatbuf_r>
 8006f18:	9900      	ldr	r1, [sp, #0]
 8006f1a:	4605      	mov	r5, r0
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	f000 f89d 	bl	800705c <_malloc_r>
 8006f22:	b948      	cbnz	r0, 8006f38 <__smakebuf_r+0x44>
 8006f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f28:	059a      	lsls	r2, r3, #22
 8006f2a:	d4ef      	bmi.n	8006f0c <__smakebuf_r+0x18>
 8006f2c:	f023 0303 	bic.w	r3, r3, #3
 8006f30:	f043 0302 	orr.w	r3, r3, #2
 8006f34:	81a3      	strh	r3, [r4, #12]
 8006f36:	e7e3      	b.n	8006f00 <__smakebuf_r+0xc>
 8006f38:	4b0d      	ldr	r3, [pc, #52]	; (8006f70 <__smakebuf_r+0x7c>)
 8006f3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f3c:	89a3      	ldrh	r3, [r4, #12]
 8006f3e:	6020      	str	r0, [r4, #0]
 8006f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f44:	81a3      	strh	r3, [r4, #12]
 8006f46:	9b00      	ldr	r3, [sp, #0]
 8006f48:	6163      	str	r3, [r4, #20]
 8006f4a:	9b01      	ldr	r3, [sp, #4]
 8006f4c:	6120      	str	r0, [r4, #16]
 8006f4e:	b15b      	cbz	r3, 8006f68 <__smakebuf_r+0x74>
 8006f50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f54:	4630      	mov	r0, r6
 8006f56:	f000 fc6b 	bl	8007830 <_isatty_r>
 8006f5a:	b128      	cbz	r0, 8006f68 <__smakebuf_r+0x74>
 8006f5c:	89a3      	ldrh	r3, [r4, #12]
 8006f5e:	f023 0303 	bic.w	r3, r3, #3
 8006f62:	f043 0301 	orr.w	r3, r3, #1
 8006f66:	81a3      	strh	r3, [r4, #12]
 8006f68:	89a0      	ldrh	r0, [r4, #12]
 8006f6a:	4305      	orrs	r5, r0
 8006f6c:	81a5      	strh	r5, [r4, #12]
 8006f6e:	e7cd      	b.n	8006f0c <__smakebuf_r+0x18>
 8006f70:	08006d01 	.word	0x08006d01

08006f74 <malloc>:
 8006f74:	4b02      	ldr	r3, [pc, #8]	; (8006f80 <malloc+0xc>)
 8006f76:	4601      	mov	r1, r0
 8006f78:	6818      	ldr	r0, [r3, #0]
 8006f7a:	f000 b86f 	b.w	800705c <_malloc_r>
 8006f7e:	bf00      	nop
 8006f80:	2000000c 	.word	0x2000000c

08006f84 <_free_r>:
 8006f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f86:	2900      	cmp	r1, #0
 8006f88:	d044      	beq.n	8007014 <_free_r+0x90>
 8006f8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f8e:	9001      	str	r0, [sp, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f1a1 0404 	sub.w	r4, r1, #4
 8006f96:	bfb8      	it	lt
 8006f98:	18e4      	addlt	r4, r4, r3
 8006f9a:	f000 fc6b 	bl	8007874 <__malloc_lock>
 8006f9e:	4a1e      	ldr	r2, [pc, #120]	; (8007018 <_free_r+0x94>)
 8006fa0:	9801      	ldr	r0, [sp, #4]
 8006fa2:	6813      	ldr	r3, [r2, #0]
 8006fa4:	b933      	cbnz	r3, 8006fb4 <_free_r+0x30>
 8006fa6:	6063      	str	r3, [r4, #4]
 8006fa8:	6014      	str	r4, [r2, #0]
 8006faa:	b003      	add	sp, #12
 8006fac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fb0:	f000 bc66 	b.w	8007880 <__malloc_unlock>
 8006fb4:	42a3      	cmp	r3, r4
 8006fb6:	d908      	bls.n	8006fca <_free_r+0x46>
 8006fb8:	6825      	ldr	r5, [r4, #0]
 8006fba:	1961      	adds	r1, r4, r5
 8006fbc:	428b      	cmp	r3, r1
 8006fbe:	bf01      	itttt	eq
 8006fc0:	6819      	ldreq	r1, [r3, #0]
 8006fc2:	685b      	ldreq	r3, [r3, #4]
 8006fc4:	1949      	addeq	r1, r1, r5
 8006fc6:	6021      	streq	r1, [r4, #0]
 8006fc8:	e7ed      	b.n	8006fa6 <_free_r+0x22>
 8006fca:	461a      	mov	r2, r3
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	b10b      	cbz	r3, 8006fd4 <_free_r+0x50>
 8006fd0:	42a3      	cmp	r3, r4
 8006fd2:	d9fa      	bls.n	8006fca <_free_r+0x46>
 8006fd4:	6811      	ldr	r1, [r2, #0]
 8006fd6:	1855      	adds	r5, r2, r1
 8006fd8:	42a5      	cmp	r5, r4
 8006fda:	d10b      	bne.n	8006ff4 <_free_r+0x70>
 8006fdc:	6824      	ldr	r4, [r4, #0]
 8006fde:	4421      	add	r1, r4
 8006fe0:	1854      	adds	r4, r2, r1
 8006fe2:	42a3      	cmp	r3, r4
 8006fe4:	6011      	str	r1, [r2, #0]
 8006fe6:	d1e0      	bne.n	8006faa <_free_r+0x26>
 8006fe8:	681c      	ldr	r4, [r3, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	6053      	str	r3, [r2, #4]
 8006fee:	4421      	add	r1, r4
 8006ff0:	6011      	str	r1, [r2, #0]
 8006ff2:	e7da      	b.n	8006faa <_free_r+0x26>
 8006ff4:	d902      	bls.n	8006ffc <_free_r+0x78>
 8006ff6:	230c      	movs	r3, #12
 8006ff8:	6003      	str	r3, [r0, #0]
 8006ffa:	e7d6      	b.n	8006faa <_free_r+0x26>
 8006ffc:	6825      	ldr	r5, [r4, #0]
 8006ffe:	1961      	adds	r1, r4, r5
 8007000:	428b      	cmp	r3, r1
 8007002:	bf04      	itt	eq
 8007004:	6819      	ldreq	r1, [r3, #0]
 8007006:	685b      	ldreq	r3, [r3, #4]
 8007008:	6063      	str	r3, [r4, #4]
 800700a:	bf04      	itt	eq
 800700c:	1949      	addeq	r1, r1, r5
 800700e:	6021      	streq	r1, [r4, #0]
 8007010:	6054      	str	r4, [r2, #4]
 8007012:	e7ca      	b.n	8006faa <_free_r+0x26>
 8007014:	b003      	add	sp, #12
 8007016:	bd30      	pop	{r4, r5, pc}
 8007018:	200008e4 	.word	0x200008e4

0800701c <sbrk_aligned>:
 800701c:	b570      	push	{r4, r5, r6, lr}
 800701e:	4e0e      	ldr	r6, [pc, #56]	; (8007058 <sbrk_aligned+0x3c>)
 8007020:	460c      	mov	r4, r1
 8007022:	6831      	ldr	r1, [r6, #0]
 8007024:	4605      	mov	r5, r0
 8007026:	b911      	cbnz	r1, 800702e <sbrk_aligned+0x12>
 8007028:	f000 fb7a 	bl	8007720 <_sbrk_r>
 800702c:	6030      	str	r0, [r6, #0]
 800702e:	4621      	mov	r1, r4
 8007030:	4628      	mov	r0, r5
 8007032:	f000 fb75 	bl	8007720 <_sbrk_r>
 8007036:	1c43      	adds	r3, r0, #1
 8007038:	d00a      	beq.n	8007050 <sbrk_aligned+0x34>
 800703a:	1cc4      	adds	r4, r0, #3
 800703c:	f024 0403 	bic.w	r4, r4, #3
 8007040:	42a0      	cmp	r0, r4
 8007042:	d007      	beq.n	8007054 <sbrk_aligned+0x38>
 8007044:	1a21      	subs	r1, r4, r0
 8007046:	4628      	mov	r0, r5
 8007048:	f000 fb6a 	bl	8007720 <_sbrk_r>
 800704c:	3001      	adds	r0, #1
 800704e:	d101      	bne.n	8007054 <sbrk_aligned+0x38>
 8007050:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007054:	4620      	mov	r0, r4
 8007056:	bd70      	pop	{r4, r5, r6, pc}
 8007058:	200008e8 	.word	0x200008e8

0800705c <_malloc_r>:
 800705c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007060:	1ccd      	adds	r5, r1, #3
 8007062:	f025 0503 	bic.w	r5, r5, #3
 8007066:	3508      	adds	r5, #8
 8007068:	2d0c      	cmp	r5, #12
 800706a:	bf38      	it	cc
 800706c:	250c      	movcc	r5, #12
 800706e:	2d00      	cmp	r5, #0
 8007070:	4607      	mov	r7, r0
 8007072:	db01      	blt.n	8007078 <_malloc_r+0x1c>
 8007074:	42a9      	cmp	r1, r5
 8007076:	d905      	bls.n	8007084 <_malloc_r+0x28>
 8007078:	230c      	movs	r3, #12
 800707a:	603b      	str	r3, [r7, #0]
 800707c:	2600      	movs	r6, #0
 800707e:	4630      	mov	r0, r6
 8007080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007084:	4e2e      	ldr	r6, [pc, #184]	; (8007140 <_malloc_r+0xe4>)
 8007086:	f000 fbf5 	bl	8007874 <__malloc_lock>
 800708a:	6833      	ldr	r3, [r6, #0]
 800708c:	461c      	mov	r4, r3
 800708e:	bb34      	cbnz	r4, 80070de <_malloc_r+0x82>
 8007090:	4629      	mov	r1, r5
 8007092:	4638      	mov	r0, r7
 8007094:	f7ff ffc2 	bl	800701c <sbrk_aligned>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	4604      	mov	r4, r0
 800709c:	d14d      	bne.n	800713a <_malloc_r+0xde>
 800709e:	6834      	ldr	r4, [r6, #0]
 80070a0:	4626      	mov	r6, r4
 80070a2:	2e00      	cmp	r6, #0
 80070a4:	d140      	bne.n	8007128 <_malloc_r+0xcc>
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	4631      	mov	r1, r6
 80070aa:	4638      	mov	r0, r7
 80070ac:	eb04 0803 	add.w	r8, r4, r3
 80070b0:	f000 fb36 	bl	8007720 <_sbrk_r>
 80070b4:	4580      	cmp	r8, r0
 80070b6:	d13a      	bne.n	800712e <_malloc_r+0xd2>
 80070b8:	6821      	ldr	r1, [r4, #0]
 80070ba:	3503      	adds	r5, #3
 80070bc:	1a6d      	subs	r5, r5, r1
 80070be:	f025 0503 	bic.w	r5, r5, #3
 80070c2:	3508      	adds	r5, #8
 80070c4:	2d0c      	cmp	r5, #12
 80070c6:	bf38      	it	cc
 80070c8:	250c      	movcc	r5, #12
 80070ca:	4629      	mov	r1, r5
 80070cc:	4638      	mov	r0, r7
 80070ce:	f7ff ffa5 	bl	800701c <sbrk_aligned>
 80070d2:	3001      	adds	r0, #1
 80070d4:	d02b      	beq.n	800712e <_malloc_r+0xd2>
 80070d6:	6823      	ldr	r3, [r4, #0]
 80070d8:	442b      	add	r3, r5
 80070da:	6023      	str	r3, [r4, #0]
 80070dc:	e00e      	b.n	80070fc <_malloc_r+0xa0>
 80070de:	6822      	ldr	r2, [r4, #0]
 80070e0:	1b52      	subs	r2, r2, r5
 80070e2:	d41e      	bmi.n	8007122 <_malloc_r+0xc6>
 80070e4:	2a0b      	cmp	r2, #11
 80070e6:	d916      	bls.n	8007116 <_malloc_r+0xba>
 80070e8:	1961      	adds	r1, r4, r5
 80070ea:	42a3      	cmp	r3, r4
 80070ec:	6025      	str	r5, [r4, #0]
 80070ee:	bf18      	it	ne
 80070f0:	6059      	strne	r1, [r3, #4]
 80070f2:	6863      	ldr	r3, [r4, #4]
 80070f4:	bf08      	it	eq
 80070f6:	6031      	streq	r1, [r6, #0]
 80070f8:	5162      	str	r2, [r4, r5]
 80070fa:	604b      	str	r3, [r1, #4]
 80070fc:	4638      	mov	r0, r7
 80070fe:	f104 060b 	add.w	r6, r4, #11
 8007102:	f000 fbbd 	bl	8007880 <__malloc_unlock>
 8007106:	f026 0607 	bic.w	r6, r6, #7
 800710a:	1d23      	adds	r3, r4, #4
 800710c:	1af2      	subs	r2, r6, r3
 800710e:	d0b6      	beq.n	800707e <_malloc_r+0x22>
 8007110:	1b9b      	subs	r3, r3, r6
 8007112:	50a3      	str	r3, [r4, r2]
 8007114:	e7b3      	b.n	800707e <_malloc_r+0x22>
 8007116:	6862      	ldr	r2, [r4, #4]
 8007118:	42a3      	cmp	r3, r4
 800711a:	bf0c      	ite	eq
 800711c:	6032      	streq	r2, [r6, #0]
 800711e:	605a      	strne	r2, [r3, #4]
 8007120:	e7ec      	b.n	80070fc <_malloc_r+0xa0>
 8007122:	4623      	mov	r3, r4
 8007124:	6864      	ldr	r4, [r4, #4]
 8007126:	e7b2      	b.n	800708e <_malloc_r+0x32>
 8007128:	4634      	mov	r4, r6
 800712a:	6876      	ldr	r6, [r6, #4]
 800712c:	e7b9      	b.n	80070a2 <_malloc_r+0x46>
 800712e:	230c      	movs	r3, #12
 8007130:	603b      	str	r3, [r7, #0]
 8007132:	4638      	mov	r0, r7
 8007134:	f000 fba4 	bl	8007880 <__malloc_unlock>
 8007138:	e7a1      	b.n	800707e <_malloc_r+0x22>
 800713a:	6025      	str	r5, [r4, #0]
 800713c:	e7de      	b.n	80070fc <_malloc_r+0xa0>
 800713e:	bf00      	nop
 8007140:	200008e4 	.word	0x200008e4

08007144 <__sfputc_r>:
 8007144:	6893      	ldr	r3, [r2, #8]
 8007146:	3b01      	subs	r3, #1
 8007148:	2b00      	cmp	r3, #0
 800714a:	b410      	push	{r4}
 800714c:	6093      	str	r3, [r2, #8]
 800714e:	da08      	bge.n	8007162 <__sfputc_r+0x1e>
 8007150:	6994      	ldr	r4, [r2, #24]
 8007152:	42a3      	cmp	r3, r4
 8007154:	db01      	blt.n	800715a <__sfputc_r+0x16>
 8007156:	290a      	cmp	r1, #10
 8007158:	d103      	bne.n	8007162 <__sfputc_r+0x1e>
 800715a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800715e:	f7ff bc29 	b.w	80069b4 <__swbuf_r>
 8007162:	6813      	ldr	r3, [r2, #0]
 8007164:	1c58      	adds	r0, r3, #1
 8007166:	6010      	str	r0, [r2, #0]
 8007168:	7019      	strb	r1, [r3, #0]
 800716a:	4608      	mov	r0, r1
 800716c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007170:	4770      	bx	lr

08007172 <__sfputs_r>:
 8007172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007174:	4606      	mov	r6, r0
 8007176:	460f      	mov	r7, r1
 8007178:	4614      	mov	r4, r2
 800717a:	18d5      	adds	r5, r2, r3
 800717c:	42ac      	cmp	r4, r5
 800717e:	d101      	bne.n	8007184 <__sfputs_r+0x12>
 8007180:	2000      	movs	r0, #0
 8007182:	e007      	b.n	8007194 <__sfputs_r+0x22>
 8007184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007188:	463a      	mov	r2, r7
 800718a:	4630      	mov	r0, r6
 800718c:	f7ff ffda 	bl	8007144 <__sfputc_r>
 8007190:	1c43      	adds	r3, r0, #1
 8007192:	d1f3      	bne.n	800717c <__sfputs_r+0xa>
 8007194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007198 <_vfiprintf_r>:
 8007198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719c:	460d      	mov	r5, r1
 800719e:	b09d      	sub	sp, #116	; 0x74
 80071a0:	4614      	mov	r4, r2
 80071a2:	4698      	mov	r8, r3
 80071a4:	4606      	mov	r6, r0
 80071a6:	b118      	cbz	r0, 80071b0 <_vfiprintf_r+0x18>
 80071a8:	6983      	ldr	r3, [r0, #24]
 80071aa:	b90b      	cbnz	r3, 80071b0 <_vfiprintf_r+0x18>
 80071ac:	f7ff fddc 	bl	8006d68 <__sinit>
 80071b0:	4b89      	ldr	r3, [pc, #548]	; (80073d8 <_vfiprintf_r+0x240>)
 80071b2:	429d      	cmp	r5, r3
 80071b4:	d11b      	bne.n	80071ee <_vfiprintf_r+0x56>
 80071b6:	6875      	ldr	r5, [r6, #4]
 80071b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071ba:	07d9      	lsls	r1, r3, #31
 80071bc:	d405      	bmi.n	80071ca <_vfiprintf_r+0x32>
 80071be:	89ab      	ldrh	r3, [r5, #12]
 80071c0:	059a      	lsls	r2, r3, #22
 80071c2:	d402      	bmi.n	80071ca <_vfiprintf_r+0x32>
 80071c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071c6:	f7ff fe6d 	bl	8006ea4 <__retarget_lock_acquire_recursive>
 80071ca:	89ab      	ldrh	r3, [r5, #12]
 80071cc:	071b      	lsls	r3, r3, #28
 80071ce:	d501      	bpl.n	80071d4 <_vfiprintf_r+0x3c>
 80071d0:	692b      	ldr	r3, [r5, #16]
 80071d2:	b9eb      	cbnz	r3, 8007210 <_vfiprintf_r+0x78>
 80071d4:	4629      	mov	r1, r5
 80071d6:	4630      	mov	r0, r6
 80071d8:	f7ff fc3e 	bl	8006a58 <__swsetup_r>
 80071dc:	b1c0      	cbz	r0, 8007210 <_vfiprintf_r+0x78>
 80071de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071e0:	07dc      	lsls	r4, r3, #31
 80071e2:	d50e      	bpl.n	8007202 <_vfiprintf_r+0x6a>
 80071e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071e8:	b01d      	add	sp, #116	; 0x74
 80071ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ee:	4b7b      	ldr	r3, [pc, #492]	; (80073dc <_vfiprintf_r+0x244>)
 80071f0:	429d      	cmp	r5, r3
 80071f2:	d101      	bne.n	80071f8 <_vfiprintf_r+0x60>
 80071f4:	68b5      	ldr	r5, [r6, #8]
 80071f6:	e7df      	b.n	80071b8 <_vfiprintf_r+0x20>
 80071f8:	4b79      	ldr	r3, [pc, #484]	; (80073e0 <_vfiprintf_r+0x248>)
 80071fa:	429d      	cmp	r5, r3
 80071fc:	bf08      	it	eq
 80071fe:	68f5      	ldreq	r5, [r6, #12]
 8007200:	e7da      	b.n	80071b8 <_vfiprintf_r+0x20>
 8007202:	89ab      	ldrh	r3, [r5, #12]
 8007204:	0598      	lsls	r0, r3, #22
 8007206:	d4ed      	bmi.n	80071e4 <_vfiprintf_r+0x4c>
 8007208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800720a:	f7ff fe4c 	bl	8006ea6 <__retarget_lock_release_recursive>
 800720e:	e7e9      	b.n	80071e4 <_vfiprintf_r+0x4c>
 8007210:	2300      	movs	r3, #0
 8007212:	9309      	str	r3, [sp, #36]	; 0x24
 8007214:	2320      	movs	r3, #32
 8007216:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800721a:	f8cd 800c 	str.w	r8, [sp, #12]
 800721e:	2330      	movs	r3, #48	; 0x30
 8007220:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80073e4 <_vfiprintf_r+0x24c>
 8007224:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007228:	f04f 0901 	mov.w	r9, #1
 800722c:	4623      	mov	r3, r4
 800722e:	469a      	mov	sl, r3
 8007230:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007234:	b10a      	cbz	r2, 800723a <_vfiprintf_r+0xa2>
 8007236:	2a25      	cmp	r2, #37	; 0x25
 8007238:	d1f9      	bne.n	800722e <_vfiprintf_r+0x96>
 800723a:	ebba 0b04 	subs.w	fp, sl, r4
 800723e:	d00b      	beq.n	8007258 <_vfiprintf_r+0xc0>
 8007240:	465b      	mov	r3, fp
 8007242:	4622      	mov	r2, r4
 8007244:	4629      	mov	r1, r5
 8007246:	4630      	mov	r0, r6
 8007248:	f7ff ff93 	bl	8007172 <__sfputs_r>
 800724c:	3001      	adds	r0, #1
 800724e:	f000 80aa 	beq.w	80073a6 <_vfiprintf_r+0x20e>
 8007252:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007254:	445a      	add	r2, fp
 8007256:	9209      	str	r2, [sp, #36]	; 0x24
 8007258:	f89a 3000 	ldrb.w	r3, [sl]
 800725c:	2b00      	cmp	r3, #0
 800725e:	f000 80a2 	beq.w	80073a6 <_vfiprintf_r+0x20e>
 8007262:	2300      	movs	r3, #0
 8007264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800726c:	f10a 0a01 	add.w	sl, sl, #1
 8007270:	9304      	str	r3, [sp, #16]
 8007272:	9307      	str	r3, [sp, #28]
 8007274:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007278:	931a      	str	r3, [sp, #104]	; 0x68
 800727a:	4654      	mov	r4, sl
 800727c:	2205      	movs	r2, #5
 800727e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007282:	4858      	ldr	r0, [pc, #352]	; (80073e4 <_vfiprintf_r+0x24c>)
 8007284:	f7f8 ffa4 	bl	80001d0 <memchr>
 8007288:	9a04      	ldr	r2, [sp, #16]
 800728a:	b9d8      	cbnz	r0, 80072c4 <_vfiprintf_r+0x12c>
 800728c:	06d1      	lsls	r1, r2, #27
 800728e:	bf44      	itt	mi
 8007290:	2320      	movmi	r3, #32
 8007292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007296:	0713      	lsls	r3, r2, #28
 8007298:	bf44      	itt	mi
 800729a:	232b      	movmi	r3, #43	; 0x2b
 800729c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072a0:	f89a 3000 	ldrb.w	r3, [sl]
 80072a4:	2b2a      	cmp	r3, #42	; 0x2a
 80072a6:	d015      	beq.n	80072d4 <_vfiprintf_r+0x13c>
 80072a8:	9a07      	ldr	r2, [sp, #28]
 80072aa:	4654      	mov	r4, sl
 80072ac:	2000      	movs	r0, #0
 80072ae:	f04f 0c0a 	mov.w	ip, #10
 80072b2:	4621      	mov	r1, r4
 80072b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072b8:	3b30      	subs	r3, #48	; 0x30
 80072ba:	2b09      	cmp	r3, #9
 80072bc:	d94e      	bls.n	800735c <_vfiprintf_r+0x1c4>
 80072be:	b1b0      	cbz	r0, 80072ee <_vfiprintf_r+0x156>
 80072c0:	9207      	str	r2, [sp, #28]
 80072c2:	e014      	b.n	80072ee <_vfiprintf_r+0x156>
 80072c4:	eba0 0308 	sub.w	r3, r0, r8
 80072c8:	fa09 f303 	lsl.w	r3, r9, r3
 80072cc:	4313      	orrs	r3, r2
 80072ce:	9304      	str	r3, [sp, #16]
 80072d0:	46a2      	mov	sl, r4
 80072d2:	e7d2      	b.n	800727a <_vfiprintf_r+0xe2>
 80072d4:	9b03      	ldr	r3, [sp, #12]
 80072d6:	1d19      	adds	r1, r3, #4
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	9103      	str	r1, [sp, #12]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	bfbb      	ittet	lt
 80072e0:	425b      	neglt	r3, r3
 80072e2:	f042 0202 	orrlt.w	r2, r2, #2
 80072e6:	9307      	strge	r3, [sp, #28]
 80072e8:	9307      	strlt	r3, [sp, #28]
 80072ea:	bfb8      	it	lt
 80072ec:	9204      	strlt	r2, [sp, #16]
 80072ee:	7823      	ldrb	r3, [r4, #0]
 80072f0:	2b2e      	cmp	r3, #46	; 0x2e
 80072f2:	d10c      	bne.n	800730e <_vfiprintf_r+0x176>
 80072f4:	7863      	ldrb	r3, [r4, #1]
 80072f6:	2b2a      	cmp	r3, #42	; 0x2a
 80072f8:	d135      	bne.n	8007366 <_vfiprintf_r+0x1ce>
 80072fa:	9b03      	ldr	r3, [sp, #12]
 80072fc:	1d1a      	adds	r2, r3, #4
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	9203      	str	r2, [sp, #12]
 8007302:	2b00      	cmp	r3, #0
 8007304:	bfb8      	it	lt
 8007306:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800730a:	3402      	adds	r4, #2
 800730c:	9305      	str	r3, [sp, #20]
 800730e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80073f4 <_vfiprintf_r+0x25c>
 8007312:	7821      	ldrb	r1, [r4, #0]
 8007314:	2203      	movs	r2, #3
 8007316:	4650      	mov	r0, sl
 8007318:	f7f8 ff5a 	bl	80001d0 <memchr>
 800731c:	b140      	cbz	r0, 8007330 <_vfiprintf_r+0x198>
 800731e:	2340      	movs	r3, #64	; 0x40
 8007320:	eba0 000a 	sub.w	r0, r0, sl
 8007324:	fa03 f000 	lsl.w	r0, r3, r0
 8007328:	9b04      	ldr	r3, [sp, #16]
 800732a:	4303      	orrs	r3, r0
 800732c:	3401      	adds	r4, #1
 800732e:	9304      	str	r3, [sp, #16]
 8007330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007334:	482c      	ldr	r0, [pc, #176]	; (80073e8 <_vfiprintf_r+0x250>)
 8007336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800733a:	2206      	movs	r2, #6
 800733c:	f7f8 ff48 	bl	80001d0 <memchr>
 8007340:	2800      	cmp	r0, #0
 8007342:	d03f      	beq.n	80073c4 <_vfiprintf_r+0x22c>
 8007344:	4b29      	ldr	r3, [pc, #164]	; (80073ec <_vfiprintf_r+0x254>)
 8007346:	bb1b      	cbnz	r3, 8007390 <_vfiprintf_r+0x1f8>
 8007348:	9b03      	ldr	r3, [sp, #12]
 800734a:	3307      	adds	r3, #7
 800734c:	f023 0307 	bic.w	r3, r3, #7
 8007350:	3308      	adds	r3, #8
 8007352:	9303      	str	r3, [sp, #12]
 8007354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007356:	443b      	add	r3, r7
 8007358:	9309      	str	r3, [sp, #36]	; 0x24
 800735a:	e767      	b.n	800722c <_vfiprintf_r+0x94>
 800735c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007360:	460c      	mov	r4, r1
 8007362:	2001      	movs	r0, #1
 8007364:	e7a5      	b.n	80072b2 <_vfiprintf_r+0x11a>
 8007366:	2300      	movs	r3, #0
 8007368:	3401      	adds	r4, #1
 800736a:	9305      	str	r3, [sp, #20]
 800736c:	4619      	mov	r1, r3
 800736e:	f04f 0c0a 	mov.w	ip, #10
 8007372:	4620      	mov	r0, r4
 8007374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007378:	3a30      	subs	r2, #48	; 0x30
 800737a:	2a09      	cmp	r2, #9
 800737c:	d903      	bls.n	8007386 <_vfiprintf_r+0x1ee>
 800737e:	2b00      	cmp	r3, #0
 8007380:	d0c5      	beq.n	800730e <_vfiprintf_r+0x176>
 8007382:	9105      	str	r1, [sp, #20]
 8007384:	e7c3      	b.n	800730e <_vfiprintf_r+0x176>
 8007386:	fb0c 2101 	mla	r1, ip, r1, r2
 800738a:	4604      	mov	r4, r0
 800738c:	2301      	movs	r3, #1
 800738e:	e7f0      	b.n	8007372 <_vfiprintf_r+0x1da>
 8007390:	ab03      	add	r3, sp, #12
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	462a      	mov	r2, r5
 8007396:	4b16      	ldr	r3, [pc, #88]	; (80073f0 <_vfiprintf_r+0x258>)
 8007398:	a904      	add	r1, sp, #16
 800739a:	4630      	mov	r0, r6
 800739c:	f3af 8000 	nop.w
 80073a0:	4607      	mov	r7, r0
 80073a2:	1c78      	adds	r0, r7, #1
 80073a4:	d1d6      	bne.n	8007354 <_vfiprintf_r+0x1bc>
 80073a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073a8:	07d9      	lsls	r1, r3, #31
 80073aa:	d405      	bmi.n	80073b8 <_vfiprintf_r+0x220>
 80073ac:	89ab      	ldrh	r3, [r5, #12]
 80073ae:	059a      	lsls	r2, r3, #22
 80073b0:	d402      	bmi.n	80073b8 <_vfiprintf_r+0x220>
 80073b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073b4:	f7ff fd77 	bl	8006ea6 <__retarget_lock_release_recursive>
 80073b8:	89ab      	ldrh	r3, [r5, #12]
 80073ba:	065b      	lsls	r3, r3, #25
 80073bc:	f53f af12 	bmi.w	80071e4 <_vfiprintf_r+0x4c>
 80073c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073c2:	e711      	b.n	80071e8 <_vfiprintf_r+0x50>
 80073c4:	ab03      	add	r3, sp, #12
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	462a      	mov	r2, r5
 80073ca:	4b09      	ldr	r3, [pc, #36]	; (80073f0 <_vfiprintf_r+0x258>)
 80073cc:	a904      	add	r1, sp, #16
 80073ce:	4630      	mov	r0, r6
 80073d0:	f000 f880 	bl	80074d4 <_printf_i>
 80073d4:	e7e4      	b.n	80073a0 <_vfiprintf_r+0x208>
 80073d6:	bf00      	nop
 80073d8:	08007d48 	.word	0x08007d48
 80073dc:	08007d68 	.word	0x08007d68
 80073e0:	08007d28 	.word	0x08007d28
 80073e4:	08007d88 	.word	0x08007d88
 80073e8:	08007d92 	.word	0x08007d92
 80073ec:	00000000 	.word	0x00000000
 80073f0:	08007173 	.word	0x08007173
 80073f4:	08007d8e 	.word	0x08007d8e

080073f8 <_printf_common>:
 80073f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073fc:	4616      	mov	r6, r2
 80073fe:	4699      	mov	r9, r3
 8007400:	688a      	ldr	r2, [r1, #8]
 8007402:	690b      	ldr	r3, [r1, #16]
 8007404:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007408:	4293      	cmp	r3, r2
 800740a:	bfb8      	it	lt
 800740c:	4613      	movlt	r3, r2
 800740e:	6033      	str	r3, [r6, #0]
 8007410:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007414:	4607      	mov	r7, r0
 8007416:	460c      	mov	r4, r1
 8007418:	b10a      	cbz	r2, 800741e <_printf_common+0x26>
 800741a:	3301      	adds	r3, #1
 800741c:	6033      	str	r3, [r6, #0]
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	0699      	lsls	r1, r3, #26
 8007422:	bf42      	ittt	mi
 8007424:	6833      	ldrmi	r3, [r6, #0]
 8007426:	3302      	addmi	r3, #2
 8007428:	6033      	strmi	r3, [r6, #0]
 800742a:	6825      	ldr	r5, [r4, #0]
 800742c:	f015 0506 	ands.w	r5, r5, #6
 8007430:	d106      	bne.n	8007440 <_printf_common+0x48>
 8007432:	f104 0a19 	add.w	sl, r4, #25
 8007436:	68e3      	ldr	r3, [r4, #12]
 8007438:	6832      	ldr	r2, [r6, #0]
 800743a:	1a9b      	subs	r3, r3, r2
 800743c:	42ab      	cmp	r3, r5
 800743e:	dc26      	bgt.n	800748e <_printf_common+0x96>
 8007440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007444:	1e13      	subs	r3, r2, #0
 8007446:	6822      	ldr	r2, [r4, #0]
 8007448:	bf18      	it	ne
 800744a:	2301      	movne	r3, #1
 800744c:	0692      	lsls	r2, r2, #26
 800744e:	d42b      	bmi.n	80074a8 <_printf_common+0xb0>
 8007450:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007454:	4649      	mov	r1, r9
 8007456:	4638      	mov	r0, r7
 8007458:	47c0      	blx	r8
 800745a:	3001      	adds	r0, #1
 800745c:	d01e      	beq.n	800749c <_printf_common+0xa4>
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	68e5      	ldr	r5, [r4, #12]
 8007462:	6832      	ldr	r2, [r6, #0]
 8007464:	f003 0306 	and.w	r3, r3, #6
 8007468:	2b04      	cmp	r3, #4
 800746a:	bf08      	it	eq
 800746c:	1aad      	subeq	r5, r5, r2
 800746e:	68a3      	ldr	r3, [r4, #8]
 8007470:	6922      	ldr	r2, [r4, #16]
 8007472:	bf0c      	ite	eq
 8007474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007478:	2500      	movne	r5, #0
 800747a:	4293      	cmp	r3, r2
 800747c:	bfc4      	itt	gt
 800747e:	1a9b      	subgt	r3, r3, r2
 8007480:	18ed      	addgt	r5, r5, r3
 8007482:	2600      	movs	r6, #0
 8007484:	341a      	adds	r4, #26
 8007486:	42b5      	cmp	r5, r6
 8007488:	d11a      	bne.n	80074c0 <_printf_common+0xc8>
 800748a:	2000      	movs	r0, #0
 800748c:	e008      	b.n	80074a0 <_printf_common+0xa8>
 800748e:	2301      	movs	r3, #1
 8007490:	4652      	mov	r2, sl
 8007492:	4649      	mov	r1, r9
 8007494:	4638      	mov	r0, r7
 8007496:	47c0      	blx	r8
 8007498:	3001      	adds	r0, #1
 800749a:	d103      	bne.n	80074a4 <_printf_common+0xac>
 800749c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a4:	3501      	adds	r5, #1
 80074a6:	e7c6      	b.n	8007436 <_printf_common+0x3e>
 80074a8:	18e1      	adds	r1, r4, r3
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	2030      	movs	r0, #48	; 0x30
 80074ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074b2:	4422      	add	r2, r4
 80074b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074bc:	3302      	adds	r3, #2
 80074be:	e7c7      	b.n	8007450 <_printf_common+0x58>
 80074c0:	2301      	movs	r3, #1
 80074c2:	4622      	mov	r2, r4
 80074c4:	4649      	mov	r1, r9
 80074c6:	4638      	mov	r0, r7
 80074c8:	47c0      	blx	r8
 80074ca:	3001      	adds	r0, #1
 80074cc:	d0e6      	beq.n	800749c <_printf_common+0xa4>
 80074ce:	3601      	adds	r6, #1
 80074d0:	e7d9      	b.n	8007486 <_printf_common+0x8e>
	...

080074d4 <_printf_i>:
 80074d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074d8:	7e0f      	ldrb	r7, [r1, #24]
 80074da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074dc:	2f78      	cmp	r7, #120	; 0x78
 80074de:	4691      	mov	r9, r2
 80074e0:	4680      	mov	r8, r0
 80074e2:	460c      	mov	r4, r1
 80074e4:	469a      	mov	sl, r3
 80074e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074ea:	d807      	bhi.n	80074fc <_printf_i+0x28>
 80074ec:	2f62      	cmp	r7, #98	; 0x62
 80074ee:	d80a      	bhi.n	8007506 <_printf_i+0x32>
 80074f0:	2f00      	cmp	r7, #0
 80074f2:	f000 80d8 	beq.w	80076a6 <_printf_i+0x1d2>
 80074f6:	2f58      	cmp	r7, #88	; 0x58
 80074f8:	f000 80a3 	beq.w	8007642 <_printf_i+0x16e>
 80074fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007500:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007504:	e03a      	b.n	800757c <_printf_i+0xa8>
 8007506:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800750a:	2b15      	cmp	r3, #21
 800750c:	d8f6      	bhi.n	80074fc <_printf_i+0x28>
 800750e:	a101      	add	r1, pc, #4	; (adr r1, 8007514 <_printf_i+0x40>)
 8007510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007514:	0800756d 	.word	0x0800756d
 8007518:	08007581 	.word	0x08007581
 800751c:	080074fd 	.word	0x080074fd
 8007520:	080074fd 	.word	0x080074fd
 8007524:	080074fd 	.word	0x080074fd
 8007528:	080074fd 	.word	0x080074fd
 800752c:	08007581 	.word	0x08007581
 8007530:	080074fd 	.word	0x080074fd
 8007534:	080074fd 	.word	0x080074fd
 8007538:	080074fd 	.word	0x080074fd
 800753c:	080074fd 	.word	0x080074fd
 8007540:	0800768d 	.word	0x0800768d
 8007544:	080075b1 	.word	0x080075b1
 8007548:	0800766f 	.word	0x0800766f
 800754c:	080074fd 	.word	0x080074fd
 8007550:	080074fd 	.word	0x080074fd
 8007554:	080076af 	.word	0x080076af
 8007558:	080074fd 	.word	0x080074fd
 800755c:	080075b1 	.word	0x080075b1
 8007560:	080074fd 	.word	0x080074fd
 8007564:	080074fd 	.word	0x080074fd
 8007568:	08007677 	.word	0x08007677
 800756c:	682b      	ldr	r3, [r5, #0]
 800756e:	1d1a      	adds	r2, r3, #4
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	602a      	str	r2, [r5, #0]
 8007574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800757c:	2301      	movs	r3, #1
 800757e:	e0a3      	b.n	80076c8 <_printf_i+0x1f4>
 8007580:	6820      	ldr	r0, [r4, #0]
 8007582:	6829      	ldr	r1, [r5, #0]
 8007584:	0606      	lsls	r6, r0, #24
 8007586:	f101 0304 	add.w	r3, r1, #4
 800758a:	d50a      	bpl.n	80075a2 <_printf_i+0xce>
 800758c:	680e      	ldr	r6, [r1, #0]
 800758e:	602b      	str	r3, [r5, #0]
 8007590:	2e00      	cmp	r6, #0
 8007592:	da03      	bge.n	800759c <_printf_i+0xc8>
 8007594:	232d      	movs	r3, #45	; 0x2d
 8007596:	4276      	negs	r6, r6
 8007598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800759c:	485e      	ldr	r0, [pc, #376]	; (8007718 <_printf_i+0x244>)
 800759e:	230a      	movs	r3, #10
 80075a0:	e019      	b.n	80075d6 <_printf_i+0x102>
 80075a2:	680e      	ldr	r6, [r1, #0]
 80075a4:	602b      	str	r3, [r5, #0]
 80075a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80075aa:	bf18      	it	ne
 80075ac:	b236      	sxthne	r6, r6
 80075ae:	e7ef      	b.n	8007590 <_printf_i+0xbc>
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	6820      	ldr	r0, [r4, #0]
 80075b4:	1d19      	adds	r1, r3, #4
 80075b6:	6029      	str	r1, [r5, #0]
 80075b8:	0601      	lsls	r1, r0, #24
 80075ba:	d501      	bpl.n	80075c0 <_printf_i+0xec>
 80075bc:	681e      	ldr	r6, [r3, #0]
 80075be:	e002      	b.n	80075c6 <_printf_i+0xf2>
 80075c0:	0646      	lsls	r6, r0, #25
 80075c2:	d5fb      	bpl.n	80075bc <_printf_i+0xe8>
 80075c4:	881e      	ldrh	r6, [r3, #0]
 80075c6:	4854      	ldr	r0, [pc, #336]	; (8007718 <_printf_i+0x244>)
 80075c8:	2f6f      	cmp	r7, #111	; 0x6f
 80075ca:	bf0c      	ite	eq
 80075cc:	2308      	moveq	r3, #8
 80075ce:	230a      	movne	r3, #10
 80075d0:	2100      	movs	r1, #0
 80075d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075d6:	6865      	ldr	r5, [r4, #4]
 80075d8:	60a5      	str	r5, [r4, #8]
 80075da:	2d00      	cmp	r5, #0
 80075dc:	bfa2      	ittt	ge
 80075de:	6821      	ldrge	r1, [r4, #0]
 80075e0:	f021 0104 	bicge.w	r1, r1, #4
 80075e4:	6021      	strge	r1, [r4, #0]
 80075e6:	b90e      	cbnz	r6, 80075ec <_printf_i+0x118>
 80075e8:	2d00      	cmp	r5, #0
 80075ea:	d04d      	beq.n	8007688 <_printf_i+0x1b4>
 80075ec:	4615      	mov	r5, r2
 80075ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80075f2:	fb03 6711 	mls	r7, r3, r1, r6
 80075f6:	5dc7      	ldrb	r7, [r0, r7]
 80075f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075fc:	4637      	mov	r7, r6
 80075fe:	42bb      	cmp	r3, r7
 8007600:	460e      	mov	r6, r1
 8007602:	d9f4      	bls.n	80075ee <_printf_i+0x11a>
 8007604:	2b08      	cmp	r3, #8
 8007606:	d10b      	bne.n	8007620 <_printf_i+0x14c>
 8007608:	6823      	ldr	r3, [r4, #0]
 800760a:	07de      	lsls	r6, r3, #31
 800760c:	d508      	bpl.n	8007620 <_printf_i+0x14c>
 800760e:	6923      	ldr	r3, [r4, #16]
 8007610:	6861      	ldr	r1, [r4, #4]
 8007612:	4299      	cmp	r1, r3
 8007614:	bfde      	ittt	le
 8007616:	2330      	movle	r3, #48	; 0x30
 8007618:	f805 3c01 	strble.w	r3, [r5, #-1]
 800761c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007620:	1b52      	subs	r2, r2, r5
 8007622:	6122      	str	r2, [r4, #16]
 8007624:	f8cd a000 	str.w	sl, [sp]
 8007628:	464b      	mov	r3, r9
 800762a:	aa03      	add	r2, sp, #12
 800762c:	4621      	mov	r1, r4
 800762e:	4640      	mov	r0, r8
 8007630:	f7ff fee2 	bl	80073f8 <_printf_common>
 8007634:	3001      	adds	r0, #1
 8007636:	d14c      	bne.n	80076d2 <_printf_i+0x1fe>
 8007638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800763c:	b004      	add	sp, #16
 800763e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007642:	4835      	ldr	r0, [pc, #212]	; (8007718 <_printf_i+0x244>)
 8007644:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007648:	6829      	ldr	r1, [r5, #0]
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007650:	6029      	str	r1, [r5, #0]
 8007652:	061d      	lsls	r5, r3, #24
 8007654:	d514      	bpl.n	8007680 <_printf_i+0x1ac>
 8007656:	07df      	lsls	r7, r3, #31
 8007658:	bf44      	itt	mi
 800765a:	f043 0320 	orrmi.w	r3, r3, #32
 800765e:	6023      	strmi	r3, [r4, #0]
 8007660:	b91e      	cbnz	r6, 800766a <_printf_i+0x196>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	f023 0320 	bic.w	r3, r3, #32
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	2310      	movs	r3, #16
 800766c:	e7b0      	b.n	80075d0 <_printf_i+0xfc>
 800766e:	6823      	ldr	r3, [r4, #0]
 8007670:	f043 0320 	orr.w	r3, r3, #32
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	2378      	movs	r3, #120	; 0x78
 8007678:	4828      	ldr	r0, [pc, #160]	; (800771c <_printf_i+0x248>)
 800767a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800767e:	e7e3      	b.n	8007648 <_printf_i+0x174>
 8007680:	0659      	lsls	r1, r3, #25
 8007682:	bf48      	it	mi
 8007684:	b2b6      	uxthmi	r6, r6
 8007686:	e7e6      	b.n	8007656 <_printf_i+0x182>
 8007688:	4615      	mov	r5, r2
 800768a:	e7bb      	b.n	8007604 <_printf_i+0x130>
 800768c:	682b      	ldr	r3, [r5, #0]
 800768e:	6826      	ldr	r6, [r4, #0]
 8007690:	6961      	ldr	r1, [r4, #20]
 8007692:	1d18      	adds	r0, r3, #4
 8007694:	6028      	str	r0, [r5, #0]
 8007696:	0635      	lsls	r5, r6, #24
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	d501      	bpl.n	80076a0 <_printf_i+0x1cc>
 800769c:	6019      	str	r1, [r3, #0]
 800769e:	e002      	b.n	80076a6 <_printf_i+0x1d2>
 80076a0:	0670      	lsls	r0, r6, #25
 80076a2:	d5fb      	bpl.n	800769c <_printf_i+0x1c8>
 80076a4:	8019      	strh	r1, [r3, #0]
 80076a6:	2300      	movs	r3, #0
 80076a8:	6123      	str	r3, [r4, #16]
 80076aa:	4615      	mov	r5, r2
 80076ac:	e7ba      	b.n	8007624 <_printf_i+0x150>
 80076ae:	682b      	ldr	r3, [r5, #0]
 80076b0:	1d1a      	adds	r2, r3, #4
 80076b2:	602a      	str	r2, [r5, #0]
 80076b4:	681d      	ldr	r5, [r3, #0]
 80076b6:	6862      	ldr	r2, [r4, #4]
 80076b8:	2100      	movs	r1, #0
 80076ba:	4628      	mov	r0, r5
 80076bc:	f7f8 fd88 	bl	80001d0 <memchr>
 80076c0:	b108      	cbz	r0, 80076c6 <_printf_i+0x1f2>
 80076c2:	1b40      	subs	r0, r0, r5
 80076c4:	6060      	str	r0, [r4, #4]
 80076c6:	6863      	ldr	r3, [r4, #4]
 80076c8:	6123      	str	r3, [r4, #16]
 80076ca:	2300      	movs	r3, #0
 80076cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076d0:	e7a8      	b.n	8007624 <_printf_i+0x150>
 80076d2:	6923      	ldr	r3, [r4, #16]
 80076d4:	462a      	mov	r2, r5
 80076d6:	4649      	mov	r1, r9
 80076d8:	4640      	mov	r0, r8
 80076da:	47d0      	blx	sl
 80076dc:	3001      	adds	r0, #1
 80076de:	d0ab      	beq.n	8007638 <_printf_i+0x164>
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	079b      	lsls	r3, r3, #30
 80076e4:	d413      	bmi.n	800770e <_printf_i+0x23a>
 80076e6:	68e0      	ldr	r0, [r4, #12]
 80076e8:	9b03      	ldr	r3, [sp, #12]
 80076ea:	4298      	cmp	r0, r3
 80076ec:	bfb8      	it	lt
 80076ee:	4618      	movlt	r0, r3
 80076f0:	e7a4      	b.n	800763c <_printf_i+0x168>
 80076f2:	2301      	movs	r3, #1
 80076f4:	4632      	mov	r2, r6
 80076f6:	4649      	mov	r1, r9
 80076f8:	4640      	mov	r0, r8
 80076fa:	47d0      	blx	sl
 80076fc:	3001      	adds	r0, #1
 80076fe:	d09b      	beq.n	8007638 <_printf_i+0x164>
 8007700:	3501      	adds	r5, #1
 8007702:	68e3      	ldr	r3, [r4, #12]
 8007704:	9903      	ldr	r1, [sp, #12]
 8007706:	1a5b      	subs	r3, r3, r1
 8007708:	42ab      	cmp	r3, r5
 800770a:	dcf2      	bgt.n	80076f2 <_printf_i+0x21e>
 800770c:	e7eb      	b.n	80076e6 <_printf_i+0x212>
 800770e:	2500      	movs	r5, #0
 8007710:	f104 0619 	add.w	r6, r4, #25
 8007714:	e7f5      	b.n	8007702 <_printf_i+0x22e>
 8007716:	bf00      	nop
 8007718:	08007d99 	.word	0x08007d99
 800771c:	08007daa 	.word	0x08007daa

08007720 <_sbrk_r>:
 8007720:	b538      	push	{r3, r4, r5, lr}
 8007722:	4d06      	ldr	r5, [pc, #24]	; (800773c <_sbrk_r+0x1c>)
 8007724:	2300      	movs	r3, #0
 8007726:	4604      	mov	r4, r0
 8007728:	4608      	mov	r0, r1
 800772a:	602b      	str	r3, [r5, #0]
 800772c:	f7f9 fef0 	bl	8001510 <_sbrk>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	d102      	bne.n	800773a <_sbrk_r+0x1a>
 8007734:	682b      	ldr	r3, [r5, #0]
 8007736:	b103      	cbz	r3, 800773a <_sbrk_r+0x1a>
 8007738:	6023      	str	r3, [r4, #0]
 800773a:	bd38      	pop	{r3, r4, r5, pc}
 800773c:	200008ec 	.word	0x200008ec

08007740 <__sread>:
 8007740:	b510      	push	{r4, lr}
 8007742:	460c      	mov	r4, r1
 8007744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007748:	f000 f8a0 	bl	800788c <_read_r>
 800774c:	2800      	cmp	r0, #0
 800774e:	bfab      	itete	ge
 8007750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007752:	89a3      	ldrhlt	r3, [r4, #12]
 8007754:	181b      	addge	r3, r3, r0
 8007756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800775a:	bfac      	ite	ge
 800775c:	6563      	strge	r3, [r4, #84]	; 0x54
 800775e:	81a3      	strhlt	r3, [r4, #12]
 8007760:	bd10      	pop	{r4, pc}

08007762 <__swrite>:
 8007762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007766:	461f      	mov	r7, r3
 8007768:	898b      	ldrh	r3, [r1, #12]
 800776a:	05db      	lsls	r3, r3, #23
 800776c:	4605      	mov	r5, r0
 800776e:	460c      	mov	r4, r1
 8007770:	4616      	mov	r6, r2
 8007772:	d505      	bpl.n	8007780 <__swrite+0x1e>
 8007774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007778:	2302      	movs	r3, #2
 800777a:	2200      	movs	r2, #0
 800777c:	f000 f868 	bl	8007850 <_lseek_r>
 8007780:	89a3      	ldrh	r3, [r4, #12]
 8007782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800778a:	81a3      	strh	r3, [r4, #12]
 800778c:	4632      	mov	r2, r6
 800778e:	463b      	mov	r3, r7
 8007790:	4628      	mov	r0, r5
 8007792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007796:	f000 b817 	b.w	80077c8 <_write_r>

0800779a <__sseek>:
 800779a:	b510      	push	{r4, lr}
 800779c:	460c      	mov	r4, r1
 800779e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a2:	f000 f855 	bl	8007850 <_lseek_r>
 80077a6:	1c43      	adds	r3, r0, #1
 80077a8:	89a3      	ldrh	r3, [r4, #12]
 80077aa:	bf15      	itete	ne
 80077ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80077ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077b6:	81a3      	strheq	r3, [r4, #12]
 80077b8:	bf18      	it	ne
 80077ba:	81a3      	strhne	r3, [r4, #12]
 80077bc:	bd10      	pop	{r4, pc}

080077be <__sclose>:
 80077be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077c2:	f000 b813 	b.w	80077ec <_close_r>
	...

080077c8 <_write_r>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	4d07      	ldr	r5, [pc, #28]	; (80077e8 <_write_r+0x20>)
 80077cc:	4604      	mov	r4, r0
 80077ce:	4608      	mov	r0, r1
 80077d0:	4611      	mov	r1, r2
 80077d2:	2200      	movs	r2, #0
 80077d4:	602a      	str	r2, [r5, #0]
 80077d6:	461a      	mov	r2, r3
 80077d8:	f7f9 fd1e 	bl	8001218 <_write>
 80077dc:	1c43      	adds	r3, r0, #1
 80077de:	d102      	bne.n	80077e6 <_write_r+0x1e>
 80077e0:	682b      	ldr	r3, [r5, #0]
 80077e2:	b103      	cbz	r3, 80077e6 <_write_r+0x1e>
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	bd38      	pop	{r3, r4, r5, pc}
 80077e8:	200008ec 	.word	0x200008ec

080077ec <_close_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	4d06      	ldr	r5, [pc, #24]	; (8007808 <_close_r+0x1c>)
 80077f0:	2300      	movs	r3, #0
 80077f2:	4604      	mov	r4, r0
 80077f4:	4608      	mov	r0, r1
 80077f6:	602b      	str	r3, [r5, #0]
 80077f8:	f7f9 fe55 	bl	80014a6 <_close>
 80077fc:	1c43      	adds	r3, r0, #1
 80077fe:	d102      	bne.n	8007806 <_close_r+0x1a>
 8007800:	682b      	ldr	r3, [r5, #0]
 8007802:	b103      	cbz	r3, 8007806 <_close_r+0x1a>
 8007804:	6023      	str	r3, [r4, #0]
 8007806:	bd38      	pop	{r3, r4, r5, pc}
 8007808:	200008ec 	.word	0x200008ec

0800780c <_fstat_r>:
 800780c:	b538      	push	{r3, r4, r5, lr}
 800780e:	4d07      	ldr	r5, [pc, #28]	; (800782c <_fstat_r+0x20>)
 8007810:	2300      	movs	r3, #0
 8007812:	4604      	mov	r4, r0
 8007814:	4608      	mov	r0, r1
 8007816:	4611      	mov	r1, r2
 8007818:	602b      	str	r3, [r5, #0]
 800781a:	f7f9 fe50 	bl	80014be <_fstat>
 800781e:	1c43      	adds	r3, r0, #1
 8007820:	d102      	bne.n	8007828 <_fstat_r+0x1c>
 8007822:	682b      	ldr	r3, [r5, #0]
 8007824:	b103      	cbz	r3, 8007828 <_fstat_r+0x1c>
 8007826:	6023      	str	r3, [r4, #0]
 8007828:	bd38      	pop	{r3, r4, r5, pc}
 800782a:	bf00      	nop
 800782c:	200008ec 	.word	0x200008ec

08007830 <_isatty_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4d06      	ldr	r5, [pc, #24]	; (800784c <_isatty_r+0x1c>)
 8007834:	2300      	movs	r3, #0
 8007836:	4604      	mov	r4, r0
 8007838:	4608      	mov	r0, r1
 800783a:	602b      	str	r3, [r5, #0]
 800783c:	f7f9 fe4f 	bl	80014de <_isatty>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d102      	bne.n	800784a <_isatty_r+0x1a>
 8007844:	682b      	ldr	r3, [r5, #0]
 8007846:	b103      	cbz	r3, 800784a <_isatty_r+0x1a>
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	200008ec 	.word	0x200008ec

08007850 <_lseek_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	4d07      	ldr	r5, [pc, #28]	; (8007870 <_lseek_r+0x20>)
 8007854:	4604      	mov	r4, r0
 8007856:	4608      	mov	r0, r1
 8007858:	4611      	mov	r1, r2
 800785a:	2200      	movs	r2, #0
 800785c:	602a      	str	r2, [r5, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	f7f9 fe48 	bl	80014f4 <_lseek>
 8007864:	1c43      	adds	r3, r0, #1
 8007866:	d102      	bne.n	800786e <_lseek_r+0x1e>
 8007868:	682b      	ldr	r3, [r5, #0]
 800786a:	b103      	cbz	r3, 800786e <_lseek_r+0x1e>
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	bd38      	pop	{r3, r4, r5, pc}
 8007870:	200008ec 	.word	0x200008ec

08007874 <__malloc_lock>:
 8007874:	4801      	ldr	r0, [pc, #4]	; (800787c <__malloc_lock+0x8>)
 8007876:	f7ff bb15 	b.w	8006ea4 <__retarget_lock_acquire_recursive>
 800787a:	bf00      	nop
 800787c:	200008e0 	.word	0x200008e0

08007880 <__malloc_unlock>:
 8007880:	4801      	ldr	r0, [pc, #4]	; (8007888 <__malloc_unlock+0x8>)
 8007882:	f7ff bb10 	b.w	8006ea6 <__retarget_lock_release_recursive>
 8007886:	bf00      	nop
 8007888:	200008e0 	.word	0x200008e0

0800788c <_read_r>:
 800788c:	b538      	push	{r3, r4, r5, lr}
 800788e:	4d07      	ldr	r5, [pc, #28]	; (80078ac <_read_r+0x20>)
 8007890:	4604      	mov	r4, r0
 8007892:	4608      	mov	r0, r1
 8007894:	4611      	mov	r1, r2
 8007896:	2200      	movs	r2, #0
 8007898:	602a      	str	r2, [r5, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	f7f9 fde6 	bl	800146c <_read>
 80078a0:	1c43      	adds	r3, r0, #1
 80078a2:	d102      	bne.n	80078aa <_read_r+0x1e>
 80078a4:	682b      	ldr	r3, [r5, #0]
 80078a6:	b103      	cbz	r3, 80078aa <_read_r+0x1e>
 80078a8:	6023      	str	r3, [r4, #0]
 80078aa:	bd38      	pop	{r3, r4, r5, pc}
 80078ac:	200008ec 	.word	0x200008ec

080078b0 <_init>:
 80078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b2:	bf00      	nop
 80078b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b6:	bc08      	pop	{r3}
 80078b8:	469e      	mov	lr, r3
 80078ba:	4770      	bx	lr

080078bc <_fini>:
 80078bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078be:	bf00      	nop
 80078c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078c2:	bc08      	pop	{r3}
 80078c4:	469e      	mov	lr, r3
 80078c6:	4770      	bx	lr
