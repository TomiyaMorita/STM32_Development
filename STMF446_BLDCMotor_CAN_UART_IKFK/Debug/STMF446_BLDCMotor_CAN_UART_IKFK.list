
STMF446_BLDCMotor_CAN_UART_IKFK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a44c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  0800a620  0800a620  0001a620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac90  0800ac90  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac90  0800ac90  0001ac90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac98  0800ac98  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac98  0800ac98  0001ac98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac9c  0800ac9c  0001ac9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800aca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  200001e8  0800ae88  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  0800ae88  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca34  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f31  00000000  00000000  0002cc4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0002eb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002f5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000332b  00000000  00000000  0002fef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c988  00000000  00000000  00033223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd1d5  00000000  00000000  0003fbab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010cd80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc0  00000000  00000000  0010cdd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a604 	.word	0x0800a604

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800a604 	.word	0x0800a604

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <HAL_GPIO_EXTI_Callback>:
	uint16_t rxMsg;
	uint16_t txMsg;
}CANMessage;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
	//stepper 0 end stop senssor
	if(GPIO_Pin == GPIO_PIN_5 ){
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	2b20      	cmp	r3, #32
 8000f9a:	d11b      	bne.n	8000fd4 <HAL_GPIO_EXTI_Callback+0x48>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){	//end stop ONの時フラグを立てる
 8000f9c:	2120      	movs	r1, #32
 8000f9e:	480f      	ldr	r0, [pc, #60]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x50>)
 8000fa0:	f003 f8c2 	bl	8004128 <HAL_GPIO_ReadPin>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d106      	bne.n	8000fb8 <HAL_GPIO_EXTI_Callback+0x2c>
			home_position_state |= 1;
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000fb6:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 8000fb8:	2120      	movs	r1, #32
 8000fba:	4808      	ldr	r0, [pc, #32]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x50>)
 8000fbc:	f003 f8b4 	bl	8004128 <HAL_GPIO_ReadPin>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d006      	beq.n	8000fd4 <HAL_GPIO_EXTI_Callback+0x48>
			home_position_state &= ~1;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	f023 0301 	bic.w	r3, r3, #1
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000fd2:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	2000031c 	.word	0x2000031c

08000fe4 <EnterMotorMode>:
    data[6] = 0xFF;
    data[7] = 0xFE;
    //WriteAll();
    }

void EnterMotorMode(){
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
	data[0] = 0xFF;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <EnterMotorMode+0x40>)
 8000fea:	22ff      	movs	r2, #255	; 0xff
 8000fec:	701a      	strb	r2, [r3, #0]
    data[1] = 0xFF;
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <EnterMotorMode+0x40>)
 8000ff0:	22ff      	movs	r2, #255	; 0xff
 8000ff2:	705a      	strb	r2, [r3, #1]
    data[2] = 0xFF;
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <EnterMotorMode+0x40>)
 8000ff6:	22ff      	movs	r2, #255	; 0xff
 8000ff8:	709a      	strb	r2, [r3, #2]
    data[3] = 0xFF;
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <EnterMotorMode+0x40>)
 8000ffc:	22ff      	movs	r2, #255	; 0xff
 8000ffe:	70da      	strb	r2, [r3, #3]
    data[4] = 0xFF;
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <EnterMotorMode+0x40>)
 8001002:	22ff      	movs	r2, #255	; 0xff
 8001004:	711a      	strb	r2, [r3, #4]
    data[5] = 0xFF;
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <EnterMotorMode+0x40>)
 8001008:	22ff      	movs	r2, #255	; 0xff
 800100a:	715a      	strb	r2, [r3, #5]
    data[6] = 0xFF;
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <EnterMotorMode+0x40>)
 800100e:	22ff      	movs	r2, #255	; 0xff
 8001010:	719a      	strb	r2, [r3, #6]
    data[7] = 0xFC;
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <EnterMotorMode+0x40>)
 8001014:	22fc      	movs	r2, #252	; 0xfc
 8001016:	71da      	strb	r2, [r3, #7]
    //WriteAll();
    }
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	2000030c 	.word	0x2000030c

08001028 <ExitMotorMode>:

void ExitMotorMode(){
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
	data[0] = 0xFF;
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <ExitMotorMode+0x40>)
 800102e:	22ff      	movs	r2, #255	; 0xff
 8001030:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <ExitMotorMode+0x40>)
 8001034:	22ff      	movs	r2, #255	; 0xff
 8001036:	705a      	strb	r2, [r3, #1]
	data[2] = 0xFF;
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <ExitMotorMode+0x40>)
 800103a:	22ff      	movs	r2, #255	; 0xff
 800103c:	709a      	strb	r2, [r3, #2]
	data[3] = 0xFF;
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <ExitMotorMode+0x40>)
 8001040:	22ff      	movs	r2, #255	; 0xff
 8001042:	70da      	strb	r2, [r3, #3]
	data[4] = 0xFF;
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <ExitMotorMode+0x40>)
 8001046:	22ff      	movs	r2, #255	; 0xff
 8001048:	711a      	strb	r2, [r3, #4]
	data[5] = 0xFF;
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <ExitMotorMode+0x40>)
 800104c:	22ff      	movs	r2, #255	; 0xff
 800104e:	715a      	strb	r2, [r3, #5]
	data[6] = 0xFF;
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <ExitMotorMode+0x40>)
 8001052:	22ff      	movs	r2, #255	; 0xff
 8001054:	719a      	strb	r2, [r3, #6]
	data[7] = 0xFD;
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <ExitMotorMode+0x40>)
 8001058:	22fd      	movs	r2, #253	; 0xfd
 800105a:	71da      	strb	r2, [r3, #7]
    //WriteAll();
    }
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	2000030c 	.word	0x2000030c

0800106c <pack_cmd>:

void pack_cmd(float _p_des, float _v_des, float _kp, float _kd, float _t_ff){
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	; 0x38
 8001070:	af00      	add	r7, sp, #0
 8001072:	ed87 0a05 	vstr	s0, [r7, #20]
 8001076:	edc7 0a04 	vstr	s1, [r7, #16]
 800107a:	ed87 1a03 	vstr	s2, [r7, #12]
 800107e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001082:	ed87 2a01 	vstr	s4, [r7, #4]
	/// limit data to be within bounds ///
	float p_des = fminf(fmaxf(P_MIN, _p_des), P_MAX);
 8001086:	edd7 0a05 	vldr	s1, [r7, #20]
 800108a:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 800108e:	f001 fa48 	bl	8002522 <fmaxf>
 8001092:	eef0 7a40 	vmov.f32	s15, s0
 8001096:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 800109a:	eeb0 0a67 	vmov.f32	s0, s15
 800109e:	f001 fa5c 	bl	800255a <fminf>
 80010a2:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	float v_des = fminf(fmaxf(V_MIN, _v_des), V_MAX);
 80010a6:	edd7 0a04 	vldr	s1, [r7, #16]
 80010aa:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8001208 <pack_cmd+0x19c>
 80010ae:	f001 fa38 	bl	8002522 <fmaxf>
 80010b2:	eef0 7a40 	vmov.f32	s15, s0
 80010b6:	eddf 0a55 	vldr	s1, [pc, #340]	; 800120c <pack_cmd+0x1a0>
 80010ba:	eeb0 0a67 	vmov.f32	s0, s15
 80010be:	f001 fa4c 	bl	800255a <fminf>
 80010c2:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	float kp = fminf(fmaxf(KP_MIN, _kp), KP_MAX);
 80010c6:	edd7 0a03 	vldr	s1, [r7, #12]
 80010ca:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8001210 <pack_cmd+0x1a4>
 80010ce:	f001 fa28 	bl	8002522 <fmaxf>
 80010d2:	eef0 7a40 	vmov.f32	s15, s0
 80010d6:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8001214 <pack_cmd+0x1a8>
 80010da:	eeb0 0a67 	vmov.f32	s0, s15
 80010de:	f001 fa3c 	bl	800255a <fminf>
 80010e2:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float kd = fminf(fmaxf(KD_MIN, _kd), KD_MAX);
 80010e6:	edd7 0a02 	vldr	s1, [r7, #8]
 80010ea:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8001210 <pack_cmd+0x1a4>
 80010ee:	f001 fa18 	bl	8002522 <fmaxf>
 80010f2:	eef0 7a40 	vmov.f32	s15, s0
 80010f6:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80010fa:	eeb0 0a67 	vmov.f32	s0, s15
 80010fe:	f001 fa2c 	bl	800255a <fminf>
 8001102:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	float t_ff = fminf(fmaxf(T_MIN, _t_ff), T_MAX);
 8001106:	edd7 0a01 	vldr	s1, [r7, #4]
 800110a:	eebb 0a02 	vmov.f32	s0, #178	; 0xc1900000 -18.0
 800110e:	f001 fa08 	bl	8002522 <fmaxf>
 8001112:	eef0 7a40 	vmov.f32	s15, s0
 8001116:	eef3 0a02 	vmov.f32	s1, #50	; 0x41900000  18.0
 800111a:	eeb0 0a67 	vmov.f32	s0, s15
 800111e:	f001 fa1c 	bl	800255a <fminf>
 8001122:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	/// convert floats to unsigned ints ///
	uint16_t p_int = float_to_uint(p_des, P_MIN, P_MAX, 16);
 8001126:	2010      	movs	r0, #16
 8001128:	eeb2 1a09 	vmov.f32	s2, #41	; 0x41480000  12.5
 800112c:	eefa 0a09 	vmov.f32	s1, #169	; 0xc1480000 -12.5
 8001130:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001134:	f001 fa2d 	bl	8002592 <float_to_uint>
 8001138:	4603      	mov	r3, r0
 800113a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t v_int = float_to_uint(v_des, V_MIN, V_MAX, 12);
 800113c:	200c      	movs	r0, #12
 800113e:	ed9f 1a33 	vldr	s2, [pc, #204]	; 800120c <pack_cmd+0x1a0>
 8001142:	eddf 0a31 	vldr	s1, [pc, #196]	; 8001208 <pack_cmd+0x19c>
 8001146:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 800114a:	f001 fa22 	bl	8002592 <float_to_uint>
 800114e:	4603      	mov	r3, r0
 8001150:	843b      	strh	r3, [r7, #32]
	uint16_t kp_int = float_to_uint(kp, KP_MIN, KP_MAX, 12);
 8001152:	200c      	movs	r0, #12
 8001154:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8001214 <pack_cmd+0x1a8>
 8001158:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8001210 <pack_cmd+0x1a4>
 800115c:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001160:	f001 fa17 	bl	8002592 <float_to_uint>
 8001164:	4603      	mov	r3, r0
 8001166:	83fb      	strh	r3, [r7, #30]
	uint16_t kd_int = float_to_uint(kd, KD_MIN, KD_MAX, 12);
 8001168:	200c      	movs	r0, #12
 800116a:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 800116e:	eddf 0a28 	vldr	s1, [pc, #160]	; 8001210 <pack_cmd+0x1a4>
 8001172:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001176:	f001 fa0c 	bl	8002592 <float_to_uint>
 800117a:	4603      	mov	r3, r0
 800117c:	83bb      	strh	r3, [r7, #28]
	uint16_t t_int = float_to_uint(t_ff, T_MIN, T_MAX, 12);
 800117e:	200c      	movs	r0, #12
 8001180:	eeb3 1a02 	vmov.f32	s2, #50	; 0x41900000  18.0
 8001184:	eefb 0a02 	vmov.f32	s1, #178	; 0xc1900000 -18.0
 8001188:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800118c:	f001 fa01 	bl	8002592 <float_to_uint>
 8001190:	4603      	mov	r3, r0
 8001192:	837b      	strh	r3, [r7, #26]
	/// pack ints into the can buffer ///
	data[0] = p_int>>8;
 8001194:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001196:	0a1b      	lsrs	r3, r3, #8
 8001198:	b29b      	uxth	r3, r3
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <pack_cmd+0x1ac>)
 800119e:	701a      	strb	r2, [r3, #0]
	data[1] = p_int&0xFF;
 80011a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <pack_cmd+0x1ac>)
 80011a6:	705a      	strb	r2, [r3, #1]
	data[2] = v_int>>4;
 80011a8:	8c3b      	ldrh	r3, [r7, #32]
 80011aa:	091b      	lsrs	r3, r3, #4
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <pack_cmd+0x1ac>)
 80011b2:	709a      	strb	r2, [r3, #2]
	data[3] = ((v_int&0xF)<<4)|(kp_int>>8);
 80011b4:	8c3b      	ldrh	r3, [r7, #32]
 80011b6:	011b      	lsls	r3, r3, #4
 80011b8:	b25a      	sxtb	r2, r3
 80011ba:	8bfb      	ldrh	r3, [r7, #30]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	b29b      	uxth	r3, r3
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <pack_cmd+0x1ac>)
 80011ca:	70da      	strb	r2, [r3, #3]
	data[4] = kp_int&0xFF;
 80011cc:	8bfb      	ldrh	r3, [r7, #30]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <pack_cmd+0x1ac>)
 80011d2:	711a      	strb	r2, [r3, #4]
	data[5] = kd_int>>4;
 80011d4:	8bbb      	ldrh	r3, [r7, #28]
 80011d6:	091b      	lsrs	r3, r3, #4
 80011d8:	b29b      	uxth	r3, r3
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <pack_cmd+0x1ac>)
 80011de:	715a      	strb	r2, [r3, #5]
	data[6] = ((kd_int&0xF)<<4)|(t_int>>8);
 80011e0:	8bbb      	ldrh	r3, [r7, #28]
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	b25a      	sxtb	r2, r3
 80011e6:	8b7b      	ldrh	r3, [r7, #26]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b25b      	sxtb	r3, r3
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <pack_cmd+0x1ac>)
 80011f6:	719a      	strb	r2, [r3, #6]
	data[7] = t_int&0xFF;
 80011f8:	8b7b      	ldrh	r3, [r7, #26]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <pack_cmd+0x1ac>)
 80011fe:	71da      	strb	r2, [r3, #7]
}
 8001200:	bf00      	nop
 8001202:	3738      	adds	r7, #56	; 0x38
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	c2820000 	.word	0xc2820000
 800120c:	42820000 	.word	0x42820000
 8001210:	00000000 	.word	0x00000000
 8001214:	43fa0000 	.word	0x43fa0000
 8001218:	2000030c 	.word	0x2000030c

0800121c <BLDC_CANTx>:
void BLDC_CANTx(){
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
	TxHeader.StdId=canid;
 8001222:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <BLDC_CANTx+0xa8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a28      	ldr	r2, [pc, #160]	; (80012c8 <BLDC_CANTx+0xac>)
 8001228:	6013      	str	r3, [r2, #0]
	TxHeader.IDE = CAN_ID_STD;
 800122a:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <BLDC_CANTx+0xac>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 0x08;
 8001230:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <BLDC_CANTx+0xac>)
 8001232:	2208      	movs	r2, #8
 8001234:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8001236:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <BLDC_CANTx+0xac>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 800123c:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <BLDC_CANTx+0xac>)
 800123e:	2200      	movs	r2, #0
 8001240:	751a      	strb	r2, [r3, #20]
//	HAL_CAN_AddTxMessage(&hcan1,&TxHeader,data,&TxMailbox);
//	HAL_Delay(10);

//	int i = 0;
	int count=0;
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan2) ){
 8001246:	4821      	ldr	r0, [pc, #132]	; (80012cc <BLDC_CANTx+0xb0>)
 8001248:	f002 f8a4 	bl	8003394 <HAL_CAN_GetTxMailboxesFreeLevel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d02e      	beq.n	80012b0 <BLDC_CANTx+0x94>
		HAL_CAN_AddTxMessage(&hcan2,&TxHeader,data,&TxMailbox);
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <BLDC_CANTx+0xb4>)
 8001254:	4a1f      	ldr	r2, [pc, #124]	; (80012d4 <BLDC_CANTx+0xb8>)
 8001256:	491c      	ldr	r1, [pc, #112]	; (80012c8 <BLDC_CANTx+0xac>)
 8001258:	481c      	ldr	r0, [pc, #112]	; (80012cc <BLDC_CANTx+0xb0>)
 800125a:	f001 ffc0 	bl	80031de <HAL_CAN_AddTxMessage>
		HAL_Delay(10);
 800125e:	200a      	movs	r0, #10
 8001260:	f001 fd30 	bl	8002cc4 <HAL_Delay>
		while(!nextcan_flag){
 8001264:	e01a      	b.n	800129c <BLDC_CANTx+0x80>
			HAL_CAN_AddTxMessage(&hcan2,&TxHeader,data,&TxMailbox);
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <BLDC_CANTx+0xb4>)
 8001268:	4a1a      	ldr	r2, [pc, #104]	; (80012d4 <BLDC_CANTx+0xb8>)
 800126a:	4917      	ldr	r1, [pc, #92]	; (80012c8 <BLDC_CANTx+0xac>)
 800126c:	4817      	ldr	r0, [pc, #92]	; (80012cc <BLDC_CANTx+0xb0>)
 800126e:	f001 ffb6 	bl	80031de <HAL_CAN_AddTxMessage>
			HAL_Delay(10);
 8001272:	200a      	movs	r0, #10
 8001274:	f001 fd26 	bl	8002cc4 <HAL_Delay>
			count++;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3301      	adds	r3, #1
 800127c:	607b      	str	r3, [r7, #4]
			if(count==10){
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b0a      	cmp	r3, #10
 8001282:	d10b      	bne.n	800129c <BLDC_CANTx+0x80>
				nextcan_flag=1;
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <BLDC_CANTx+0xbc>)
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]
				get_can_flag=1;
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <BLDC_CANTx+0xc0>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
				HAL_CAN_Stop (&hcan2);
 8001290:	480e      	ldr	r0, [pc, #56]	; (80012cc <BLDC_CANTx+0xb0>)
 8001292:	f001 ff5b 	bl	800314c <HAL_CAN_Stop>
				//HAL_CAN_AbortTxRequest(&hcan1,TxMailbox);
				HAL_CAN_Start(&hcan2);
 8001296:	480d      	ldr	r0, [pc, #52]	; (80012cc <BLDC_CANTx+0xb0>)
 8001298:	f001 ff14 	bl	80030c4 <HAL_CAN_Start>
		while(!nextcan_flag){
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <BLDC_CANTx+0xbc>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0e0      	beq.n	8001266 <BLDC_CANTx+0x4a>
			}
		}
		nextcan_flag=0;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <BLDC_CANTx+0xbc>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
		count=0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
	}else{
		nextcan_flag=0;
		get_can_flag=1;
	}
}
 80012ae:	e005      	b.n	80012bc <BLDC_CANTx+0xa0>
		nextcan_flag=0;
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <BLDC_CANTx+0xbc>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
		get_can_flag=1;
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <BLDC_CANTx+0xc0>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	701a      	strb	r2, [r3, #0]
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000318 	.word	0x20000318
 80012c8:	200002c0 	.word	0x200002c0
 80012cc:	2000022c 	.word	0x2000022c
 80012d0:	20000314 	.word	0x20000314
 80012d4:	2000030c 	.word	0x2000030c
 80012d8:	2000031f 	.word	0x2000031f
 80012dc:	2000031e 	.word	0x2000031e

080012e0 <unpack_reply>:

void unpack_reply(){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
    /// unpack ints from can buffer ///
    uint16_t id = data[0];
 80012e6:	4b28      	ldr	r3, [pc, #160]	; (8001388 <unpack_reply+0xa8>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	82fb      	strh	r3, [r7, #22]
    uint16_t p_int = (data[1]<<8)|data[2];
 80012ec:	4b26      	ldr	r3, [pc, #152]	; (8001388 <unpack_reply+0xa8>)
 80012ee:	785b      	ldrb	r3, [r3, #1]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	4b24      	ldr	r3, [pc, #144]	; (8001388 <unpack_reply+0xa8>)
 80012f6:	789b      	ldrb	r3, [r3, #2]
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	4313      	orrs	r3, r2
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	82bb      	strh	r3, [r7, #20]
    uint16_t v_int = (data[3]<<4)|(data[4]>>4);
 8001300:	4b21      	ldr	r3, [pc, #132]	; (8001388 <unpack_reply+0xa8>)
 8001302:	78db      	ldrb	r3, [r3, #3]
 8001304:	011b      	lsls	r3, r3, #4
 8001306:	b21a      	sxth	r2, r3
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <unpack_reply+0xa8>)
 800130a:	791b      	ldrb	r3, [r3, #4]
 800130c:	091b      	lsrs	r3, r3, #4
 800130e:	b2db      	uxtb	r3, r3
 8001310:	b21b      	sxth	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	b21b      	sxth	r3, r3
 8001316:	827b      	strh	r3, [r7, #18]
    uint16_t i_int = ((data[4]&0xF)<<8)|data[5];
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <unpack_reply+0xa8>)
 800131a:	791b      	ldrb	r3, [r3, #4]
 800131c:	021b      	lsls	r3, r3, #8
 800131e:	b21b      	sxth	r3, r3
 8001320:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001324:	b21a      	sxth	r2, r3
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <unpack_reply+0xa8>)
 8001328:	795b      	ldrb	r3, [r3, #5]
 800132a:	b21b      	sxth	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	b21b      	sxth	r3, r3
 8001330:	823b      	strh	r3, [r7, #16]

    p_getintdata=p_int;
 8001332:	4a16      	ldr	r2, [pc, #88]	; (800138c <unpack_reply+0xac>)
 8001334:	8abb      	ldrh	r3, [r7, #20]
 8001336:	8013      	strh	r3, [r2, #0]
    /// convert uints to floats ///
    float p = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001338:	8abb      	ldrh	r3, [r7, #20]
 800133a:	2110      	movs	r1, #16
 800133c:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 8001340:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 8001344:	4618      	mov	r0, r3
 8001346:	f001 f957 	bl	80025f8 <uint_to_float>
 800134a:	ed87 0a03 	vstr	s0, [r7, #12]
    float v = uint_to_float(v_int, V_MIN, V_MAX, 12);
 800134e:	8a7b      	ldrh	r3, [r7, #18]
 8001350:	210c      	movs	r1, #12
 8001352:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8001390 <unpack_reply+0xb0>
 8001356:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001394 <unpack_reply+0xb4>
 800135a:	4618      	mov	r0, r3
 800135c:	f001 f94c 	bl	80025f8 <uint_to_float>
 8001360:	ed87 0a02 	vstr	s0, [r7, #8]
    float t = uint_to_float(i_int, -T_MAX, T_MAX, 12);
 8001364:	8a3b      	ldrh	r3, [r7, #16]
 8001366:	210c      	movs	r1, #12
 8001368:	eef3 0a02 	vmov.f32	s1, #50	; 0x41900000  18.0
 800136c:	eebb 0a02 	vmov.f32	s0, #178	; 0xc1900000 -18.0
 8001370:	4618      	mov	r0, r3
 8001372:	f001 f941 	bl	80025f8 <uint_to_float>
 8001376:	ed87 0a01 	vstr	s0, [r7, #4]
    p_getdata=p;
 800137a:	4a07      	ldr	r2, [pc, #28]	; (8001398 <unpack_reply+0xb8>)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	2000030c 	.word	0x2000030c
 800138c:	20000330 	.word	0x20000330
 8001390:	42820000 	.word	0x42820000
 8001394:	c2820000 	.word	0xc2820000
 8001398:	20000324 	.word	0x20000324
 800139c:	00000000 	.word	0x00000000

080013a0 <BLDC_MotorRotate>:
void BLDC_MotorRotate(){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b094      	sub	sp, #80	; 0x50
 80013a4:	af00      	add	r7, sp, #0
	float count_rad=0.05;
 80013a6:	4ba6      	ldr	r3, [pc, #664]	; (8001640 <BLDC_MotorRotate+0x2a0>)
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
	float set_Kp=20.0;
 80013aa:	4ba6      	ldr	r3, [pc, #664]	; (8001644 <BLDC_MotorRotate+0x2a4>)
 80013ac:	623b      	str	r3, [r7, #32]
	float setMax_kp=100.0;
 80013ae:	4ba6      	ldr	r3, [pc, #664]	; (8001648 <BLDC_MotorRotate+0x2a8>)
 80013b0:	61fb      	str	r3, [r7, #28]
	uint8_t count_end=0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint32_t canid_select_far;
	uint32_t canid_select_near;
	float far_dis_dir=0;
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	643b      	str	r3, [r7, #64]	; 0x40
	float near_dis_dir=0;
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	float running_pos[2];
	float far_dis;
	float near_dis;
	float i=0.0;
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
	float m2_getpos;
	float m1_target_pos;
	float m2_target_pos;
	float far_getpos;
	float near_getpos;
	canid=0x01;
 80013ca:	4ba0      	ldr	r3, [pc, #640]	; (800164c <BLDC_MotorRotate+0x2ac>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]
	pack_cmd(0.0, 0.0, 0.0, 4.0, 0.0);	//現在の場所の所得
 80013d0:	ed9f 2a9f 	vldr	s4, [pc, #636]	; 8001650 <BLDC_MotorRotate+0x2b0>
 80013d4:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 80013d8:	ed9f 1a9d 	vldr	s2, [pc, #628]	; 8001650 <BLDC_MotorRotate+0x2b0>
 80013dc:	eddf 0a9c 	vldr	s1, [pc, #624]	; 8001650 <BLDC_MotorRotate+0x2b0>
 80013e0:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8001650 <BLDC_MotorRotate+0x2b0>
 80013e4:	f7ff fe42 	bl	800106c <pack_cmd>
	BLDC_CANTx();
 80013e8:	f7ff ff18 	bl	800121c <BLDC_CANTx>
	unpack_reply();
 80013ec:	f7ff ff78 	bl	80012e0 <unpack_reply>
	m1_getpos=p_getdata;
 80013f0:	4b98      	ldr	r3, [pc, #608]	; (8001654 <BLDC_MotorRotate+0x2b4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	61bb      	str	r3, [r7, #24]
	m1_target_pos=t_position[0];
 80013f6:	4b98      	ldr	r3, [pc, #608]	; (8001658 <BLDC_MotorRotate+0x2b8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	617b      	str	r3, [r7, #20]
	running_pos[0]=fabsf(m1_target_pos-m1_getpos);	//目標地点ー現在の地点＝移動距離
 80013fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001400:	edd7 7a06 	vldr	s15, [r7, #24]
 8001404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001408:	eef0 7ae7 	vabs.f32	s15, s15
 800140c:	edc7 7a01 	vstr	s15, [r7, #4]
	canid=0x02;
 8001410:	4b8e      	ldr	r3, [pc, #568]	; (800164c <BLDC_MotorRotate+0x2ac>)
 8001412:	2202      	movs	r2, #2
 8001414:	601a      	str	r2, [r3, #0]
	pack_cmd(0.0, 0.0, 0.0, 4.0, 0.0);	//現在の場所の所得
 8001416:	ed9f 2a8e 	vldr	s4, [pc, #568]	; 8001650 <BLDC_MotorRotate+0x2b0>
 800141a:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 800141e:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 8001650 <BLDC_MotorRotate+0x2b0>
 8001422:	eddf 0a8b 	vldr	s1, [pc, #556]	; 8001650 <BLDC_MotorRotate+0x2b0>
 8001426:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 8001650 <BLDC_MotorRotate+0x2b0>
 800142a:	f7ff fe1f 	bl	800106c <pack_cmd>
	BLDC_CANTx();
 800142e:	f7ff fef5 	bl	800121c <BLDC_CANTx>
	unpack_reply();
 8001432:	f7ff ff55 	bl	80012e0 <unpack_reply>
	m2_target_pos=t_position[1];
 8001436:	4b88      	ldr	r3, [pc, #544]	; (8001658 <BLDC_MotorRotate+0x2b8>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	613b      	str	r3, [r7, #16]
	m2_getpos=p_getdata;
 800143c:	4b85      	ldr	r3, [pc, #532]	; (8001654 <BLDC_MotorRotate+0x2b4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]
	running_pos[1]=fabsf(m2_target_pos-m2_getpos);
 8001442:	ed97 7a04 	vldr	s14, [r7, #16]
 8001446:	edd7 7a03 	vldr	s15, [r7, #12]
 800144a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800144e:	eef0 7ae7 	vabs.f32	s15, s15
 8001452:	edc7 7a02 	vstr	s15, [r7, #8]

	if(running_pos[0]>running_pos[1]){
 8001456:	ed97 7a01 	vldr	s14, [r7, #4]
 800145a:	edd7 7a02 	vldr	s15, [r7, #8]
 800145e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001466:	dd3a      	ble.n	80014de <BLDC_MotorRotate+0x13e>
		far_dis=running_pos[0];
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	63bb      	str	r3, [r7, #56]	; 0x38
		near_dis=running_pos[1];
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	637b      	str	r3, [r7, #52]	; 0x34
		canid_select_far=0x01;
 8001470:	2301      	movs	r3, #1
 8001472:	64bb      	str	r3, [r7, #72]	; 0x48
		canid_select_near=0x02;
 8001474:	2302      	movs	r3, #2
 8001476:	647b      	str	r3, [r7, #68]	; 0x44
		far_getpos=m1_getpos;
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
		near_getpos=m2_getpos-M_PI;
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f7ff f883 	bl	8000588 <__aeabi_f2d>
 8001482:	a36d      	add	r3, pc, #436	; (adr r3, 8001638 <BLDC_MotorRotate+0x298>)
 8001484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001488:	f7fe ff1e 	bl	80002c8 <__aeabi_dsub>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4610      	mov	r0, r2
 8001492:	4619      	mov	r1, r3
 8001494:	f7ff fba8 	bl	8000be8 <__aeabi_d2f>
 8001498:	4603      	mov	r3, r0
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
		far_dis_dir=(m1_target_pos-m1_getpos>=0)?1:-1;
 800149c:	ed97 7a05 	vldr	s14, [r7, #20]
 80014a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80014a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b0:	db02      	blt.n	80014b8 <BLDC_MotorRotate+0x118>
 80014b2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80014b6:	e000      	b.n	80014ba <BLDC_MotorRotate+0x11a>
 80014b8:	4b68      	ldr	r3, [pc, #416]	; (800165c <BLDC_MotorRotate+0x2bc>)
 80014ba:	643b      	str	r3, [r7, #64]	; 0x40
		near_dis_dir=(m2_target_pos-m2_getpos>=0)?1:-1;
 80014bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80014c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80014c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d0:	db02      	blt.n	80014d8 <BLDC_MotorRotate+0x138>
 80014d2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80014d6:	e000      	b.n	80014da <BLDC_MotorRotate+0x13a>
 80014d8:	4b60      	ldr	r3, [pc, #384]	; (800165c <BLDC_MotorRotate+0x2bc>)
 80014da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014dc:	e039      	b.n	8001552 <BLDC_MotorRotate+0x1b2>
	}else{
		far_dis=running_pos[1];
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	63bb      	str	r3, [r7, #56]	; 0x38
		near_dis=running_pos[0];
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	637b      	str	r3, [r7, #52]	; 0x34
		canid_select_far=0x02;
 80014e6:	2302      	movs	r3, #2
 80014e8:	64bb      	str	r3, [r7, #72]	; 0x48
		canid_select_near=0x01;
 80014ea:	2301      	movs	r3, #1
 80014ec:	647b      	str	r3, [r7, #68]	; 0x44
		far_getpos=m2_getpos-M_PI;
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f7ff f84a 	bl	8000588 <__aeabi_f2d>
 80014f4:	a350      	add	r3, pc, #320	; (adr r3, 8001638 <BLDC_MotorRotate+0x298>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7fe fee5 	bl	80002c8 <__aeabi_dsub>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f7ff fb6f 	bl	8000be8 <__aeabi_d2f>
 800150a:	4603      	mov	r3, r0
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
		near_getpos=m1_getpos;
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
		far_dis_dir=(m2_target_pos-m2_getpos>=0)?1:-1;
 8001512:	ed97 7a04 	vldr	s14, [r7, #16]
 8001516:	edd7 7a03 	vldr	s15, [r7, #12]
 800151a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800151e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001526:	db02      	blt.n	800152e <BLDC_MotorRotate+0x18e>
 8001528:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800152c:	e000      	b.n	8001530 <BLDC_MotorRotate+0x190>
 800152e:	4b4b      	ldr	r3, [pc, #300]	; (800165c <BLDC_MotorRotate+0x2bc>)
 8001530:	643b      	str	r3, [r7, #64]	; 0x40
		near_dis_dir=(m1_target_pos-m1_getpos>=0)?1:-1;
 8001532:	ed97 7a05 	vldr	s14, [r7, #20]
 8001536:	edd7 7a06 	vldr	s15, [r7, #24]
 800153a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800153e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001546:	db02      	blt.n	800154e <BLDC_MotorRotate+0x1ae>
 8001548:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800154c:	e000      	b.n	8001550 <BLDC_MotorRotate+0x1b0>
 800154e:	4b43      	ldr	r3, [pc, #268]	; (800165c <BLDC_MotorRotate+0x2bc>)
 8001550:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (far_dis>count_rad){
 8001552:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001556:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800155a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800155e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001562:	dc00      	bgt.n	8001566 <BLDC_MotorRotate+0x1c6>
//			HAL_Delay(30);
//		}else{
//			i=50;
//		}
//	}
}
 8001564:	e061      	b.n	800162a <BLDC_MotorRotate+0x28a>
		printf("phase1_done\r\n");
 8001566:	483e      	ldr	r0, [pc, #248]	; (8001660 <BLDC_MotorRotate+0x2c0>)
 8001568:	f005 f8ee 	bl	8006748 <puts>
		while(!count_end){
 800156c:	e059      	b.n	8001622 <BLDC_MotorRotate+0x282>
			i+=(far_dis_dir*count_rad);
 800156e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001572:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800157e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001582:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			if(fabsf(i)<far_dis){
 8001586:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800158a:	eef0 7ae7 	vabs.f32	s15, s15
 800158e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001592:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159a:	dd3f      	ble.n	800161c <BLDC_MotorRotate+0x27c>
				canid=canid_select_far;
 800159c:	4a2b      	ldr	r2, [pc, #172]	; (800164c <BLDC_MotorRotate+0x2ac>)
 800159e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015a0:	6013      	str	r3, [r2, #0]
				pack_cmd(far_getpos+i, 0.0, set_Kp, 3.0, 0.0);	//現在の場所の所得
 80015a2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80015a6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80015aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ae:	ed9f 2a28 	vldr	s4, [pc, #160]	; 8001650 <BLDC_MotorRotate+0x2b0>
 80015b2:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 80015b6:	ed97 1a08 	vldr	s2, [r7, #32]
 80015ba:	eddf 0a25 	vldr	s1, [pc, #148]	; 8001650 <BLDC_MotorRotate+0x2b0>
 80015be:	eeb0 0a67 	vmov.f32	s0, s15
 80015c2:	f7ff fd53 	bl	800106c <pack_cmd>
				BLDC_CANTx();
 80015c6:	f7ff fe29 	bl	800121c <BLDC_CANTx>
				canid=canid_select_near;
 80015ca:	4a20      	ldr	r2, [pc, #128]	; (800164c <BLDC_MotorRotate+0x2ac>)
 80015cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015ce:	6013      	str	r3, [r2, #0]
				pack_cmd(near_getpos+fabsf(i)*(near_dis/far_dis)*near_dis_dir, 0.0, set_Kp, 3.0, 0.0);	//現在の場所の所得
 80015d0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80015d4:	eeb0 7ae7 	vabs.f32	s14, s15
 80015d8:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 80015dc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80015e0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80015e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015e8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80015ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f8:	ed9f 2a15 	vldr	s4, [pc, #84]	; 8001650 <BLDC_MotorRotate+0x2b0>
 80015fc:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8001600:	ed97 1a08 	vldr	s2, [r7, #32]
 8001604:	eddf 0a12 	vldr	s1, [pc, #72]	; 8001650 <BLDC_MotorRotate+0x2b0>
 8001608:	eeb0 0a67 	vmov.f32	s0, s15
 800160c:	f7ff fd2e 	bl	800106c <pack_cmd>
				BLDC_CANTx();
 8001610:	f7ff fe04 	bl	800121c <BLDC_CANTx>
				HAL_Delay(30);
 8001614:	201e      	movs	r0, #30
 8001616:	f001 fb55 	bl	8002cc4 <HAL_Delay>
 800161a:	e002      	b.n	8001622 <BLDC_MotorRotate+0x282>
				count_end=1;
 800161c:	2301      	movs	r3, #1
 800161e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		while(!count_end){
 8001622:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0a1      	beq.n	800156e <BLDC_MotorRotate+0x1ce>
}
 800162a:	bf00      	nop
 800162c:	3750      	adds	r7, #80	; 0x50
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	f3af 8000 	nop.w
 8001638:	54442d18 	.word	0x54442d18
 800163c:	400921fb 	.word	0x400921fb
 8001640:	3d4ccccd 	.word	0x3d4ccccd
 8001644:	41a00000 	.word	0x41a00000
 8001648:	42c80000 	.word	0x42c80000
 800164c:	20000318 	.word	0x20000318
 8001650:	00000000 	.word	0x00000000
 8001654:	20000324 	.word	0x20000324
 8001658:	20000328 	.word	0x20000328
 800165c:	bf800000 	.word	0xbf800000
 8001660:	0800a620 	.word	0x0800a620

08001664 <command_judgment>:

void command_judgment(uint8_t *ModeSelect){
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	int modeflag_count=0;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<10 ;i++){
 8001670:	2300      	movs	r3, #0
 8001672:	72fb      	strb	r3, [r7, #11]
 8001674:	e015      	b.n	80016a2 <command_judgment+0x3e>
		ModeSelect[i]= ~(ModeSelect[i]);
 8001676:	7afb      	ldrb	r3, [r7, #11]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	781a      	ldrb	r2, [r3, #0]
 800167e:	7afb      	ldrb	r3, [r7, #11]
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	440b      	add	r3, r1
 8001684:	43d2      	mvns	r2, r2
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]
		if(ModeSelect[i]==0){
 800168a:	7afb      	ldrb	r3, [r7, #11]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	4413      	add	r3, r2
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d102      	bne.n	800169c <command_judgment+0x38>
			modeflag_count++;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	3301      	adds	r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<10 ;i++){
 800169c:	7afb      	ldrb	r3, [r7, #11]
 800169e:	3301      	adds	r3, #1
 80016a0:	72fb      	strb	r3, [r7, #11]
 80016a2:	7afb      	ldrb	r3, [r7, #11]
 80016a4:	2b09      	cmp	r3, #9
 80016a6:	d9e6      	bls.n	8001676 <command_judgment+0x12>
			}
		}
	if(modeflag_count<=8){	//動作モード
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b08      	cmp	r3, #8
 80016ac:	dc03      	bgt.n	80016b6 <command_judgment+0x52>
		selectmode_flag=0;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <command_judgment+0x6c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
	}
	else if(modeflag_count==9){	//コマンドモード,9byte ModeSelectが0だったら
		selectmode_flag=1;
	}
}
 80016b4:	e005      	b.n	80016c2 <command_judgment+0x5e>
	else if(modeflag_count==9){	//コマンドモード,9byte ModeSelectが0だったら
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b09      	cmp	r3, #9
 80016ba:	d102      	bne.n	80016c2 <command_judgment+0x5e>
		selectmode_flag=1;
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <command_judgment+0x6c>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000320 	.word	0x20000320

080016d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b0aa      	sub	sp, #168	; 0xa8
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016da:	f001 fa81 	bl	8002be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016de:	f000 faff 	bl	8001ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e2:	f000 fc03 	bl	8001eec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016e6:	f000 fbd7 	bl	8001e98 <MX_USART2_UART_Init>
  MX_CAN2_Init();
 80016ea:	f000 fb9d 	bl	8001e28 <MX_CAN2_Init>
  MX_CAN1_Init();
 80016ee:	f000 fb63 	bl	8001db8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t Init_flag=0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)!=1){	//リミットスイッチON→待機状態
 80016f8:	2120      	movs	r1, #32
 80016fa:	4893      	ldr	r0, [pc, #588]	; (8001948 <main+0x274>)
 80016fc:	f002 fd14 	bl	8004128 <HAL_GPIO_ReadPin>
 8001700:	4603      	mov	r3, r0
 8001702:	2b01      	cmp	r3, #1
 8001704:	d003      	beq.n	800170e <main+0x3a>
	  home_position_state=1;
 8001706:	4b91      	ldr	r3, [pc, #580]	; (800194c <main+0x278>)
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
 800170c:	e002      	b.n	8001714 <main+0x40>
  }else{
	  home_position_state=0;
 800170e:	4b8f      	ldr	r3, [pc, #572]	; (800194c <main+0x278>)
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
  }
sFilterConfig.FilterBank = 14;
 8001714:	4b8e      	ldr	r3, [pc, #568]	; (8001950 <main+0x27c>)
 8001716:	220e      	movs	r2, #14
 8001718:	615a      	str	r2, [r3, #20]
sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800171a:	4b8d      	ldr	r3, [pc, #564]	; (8001950 <main+0x27c>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001720:	4b8b      	ldr	r3, [pc, #556]	; (8001950 <main+0x27c>)
 8001722:	2201      	movs	r2, #1
 8001724:	61da      	str	r2, [r3, #28]
sFilterConfig.FilterIdHigh = 0x0000;
 8001726:	4b8a      	ldr	r3, [pc, #552]	; (8001950 <main+0x27c>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
sFilterConfig.FilterIdLow = 0x0000;
 800172c:	4b88      	ldr	r3, [pc, #544]	; (8001950 <main+0x27c>)
 800172e:	2200      	movs	r2, #0
 8001730:	605a      	str	r2, [r3, #4]
sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001732:	4b87      	ldr	r3, [pc, #540]	; (8001950 <main+0x27c>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
sFilterConfig.FilterMaskIdLow = 0x0000;
 8001738:	4b85      	ldr	r3, [pc, #532]	; (8001950 <main+0x27c>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800173e:	4b84      	ldr	r3, [pc, #528]	; (8001950 <main+0x27c>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
//	sFilterConfig.FilterFIFOAssignment =CAN_FILTER_FIFO0;
sFilterConfig.FilterActivation=ENABLE;
 8001744:	4b82      	ldr	r3, [pc, #520]	; (8001950 <main+0x27c>)
 8001746:	2201      	movs	r2, #1
 8001748:	621a      	str	r2, [r3, #32]
sFilterConfig.SlaveStartFilterBank=14;
 800174a:	4b81      	ldr	r3, [pc, #516]	; (8001950 <main+0x27c>)
 800174c:	220e      	movs	r2, #14
 800174e:	625a      	str	r2, [r3, #36]	; 0x24

if(HAL_CAN_ConfigFilter(&hcan2,&sFilterConfig) != HAL_OK)
 8001750:	497f      	ldr	r1, [pc, #508]	; (8001950 <main+0x27c>)
 8001752:	4880      	ldr	r0, [pc, #512]	; (8001954 <main+0x280>)
 8001754:	f001 fbd6 	bl	8002f04 <HAL_CAN_ConfigFilter>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <main+0x8e>
{
	Error_Handler();
 800175e:	f000 fedb 	bl	8002518 <Error_Handler>
}
if(HAL_CAN_Start(&hcan2)!=HAL_OK)
 8001762:	487c      	ldr	r0, [pc, #496]	; (8001954 <main+0x280>)
 8001764:	f001 fcae 	bl	80030c4 <HAL_CAN_Start>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <main+0x9e>
{
	Error_Handler();
 800176e:	f000 fed3 	bl	8002518 <Error_Handler>
}

if(HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8001772:	2103      	movs	r1, #3
 8001774:	4877      	ldr	r0, [pc, #476]	; (8001954 <main+0x280>)
 8001776:	f001 ff54 	bl	8003622 <HAL_CAN_ActivateNotification>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <main+0xb0>
{
	Error_Handler();
 8001780:	f000 feca 	bl	8002518 <Error_Handler>
}
uint8_t judgment[10];
uint8_t modeflag=0;
 8001784:	2300      	movs	r3, #0
 8001786:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
float rad_data[2];
float machine_coordinate_data[2];
float tip_coordinate_data[2];
float machine_origin_rad[10];
float machine_origin_coordinate[10];
machine_origin_coordinate[0]=0.0;
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	603b      	str	r3, [r7, #0]
machine_origin_coordinate[1]=300.0;
 8001790:	4b71      	ldr	r3, [pc, #452]	; (8001958 <main+0x284>)
 8001792:	607b      	str	r3, [r7, #4]
BLDC_IK(machine_origin_coordinate[0],machine_origin_coordinate[1],&rad_data[0],&rad_data[1]);
 8001794:	edd7 7a00 	vldr	s15, [r7]
 8001798:	ed97 7a01 	vldr	s14, [r7, #4]
 800179c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017a0:	1d1a      	adds	r2, r3, #4
 80017a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	eef0 0a47 	vmov.f32	s1, s14
 80017ae:	eeb0 0a67 	vmov.f32	s0, s15
 80017b2:	f000 fd05 	bl	80021c0 <BLDC_IK>
machine_origin_rad[0]=rad_data[0];
 80017b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
machine_origin_rad[1]=rad_data[1];
 80017ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  RxData[0]=0;
//	  home_position_state=0;
	  get_uart_flag=0;
 80017be:	4b67      	ldr	r3, [pc, #412]	; (800195c <main+0x288>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2, (uint8_t *)RxData, buffersize);
 80017c4:	4b66      	ldr	r3, [pc, #408]	; (8001960 <main+0x28c>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	4965      	ldr	r1, [pc, #404]	; (8001964 <main+0x290>)
 80017ce:	4866      	ldr	r0, [pc, #408]	; (8001968 <main+0x294>)
 80017d0:	f003 fb6e 	bl	8004eb0 <HAL_UART_Receive_IT>
//	  HAL_UART_Transmit(&huart2, (uint8_t *)RxData, buffersize,300);
	  //受信するまで待つ
	  while(!get_uart_flag){}
 80017d4:	bf00      	nop
 80017d6:	4b61      	ldr	r3, [pc, #388]	; (800195c <main+0x288>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0fb      	beq.n	80017d6 <main+0x102>
	  get_can_flag=1;//canデータ受信用のフラグを0に
 80017de:	4b63      	ldr	r3, [pc, #396]	; (800196c <main+0x298>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<10;i++){
 80017e4:	2300      	movs	r3, #0
 80017e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80017ea:	e010      	b.n	800180e <main+0x13a>
		  judgment[i]=RxData[i];
 80017ec:	4a5d      	ldr	r2, [pc, #372]	; (8001964 <main+0x290>)
 80017ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017f2:	4413      	add	r3, r2
 80017f4:	7819      	ldrb	r1, [r3, #0]
 80017f6:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80017fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017fe:	4413      	add	r3, r2
 8001800:	460a      	mov	r2, r1
 8001802:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<10;i++){
 8001804:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001808:	3301      	adds	r3, #1
 800180a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800180e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001812:	2b09      	cmp	r3, #9
 8001814:	ddea      	ble.n	80017ec <main+0x118>
	  }
	  command_judgment(judgment);
 8001816:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ff22 	bl	8001664 <command_judgment>
	  if(selectmode_flag==1){
 8001820:	4b53      	ldr	r3, [pc, #332]	; (8001970 <main+0x29c>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d104      	bne.n	8001832 <main+0x15e>
		  mode_select=RxData[0];	//モード変更
 8001828:	4b4e      	ldr	r3, [pc, #312]	; (8001964 <main+0x290>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8001830:	e05d      	b.n	80018ee <main+0x21a>
		  }
	  else if(selectmode_flag==0){
 8001832:	4b4f      	ldr	r3, [pc, #316]	; (8001970 <main+0x29c>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d159      	bne.n	80018ee <main+0x21a>
		  receive_xy_coordinate[0]=RxData[0]&0xFF;	//受け取った座標データをビットシフトしてx,yの値に直す
 800183a:	4b4a      	ldr	r3, [pc, #296]	; (8001964 <main+0x290>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	b21b      	sxth	r3, r3
 8001840:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		  receive_xy_coordinate[0]+= (RxData[1]&0xFF)<<8;
 8001844:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 8001848:	b29a      	uxth	r2, r3
 800184a:	4b46      	ldr	r3, [pc, #280]	; (8001964 <main+0x290>)
 800184c:	785b      	ldrb	r3, [r3, #1]
 800184e:	b29b      	uxth	r3, r3
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	b29b      	uxth	r3, r3
 8001854:	4413      	add	r3, r2
 8001856:	b29b      	uxth	r3, r3
 8001858:	b21b      	sxth	r3, r3
 800185a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		  receive_xy_coordinate[1]=RxData[2]&0xFF;
 800185e:	4b41      	ldr	r3, [pc, #260]	; (8001964 <main+0x290>)
 8001860:	789b      	ldrb	r3, [r3, #2]
 8001862:	b21b      	sxth	r3, r3
 8001864:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
		  receive_xy_coordinate[1]+= (RxData[3]&0xFF)<<8;
 8001868:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 800186c:	b29a      	uxth	r2, r3
 800186e:	4b3d      	ldr	r3, [pc, #244]	; (8001964 <main+0x290>)
 8001870:	78db      	ldrb	r3, [r3, #3]
 8001872:	b29b      	uxth	r3, r3
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	b29b      	uxth	r3, r3
 8001878:	4413      	add	r3, r2
 800187a:	b29b      	uxth	r3, r3
 800187c:	b21b      	sxth	r3, r3
 800187e:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
		  tip_coordinate_data[0]=(float)receive_xy_coordinate[0];
 8001882:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 8001886:	ee07 3a90 	vmov	s15, r3
 800188a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800188e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		  tip_coordinate_data[1]=(float)receive_xy_coordinate[1];
 8001892:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 8001896:	ee07 3a90 	vmov	s15, r3
 800189a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800189e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		  machine_coordinate_data[0]=machine_origin_coordinate[0]+tip_coordinate_data[1];	//手先座標系から機械座標系への変換
 80018a2:	ed97 7a00 	vldr	s14, [r7]
 80018a6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ae:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		  machine_coordinate_data[1]=machine_origin_coordinate[1]-tip_coordinate_data[0];
 80018b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80018b6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80018ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018be:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		  HAL_UART_Transmit_IT(&huart2,RxData,sizeof(RxData));
 80018c2:	220a      	movs	r2, #10
 80018c4:	4927      	ldr	r1, [pc, #156]	; (8001964 <main+0x290>)
 80018c6:	4828      	ldr	r0, [pc, #160]	; (8001968 <main+0x294>)
 80018c8:	f003 faad 	bl	8004e26 <HAL_UART_Transmit_IT>
		  BLDC_IK(machine_coordinate_data[0],machine_coordinate_data[1],&rad_data[0],&rad_data[1]);
 80018cc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80018d0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80018d4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018d8:	1d1a      	adds	r2, r3, #4
 80018da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018de:	4611      	mov	r1, r2
 80018e0:	4618      	mov	r0, r3
 80018e2:	eef0 0a47 	vmov.f32	s1, s14
 80018e6:	eeb0 0a67 	vmov.f32	s0, s15
 80018ea:	f000 fc69 	bl	80021c0 <BLDC_IK>
	  }
	  if(home_position_state==1){	//初期位置モード
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <main+0x278>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	f040 8091 	bne.w	8001a1a <main+0x346>
		  switch(mode_select){
 80018f8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80018fc:	2b2a      	cmp	r3, #42	; 0x2a
 80018fe:	d03d      	beq.n	800197c <main+0x2a8>
 8001900:	2b2a      	cmp	r3, #42	; 0x2a
 8001902:	f73f af5c 	bgt.w	80017be <main+0xea>
 8001906:	2b0a      	cmp	r3, #10
 8001908:	d002      	beq.n	8001910 <main+0x23c>
 800190a:	2b1a      	cmp	r3, #26
 800190c:	d00f      	beq.n	800192e <main+0x25a>
 800190e:	e1e1      	b.n	8001cd4 <main+0x600>
		  case 0x0A:
			  canid=0x01;
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <main+0x2a0>)
 8001912:	2201      	movs	r2, #1
 8001914:	601a      	str	r2, [r3, #0]
			  EnterMotorMode();
 8001916:	f7ff fb65 	bl	8000fe4 <EnterMotorMode>
			  BLDC_CANTx();
 800191a:	f7ff fc7f 	bl	800121c <BLDC_CANTx>
			  canid=0x02;
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <main+0x2a0>)
 8001920:	2202      	movs	r2, #2
 8001922:	601a      	str	r2, [r3, #0]
			  EnterMotorMode();
 8001924:	f7ff fb5e 	bl	8000fe4 <EnterMotorMode>
			  BLDC_CANTx();
 8001928:	f7ff fc78 	bl	800121c <BLDC_CANTx>
			  break;
 800192c:	e1d2      	b.n	8001cd4 <main+0x600>
		  case 0x1A:
			  t_position[0] = machine_origin_rad[0];
 800192e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001930:	4a11      	ldr	r2, [pc, #68]	; (8001978 <main+0x2a4>)
 8001932:	6013      	str	r3, [r2, #0]
			  t_position[1] = machine_origin_rad[1];
 8001934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001936:	4a10      	ldr	r2, [pc, #64]	; (8001978 <main+0x2a4>)
 8001938:	6053      	str	r3, [r2, #4]
			  BLDC_MotorRotate();
 800193a:	f7ff fd31 	bl	80013a0 <BLDC_MotorRotate>
			  RxData[0]=0;
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <main+0x290>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
			  break;
 8001944:	e1c6      	b.n	8001cd4 <main+0x600>
 8001946:	bf00      	nop
 8001948:	40020400 	.word	0x40020400
 800194c:	2000031c 	.word	0x2000031c
 8001950:	20000298 	.word	0x20000298
 8001954:	2000022c 	.word	0x2000022c
 8001958:	43960000 	.word	0x43960000
 800195c:	2000031d 	.word	0x2000031d
 8001960:	20000008 	.word	0x20000008
 8001964:	20000300 	.word	0x20000300
 8001968:	20000254 	.word	0x20000254
 800196c:	2000031e 	.word	0x2000031e
 8001970:	20000320 	.word	0x20000320
 8001974:	20000318 	.word	0x20000318
 8001978:	20000328 	.word	0x20000328
		  case 0x2A:
			  if(selectmode_flag==0){	//初期位置の変更
 800197c:	4bc5      	ldr	r3, [pc, #788]	; (8001c94 <main+0x5c0>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	f040 81a6 	bne.w	8001cd2 <main+0x5fe>
				  receive_xy_coordinate[0] = RxData[0]&0xFF;
 8001986:	4bc4      	ldr	r3, [pc, #784]	; (8001c98 <main+0x5c4>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	b21b      	sxth	r3, r3
 800198c:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
				  receive_xy_coordinate[0] += (RxData[1]&0xFF)<<8;
 8001990:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 8001994:	b29a      	uxth	r2, r3
 8001996:	4bc0      	ldr	r3, [pc, #768]	; (8001c98 <main+0x5c4>)
 8001998:	785b      	ldrb	r3, [r3, #1]
 800199a:	b29b      	uxth	r3, r3
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	b29b      	uxth	r3, r3
 80019a0:	4413      	add	r3, r2
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
				  receive_xy_coordinate[1] = RxData[2]&0xFF;
 80019aa:	4bbb      	ldr	r3, [pc, #748]	; (8001c98 <main+0x5c4>)
 80019ac:	789b      	ldrb	r3, [r3, #2]
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
				  receive_xy_coordinate[1] += (RxData[3]&0xFF)<<8;
 80019b4:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	4bb7      	ldr	r3, [pc, #732]	; (8001c98 <main+0x5c4>)
 80019bc:	78db      	ldrb	r3, [r3, #3]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	4413      	add	r3, r2
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	b21b      	sxth	r3, r3
 80019ca:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
				  machine_origin_coordinate[0]=(float)receive_xy_coordinate[0];
 80019ce:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019da:	edc7 7a00 	vstr	s15, [r7]
				  machine_origin_coordinate[1]=(float)receive_xy_coordinate[1];
 80019de:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 80019e2:	ee07 3a90 	vmov	s15, r3
 80019e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ea:	edc7 7a01 	vstr	s15, [r7, #4]
				  BLDC_IK(machine_origin_coordinate[0],machine_origin_coordinate[1],&rad_data[0],&rad_data[1]);
 80019ee:	edd7 7a00 	vldr	s15, [r7]
 80019f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80019f6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019fa:	1d1a      	adds	r2, r3, #4
 80019fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	eef0 0a47 	vmov.f32	s1, s14
 8001a08:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0c:	f000 fbd8 	bl	80021c0 <BLDC_IK>
				  machine_origin_rad[0]=rad_data[0];
 8001a10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a12:	62bb      	str	r3, [r7, #40]	; 0x28
				  machine_origin_rad[1]=rad_data[1];
 8001a14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
			  }
			  break;
 8001a18:	e15b      	b.n	8001cd2 <main+0x5fe>
		  }
	  }
	  else if(home_position_state==0){
 8001a1a:	4ba0      	ldr	r3, [pc, #640]	; (8001c9c <main+0x5c8>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f47f aecd 	bne.w	80017be <main+0xea>
		  switch(mode_select){	//
 8001a24:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001a28:	2bb1      	cmp	r3, #177	; 0xb1
 8001a2a:	f300 8145 	bgt.w	8001cb8 <main+0x5e4>
 8001a2e:	2ba0      	cmp	r3, #160	; 0xa0
 8001a30:	da06      	bge.n	8001a40 <main+0x36c>
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	f000 810f 	beq.w	8001c56 <main+0x582>
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	f000 811b 	beq.w	8001c74 <main+0x5a0>
 8001a3e:	e13b      	b.n	8001cb8 <main+0x5e4>
 8001a40:	3ba0      	subs	r3, #160	; 0xa0
 8001a42:	2b11      	cmp	r3, #17
 8001a44:	f200 8138 	bhi.w	8001cb8 <main+0x5e4>
 8001a48:	a201      	add	r2, pc, #4	; (adr r2, 8001a50 <main+0x37c>)
 8001a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4e:	bf00      	nop
 8001a50:	08001a99 	.word	0x08001a99
 8001a54:	08001ab9 	.word	0x08001ab9
 8001a58:	08001ad1 	.word	0x08001ad1
 8001a5c:	08001cb9 	.word	0x08001cb9
 8001a60:	08001cb9 	.word	0x08001cb9
 8001a64:	08001cb9 	.word	0x08001cb9
 8001a68:	08001cb9 	.word	0x08001cb9
 8001a6c:	08001cb9 	.word	0x08001cb9
 8001a70:	08001cb9 	.word	0x08001cb9
 8001a74:	08001cb9 	.word	0x08001cb9
 8001a78:	08001cb9 	.word	0x08001cb9
 8001a7c:	08001cb9 	.word	0x08001cb9
 8001a80:	08001cb9 	.word	0x08001cb9
 8001a84:	08001cb9 	.word	0x08001cb9
 8001a88:	08001cb9 	.word	0x08001cb9
 8001a8c:	08001cb9 	.word	0x08001cb9
 8001a90:	08001aed 	.word	0x08001aed
 8001a94:	08001b39 	.word	0x08001b39
		  case 0xA0:	//動作モード
			  if(selectmode_flag==0){
 8001a98:	4b7e      	ldr	r3, [pc, #504]	; (8001c94 <main+0x5c0>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d107      	bne.n	8001ab0 <main+0x3dc>
				  t_position[0] = rad_data[0];
 8001aa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001aa2:	4a7f      	ldr	r2, [pc, #508]	; (8001ca0 <main+0x5cc>)
 8001aa4:	6013      	str	r3, [r2, #0]
				  t_position[1] = rad_data[1];
 8001aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001aa8:	4a7d      	ldr	r2, [pc, #500]	; (8001ca0 <main+0x5cc>)
 8001aaa:	6053      	str	r3, [r2, #4]
				  BLDC_MotorRotate();
 8001aac:	f7ff fc78 	bl	80013a0 <BLDC_MotorRotate>
			  }
			  RxData[0]=0;
 8001ab0:	4b79      	ldr	r3, [pc, #484]	; (8001c98 <main+0x5c4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
			  break;
 8001ab6:	e103      	b.n	8001cc0 <main+0x5ec>
		  case 0xA1:
			  t_position[0] = machine_origin_rad[0];
 8001ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aba:	4a79      	ldr	r2, [pc, #484]	; (8001ca0 <main+0x5cc>)
 8001abc:	6013      	str	r3, [r2, #0]
			  t_position[1] = machine_origin_rad[1];
 8001abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac0:	4a77      	ldr	r2, [pc, #476]	; (8001ca0 <main+0x5cc>)
 8001ac2:	6053      	str	r3, [r2, #4]
			  BLDC_MotorRotate();
 8001ac4:	f7ff fc6c 	bl	80013a0 <BLDC_MotorRotate>
			  RxData[0]=0;
 8001ac8:	4b73      	ldr	r3, [pc, #460]	; (8001c98 <main+0x5c4>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
			  break;
 8001ace:	e0f7      	b.n	8001cc0 <main+0x5ec>
		  case 0xA2:
			  t_position[0] = 0;
 8001ad0:	4b73      	ldr	r3, [pc, #460]	; (8001ca0 <main+0x5cc>)
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
			  t_position[1] = 0;
 8001ad8:	4b71      	ldr	r3, [pc, #452]	; (8001ca0 <main+0x5cc>)
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	605a      	str	r2, [r3, #4]
			  BLDC_MotorRotate();
 8001ae0:	f7ff fc5e 	bl	80013a0 <BLDC_MotorRotate>
			  RxData[0]=0;
 8001ae4:	4b6c      	ldr	r3, [pc, #432]	; (8001c98 <main+0x5c4>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
			  break;
 8001aea:	e0e9      	b.n	8001cc0 <main+0x5ec>
		  case 0xB0:	//ティーチングモード開始
			  canid=0x01;
 8001aec:	4b6d      	ldr	r3, [pc, #436]	; (8001ca4 <main+0x5d0>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 1.0, 0.0);
 8001af2:	ed9f 2a6d 	vldr	s4, [pc, #436]	; 8001ca8 <main+0x5d4>
 8001af6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001afa:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 8001ca8 <main+0x5d4>
 8001afe:	eddf 0a6a 	vldr	s1, [pc, #424]	; 8001ca8 <main+0x5d4>
 8001b02:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8001ca8 <main+0x5d4>
 8001b06:	f7ff fab1 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 8001b0a:	f7ff fb87 	bl	800121c <BLDC_CANTx>
			  canid=0x02;
 8001b0e:	4b65      	ldr	r3, [pc, #404]	; (8001ca4 <main+0x5d0>)
 8001b10:	2202      	movs	r2, #2
 8001b12:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 1.0, 0.0);
 8001b14:	ed9f 2a64 	vldr	s4, [pc, #400]	; 8001ca8 <main+0x5d4>
 8001b18:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001b1c:	ed9f 1a62 	vldr	s2, [pc, #392]	; 8001ca8 <main+0x5d4>
 8001b20:	eddf 0a61 	vldr	s1, [pc, #388]	; 8001ca8 <main+0x5d4>
 8001b24:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8001ca8 <main+0x5d4>
 8001b28:	f7ff faa0 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 8001b2c:	f7ff fb76 	bl	800121c <BLDC_CANTx>
			  RxData[0]=0;
 8001b30:	4b59      	ldr	r3, [pc, #356]	; (8001c98 <main+0x5c4>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
			  break;
 8001b36:	e0c3      	b.n	8001cc0 <main+0x5ec>
		  case 0xB1:	//ティーチング決定
			  canid=0x01;
 8001b38:	4b5a      	ldr	r3, [pc, #360]	; (8001ca4 <main+0x5d0>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 4.0, 0.0);
 8001b3e:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 8001ca8 <main+0x5d4>
 8001b42:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8001b46:	ed9f 1a58 	vldr	s2, [pc, #352]	; 8001ca8 <main+0x5d4>
 8001b4a:	eddf 0a57 	vldr	s1, [pc, #348]	; 8001ca8 <main+0x5d4>
 8001b4e:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8001ca8 <main+0x5d4>
 8001b52:	f7ff fa8b 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 8001b56:	f7ff fb61 	bl	800121c <BLDC_CANTx>
			  unpack_reply();
 8001b5a:	f7ff fbc1 	bl	80012e0 <unpack_reply>
			  rad_data[0]=p_getdata;
 8001b5e:	4b53      	ldr	r3, [pc, #332]	; (8001cac <main+0x5d8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	663b      	str	r3, [r7, #96]	; 0x60
			  canid=0x02;
 8001b64:	4b4f      	ldr	r3, [pc, #316]	; (8001ca4 <main+0x5d0>)
 8001b66:	2202      	movs	r2, #2
 8001b68:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 4.0, 0.0);
 8001b6a:	ed9f 2a4f 	vldr	s4, [pc, #316]	; 8001ca8 <main+0x5d4>
 8001b6e:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8001b72:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8001ca8 <main+0x5d4>
 8001b76:	eddf 0a4c 	vldr	s1, [pc, #304]	; 8001ca8 <main+0x5d4>
 8001b7a:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8001ca8 <main+0x5d4>
 8001b7e:	f7ff fa75 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 8001b82:	f7ff fb4b 	bl	800121c <BLDC_CANTx>
			  unpack_reply();
 8001b86:	f7ff fbab 	bl	80012e0 <unpack_reply>
			  rad_data[1]=p_getdata;
 8001b8a:	4b48      	ldr	r3, [pc, #288]	; (8001cac <main+0x5d8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	667b      	str	r3, [r7, #100]	; 0x64

			  BLDC_FK(rad_data[0],rad_data[1],&machine_coordinate_data[0],&machine_coordinate_data[1]);
 8001b90:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b94:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8001b98:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b9c:	1d1a      	adds	r2, r3, #4
 8001b9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	eef0 0a47 	vmov.f32	s1, s14
 8001baa:	eeb0 0a67 	vmov.f32	s0, s15
 8001bae:	f000 fa35 	bl	800201c <BLDC_FK>
			  sent_data[0]=round(machine_origin_coordinate[1]-machine_coordinate_data[1]);	//手先座標系から機械座標系への変換
 8001bb2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bb6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bbe:	ee17 0a90 	vmov	r0, s15
 8001bc2:	f7fe fce1 	bl	8000588 <__aeabi_f2d>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	ec43 2b10 	vmov	d0, r2, r3
 8001bce:	f006 fec3 	bl	8008958 <round>
 8001bd2:	ec53 2b10 	vmov	r2, r3, d0
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f7fe ffdd 	bl	8000b98 <__aeabi_d2iz>
 8001bde:	4603      	mov	r3, r0
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			  sent_data[1]=round(machine_coordinate_data[0]-machine_origin_coordinate[0]);
 8001be6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001bea:	edd7 7a00 	vldr	s15, [r7]
 8001bee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf2:	ee17 0a90 	vmov	r0, s15
 8001bf6:	f7fe fcc7 	bl	8000588 <__aeabi_f2d>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	ec43 2b10 	vmov	d0, r2, r3
 8001c02:	f006 fea9 	bl	8008958 <round>
 8001c06:	ec53 2b10 	vmov	r2, r3, d0
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f7fe ffc3 	bl	8000b98 <__aeabi_d2iz>
 8001c12:	4603      	mov	r3, r0
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			  TxData[0]=sent_data[0]&0xFF;
 8001c1a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <main+0x5dc>)
 8001c22:	701a      	strb	r2, [r3, #0]
			  TxData[1]=(sent_data[0]>>8)&0xFF;
 8001c24:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8001c28:	121b      	asrs	r3, r3, #8
 8001c2a:	b21b      	sxth	r3, r3
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <main+0x5dc>)
 8001c30:	705a      	strb	r2, [r3, #1]
		   	  TxData[2]=sent_data[1]&0xFF;
 8001c32:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <main+0x5dc>)
 8001c3a:	709a      	strb	r2, [r3, #2]
			  TxData[3]=(sent_data[1]>>8)&0xFF;
 8001c3c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8001c40:	121b      	asrs	r3, r3, #8
 8001c42:	b21b      	sxth	r3, r3
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <main+0x5dc>)
 8001c48:	70da      	strb	r2, [r3, #3]
			  HAL_UART_Transmit_IT(&huart2,TxData,sizeof(TxData));
 8001c4a:	220a      	movs	r2, #10
 8001c4c:	4918      	ldr	r1, [pc, #96]	; (8001cb0 <main+0x5dc>)
 8001c4e:	4819      	ldr	r0, [pc, #100]	; (8001cb4 <main+0x5e0>)
 8001c50:	f003 f8e9 	bl	8004e26 <HAL_UART_Transmit_IT>
			  break;
 8001c54:	e034      	b.n	8001cc0 <main+0x5ec>
		  case 0x01:	//モーターON
			  canid=0x01;
 8001c56:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <main+0x5d0>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]
			  EnterMotorMode();
 8001c5c:	f7ff f9c2 	bl	8000fe4 <EnterMotorMode>
			  BLDC_CANTx();
 8001c60:	f7ff fadc 	bl	800121c <BLDC_CANTx>
			  canid=0x02;
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <main+0x5d0>)
 8001c66:	2202      	movs	r2, #2
 8001c68:	601a      	str	r2, [r3, #0]
			  EnterMotorMode();
 8001c6a:	f7ff f9bb 	bl	8000fe4 <EnterMotorMode>
			  BLDC_CANTx();
 8001c6e:	f7ff fad5 	bl	800121c <BLDC_CANTx>
			  break;
 8001c72:	e025      	b.n	8001cc0 <main+0x5ec>
		  case 0x02:	//モーターOFF
			  canid=0x01;
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <main+0x5d0>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	601a      	str	r2, [r3, #0]
			  ExitMotorMode();
 8001c7a:	f7ff f9d5 	bl	8001028 <ExitMotorMode>
			  BLDC_CANTx();
 8001c7e:	f7ff facd 	bl	800121c <BLDC_CANTx>
			  canid=0x02;
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <main+0x5d0>)
 8001c84:	2202      	movs	r2, #2
 8001c86:	601a      	str	r2, [r3, #0]
			  ExitMotorMode();
 8001c88:	f7ff f9ce 	bl	8001028 <ExitMotorMode>
			  BLDC_CANTx();
 8001c8c:	f7ff fac6 	bl	800121c <BLDC_CANTx>
			  break;
 8001c90:	e016      	b.n	8001cc0 <main+0x5ec>
 8001c92:	bf00      	nop
 8001c94:	20000320 	.word	0x20000320
 8001c98:	20000300 	.word	0x20000300
 8001c9c:	2000031c 	.word	0x2000031c
 8001ca0:	20000328 	.word	0x20000328
 8001ca4:	20000318 	.word	0x20000318
 8001ca8:	00000000 	.word	0x00000000
 8001cac:	20000324 	.word	0x20000324
 8001cb0:	200002f4 	.word	0x200002f4
 8001cb4:	20000254 	.word	0x20000254
		  default:
			  get_can_flag=1;
 8001cb8:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <main+0x604>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	701a      	strb	r2, [r3, #0]
			  break;
 8001cbe:	bf00      	nop
		  }
		  get_uart_flag=0;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <main+0x608>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
		  while(!get_can_flag){}
 8001cc6:	bf00      	nop
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <main+0x604>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0fb      	beq.n	8001cc8 <main+0x5f4>
 8001cd0:	e575      	b.n	80017be <main+0xea>
			  break;
 8001cd2:	bf00      	nop
	  get_uart_flag=0;
 8001cd4:	e573      	b.n	80017be <main+0xea>
 8001cd6:	bf00      	nop
 8001cd8:	2000031e 	.word	0x2000031e
 8001cdc:	2000031d 	.word	0x2000031d

08001ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b094      	sub	sp, #80	; 0x50
 8001ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ce6:	f107 031c 	add.w	r3, r7, #28
 8001cea:	2234      	movs	r2, #52	; 0x34
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f004 f832 	bl	8005d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cf4:	f107 0308 	add.w	r3, r7, #8
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d04:	2300      	movs	r3, #0
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <SystemClock_Config+0xd0>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	4a28      	ldr	r2, [pc, #160]	; (8001db0 <SystemClock_Config+0xd0>)
 8001d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d12:	6413      	str	r3, [r2, #64]	; 0x40
 8001d14:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <SystemClock_Config+0xd0>)
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d20:	2300      	movs	r3, #0
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <SystemClock_Config+0xd4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a22      	ldr	r2, [pc, #136]	; (8001db4 <SystemClock_Config+0xd4>)
 8001d2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <SystemClock_Config+0xd4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d40:	2301      	movs	r3, #1
 8001d42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d44:	2310      	movs	r3, #16
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d50:	2308      	movs	r3, #8
 8001d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001d54:	23a0      	movs	r3, #160	; 0xa0
 8001d56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d60:	2302      	movs	r3, #2
 8001d62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d64:	f107 031c 	add.w	r3, r7, #28
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f002 fd71 	bl	8004850 <HAL_RCC_OscConfig>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d74:	f000 fbd0 	bl	8002518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d78:	230f      	movs	r3, #15
 8001d7a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d80:	2300      	movs	r3, #0
 8001d82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d8e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d90:	f107 0308 	add.w	r3, r7, #8
 8001d94:	2105      	movs	r1, #5
 8001d96:	4618      	mov	r0, r3
 8001d98:	f002 fa10 	bl	80041bc <HAL_RCC_ClockConfig>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001da2:	f000 fbb9 	bl	8002518 <Error_Handler>
  }
}
 8001da6:	bf00      	nop
 8001da8:	3750      	adds	r7, #80	; 0x50
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40007000 	.word	0x40007000

08001db8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001dbc:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <MX_CAN1_Init+0x68>)
 8001dbe:	4a19      	ldr	r2, [pc, #100]	; (8001e24 <MX_CAN1_Init+0x6c>)
 8001dc0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8001dc2:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <MX_CAN1_Init+0x68>)
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001dc8:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <MX_CAN1_Init+0x68>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <MX_CAN1_Init+0x68>)
 8001dd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dd4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001dd6:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <MX_CAN1_Init+0x68>)
 8001dd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ddc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <MX_CAN1_Init+0x68>)
 8001de0:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8001de4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001de6:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <MX_CAN1_Init+0x68>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <MX_CAN1_Init+0x68>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <MX_CAN1_Init+0x68>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <MX_CAN1_Init+0x68>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001dfe:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <MX_CAN1_Init+0x68>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <MX_CAN1_Init+0x68>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001e0a:	4805      	ldr	r0, [pc, #20]	; (8001e20 <MX_CAN1_Init+0x68>)
 8001e0c:	f000 ff7e 	bl	8002d0c <HAL_CAN_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001e16:	f000 fb7f 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000204 	.word	0x20000204
 8001e24:	40006400 	.word	0x40006400

08001e28 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001e2c:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <MX_CAN2_Init+0x68>)
 8001e2e:	4a19      	ldr	r2, [pc, #100]	; (8001e94 <MX_CAN2_Init+0x6c>)
 8001e30:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 8001e32:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <MX_CAN2_Init+0x68>)
 8001e34:	2204      	movs	r2, #4
 8001e36:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001e38:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <MX_CAN2_Init+0x68>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8001e3e:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <MX_CAN2_Init+0x68>)
 8001e40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e44:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <MX_CAN2_Init+0x68>)
 8001e48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e4c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_7TQ;
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <MX_CAN2_Init+0x68>)
 8001e50:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8001e54:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <MX_CAN2_Init+0x68>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <MX_CAN2_Init+0x68>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001e62:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <MX_CAN2_Init+0x68>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <MX_CAN2_Init+0x68>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <MX_CAN2_Init+0x68>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <MX_CAN2_Init+0x68>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001e7a:	4805      	ldr	r0, [pc, #20]	; (8001e90 <MX_CAN2_Init+0x68>)
 8001e7c:	f000 ff46 	bl	8002d0c <HAL_CAN_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8001e86:	f000 fb47 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	2000022c 	.word	0x2000022c
 8001e94:	40006800 	.word	0x40006800

08001e98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001e9e:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <MX_USART2_UART_Init+0x50>)
 8001ea0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001ea4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ea8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ece:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <MX_USART2_UART_Init+0x4c>)
 8001ed0:	f002 ff5c 	bl	8004d8c <HAL_UART_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001eda:	f000 fb1d 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000254 	.word	0x20000254
 8001ee8:	40004400 	.word	0x40004400

08001eec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	; 0x28
 8001ef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	4b41      	ldr	r3, [pc, #260]	; (800200c <MX_GPIO_Init+0x120>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a40      	ldr	r2, [pc, #256]	; (800200c <MX_GPIO_Init+0x120>)
 8001f0c:	f043 0304 	orr.w	r3, r3, #4
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b3e      	ldr	r3, [pc, #248]	; (800200c <MX_GPIO_Init+0x120>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b3a      	ldr	r3, [pc, #232]	; (800200c <MX_GPIO_Init+0x120>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a39      	ldr	r2, [pc, #228]	; (800200c <MX_GPIO_Init+0x120>)
 8001f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b37      	ldr	r3, [pc, #220]	; (800200c <MX_GPIO_Init+0x120>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	4b33      	ldr	r3, [pc, #204]	; (800200c <MX_GPIO_Init+0x120>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a32      	ldr	r2, [pc, #200]	; (800200c <MX_GPIO_Init+0x120>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b30      	ldr	r3, [pc, #192]	; (800200c <MX_GPIO_Init+0x120>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	4b2c      	ldr	r3, [pc, #176]	; (800200c <MX_GPIO_Init+0x120>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a2b      	ldr	r2, [pc, #172]	; (800200c <MX_GPIO_Init+0x120>)
 8001f60:	f043 0302 	orr.w	r3, r3, #2
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b29      	ldr	r3, [pc, #164]	; (800200c <MX_GPIO_Init+0x120>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2120      	movs	r1, #32
 8001f76:	4826      	ldr	r0, [pc, #152]	; (8002010 <MX_GPIO_Init+0x124>)
 8001f78:	f002 f8ee 	bl	8004158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2110      	movs	r1, #16
 8001f80:	4824      	ldr	r0, [pc, #144]	; (8002014 <MX_GPIO_Init+0x128>)
 8001f82:	f002 f8e9 	bl	8004158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f8c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f96:	f107 0314 	add.w	r3, r7, #20
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	481e      	ldr	r0, [pc, #120]	; (8002018 <MX_GPIO_Init+0x12c>)
 8001f9e:	f001 ff2f 	bl	8003e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001fa2:	2320      	movs	r3, #32
 8001fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4815      	ldr	r0, [pc, #84]	; (8002010 <MX_GPIO_Init+0x124>)
 8001fba:	f001 ff21 	bl	8003e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fbe:	2310      	movs	r3, #16
 8001fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	480f      	ldr	r0, [pc, #60]	; (8002014 <MX_GPIO_Init+0x128>)
 8001fd6:	f001 ff13 	bl	8003e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001fda:	2320      	movs	r3, #32
 8001fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001fde:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	4619      	mov	r1, r3
 8001fee:	4809      	ldr	r0, [pc, #36]	; (8002014 <MX_GPIO_Init+0x128>)
 8001ff0:	f001 ff06 	bl	8003e00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	2017      	movs	r0, #23
 8001ffa:	f001 fe38 	bl	8003c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ffe:	2017      	movs	r0, #23
 8002000:	f001 fe51 	bl	8003ca6 <HAL_NVIC_EnableIRQ>

}
 8002004:	bf00      	nop
 8002006:	3728      	adds	r7, #40	; 0x28
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40023800 	.word	0x40023800
 8002010:	40020000 	.word	0x40020000
 8002014:	40020400 	.word	0x40020400
 8002018:	40020800 	.word	0x40020800

0800201c <BLDC_FK>:

/* USER CODE BEGIN 4 */
void BLDC_FK(float s1,float s2,float* xp,float* yp){
 800201c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002020:	b086      	sub	sp, #24
 8002022:	af00      	add	r7, sp, #0
 8002024:	ed87 0a03 	vstr	s0, [r7, #12]
 8002028:	edc7 0a02 	vstr	s1, [r7, #8]
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
	float x=0.0;
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
	float y=0.0;
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	613b      	str	r3, [r7, #16]
	x=l1*cos(s1)+l2*cos(s1+s2);
 800203c:	4b5a      	ldr	r3, [pc, #360]	; (80021a8 <BLDC_FK+0x18c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe faa1 	bl	8000588 <__aeabi_f2d>
 8002046:	4604      	mov	r4, r0
 8002048:	460d      	mov	r5, r1
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f7fe fa9c 	bl	8000588 <__aeabi_f2d>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	ec43 2b10 	vmov	d0, r2, r3
 8002058:	f006 fc2a 	bl	80088b0 <cos>
 800205c:	ec53 2b10 	vmov	r2, r3, d0
 8002060:	4620      	mov	r0, r4
 8002062:	4629      	mov	r1, r5
 8002064:	f7fe fae8 	bl	8000638 <__aeabi_dmul>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4690      	mov	r8, r2
 800206e:	4699      	mov	r9, r3
 8002070:	4b4e      	ldr	r3, [pc, #312]	; (80021ac <BLDC_FK+0x190>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fa87 	bl	8000588 <__aeabi_f2d>
 800207a:	4604      	mov	r4, r0
 800207c:	460d      	mov	r5, r1
 800207e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002082:	edd7 7a02 	vldr	s15, [r7, #8]
 8002086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800208a:	ee17 0a90 	vmov	r0, s15
 800208e:	f7fe fa7b 	bl	8000588 <__aeabi_f2d>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	ec43 2b10 	vmov	d0, r2, r3
 800209a:	f006 fc09 	bl	80088b0 <cos>
 800209e:	ec53 2b10 	vmov	r2, r3, d0
 80020a2:	4620      	mov	r0, r4
 80020a4:	4629      	mov	r1, r5
 80020a6:	f7fe fac7 	bl	8000638 <__aeabi_dmul>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4640      	mov	r0, r8
 80020b0:	4649      	mov	r1, r9
 80020b2:	f7fe f90b 	bl	80002cc <__adddf3>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4610      	mov	r0, r2
 80020bc:	4619      	mov	r1, r3
 80020be:	f7fe fd93 	bl	8000be8 <__aeabi_d2f>
 80020c2:	4603      	mov	r3, r0
 80020c4:	617b      	str	r3, [r7, #20]
	y=l1*sin(s1)+l2*sin(s1+s2);
 80020c6:	4b38      	ldr	r3, [pc, #224]	; (80021a8 <BLDC_FK+0x18c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fa5c 	bl	8000588 <__aeabi_f2d>
 80020d0:	4604      	mov	r4, r0
 80020d2:	460d      	mov	r5, r1
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f7fe fa57 	bl	8000588 <__aeabi_f2d>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	ec43 2b10 	vmov	d0, r2, r3
 80020e2:	f006 fc81 	bl	80089e8 <sin>
 80020e6:	ec53 2b10 	vmov	r2, r3, d0
 80020ea:	4620      	mov	r0, r4
 80020ec:	4629      	mov	r1, r5
 80020ee:	f7fe faa3 	bl	8000638 <__aeabi_dmul>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4690      	mov	r8, r2
 80020f8:	4699      	mov	r9, r3
 80020fa:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <BLDC_FK+0x190>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe fa42 	bl	8000588 <__aeabi_f2d>
 8002104:	4604      	mov	r4, r0
 8002106:	460d      	mov	r5, r1
 8002108:	ed97 7a03 	vldr	s14, [r7, #12]
 800210c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002114:	ee17 0a90 	vmov	r0, s15
 8002118:	f7fe fa36 	bl	8000588 <__aeabi_f2d>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	ec43 2b10 	vmov	d0, r2, r3
 8002124:	f006 fc60 	bl	80089e8 <sin>
 8002128:	ec53 2b10 	vmov	r2, r3, d0
 800212c:	4620      	mov	r0, r4
 800212e:	4629      	mov	r1, r5
 8002130:	f7fe fa82 	bl	8000638 <__aeabi_dmul>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4640      	mov	r0, r8
 800213a:	4649      	mov	r1, r9
 800213c:	f7fe f8c6 	bl	80002cc <__adddf3>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	f7fe fd4e 	bl	8000be8 <__aeabi_d2f>
 800214c:	4603      	mov	r3, r0
 800214e:	613b      	str	r3, [r7, #16]
	printf("s1=%f\r\n",s1);
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f7fe fa19 	bl	8000588 <__aeabi_f2d>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4815      	ldr	r0, [pc, #84]	; (80021b0 <BLDC_FK+0x194>)
 800215c:	f004 fa6e 	bl	800663c <iprintf>
	printf("s2=%f\r\n",s2);
 8002160:	68b8      	ldr	r0, [r7, #8]
 8002162:	f7fe fa11 	bl	8000588 <__aeabi_f2d>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4812      	ldr	r0, [pc, #72]	; (80021b4 <BLDC_FK+0x198>)
 800216c:	f004 fa66 	bl	800663c <iprintf>
	printf("x=%f\r\n",x);
 8002170:	6978      	ldr	r0, [r7, #20]
 8002172:	f7fe fa09 	bl	8000588 <__aeabi_f2d>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	480f      	ldr	r0, [pc, #60]	; (80021b8 <BLDC_FK+0x19c>)
 800217c:	f004 fa5e 	bl	800663c <iprintf>
	printf("y=%f\r\n",y);
 8002180:	6938      	ldr	r0, [r7, #16]
 8002182:	f7fe fa01 	bl	8000588 <__aeabi_f2d>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	480c      	ldr	r0, [pc, #48]	; (80021bc <BLDC_FK+0x1a0>)
 800218c:	f004 fa56 	bl	800663c <iprintf>
	*xp=x;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	601a      	str	r2, [r3, #0]
	*yp=y;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	601a      	str	r2, [r3, #0]
}
 800219c:	bf00      	nop
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021a6:	bf00      	nop
 80021a8:	20000000 	.word	0x20000000
 80021ac:	20000004 	.word	0x20000004
 80021b0:	0800a630 	.word	0x0800a630
 80021b4:	0800a638 	.word	0x0800a638
 80021b8:	0800a640 	.word	0x0800a640
 80021bc:	0800a648 	.word	0x0800a648

080021c0 <BLDC_IK>:
void BLDC_IK(float x,float y,float* s1p,float* s2p){
 80021c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021c4:	ed2d 8b02 	vpush	{d8}
 80021c8:	b086      	sub	sp, #24
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	ed87 0a03 	vstr	s0, [r7, #12]
 80021d0:	edc7 0a02 	vstr	s1, [r7, #8]
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
	float s1=0.0;
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
	float s2=0.0;
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	613b      	str	r3, [r7, #16]
	s2=-acos((x*x+y*y-l1*l1-l2*l2)/(2*l1*l2));
 80021e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80021e8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80021ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80021f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80021f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f8:	4b9e      	ldr	r3, [pc, #632]	; (8002474 <BLDC_IK+0x2b4>)
 80021fa:	edd3 6a00 	vldr	s13, [r3]
 80021fe:	4b9d      	ldr	r3, [pc, #628]	; (8002474 <BLDC_IK+0x2b4>)
 8002200:	edd3 7a00 	vldr	s15, [r3]
 8002204:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002208:	ee37 7a67 	vsub.f32	s14, s14, s15
 800220c:	4b9a      	ldr	r3, [pc, #616]	; (8002478 <BLDC_IK+0x2b8>)
 800220e:	edd3 6a00 	vldr	s13, [r3]
 8002212:	4b99      	ldr	r3, [pc, #612]	; (8002478 <BLDC_IK+0x2b8>)
 8002214:	edd3 7a00 	vldr	s15, [r3]
 8002218:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800221c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002220:	4b94      	ldr	r3, [pc, #592]	; (8002474 <BLDC_IK+0x2b4>)
 8002222:	edd3 7a00 	vldr	s15, [r3]
 8002226:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800222a:	4b93      	ldr	r3, [pc, #588]	; (8002478 <BLDC_IK+0x2b8>)
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002234:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002238:	ee16 0a90 	vmov	r0, s13
 800223c:	f7fe f9a4 	bl	8000588 <__aeabi_f2d>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	ec43 2b10 	vmov	d0, r2, r3
 8002248:	f006 fc26 	bl	8008a98 <acos>
 800224c:	ec53 2b10 	vmov	r2, r3, d0
 8002250:	4610      	mov	r0, r2
 8002252:	4619      	mov	r1, r3
 8002254:	f7fe fcc8 	bl	8000be8 <__aeabi_d2f>
 8002258:	4603      	mov	r3, r0
 800225a:	ee07 3a90 	vmov	s15, r3
 800225e:	eef1 7a67 	vneg.f32	s15, s15
 8002262:	edc7 7a04 	vstr	s15, [r7, #16]
	s1=atan2((-l2*sin(s2)*x+(l1+l2*cos(s2))*y),((l1+l2*cos(s2))*x+l2*sin(s2)*y));
 8002266:	4b84      	ldr	r3, [pc, #528]	; (8002478 <BLDC_IK+0x2b8>)
 8002268:	edd3 7a00 	vldr	s15, [r3]
 800226c:	eef1 7a67 	vneg.f32	s15, s15
 8002270:	ee17 3a90 	vmov	r3, s15
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe f987 	bl	8000588 <__aeabi_f2d>
 800227a:	4604      	mov	r4, r0
 800227c:	460d      	mov	r5, r1
 800227e:	6938      	ldr	r0, [r7, #16]
 8002280:	f7fe f982 	bl	8000588 <__aeabi_f2d>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	ec43 2b10 	vmov	d0, r2, r3
 800228c:	f006 fbac 	bl	80089e8 <sin>
 8002290:	ec53 2b10 	vmov	r2, r3, d0
 8002294:	4620      	mov	r0, r4
 8002296:	4629      	mov	r1, r5
 8002298:	f7fe f9ce 	bl	8000638 <__aeabi_dmul>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4614      	mov	r4, r2
 80022a2:	461d      	mov	r5, r3
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f7fe f96f 	bl	8000588 <__aeabi_f2d>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4620      	mov	r0, r4
 80022b0:	4629      	mov	r1, r5
 80022b2:	f7fe f9c1 	bl	8000638 <__aeabi_dmul>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4692      	mov	sl, r2
 80022bc:	469b      	mov	fp, r3
 80022be:	4b6d      	ldr	r3, [pc, #436]	; (8002474 <BLDC_IK+0x2b4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe f960 	bl	8000588 <__aeabi_f2d>
 80022c8:	4604      	mov	r4, r0
 80022ca:	460d      	mov	r5, r1
 80022cc:	4b6a      	ldr	r3, [pc, #424]	; (8002478 <BLDC_IK+0x2b8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe f959 	bl	8000588 <__aeabi_f2d>
 80022d6:	4680      	mov	r8, r0
 80022d8:	4689      	mov	r9, r1
 80022da:	6938      	ldr	r0, [r7, #16]
 80022dc:	f7fe f954 	bl	8000588 <__aeabi_f2d>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	ec43 2b10 	vmov	d0, r2, r3
 80022e8:	f006 fae2 	bl	80088b0 <cos>
 80022ec:	ec53 2b10 	vmov	r2, r3, d0
 80022f0:	4640      	mov	r0, r8
 80022f2:	4649      	mov	r1, r9
 80022f4:	f7fe f9a0 	bl	8000638 <__aeabi_dmul>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4620      	mov	r0, r4
 80022fe:	4629      	mov	r1, r5
 8002300:	f7fd ffe4 	bl	80002cc <__adddf3>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4614      	mov	r4, r2
 800230a:	461d      	mov	r5, r3
 800230c:	68b8      	ldr	r0, [r7, #8]
 800230e:	f7fe f93b 	bl	8000588 <__aeabi_f2d>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4620      	mov	r0, r4
 8002318:	4629      	mov	r1, r5
 800231a:	f7fe f98d 	bl	8000638 <__aeabi_dmul>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4650      	mov	r0, sl
 8002324:	4659      	mov	r1, fp
 8002326:	f7fd ffd1 	bl	80002cc <__adddf3>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	ec43 2b18 	vmov	d8, r2, r3
 8002332:	4b50      	ldr	r3, [pc, #320]	; (8002474 <BLDC_IK+0x2b4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe f926 	bl	8000588 <__aeabi_f2d>
 800233c:	4604      	mov	r4, r0
 800233e:	460d      	mov	r5, r1
 8002340:	4b4d      	ldr	r3, [pc, #308]	; (8002478 <BLDC_IK+0x2b8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe f91f 	bl	8000588 <__aeabi_f2d>
 800234a:	4680      	mov	r8, r0
 800234c:	4689      	mov	r9, r1
 800234e:	6938      	ldr	r0, [r7, #16]
 8002350:	f7fe f91a 	bl	8000588 <__aeabi_f2d>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	ec43 2b10 	vmov	d0, r2, r3
 800235c:	f006 faa8 	bl	80088b0 <cos>
 8002360:	ec53 2b10 	vmov	r2, r3, d0
 8002364:	4640      	mov	r0, r8
 8002366:	4649      	mov	r1, r9
 8002368:	f7fe f966 	bl	8000638 <__aeabi_dmul>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4620      	mov	r0, r4
 8002372:	4629      	mov	r1, r5
 8002374:	f7fd ffaa 	bl	80002cc <__adddf3>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4614      	mov	r4, r2
 800237e:	461d      	mov	r5, r3
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f7fe f901 	bl	8000588 <__aeabi_f2d>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4620      	mov	r0, r4
 800238c:	4629      	mov	r1, r5
 800238e:	f7fe f953 	bl	8000638 <__aeabi_dmul>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4690      	mov	r8, r2
 8002398:	4699      	mov	r9, r3
 800239a:	4b37      	ldr	r3, [pc, #220]	; (8002478 <BLDC_IK+0x2b8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe f8f2 	bl	8000588 <__aeabi_f2d>
 80023a4:	4604      	mov	r4, r0
 80023a6:	460d      	mov	r5, r1
 80023a8:	6938      	ldr	r0, [r7, #16]
 80023aa:	f7fe f8ed 	bl	8000588 <__aeabi_f2d>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	ec43 2b10 	vmov	d0, r2, r3
 80023b6:	f006 fb17 	bl	80089e8 <sin>
 80023ba:	ec53 2b10 	vmov	r2, r3, d0
 80023be:	4620      	mov	r0, r4
 80023c0:	4629      	mov	r1, r5
 80023c2:	f7fe f939 	bl	8000638 <__aeabi_dmul>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4614      	mov	r4, r2
 80023cc:	461d      	mov	r5, r3
 80023ce:	68b8      	ldr	r0, [r7, #8]
 80023d0:	f7fe f8da 	bl	8000588 <__aeabi_f2d>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4620      	mov	r0, r4
 80023da:	4629      	mov	r1, r5
 80023dc:	f7fe f92c 	bl	8000638 <__aeabi_dmul>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4640      	mov	r0, r8
 80023e6:	4649      	mov	r1, r9
 80023e8:	f7fd ff70 	bl	80002cc <__adddf3>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	ec43 2b17 	vmov	d7, r2, r3
 80023f4:	eeb0 1a47 	vmov.f32	s2, s14
 80023f8:	eef0 1a67 	vmov.f32	s3, s15
 80023fc:	eeb0 0a48 	vmov.f32	s0, s16
 8002400:	eef0 0a68 	vmov.f32	s1, s17
 8002404:	f006 fb7c 	bl	8008b00 <atan2>
 8002408:	ec53 2b10 	vmov	r2, r3, d0
 800240c:	4610      	mov	r0, r2
 800240e:	4619      	mov	r1, r3
 8002410:	f7fe fbea 	bl	8000be8 <__aeabi_d2f>
 8002414:	4603      	mov	r3, r0
 8002416:	617b      	str	r3, [r7, #20]
	printf("s1=%f\r\n",s1);
 8002418:	6978      	ldr	r0, [r7, #20]
 800241a:	f7fe f8b5 	bl	8000588 <__aeabi_f2d>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4816      	ldr	r0, [pc, #88]	; (800247c <BLDC_IK+0x2bc>)
 8002424:	f004 f90a 	bl	800663c <iprintf>
	printf("s2=%f\r\n",s2);
 8002428:	6938      	ldr	r0, [r7, #16]
 800242a:	f7fe f8ad 	bl	8000588 <__aeabi_f2d>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4813      	ldr	r0, [pc, #76]	; (8002480 <BLDC_IK+0x2c0>)
 8002434:	f004 f902 	bl	800663c <iprintf>
	printf("x=%f\r\n",x);
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f7fe f8a5 	bl	8000588 <__aeabi_f2d>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4810      	ldr	r0, [pc, #64]	; (8002484 <BLDC_IK+0x2c4>)
 8002444:	f004 f8fa 	bl	800663c <iprintf>
	printf("y=%f\r\n",y);
 8002448:	68b8      	ldr	r0, [r7, #8]
 800244a:	f7fe f89d 	bl	8000588 <__aeabi_f2d>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	480d      	ldr	r0, [pc, #52]	; (8002488 <BLDC_IK+0x2c8>)
 8002454:	f004 f8f2 	bl	800663c <iprintf>
	*s1p=s1;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	601a      	str	r2, [r3, #0]
	*s2p=s2;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	601a      	str	r2, [r3, #0]
}
 8002464:	bf00      	nop
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	ecbd 8b02 	vpop	{d8}
 800246e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002472:	bf00      	nop
 8002474:	20000000 	.word	0x20000000
 8002478:	20000004 	.word	0x20000004
 800247c:	0800a630 	.word	0x0800a630
 8002480:	0800a638 	.word	0x0800a638
 8002484:	0800a640 	.word	0x0800a640
 8002488:	0800a648 	.word	0x0800a648

0800248c <HAL_UART_RxCpltCallback>:
//  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
//  return len;
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*UartHandle)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
	get_uart_flag=1;
 8002494:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <HAL_UART_RxCpltCallback+0x28>)
 8002496:	2201      	movs	r2, #1
 8002498:	701a      	strb	r2, [r3, #0]
//	HAL_UART_Transmit(&huart2, (uint8_t *)RxData, buffersize,10);
	HAL_UART_Receive_IT(&huart2, (uint8_t *)RxData, buffersize);
 800249a:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <HAL_UART_RxCpltCallback+0x2c>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	4906      	ldr	r1, [pc, #24]	; (80024bc <HAL_UART_RxCpltCallback+0x30>)
 80024a4:	4806      	ldr	r0, [pc, #24]	; (80024c0 <HAL_UART_RxCpltCallback+0x34>)
 80024a6:	f002 fd03 	bl	8004eb0 <HAL_UART_Receive_IT>


}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	2000031d 	.word	0x2000031d
 80024b8:	20000008 	.word	0x20000008
 80024bc:	20000300 	.word	0x20000300
 80024c0:	20000254 	.word	0x20000254

080024c4 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
	  nextcan_flag=1;
 80024cc:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	701a      	strb	r2, [r3, #0]
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	2000031f 	.word	0x2000031f

080024e4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	get_can_flag=1;
 80024ec:	4b06      	ldr	r3, [pc, #24]	; (8002508 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
//	printf("RxCan\r\n");
	HAL_CAN_GetRxMessage(&hcan2,CAN_RX_FIFO0, &RxHeader,data);
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80024f4:	4a06      	ldr	r2, [pc, #24]	; (8002510 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80024f6:	2100      	movs	r1, #0
 80024f8:	4806      	ldr	r0, [pc, #24]	; (8002514 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80024fa:	f000 ff80 	bl	80033fe <HAL_CAN_GetRxMessage>

}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	2000031e 	.word	0x2000031e
 800250c:	2000030c 	.word	0x2000030c
 8002510:	200002d8 	.word	0x200002d8
 8002514:	2000022c 	.word	0x2000022c

08002518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800251c:	b672      	cpsid	i
}
 800251e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002520:	e7fe      	b.n	8002520 <Error_Handler+0x8>

08002522 <fmaxf>:
#include "math_ops.h"


float fmaxf(float x, float y){
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	ed87 0a01 	vstr	s0, [r7, #4]
 800252c:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8002530:	ed97 7a01 	vldr	s14, [r7, #4]
 8002534:	edd7 7a00 	vldr	s15, [r7]
 8002538:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800253c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002540:	dd01      	ble.n	8002546 <fmaxf+0x24>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	e000      	b.n	8002548 <fmaxf+0x26>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	ee07 3a90 	vmov	s15, r3
    }
 800254c:	eeb0 0a67 	vmov.f32	s0, s15
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <fminf>:

float fminf(float x, float y){
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	ed87 0a01 	vstr	s0, [r7, #4]
 8002564:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 8002568:	ed97 7a01 	vldr	s14, [r7, #4]
 800256c:	edd7 7a00 	vldr	s15, [r7]
 8002570:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002578:	d501      	bpl.n	800257e <fminf+0x24>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	e000      	b.n	8002580 <fminf+0x26>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	ee07 3a90 	vmov	s15, r3
    }
 8002584:	eeb0 0a67 	vmov.f32	s0, s15
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <float_to_uint>:
        *y = *y * limit/norm;
        }
    }


int float_to_uint(float x, float x_min, float x_max, int bits){
 8002592:	b480      	push	{r7}
 8002594:	b087      	sub	sp, #28
 8002596:	af00      	add	r7, sp, #0
 8002598:	ed87 0a03 	vstr	s0, [r7, #12]
 800259c:	edc7 0a02 	vstr	s1, [r7, #8]
 80025a0:	ed87 1a01 	vstr	s2, [r7, #4]
 80025a4:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 80025a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80025aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80025ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b2:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 80025ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80025be:	edd7 7a04 	vldr	s15, [r7, #16]
 80025c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025c6:	2201      	movs	r2, #1
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	ee07 3a90 	vmov	s15, r3
 80025d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025d8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80025dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80025e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025e8:	ee17 3a90 	vmov	r3, s15
    }
 80025ec:	4618      	mov	r0, r3
 80025ee:	371c      	adds	r7, #28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <uint_to_float>:


float uint_to_float(int x_int, float x_min, float x_max, int bits){
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	ed87 0a02 	vstr	s0, [r7, #8]
 8002604:	edc7 0a01 	vstr	s1, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 800260a:	ed97 7a01 	vldr	s14, [r7, #4]
 800260e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002616:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	ee07 3a90 	vmov	s15, r3
 8002624:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002628:	edd7 7a05 	vldr	s15, [r7, #20]
 800262c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002630:	2201      	movs	r2, #1
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	3b01      	subs	r3, #1
 800263a:	ee07 3a90 	vmov	s15, r3
 800263e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002646:	edd7 7a04 	vldr	s15, [r7, #16]
 800264a:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 800264e:	eeb0 0a67 	vmov.f32	s0, s15
 8002652:	371c      	adds	r7, #28
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <HAL_MspInit+0x4c>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	4a0f      	ldr	r2, [pc, #60]	; (80026a8 <HAL_MspInit+0x4c>)
 800266c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002670:	6453      	str	r3, [r2, #68]	; 0x44
 8002672:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <HAL_MspInit+0x4c>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267a:	607b      	str	r3, [r7, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	603b      	str	r3, [r7, #0]
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_MspInit+0x4c>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	4a08      	ldr	r2, [pc, #32]	; (80026a8 <HAL_MspInit+0x4c>)
 8002688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268c:	6413      	str	r3, [r2, #64]	; 0x40
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_MspInit+0x4c>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800

080026ac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08c      	sub	sp, #48	; 0x30
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 031c 	add.w	r3, r7, #28
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a64      	ldr	r2, [pc, #400]	; (800285c <HAL_CAN_MspInit+0x1b0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d157      	bne.n	800277e <HAL_CAN_MspInit+0xd2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80026ce:	4b64      	ldr	r3, [pc, #400]	; (8002860 <HAL_CAN_MspInit+0x1b4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	3301      	adds	r3, #1
 80026d4:	4a62      	ldr	r2, [pc, #392]	; (8002860 <HAL_CAN_MspInit+0x1b4>)
 80026d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80026d8:	4b61      	ldr	r3, [pc, #388]	; (8002860 <HAL_CAN_MspInit+0x1b4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d10d      	bne.n	80026fc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80026e0:	2300      	movs	r3, #0
 80026e2:	61bb      	str	r3, [r7, #24]
 80026e4:	4b5f      	ldr	r3, [pc, #380]	; (8002864 <HAL_CAN_MspInit+0x1b8>)
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	4a5e      	ldr	r2, [pc, #376]	; (8002864 <HAL_CAN_MspInit+0x1b8>)
 80026ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026ee:	6413      	str	r3, [r2, #64]	; 0x40
 80026f0:	4b5c      	ldr	r3, [pc, #368]	; (8002864 <HAL_CAN_MspInit+0x1b8>)
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	4b58      	ldr	r3, [pc, #352]	; (8002864 <HAL_CAN_MspInit+0x1b8>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	4a57      	ldr	r2, [pc, #348]	; (8002864 <HAL_CAN_MspInit+0x1b8>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6313      	str	r3, [r2, #48]	; 0x30
 800270c:	4b55      	ldr	r3, [pc, #340]	; (8002864 <HAL_CAN_MspInit+0x1b8>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002718:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800271c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002726:	2303      	movs	r3, #3
 8002728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800272a:	2309      	movs	r3, #9
 800272c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272e:	f107 031c 	add.w	r3, r7, #28
 8002732:	4619      	mov	r1, r3
 8002734:	484c      	ldr	r0, [pc, #304]	; (8002868 <HAL_CAN_MspInit+0x1bc>)
 8002736:	f001 fb63 	bl	8003e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800273a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800273e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002740:	2302      	movs	r3, #2
 8002742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002744:	2301      	movs	r3, #1
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002748:	2303      	movs	r3, #3
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800274c:	2309      	movs	r3, #9
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002750:	f107 031c 	add.w	r3, r7, #28
 8002754:	4619      	mov	r1, r3
 8002756:	4844      	ldr	r0, [pc, #272]	; (8002868 <HAL_CAN_MspInit+0x1bc>)
 8002758:	f001 fb52 	bl	8003e00 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800275c:	2200      	movs	r2, #0
 800275e:	2100      	movs	r1, #0
 8002760:	2013      	movs	r0, #19
 8002762:	f001 fa84 	bl	8003c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002766:	2013      	movs	r0, #19
 8002768:	f001 fa9d 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800276c:	2200      	movs	r2, #0
 800276e:	2100      	movs	r1, #0
 8002770:	2014      	movs	r0, #20
 8002772:	f001 fa7c 	bl	8003c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002776:	2014      	movs	r0, #20
 8002778:	f001 fa95 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800277c:	e069      	b.n	8002852 <HAL_CAN_MspInit+0x1a6>
  else if(hcan->Instance==CAN2)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a3a      	ldr	r2, [pc, #232]	; (800286c <HAL_CAN_MspInit+0x1c0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d164      	bne.n	8002852 <HAL_CAN_MspInit+0x1a6>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002788:	2300      	movs	r3, #0
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	4b35      	ldr	r3, [pc, #212]	; (8002864 <HAL_CAN_MspInit+0x1b8>)
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	4a34      	ldr	r2, [pc, #208]	; (8002864 <HAL_CAN_MspInit+0x1b8>)
 8002792:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002796:	6413      	str	r3, [r2, #64]	; 0x40
 8002798:	4b32      	ldr	r3, [pc, #200]	; (8002864 <HAL_CAN_MspInit+0x1b8>)
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80027a4:	4b2e      	ldr	r3, [pc, #184]	; (8002860 <HAL_CAN_MspInit+0x1b4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	3301      	adds	r3, #1
 80027aa:	4a2d      	ldr	r2, [pc, #180]	; (8002860 <HAL_CAN_MspInit+0x1b4>)
 80027ac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80027ae:	4b2c      	ldr	r3, [pc, #176]	; (8002860 <HAL_CAN_MspInit+0x1b4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d10d      	bne.n	80027d2 <HAL_CAN_MspInit+0x126>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	4b2a      	ldr	r3, [pc, #168]	; (8002864 <HAL_CAN_MspInit+0x1b8>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	4a29      	ldr	r2, [pc, #164]	; (8002864 <HAL_CAN_MspInit+0x1b8>)
 80027c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027c4:	6413      	str	r3, [r2, #64]	; 0x40
 80027c6:	4b27      	ldr	r3, [pc, #156]	; (8002864 <HAL_CAN_MspInit+0x1b8>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	4b23      	ldr	r3, [pc, #140]	; (8002864 <HAL_CAN_MspInit+0x1b8>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a22      	ldr	r2, [pc, #136]	; (8002864 <HAL_CAN_MspInit+0x1b8>)
 80027dc:	f043 0302 	orr.w	r3, r3, #2
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b20      	ldr	r3, [pc, #128]	; (8002864 <HAL_CAN_MspInit+0x1b8>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80027ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f4:	2302      	movs	r3, #2
 80027f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fc:	2303      	movs	r3, #3
 80027fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002800:	2309      	movs	r3, #9
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002804:	f107 031c 	add.w	r3, r7, #28
 8002808:	4619      	mov	r1, r3
 800280a:	4819      	ldr	r0, [pc, #100]	; (8002870 <HAL_CAN_MspInit+0x1c4>)
 800280c:	f001 faf8 	bl	8003e00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002816:	2302      	movs	r3, #2
 8002818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800281a:	2301      	movs	r3, #1
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281e:	2303      	movs	r3, #3
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002822:	2309      	movs	r3, #9
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002826:	f107 031c 	add.w	r3, r7, #28
 800282a:	4619      	mov	r1, r3
 800282c:	4810      	ldr	r0, [pc, #64]	; (8002870 <HAL_CAN_MspInit+0x1c4>)
 800282e:	f001 fae7 	bl	8003e00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8002832:	2200      	movs	r2, #0
 8002834:	2100      	movs	r1, #0
 8002836:	203f      	movs	r0, #63	; 0x3f
 8002838:	f001 fa19 	bl	8003c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800283c:	203f      	movs	r0, #63	; 0x3f
 800283e:	f001 fa32 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8002842:	2200      	movs	r2, #0
 8002844:	2100      	movs	r1, #0
 8002846:	2040      	movs	r0, #64	; 0x40
 8002848:	f001 fa11 	bl	8003c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800284c:	2040      	movs	r0, #64	; 0x40
 800284e:	f001 fa2a 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
}
 8002852:	bf00      	nop
 8002854:	3730      	adds	r7, #48	; 0x30
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40006400 	.word	0x40006400
 8002860:	20000334 	.word	0x20000334
 8002864:	40023800 	.word	0x40023800
 8002868:	40020000 	.word	0x40020000
 800286c:	40006800 	.word	0x40006800
 8002870:	40020400 	.word	0x40020400

08002874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	; 0x28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <HAL_UART_MspInit+0x94>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d133      	bne.n	80028fe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	4b1c      	ldr	r3, [pc, #112]	; (800290c <HAL_UART_MspInit+0x98>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	4a1b      	ldr	r2, [pc, #108]	; (800290c <HAL_UART_MspInit+0x98>)
 80028a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a4:	6413      	str	r3, [r2, #64]	; 0x40
 80028a6:	4b19      	ldr	r3, [pc, #100]	; (800290c <HAL_UART_MspInit+0x98>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <HAL_UART_MspInit+0x98>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	4a14      	ldr	r2, [pc, #80]	; (800290c <HAL_UART_MspInit+0x98>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	6313      	str	r3, [r2, #48]	; 0x30
 80028c2:	4b12      	ldr	r3, [pc, #72]	; (800290c <HAL_UART_MspInit+0x98>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80028ce:	230c      	movs	r3, #12
 80028d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d2:	2302      	movs	r3, #2
 80028d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028da:	2303      	movs	r3, #3
 80028dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028de:	2307      	movs	r3, #7
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e2:	f107 0314 	add.w	r3, r7, #20
 80028e6:	4619      	mov	r1, r3
 80028e8:	4809      	ldr	r0, [pc, #36]	; (8002910 <HAL_UART_MspInit+0x9c>)
 80028ea:	f001 fa89 	bl	8003e00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80028ee:	2200      	movs	r2, #0
 80028f0:	2100      	movs	r1, #0
 80028f2:	2026      	movs	r0, #38	; 0x26
 80028f4:	f001 f9bb 	bl	8003c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028f8:	2026      	movs	r0, #38	; 0x26
 80028fa:	f001 f9d4 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028fe:	bf00      	nop
 8002900:	3728      	adds	r7, #40	; 0x28
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40004400 	.word	0x40004400
 800290c:	40023800 	.word	0x40023800
 8002910:	40020000 	.word	0x40020000

08002914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002918:	e7fe      	b.n	8002918 <NMI_Handler+0x4>

0800291a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800291e:	e7fe      	b.n	800291e <HardFault_Handler+0x4>

08002920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002924:	e7fe      	b.n	8002924 <MemManage_Handler+0x4>

08002926 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800292a:	e7fe      	b.n	800292a <BusFault_Handler+0x4>

0800292c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002930:	e7fe      	b.n	8002930 <UsageFault_Handler+0x4>

08002932 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002932:	b480      	push	{r7}
 8002934:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002960:	f000 f990 	bl	8002c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002964:	bf00      	nop
 8002966:	bd80      	pop	{r7, pc}

08002968 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800296c:	4802      	ldr	r0, [pc, #8]	; (8002978 <CAN1_TX_IRQHandler+0x10>)
 800296e:	f000 fe7e 	bl	800366e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000204 	.word	0x20000204

0800297c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002980:	4802      	ldr	r0, [pc, #8]	; (800298c <CAN1_RX0_IRQHandler+0x10>)
 8002982:	f000 fe74 	bl	800366e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000204 	.word	0x20000204

08002990 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002994:	2020      	movs	r0, #32
 8002996:	f001 fbf9 	bl	800418c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029a4:	4802      	ldr	r0, [pc, #8]	; (80029b0 <USART2_IRQHandler+0x10>)
 80029a6:	f002 fab3 	bl	8004f10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000254 	.word	0x20000254

080029b4 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80029b8:	4802      	ldr	r0, [pc, #8]	; (80029c4 <CAN2_TX_IRQHandler+0x10>)
 80029ba:	f000 fe58 	bl	800366e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	2000022c 	.word	0x2000022c

080029c8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80029cc:	4802      	ldr	r0, [pc, #8]	; (80029d8 <CAN2_RX0_IRQHandler+0x10>)
 80029ce:	f000 fe4e 	bl	800366e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	2000022c 	.word	0x2000022c

080029dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
	return 1;
 80029e0:	2301      	movs	r3, #1
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <_kill>:

int _kill(int pid, int sig)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80029f6:	f003 f985 	bl	8005d04 <__errno>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2216      	movs	r2, #22
 80029fe:	601a      	str	r2, [r3, #0]
	return -1;
 8002a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <_exit>:

void _exit (int status)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff ffe7 	bl	80029ec <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a1e:	e7fe      	b.n	8002a1e <_exit+0x12>

08002a20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	e00a      	b.n	8002a48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a32:	f3af 8000 	nop.w
 8002a36:	4601      	mov	r1, r0
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	60ba      	str	r2, [r7, #8]
 8002a3e:	b2ca      	uxtb	r2, r1
 8002a40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	3301      	adds	r3, #1
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	dbf0      	blt.n	8002a32 <_read+0x12>
	}

return len;
 8002a50:	687b      	ldr	r3, [r7, #4]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	e009      	b.n	8002a80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	60ba      	str	r2, [r7, #8]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	dbf1      	blt.n	8002a6c <_write+0x12>
	}
	return len;
 8002a88:	687b      	ldr	r3, [r7, #4]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <_close>:

int _close(int file)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
	return -1;
 8002a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aba:	605a      	str	r2, [r3, #4]
	return 0;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <_isatty>:

int _isatty(int file)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
	return 1;
 8002ad2:	2301      	movs	r3, #1
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
	return 0;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
	...

08002afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b04:	4a14      	ldr	r2, [pc, #80]	; (8002b58 <_sbrk+0x5c>)
 8002b06:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <_sbrk+0x60>)
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b10:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <_sbrk+0x64>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d102      	bne.n	8002b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b18:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <_sbrk+0x64>)
 8002b1a:	4a12      	ldr	r2, [pc, #72]	; (8002b64 <_sbrk+0x68>)
 8002b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b1e:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <_sbrk+0x64>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d207      	bcs.n	8002b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b2c:	f003 f8ea 	bl	8005d04 <__errno>
 8002b30:	4603      	mov	r3, r0
 8002b32:	220c      	movs	r2, #12
 8002b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b3a:	e009      	b.n	8002b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b3c:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <_sbrk+0x64>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b42:	4b07      	ldr	r3, [pc, #28]	; (8002b60 <_sbrk+0x64>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4413      	add	r3, r2
 8002b4a:	4a05      	ldr	r2, [pc, #20]	; (8002b60 <_sbrk+0x64>)
 8002b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20020000 	.word	0x20020000
 8002b5c:	00000400 	.word	0x00000400
 8002b60:	20000338 	.word	0x20000338
 8002b64:	20000350 	.word	0x20000350

08002b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <SystemInit+0x20>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b72:	4a05      	ldr	r2, [pc, #20]	; (8002b88 <SystemInit+0x20>)
 8002b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b90:	480d      	ldr	r0, [pc, #52]	; (8002bc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b92:	490e      	ldr	r1, [pc, #56]	; (8002bcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b94:	4a0e      	ldr	r2, [pc, #56]	; (8002bd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b98:	e002      	b.n	8002ba0 <LoopCopyDataInit>

08002b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b9e:	3304      	adds	r3, #4

08002ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ba4:	d3f9      	bcc.n	8002b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ba6:	4a0b      	ldr	r2, [pc, #44]	; (8002bd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ba8:	4c0b      	ldr	r4, [pc, #44]	; (8002bd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bac:	e001      	b.n	8002bb2 <LoopFillZerobss>

08002bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bb0:	3204      	adds	r2, #4

08002bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bb4:	d3fb      	bcc.n	8002bae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bb6:	f7ff ffd7 	bl	8002b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bba:	f003 f8a9 	bl	8005d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bbe:	f7fe fd89 	bl	80016d4 <main>
  bx  lr    
 8002bc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bcc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002bd0:	0800aca0 	.word	0x0800aca0
  ldr r2, =_sbss
 8002bd4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002bd8:	20000350 	.word	0x20000350

08002bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bdc:	e7fe      	b.n	8002bdc <ADC_IRQHandler>
	...

08002be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002be4:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <HAL_Init+0x40>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a0d      	ldr	r2, [pc, #52]	; (8002c20 <HAL_Init+0x40>)
 8002bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <HAL_Init+0x40>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <HAL_Init+0x40>)
 8002bf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bfc:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <HAL_Init+0x40>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a07      	ldr	r2, [pc, #28]	; (8002c20 <HAL_Init+0x40>)
 8002c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c08:	2003      	movs	r0, #3
 8002c0a:	f001 f825 	bl	8003c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c0e:	2000      	movs	r0, #0
 8002c10:	f000 f808 	bl	8002c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c14:	f7ff fd22 	bl	800265c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40023c00 	.word	0x40023c00

08002c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c2c:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <HAL_InitTick+0x54>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <HAL_InitTick+0x58>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	4619      	mov	r1, r3
 8002c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c42:	4618      	mov	r0, r3
 8002c44:	f001 f83d 	bl	8003cc2 <HAL_SYSTICK_Config>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e00e      	b.n	8002c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b0f      	cmp	r3, #15
 8002c56:	d80a      	bhi.n	8002c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c58:	2200      	movs	r2, #0
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c60:	f001 f805 	bl	8003c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c64:	4a06      	ldr	r2, [pc, #24]	; (8002c80 <HAL_InitTick+0x5c>)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e000      	b.n	8002c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	2000000c 	.word	0x2000000c
 8002c7c:	20000014 	.word	0x20000014
 8002c80:	20000010 	.word	0x20000010

08002c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_IncTick+0x20>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <HAL_IncTick+0x24>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4413      	add	r3, r2
 8002c94:	4a04      	ldr	r2, [pc, #16]	; (8002ca8 <HAL_IncTick+0x24>)
 8002c96:	6013      	str	r3, [r2, #0]
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	20000014 	.word	0x20000014
 8002ca8:	2000033c 	.word	0x2000033c

08002cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return uwTick;
 8002cb0:	4b03      	ldr	r3, [pc, #12]	; (8002cc0 <HAL_GetTick+0x14>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	2000033c 	.word	0x2000033c

08002cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ccc:	f7ff ffee 	bl	8002cac <HAL_GetTick>
 8002cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cdc:	d005      	beq.n	8002cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cde:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <HAL_Delay+0x44>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cea:	bf00      	nop
 8002cec:	f7ff ffde 	bl	8002cac <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d8f7      	bhi.n	8002cec <HAL_Delay+0x28>
  {
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	bf00      	nop
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000014 	.word	0x20000014

08002d0c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e0ed      	b.n	8002efa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d102      	bne.n	8002d30 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff fcbe 	bl	80026ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d40:	f7ff ffb4 	bl	8002cac <HAL_GetTick>
 8002d44:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d46:	e012      	b.n	8002d6e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d48:	f7ff ffb0 	bl	8002cac <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b0a      	cmp	r3, #10
 8002d54:	d90b      	bls.n	8002d6e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2205      	movs	r2, #5
 8002d66:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e0c5      	b.n	8002efa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0e5      	beq.n	8002d48 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0202 	bic.w	r2, r2, #2
 8002d8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d8c:	f7ff ff8e 	bl	8002cac <HAL_GetTick>
 8002d90:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d92:	e012      	b.n	8002dba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d94:	f7ff ff8a 	bl	8002cac <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b0a      	cmp	r3, #10
 8002da0:	d90b      	bls.n	8002dba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2205      	movs	r2, #5
 8002db2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e09f      	b.n	8002efa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1e5      	bne.n	8002d94 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	7e1b      	ldrb	r3, [r3, #24]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d108      	bne.n	8002de2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	e007      	b.n	8002df2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002df0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	7e5b      	ldrb	r3, [r3, #25]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d108      	bne.n	8002e0c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	e007      	b.n	8002e1c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	7e9b      	ldrb	r3, [r3, #26]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d108      	bne.n	8002e36 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0220 	orr.w	r2, r2, #32
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	e007      	b.n	8002e46 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0220 	bic.w	r2, r2, #32
 8002e44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	7edb      	ldrb	r3, [r3, #27]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d108      	bne.n	8002e60 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0210 	bic.w	r2, r2, #16
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	e007      	b.n	8002e70 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0210 	orr.w	r2, r2, #16
 8002e6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	7f1b      	ldrb	r3, [r3, #28]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d108      	bne.n	8002e8a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0208 	orr.w	r2, r2, #8
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	e007      	b.n	8002e9a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0208 	bic.w	r2, r2, #8
 8002e98:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	7f5b      	ldrb	r3, [r3, #29]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d108      	bne.n	8002eb4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 0204 	orr.w	r2, r2, #4
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	e007      	b.n	8002ec4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0204 	bic.w	r2, r2, #4
 8002ec2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	ea42 0103 	orr.w	r1, r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	1e5a      	subs	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f1a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002f1c:	7cfb      	ldrb	r3, [r7, #19]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d003      	beq.n	8002f2a <HAL_CAN_ConfigFilter+0x26>
 8002f22:	7cfb      	ldrb	r3, [r7, #19]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	f040 80be 	bne.w	80030a6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002f2a:	4b65      	ldr	r3, [pc, #404]	; (80030c0 <HAL_CAN_ConfigFilter+0x1bc>)
 8002f2c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f34:	f043 0201 	orr.w	r2, r3, #1
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f44:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	021b      	lsls	r3, r3, #8
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f003 031f 	and.w	r3, r3, #31
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	401a      	ands	r2, r3
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d123      	bne.n	8002fd4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	401a      	ands	r2, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002fae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	3248      	adds	r2, #72	; 0x48
 8002fb4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002fc8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002fca:	6979      	ldr	r1, [r7, #20]
 8002fcc:	3348      	adds	r3, #72	; 0x48
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	440b      	add	r3, r1
 8002fd2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d122      	bne.n	8003022 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ffc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	3248      	adds	r2, #72	; 0x48
 8003002:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003016:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003018:	6979      	ldr	r1, [r7, #20]
 800301a:	3348      	adds	r3, #72	; 0x48
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	440b      	add	r3, r1
 8003020:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d109      	bne.n	800303e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	43db      	mvns	r3, r3
 8003034:	401a      	ands	r2, r3
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800303c:	e007      	b.n	800304e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	431a      	orrs	r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d109      	bne.n	800306a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	43db      	mvns	r3, r3
 8003060:	401a      	ands	r2, r3
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003068:	e007      	b.n	800307a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	431a      	orrs	r2, r3
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d107      	bne.n	8003092 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	431a      	orrs	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003098:	f023 0201 	bic.w	r2, r3, #1
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e006      	b.n	80030b4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
  }
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	371c      	adds	r7, #28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	40006400 	.word	0x40006400

080030c4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d12e      	bne.n	8003136 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0201 	bic.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030f0:	f7ff fddc 	bl	8002cac <HAL_GetTick>
 80030f4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80030f6:	e012      	b.n	800311e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030f8:	f7ff fdd8 	bl	8002cac <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b0a      	cmp	r3, #10
 8003104:	d90b      	bls.n	800311e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2205      	movs	r2, #5
 8003116:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e012      	b.n	8003144 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1e5      	bne.n	80030f8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	e006      	b.n	8003144 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
  }
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3020 	ldrb.w	r3, [r3, #32]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d133      	bne.n	80031c8 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003170:	f7ff fd9c 	bl	8002cac <HAL_GetTick>
 8003174:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003176:	e012      	b.n	800319e <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003178:	f7ff fd98 	bl	8002cac <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b0a      	cmp	r3, #10
 8003184:	d90b      	bls.n	800319e <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2205      	movs	r2, #5
 8003196:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e01b      	b.n	80031d6 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0e5      	beq.n	8003178 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0202 	bic.w	r2, r2, #2
 80031ba:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	e006      	b.n	80031d6 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
  }
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80031de:	b480      	push	{r7}
 80031e0:	b089      	sub	sp, #36	; 0x24
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	607a      	str	r2, [r7, #4]
 80031ea:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80031fc:	7ffb      	ldrb	r3, [r7, #31]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d003      	beq.n	800320a <HAL_CAN_AddTxMessage+0x2c>
 8003202:	7ffb      	ldrb	r3, [r7, #31]
 8003204:	2b02      	cmp	r3, #2
 8003206:	f040 80b8 	bne.w	800337a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10a      	bne.n	800322a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800321a:	2b00      	cmp	r3, #0
 800321c:	d105      	bne.n	800322a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80a0 	beq.w	800336a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	0e1b      	lsrs	r3, r3, #24
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d907      	bls.n	800324a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e09e      	b.n	8003388 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800324a:	2201      	movs	r2, #1
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	409a      	lsls	r2, r3
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10d      	bne.n	8003278 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003266:	68f9      	ldr	r1, [r7, #12]
 8003268:	6809      	ldr	r1, [r1, #0]
 800326a:	431a      	orrs	r2, r3
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	3318      	adds	r3, #24
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	440b      	add	r3, r1
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	e00f      	b.n	8003298 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003282:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003288:	68f9      	ldr	r1, [r7, #12]
 800328a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800328c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	3318      	adds	r3, #24
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	440b      	add	r3, r1
 8003296:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6819      	ldr	r1, [r3, #0]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	3318      	adds	r3, #24
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	440b      	add	r3, r1
 80032a8:	3304      	adds	r3, #4
 80032aa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	7d1b      	ldrb	r3, [r3, #20]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d111      	bne.n	80032d8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	3318      	adds	r3, #24
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	4413      	add	r3, r2
 80032c0:	3304      	adds	r3, #4
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	6811      	ldr	r1, [r2, #0]
 80032c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	3318      	adds	r3, #24
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	440b      	add	r3, r1
 80032d4:	3304      	adds	r3, #4
 80032d6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3307      	adds	r3, #7
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	061a      	lsls	r2, r3, #24
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3306      	adds	r3, #6
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	041b      	lsls	r3, r3, #16
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3305      	adds	r3, #5
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	021b      	lsls	r3, r3, #8
 80032f2:	4313      	orrs	r3, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	3204      	adds	r2, #4
 80032f8:	7812      	ldrb	r2, [r2, #0]
 80032fa:	4610      	mov	r0, r2
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	6811      	ldr	r1, [r2, #0]
 8003300:	ea43 0200 	orr.w	r2, r3, r0
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	440b      	add	r3, r1
 800330a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800330e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3303      	adds	r3, #3
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	061a      	lsls	r2, r3, #24
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3302      	adds	r3, #2
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	041b      	lsls	r3, r3, #16
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3301      	adds	r3, #1
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	021b      	lsls	r3, r3, #8
 800332a:	4313      	orrs	r3, r2
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	7812      	ldrb	r2, [r2, #0]
 8003330:	4610      	mov	r0, r2
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	6811      	ldr	r1, [r2, #0]
 8003336:	ea43 0200 	orr.w	r2, r3, r0
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	440b      	add	r3, r1
 8003340:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003344:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	3318      	adds	r3, #24
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	4413      	add	r3, r2
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	6811      	ldr	r1, [r2, #0]
 8003358:	f043 0201 	orr.w	r2, r3, #1
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	3318      	adds	r3, #24
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	440b      	add	r3, r1
 8003364:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	e00e      	b.n	8003388 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e006      	b.n	8003388 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
  }
}
 8003388:	4618      	mov	r0, r3
 800338a:	3724      	adds	r7, #36	; 0x24
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033a6:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80033a8:	7afb      	ldrb	r3, [r7, #11]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d002      	beq.n	80033b4 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80033ae:	7afb      	ldrb	r3, [r7, #11]
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d11d      	bne.n	80033f0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	3301      	adds	r3, #1
 80033c6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3301      	adds	r3, #1
 80033da:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	3301      	adds	r3, #1
 80033ee:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80033f0:	68fb      	ldr	r3, [r7, #12]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80033fe:	b480      	push	{r7}
 8003400:	b087      	sub	sp, #28
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
 800340a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003412:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003414:	7dfb      	ldrb	r3, [r7, #23]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d003      	beq.n	8003422 <HAL_CAN_GetRxMessage+0x24>
 800341a:	7dfb      	ldrb	r3, [r7, #23]
 800341c:	2b02      	cmp	r3, #2
 800341e:	f040 80f3 	bne.w	8003608 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10e      	bne.n	8003446 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d116      	bne.n	8003464 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e0e7      	b.n	8003616 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d107      	bne.n	8003464 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0d8      	b.n	8003616 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	331b      	adds	r3, #27
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	4413      	add	r3, r2
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0204 	and.w	r2, r3, #4
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10c      	bne.n	800349c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	331b      	adds	r3, #27
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	4413      	add	r3, r2
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	0d5b      	lsrs	r3, r3, #21
 8003492:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	e00b      	b.n	80034b4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	331b      	adds	r3, #27
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	4413      	add	r3, r2
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	08db      	lsrs	r3, r3, #3
 80034ac:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	331b      	adds	r3, #27
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	4413      	add	r3, r2
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0202 	and.w	r2, r3, #2
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	331b      	adds	r3, #27
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	4413      	add	r3, r2
 80034d6:	3304      	adds	r3, #4
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 020f 	and.w	r2, r3, #15
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	331b      	adds	r3, #27
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	4413      	add	r3, r2
 80034ee:	3304      	adds	r3, #4
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	0a1b      	lsrs	r3, r3, #8
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	331b      	adds	r3, #27
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	4413      	add	r3, r2
 8003506:	3304      	adds	r3, #4
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	0c1b      	lsrs	r3, r3, #16
 800350c:	b29a      	uxth	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	4413      	add	r3, r2
 800351c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	b2da      	uxtb	r2, r3
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	4413      	add	r3, r2
 8003532:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	0a1a      	lsrs	r2, r3, #8
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	3301      	adds	r3, #1
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	4413      	add	r3, r2
 800354c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	0c1a      	lsrs	r2, r3, #16
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	3302      	adds	r3, #2
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	4413      	add	r3, r2
 8003566:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	0e1a      	lsrs	r2, r3, #24
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	3303      	adds	r3, #3
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	4413      	add	r3, r2
 8003580:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	3304      	adds	r3, #4
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	4413      	add	r3, r2
 8003598:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	0a1a      	lsrs	r2, r3, #8
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	3305      	adds	r3, #5
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	0c1a      	lsrs	r2, r3, #16
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	3306      	adds	r3, #6
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	0e1a      	lsrs	r2, r3, #24
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	3307      	adds	r3, #7
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d108      	bne.n	80035f4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f042 0220 	orr.w	r2, r2, #32
 80035f0:	60da      	str	r2, [r3, #12]
 80035f2:	e007      	b.n	8003604 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691a      	ldr	r2, [r3, #16]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0220 	orr.w	r2, r2, #32
 8003602:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	e006      	b.n	8003616 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
  }
}
 8003616:	4618      	mov	r0, r3
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003622:	b480      	push	{r7}
 8003624:	b085      	sub	sp, #20
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003632:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d002      	beq.n	8003640 <HAL_CAN_ActivateNotification+0x1e>
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d109      	bne.n	8003654 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6959      	ldr	r1, [r3, #20]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	e006      	b.n	8003662 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
  }
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b08a      	sub	sp, #40	; 0x28
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003676:	2300      	movs	r3, #0
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d07c      	beq.n	80037ae <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d023      	beq.n	8003706 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2201      	movs	r2, #1
 80036c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7fe fef7 	bl	80024c4 <HAL_CAN_TxMailbox0CompleteCallback>
 80036d6:	e016      	b.n	8003706 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d004      	beq.n	80036ec <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ea:	e00c      	b.n	8003706 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d004      	beq.n	8003700 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
 80036fe:	e002      	b.n	8003706 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f97f 	bl	8003a04 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370c:	2b00      	cmp	r3, #0
 800370e:	d024      	beq.n	800375a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003718:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f959 	bl	80039dc <HAL_CAN_TxMailbox1CompleteCallback>
 800372a:	e016      	b.n	800375a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003732:	2b00      	cmp	r3, #0
 8003734:	d004      	beq.n	8003740 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
 800373e:	e00c      	b.n	800375a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003746:	2b00      	cmp	r3, #0
 8003748:	d004      	beq.n	8003754 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
 8003752:	e002      	b.n	800375a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f95f 	bl	8003a18 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d024      	beq.n	80037ae <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800376c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f939 	bl	80039f0 <HAL_CAN_TxMailbox2CompleteCallback>
 800377e:	e016      	b.n	80037ae <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d004      	beq.n	8003794 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
 8003792:	e00c      	b.n	80037ae <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d004      	beq.n	80037a8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
 80037a6:	e002      	b.n	80037ae <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f93f 	bl	8003a2c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00c      	beq.n	80037d2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f003 0310 	and.w	r3, r3, #16
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d007      	beq.n	80037d2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2210      	movs	r2, #16
 80037d0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00b      	beq.n	80037f4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d006      	beq.n	80037f4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2208      	movs	r2, #8
 80037ec:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f926 	bl	8003a40 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d009      	beq.n	8003812 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7fe fe69 	bl	80024e4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00c      	beq.n	8003836 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b00      	cmp	r3, #0
 8003824:	d007      	beq.n	8003836 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800382c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2210      	movs	r2, #16
 8003834:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00b      	beq.n	8003858 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d006      	beq.n	8003858 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2208      	movs	r2, #8
 8003850:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f908 	bl	8003a68 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	f003 0310 	and.w	r3, r3, #16
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f8ef 	bl	8003a54 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00b      	beq.n	8003898 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f003 0310 	and.w	r3, r3, #16
 8003886:	2b00      	cmp	r3, #0
 8003888:	d006      	beq.n	8003898 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2210      	movs	r2, #16
 8003890:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f8f2 	bl	8003a7c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00b      	beq.n	80038ba <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d006      	beq.n	80038ba <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2208      	movs	r2, #8
 80038b2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f8eb 	bl	8003a90 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d07b      	beq.n	80039bc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d072      	beq.n	80039b4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	f043 0302 	orr.w	r3, r3, #2
 8003904:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	f043 0304 	orr.w	r3, r3, #4
 8003920:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003928:	2b00      	cmp	r3, #0
 800392a:	d043      	beq.n	80039b4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003932:	2b00      	cmp	r3, #0
 8003934:	d03e      	beq.n	80039b4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800393c:	2b60      	cmp	r3, #96	; 0x60
 800393e:	d02b      	beq.n	8003998 <HAL_CAN_IRQHandler+0x32a>
 8003940:	2b60      	cmp	r3, #96	; 0x60
 8003942:	d82e      	bhi.n	80039a2 <HAL_CAN_IRQHandler+0x334>
 8003944:	2b50      	cmp	r3, #80	; 0x50
 8003946:	d022      	beq.n	800398e <HAL_CAN_IRQHandler+0x320>
 8003948:	2b50      	cmp	r3, #80	; 0x50
 800394a:	d82a      	bhi.n	80039a2 <HAL_CAN_IRQHandler+0x334>
 800394c:	2b40      	cmp	r3, #64	; 0x40
 800394e:	d019      	beq.n	8003984 <HAL_CAN_IRQHandler+0x316>
 8003950:	2b40      	cmp	r3, #64	; 0x40
 8003952:	d826      	bhi.n	80039a2 <HAL_CAN_IRQHandler+0x334>
 8003954:	2b30      	cmp	r3, #48	; 0x30
 8003956:	d010      	beq.n	800397a <HAL_CAN_IRQHandler+0x30c>
 8003958:	2b30      	cmp	r3, #48	; 0x30
 800395a:	d822      	bhi.n	80039a2 <HAL_CAN_IRQHandler+0x334>
 800395c:	2b10      	cmp	r3, #16
 800395e:	d002      	beq.n	8003966 <HAL_CAN_IRQHandler+0x2f8>
 8003960:	2b20      	cmp	r3, #32
 8003962:	d005      	beq.n	8003970 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003964:	e01d      	b.n	80039a2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	f043 0308 	orr.w	r3, r3, #8
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800396e:	e019      	b.n	80039a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	f043 0310 	orr.w	r3, r3, #16
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003978:	e014      	b.n	80039a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	f043 0320 	orr.w	r3, r3, #32
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003982:	e00f      	b.n	80039a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800398c:	e00a      	b.n	80039a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003996:	e005      	b.n	80039a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039a0:	e000      	b.n	80039a4 <HAL_CAN_IRQHandler+0x336>
            break;
 80039a2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80039b2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2204      	movs	r2, #4
 80039ba:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d008      	beq.n	80039d4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	431a      	orrs	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f868 	bl	8003aa4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80039d4:	bf00      	nop
 80039d6:	3728      	adds	r7, #40	; 0x28
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ac8:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <__NVIC_SetPriorityGrouping+0x44>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aea:	4a04      	ldr	r2, [pc, #16]	; (8003afc <__NVIC_SetPriorityGrouping+0x44>)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	60d3      	str	r3, [r2, #12]
}
 8003af0:	bf00      	nop
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	e000ed00 	.word	0xe000ed00

08003b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b04:	4b04      	ldr	r3, [pc, #16]	; (8003b18 <__NVIC_GetPriorityGrouping+0x18>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	0a1b      	lsrs	r3, r3, #8
 8003b0a:	f003 0307 	and.w	r3, r3, #7
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	e000ed00 	.word	0xe000ed00

08003b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	db0b      	blt.n	8003b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	f003 021f 	and.w	r2, r3, #31
 8003b34:	4907      	ldr	r1, [pc, #28]	; (8003b54 <__NVIC_EnableIRQ+0x38>)
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	e000e100 	.word	0xe000e100

08003b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	6039      	str	r1, [r7, #0]
 8003b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	db0a      	blt.n	8003b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	490c      	ldr	r1, [pc, #48]	; (8003ba4 <__NVIC_SetPriority+0x4c>)
 8003b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b76:	0112      	lsls	r2, r2, #4
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b80:	e00a      	b.n	8003b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	4908      	ldr	r1, [pc, #32]	; (8003ba8 <__NVIC_SetPriority+0x50>)
 8003b88:	79fb      	ldrb	r3, [r7, #7]
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	3b04      	subs	r3, #4
 8003b90:	0112      	lsls	r2, r2, #4
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	440b      	add	r3, r1
 8003b96:	761a      	strb	r2, [r3, #24]
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	e000e100 	.word	0xe000e100
 8003ba8:	e000ed00 	.word	0xe000ed00

08003bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b089      	sub	sp, #36	; 0x24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f1c3 0307 	rsb	r3, r3, #7
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	bf28      	it	cs
 8003bca:	2304      	movcs	r3, #4
 8003bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	2b06      	cmp	r3, #6
 8003bd4:	d902      	bls.n	8003bdc <NVIC_EncodePriority+0x30>
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	3b03      	subs	r3, #3
 8003bda:	e000      	b.n	8003bde <NVIC_EncodePriority+0x32>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43da      	mvns	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	401a      	ands	r2, r3
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfe:	43d9      	mvns	r1, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c04:	4313      	orrs	r3, r2
         );
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3724      	adds	r7, #36	; 0x24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c24:	d301      	bcc.n	8003c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c26:	2301      	movs	r3, #1
 8003c28:	e00f      	b.n	8003c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c2a:	4a0a      	ldr	r2, [pc, #40]	; (8003c54 <SysTick_Config+0x40>)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c32:	210f      	movs	r1, #15
 8003c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c38:	f7ff ff8e 	bl	8003b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <SysTick_Config+0x40>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c42:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <SysTick_Config+0x40>)
 8003c44:	2207      	movs	r2, #7
 8003c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	e000e010 	.word	0xe000e010

08003c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff ff29 	bl	8003ab8 <__NVIC_SetPriorityGrouping>
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b086      	sub	sp, #24
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	4603      	mov	r3, r0
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	607a      	str	r2, [r7, #4]
 8003c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c80:	f7ff ff3e 	bl	8003b00 <__NVIC_GetPriorityGrouping>
 8003c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	68b9      	ldr	r1, [r7, #8]
 8003c8a:	6978      	ldr	r0, [r7, #20]
 8003c8c:	f7ff ff8e 	bl	8003bac <NVIC_EncodePriority>
 8003c90:	4602      	mov	r2, r0
 8003c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c96:	4611      	mov	r1, r2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff ff5d 	bl	8003b58 <__NVIC_SetPriority>
}
 8003c9e:	bf00      	nop
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	4603      	mov	r3, r0
 8003cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ff31 	bl	8003b1c <__NVIC_EnableIRQ>
}
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7ff ffa2 	bl	8003c14 <SysTick_Config>
 8003cd0:	4603      	mov	r3, r0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b084      	sub	sp, #16
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ce8:	f7fe ffe0 	bl	8002cac <HAL_GetTick>
 8003cec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d008      	beq.n	8003d0c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2280      	movs	r2, #128	; 0x80
 8003cfe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e052      	b.n	8003db2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0216 	bic.w	r2, r2, #22
 8003d1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695a      	ldr	r2, [r3, #20]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d2a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d103      	bne.n	8003d3c <HAL_DMA_Abort+0x62>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d007      	beq.n	8003d4c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0208 	bic.w	r2, r2, #8
 8003d4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0201 	bic.w	r2, r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d5c:	e013      	b.n	8003d86 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d5e:	f7fe ffa5 	bl	8002cac <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b05      	cmp	r3, #5
 8003d6a:	d90c      	bls.n	8003d86 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2203      	movs	r2, #3
 8003d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e015      	b.n	8003db2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e4      	bne.n	8003d5e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d98:	223f      	movs	r2, #63	; 0x3f
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d004      	beq.n	8003dd8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2280      	movs	r2, #128	; 0x80
 8003dd2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e00c      	b.n	8003df2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2205      	movs	r2, #5
 8003ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0201 	bic.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
	...

08003e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b089      	sub	sp, #36	; 0x24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e16:	2300      	movs	r3, #0
 8003e18:	61fb      	str	r3, [r7, #28]
 8003e1a:	e165      	b.n	80040e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	f040 8154 	bne.w	80040e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d005      	beq.n	8003e52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d130      	bne.n	8003eb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4013      	ands	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e88:	2201      	movs	r2, #1
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	43db      	mvns	r3, r3
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4013      	ands	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	091b      	lsrs	r3, r3, #4
 8003e9e:	f003 0201 	and.w	r2, r3, #1
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d017      	beq.n	8003ef0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	2203      	movs	r2, #3
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f003 0303 	and.w	r3, r3, #3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d123      	bne.n	8003f44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	08da      	lsrs	r2, r3, #3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3208      	adds	r2, #8
 8003f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	220f      	movs	r2, #15
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	08da      	lsrs	r2, r3, #3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3208      	adds	r2, #8
 8003f3e:	69b9      	ldr	r1, [r7, #24]
 8003f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	2203      	movs	r2, #3
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 0203 	and.w	r2, r3, #3
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 80ae 	beq.w	80040e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	4b5d      	ldr	r3, [pc, #372]	; (8004100 <HAL_GPIO_Init+0x300>)
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	4a5c      	ldr	r2, [pc, #368]	; (8004100 <HAL_GPIO_Init+0x300>)
 8003f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f94:	6453      	str	r3, [r2, #68]	; 0x44
 8003f96:	4b5a      	ldr	r3, [pc, #360]	; (8004100 <HAL_GPIO_Init+0x300>)
 8003f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fa2:	4a58      	ldr	r2, [pc, #352]	; (8004104 <HAL_GPIO_Init+0x304>)
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	089b      	lsrs	r3, r3, #2
 8003fa8:	3302      	adds	r3, #2
 8003faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	220f      	movs	r2, #15
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a4f      	ldr	r2, [pc, #316]	; (8004108 <HAL_GPIO_Init+0x308>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d025      	beq.n	800401a <HAL_GPIO_Init+0x21a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a4e      	ldr	r2, [pc, #312]	; (800410c <HAL_GPIO_Init+0x30c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d01f      	beq.n	8004016 <HAL_GPIO_Init+0x216>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a4d      	ldr	r2, [pc, #308]	; (8004110 <HAL_GPIO_Init+0x310>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d019      	beq.n	8004012 <HAL_GPIO_Init+0x212>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a4c      	ldr	r2, [pc, #304]	; (8004114 <HAL_GPIO_Init+0x314>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d013      	beq.n	800400e <HAL_GPIO_Init+0x20e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a4b      	ldr	r2, [pc, #300]	; (8004118 <HAL_GPIO_Init+0x318>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00d      	beq.n	800400a <HAL_GPIO_Init+0x20a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a4a      	ldr	r2, [pc, #296]	; (800411c <HAL_GPIO_Init+0x31c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d007      	beq.n	8004006 <HAL_GPIO_Init+0x206>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a49      	ldr	r2, [pc, #292]	; (8004120 <HAL_GPIO_Init+0x320>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d101      	bne.n	8004002 <HAL_GPIO_Init+0x202>
 8003ffe:	2306      	movs	r3, #6
 8004000:	e00c      	b.n	800401c <HAL_GPIO_Init+0x21c>
 8004002:	2307      	movs	r3, #7
 8004004:	e00a      	b.n	800401c <HAL_GPIO_Init+0x21c>
 8004006:	2305      	movs	r3, #5
 8004008:	e008      	b.n	800401c <HAL_GPIO_Init+0x21c>
 800400a:	2304      	movs	r3, #4
 800400c:	e006      	b.n	800401c <HAL_GPIO_Init+0x21c>
 800400e:	2303      	movs	r3, #3
 8004010:	e004      	b.n	800401c <HAL_GPIO_Init+0x21c>
 8004012:	2302      	movs	r3, #2
 8004014:	e002      	b.n	800401c <HAL_GPIO_Init+0x21c>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <HAL_GPIO_Init+0x21c>
 800401a:	2300      	movs	r3, #0
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	f002 0203 	and.w	r2, r2, #3
 8004022:	0092      	lsls	r2, r2, #2
 8004024:	4093      	lsls	r3, r2
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4313      	orrs	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800402c:	4935      	ldr	r1, [pc, #212]	; (8004104 <HAL_GPIO_Init+0x304>)
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	089b      	lsrs	r3, r3, #2
 8004032:	3302      	adds	r3, #2
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800403a:	4b3a      	ldr	r3, [pc, #232]	; (8004124 <HAL_GPIO_Init+0x324>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	43db      	mvns	r3, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4013      	ands	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800405e:	4a31      	ldr	r2, [pc, #196]	; (8004124 <HAL_GPIO_Init+0x324>)
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004064:	4b2f      	ldr	r3, [pc, #188]	; (8004124 <HAL_GPIO_Init+0x324>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	43db      	mvns	r3, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4013      	ands	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004088:	4a26      	ldr	r2, [pc, #152]	; (8004124 <HAL_GPIO_Init+0x324>)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800408e:	4b25      	ldr	r3, [pc, #148]	; (8004124 <HAL_GPIO_Init+0x324>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	43db      	mvns	r3, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4013      	ands	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040b2:	4a1c      	ldr	r2, [pc, #112]	; (8004124 <HAL_GPIO_Init+0x324>)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040b8:	4b1a      	ldr	r3, [pc, #104]	; (8004124 <HAL_GPIO_Init+0x324>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	43db      	mvns	r3, r3
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	4013      	ands	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040dc:	4a11      	ldr	r2, [pc, #68]	; (8004124 <HAL_GPIO_Init+0x324>)
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3301      	adds	r3, #1
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	2b0f      	cmp	r3, #15
 80040ec:	f67f ae96 	bls.w	8003e1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040f0:	bf00      	nop
 80040f2:	bf00      	nop
 80040f4:	3724      	adds	r7, #36	; 0x24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40023800 	.word	0x40023800
 8004104:	40013800 	.word	0x40013800
 8004108:	40020000 	.word	0x40020000
 800410c:	40020400 	.word	0x40020400
 8004110:	40020800 	.word	0x40020800
 8004114:	40020c00 	.word	0x40020c00
 8004118:	40021000 	.word	0x40021000
 800411c:	40021400 	.word	0x40021400
 8004120:	40021800 	.word	0x40021800
 8004124:	40013c00 	.word	0x40013c00

08004128 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	887b      	ldrh	r3, [r7, #2]
 800413a:	4013      	ands	r3, r2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004140:	2301      	movs	r3, #1
 8004142:	73fb      	strb	r3, [r7, #15]
 8004144:	e001      	b.n	800414a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004146:	2300      	movs	r3, #0
 8004148:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800414a:	7bfb      	ldrb	r3, [r7, #15]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	807b      	strh	r3, [r7, #2]
 8004164:	4613      	mov	r3, r2
 8004166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004168:	787b      	ldrb	r3, [r7, #1]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800416e:	887a      	ldrh	r2, [r7, #2]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004174:	e003      	b.n	800417e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004176:	887b      	ldrh	r3, [r7, #2]
 8004178:	041a      	lsls	r2, r3, #16
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	619a      	str	r2, [r3, #24]
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
	...

0800418c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004196:	4b08      	ldr	r3, [pc, #32]	; (80041b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004198:	695a      	ldr	r2, [r3, #20]
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d006      	beq.n	80041b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041a2:	4a05      	ldr	r2, [pc, #20]	; (80041b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041a4:	88fb      	ldrh	r3, [r7, #6]
 80041a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fc feee 	bl	8000f8c <HAL_GPIO_EXTI_Callback>
  }
}
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40013c00 	.word	0x40013c00

080041bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0cc      	b.n	800436a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041d0:	4b68      	ldr	r3, [pc, #416]	; (8004374 <HAL_RCC_ClockConfig+0x1b8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 030f 	and.w	r3, r3, #15
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d90c      	bls.n	80041f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041de:	4b65      	ldr	r3, [pc, #404]	; (8004374 <HAL_RCC_ClockConfig+0x1b8>)
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e6:	4b63      	ldr	r3, [pc, #396]	; (8004374 <HAL_RCC_ClockConfig+0x1b8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d001      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e0b8      	b.n	800436a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d020      	beq.n	8004246 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004210:	4b59      	ldr	r3, [pc, #356]	; (8004378 <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	4a58      	ldr	r2, [pc, #352]	; (8004378 <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800421a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b00      	cmp	r3, #0
 8004226:	d005      	beq.n	8004234 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004228:	4b53      	ldr	r3, [pc, #332]	; (8004378 <HAL_RCC_ClockConfig+0x1bc>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	4a52      	ldr	r2, [pc, #328]	; (8004378 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004232:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004234:	4b50      	ldr	r3, [pc, #320]	; (8004378 <HAL_RCC_ClockConfig+0x1bc>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	494d      	ldr	r1, [pc, #308]	; (8004378 <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	4313      	orrs	r3, r2
 8004244:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d044      	beq.n	80042dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d107      	bne.n	800426a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425a:	4b47      	ldr	r3, [pc, #284]	; (8004378 <HAL_RCC_ClockConfig+0x1bc>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d119      	bne.n	800429a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e07f      	b.n	800436a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d003      	beq.n	800427a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004276:	2b03      	cmp	r3, #3
 8004278:	d107      	bne.n	800428a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800427a:	4b3f      	ldr	r3, [pc, #252]	; (8004378 <HAL_RCC_ClockConfig+0x1bc>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d109      	bne.n	800429a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e06f      	b.n	800436a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800428a:	4b3b      	ldr	r3, [pc, #236]	; (8004378 <HAL_RCC_ClockConfig+0x1bc>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e067      	b.n	800436a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800429a:	4b37      	ldr	r3, [pc, #220]	; (8004378 <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f023 0203 	bic.w	r2, r3, #3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	4934      	ldr	r1, [pc, #208]	; (8004378 <HAL_RCC_ClockConfig+0x1bc>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042ac:	f7fe fcfe 	bl	8002cac <HAL_GetTick>
 80042b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b2:	e00a      	b.n	80042ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b4:	f7fe fcfa 	bl	8002cac <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e04f      	b.n	800436a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ca:	4b2b      	ldr	r3, [pc, #172]	; (8004378 <HAL_RCC_ClockConfig+0x1bc>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 020c 	and.w	r2, r3, #12
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	429a      	cmp	r2, r3
 80042da:	d1eb      	bne.n	80042b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042dc:	4b25      	ldr	r3, [pc, #148]	; (8004374 <HAL_RCC_ClockConfig+0x1b8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 030f 	and.w	r3, r3, #15
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d20c      	bcs.n	8004304 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ea:	4b22      	ldr	r3, [pc, #136]	; (8004374 <HAL_RCC_ClockConfig+0x1b8>)
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f2:	4b20      	ldr	r3, [pc, #128]	; (8004374 <HAL_RCC_ClockConfig+0x1b8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d001      	beq.n	8004304 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e032      	b.n	800436a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b00      	cmp	r3, #0
 800430e:	d008      	beq.n	8004322 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004310:	4b19      	ldr	r3, [pc, #100]	; (8004378 <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	4916      	ldr	r1, [pc, #88]	; (8004378 <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	4313      	orrs	r3, r2
 8004320:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b00      	cmp	r3, #0
 800432c:	d009      	beq.n	8004342 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800432e:	4b12      	ldr	r3, [pc, #72]	; (8004378 <HAL_RCC_ClockConfig+0x1bc>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	490e      	ldr	r1, [pc, #56]	; (8004378 <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	4313      	orrs	r3, r2
 8004340:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004342:	f000 f855 	bl	80043f0 <HAL_RCC_GetSysClockFreq>
 8004346:	4602      	mov	r2, r0
 8004348:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	091b      	lsrs	r3, r3, #4
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	490a      	ldr	r1, [pc, #40]	; (800437c <HAL_RCC_ClockConfig+0x1c0>)
 8004354:	5ccb      	ldrb	r3, [r1, r3]
 8004356:	fa22 f303 	lsr.w	r3, r2, r3
 800435a:	4a09      	ldr	r2, [pc, #36]	; (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 800435c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800435e:	4b09      	ldr	r3, [pc, #36]	; (8004384 <HAL_RCC_ClockConfig+0x1c8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe fc5e 	bl	8002c24 <HAL_InitTick>

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40023c00 	.word	0x40023c00
 8004378:	40023800 	.word	0x40023800
 800437c:	0800a650 	.word	0x0800a650
 8004380:	2000000c 	.word	0x2000000c
 8004384:	20000010 	.word	0x20000010

08004388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800438c:	4b03      	ldr	r3, [pc, #12]	; (800439c <HAL_RCC_GetHCLKFreq+0x14>)
 800438e:	681b      	ldr	r3, [r3, #0]
}
 8004390:	4618      	mov	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	2000000c 	.word	0x2000000c

080043a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043a4:	f7ff fff0 	bl	8004388 <HAL_RCC_GetHCLKFreq>
 80043a8:	4602      	mov	r2, r0
 80043aa:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	0a9b      	lsrs	r3, r3, #10
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	4903      	ldr	r1, [pc, #12]	; (80043c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043b6:	5ccb      	ldrb	r3, [r1, r3]
 80043b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043bc:	4618      	mov	r0, r3
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40023800 	.word	0x40023800
 80043c4:	0800a660 	.word	0x0800a660

080043c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043cc:	f7ff ffdc 	bl	8004388 <HAL_RCC_GetHCLKFreq>
 80043d0:	4602      	mov	r2, r0
 80043d2:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	0b5b      	lsrs	r3, r3, #13
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	4903      	ldr	r1, [pc, #12]	; (80043ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80043de:	5ccb      	ldrb	r3, [r1, r3]
 80043e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40023800 	.word	0x40023800
 80043ec:	0800a660 	.word	0x0800a660

080043f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043f4:	b0ae      	sub	sp, #184	; 0xb8
 80043f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004416:	4bcb      	ldr	r3, [pc, #812]	; (8004744 <HAL_RCC_GetSysClockFreq+0x354>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 030c 	and.w	r3, r3, #12
 800441e:	2b0c      	cmp	r3, #12
 8004420:	f200 8206 	bhi.w	8004830 <HAL_RCC_GetSysClockFreq+0x440>
 8004424:	a201      	add	r2, pc, #4	; (adr r2, 800442c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442a:	bf00      	nop
 800442c:	08004461 	.word	0x08004461
 8004430:	08004831 	.word	0x08004831
 8004434:	08004831 	.word	0x08004831
 8004438:	08004831 	.word	0x08004831
 800443c:	08004469 	.word	0x08004469
 8004440:	08004831 	.word	0x08004831
 8004444:	08004831 	.word	0x08004831
 8004448:	08004831 	.word	0x08004831
 800444c:	08004471 	.word	0x08004471
 8004450:	08004831 	.word	0x08004831
 8004454:	08004831 	.word	0x08004831
 8004458:	08004831 	.word	0x08004831
 800445c:	08004661 	.word	0x08004661
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004460:	4bb9      	ldr	r3, [pc, #740]	; (8004748 <HAL_RCC_GetSysClockFreq+0x358>)
 8004462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004466:	e1e7      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004468:	4bb8      	ldr	r3, [pc, #736]	; (800474c <HAL_RCC_GetSysClockFreq+0x35c>)
 800446a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800446e:	e1e3      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004470:	4bb4      	ldr	r3, [pc, #720]	; (8004744 <HAL_RCC_GetSysClockFreq+0x354>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004478:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800447c:	4bb1      	ldr	r3, [pc, #708]	; (8004744 <HAL_RCC_GetSysClockFreq+0x354>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d071      	beq.n	800456c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004488:	4bae      	ldr	r3, [pc, #696]	; (8004744 <HAL_RCC_GetSysClockFreq+0x354>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	099b      	lsrs	r3, r3, #6
 800448e:	2200      	movs	r2, #0
 8004490:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004494:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004498:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800449c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044a4:	2300      	movs	r3, #0
 80044a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044ae:	4622      	mov	r2, r4
 80044b0:	462b      	mov	r3, r5
 80044b2:	f04f 0000 	mov.w	r0, #0
 80044b6:	f04f 0100 	mov.w	r1, #0
 80044ba:	0159      	lsls	r1, r3, #5
 80044bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044c0:	0150      	lsls	r0, r2, #5
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4621      	mov	r1, r4
 80044c8:	1a51      	subs	r1, r2, r1
 80044ca:	6439      	str	r1, [r7, #64]	; 0x40
 80044cc:	4629      	mov	r1, r5
 80044ce:	eb63 0301 	sbc.w	r3, r3, r1
 80044d2:	647b      	str	r3, [r7, #68]	; 0x44
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	f04f 0300 	mov.w	r3, #0
 80044dc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80044e0:	4649      	mov	r1, r9
 80044e2:	018b      	lsls	r3, r1, #6
 80044e4:	4641      	mov	r1, r8
 80044e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044ea:	4641      	mov	r1, r8
 80044ec:	018a      	lsls	r2, r1, #6
 80044ee:	4641      	mov	r1, r8
 80044f0:	1a51      	subs	r1, r2, r1
 80044f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80044f4:	4649      	mov	r1, r9
 80044f6:	eb63 0301 	sbc.w	r3, r3, r1
 80044fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004508:	4649      	mov	r1, r9
 800450a:	00cb      	lsls	r3, r1, #3
 800450c:	4641      	mov	r1, r8
 800450e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004512:	4641      	mov	r1, r8
 8004514:	00ca      	lsls	r2, r1, #3
 8004516:	4610      	mov	r0, r2
 8004518:	4619      	mov	r1, r3
 800451a:	4603      	mov	r3, r0
 800451c:	4622      	mov	r2, r4
 800451e:	189b      	adds	r3, r3, r2
 8004520:	633b      	str	r3, [r7, #48]	; 0x30
 8004522:	462b      	mov	r3, r5
 8004524:	460a      	mov	r2, r1
 8004526:	eb42 0303 	adc.w	r3, r2, r3
 800452a:	637b      	str	r3, [r7, #52]	; 0x34
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004538:	4629      	mov	r1, r5
 800453a:	024b      	lsls	r3, r1, #9
 800453c:	4621      	mov	r1, r4
 800453e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004542:	4621      	mov	r1, r4
 8004544:	024a      	lsls	r2, r1, #9
 8004546:	4610      	mov	r0, r2
 8004548:	4619      	mov	r1, r3
 800454a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800454e:	2200      	movs	r2, #0
 8004550:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004554:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004558:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800455c:	f7fc fb94 	bl	8000c88 <__aeabi_uldivmod>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4613      	mov	r3, r2
 8004566:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800456a:	e067      	b.n	800463c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800456c:	4b75      	ldr	r3, [pc, #468]	; (8004744 <HAL_RCC_GetSysClockFreq+0x354>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	099b      	lsrs	r3, r3, #6
 8004572:	2200      	movs	r2, #0
 8004574:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004578:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800457c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004584:	67bb      	str	r3, [r7, #120]	; 0x78
 8004586:	2300      	movs	r3, #0
 8004588:	67fb      	str	r3, [r7, #124]	; 0x7c
 800458a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800458e:	4622      	mov	r2, r4
 8004590:	462b      	mov	r3, r5
 8004592:	f04f 0000 	mov.w	r0, #0
 8004596:	f04f 0100 	mov.w	r1, #0
 800459a:	0159      	lsls	r1, r3, #5
 800459c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045a0:	0150      	lsls	r0, r2, #5
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4621      	mov	r1, r4
 80045a8:	1a51      	subs	r1, r2, r1
 80045aa:	62b9      	str	r1, [r7, #40]	; 0x28
 80045ac:	4629      	mov	r1, r5
 80045ae:	eb63 0301 	sbc.w	r3, r3, r1
 80045b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80045c0:	4649      	mov	r1, r9
 80045c2:	018b      	lsls	r3, r1, #6
 80045c4:	4641      	mov	r1, r8
 80045c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045ca:	4641      	mov	r1, r8
 80045cc:	018a      	lsls	r2, r1, #6
 80045ce:	4641      	mov	r1, r8
 80045d0:	ebb2 0a01 	subs.w	sl, r2, r1
 80045d4:	4649      	mov	r1, r9
 80045d6:	eb63 0b01 	sbc.w	fp, r3, r1
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045e6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045ee:	4692      	mov	sl, r2
 80045f0:	469b      	mov	fp, r3
 80045f2:	4623      	mov	r3, r4
 80045f4:	eb1a 0303 	adds.w	r3, sl, r3
 80045f8:	623b      	str	r3, [r7, #32]
 80045fa:	462b      	mov	r3, r5
 80045fc:	eb4b 0303 	adc.w	r3, fp, r3
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	f04f 0300 	mov.w	r3, #0
 800460a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800460e:	4629      	mov	r1, r5
 8004610:	028b      	lsls	r3, r1, #10
 8004612:	4621      	mov	r1, r4
 8004614:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004618:	4621      	mov	r1, r4
 800461a:	028a      	lsls	r2, r1, #10
 800461c:	4610      	mov	r0, r2
 800461e:	4619      	mov	r1, r3
 8004620:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004624:	2200      	movs	r2, #0
 8004626:	673b      	str	r3, [r7, #112]	; 0x70
 8004628:	677a      	str	r2, [r7, #116]	; 0x74
 800462a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800462e:	f7fc fb2b 	bl	8000c88 <__aeabi_uldivmod>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4613      	mov	r3, r2
 8004638:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800463c:	4b41      	ldr	r3, [pc, #260]	; (8004744 <HAL_RCC_GetSysClockFreq+0x354>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	0c1b      	lsrs	r3, r3, #16
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	3301      	adds	r3, #1
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800464e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004652:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004656:	fbb2 f3f3 	udiv	r3, r2, r3
 800465a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800465e:	e0eb      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004660:	4b38      	ldr	r3, [pc, #224]	; (8004744 <HAL_RCC_GetSysClockFreq+0x354>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004668:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800466c:	4b35      	ldr	r3, [pc, #212]	; (8004744 <HAL_RCC_GetSysClockFreq+0x354>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d06b      	beq.n	8004750 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004678:	4b32      	ldr	r3, [pc, #200]	; (8004744 <HAL_RCC_GetSysClockFreq+0x354>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	099b      	lsrs	r3, r3, #6
 800467e:	2200      	movs	r2, #0
 8004680:	66bb      	str	r3, [r7, #104]	; 0x68
 8004682:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004684:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468a:	663b      	str	r3, [r7, #96]	; 0x60
 800468c:	2300      	movs	r3, #0
 800468e:	667b      	str	r3, [r7, #100]	; 0x64
 8004690:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004694:	4622      	mov	r2, r4
 8004696:	462b      	mov	r3, r5
 8004698:	f04f 0000 	mov.w	r0, #0
 800469c:	f04f 0100 	mov.w	r1, #0
 80046a0:	0159      	lsls	r1, r3, #5
 80046a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046a6:	0150      	lsls	r0, r2, #5
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4621      	mov	r1, r4
 80046ae:	1a51      	subs	r1, r2, r1
 80046b0:	61b9      	str	r1, [r7, #24]
 80046b2:	4629      	mov	r1, r5
 80046b4:	eb63 0301 	sbc.w	r3, r3, r1
 80046b8:	61fb      	str	r3, [r7, #28]
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	f04f 0300 	mov.w	r3, #0
 80046c2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80046c6:	4659      	mov	r1, fp
 80046c8:	018b      	lsls	r3, r1, #6
 80046ca:	4651      	mov	r1, sl
 80046cc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046d0:	4651      	mov	r1, sl
 80046d2:	018a      	lsls	r2, r1, #6
 80046d4:	4651      	mov	r1, sl
 80046d6:	ebb2 0801 	subs.w	r8, r2, r1
 80046da:	4659      	mov	r1, fp
 80046dc:	eb63 0901 	sbc.w	r9, r3, r1
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046f4:	4690      	mov	r8, r2
 80046f6:	4699      	mov	r9, r3
 80046f8:	4623      	mov	r3, r4
 80046fa:	eb18 0303 	adds.w	r3, r8, r3
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	462b      	mov	r3, r5
 8004702:	eb49 0303 	adc.w	r3, r9, r3
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004714:	4629      	mov	r1, r5
 8004716:	024b      	lsls	r3, r1, #9
 8004718:	4621      	mov	r1, r4
 800471a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800471e:	4621      	mov	r1, r4
 8004720:	024a      	lsls	r2, r1, #9
 8004722:	4610      	mov	r0, r2
 8004724:	4619      	mov	r1, r3
 8004726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800472a:	2200      	movs	r2, #0
 800472c:	65bb      	str	r3, [r7, #88]	; 0x58
 800472e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004730:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004734:	f7fc faa8 	bl	8000c88 <__aeabi_uldivmod>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4613      	mov	r3, r2
 800473e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004742:	e065      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x420>
 8004744:	40023800 	.word	0x40023800
 8004748:	00f42400 	.word	0x00f42400
 800474c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004750:	4b3d      	ldr	r3, [pc, #244]	; (8004848 <HAL_RCC_GetSysClockFreq+0x458>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	099b      	lsrs	r3, r3, #6
 8004756:	2200      	movs	r2, #0
 8004758:	4618      	mov	r0, r3
 800475a:	4611      	mov	r1, r2
 800475c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004760:	653b      	str	r3, [r7, #80]	; 0x50
 8004762:	2300      	movs	r3, #0
 8004764:	657b      	str	r3, [r7, #84]	; 0x54
 8004766:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800476a:	4642      	mov	r2, r8
 800476c:	464b      	mov	r3, r9
 800476e:	f04f 0000 	mov.w	r0, #0
 8004772:	f04f 0100 	mov.w	r1, #0
 8004776:	0159      	lsls	r1, r3, #5
 8004778:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800477c:	0150      	lsls	r0, r2, #5
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	4641      	mov	r1, r8
 8004784:	1a51      	subs	r1, r2, r1
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	4649      	mov	r1, r9
 800478a:	eb63 0301 	sbc.w	r3, r3, r1
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800479c:	4659      	mov	r1, fp
 800479e:	018b      	lsls	r3, r1, #6
 80047a0:	4651      	mov	r1, sl
 80047a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047a6:	4651      	mov	r1, sl
 80047a8:	018a      	lsls	r2, r1, #6
 80047aa:	4651      	mov	r1, sl
 80047ac:	1a54      	subs	r4, r2, r1
 80047ae:	4659      	mov	r1, fp
 80047b0:	eb63 0501 	sbc.w	r5, r3, r1
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	00eb      	lsls	r3, r5, #3
 80047be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047c2:	00e2      	lsls	r2, r4, #3
 80047c4:	4614      	mov	r4, r2
 80047c6:	461d      	mov	r5, r3
 80047c8:	4643      	mov	r3, r8
 80047ca:	18e3      	adds	r3, r4, r3
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	464b      	mov	r3, r9
 80047d0:	eb45 0303 	adc.w	r3, r5, r3
 80047d4:	607b      	str	r3, [r7, #4]
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047e2:	4629      	mov	r1, r5
 80047e4:	028b      	lsls	r3, r1, #10
 80047e6:	4621      	mov	r1, r4
 80047e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047ec:	4621      	mov	r1, r4
 80047ee:	028a      	lsls	r2, r1, #10
 80047f0:	4610      	mov	r0, r2
 80047f2:	4619      	mov	r1, r3
 80047f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047f8:	2200      	movs	r2, #0
 80047fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80047fc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80047fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004802:	f7fc fa41 	bl	8000c88 <__aeabi_uldivmod>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	4613      	mov	r3, r2
 800480c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004810:	4b0d      	ldr	r3, [pc, #52]	; (8004848 <HAL_RCC_GetSysClockFreq+0x458>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	0f1b      	lsrs	r3, r3, #28
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800481e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004822:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004826:	fbb2 f3f3 	udiv	r3, r2, r3
 800482a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800482e:	e003      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004830:	4b06      	ldr	r3, [pc, #24]	; (800484c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004832:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004836:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004838:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800483c:	4618      	mov	r0, r3
 800483e:	37b8      	adds	r7, #184	; 0xb8
 8004840:	46bd      	mov	sp, r7
 8004842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004846:	bf00      	nop
 8004848:	40023800 	.word	0x40023800
 800484c:	00f42400 	.word	0x00f42400

08004850 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e28d      	b.n	8004d7e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 8083 	beq.w	8004976 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004870:	4b94      	ldr	r3, [pc, #592]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f003 030c 	and.w	r3, r3, #12
 8004878:	2b04      	cmp	r3, #4
 800487a:	d019      	beq.n	80048b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800487c:	4b91      	ldr	r3, [pc, #580]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004884:	2b08      	cmp	r3, #8
 8004886:	d106      	bne.n	8004896 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004888:	4b8e      	ldr	r3, [pc, #568]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004894:	d00c      	beq.n	80048b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004896:	4b8b      	ldr	r3, [pc, #556]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800489e:	2b0c      	cmp	r3, #12
 80048a0:	d112      	bne.n	80048c8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048a2:	4b88      	ldr	r3, [pc, #544]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ae:	d10b      	bne.n	80048c8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b0:	4b84      	ldr	r3, [pc, #528]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d05b      	beq.n	8004974 <HAL_RCC_OscConfig+0x124>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d157      	bne.n	8004974 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e25a      	b.n	8004d7e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d0:	d106      	bne.n	80048e0 <HAL_RCC_OscConfig+0x90>
 80048d2:	4b7c      	ldr	r3, [pc, #496]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a7b      	ldr	r2, [pc, #492]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 80048d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	e01d      	b.n	800491c <HAL_RCC_OscConfig+0xcc>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048e8:	d10c      	bne.n	8004904 <HAL_RCC_OscConfig+0xb4>
 80048ea:	4b76      	ldr	r3, [pc, #472]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a75      	ldr	r2, [pc, #468]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 80048f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	4b73      	ldr	r3, [pc, #460]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a72      	ldr	r2, [pc, #456]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 80048fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	e00b      	b.n	800491c <HAL_RCC_OscConfig+0xcc>
 8004904:	4b6f      	ldr	r3, [pc, #444]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a6e      	ldr	r2, [pc, #440]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 800490a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	4b6c      	ldr	r3, [pc, #432]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a6b      	ldr	r2, [pc, #428]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 8004916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800491a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d013      	beq.n	800494c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004924:	f7fe f9c2 	bl	8002cac <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800492c:	f7fe f9be 	bl	8002cac <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b64      	cmp	r3, #100	; 0x64
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e21f      	b.n	8004d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493e:	4b61      	ldr	r3, [pc, #388]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f0      	beq.n	800492c <HAL_RCC_OscConfig+0xdc>
 800494a:	e014      	b.n	8004976 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494c:	f7fe f9ae 	bl	8002cac <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004954:	f7fe f9aa 	bl	8002cac <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b64      	cmp	r3, #100	; 0x64
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e20b      	b.n	8004d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004966:	4b57      	ldr	r3, [pc, #348]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f0      	bne.n	8004954 <HAL_RCC_OscConfig+0x104>
 8004972:	e000      	b.n	8004976 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d06f      	beq.n	8004a62 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004982:	4b50      	ldr	r3, [pc, #320]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 030c 	and.w	r3, r3, #12
 800498a:	2b00      	cmp	r3, #0
 800498c:	d017      	beq.n	80049be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800498e:	4b4d      	ldr	r3, [pc, #308]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004996:	2b08      	cmp	r3, #8
 8004998:	d105      	bne.n	80049a6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800499a:	4b4a      	ldr	r3, [pc, #296]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00b      	beq.n	80049be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049a6:	4b47      	ldr	r3, [pc, #284]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049ae:	2b0c      	cmp	r3, #12
 80049b0:	d11c      	bne.n	80049ec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049b2:	4b44      	ldr	r3, [pc, #272]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d116      	bne.n	80049ec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049be:	4b41      	ldr	r3, [pc, #260]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d005      	beq.n	80049d6 <HAL_RCC_OscConfig+0x186>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d001      	beq.n	80049d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e1d3      	b.n	8004d7e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d6:	4b3b      	ldr	r3, [pc, #236]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	4937      	ldr	r1, [pc, #220]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ea:	e03a      	b.n	8004a62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d020      	beq.n	8004a36 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049f4:	4b34      	ldr	r3, [pc, #208]	; (8004ac8 <HAL_RCC_OscConfig+0x278>)
 80049f6:	2201      	movs	r2, #1
 80049f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fa:	f7fe f957 	bl	8002cac <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a02:	f7fe f953 	bl	8002cac <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e1b4      	b.n	8004d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a14:	4b2b      	ldr	r3, [pc, #172]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0f0      	beq.n	8004a02 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a20:	4b28      	ldr	r3, [pc, #160]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	4925      	ldr	r1, [pc, #148]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	600b      	str	r3, [r1, #0]
 8004a34:	e015      	b.n	8004a62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a36:	4b24      	ldr	r3, [pc, #144]	; (8004ac8 <HAL_RCC_OscConfig+0x278>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3c:	f7fe f936 	bl	8002cac <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a44:	f7fe f932 	bl	8002cac <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e193      	b.n	8004d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a56:	4b1b      	ldr	r3, [pc, #108]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1f0      	bne.n	8004a44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0308 	and.w	r3, r3, #8
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d036      	beq.n	8004adc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d016      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a76:	4b15      	ldr	r3, [pc, #84]	; (8004acc <HAL_RCC_OscConfig+0x27c>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7c:	f7fe f916 	bl	8002cac <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a84:	f7fe f912 	bl	8002cac <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e173      	b.n	8004d7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a96:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 8004a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0f0      	beq.n	8004a84 <HAL_RCC_OscConfig+0x234>
 8004aa2:	e01b      	b.n	8004adc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aa4:	4b09      	ldr	r3, [pc, #36]	; (8004acc <HAL_RCC_OscConfig+0x27c>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aaa:	f7fe f8ff 	bl	8002cac <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab0:	e00e      	b.n	8004ad0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ab2:	f7fe f8fb 	bl	8002cac <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d907      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e15c      	b.n	8004d7e <HAL_RCC_OscConfig+0x52e>
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	42470000 	.word	0x42470000
 8004acc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad0:	4b8a      	ldr	r3, [pc, #552]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1ea      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 8097 	beq.w	8004c18 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aea:	2300      	movs	r3, #0
 8004aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aee:	4b83      	ldr	r3, [pc, #524]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10f      	bne.n	8004b1a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004afa:	2300      	movs	r3, #0
 8004afc:	60bb      	str	r3, [r7, #8]
 8004afe:	4b7f      	ldr	r3, [pc, #508]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	4a7e      	ldr	r2, [pc, #504]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b08:	6413      	str	r3, [r2, #64]	; 0x40
 8004b0a:	4b7c      	ldr	r3, [pc, #496]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b12:	60bb      	str	r3, [r7, #8]
 8004b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b16:	2301      	movs	r3, #1
 8004b18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b1a:	4b79      	ldr	r3, [pc, #484]	; (8004d00 <HAL_RCC_OscConfig+0x4b0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d118      	bne.n	8004b58 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b26:	4b76      	ldr	r3, [pc, #472]	; (8004d00 <HAL_RCC_OscConfig+0x4b0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a75      	ldr	r2, [pc, #468]	; (8004d00 <HAL_RCC_OscConfig+0x4b0>)
 8004b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b32:	f7fe f8bb 	bl	8002cac <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b38:	e008      	b.n	8004b4c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b3a:	f7fe f8b7 	bl	8002cac <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e118      	b.n	8004d7e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b4c:	4b6c      	ldr	r3, [pc, #432]	; (8004d00 <HAL_RCC_OscConfig+0x4b0>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0f0      	beq.n	8004b3a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d106      	bne.n	8004b6e <HAL_RCC_OscConfig+0x31e>
 8004b60:	4b66      	ldr	r3, [pc, #408]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b64:	4a65      	ldr	r2, [pc, #404]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004b66:	f043 0301 	orr.w	r3, r3, #1
 8004b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b6c:	e01c      	b.n	8004ba8 <HAL_RCC_OscConfig+0x358>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	2b05      	cmp	r3, #5
 8004b74:	d10c      	bne.n	8004b90 <HAL_RCC_OscConfig+0x340>
 8004b76:	4b61      	ldr	r3, [pc, #388]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7a:	4a60      	ldr	r2, [pc, #384]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004b7c:	f043 0304 	orr.w	r3, r3, #4
 8004b80:	6713      	str	r3, [r2, #112]	; 0x70
 8004b82:	4b5e      	ldr	r3, [pc, #376]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b86:	4a5d      	ldr	r2, [pc, #372]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004b88:	f043 0301 	orr.w	r3, r3, #1
 8004b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b8e:	e00b      	b.n	8004ba8 <HAL_RCC_OscConfig+0x358>
 8004b90:	4b5a      	ldr	r3, [pc, #360]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b94:	4a59      	ldr	r2, [pc, #356]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004b96:	f023 0301 	bic.w	r3, r3, #1
 8004b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b9c:	4b57      	ldr	r3, [pc, #348]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba0:	4a56      	ldr	r2, [pc, #344]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004ba2:	f023 0304 	bic.w	r3, r3, #4
 8004ba6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d015      	beq.n	8004bdc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb0:	f7fe f87c 	bl	8002cac <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb6:	e00a      	b.n	8004bce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bb8:	f7fe f878 	bl	8002cac <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e0d7      	b.n	8004d7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bce:	4b4b      	ldr	r3, [pc, #300]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0ee      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x368>
 8004bda:	e014      	b.n	8004c06 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bdc:	f7fe f866 	bl	8002cac <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004be2:	e00a      	b.n	8004bfa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004be4:	f7fe f862 	bl	8002cac <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e0c1      	b.n	8004d7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bfa:	4b40      	ldr	r3, [pc, #256]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1ee      	bne.n	8004be4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c06:	7dfb      	ldrb	r3, [r7, #23]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d105      	bne.n	8004c18 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c0c:	4b3b      	ldr	r3, [pc, #236]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	4a3a      	ldr	r2, [pc, #232]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 80ad 	beq.w	8004d7c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c22:	4b36      	ldr	r3, [pc, #216]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d060      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d145      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c36:	4b33      	ldr	r3, [pc, #204]	; (8004d04 <HAL_RCC_OscConfig+0x4b4>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3c:	f7fe f836 	bl	8002cac <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c44:	f7fe f832 	bl	8002cac <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e093      	b.n	8004d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c56:	4b29      	ldr	r3, [pc, #164]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f0      	bne.n	8004c44 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69da      	ldr	r2, [r3, #28]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	019b      	lsls	r3, r3, #6
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c78:	085b      	lsrs	r3, r3, #1
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	041b      	lsls	r3, r3, #16
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	061b      	lsls	r3, r3, #24
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	071b      	lsls	r3, r3, #28
 8004c8e:	491b      	ldr	r1, [pc, #108]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c94:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <HAL_RCC_OscConfig+0x4b4>)
 8004c96:	2201      	movs	r2, #1
 8004c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9a:	f7fe f807 	bl	8002cac <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ca2:	f7fe f803 	bl	8002cac <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e064      	b.n	8004d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb4:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x452>
 8004cc0:	e05c      	b.n	8004d7c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc2:	4b10      	ldr	r3, [pc, #64]	; (8004d04 <HAL_RCC_OscConfig+0x4b4>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc8:	f7fd fff0 	bl	8002cac <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cd0:	f7fd ffec 	bl	8002cac <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e04d      	b.n	8004d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce2:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <HAL_RCC_OscConfig+0x4ac>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f0      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x480>
 8004cee:	e045      	b.n	8004d7c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d107      	bne.n	8004d08 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e040      	b.n	8004d7e <HAL_RCC_OscConfig+0x52e>
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	40007000 	.word	0x40007000
 8004d04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d08:	4b1f      	ldr	r3, [pc, #124]	; (8004d88 <HAL_RCC_OscConfig+0x538>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d030      	beq.n	8004d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d129      	bne.n	8004d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d122      	bne.n	8004d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d38:	4013      	ands	r3, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d119      	bne.n	8004d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4e:	085b      	lsrs	r3, r3, #1
 8004d50:	3b01      	subs	r3, #1
 8004d52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d10f      	bne.n	8004d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d107      	bne.n	8004d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d001      	beq.n	8004d7c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40023800 	.word	0x40023800

08004d8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e03f      	b.n	8004e1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fd fd5e 	bl	8002874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2224      	movs	r2, #36	; 0x24
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 fd23 	bl	800581c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	691a      	ldr	r2, [r3, #16]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004de4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695a      	ldr	r2, [r3, #20]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004df4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b085      	sub	sp, #20
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	60f8      	str	r0, [r7, #12]
 8004e2e:	60b9      	str	r1, [r7, #8]
 8004e30:	4613      	mov	r3, r2
 8004e32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b20      	cmp	r3, #32
 8004e3e:	d130      	bne.n	8004ea2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <HAL_UART_Transmit_IT+0x26>
 8004e46:	88fb      	ldrh	r3, [r7, #6]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e029      	b.n	8004ea4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_UART_Transmit_IT+0x38>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e022      	b.n	8004ea4 <HAL_UART_Transmit_IT+0x7e>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	88fa      	ldrh	r2, [r7, #6]
 8004e70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	88fa      	ldrh	r2, [r7, #6]
 8004e76:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2221      	movs	r2, #33	; 0x21
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e9c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e000      	b.n	8004ea4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004ea2:	2302      	movs	r3, #2
  }
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d11d      	bne.n	8004f06 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <HAL_UART_Receive_IT+0x26>
 8004ed0:	88fb      	ldrh	r3, [r7, #6]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e016      	b.n	8004f08 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_UART_Receive_IT+0x38>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e00f      	b.n	8004f08 <HAL_UART_Receive_IT+0x58>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ef6:	88fb      	ldrh	r3, [r7, #6]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 fab5 	bl	800546c <UART_Start_Receive_IT>
 8004f02:	4603      	mov	r3, r0
 8004f04:	e000      	b.n	8004f08 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004f06:	2302      	movs	r3, #2
  }
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b0ba      	sub	sp, #232	; 0xe8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10f      	bne.n	8004f76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <HAL_UART_IRQHandler+0x66>
 8004f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f66:	f003 0320 	and.w	r3, r3, #32
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fb99 	bl	80056a6 <UART_Receive_IT>
      return;
 8004f74:	e256      	b.n	8005424 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 80de 	beq.w	800513c <HAL_UART_IRQHandler+0x22c>
 8004f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d106      	bne.n	8004f9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80d1 	beq.w	800513c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00b      	beq.n	8004fbe <HAL_UART_IRQHandler+0xae>
 8004fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d005      	beq.n	8004fbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	f043 0201 	orr.w	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00b      	beq.n	8004fe2 <HAL_UART_IRQHandler+0xd2>
 8004fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d005      	beq.n	8004fe2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	f043 0202 	orr.w	r2, r3, #2
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00b      	beq.n	8005006 <HAL_UART_IRQHandler+0xf6>
 8004fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d005      	beq.n	8005006 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f043 0204 	orr.w	r2, r3, #4
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d011      	beq.n	8005036 <HAL_UART_IRQHandler+0x126>
 8005012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005016:	f003 0320 	and.w	r3, r3, #32
 800501a:	2b00      	cmp	r3, #0
 800501c:	d105      	bne.n	800502a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800501e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d005      	beq.n	8005036 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	f043 0208 	orr.w	r2, r3, #8
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 81ed 	beq.w	800541a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b00      	cmp	r3, #0
 800504a:	d008      	beq.n	800505e <HAL_UART_IRQHandler+0x14e>
 800504c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fb24 	bl	80056a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005068:	2b40      	cmp	r3, #64	; 0x40
 800506a:	bf0c      	ite	eq
 800506c:	2301      	moveq	r3, #1
 800506e:	2300      	movne	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d103      	bne.n	800508a <HAL_UART_IRQHandler+0x17a>
 8005082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d04f      	beq.n	800512a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fa2c 	bl	80054e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509a:	2b40      	cmp	r3, #64	; 0x40
 800509c:	d141      	bne.n	8005122 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3314      	adds	r3, #20
 80050a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3314      	adds	r3, #20
 80050c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1d9      	bne.n	800509e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d013      	beq.n	800511a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f6:	4a7d      	ldr	r2, [pc, #500]	; (80052ec <HAL_UART_IRQHandler+0x3dc>)
 80050f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fe fe5b 	bl	8003dba <HAL_DMA_Abort_IT>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d016      	beq.n	8005138 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005114:	4610      	mov	r0, r2
 8005116:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005118:	e00e      	b.n	8005138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f990 	bl	8005440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005120:	e00a      	b.n	8005138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f98c 	bl	8005440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005128:	e006      	b.n	8005138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f988 	bl	8005440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005136:	e170      	b.n	800541a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005138:	bf00      	nop
    return;
 800513a:	e16e      	b.n	800541a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005140:	2b01      	cmp	r3, #1
 8005142:	f040 814a 	bne.w	80053da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800514a:	f003 0310 	and.w	r3, r3, #16
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 8143 	beq.w	80053da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005158:	f003 0310 	and.w	r3, r3, #16
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 813c 	beq.w	80053da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005162:	2300      	movs	r3, #0
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	60bb      	str	r3, [r7, #8]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	60bb      	str	r3, [r7, #8]
 8005176:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005182:	2b40      	cmp	r3, #64	; 0x40
 8005184:	f040 80b4 	bne.w	80052f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005194:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 8140 	beq.w	800541e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051a6:	429a      	cmp	r2, r3
 80051a8:	f080 8139 	bcs.w	800541e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051be:	f000 8088 	beq.w	80052d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	330c      	adds	r3, #12
 80051c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	330c      	adds	r3, #12
 80051ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80051ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005206:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1d9      	bne.n	80051c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3314      	adds	r3, #20
 8005214:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005218:	e853 3f00 	ldrex	r3, [r3]
 800521c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800521e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005220:	f023 0301 	bic.w	r3, r3, #1
 8005224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3314      	adds	r3, #20
 800522e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005232:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005236:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005238:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800523a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800523e:	e841 2300 	strex	r3, r2, [r1]
 8005242:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1e1      	bne.n	800520e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3314      	adds	r3, #20
 8005250:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800525a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800525c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3314      	adds	r3, #20
 800526a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800526e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005270:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005274:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005276:	e841 2300 	strex	r3, r2, [r1]
 800527a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800527c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1e3      	bne.n	800524a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2220      	movs	r2, #32
 8005286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	330c      	adds	r3, #12
 8005296:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052a2:	f023 0310 	bic.w	r3, r3, #16
 80052a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	330c      	adds	r3, #12
 80052b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80052b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80052b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e3      	bne.n	8005290 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fe fd04 	bl	8003cda <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052da:	b29b      	uxth	r3, r3
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	b29b      	uxth	r3, r3
 80052e0:	4619      	mov	r1, r3
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f8b6 	bl	8005454 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052e8:	e099      	b.n	800541e <HAL_UART_IRQHandler+0x50e>
 80052ea:	bf00      	nop
 80052ec:	080055af 	.word	0x080055af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 808b 	beq.w	8005422 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800530c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 8086 	beq.w	8005422 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	330c      	adds	r3, #12
 800531c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800532c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	330c      	adds	r3, #12
 8005336:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800533a:	647a      	str	r2, [r7, #68]	; 0x44
 800533c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005340:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005342:	e841 2300 	strex	r3, r2, [r1]
 8005346:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1e3      	bne.n	8005316 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3314      	adds	r3, #20
 8005354:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	623b      	str	r3, [r7, #32]
   return(result);
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	f023 0301 	bic.w	r3, r3, #1
 8005364:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3314      	adds	r3, #20
 800536e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005372:	633a      	str	r2, [r7, #48]	; 0x30
 8005374:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e3      	bne.n	800534e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2220      	movs	r2, #32
 800538a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	330c      	adds	r3, #12
 800539a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	e853 3f00 	ldrex	r3, [r3]
 80053a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0310 	bic.w	r3, r3, #16
 80053aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	330c      	adds	r3, #12
 80053b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80053b8:	61fa      	str	r2, [r7, #28]
 80053ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053bc:	69b9      	ldr	r1, [r7, #24]
 80053be:	69fa      	ldr	r2, [r7, #28]
 80053c0:	e841 2300 	strex	r3, r2, [r1]
 80053c4:	617b      	str	r3, [r7, #20]
   return(result);
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1e3      	bne.n	8005394 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053d0:	4619      	mov	r1, r3
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f83e 	bl	8005454 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053d8:	e023      	b.n	8005422 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d009      	beq.n	80053fa <HAL_UART_IRQHandler+0x4ea>
 80053e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f8ef 	bl	80055d6 <UART_Transmit_IT>
    return;
 80053f8:	e014      	b.n	8005424 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00e      	beq.n	8005424 <HAL_UART_IRQHandler+0x514>
 8005406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540e:	2b00      	cmp	r3, #0
 8005410:	d008      	beq.n	8005424 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f92f 	bl	8005676 <UART_EndTransmit_IT>
    return;
 8005418:	e004      	b.n	8005424 <HAL_UART_IRQHandler+0x514>
    return;
 800541a:	bf00      	nop
 800541c:	e002      	b.n	8005424 <HAL_UART_IRQHandler+0x514>
      return;
 800541e:	bf00      	nop
 8005420:	e000      	b.n	8005424 <HAL_UART_IRQHandler+0x514>
      return;
 8005422:	bf00      	nop
  }
}
 8005424:	37e8      	adds	r7, #232	; 0xe8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop

0800542c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	4613      	mov	r3, r2
 8005478:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	88fa      	ldrh	r2, [r7, #6]
 8005484:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	88fa      	ldrh	r2, [r7, #6]
 800548a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2222      	movs	r2, #34	; 0x22
 8005496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d007      	beq.n	80054ba <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054b8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695a      	ldr	r2, [r3, #20]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f042 0201 	orr.w	r2, r2, #1
 80054c8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f042 0220 	orr.w	r2, r2, #32
 80054d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b095      	sub	sp, #84	; 0x54
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	330c      	adds	r3, #12
 80054f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fa:	e853 3f00 	ldrex	r3, [r3]
 80054fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005502:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	330c      	adds	r3, #12
 800550e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005510:	643a      	str	r2, [r7, #64]	; 0x40
 8005512:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005514:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005516:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005518:	e841 2300 	strex	r3, r2, [r1]
 800551c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800551e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e5      	bne.n	80054f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3314      	adds	r3, #20
 800552a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	e853 3f00 	ldrex	r3, [r3]
 8005532:	61fb      	str	r3, [r7, #28]
   return(result);
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f023 0301 	bic.w	r3, r3, #1
 800553a:	64bb      	str	r3, [r7, #72]	; 0x48
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3314      	adds	r3, #20
 8005542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005544:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800554a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800554c:	e841 2300 	strex	r3, r2, [r1]
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1e5      	bne.n	8005524 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555c:	2b01      	cmp	r3, #1
 800555e:	d119      	bne.n	8005594 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	330c      	adds	r3, #12
 8005566:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	e853 3f00 	ldrex	r3, [r3]
 800556e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f023 0310 	bic.w	r3, r3, #16
 8005576:	647b      	str	r3, [r7, #68]	; 0x44
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	330c      	adds	r3, #12
 800557e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005580:	61ba      	str	r2, [r7, #24]
 8005582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005584:	6979      	ldr	r1, [r7, #20]
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	e841 2300 	strex	r3, r2, [r1]
 800558c:	613b      	str	r3, [r7, #16]
   return(result);
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1e5      	bne.n	8005560 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2220      	movs	r2, #32
 8005598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80055a2:	bf00      	nop
 80055a4:	3754      	adds	r7, #84	; 0x54
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b084      	sub	sp, #16
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f7ff ff39 	bl	8005440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ce:	bf00      	nop
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b085      	sub	sp, #20
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b21      	cmp	r3, #33	; 0x21
 80055e8:	d13e      	bne.n	8005668 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f2:	d114      	bne.n	800561e <UART_Transmit_IT+0x48>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d110      	bne.n	800561e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005610:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	1c9a      	adds	r2, r3, #2
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	621a      	str	r2, [r3, #32]
 800561c:	e008      	b.n	8005630 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	1c59      	adds	r1, r3, #1
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6211      	str	r1, [r2, #32]
 8005628:	781a      	ldrb	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005634:	b29b      	uxth	r3, r3
 8005636:	3b01      	subs	r3, #1
 8005638:	b29b      	uxth	r3, r3
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	4619      	mov	r1, r3
 800563e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10f      	bne.n	8005664 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005652:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005662:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005664:	2300      	movs	r3, #0
 8005666:	e000      	b.n	800566a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005668:	2302      	movs	r3, #2
  }
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b082      	sub	sp, #8
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68da      	ldr	r2, [r3, #12]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800568c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2220      	movs	r2, #32
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7ff fec8 	bl	800542c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b08c      	sub	sp, #48	; 0x30
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b22      	cmp	r3, #34	; 0x22
 80056b8:	f040 80ab 	bne.w	8005812 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c4:	d117      	bne.n	80056f6 <UART_Receive_IT+0x50>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d113      	bne.n	80056f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056ce:	2300      	movs	r3, #0
 80056d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ee:	1c9a      	adds	r2, r3, #2
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	629a      	str	r2, [r3, #40]	; 0x28
 80056f4:	e026      	b.n	8005744 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80056fc:	2300      	movs	r3, #0
 80056fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005708:	d007      	beq.n	800571a <UART_Receive_IT+0x74>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10a      	bne.n	8005728 <UART_Receive_IT+0x82>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	b2da      	uxtb	r2, r3
 8005722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	e008      	b.n	800573a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	b2db      	uxtb	r3, r3
 8005730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005734:	b2da      	uxtb	r2, r3
 8005736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005738:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005748:	b29b      	uxth	r3, r3
 800574a:	3b01      	subs	r3, #1
 800574c:	b29b      	uxth	r3, r3
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	4619      	mov	r1, r3
 8005752:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005754:	2b00      	cmp	r3, #0
 8005756:	d15a      	bne.n	800580e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68da      	ldr	r2, [r3, #12]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 0220 	bic.w	r2, r2, #32
 8005766:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005776:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695a      	ldr	r2, [r3, #20]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0201 	bic.w	r2, r2, #1
 8005786:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2220      	movs	r2, #32
 800578c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005794:	2b01      	cmp	r3, #1
 8005796:	d135      	bne.n	8005804 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	330c      	adds	r3, #12
 80057a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	613b      	str	r3, [r7, #16]
   return(result);
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f023 0310 	bic.w	r3, r3, #16
 80057b4:	627b      	str	r3, [r7, #36]	; 0x24
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	330c      	adds	r3, #12
 80057bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057be:	623a      	str	r2, [r7, #32]
 80057c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	69f9      	ldr	r1, [r7, #28]
 80057c4:	6a3a      	ldr	r2, [r7, #32]
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e5      	bne.n	800579e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	2b10      	cmp	r3, #16
 80057de:	d10a      	bne.n	80057f6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057fa:	4619      	mov	r1, r3
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff fe29 	bl	8005454 <HAL_UARTEx_RxEventCallback>
 8005802:	e002      	b.n	800580a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7fc fe41 	bl	800248c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	e002      	b.n	8005814 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	e000      	b.n	8005814 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005812:	2302      	movs	r3, #2
  }
}
 8005814:	4618      	mov	r0, r3
 8005816:	3730      	adds	r7, #48	; 0x30
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800581c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005820:	b0c0      	sub	sp, #256	; 0x100
 8005822:	af00      	add	r7, sp, #0
 8005824:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005838:	68d9      	ldr	r1, [r3, #12]
 800583a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	ea40 0301 	orr.w	r3, r0, r1
 8005844:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	431a      	orrs	r2, r3
 8005854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	431a      	orrs	r2, r3
 800585c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005874:	f021 010c 	bic.w	r1, r1, #12
 8005878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005882:	430b      	orrs	r3, r1
 8005884:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005896:	6999      	ldr	r1, [r3, #24]
 8005898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	ea40 0301 	orr.w	r3, r0, r1
 80058a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	4b8f      	ldr	r3, [pc, #572]	; (8005ae8 <UART_SetConfig+0x2cc>)
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d005      	beq.n	80058bc <UART_SetConfig+0xa0>
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	4b8d      	ldr	r3, [pc, #564]	; (8005aec <UART_SetConfig+0x2d0>)
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d104      	bne.n	80058c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058bc:	f7fe fd84 	bl	80043c8 <HAL_RCC_GetPCLK2Freq>
 80058c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80058c4:	e003      	b.n	80058ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058c6:	f7fe fd6b 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 80058ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d8:	f040 810c 	bne.w	8005af4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058e0:	2200      	movs	r2, #0
 80058e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80058ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80058ee:	4622      	mov	r2, r4
 80058f0:	462b      	mov	r3, r5
 80058f2:	1891      	adds	r1, r2, r2
 80058f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80058f6:	415b      	adcs	r3, r3
 80058f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80058fe:	4621      	mov	r1, r4
 8005900:	eb12 0801 	adds.w	r8, r2, r1
 8005904:	4629      	mov	r1, r5
 8005906:	eb43 0901 	adc.w	r9, r3, r1
 800590a:	f04f 0200 	mov.w	r2, #0
 800590e:	f04f 0300 	mov.w	r3, #0
 8005912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800591a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800591e:	4690      	mov	r8, r2
 8005920:	4699      	mov	r9, r3
 8005922:	4623      	mov	r3, r4
 8005924:	eb18 0303 	adds.w	r3, r8, r3
 8005928:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800592c:	462b      	mov	r3, r5
 800592e:	eb49 0303 	adc.w	r3, r9, r3
 8005932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005942:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005946:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800594a:	460b      	mov	r3, r1
 800594c:	18db      	adds	r3, r3, r3
 800594e:	653b      	str	r3, [r7, #80]	; 0x50
 8005950:	4613      	mov	r3, r2
 8005952:	eb42 0303 	adc.w	r3, r2, r3
 8005956:	657b      	str	r3, [r7, #84]	; 0x54
 8005958:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800595c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005960:	f7fb f992 	bl	8000c88 <__aeabi_uldivmod>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4b61      	ldr	r3, [pc, #388]	; (8005af0 <UART_SetConfig+0x2d4>)
 800596a:	fba3 2302 	umull	r2, r3, r3, r2
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	011c      	lsls	r4, r3, #4
 8005972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005976:	2200      	movs	r2, #0
 8005978:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800597c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005980:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005984:	4642      	mov	r2, r8
 8005986:	464b      	mov	r3, r9
 8005988:	1891      	adds	r1, r2, r2
 800598a:	64b9      	str	r1, [r7, #72]	; 0x48
 800598c:	415b      	adcs	r3, r3
 800598e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005990:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005994:	4641      	mov	r1, r8
 8005996:	eb12 0a01 	adds.w	sl, r2, r1
 800599a:	4649      	mov	r1, r9
 800599c:	eb43 0b01 	adc.w	fp, r3, r1
 80059a0:	f04f 0200 	mov.w	r2, #0
 80059a4:	f04f 0300 	mov.w	r3, #0
 80059a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059b4:	4692      	mov	sl, r2
 80059b6:	469b      	mov	fp, r3
 80059b8:	4643      	mov	r3, r8
 80059ba:	eb1a 0303 	adds.w	r3, sl, r3
 80059be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059c2:	464b      	mov	r3, r9
 80059c4:	eb4b 0303 	adc.w	r3, fp, r3
 80059c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80059dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80059e0:	460b      	mov	r3, r1
 80059e2:	18db      	adds	r3, r3, r3
 80059e4:	643b      	str	r3, [r7, #64]	; 0x40
 80059e6:	4613      	mov	r3, r2
 80059e8:	eb42 0303 	adc.w	r3, r2, r3
 80059ec:	647b      	str	r3, [r7, #68]	; 0x44
 80059ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80059f6:	f7fb f947 	bl	8000c88 <__aeabi_uldivmod>
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	4611      	mov	r1, r2
 8005a00:	4b3b      	ldr	r3, [pc, #236]	; (8005af0 <UART_SetConfig+0x2d4>)
 8005a02:	fba3 2301 	umull	r2, r3, r3, r1
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	2264      	movs	r2, #100	; 0x64
 8005a0a:	fb02 f303 	mul.w	r3, r2, r3
 8005a0e:	1acb      	subs	r3, r1, r3
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a16:	4b36      	ldr	r3, [pc, #216]	; (8005af0 <UART_SetConfig+0x2d4>)
 8005a18:	fba3 2302 	umull	r2, r3, r3, r2
 8005a1c:	095b      	lsrs	r3, r3, #5
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a24:	441c      	add	r4, r3
 8005a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a38:	4642      	mov	r2, r8
 8005a3a:	464b      	mov	r3, r9
 8005a3c:	1891      	adds	r1, r2, r2
 8005a3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a40:	415b      	adcs	r3, r3
 8005a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a48:	4641      	mov	r1, r8
 8005a4a:	1851      	adds	r1, r2, r1
 8005a4c:	6339      	str	r1, [r7, #48]	; 0x30
 8005a4e:	4649      	mov	r1, r9
 8005a50:	414b      	adcs	r3, r1
 8005a52:	637b      	str	r3, [r7, #52]	; 0x34
 8005a54:	f04f 0200 	mov.w	r2, #0
 8005a58:	f04f 0300 	mov.w	r3, #0
 8005a5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a60:	4659      	mov	r1, fp
 8005a62:	00cb      	lsls	r3, r1, #3
 8005a64:	4651      	mov	r1, sl
 8005a66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a6a:	4651      	mov	r1, sl
 8005a6c:	00ca      	lsls	r2, r1, #3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	4619      	mov	r1, r3
 8005a72:	4603      	mov	r3, r0
 8005a74:	4642      	mov	r2, r8
 8005a76:	189b      	adds	r3, r3, r2
 8005a78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a7c:	464b      	mov	r3, r9
 8005a7e:	460a      	mov	r2, r1
 8005a80:	eb42 0303 	adc.w	r3, r2, r3
 8005a84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	18db      	adds	r3, r3, r3
 8005aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	eb42 0303 	adc.w	r3, r2, r3
 8005aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005aae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ab2:	f7fb f8e9 	bl	8000c88 <__aeabi_uldivmod>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4b0d      	ldr	r3, [pc, #52]	; (8005af0 <UART_SetConfig+0x2d4>)
 8005abc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ac0:	095b      	lsrs	r3, r3, #5
 8005ac2:	2164      	movs	r1, #100	; 0x64
 8005ac4:	fb01 f303 	mul.w	r3, r1, r3
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	3332      	adds	r3, #50	; 0x32
 8005ace:	4a08      	ldr	r2, [pc, #32]	; (8005af0 <UART_SetConfig+0x2d4>)
 8005ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad4:	095b      	lsrs	r3, r3, #5
 8005ad6:	f003 0207 	and.w	r2, r3, #7
 8005ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4422      	add	r2, r4
 8005ae2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ae4:	e105      	b.n	8005cf2 <UART_SetConfig+0x4d6>
 8005ae6:	bf00      	nop
 8005ae8:	40011000 	.word	0x40011000
 8005aec:	40011400 	.word	0x40011400
 8005af0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005af8:	2200      	movs	r2, #0
 8005afa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005afe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b06:	4642      	mov	r2, r8
 8005b08:	464b      	mov	r3, r9
 8005b0a:	1891      	adds	r1, r2, r2
 8005b0c:	6239      	str	r1, [r7, #32]
 8005b0e:	415b      	adcs	r3, r3
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
 8005b12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b16:	4641      	mov	r1, r8
 8005b18:	1854      	adds	r4, r2, r1
 8005b1a:	4649      	mov	r1, r9
 8005b1c:	eb43 0501 	adc.w	r5, r3, r1
 8005b20:	f04f 0200 	mov.w	r2, #0
 8005b24:	f04f 0300 	mov.w	r3, #0
 8005b28:	00eb      	lsls	r3, r5, #3
 8005b2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b2e:	00e2      	lsls	r2, r4, #3
 8005b30:	4614      	mov	r4, r2
 8005b32:	461d      	mov	r5, r3
 8005b34:	4643      	mov	r3, r8
 8005b36:	18e3      	adds	r3, r4, r3
 8005b38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b3c:	464b      	mov	r3, r9
 8005b3e:	eb45 0303 	adc.w	r3, r5, r3
 8005b42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b56:	f04f 0200 	mov.w	r2, #0
 8005b5a:	f04f 0300 	mov.w	r3, #0
 8005b5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b62:	4629      	mov	r1, r5
 8005b64:	008b      	lsls	r3, r1, #2
 8005b66:	4621      	mov	r1, r4
 8005b68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b6c:	4621      	mov	r1, r4
 8005b6e:	008a      	lsls	r2, r1, #2
 8005b70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b74:	f7fb f888 	bl	8000c88 <__aeabi_uldivmod>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	4b60      	ldr	r3, [pc, #384]	; (8005d00 <UART_SetConfig+0x4e4>)
 8005b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b82:	095b      	lsrs	r3, r3, #5
 8005b84:	011c      	lsls	r4, r3, #4
 8005b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b98:	4642      	mov	r2, r8
 8005b9a:	464b      	mov	r3, r9
 8005b9c:	1891      	adds	r1, r2, r2
 8005b9e:	61b9      	str	r1, [r7, #24]
 8005ba0:	415b      	adcs	r3, r3
 8005ba2:	61fb      	str	r3, [r7, #28]
 8005ba4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ba8:	4641      	mov	r1, r8
 8005baa:	1851      	adds	r1, r2, r1
 8005bac:	6139      	str	r1, [r7, #16]
 8005bae:	4649      	mov	r1, r9
 8005bb0:	414b      	adcs	r3, r1
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	f04f 0300 	mov.w	r3, #0
 8005bbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bc0:	4659      	mov	r1, fp
 8005bc2:	00cb      	lsls	r3, r1, #3
 8005bc4:	4651      	mov	r1, sl
 8005bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bca:	4651      	mov	r1, sl
 8005bcc:	00ca      	lsls	r2, r1, #3
 8005bce:	4610      	mov	r0, r2
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	4642      	mov	r2, r8
 8005bd6:	189b      	adds	r3, r3, r2
 8005bd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bdc:	464b      	mov	r3, r9
 8005bde:	460a      	mov	r2, r1
 8005be0:	eb42 0303 	adc.w	r3, r2, r3
 8005be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bf2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005bf4:	f04f 0200 	mov.w	r2, #0
 8005bf8:	f04f 0300 	mov.w	r3, #0
 8005bfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c00:	4649      	mov	r1, r9
 8005c02:	008b      	lsls	r3, r1, #2
 8005c04:	4641      	mov	r1, r8
 8005c06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c0a:	4641      	mov	r1, r8
 8005c0c:	008a      	lsls	r2, r1, #2
 8005c0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c12:	f7fb f839 	bl	8000c88 <__aeabi_uldivmod>
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	4b39      	ldr	r3, [pc, #228]	; (8005d00 <UART_SetConfig+0x4e4>)
 8005c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c20:	095b      	lsrs	r3, r3, #5
 8005c22:	2164      	movs	r1, #100	; 0x64
 8005c24:	fb01 f303 	mul.w	r3, r1, r3
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	011b      	lsls	r3, r3, #4
 8005c2c:	3332      	adds	r3, #50	; 0x32
 8005c2e:	4a34      	ldr	r2, [pc, #208]	; (8005d00 <UART_SetConfig+0x4e4>)
 8005c30:	fba2 2303 	umull	r2, r3, r2, r3
 8005c34:	095b      	lsrs	r3, r3, #5
 8005c36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c3a:	441c      	add	r4, r3
 8005c3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c40:	2200      	movs	r2, #0
 8005c42:	673b      	str	r3, [r7, #112]	; 0x70
 8005c44:	677a      	str	r2, [r7, #116]	; 0x74
 8005c46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c4a:	4642      	mov	r2, r8
 8005c4c:	464b      	mov	r3, r9
 8005c4e:	1891      	adds	r1, r2, r2
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	415b      	adcs	r3, r3
 8005c54:	60fb      	str	r3, [r7, #12]
 8005c56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c5a:	4641      	mov	r1, r8
 8005c5c:	1851      	adds	r1, r2, r1
 8005c5e:	6039      	str	r1, [r7, #0]
 8005c60:	4649      	mov	r1, r9
 8005c62:	414b      	adcs	r3, r1
 8005c64:	607b      	str	r3, [r7, #4]
 8005c66:	f04f 0200 	mov.w	r2, #0
 8005c6a:	f04f 0300 	mov.w	r3, #0
 8005c6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c72:	4659      	mov	r1, fp
 8005c74:	00cb      	lsls	r3, r1, #3
 8005c76:	4651      	mov	r1, sl
 8005c78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c7c:	4651      	mov	r1, sl
 8005c7e:	00ca      	lsls	r2, r1, #3
 8005c80:	4610      	mov	r0, r2
 8005c82:	4619      	mov	r1, r3
 8005c84:	4603      	mov	r3, r0
 8005c86:	4642      	mov	r2, r8
 8005c88:	189b      	adds	r3, r3, r2
 8005c8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c8c:	464b      	mov	r3, r9
 8005c8e:	460a      	mov	r2, r1
 8005c90:	eb42 0303 	adc.w	r3, r2, r3
 8005c94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	663b      	str	r3, [r7, #96]	; 0x60
 8005ca0:	667a      	str	r2, [r7, #100]	; 0x64
 8005ca2:	f04f 0200 	mov.w	r2, #0
 8005ca6:	f04f 0300 	mov.w	r3, #0
 8005caa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005cae:	4649      	mov	r1, r9
 8005cb0:	008b      	lsls	r3, r1, #2
 8005cb2:	4641      	mov	r1, r8
 8005cb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cb8:	4641      	mov	r1, r8
 8005cba:	008a      	lsls	r2, r1, #2
 8005cbc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005cc0:	f7fa ffe2 	bl	8000c88 <__aeabi_uldivmod>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4b0d      	ldr	r3, [pc, #52]	; (8005d00 <UART_SetConfig+0x4e4>)
 8005cca:	fba3 1302 	umull	r1, r3, r3, r2
 8005cce:	095b      	lsrs	r3, r3, #5
 8005cd0:	2164      	movs	r1, #100	; 0x64
 8005cd2:	fb01 f303 	mul.w	r3, r1, r3
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	011b      	lsls	r3, r3, #4
 8005cda:	3332      	adds	r3, #50	; 0x32
 8005cdc:	4a08      	ldr	r2, [pc, #32]	; (8005d00 <UART_SetConfig+0x4e4>)
 8005cde:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce2:	095b      	lsrs	r3, r3, #5
 8005ce4:	f003 020f 	and.w	r2, r3, #15
 8005ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4422      	add	r2, r4
 8005cf0:	609a      	str	r2, [r3, #8]
}
 8005cf2:	bf00      	nop
 8005cf4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cfe:	bf00      	nop
 8005d00:	51eb851f 	.word	0x51eb851f

08005d04 <__errno>:
 8005d04:	4b01      	ldr	r3, [pc, #4]	; (8005d0c <__errno+0x8>)
 8005d06:	6818      	ldr	r0, [r3, #0]
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	20000018 	.word	0x20000018

08005d10 <__libc_init_array>:
 8005d10:	b570      	push	{r4, r5, r6, lr}
 8005d12:	4d0d      	ldr	r5, [pc, #52]	; (8005d48 <__libc_init_array+0x38>)
 8005d14:	4c0d      	ldr	r4, [pc, #52]	; (8005d4c <__libc_init_array+0x3c>)
 8005d16:	1b64      	subs	r4, r4, r5
 8005d18:	10a4      	asrs	r4, r4, #2
 8005d1a:	2600      	movs	r6, #0
 8005d1c:	42a6      	cmp	r6, r4
 8005d1e:	d109      	bne.n	8005d34 <__libc_init_array+0x24>
 8005d20:	4d0b      	ldr	r5, [pc, #44]	; (8005d50 <__libc_init_array+0x40>)
 8005d22:	4c0c      	ldr	r4, [pc, #48]	; (8005d54 <__libc_init_array+0x44>)
 8005d24:	f004 fc6e 	bl	800a604 <_init>
 8005d28:	1b64      	subs	r4, r4, r5
 8005d2a:	10a4      	asrs	r4, r4, #2
 8005d2c:	2600      	movs	r6, #0
 8005d2e:	42a6      	cmp	r6, r4
 8005d30:	d105      	bne.n	8005d3e <__libc_init_array+0x2e>
 8005d32:	bd70      	pop	{r4, r5, r6, pc}
 8005d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d38:	4798      	blx	r3
 8005d3a:	3601      	adds	r6, #1
 8005d3c:	e7ee      	b.n	8005d1c <__libc_init_array+0xc>
 8005d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d42:	4798      	blx	r3
 8005d44:	3601      	adds	r6, #1
 8005d46:	e7f2      	b.n	8005d2e <__libc_init_array+0x1e>
 8005d48:	0800ac98 	.word	0x0800ac98
 8005d4c:	0800ac98 	.word	0x0800ac98
 8005d50:	0800ac98 	.word	0x0800ac98
 8005d54:	0800ac9c 	.word	0x0800ac9c

08005d58 <memset>:
 8005d58:	4402      	add	r2, r0
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d100      	bne.n	8005d62 <memset+0xa>
 8005d60:	4770      	bx	lr
 8005d62:	f803 1b01 	strb.w	r1, [r3], #1
 8005d66:	e7f9      	b.n	8005d5c <memset+0x4>

08005d68 <__cvt>:
 8005d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d6c:	ec55 4b10 	vmov	r4, r5, d0
 8005d70:	2d00      	cmp	r5, #0
 8005d72:	460e      	mov	r6, r1
 8005d74:	4619      	mov	r1, r3
 8005d76:	462b      	mov	r3, r5
 8005d78:	bfbb      	ittet	lt
 8005d7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005d7e:	461d      	movlt	r5, r3
 8005d80:	2300      	movge	r3, #0
 8005d82:	232d      	movlt	r3, #45	; 0x2d
 8005d84:	700b      	strb	r3, [r1, #0]
 8005d86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d8c:	4691      	mov	r9, r2
 8005d8e:	f023 0820 	bic.w	r8, r3, #32
 8005d92:	bfbc      	itt	lt
 8005d94:	4622      	movlt	r2, r4
 8005d96:	4614      	movlt	r4, r2
 8005d98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d9c:	d005      	beq.n	8005daa <__cvt+0x42>
 8005d9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005da2:	d100      	bne.n	8005da6 <__cvt+0x3e>
 8005da4:	3601      	adds	r6, #1
 8005da6:	2102      	movs	r1, #2
 8005da8:	e000      	b.n	8005dac <__cvt+0x44>
 8005daa:	2103      	movs	r1, #3
 8005dac:	ab03      	add	r3, sp, #12
 8005dae:	9301      	str	r3, [sp, #4]
 8005db0:	ab02      	add	r3, sp, #8
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	ec45 4b10 	vmov	d0, r4, r5
 8005db8:	4653      	mov	r3, sl
 8005dba:	4632      	mov	r2, r6
 8005dbc:	f000 fe18 	bl	80069f0 <_dtoa_r>
 8005dc0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005dc4:	4607      	mov	r7, r0
 8005dc6:	d102      	bne.n	8005dce <__cvt+0x66>
 8005dc8:	f019 0f01 	tst.w	r9, #1
 8005dcc:	d022      	beq.n	8005e14 <__cvt+0xac>
 8005dce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005dd2:	eb07 0906 	add.w	r9, r7, r6
 8005dd6:	d110      	bne.n	8005dfa <__cvt+0x92>
 8005dd8:	783b      	ldrb	r3, [r7, #0]
 8005dda:	2b30      	cmp	r3, #48	; 0x30
 8005ddc:	d10a      	bne.n	8005df4 <__cvt+0x8c>
 8005dde:	2200      	movs	r2, #0
 8005de0:	2300      	movs	r3, #0
 8005de2:	4620      	mov	r0, r4
 8005de4:	4629      	mov	r1, r5
 8005de6:	f7fa fe8f 	bl	8000b08 <__aeabi_dcmpeq>
 8005dea:	b918      	cbnz	r0, 8005df4 <__cvt+0x8c>
 8005dec:	f1c6 0601 	rsb	r6, r6, #1
 8005df0:	f8ca 6000 	str.w	r6, [sl]
 8005df4:	f8da 3000 	ldr.w	r3, [sl]
 8005df8:	4499      	add	r9, r3
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	4620      	mov	r0, r4
 8005e00:	4629      	mov	r1, r5
 8005e02:	f7fa fe81 	bl	8000b08 <__aeabi_dcmpeq>
 8005e06:	b108      	cbz	r0, 8005e0c <__cvt+0xa4>
 8005e08:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e0c:	2230      	movs	r2, #48	; 0x30
 8005e0e:	9b03      	ldr	r3, [sp, #12]
 8005e10:	454b      	cmp	r3, r9
 8005e12:	d307      	bcc.n	8005e24 <__cvt+0xbc>
 8005e14:	9b03      	ldr	r3, [sp, #12]
 8005e16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e18:	1bdb      	subs	r3, r3, r7
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	b004      	add	sp, #16
 8005e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e24:	1c59      	adds	r1, r3, #1
 8005e26:	9103      	str	r1, [sp, #12]
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	e7f0      	b.n	8005e0e <__cvt+0xa6>

08005e2c <__exponent>:
 8005e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2900      	cmp	r1, #0
 8005e32:	bfb8      	it	lt
 8005e34:	4249      	neglt	r1, r1
 8005e36:	f803 2b02 	strb.w	r2, [r3], #2
 8005e3a:	bfb4      	ite	lt
 8005e3c:	222d      	movlt	r2, #45	; 0x2d
 8005e3e:	222b      	movge	r2, #43	; 0x2b
 8005e40:	2909      	cmp	r1, #9
 8005e42:	7042      	strb	r2, [r0, #1]
 8005e44:	dd2a      	ble.n	8005e9c <__exponent+0x70>
 8005e46:	f10d 0407 	add.w	r4, sp, #7
 8005e4a:	46a4      	mov	ip, r4
 8005e4c:	270a      	movs	r7, #10
 8005e4e:	46a6      	mov	lr, r4
 8005e50:	460a      	mov	r2, r1
 8005e52:	fb91 f6f7 	sdiv	r6, r1, r7
 8005e56:	fb07 1516 	mls	r5, r7, r6, r1
 8005e5a:	3530      	adds	r5, #48	; 0x30
 8005e5c:	2a63      	cmp	r2, #99	; 0x63
 8005e5e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005e62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005e66:	4631      	mov	r1, r6
 8005e68:	dcf1      	bgt.n	8005e4e <__exponent+0x22>
 8005e6a:	3130      	adds	r1, #48	; 0x30
 8005e6c:	f1ae 0502 	sub.w	r5, lr, #2
 8005e70:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005e74:	1c44      	adds	r4, r0, #1
 8005e76:	4629      	mov	r1, r5
 8005e78:	4561      	cmp	r1, ip
 8005e7a:	d30a      	bcc.n	8005e92 <__exponent+0x66>
 8005e7c:	f10d 0209 	add.w	r2, sp, #9
 8005e80:	eba2 020e 	sub.w	r2, r2, lr
 8005e84:	4565      	cmp	r5, ip
 8005e86:	bf88      	it	hi
 8005e88:	2200      	movhi	r2, #0
 8005e8a:	4413      	add	r3, r2
 8005e8c:	1a18      	subs	r0, r3, r0
 8005e8e:	b003      	add	sp, #12
 8005e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e96:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005e9a:	e7ed      	b.n	8005e78 <__exponent+0x4c>
 8005e9c:	2330      	movs	r3, #48	; 0x30
 8005e9e:	3130      	adds	r1, #48	; 0x30
 8005ea0:	7083      	strb	r3, [r0, #2]
 8005ea2:	70c1      	strb	r1, [r0, #3]
 8005ea4:	1d03      	adds	r3, r0, #4
 8005ea6:	e7f1      	b.n	8005e8c <__exponent+0x60>

08005ea8 <_printf_float>:
 8005ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eac:	ed2d 8b02 	vpush	{d8}
 8005eb0:	b08d      	sub	sp, #52	; 0x34
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005eb8:	4616      	mov	r6, r2
 8005eba:	461f      	mov	r7, r3
 8005ebc:	4605      	mov	r5, r0
 8005ebe:	f001 fd3d 	bl	800793c <_localeconv_r>
 8005ec2:	f8d0 a000 	ldr.w	sl, [r0]
 8005ec6:	4650      	mov	r0, sl
 8005ec8:	f7fa f9a2 	bl	8000210 <strlen>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	930a      	str	r3, [sp, #40]	; 0x28
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	9305      	str	r3, [sp, #20]
 8005ed4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ed8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005edc:	3307      	adds	r3, #7
 8005ede:	f023 0307 	bic.w	r3, r3, #7
 8005ee2:	f103 0208 	add.w	r2, r3, #8
 8005ee6:	f8c8 2000 	str.w	r2, [r8]
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005ef2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005ef6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005efa:	9307      	str	r3, [sp, #28]
 8005efc:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f00:	ee08 0a10 	vmov	s16, r0
 8005f04:	4b9f      	ldr	r3, [pc, #636]	; (8006184 <_printf_float+0x2dc>)
 8005f06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f0e:	f7fa fe2d 	bl	8000b6c <__aeabi_dcmpun>
 8005f12:	bb88      	cbnz	r0, 8005f78 <_printf_float+0xd0>
 8005f14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f18:	4b9a      	ldr	r3, [pc, #616]	; (8006184 <_printf_float+0x2dc>)
 8005f1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f1e:	f7fa fe07 	bl	8000b30 <__aeabi_dcmple>
 8005f22:	bb48      	cbnz	r0, 8005f78 <_printf_float+0xd0>
 8005f24:	2200      	movs	r2, #0
 8005f26:	2300      	movs	r3, #0
 8005f28:	4640      	mov	r0, r8
 8005f2a:	4649      	mov	r1, r9
 8005f2c:	f7fa fdf6 	bl	8000b1c <__aeabi_dcmplt>
 8005f30:	b110      	cbz	r0, 8005f38 <_printf_float+0x90>
 8005f32:	232d      	movs	r3, #45	; 0x2d
 8005f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f38:	4b93      	ldr	r3, [pc, #588]	; (8006188 <_printf_float+0x2e0>)
 8005f3a:	4894      	ldr	r0, [pc, #592]	; (800618c <_printf_float+0x2e4>)
 8005f3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005f40:	bf94      	ite	ls
 8005f42:	4698      	movls	r8, r3
 8005f44:	4680      	movhi	r8, r0
 8005f46:	2303      	movs	r3, #3
 8005f48:	6123      	str	r3, [r4, #16]
 8005f4a:	9b05      	ldr	r3, [sp, #20]
 8005f4c:	f023 0204 	bic.w	r2, r3, #4
 8005f50:	6022      	str	r2, [r4, #0]
 8005f52:	f04f 0900 	mov.w	r9, #0
 8005f56:	9700      	str	r7, [sp, #0]
 8005f58:	4633      	mov	r3, r6
 8005f5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005f5c:	4621      	mov	r1, r4
 8005f5e:	4628      	mov	r0, r5
 8005f60:	f000 f9d8 	bl	8006314 <_printf_common>
 8005f64:	3001      	adds	r0, #1
 8005f66:	f040 8090 	bne.w	800608a <_printf_float+0x1e2>
 8005f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f6e:	b00d      	add	sp, #52	; 0x34
 8005f70:	ecbd 8b02 	vpop	{d8}
 8005f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f78:	4642      	mov	r2, r8
 8005f7a:	464b      	mov	r3, r9
 8005f7c:	4640      	mov	r0, r8
 8005f7e:	4649      	mov	r1, r9
 8005f80:	f7fa fdf4 	bl	8000b6c <__aeabi_dcmpun>
 8005f84:	b140      	cbz	r0, 8005f98 <_printf_float+0xf0>
 8005f86:	464b      	mov	r3, r9
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	bfbc      	itt	lt
 8005f8c:	232d      	movlt	r3, #45	; 0x2d
 8005f8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f92:	487f      	ldr	r0, [pc, #508]	; (8006190 <_printf_float+0x2e8>)
 8005f94:	4b7f      	ldr	r3, [pc, #508]	; (8006194 <_printf_float+0x2ec>)
 8005f96:	e7d1      	b.n	8005f3c <_printf_float+0x94>
 8005f98:	6863      	ldr	r3, [r4, #4]
 8005f9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f9e:	9206      	str	r2, [sp, #24]
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	d13f      	bne.n	8006024 <_printf_float+0x17c>
 8005fa4:	2306      	movs	r3, #6
 8005fa6:	6063      	str	r3, [r4, #4]
 8005fa8:	9b05      	ldr	r3, [sp, #20]
 8005faa:	6861      	ldr	r1, [r4, #4]
 8005fac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	9303      	str	r3, [sp, #12]
 8005fb4:	ab0a      	add	r3, sp, #40	; 0x28
 8005fb6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005fba:	ab09      	add	r3, sp, #36	; 0x24
 8005fbc:	ec49 8b10 	vmov	d0, r8, r9
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	6022      	str	r2, [r4, #0]
 8005fc4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005fc8:	4628      	mov	r0, r5
 8005fca:	f7ff fecd 	bl	8005d68 <__cvt>
 8005fce:	9b06      	ldr	r3, [sp, #24]
 8005fd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fd2:	2b47      	cmp	r3, #71	; 0x47
 8005fd4:	4680      	mov	r8, r0
 8005fd6:	d108      	bne.n	8005fea <_printf_float+0x142>
 8005fd8:	1cc8      	adds	r0, r1, #3
 8005fda:	db02      	blt.n	8005fe2 <_printf_float+0x13a>
 8005fdc:	6863      	ldr	r3, [r4, #4]
 8005fde:	4299      	cmp	r1, r3
 8005fe0:	dd41      	ble.n	8006066 <_printf_float+0x1be>
 8005fe2:	f1ab 0b02 	sub.w	fp, fp, #2
 8005fe6:	fa5f fb8b 	uxtb.w	fp, fp
 8005fea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005fee:	d820      	bhi.n	8006032 <_printf_float+0x18a>
 8005ff0:	3901      	subs	r1, #1
 8005ff2:	465a      	mov	r2, fp
 8005ff4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ff8:	9109      	str	r1, [sp, #36]	; 0x24
 8005ffa:	f7ff ff17 	bl	8005e2c <__exponent>
 8005ffe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006000:	1813      	adds	r3, r2, r0
 8006002:	2a01      	cmp	r2, #1
 8006004:	4681      	mov	r9, r0
 8006006:	6123      	str	r3, [r4, #16]
 8006008:	dc02      	bgt.n	8006010 <_printf_float+0x168>
 800600a:	6822      	ldr	r2, [r4, #0]
 800600c:	07d2      	lsls	r2, r2, #31
 800600e:	d501      	bpl.n	8006014 <_printf_float+0x16c>
 8006010:	3301      	adds	r3, #1
 8006012:	6123      	str	r3, [r4, #16]
 8006014:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006018:	2b00      	cmp	r3, #0
 800601a:	d09c      	beq.n	8005f56 <_printf_float+0xae>
 800601c:	232d      	movs	r3, #45	; 0x2d
 800601e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006022:	e798      	b.n	8005f56 <_printf_float+0xae>
 8006024:	9a06      	ldr	r2, [sp, #24]
 8006026:	2a47      	cmp	r2, #71	; 0x47
 8006028:	d1be      	bne.n	8005fa8 <_printf_float+0x100>
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1bc      	bne.n	8005fa8 <_printf_float+0x100>
 800602e:	2301      	movs	r3, #1
 8006030:	e7b9      	b.n	8005fa6 <_printf_float+0xfe>
 8006032:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006036:	d118      	bne.n	800606a <_printf_float+0x1c2>
 8006038:	2900      	cmp	r1, #0
 800603a:	6863      	ldr	r3, [r4, #4]
 800603c:	dd0b      	ble.n	8006056 <_printf_float+0x1ae>
 800603e:	6121      	str	r1, [r4, #16]
 8006040:	b913      	cbnz	r3, 8006048 <_printf_float+0x1a0>
 8006042:	6822      	ldr	r2, [r4, #0]
 8006044:	07d0      	lsls	r0, r2, #31
 8006046:	d502      	bpl.n	800604e <_printf_float+0x1a6>
 8006048:	3301      	adds	r3, #1
 800604a:	440b      	add	r3, r1
 800604c:	6123      	str	r3, [r4, #16]
 800604e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006050:	f04f 0900 	mov.w	r9, #0
 8006054:	e7de      	b.n	8006014 <_printf_float+0x16c>
 8006056:	b913      	cbnz	r3, 800605e <_printf_float+0x1b6>
 8006058:	6822      	ldr	r2, [r4, #0]
 800605a:	07d2      	lsls	r2, r2, #31
 800605c:	d501      	bpl.n	8006062 <_printf_float+0x1ba>
 800605e:	3302      	adds	r3, #2
 8006060:	e7f4      	b.n	800604c <_printf_float+0x1a4>
 8006062:	2301      	movs	r3, #1
 8006064:	e7f2      	b.n	800604c <_printf_float+0x1a4>
 8006066:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800606a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800606c:	4299      	cmp	r1, r3
 800606e:	db05      	blt.n	800607c <_printf_float+0x1d4>
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	6121      	str	r1, [r4, #16]
 8006074:	07d8      	lsls	r0, r3, #31
 8006076:	d5ea      	bpl.n	800604e <_printf_float+0x1a6>
 8006078:	1c4b      	adds	r3, r1, #1
 800607a:	e7e7      	b.n	800604c <_printf_float+0x1a4>
 800607c:	2900      	cmp	r1, #0
 800607e:	bfd4      	ite	le
 8006080:	f1c1 0202 	rsble	r2, r1, #2
 8006084:	2201      	movgt	r2, #1
 8006086:	4413      	add	r3, r2
 8006088:	e7e0      	b.n	800604c <_printf_float+0x1a4>
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	055a      	lsls	r2, r3, #21
 800608e:	d407      	bmi.n	80060a0 <_printf_float+0x1f8>
 8006090:	6923      	ldr	r3, [r4, #16]
 8006092:	4642      	mov	r2, r8
 8006094:	4631      	mov	r1, r6
 8006096:	4628      	mov	r0, r5
 8006098:	47b8      	blx	r7
 800609a:	3001      	adds	r0, #1
 800609c:	d12c      	bne.n	80060f8 <_printf_float+0x250>
 800609e:	e764      	b.n	8005f6a <_printf_float+0xc2>
 80060a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80060a4:	f240 80e0 	bls.w	8006268 <_printf_float+0x3c0>
 80060a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060ac:	2200      	movs	r2, #0
 80060ae:	2300      	movs	r3, #0
 80060b0:	f7fa fd2a 	bl	8000b08 <__aeabi_dcmpeq>
 80060b4:	2800      	cmp	r0, #0
 80060b6:	d034      	beq.n	8006122 <_printf_float+0x27a>
 80060b8:	4a37      	ldr	r2, [pc, #220]	; (8006198 <_printf_float+0x2f0>)
 80060ba:	2301      	movs	r3, #1
 80060bc:	4631      	mov	r1, r6
 80060be:	4628      	mov	r0, r5
 80060c0:	47b8      	blx	r7
 80060c2:	3001      	adds	r0, #1
 80060c4:	f43f af51 	beq.w	8005f6a <_printf_float+0xc2>
 80060c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060cc:	429a      	cmp	r2, r3
 80060ce:	db02      	blt.n	80060d6 <_printf_float+0x22e>
 80060d0:	6823      	ldr	r3, [r4, #0]
 80060d2:	07d8      	lsls	r0, r3, #31
 80060d4:	d510      	bpl.n	80060f8 <_printf_float+0x250>
 80060d6:	ee18 3a10 	vmov	r3, s16
 80060da:	4652      	mov	r2, sl
 80060dc:	4631      	mov	r1, r6
 80060de:	4628      	mov	r0, r5
 80060e0:	47b8      	blx	r7
 80060e2:	3001      	adds	r0, #1
 80060e4:	f43f af41 	beq.w	8005f6a <_printf_float+0xc2>
 80060e8:	f04f 0800 	mov.w	r8, #0
 80060ec:	f104 091a 	add.w	r9, r4, #26
 80060f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060f2:	3b01      	subs	r3, #1
 80060f4:	4543      	cmp	r3, r8
 80060f6:	dc09      	bgt.n	800610c <_printf_float+0x264>
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	079b      	lsls	r3, r3, #30
 80060fc:	f100 8105 	bmi.w	800630a <_printf_float+0x462>
 8006100:	68e0      	ldr	r0, [r4, #12]
 8006102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006104:	4298      	cmp	r0, r3
 8006106:	bfb8      	it	lt
 8006108:	4618      	movlt	r0, r3
 800610a:	e730      	b.n	8005f6e <_printf_float+0xc6>
 800610c:	2301      	movs	r3, #1
 800610e:	464a      	mov	r2, r9
 8006110:	4631      	mov	r1, r6
 8006112:	4628      	mov	r0, r5
 8006114:	47b8      	blx	r7
 8006116:	3001      	adds	r0, #1
 8006118:	f43f af27 	beq.w	8005f6a <_printf_float+0xc2>
 800611c:	f108 0801 	add.w	r8, r8, #1
 8006120:	e7e6      	b.n	80060f0 <_printf_float+0x248>
 8006122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006124:	2b00      	cmp	r3, #0
 8006126:	dc39      	bgt.n	800619c <_printf_float+0x2f4>
 8006128:	4a1b      	ldr	r2, [pc, #108]	; (8006198 <_printf_float+0x2f0>)
 800612a:	2301      	movs	r3, #1
 800612c:	4631      	mov	r1, r6
 800612e:	4628      	mov	r0, r5
 8006130:	47b8      	blx	r7
 8006132:	3001      	adds	r0, #1
 8006134:	f43f af19 	beq.w	8005f6a <_printf_float+0xc2>
 8006138:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800613c:	4313      	orrs	r3, r2
 800613e:	d102      	bne.n	8006146 <_printf_float+0x29e>
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	07d9      	lsls	r1, r3, #31
 8006144:	d5d8      	bpl.n	80060f8 <_printf_float+0x250>
 8006146:	ee18 3a10 	vmov	r3, s16
 800614a:	4652      	mov	r2, sl
 800614c:	4631      	mov	r1, r6
 800614e:	4628      	mov	r0, r5
 8006150:	47b8      	blx	r7
 8006152:	3001      	adds	r0, #1
 8006154:	f43f af09 	beq.w	8005f6a <_printf_float+0xc2>
 8006158:	f04f 0900 	mov.w	r9, #0
 800615c:	f104 0a1a 	add.w	sl, r4, #26
 8006160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006162:	425b      	negs	r3, r3
 8006164:	454b      	cmp	r3, r9
 8006166:	dc01      	bgt.n	800616c <_printf_float+0x2c4>
 8006168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800616a:	e792      	b.n	8006092 <_printf_float+0x1ea>
 800616c:	2301      	movs	r3, #1
 800616e:	4652      	mov	r2, sl
 8006170:	4631      	mov	r1, r6
 8006172:	4628      	mov	r0, r5
 8006174:	47b8      	blx	r7
 8006176:	3001      	adds	r0, #1
 8006178:	f43f aef7 	beq.w	8005f6a <_printf_float+0xc2>
 800617c:	f109 0901 	add.w	r9, r9, #1
 8006180:	e7ee      	b.n	8006160 <_printf_float+0x2b8>
 8006182:	bf00      	nop
 8006184:	7fefffff 	.word	0x7fefffff
 8006188:	0800a66c 	.word	0x0800a66c
 800618c:	0800a670 	.word	0x0800a670
 8006190:	0800a678 	.word	0x0800a678
 8006194:	0800a674 	.word	0x0800a674
 8006198:	0800a67c 	.word	0x0800a67c
 800619c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800619e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061a0:	429a      	cmp	r2, r3
 80061a2:	bfa8      	it	ge
 80061a4:	461a      	movge	r2, r3
 80061a6:	2a00      	cmp	r2, #0
 80061a8:	4691      	mov	r9, r2
 80061aa:	dc37      	bgt.n	800621c <_printf_float+0x374>
 80061ac:	f04f 0b00 	mov.w	fp, #0
 80061b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061b4:	f104 021a 	add.w	r2, r4, #26
 80061b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061ba:	9305      	str	r3, [sp, #20]
 80061bc:	eba3 0309 	sub.w	r3, r3, r9
 80061c0:	455b      	cmp	r3, fp
 80061c2:	dc33      	bgt.n	800622c <_printf_float+0x384>
 80061c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061c8:	429a      	cmp	r2, r3
 80061ca:	db3b      	blt.n	8006244 <_printf_float+0x39c>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	07da      	lsls	r2, r3, #31
 80061d0:	d438      	bmi.n	8006244 <_printf_float+0x39c>
 80061d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061d4:	9a05      	ldr	r2, [sp, #20]
 80061d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061d8:	1a9a      	subs	r2, r3, r2
 80061da:	eba3 0901 	sub.w	r9, r3, r1
 80061de:	4591      	cmp	r9, r2
 80061e0:	bfa8      	it	ge
 80061e2:	4691      	movge	r9, r2
 80061e4:	f1b9 0f00 	cmp.w	r9, #0
 80061e8:	dc35      	bgt.n	8006256 <_printf_float+0x3ae>
 80061ea:	f04f 0800 	mov.w	r8, #0
 80061ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061f2:	f104 0a1a 	add.w	sl, r4, #26
 80061f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061fa:	1a9b      	subs	r3, r3, r2
 80061fc:	eba3 0309 	sub.w	r3, r3, r9
 8006200:	4543      	cmp	r3, r8
 8006202:	f77f af79 	ble.w	80060f8 <_printf_float+0x250>
 8006206:	2301      	movs	r3, #1
 8006208:	4652      	mov	r2, sl
 800620a:	4631      	mov	r1, r6
 800620c:	4628      	mov	r0, r5
 800620e:	47b8      	blx	r7
 8006210:	3001      	adds	r0, #1
 8006212:	f43f aeaa 	beq.w	8005f6a <_printf_float+0xc2>
 8006216:	f108 0801 	add.w	r8, r8, #1
 800621a:	e7ec      	b.n	80061f6 <_printf_float+0x34e>
 800621c:	4613      	mov	r3, r2
 800621e:	4631      	mov	r1, r6
 8006220:	4642      	mov	r2, r8
 8006222:	4628      	mov	r0, r5
 8006224:	47b8      	blx	r7
 8006226:	3001      	adds	r0, #1
 8006228:	d1c0      	bne.n	80061ac <_printf_float+0x304>
 800622a:	e69e      	b.n	8005f6a <_printf_float+0xc2>
 800622c:	2301      	movs	r3, #1
 800622e:	4631      	mov	r1, r6
 8006230:	4628      	mov	r0, r5
 8006232:	9205      	str	r2, [sp, #20]
 8006234:	47b8      	blx	r7
 8006236:	3001      	adds	r0, #1
 8006238:	f43f ae97 	beq.w	8005f6a <_printf_float+0xc2>
 800623c:	9a05      	ldr	r2, [sp, #20]
 800623e:	f10b 0b01 	add.w	fp, fp, #1
 8006242:	e7b9      	b.n	80061b8 <_printf_float+0x310>
 8006244:	ee18 3a10 	vmov	r3, s16
 8006248:	4652      	mov	r2, sl
 800624a:	4631      	mov	r1, r6
 800624c:	4628      	mov	r0, r5
 800624e:	47b8      	blx	r7
 8006250:	3001      	adds	r0, #1
 8006252:	d1be      	bne.n	80061d2 <_printf_float+0x32a>
 8006254:	e689      	b.n	8005f6a <_printf_float+0xc2>
 8006256:	9a05      	ldr	r2, [sp, #20]
 8006258:	464b      	mov	r3, r9
 800625a:	4442      	add	r2, r8
 800625c:	4631      	mov	r1, r6
 800625e:	4628      	mov	r0, r5
 8006260:	47b8      	blx	r7
 8006262:	3001      	adds	r0, #1
 8006264:	d1c1      	bne.n	80061ea <_printf_float+0x342>
 8006266:	e680      	b.n	8005f6a <_printf_float+0xc2>
 8006268:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800626a:	2a01      	cmp	r2, #1
 800626c:	dc01      	bgt.n	8006272 <_printf_float+0x3ca>
 800626e:	07db      	lsls	r3, r3, #31
 8006270:	d538      	bpl.n	80062e4 <_printf_float+0x43c>
 8006272:	2301      	movs	r3, #1
 8006274:	4642      	mov	r2, r8
 8006276:	4631      	mov	r1, r6
 8006278:	4628      	mov	r0, r5
 800627a:	47b8      	blx	r7
 800627c:	3001      	adds	r0, #1
 800627e:	f43f ae74 	beq.w	8005f6a <_printf_float+0xc2>
 8006282:	ee18 3a10 	vmov	r3, s16
 8006286:	4652      	mov	r2, sl
 8006288:	4631      	mov	r1, r6
 800628a:	4628      	mov	r0, r5
 800628c:	47b8      	blx	r7
 800628e:	3001      	adds	r0, #1
 8006290:	f43f ae6b 	beq.w	8005f6a <_printf_float+0xc2>
 8006294:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006298:	2200      	movs	r2, #0
 800629a:	2300      	movs	r3, #0
 800629c:	f7fa fc34 	bl	8000b08 <__aeabi_dcmpeq>
 80062a0:	b9d8      	cbnz	r0, 80062da <_printf_float+0x432>
 80062a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062a4:	f108 0201 	add.w	r2, r8, #1
 80062a8:	3b01      	subs	r3, #1
 80062aa:	4631      	mov	r1, r6
 80062ac:	4628      	mov	r0, r5
 80062ae:	47b8      	blx	r7
 80062b0:	3001      	adds	r0, #1
 80062b2:	d10e      	bne.n	80062d2 <_printf_float+0x42a>
 80062b4:	e659      	b.n	8005f6a <_printf_float+0xc2>
 80062b6:	2301      	movs	r3, #1
 80062b8:	4652      	mov	r2, sl
 80062ba:	4631      	mov	r1, r6
 80062bc:	4628      	mov	r0, r5
 80062be:	47b8      	blx	r7
 80062c0:	3001      	adds	r0, #1
 80062c2:	f43f ae52 	beq.w	8005f6a <_printf_float+0xc2>
 80062c6:	f108 0801 	add.w	r8, r8, #1
 80062ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062cc:	3b01      	subs	r3, #1
 80062ce:	4543      	cmp	r3, r8
 80062d0:	dcf1      	bgt.n	80062b6 <_printf_float+0x40e>
 80062d2:	464b      	mov	r3, r9
 80062d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80062d8:	e6dc      	b.n	8006094 <_printf_float+0x1ec>
 80062da:	f04f 0800 	mov.w	r8, #0
 80062de:	f104 0a1a 	add.w	sl, r4, #26
 80062e2:	e7f2      	b.n	80062ca <_printf_float+0x422>
 80062e4:	2301      	movs	r3, #1
 80062e6:	4642      	mov	r2, r8
 80062e8:	e7df      	b.n	80062aa <_printf_float+0x402>
 80062ea:	2301      	movs	r3, #1
 80062ec:	464a      	mov	r2, r9
 80062ee:	4631      	mov	r1, r6
 80062f0:	4628      	mov	r0, r5
 80062f2:	47b8      	blx	r7
 80062f4:	3001      	adds	r0, #1
 80062f6:	f43f ae38 	beq.w	8005f6a <_printf_float+0xc2>
 80062fa:	f108 0801 	add.w	r8, r8, #1
 80062fe:	68e3      	ldr	r3, [r4, #12]
 8006300:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006302:	1a5b      	subs	r3, r3, r1
 8006304:	4543      	cmp	r3, r8
 8006306:	dcf0      	bgt.n	80062ea <_printf_float+0x442>
 8006308:	e6fa      	b.n	8006100 <_printf_float+0x258>
 800630a:	f04f 0800 	mov.w	r8, #0
 800630e:	f104 0919 	add.w	r9, r4, #25
 8006312:	e7f4      	b.n	80062fe <_printf_float+0x456>

08006314 <_printf_common>:
 8006314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006318:	4616      	mov	r6, r2
 800631a:	4699      	mov	r9, r3
 800631c:	688a      	ldr	r2, [r1, #8]
 800631e:	690b      	ldr	r3, [r1, #16]
 8006320:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006324:	4293      	cmp	r3, r2
 8006326:	bfb8      	it	lt
 8006328:	4613      	movlt	r3, r2
 800632a:	6033      	str	r3, [r6, #0]
 800632c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006330:	4607      	mov	r7, r0
 8006332:	460c      	mov	r4, r1
 8006334:	b10a      	cbz	r2, 800633a <_printf_common+0x26>
 8006336:	3301      	adds	r3, #1
 8006338:	6033      	str	r3, [r6, #0]
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	0699      	lsls	r1, r3, #26
 800633e:	bf42      	ittt	mi
 8006340:	6833      	ldrmi	r3, [r6, #0]
 8006342:	3302      	addmi	r3, #2
 8006344:	6033      	strmi	r3, [r6, #0]
 8006346:	6825      	ldr	r5, [r4, #0]
 8006348:	f015 0506 	ands.w	r5, r5, #6
 800634c:	d106      	bne.n	800635c <_printf_common+0x48>
 800634e:	f104 0a19 	add.w	sl, r4, #25
 8006352:	68e3      	ldr	r3, [r4, #12]
 8006354:	6832      	ldr	r2, [r6, #0]
 8006356:	1a9b      	subs	r3, r3, r2
 8006358:	42ab      	cmp	r3, r5
 800635a:	dc26      	bgt.n	80063aa <_printf_common+0x96>
 800635c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006360:	1e13      	subs	r3, r2, #0
 8006362:	6822      	ldr	r2, [r4, #0]
 8006364:	bf18      	it	ne
 8006366:	2301      	movne	r3, #1
 8006368:	0692      	lsls	r2, r2, #26
 800636a:	d42b      	bmi.n	80063c4 <_printf_common+0xb0>
 800636c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006370:	4649      	mov	r1, r9
 8006372:	4638      	mov	r0, r7
 8006374:	47c0      	blx	r8
 8006376:	3001      	adds	r0, #1
 8006378:	d01e      	beq.n	80063b8 <_printf_common+0xa4>
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	68e5      	ldr	r5, [r4, #12]
 800637e:	6832      	ldr	r2, [r6, #0]
 8006380:	f003 0306 	and.w	r3, r3, #6
 8006384:	2b04      	cmp	r3, #4
 8006386:	bf08      	it	eq
 8006388:	1aad      	subeq	r5, r5, r2
 800638a:	68a3      	ldr	r3, [r4, #8]
 800638c:	6922      	ldr	r2, [r4, #16]
 800638e:	bf0c      	ite	eq
 8006390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006394:	2500      	movne	r5, #0
 8006396:	4293      	cmp	r3, r2
 8006398:	bfc4      	itt	gt
 800639a:	1a9b      	subgt	r3, r3, r2
 800639c:	18ed      	addgt	r5, r5, r3
 800639e:	2600      	movs	r6, #0
 80063a0:	341a      	adds	r4, #26
 80063a2:	42b5      	cmp	r5, r6
 80063a4:	d11a      	bne.n	80063dc <_printf_common+0xc8>
 80063a6:	2000      	movs	r0, #0
 80063a8:	e008      	b.n	80063bc <_printf_common+0xa8>
 80063aa:	2301      	movs	r3, #1
 80063ac:	4652      	mov	r2, sl
 80063ae:	4649      	mov	r1, r9
 80063b0:	4638      	mov	r0, r7
 80063b2:	47c0      	blx	r8
 80063b4:	3001      	adds	r0, #1
 80063b6:	d103      	bne.n	80063c0 <_printf_common+0xac>
 80063b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c0:	3501      	adds	r5, #1
 80063c2:	e7c6      	b.n	8006352 <_printf_common+0x3e>
 80063c4:	18e1      	adds	r1, r4, r3
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	2030      	movs	r0, #48	; 0x30
 80063ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063ce:	4422      	add	r2, r4
 80063d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063d8:	3302      	adds	r3, #2
 80063da:	e7c7      	b.n	800636c <_printf_common+0x58>
 80063dc:	2301      	movs	r3, #1
 80063de:	4622      	mov	r2, r4
 80063e0:	4649      	mov	r1, r9
 80063e2:	4638      	mov	r0, r7
 80063e4:	47c0      	blx	r8
 80063e6:	3001      	adds	r0, #1
 80063e8:	d0e6      	beq.n	80063b8 <_printf_common+0xa4>
 80063ea:	3601      	adds	r6, #1
 80063ec:	e7d9      	b.n	80063a2 <_printf_common+0x8e>
	...

080063f0 <_printf_i>:
 80063f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063f4:	7e0f      	ldrb	r7, [r1, #24]
 80063f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063f8:	2f78      	cmp	r7, #120	; 0x78
 80063fa:	4691      	mov	r9, r2
 80063fc:	4680      	mov	r8, r0
 80063fe:	460c      	mov	r4, r1
 8006400:	469a      	mov	sl, r3
 8006402:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006406:	d807      	bhi.n	8006418 <_printf_i+0x28>
 8006408:	2f62      	cmp	r7, #98	; 0x62
 800640a:	d80a      	bhi.n	8006422 <_printf_i+0x32>
 800640c:	2f00      	cmp	r7, #0
 800640e:	f000 80d8 	beq.w	80065c2 <_printf_i+0x1d2>
 8006412:	2f58      	cmp	r7, #88	; 0x58
 8006414:	f000 80a3 	beq.w	800655e <_printf_i+0x16e>
 8006418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800641c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006420:	e03a      	b.n	8006498 <_printf_i+0xa8>
 8006422:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006426:	2b15      	cmp	r3, #21
 8006428:	d8f6      	bhi.n	8006418 <_printf_i+0x28>
 800642a:	a101      	add	r1, pc, #4	; (adr r1, 8006430 <_printf_i+0x40>)
 800642c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006430:	08006489 	.word	0x08006489
 8006434:	0800649d 	.word	0x0800649d
 8006438:	08006419 	.word	0x08006419
 800643c:	08006419 	.word	0x08006419
 8006440:	08006419 	.word	0x08006419
 8006444:	08006419 	.word	0x08006419
 8006448:	0800649d 	.word	0x0800649d
 800644c:	08006419 	.word	0x08006419
 8006450:	08006419 	.word	0x08006419
 8006454:	08006419 	.word	0x08006419
 8006458:	08006419 	.word	0x08006419
 800645c:	080065a9 	.word	0x080065a9
 8006460:	080064cd 	.word	0x080064cd
 8006464:	0800658b 	.word	0x0800658b
 8006468:	08006419 	.word	0x08006419
 800646c:	08006419 	.word	0x08006419
 8006470:	080065cb 	.word	0x080065cb
 8006474:	08006419 	.word	0x08006419
 8006478:	080064cd 	.word	0x080064cd
 800647c:	08006419 	.word	0x08006419
 8006480:	08006419 	.word	0x08006419
 8006484:	08006593 	.word	0x08006593
 8006488:	682b      	ldr	r3, [r5, #0]
 800648a:	1d1a      	adds	r2, r3, #4
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	602a      	str	r2, [r5, #0]
 8006490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006498:	2301      	movs	r3, #1
 800649a:	e0a3      	b.n	80065e4 <_printf_i+0x1f4>
 800649c:	6820      	ldr	r0, [r4, #0]
 800649e:	6829      	ldr	r1, [r5, #0]
 80064a0:	0606      	lsls	r6, r0, #24
 80064a2:	f101 0304 	add.w	r3, r1, #4
 80064a6:	d50a      	bpl.n	80064be <_printf_i+0xce>
 80064a8:	680e      	ldr	r6, [r1, #0]
 80064aa:	602b      	str	r3, [r5, #0]
 80064ac:	2e00      	cmp	r6, #0
 80064ae:	da03      	bge.n	80064b8 <_printf_i+0xc8>
 80064b0:	232d      	movs	r3, #45	; 0x2d
 80064b2:	4276      	negs	r6, r6
 80064b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064b8:	485e      	ldr	r0, [pc, #376]	; (8006634 <_printf_i+0x244>)
 80064ba:	230a      	movs	r3, #10
 80064bc:	e019      	b.n	80064f2 <_printf_i+0x102>
 80064be:	680e      	ldr	r6, [r1, #0]
 80064c0:	602b      	str	r3, [r5, #0]
 80064c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064c6:	bf18      	it	ne
 80064c8:	b236      	sxthne	r6, r6
 80064ca:	e7ef      	b.n	80064ac <_printf_i+0xbc>
 80064cc:	682b      	ldr	r3, [r5, #0]
 80064ce:	6820      	ldr	r0, [r4, #0]
 80064d0:	1d19      	adds	r1, r3, #4
 80064d2:	6029      	str	r1, [r5, #0]
 80064d4:	0601      	lsls	r1, r0, #24
 80064d6:	d501      	bpl.n	80064dc <_printf_i+0xec>
 80064d8:	681e      	ldr	r6, [r3, #0]
 80064da:	e002      	b.n	80064e2 <_printf_i+0xf2>
 80064dc:	0646      	lsls	r6, r0, #25
 80064de:	d5fb      	bpl.n	80064d8 <_printf_i+0xe8>
 80064e0:	881e      	ldrh	r6, [r3, #0]
 80064e2:	4854      	ldr	r0, [pc, #336]	; (8006634 <_printf_i+0x244>)
 80064e4:	2f6f      	cmp	r7, #111	; 0x6f
 80064e6:	bf0c      	ite	eq
 80064e8:	2308      	moveq	r3, #8
 80064ea:	230a      	movne	r3, #10
 80064ec:	2100      	movs	r1, #0
 80064ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064f2:	6865      	ldr	r5, [r4, #4]
 80064f4:	60a5      	str	r5, [r4, #8]
 80064f6:	2d00      	cmp	r5, #0
 80064f8:	bfa2      	ittt	ge
 80064fa:	6821      	ldrge	r1, [r4, #0]
 80064fc:	f021 0104 	bicge.w	r1, r1, #4
 8006500:	6021      	strge	r1, [r4, #0]
 8006502:	b90e      	cbnz	r6, 8006508 <_printf_i+0x118>
 8006504:	2d00      	cmp	r5, #0
 8006506:	d04d      	beq.n	80065a4 <_printf_i+0x1b4>
 8006508:	4615      	mov	r5, r2
 800650a:	fbb6 f1f3 	udiv	r1, r6, r3
 800650e:	fb03 6711 	mls	r7, r3, r1, r6
 8006512:	5dc7      	ldrb	r7, [r0, r7]
 8006514:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006518:	4637      	mov	r7, r6
 800651a:	42bb      	cmp	r3, r7
 800651c:	460e      	mov	r6, r1
 800651e:	d9f4      	bls.n	800650a <_printf_i+0x11a>
 8006520:	2b08      	cmp	r3, #8
 8006522:	d10b      	bne.n	800653c <_printf_i+0x14c>
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	07de      	lsls	r6, r3, #31
 8006528:	d508      	bpl.n	800653c <_printf_i+0x14c>
 800652a:	6923      	ldr	r3, [r4, #16]
 800652c:	6861      	ldr	r1, [r4, #4]
 800652e:	4299      	cmp	r1, r3
 8006530:	bfde      	ittt	le
 8006532:	2330      	movle	r3, #48	; 0x30
 8006534:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006538:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800653c:	1b52      	subs	r2, r2, r5
 800653e:	6122      	str	r2, [r4, #16]
 8006540:	f8cd a000 	str.w	sl, [sp]
 8006544:	464b      	mov	r3, r9
 8006546:	aa03      	add	r2, sp, #12
 8006548:	4621      	mov	r1, r4
 800654a:	4640      	mov	r0, r8
 800654c:	f7ff fee2 	bl	8006314 <_printf_common>
 8006550:	3001      	adds	r0, #1
 8006552:	d14c      	bne.n	80065ee <_printf_i+0x1fe>
 8006554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006558:	b004      	add	sp, #16
 800655a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800655e:	4835      	ldr	r0, [pc, #212]	; (8006634 <_printf_i+0x244>)
 8006560:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006564:	6829      	ldr	r1, [r5, #0]
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	f851 6b04 	ldr.w	r6, [r1], #4
 800656c:	6029      	str	r1, [r5, #0]
 800656e:	061d      	lsls	r5, r3, #24
 8006570:	d514      	bpl.n	800659c <_printf_i+0x1ac>
 8006572:	07df      	lsls	r7, r3, #31
 8006574:	bf44      	itt	mi
 8006576:	f043 0320 	orrmi.w	r3, r3, #32
 800657a:	6023      	strmi	r3, [r4, #0]
 800657c:	b91e      	cbnz	r6, 8006586 <_printf_i+0x196>
 800657e:	6823      	ldr	r3, [r4, #0]
 8006580:	f023 0320 	bic.w	r3, r3, #32
 8006584:	6023      	str	r3, [r4, #0]
 8006586:	2310      	movs	r3, #16
 8006588:	e7b0      	b.n	80064ec <_printf_i+0xfc>
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	f043 0320 	orr.w	r3, r3, #32
 8006590:	6023      	str	r3, [r4, #0]
 8006592:	2378      	movs	r3, #120	; 0x78
 8006594:	4828      	ldr	r0, [pc, #160]	; (8006638 <_printf_i+0x248>)
 8006596:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800659a:	e7e3      	b.n	8006564 <_printf_i+0x174>
 800659c:	0659      	lsls	r1, r3, #25
 800659e:	bf48      	it	mi
 80065a0:	b2b6      	uxthmi	r6, r6
 80065a2:	e7e6      	b.n	8006572 <_printf_i+0x182>
 80065a4:	4615      	mov	r5, r2
 80065a6:	e7bb      	b.n	8006520 <_printf_i+0x130>
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	6826      	ldr	r6, [r4, #0]
 80065ac:	6961      	ldr	r1, [r4, #20]
 80065ae:	1d18      	adds	r0, r3, #4
 80065b0:	6028      	str	r0, [r5, #0]
 80065b2:	0635      	lsls	r5, r6, #24
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	d501      	bpl.n	80065bc <_printf_i+0x1cc>
 80065b8:	6019      	str	r1, [r3, #0]
 80065ba:	e002      	b.n	80065c2 <_printf_i+0x1d2>
 80065bc:	0670      	lsls	r0, r6, #25
 80065be:	d5fb      	bpl.n	80065b8 <_printf_i+0x1c8>
 80065c0:	8019      	strh	r1, [r3, #0]
 80065c2:	2300      	movs	r3, #0
 80065c4:	6123      	str	r3, [r4, #16]
 80065c6:	4615      	mov	r5, r2
 80065c8:	e7ba      	b.n	8006540 <_printf_i+0x150>
 80065ca:	682b      	ldr	r3, [r5, #0]
 80065cc:	1d1a      	adds	r2, r3, #4
 80065ce:	602a      	str	r2, [r5, #0]
 80065d0:	681d      	ldr	r5, [r3, #0]
 80065d2:	6862      	ldr	r2, [r4, #4]
 80065d4:	2100      	movs	r1, #0
 80065d6:	4628      	mov	r0, r5
 80065d8:	f7f9 fe22 	bl	8000220 <memchr>
 80065dc:	b108      	cbz	r0, 80065e2 <_printf_i+0x1f2>
 80065de:	1b40      	subs	r0, r0, r5
 80065e0:	6060      	str	r0, [r4, #4]
 80065e2:	6863      	ldr	r3, [r4, #4]
 80065e4:	6123      	str	r3, [r4, #16]
 80065e6:	2300      	movs	r3, #0
 80065e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065ec:	e7a8      	b.n	8006540 <_printf_i+0x150>
 80065ee:	6923      	ldr	r3, [r4, #16]
 80065f0:	462a      	mov	r2, r5
 80065f2:	4649      	mov	r1, r9
 80065f4:	4640      	mov	r0, r8
 80065f6:	47d0      	blx	sl
 80065f8:	3001      	adds	r0, #1
 80065fa:	d0ab      	beq.n	8006554 <_printf_i+0x164>
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	079b      	lsls	r3, r3, #30
 8006600:	d413      	bmi.n	800662a <_printf_i+0x23a>
 8006602:	68e0      	ldr	r0, [r4, #12]
 8006604:	9b03      	ldr	r3, [sp, #12]
 8006606:	4298      	cmp	r0, r3
 8006608:	bfb8      	it	lt
 800660a:	4618      	movlt	r0, r3
 800660c:	e7a4      	b.n	8006558 <_printf_i+0x168>
 800660e:	2301      	movs	r3, #1
 8006610:	4632      	mov	r2, r6
 8006612:	4649      	mov	r1, r9
 8006614:	4640      	mov	r0, r8
 8006616:	47d0      	blx	sl
 8006618:	3001      	adds	r0, #1
 800661a:	d09b      	beq.n	8006554 <_printf_i+0x164>
 800661c:	3501      	adds	r5, #1
 800661e:	68e3      	ldr	r3, [r4, #12]
 8006620:	9903      	ldr	r1, [sp, #12]
 8006622:	1a5b      	subs	r3, r3, r1
 8006624:	42ab      	cmp	r3, r5
 8006626:	dcf2      	bgt.n	800660e <_printf_i+0x21e>
 8006628:	e7eb      	b.n	8006602 <_printf_i+0x212>
 800662a:	2500      	movs	r5, #0
 800662c:	f104 0619 	add.w	r6, r4, #25
 8006630:	e7f5      	b.n	800661e <_printf_i+0x22e>
 8006632:	bf00      	nop
 8006634:	0800a67e 	.word	0x0800a67e
 8006638:	0800a68f 	.word	0x0800a68f

0800663c <iprintf>:
 800663c:	b40f      	push	{r0, r1, r2, r3}
 800663e:	4b0a      	ldr	r3, [pc, #40]	; (8006668 <iprintf+0x2c>)
 8006640:	b513      	push	{r0, r1, r4, lr}
 8006642:	681c      	ldr	r4, [r3, #0]
 8006644:	b124      	cbz	r4, 8006650 <iprintf+0x14>
 8006646:	69a3      	ldr	r3, [r4, #24]
 8006648:	b913      	cbnz	r3, 8006650 <iprintf+0x14>
 800664a:	4620      	mov	r0, r4
 800664c:	f001 f8d8 	bl	8007800 <__sinit>
 8006650:	ab05      	add	r3, sp, #20
 8006652:	9a04      	ldr	r2, [sp, #16]
 8006654:	68a1      	ldr	r1, [r4, #8]
 8006656:	9301      	str	r3, [sp, #4]
 8006658:	4620      	mov	r0, r4
 800665a:	f001 fe95 	bl	8008388 <_vfiprintf_r>
 800665e:	b002      	add	sp, #8
 8006660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006664:	b004      	add	sp, #16
 8006666:	4770      	bx	lr
 8006668:	20000018 	.word	0x20000018

0800666c <_puts_r>:
 800666c:	b570      	push	{r4, r5, r6, lr}
 800666e:	460e      	mov	r6, r1
 8006670:	4605      	mov	r5, r0
 8006672:	b118      	cbz	r0, 800667c <_puts_r+0x10>
 8006674:	6983      	ldr	r3, [r0, #24]
 8006676:	b90b      	cbnz	r3, 800667c <_puts_r+0x10>
 8006678:	f001 f8c2 	bl	8007800 <__sinit>
 800667c:	69ab      	ldr	r3, [r5, #24]
 800667e:	68ac      	ldr	r4, [r5, #8]
 8006680:	b913      	cbnz	r3, 8006688 <_puts_r+0x1c>
 8006682:	4628      	mov	r0, r5
 8006684:	f001 f8bc 	bl	8007800 <__sinit>
 8006688:	4b2c      	ldr	r3, [pc, #176]	; (800673c <_puts_r+0xd0>)
 800668a:	429c      	cmp	r4, r3
 800668c:	d120      	bne.n	80066d0 <_puts_r+0x64>
 800668e:	686c      	ldr	r4, [r5, #4]
 8006690:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006692:	07db      	lsls	r3, r3, #31
 8006694:	d405      	bmi.n	80066a2 <_puts_r+0x36>
 8006696:	89a3      	ldrh	r3, [r4, #12]
 8006698:	0598      	lsls	r0, r3, #22
 800669a:	d402      	bmi.n	80066a2 <_puts_r+0x36>
 800669c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800669e:	f001 f952 	bl	8007946 <__retarget_lock_acquire_recursive>
 80066a2:	89a3      	ldrh	r3, [r4, #12]
 80066a4:	0719      	lsls	r1, r3, #28
 80066a6:	d51d      	bpl.n	80066e4 <_puts_r+0x78>
 80066a8:	6923      	ldr	r3, [r4, #16]
 80066aa:	b1db      	cbz	r3, 80066e4 <_puts_r+0x78>
 80066ac:	3e01      	subs	r6, #1
 80066ae:	68a3      	ldr	r3, [r4, #8]
 80066b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80066b4:	3b01      	subs	r3, #1
 80066b6:	60a3      	str	r3, [r4, #8]
 80066b8:	bb39      	cbnz	r1, 800670a <_puts_r+0x9e>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	da38      	bge.n	8006730 <_puts_r+0xc4>
 80066be:	4622      	mov	r2, r4
 80066c0:	210a      	movs	r1, #10
 80066c2:	4628      	mov	r0, r5
 80066c4:	f000 f848 	bl	8006758 <__swbuf_r>
 80066c8:	3001      	adds	r0, #1
 80066ca:	d011      	beq.n	80066f0 <_puts_r+0x84>
 80066cc:	250a      	movs	r5, #10
 80066ce:	e011      	b.n	80066f4 <_puts_r+0x88>
 80066d0:	4b1b      	ldr	r3, [pc, #108]	; (8006740 <_puts_r+0xd4>)
 80066d2:	429c      	cmp	r4, r3
 80066d4:	d101      	bne.n	80066da <_puts_r+0x6e>
 80066d6:	68ac      	ldr	r4, [r5, #8]
 80066d8:	e7da      	b.n	8006690 <_puts_r+0x24>
 80066da:	4b1a      	ldr	r3, [pc, #104]	; (8006744 <_puts_r+0xd8>)
 80066dc:	429c      	cmp	r4, r3
 80066de:	bf08      	it	eq
 80066e0:	68ec      	ldreq	r4, [r5, #12]
 80066e2:	e7d5      	b.n	8006690 <_puts_r+0x24>
 80066e4:	4621      	mov	r1, r4
 80066e6:	4628      	mov	r0, r5
 80066e8:	f000 f888 	bl	80067fc <__swsetup_r>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	d0dd      	beq.n	80066ac <_puts_r+0x40>
 80066f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80066f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066f6:	07da      	lsls	r2, r3, #31
 80066f8:	d405      	bmi.n	8006706 <_puts_r+0x9a>
 80066fa:	89a3      	ldrh	r3, [r4, #12]
 80066fc:	059b      	lsls	r3, r3, #22
 80066fe:	d402      	bmi.n	8006706 <_puts_r+0x9a>
 8006700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006702:	f001 f921 	bl	8007948 <__retarget_lock_release_recursive>
 8006706:	4628      	mov	r0, r5
 8006708:	bd70      	pop	{r4, r5, r6, pc}
 800670a:	2b00      	cmp	r3, #0
 800670c:	da04      	bge.n	8006718 <_puts_r+0xac>
 800670e:	69a2      	ldr	r2, [r4, #24]
 8006710:	429a      	cmp	r2, r3
 8006712:	dc06      	bgt.n	8006722 <_puts_r+0xb6>
 8006714:	290a      	cmp	r1, #10
 8006716:	d004      	beq.n	8006722 <_puts_r+0xb6>
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	6022      	str	r2, [r4, #0]
 800671e:	7019      	strb	r1, [r3, #0]
 8006720:	e7c5      	b.n	80066ae <_puts_r+0x42>
 8006722:	4622      	mov	r2, r4
 8006724:	4628      	mov	r0, r5
 8006726:	f000 f817 	bl	8006758 <__swbuf_r>
 800672a:	3001      	adds	r0, #1
 800672c:	d1bf      	bne.n	80066ae <_puts_r+0x42>
 800672e:	e7df      	b.n	80066f0 <_puts_r+0x84>
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	250a      	movs	r5, #10
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	6022      	str	r2, [r4, #0]
 8006738:	701d      	strb	r5, [r3, #0]
 800673a:	e7db      	b.n	80066f4 <_puts_r+0x88>
 800673c:	0800a750 	.word	0x0800a750
 8006740:	0800a770 	.word	0x0800a770
 8006744:	0800a730 	.word	0x0800a730

08006748 <puts>:
 8006748:	4b02      	ldr	r3, [pc, #8]	; (8006754 <puts+0xc>)
 800674a:	4601      	mov	r1, r0
 800674c:	6818      	ldr	r0, [r3, #0]
 800674e:	f7ff bf8d 	b.w	800666c <_puts_r>
 8006752:	bf00      	nop
 8006754:	20000018 	.word	0x20000018

08006758 <__swbuf_r>:
 8006758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675a:	460e      	mov	r6, r1
 800675c:	4614      	mov	r4, r2
 800675e:	4605      	mov	r5, r0
 8006760:	b118      	cbz	r0, 800676a <__swbuf_r+0x12>
 8006762:	6983      	ldr	r3, [r0, #24]
 8006764:	b90b      	cbnz	r3, 800676a <__swbuf_r+0x12>
 8006766:	f001 f84b 	bl	8007800 <__sinit>
 800676a:	4b21      	ldr	r3, [pc, #132]	; (80067f0 <__swbuf_r+0x98>)
 800676c:	429c      	cmp	r4, r3
 800676e:	d12b      	bne.n	80067c8 <__swbuf_r+0x70>
 8006770:	686c      	ldr	r4, [r5, #4]
 8006772:	69a3      	ldr	r3, [r4, #24]
 8006774:	60a3      	str	r3, [r4, #8]
 8006776:	89a3      	ldrh	r3, [r4, #12]
 8006778:	071a      	lsls	r2, r3, #28
 800677a:	d52f      	bpl.n	80067dc <__swbuf_r+0x84>
 800677c:	6923      	ldr	r3, [r4, #16]
 800677e:	b36b      	cbz	r3, 80067dc <__swbuf_r+0x84>
 8006780:	6923      	ldr	r3, [r4, #16]
 8006782:	6820      	ldr	r0, [r4, #0]
 8006784:	1ac0      	subs	r0, r0, r3
 8006786:	6963      	ldr	r3, [r4, #20]
 8006788:	b2f6      	uxtb	r6, r6
 800678a:	4283      	cmp	r3, r0
 800678c:	4637      	mov	r7, r6
 800678e:	dc04      	bgt.n	800679a <__swbuf_r+0x42>
 8006790:	4621      	mov	r1, r4
 8006792:	4628      	mov	r0, r5
 8006794:	f000 ffa0 	bl	80076d8 <_fflush_r>
 8006798:	bb30      	cbnz	r0, 80067e8 <__swbuf_r+0x90>
 800679a:	68a3      	ldr	r3, [r4, #8]
 800679c:	3b01      	subs	r3, #1
 800679e:	60a3      	str	r3, [r4, #8]
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	6022      	str	r2, [r4, #0]
 80067a6:	701e      	strb	r6, [r3, #0]
 80067a8:	6963      	ldr	r3, [r4, #20]
 80067aa:	3001      	adds	r0, #1
 80067ac:	4283      	cmp	r3, r0
 80067ae:	d004      	beq.n	80067ba <__swbuf_r+0x62>
 80067b0:	89a3      	ldrh	r3, [r4, #12]
 80067b2:	07db      	lsls	r3, r3, #31
 80067b4:	d506      	bpl.n	80067c4 <__swbuf_r+0x6c>
 80067b6:	2e0a      	cmp	r6, #10
 80067b8:	d104      	bne.n	80067c4 <__swbuf_r+0x6c>
 80067ba:	4621      	mov	r1, r4
 80067bc:	4628      	mov	r0, r5
 80067be:	f000 ff8b 	bl	80076d8 <_fflush_r>
 80067c2:	b988      	cbnz	r0, 80067e8 <__swbuf_r+0x90>
 80067c4:	4638      	mov	r0, r7
 80067c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067c8:	4b0a      	ldr	r3, [pc, #40]	; (80067f4 <__swbuf_r+0x9c>)
 80067ca:	429c      	cmp	r4, r3
 80067cc:	d101      	bne.n	80067d2 <__swbuf_r+0x7a>
 80067ce:	68ac      	ldr	r4, [r5, #8]
 80067d0:	e7cf      	b.n	8006772 <__swbuf_r+0x1a>
 80067d2:	4b09      	ldr	r3, [pc, #36]	; (80067f8 <__swbuf_r+0xa0>)
 80067d4:	429c      	cmp	r4, r3
 80067d6:	bf08      	it	eq
 80067d8:	68ec      	ldreq	r4, [r5, #12]
 80067da:	e7ca      	b.n	8006772 <__swbuf_r+0x1a>
 80067dc:	4621      	mov	r1, r4
 80067de:	4628      	mov	r0, r5
 80067e0:	f000 f80c 	bl	80067fc <__swsetup_r>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	d0cb      	beq.n	8006780 <__swbuf_r+0x28>
 80067e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80067ec:	e7ea      	b.n	80067c4 <__swbuf_r+0x6c>
 80067ee:	bf00      	nop
 80067f0:	0800a750 	.word	0x0800a750
 80067f4:	0800a770 	.word	0x0800a770
 80067f8:	0800a730 	.word	0x0800a730

080067fc <__swsetup_r>:
 80067fc:	4b32      	ldr	r3, [pc, #200]	; (80068c8 <__swsetup_r+0xcc>)
 80067fe:	b570      	push	{r4, r5, r6, lr}
 8006800:	681d      	ldr	r5, [r3, #0]
 8006802:	4606      	mov	r6, r0
 8006804:	460c      	mov	r4, r1
 8006806:	b125      	cbz	r5, 8006812 <__swsetup_r+0x16>
 8006808:	69ab      	ldr	r3, [r5, #24]
 800680a:	b913      	cbnz	r3, 8006812 <__swsetup_r+0x16>
 800680c:	4628      	mov	r0, r5
 800680e:	f000 fff7 	bl	8007800 <__sinit>
 8006812:	4b2e      	ldr	r3, [pc, #184]	; (80068cc <__swsetup_r+0xd0>)
 8006814:	429c      	cmp	r4, r3
 8006816:	d10f      	bne.n	8006838 <__swsetup_r+0x3c>
 8006818:	686c      	ldr	r4, [r5, #4]
 800681a:	89a3      	ldrh	r3, [r4, #12]
 800681c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006820:	0719      	lsls	r1, r3, #28
 8006822:	d42c      	bmi.n	800687e <__swsetup_r+0x82>
 8006824:	06dd      	lsls	r5, r3, #27
 8006826:	d411      	bmi.n	800684c <__swsetup_r+0x50>
 8006828:	2309      	movs	r3, #9
 800682a:	6033      	str	r3, [r6, #0]
 800682c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006830:	81a3      	strh	r3, [r4, #12]
 8006832:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006836:	e03e      	b.n	80068b6 <__swsetup_r+0xba>
 8006838:	4b25      	ldr	r3, [pc, #148]	; (80068d0 <__swsetup_r+0xd4>)
 800683a:	429c      	cmp	r4, r3
 800683c:	d101      	bne.n	8006842 <__swsetup_r+0x46>
 800683e:	68ac      	ldr	r4, [r5, #8]
 8006840:	e7eb      	b.n	800681a <__swsetup_r+0x1e>
 8006842:	4b24      	ldr	r3, [pc, #144]	; (80068d4 <__swsetup_r+0xd8>)
 8006844:	429c      	cmp	r4, r3
 8006846:	bf08      	it	eq
 8006848:	68ec      	ldreq	r4, [r5, #12]
 800684a:	e7e6      	b.n	800681a <__swsetup_r+0x1e>
 800684c:	0758      	lsls	r0, r3, #29
 800684e:	d512      	bpl.n	8006876 <__swsetup_r+0x7a>
 8006850:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006852:	b141      	cbz	r1, 8006866 <__swsetup_r+0x6a>
 8006854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006858:	4299      	cmp	r1, r3
 800685a:	d002      	beq.n	8006862 <__swsetup_r+0x66>
 800685c:	4630      	mov	r0, r6
 800685e:	f001 fc89 	bl	8008174 <_free_r>
 8006862:	2300      	movs	r3, #0
 8006864:	6363      	str	r3, [r4, #52]	; 0x34
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800686c:	81a3      	strh	r3, [r4, #12]
 800686e:	2300      	movs	r3, #0
 8006870:	6063      	str	r3, [r4, #4]
 8006872:	6923      	ldr	r3, [r4, #16]
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	89a3      	ldrh	r3, [r4, #12]
 8006878:	f043 0308 	orr.w	r3, r3, #8
 800687c:	81a3      	strh	r3, [r4, #12]
 800687e:	6923      	ldr	r3, [r4, #16]
 8006880:	b94b      	cbnz	r3, 8006896 <__swsetup_r+0x9a>
 8006882:	89a3      	ldrh	r3, [r4, #12]
 8006884:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800688c:	d003      	beq.n	8006896 <__swsetup_r+0x9a>
 800688e:	4621      	mov	r1, r4
 8006890:	4630      	mov	r0, r6
 8006892:	f001 f87f 	bl	8007994 <__smakebuf_r>
 8006896:	89a0      	ldrh	r0, [r4, #12]
 8006898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800689c:	f010 0301 	ands.w	r3, r0, #1
 80068a0:	d00a      	beq.n	80068b8 <__swsetup_r+0xbc>
 80068a2:	2300      	movs	r3, #0
 80068a4:	60a3      	str	r3, [r4, #8]
 80068a6:	6963      	ldr	r3, [r4, #20]
 80068a8:	425b      	negs	r3, r3
 80068aa:	61a3      	str	r3, [r4, #24]
 80068ac:	6923      	ldr	r3, [r4, #16]
 80068ae:	b943      	cbnz	r3, 80068c2 <__swsetup_r+0xc6>
 80068b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068b4:	d1ba      	bne.n	800682c <__swsetup_r+0x30>
 80068b6:	bd70      	pop	{r4, r5, r6, pc}
 80068b8:	0781      	lsls	r1, r0, #30
 80068ba:	bf58      	it	pl
 80068bc:	6963      	ldrpl	r3, [r4, #20]
 80068be:	60a3      	str	r3, [r4, #8]
 80068c0:	e7f4      	b.n	80068ac <__swsetup_r+0xb0>
 80068c2:	2000      	movs	r0, #0
 80068c4:	e7f7      	b.n	80068b6 <__swsetup_r+0xba>
 80068c6:	bf00      	nop
 80068c8:	20000018 	.word	0x20000018
 80068cc:	0800a750 	.word	0x0800a750
 80068d0:	0800a770 	.word	0x0800a770
 80068d4:	0800a730 	.word	0x0800a730

080068d8 <quorem>:
 80068d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068dc:	6903      	ldr	r3, [r0, #16]
 80068de:	690c      	ldr	r4, [r1, #16]
 80068e0:	42a3      	cmp	r3, r4
 80068e2:	4607      	mov	r7, r0
 80068e4:	f2c0 8081 	blt.w	80069ea <quorem+0x112>
 80068e8:	3c01      	subs	r4, #1
 80068ea:	f101 0814 	add.w	r8, r1, #20
 80068ee:	f100 0514 	add.w	r5, r0, #20
 80068f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068f6:	9301      	str	r3, [sp, #4]
 80068f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80068fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006900:	3301      	adds	r3, #1
 8006902:	429a      	cmp	r2, r3
 8006904:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006908:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800690c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006910:	d331      	bcc.n	8006976 <quorem+0x9e>
 8006912:	f04f 0e00 	mov.w	lr, #0
 8006916:	4640      	mov	r0, r8
 8006918:	46ac      	mov	ip, r5
 800691a:	46f2      	mov	sl, lr
 800691c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006920:	b293      	uxth	r3, r2
 8006922:	fb06 e303 	mla	r3, r6, r3, lr
 8006926:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800692a:	b29b      	uxth	r3, r3
 800692c:	ebaa 0303 	sub.w	r3, sl, r3
 8006930:	f8dc a000 	ldr.w	sl, [ip]
 8006934:	0c12      	lsrs	r2, r2, #16
 8006936:	fa13 f38a 	uxtah	r3, r3, sl
 800693a:	fb06 e202 	mla	r2, r6, r2, lr
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	9b00      	ldr	r3, [sp, #0]
 8006942:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006946:	b292      	uxth	r2, r2
 8006948:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800694c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006950:	f8bd 3000 	ldrh.w	r3, [sp]
 8006954:	4581      	cmp	r9, r0
 8006956:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800695a:	f84c 3b04 	str.w	r3, [ip], #4
 800695e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006962:	d2db      	bcs.n	800691c <quorem+0x44>
 8006964:	f855 300b 	ldr.w	r3, [r5, fp]
 8006968:	b92b      	cbnz	r3, 8006976 <quorem+0x9e>
 800696a:	9b01      	ldr	r3, [sp, #4]
 800696c:	3b04      	subs	r3, #4
 800696e:	429d      	cmp	r5, r3
 8006970:	461a      	mov	r2, r3
 8006972:	d32e      	bcc.n	80069d2 <quorem+0xfa>
 8006974:	613c      	str	r4, [r7, #16]
 8006976:	4638      	mov	r0, r7
 8006978:	f001 fae4 	bl	8007f44 <__mcmp>
 800697c:	2800      	cmp	r0, #0
 800697e:	db24      	blt.n	80069ca <quorem+0xf2>
 8006980:	3601      	adds	r6, #1
 8006982:	4628      	mov	r0, r5
 8006984:	f04f 0c00 	mov.w	ip, #0
 8006988:	f858 2b04 	ldr.w	r2, [r8], #4
 800698c:	f8d0 e000 	ldr.w	lr, [r0]
 8006990:	b293      	uxth	r3, r2
 8006992:	ebac 0303 	sub.w	r3, ip, r3
 8006996:	0c12      	lsrs	r2, r2, #16
 8006998:	fa13 f38e 	uxtah	r3, r3, lr
 800699c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80069a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069aa:	45c1      	cmp	r9, r8
 80069ac:	f840 3b04 	str.w	r3, [r0], #4
 80069b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80069b4:	d2e8      	bcs.n	8006988 <quorem+0xb0>
 80069b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069be:	b922      	cbnz	r2, 80069ca <quorem+0xf2>
 80069c0:	3b04      	subs	r3, #4
 80069c2:	429d      	cmp	r5, r3
 80069c4:	461a      	mov	r2, r3
 80069c6:	d30a      	bcc.n	80069de <quorem+0x106>
 80069c8:	613c      	str	r4, [r7, #16]
 80069ca:	4630      	mov	r0, r6
 80069cc:	b003      	add	sp, #12
 80069ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d2:	6812      	ldr	r2, [r2, #0]
 80069d4:	3b04      	subs	r3, #4
 80069d6:	2a00      	cmp	r2, #0
 80069d8:	d1cc      	bne.n	8006974 <quorem+0x9c>
 80069da:	3c01      	subs	r4, #1
 80069dc:	e7c7      	b.n	800696e <quorem+0x96>
 80069de:	6812      	ldr	r2, [r2, #0]
 80069e0:	3b04      	subs	r3, #4
 80069e2:	2a00      	cmp	r2, #0
 80069e4:	d1f0      	bne.n	80069c8 <quorem+0xf0>
 80069e6:	3c01      	subs	r4, #1
 80069e8:	e7eb      	b.n	80069c2 <quorem+0xea>
 80069ea:	2000      	movs	r0, #0
 80069ec:	e7ee      	b.n	80069cc <quorem+0xf4>
	...

080069f0 <_dtoa_r>:
 80069f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f4:	ed2d 8b04 	vpush	{d8-d9}
 80069f8:	ec57 6b10 	vmov	r6, r7, d0
 80069fc:	b093      	sub	sp, #76	; 0x4c
 80069fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a04:	9106      	str	r1, [sp, #24]
 8006a06:	ee10 aa10 	vmov	sl, s0
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	9209      	str	r2, [sp, #36]	; 0x24
 8006a0e:	930c      	str	r3, [sp, #48]	; 0x30
 8006a10:	46bb      	mov	fp, r7
 8006a12:	b975      	cbnz	r5, 8006a32 <_dtoa_r+0x42>
 8006a14:	2010      	movs	r0, #16
 8006a16:	f000 fffd 	bl	8007a14 <malloc>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	6260      	str	r0, [r4, #36]	; 0x24
 8006a1e:	b920      	cbnz	r0, 8006a2a <_dtoa_r+0x3a>
 8006a20:	4ba7      	ldr	r3, [pc, #668]	; (8006cc0 <_dtoa_r+0x2d0>)
 8006a22:	21ea      	movs	r1, #234	; 0xea
 8006a24:	48a7      	ldr	r0, [pc, #668]	; (8006cc4 <_dtoa_r+0x2d4>)
 8006a26:	f001 fe45 	bl	80086b4 <__assert_func>
 8006a2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a2e:	6005      	str	r5, [r0, #0]
 8006a30:	60c5      	str	r5, [r0, #12]
 8006a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a34:	6819      	ldr	r1, [r3, #0]
 8006a36:	b151      	cbz	r1, 8006a4e <_dtoa_r+0x5e>
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	604a      	str	r2, [r1, #4]
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	4093      	lsls	r3, r2
 8006a40:	608b      	str	r3, [r1, #8]
 8006a42:	4620      	mov	r0, r4
 8006a44:	f001 f83c 	bl	8007ac0 <_Bfree>
 8006a48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	1e3b      	subs	r3, r7, #0
 8006a50:	bfaa      	itet	ge
 8006a52:	2300      	movge	r3, #0
 8006a54:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006a58:	f8c8 3000 	strge.w	r3, [r8]
 8006a5c:	4b9a      	ldr	r3, [pc, #616]	; (8006cc8 <_dtoa_r+0x2d8>)
 8006a5e:	bfbc      	itt	lt
 8006a60:	2201      	movlt	r2, #1
 8006a62:	f8c8 2000 	strlt.w	r2, [r8]
 8006a66:	ea33 030b 	bics.w	r3, r3, fp
 8006a6a:	d11b      	bne.n	8006aa4 <_dtoa_r+0xb4>
 8006a6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a6e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a72:	6013      	str	r3, [r2, #0]
 8006a74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a78:	4333      	orrs	r3, r6
 8006a7a:	f000 8592 	beq.w	80075a2 <_dtoa_r+0xbb2>
 8006a7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a80:	b963      	cbnz	r3, 8006a9c <_dtoa_r+0xac>
 8006a82:	4b92      	ldr	r3, [pc, #584]	; (8006ccc <_dtoa_r+0x2dc>)
 8006a84:	e022      	b.n	8006acc <_dtoa_r+0xdc>
 8006a86:	4b92      	ldr	r3, [pc, #584]	; (8006cd0 <_dtoa_r+0x2e0>)
 8006a88:	9301      	str	r3, [sp, #4]
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a8e:	6013      	str	r3, [r2, #0]
 8006a90:	9801      	ldr	r0, [sp, #4]
 8006a92:	b013      	add	sp, #76	; 0x4c
 8006a94:	ecbd 8b04 	vpop	{d8-d9}
 8006a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a9c:	4b8b      	ldr	r3, [pc, #556]	; (8006ccc <_dtoa_r+0x2dc>)
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	3303      	adds	r3, #3
 8006aa2:	e7f3      	b.n	8006a8c <_dtoa_r+0x9c>
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	4650      	mov	r0, sl
 8006aaa:	4659      	mov	r1, fp
 8006aac:	f7fa f82c 	bl	8000b08 <__aeabi_dcmpeq>
 8006ab0:	ec4b ab19 	vmov	d9, sl, fp
 8006ab4:	4680      	mov	r8, r0
 8006ab6:	b158      	cbz	r0, 8006ad0 <_dtoa_r+0xe0>
 8006ab8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006aba:	2301      	movs	r3, #1
 8006abc:	6013      	str	r3, [r2, #0]
 8006abe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 856b 	beq.w	800759c <_dtoa_r+0xbac>
 8006ac6:	4883      	ldr	r0, [pc, #524]	; (8006cd4 <_dtoa_r+0x2e4>)
 8006ac8:	6018      	str	r0, [r3, #0]
 8006aca:	1e43      	subs	r3, r0, #1
 8006acc:	9301      	str	r3, [sp, #4]
 8006ace:	e7df      	b.n	8006a90 <_dtoa_r+0xa0>
 8006ad0:	ec4b ab10 	vmov	d0, sl, fp
 8006ad4:	aa10      	add	r2, sp, #64	; 0x40
 8006ad6:	a911      	add	r1, sp, #68	; 0x44
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f001 fad9 	bl	8008090 <__d2b>
 8006ade:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006ae2:	ee08 0a10 	vmov	s16, r0
 8006ae6:	2d00      	cmp	r5, #0
 8006ae8:	f000 8084 	beq.w	8006bf4 <_dtoa_r+0x204>
 8006aec:	ee19 3a90 	vmov	r3, s19
 8006af0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006af4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006af8:	4656      	mov	r6, sl
 8006afa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006afe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b02:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006b06:	4b74      	ldr	r3, [pc, #464]	; (8006cd8 <_dtoa_r+0x2e8>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	4639      	mov	r1, r7
 8006b0e:	f7f9 fbdb 	bl	80002c8 <__aeabi_dsub>
 8006b12:	a365      	add	r3, pc, #404	; (adr r3, 8006ca8 <_dtoa_r+0x2b8>)
 8006b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b18:	f7f9 fd8e 	bl	8000638 <__aeabi_dmul>
 8006b1c:	a364      	add	r3, pc, #400	; (adr r3, 8006cb0 <_dtoa_r+0x2c0>)
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	f7f9 fbd3 	bl	80002cc <__adddf3>
 8006b26:	4606      	mov	r6, r0
 8006b28:	4628      	mov	r0, r5
 8006b2a:	460f      	mov	r7, r1
 8006b2c:	f7f9 fd1a 	bl	8000564 <__aeabi_i2d>
 8006b30:	a361      	add	r3, pc, #388	; (adr r3, 8006cb8 <_dtoa_r+0x2c8>)
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	f7f9 fd7f 	bl	8000638 <__aeabi_dmul>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	4630      	mov	r0, r6
 8006b40:	4639      	mov	r1, r7
 8006b42:	f7f9 fbc3 	bl	80002cc <__adddf3>
 8006b46:	4606      	mov	r6, r0
 8006b48:	460f      	mov	r7, r1
 8006b4a:	f7fa f825 	bl	8000b98 <__aeabi_d2iz>
 8006b4e:	2200      	movs	r2, #0
 8006b50:	9000      	str	r0, [sp, #0]
 8006b52:	2300      	movs	r3, #0
 8006b54:	4630      	mov	r0, r6
 8006b56:	4639      	mov	r1, r7
 8006b58:	f7f9 ffe0 	bl	8000b1c <__aeabi_dcmplt>
 8006b5c:	b150      	cbz	r0, 8006b74 <_dtoa_r+0x184>
 8006b5e:	9800      	ldr	r0, [sp, #0]
 8006b60:	f7f9 fd00 	bl	8000564 <__aeabi_i2d>
 8006b64:	4632      	mov	r2, r6
 8006b66:	463b      	mov	r3, r7
 8006b68:	f7f9 ffce 	bl	8000b08 <__aeabi_dcmpeq>
 8006b6c:	b910      	cbnz	r0, 8006b74 <_dtoa_r+0x184>
 8006b6e:	9b00      	ldr	r3, [sp, #0]
 8006b70:	3b01      	subs	r3, #1
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	9b00      	ldr	r3, [sp, #0]
 8006b76:	2b16      	cmp	r3, #22
 8006b78:	d85a      	bhi.n	8006c30 <_dtoa_r+0x240>
 8006b7a:	9a00      	ldr	r2, [sp, #0]
 8006b7c:	4b57      	ldr	r3, [pc, #348]	; (8006cdc <_dtoa_r+0x2ec>)
 8006b7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b86:	ec51 0b19 	vmov	r0, r1, d9
 8006b8a:	f7f9 ffc7 	bl	8000b1c <__aeabi_dcmplt>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d050      	beq.n	8006c34 <_dtoa_r+0x244>
 8006b92:	9b00      	ldr	r3, [sp, #0]
 8006b94:	3b01      	subs	r3, #1
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	2300      	movs	r3, #0
 8006b9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b9e:	1b5d      	subs	r5, r3, r5
 8006ba0:	1e6b      	subs	r3, r5, #1
 8006ba2:	9305      	str	r3, [sp, #20]
 8006ba4:	bf45      	ittet	mi
 8006ba6:	f1c5 0301 	rsbmi	r3, r5, #1
 8006baa:	9304      	strmi	r3, [sp, #16]
 8006bac:	2300      	movpl	r3, #0
 8006bae:	2300      	movmi	r3, #0
 8006bb0:	bf4c      	ite	mi
 8006bb2:	9305      	strmi	r3, [sp, #20]
 8006bb4:	9304      	strpl	r3, [sp, #16]
 8006bb6:	9b00      	ldr	r3, [sp, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	db3d      	blt.n	8006c38 <_dtoa_r+0x248>
 8006bbc:	9b05      	ldr	r3, [sp, #20]
 8006bbe:	9a00      	ldr	r2, [sp, #0]
 8006bc0:	920a      	str	r2, [sp, #40]	; 0x28
 8006bc2:	4413      	add	r3, r2
 8006bc4:	9305      	str	r3, [sp, #20]
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	9307      	str	r3, [sp, #28]
 8006bca:	9b06      	ldr	r3, [sp, #24]
 8006bcc:	2b09      	cmp	r3, #9
 8006bce:	f200 8089 	bhi.w	8006ce4 <_dtoa_r+0x2f4>
 8006bd2:	2b05      	cmp	r3, #5
 8006bd4:	bfc4      	itt	gt
 8006bd6:	3b04      	subgt	r3, #4
 8006bd8:	9306      	strgt	r3, [sp, #24]
 8006bda:	9b06      	ldr	r3, [sp, #24]
 8006bdc:	f1a3 0302 	sub.w	r3, r3, #2
 8006be0:	bfcc      	ite	gt
 8006be2:	2500      	movgt	r5, #0
 8006be4:	2501      	movle	r5, #1
 8006be6:	2b03      	cmp	r3, #3
 8006be8:	f200 8087 	bhi.w	8006cfa <_dtoa_r+0x30a>
 8006bec:	e8df f003 	tbb	[pc, r3]
 8006bf0:	59383a2d 	.word	0x59383a2d
 8006bf4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006bf8:	441d      	add	r5, r3
 8006bfa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006bfe:	2b20      	cmp	r3, #32
 8006c00:	bfc1      	itttt	gt
 8006c02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c06:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006c0a:	fa0b f303 	lslgt.w	r3, fp, r3
 8006c0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006c12:	bfda      	itte	le
 8006c14:	f1c3 0320 	rsble	r3, r3, #32
 8006c18:	fa06 f003 	lslle.w	r0, r6, r3
 8006c1c:	4318      	orrgt	r0, r3
 8006c1e:	f7f9 fc91 	bl	8000544 <__aeabi_ui2d>
 8006c22:	2301      	movs	r3, #1
 8006c24:	4606      	mov	r6, r0
 8006c26:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006c2a:	3d01      	subs	r5, #1
 8006c2c:	930e      	str	r3, [sp, #56]	; 0x38
 8006c2e:	e76a      	b.n	8006b06 <_dtoa_r+0x116>
 8006c30:	2301      	movs	r3, #1
 8006c32:	e7b2      	b.n	8006b9a <_dtoa_r+0x1aa>
 8006c34:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c36:	e7b1      	b.n	8006b9c <_dtoa_r+0x1ac>
 8006c38:	9b04      	ldr	r3, [sp, #16]
 8006c3a:	9a00      	ldr	r2, [sp, #0]
 8006c3c:	1a9b      	subs	r3, r3, r2
 8006c3e:	9304      	str	r3, [sp, #16]
 8006c40:	4253      	negs	r3, r2
 8006c42:	9307      	str	r3, [sp, #28]
 8006c44:	2300      	movs	r3, #0
 8006c46:	930a      	str	r3, [sp, #40]	; 0x28
 8006c48:	e7bf      	b.n	8006bca <_dtoa_r+0x1da>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	9308      	str	r3, [sp, #32]
 8006c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	dc55      	bgt.n	8006d00 <_dtoa_r+0x310>
 8006c54:	2301      	movs	r3, #1
 8006c56:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	9209      	str	r2, [sp, #36]	; 0x24
 8006c5e:	e00c      	b.n	8006c7a <_dtoa_r+0x28a>
 8006c60:	2301      	movs	r3, #1
 8006c62:	e7f3      	b.n	8006c4c <_dtoa_r+0x25c>
 8006c64:	2300      	movs	r3, #0
 8006c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c68:	9308      	str	r3, [sp, #32]
 8006c6a:	9b00      	ldr	r3, [sp, #0]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	9302      	str	r3, [sp, #8]
 8006c70:	3301      	adds	r3, #1
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	9303      	str	r3, [sp, #12]
 8006c76:	bfb8      	it	lt
 8006c78:	2301      	movlt	r3, #1
 8006c7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	6042      	str	r2, [r0, #4]
 8006c80:	2204      	movs	r2, #4
 8006c82:	f102 0614 	add.w	r6, r2, #20
 8006c86:	429e      	cmp	r6, r3
 8006c88:	6841      	ldr	r1, [r0, #4]
 8006c8a:	d93d      	bls.n	8006d08 <_dtoa_r+0x318>
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f000 fed7 	bl	8007a40 <_Balloc>
 8006c92:	9001      	str	r0, [sp, #4]
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d13b      	bne.n	8006d10 <_dtoa_r+0x320>
 8006c98:	4b11      	ldr	r3, [pc, #68]	; (8006ce0 <_dtoa_r+0x2f0>)
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006ca0:	e6c0      	b.n	8006a24 <_dtoa_r+0x34>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e7df      	b.n	8006c66 <_dtoa_r+0x276>
 8006ca6:	bf00      	nop
 8006ca8:	636f4361 	.word	0x636f4361
 8006cac:	3fd287a7 	.word	0x3fd287a7
 8006cb0:	8b60c8b3 	.word	0x8b60c8b3
 8006cb4:	3fc68a28 	.word	0x3fc68a28
 8006cb8:	509f79fb 	.word	0x509f79fb
 8006cbc:	3fd34413 	.word	0x3fd34413
 8006cc0:	0800a6ad 	.word	0x0800a6ad
 8006cc4:	0800a6c4 	.word	0x0800a6c4
 8006cc8:	7ff00000 	.word	0x7ff00000
 8006ccc:	0800a6a9 	.word	0x0800a6a9
 8006cd0:	0800a6a0 	.word	0x0800a6a0
 8006cd4:	0800a67d 	.word	0x0800a67d
 8006cd8:	3ff80000 	.word	0x3ff80000
 8006cdc:	0800a818 	.word	0x0800a818
 8006ce0:	0800a71f 	.word	0x0800a71f
 8006ce4:	2501      	movs	r5, #1
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	9306      	str	r3, [sp, #24]
 8006cea:	9508      	str	r5, [sp, #32]
 8006cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cf0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	2312      	movs	r3, #18
 8006cf8:	e7b0      	b.n	8006c5c <_dtoa_r+0x26c>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	9308      	str	r3, [sp, #32]
 8006cfe:	e7f5      	b.n	8006cec <_dtoa_r+0x2fc>
 8006d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d02:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d06:	e7b8      	b.n	8006c7a <_dtoa_r+0x28a>
 8006d08:	3101      	adds	r1, #1
 8006d0a:	6041      	str	r1, [r0, #4]
 8006d0c:	0052      	lsls	r2, r2, #1
 8006d0e:	e7b8      	b.n	8006c82 <_dtoa_r+0x292>
 8006d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d12:	9a01      	ldr	r2, [sp, #4]
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	9b03      	ldr	r3, [sp, #12]
 8006d18:	2b0e      	cmp	r3, #14
 8006d1a:	f200 809d 	bhi.w	8006e58 <_dtoa_r+0x468>
 8006d1e:	2d00      	cmp	r5, #0
 8006d20:	f000 809a 	beq.w	8006e58 <_dtoa_r+0x468>
 8006d24:	9b00      	ldr	r3, [sp, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	dd32      	ble.n	8006d90 <_dtoa_r+0x3a0>
 8006d2a:	4ab7      	ldr	r2, [pc, #732]	; (8007008 <_dtoa_r+0x618>)
 8006d2c:	f003 030f 	and.w	r3, r3, #15
 8006d30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006d34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d38:	9b00      	ldr	r3, [sp, #0]
 8006d3a:	05d8      	lsls	r0, r3, #23
 8006d3c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006d40:	d516      	bpl.n	8006d70 <_dtoa_r+0x380>
 8006d42:	4bb2      	ldr	r3, [pc, #712]	; (800700c <_dtoa_r+0x61c>)
 8006d44:	ec51 0b19 	vmov	r0, r1, d9
 8006d48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d4c:	f7f9 fd9e 	bl	800088c <__aeabi_ddiv>
 8006d50:	f007 070f 	and.w	r7, r7, #15
 8006d54:	4682      	mov	sl, r0
 8006d56:	468b      	mov	fp, r1
 8006d58:	2503      	movs	r5, #3
 8006d5a:	4eac      	ldr	r6, [pc, #688]	; (800700c <_dtoa_r+0x61c>)
 8006d5c:	b957      	cbnz	r7, 8006d74 <_dtoa_r+0x384>
 8006d5e:	4642      	mov	r2, r8
 8006d60:	464b      	mov	r3, r9
 8006d62:	4650      	mov	r0, sl
 8006d64:	4659      	mov	r1, fp
 8006d66:	f7f9 fd91 	bl	800088c <__aeabi_ddiv>
 8006d6a:	4682      	mov	sl, r0
 8006d6c:	468b      	mov	fp, r1
 8006d6e:	e028      	b.n	8006dc2 <_dtoa_r+0x3d2>
 8006d70:	2502      	movs	r5, #2
 8006d72:	e7f2      	b.n	8006d5a <_dtoa_r+0x36a>
 8006d74:	07f9      	lsls	r1, r7, #31
 8006d76:	d508      	bpl.n	8006d8a <_dtoa_r+0x39a>
 8006d78:	4640      	mov	r0, r8
 8006d7a:	4649      	mov	r1, r9
 8006d7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d80:	f7f9 fc5a 	bl	8000638 <__aeabi_dmul>
 8006d84:	3501      	adds	r5, #1
 8006d86:	4680      	mov	r8, r0
 8006d88:	4689      	mov	r9, r1
 8006d8a:	107f      	asrs	r7, r7, #1
 8006d8c:	3608      	adds	r6, #8
 8006d8e:	e7e5      	b.n	8006d5c <_dtoa_r+0x36c>
 8006d90:	f000 809b 	beq.w	8006eca <_dtoa_r+0x4da>
 8006d94:	9b00      	ldr	r3, [sp, #0]
 8006d96:	4f9d      	ldr	r7, [pc, #628]	; (800700c <_dtoa_r+0x61c>)
 8006d98:	425e      	negs	r6, r3
 8006d9a:	4b9b      	ldr	r3, [pc, #620]	; (8007008 <_dtoa_r+0x618>)
 8006d9c:	f006 020f 	and.w	r2, r6, #15
 8006da0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da8:	ec51 0b19 	vmov	r0, r1, d9
 8006dac:	f7f9 fc44 	bl	8000638 <__aeabi_dmul>
 8006db0:	1136      	asrs	r6, r6, #4
 8006db2:	4682      	mov	sl, r0
 8006db4:	468b      	mov	fp, r1
 8006db6:	2300      	movs	r3, #0
 8006db8:	2502      	movs	r5, #2
 8006dba:	2e00      	cmp	r6, #0
 8006dbc:	d17a      	bne.n	8006eb4 <_dtoa_r+0x4c4>
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1d3      	bne.n	8006d6a <_dtoa_r+0x37a>
 8006dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f000 8082 	beq.w	8006ece <_dtoa_r+0x4de>
 8006dca:	4b91      	ldr	r3, [pc, #580]	; (8007010 <_dtoa_r+0x620>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	4650      	mov	r0, sl
 8006dd0:	4659      	mov	r1, fp
 8006dd2:	f7f9 fea3 	bl	8000b1c <__aeabi_dcmplt>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d079      	beq.n	8006ece <_dtoa_r+0x4de>
 8006dda:	9b03      	ldr	r3, [sp, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d076      	beq.n	8006ece <_dtoa_r+0x4de>
 8006de0:	9b02      	ldr	r3, [sp, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	dd36      	ble.n	8006e54 <_dtoa_r+0x464>
 8006de6:	9b00      	ldr	r3, [sp, #0]
 8006de8:	4650      	mov	r0, sl
 8006dea:	4659      	mov	r1, fp
 8006dec:	1e5f      	subs	r7, r3, #1
 8006dee:	2200      	movs	r2, #0
 8006df0:	4b88      	ldr	r3, [pc, #544]	; (8007014 <_dtoa_r+0x624>)
 8006df2:	f7f9 fc21 	bl	8000638 <__aeabi_dmul>
 8006df6:	9e02      	ldr	r6, [sp, #8]
 8006df8:	4682      	mov	sl, r0
 8006dfa:	468b      	mov	fp, r1
 8006dfc:	3501      	adds	r5, #1
 8006dfe:	4628      	mov	r0, r5
 8006e00:	f7f9 fbb0 	bl	8000564 <__aeabi_i2d>
 8006e04:	4652      	mov	r2, sl
 8006e06:	465b      	mov	r3, fp
 8006e08:	f7f9 fc16 	bl	8000638 <__aeabi_dmul>
 8006e0c:	4b82      	ldr	r3, [pc, #520]	; (8007018 <_dtoa_r+0x628>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f7f9 fa5c 	bl	80002cc <__adddf3>
 8006e14:	46d0      	mov	r8, sl
 8006e16:	46d9      	mov	r9, fp
 8006e18:	4682      	mov	sl, r0
 8006e1a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006e1e:	2e00      	cmp	r6, #0
 8006e20:	d158      	bne.n	8006ed4 <_dtoa_r+0x4e4>
 8006e22:	4b7e      	ldr	r3, [pc, #504]	; (800701c <_dtoa_r+0x62c>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	4640      	mov	r0, r8
 8006e28:	4649      	mov	r1, r9
 8006e2a:	f7f9 fa4d 	bl	80002c8 <__aeabi_dsub>
 8006e2e:	4652      	mov	r2, sl
 8006e30:	465b      	mov	r3, fp
 8006e32:	4680      	mov	r8, r0
 8006e34:	4689      	mov	r9, r1
 8006e36:	f7f9 fe8f 	bl	8000b58 <__aeabi_dcmpgt>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	f040 8295 	bne.w	800736a <_dtoa_r+0x97a>
 8006e40:	4652      	mov	r2, sl
 8006e42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006e46:	4640      	mov	r0, r8
 8006e48:	4649      	mov	r1, r9
 8006e4a:	f7f9 fe67 	bl	8000b1c <__aeabi_dcmplt>
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	f040 8289 	bne.w	8007366 <_dtoa_r+0x976>
 8006e54:	ec5b ab19 	vmov	sl, fp, d9
 8006e58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f2c0 8148 	blt.w	80070f0 <_dtoa_r+0x700>
 8006e60:	9a00      	ldr	r2, [sp, #0]
 8006e62:	2a0e      	cmp	r2, #14
 8006e64:	f300 8144 	bgt.w	80070f0 <_dtoa_r+0x700>
 8006e68:	4b67      	ldr	r3, [pc, #412]	; (8007008 <_dtoa_r+0x618>)
 8006e6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f280 80d5 	bge.w	8007024 <_dtoa_r+0x634>
 8006e7a:	9b03      	ldr	r3, [sp, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f300 80d1 	bgt.w	8007024 <_dtoa_r+0x634>
 8006e82:	f040 826f 	bne.w	8007364 <_dtoa_r+0x974>
 8006e86:	4b65      	ldr	r3, [pc, #404]	; (800701c <_dtoa_r+0x62c>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	4640      	mov	r0, r8
 8006e8c:	4649      	mov	r1, r9
 8006e8e:	f7f9 fbd3 	bl	8000638 <__aeabi_dmul>
 8006e92:	4652      	mov	r2, sl
 8006e94:	465b      	mov	r3, fp
 8006e96:	f7f9 fe55 	bl	8000b44 <__aeabi_dcmpge>
 8006e9a:	9e03      	ldr	r6, [sp, #12]
 8006e9c:	4637      	mov	r7, r6
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	f040 8245 	bne.w	800732e <_dtoa_r+0x93e>
 8006ea4:	9d01      	ldr	r5, [sp, #4]
 8006ea6:	2331      	movs	r3, #49	; 0x31
 8006ea8:	f805 3b01 	strb.w	r3, [r5], #1
 8006eac:	9b00      	ldr	r3, [sp, #0]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	e240      	b.n	8007336 <_dtoa_r+0x946>
 8006eb4:	07f2      	lsls	r2, r6, #31
 8006eb6:	d505      	bpl.n	8006ec4 <_dtoa_r+0x4d4>
 8006eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ebc:	f7f9 fbbc 	bl	8000638 <__aeabi_dmul>
 8006ec0:	3501      	adds	r5, #1
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	1076      	asrs	r6, r6, #1
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	e777      	b.n	8006dba <_dtoa_r+0x3ca>
 8006eca:	2502      	movs	r5, #2
 8006ecc:	e779      	b.n	8006dc2 <_dtoa_r+0x3d2>
 8006ece:	9f00      	ldr	r7, [sp, #0]
 8006ed0:	9e03      	ldr	r6, [sp, #12]
 8006ed2:	e794      	b.n	8006dfe <_dtoa_r+0x40e>
 8006ed4:	9901      	ldr	r1, [sp, #4]
 8006ed6:	4b4c      	ldr	r3, [pc, #304]	; (8007008 <_dtoa_r+0x618>)
 8006ed8:	4431      	add	r1, r6
 8006eda:	910d      	str	r1, [sp, #52]	; 0x34
 8006edc:	9908      	ldr	r1, [sp, #32]
 8006ede:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006ee2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ee6:	2900      	cmp	r1, #0
 8006ee8:	d043      	beq.n	8006f72 <_dtoa_r+0x582>
 8006eea:	494d      	ldr	r1, [pc, #308]	; (8007020 <_dtoa_r+0x630>)
 8006eec:	2000      	movs	r0, #0
 8006eee:	f7f9 fccd 	bl	800088c <__aeabi_ddiv>
 8006ef2:	4652      	mov	r2, sl
 8006ef4:	465b      	mov	r3, fp
 8006ef6:	f7f9 f9e7 	bl	80002c8 <__aeabi_dsub>
 8006efa:	9d01      	ldr	r5, [sp, #4]
 8006efc:	4682      	mov	sl, r0
 8006efe:	468b      	mov	fp, r1
 8006f00:	4649      	mov	r1, r9
 8006f02:	4640      	mov	r0, r8
 8006f04:	f7f9 fe48 	bl	8000b98 <__aeabi_d2iz>
 8006f08:	4606      	mov	r6, r0
 8006f0a:	f7f9 fb2b 	bl	8000564 <__aeabi_i2d>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	460b      	mov	r3, r1
 8006f12:	4640      	mov	r0, r8
 8006f14:	4649      	mov	r1, r9
 8006f16:	f7f9 f9d7 	bl	80002c8 <__aeabi_dsub>
 8006f1a:	3630      	adds	r6, #48	; 0x30
 8006f1c:	f805 6b01 	strb.w	r6, [r5], #1
 8006f20:	4652      	mov	r2, sl
 8006f22:	465b      	mov	r3, fp
 8006f24:	4680      	mov	r8, r0
 8006f26:	4689      	mov	r9, r1
 8006f28:	f7f9 fdf8 	bl	8000b1c <__aeabi_dcmplt>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d163      	bne.n	8006ff8 <_dtoa_r+0x608>
 8006f30:	4642      	mov	r2, r8
 8006f32:	464b      	mov	r3, r9
 8006f34:	4936      	ldr	r1, [pc, #216]	; (8007010 <_dtoa_r+0x620>)
 8006f36:	2000      	movs	r0, #0
 8006f38:	f7f9 f9c6 	bl	80002c8 <__aeabi_dsub>
 8006f3c:	4652      	mov	r2, sl
 8006f3e:	465b      	mov	r3, fp
 8006f40:	f7f9 fdec 	bl	8000b1c <__aeabi_dcmplt>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	f040 80b5 	bne.w	80070b4 <_dtoa_r+0x6c4>
 8006f4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f4c:	429d      	cmp	r5, r3
 8006f4e:	d081      	beq.n	8006e54 <_dtoa_r+0x464>
 8006f50:	4b30      	ldr	r3, [pc, #192]	; (8007014 <_dtoa_r+0x624>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	4650      	mov	r0, sl
 8006f56:	4659      	mov	r1, fp
 8006f58:	f7f9 fb6e 	bl	8000638 <__aeabi_dmul>
 8006f5c:	4b2d      	ldr	r3, [pc, #180]	; (8007014 <_dtoa_r+0x624>)
 8006f5e:	4682      	mov	sl, r0
 8006f60:	468b      	mov	fp, r1
 8006f62:	4640      	mov	r0, r8
 8006f64:	4649      	mov	r1, r9
 8006f66:	2200      	movs	r2, #0
 8006f68:	f7f9 fb66 	bl	8000638 <__aeabi_dmul>
 8006f6c:	4680      	mov	r8, r0
 8006f6e:	4689      	mov	r9, r1
 8006f70:	e7c6      	b.n	8006f00 <_dtoa_r+0x510>
 8006f72:	4650      	mov	r0, sl
 8006f74:	4659      	mov	r1, fp
 8006f76:	f7f9 fb5f 	bl	8000638 <__aeabi_dmul>
 8006f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f7c:	9d01      	ldr	r5, [sp, #4]
 8006f7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f80:	4682      	mov	sl, r0
 8006f82:	468b      	mov	fp, r1
 8006f84:	4649      	mov	r1, r9
 8006f86:	4640      	mov	r0, r8
 8006f88:	f7f9 fe06 	bl	8000b98 <__aeabi_d2iz>
 8006f8c:	4606      	mov	r6, r0
 8006f8e:	f7f9 fae9 	bl	8000564 <__aeabi_i2d>
 8006f92:	3630      	adds	r6, #48	; 0x30
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	4640      	mov	r0, r8
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	f7f9 f994 	bl	80002c8 <__aeabi_dsub>
 8006fa0:	f805 6b01 	strb.w	r6, [r5], #1
 8006fa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fa6:	429d      	cmp	r5, r3
 8006fa8:	4680      	mov	r8, r0
 8006faa:	4689      	mov	r9, r1
 8006fac:	f04f 0200 	mov.w	r2, #0
 8006fb0:	d124      	bne.n	8006ffc <_dtoa_r+0x60c>
 8006fb2:	4b1b      	ldr	r3, [pc, #108]	; (8007020 <_dtoa_r+0x630>)
 8006fb4:	4650      	mov	r0, sl
 8006fb6:	4659      	mov	r1, fp
 8006fb8:	f7f9 f988 	bl	80002cc <__adddf3>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4640      	mov	r0, r8
 8006fc2:	4649      	mov	r1, r9
 8006fc4:	f7f9 fdc8 	bl	8000b58 <__aeabi_dcmpgt>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	d173      	bne.n	80070b4 <_dtoa_r+0x6c4>
 8006fcc:	4652      	mov	r2, sl
 8006fce:	465b      	mov	r3, fp
 8006fd0:	4913      	ldr	r1, [pc, #76]	; (8007020 <_dtoa_r+0x630>)
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	f7f9 f978 	bl	80002c8 <__aeabi_dsub>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4640      	mov	r0, r8
 8006fde:	4649      	mov	r1, r9
 8006fe0:	f7f9 fd9c 	bl	8000b1c <__aeabi_dcmplt>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	f43f af35 	beq.w	8006e54 <_dtoa_r+0x464>
 8006fea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006fec:	1e6b      	subs	r3, r5, #1
 8006fee:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ff0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ff4:	2b30      	cmp	r3, #48	; 0x30
 8006ff6:	d0f8      	beq.n	8006fea <_dtoa_r+0x5fa>
 8006ff8:	9700      	str	r7, [sp, #0]
 8006ffa:	e049      	b.n	8007090 <_dtoa_r+0x6a0>
 8006ffc:	4b05      	ldr	r3, [pc, #20]	; (8007014 <_dtoa_r+0x624>)
 8006ffe:	f7f9 fb1b 	bl	8000638 <__aeabi_dmul>
 8007002:	4680      	mov	r8, r0
 8007004:	4689      	mov	r9, r1
 8007006:	e7bd      	b.n	8006f84 <_dtoa_r+0x594>
 8007008:	0800a818 	.word	0x0800a818
 800700c:	0800a7f0 	.word	0x0800a7f0
 8007010:	3ff00000 	.word	0x3ff00000
 8007014:	40240000 	.word	0x40240000
 8007018:	401c0000 	.word	0x401c0000
 800701c:	40140000 	.word	0x40140000
 8007020:	3fe00000 	.word	0x3fe00000
 8007024:	9d01      	ldr	r5, [sp, #4]
 8007026:	4656      	mov	r6, sl
 8007028:	465f      	mov	r7, fp
 800702a:	4642      	mov	r2, r8
 800702c:	464b      	mov	r3, r9
 800702e:	4630      	mov	r0, r6
 8007030:	4639      	mov	r1, r7
 8007032:	f7f9 fc2b 	bl	800088c <__aeabi_ddiv>
 8007036:	f7f9 fdaf 	bl	8000b98 <__aeabi_d2iz>
 800703a:	4682      	mov	sl, r0
 800703c:	f7f9 fa92 	bl	8000564 <__aeabi_i2d>
 8007040:	4642      	mov	r2, r8
 8007042:	464b      	mov	r3, r9
 8007044:	f7f9 faf8 	bl	8000638 <__aeabi_dmul>
 8007048:	4602      	mov	r2, r0
 800704a:	460b      	mov	r3, r1
 800704c:	4630      	mov	r0, r6
 800704e:	4639      	mov	r1, r7
 8007050:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007054:	f7f9 f938 	bl	80002c8 <__aeabi_dsub>
 8007058:	f805 6b01 	strb.w	r6, [r5], #1
 800705c:	9e01      	ldr	r6, [sp, #4]
 800705e:	9f03      	ldr	r7, [sp, #12]
 8007060:	1bae      	subs	r6, r5, r6
 8007062:	42b7      	cmp	r7, r6
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	d135      	bne.n	80070d6 <_dtoa_r+0x6e6>
 800706a:	f7f9 f92f 	bl	80002cc <__adddf3>
 800706e:	4642      	mov	r2, r8
 8007070:	464b      	mov	r3, r9
 8007072:	4606      	mov	r6, r0
 8007074:	460f      	mov	r7, r1
 8007076:	f7f9 fd6f 	bl	8000b58 <__aeabi_dcmpgt>
 800707a:	b9d0      	cbnz	r0, 80070b2 <_dtoa_r+0x6c2>
 800707c:	4642      	mov	r2, r8
 800707e:	464b      	mov	r3, r9
 8007080:	4630      	mov	r0, r6
 8007082:	4639      	mov	r1, r7
 8007084:	f7f9 fd40 	bl	8000b08 <__aeabi_dcmpeq>
 8007088:	b110      	cbz	r0, 8007090 <_dtoa_r+0x6a0>
 800708a:	f01a 0f01 	tst.w	sl, #1
 800708e:	d110      	bne.n	80070b2 <_dtoa_r+0x6c2>
 8007090:	4620      	mov	r0, r4
 8007092:	ee18 1a10 	vmov	r1, s16
 8007096:	f000 fd13 	bl	8007ac0 <_Bfree>
 800709a:	2300      	movs	r3, #0
 800709c:	9800      	ldr	r0, [sp, #0]
 800709e:	702b      	strb	r3, [r5, #0]
 80070a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070a2:	3001      	adds	r0, #1
 80070a4:	6018      	str	r0, [r3, #0]
 80070a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f43f acf1 	beq.w	8006a90 <_dtoa_r+0xa0>
 80070ae:	601d      	str	r5, [r3, #0]
 80070b0:	e4ee      	b.n	8006a90 <_dtoa_r+0xa0>
 80070b2:	9f00      	ldr	r7, [sp, #0]
 80070b4:	462b      	mov	r3, r5
 80070b6:	461d      	mov	r5, r3
 80070b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070bc:	2a39      	cmp	r2, #57	; 0x39
 80070be:	d106      	bne.n	80070ce <_dtoa_r+0x6de>
 80070c0:	9a01      	ldr	r2, [sp, #4]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d1f7      	bne.n	80070b6 <_dtoa_r+0x6c6>
 80070c6:	9901      	ldr	r1, [sp, #4]
 80070c8:	2230      	movs	r2, #48	; 0x30
 80070ca:	3701      	adds	r7, #1
 80070cc:	700a      	strb	r2, [r1, #0]
 80070ce:	781a      	ldrb	r2, [r3, #0]
 80070d0:	3201      	adds	r2, #1
 80070d2:	701a      	strb	r2, [r3, #0]
 80070d4:	e790      	b.n	8006ff8 <_dtoa_r+0x608>
 80070d6:	4ba6      	ldr	r3, [pc, #664]	; (8007370 <_dtoa_r+0x980>)
 80070d8:	2200      	movs	r2, #0
 80070da:	f7f9 faad 	bl	8000638 <__aeabi_dmul>
 80070de:	2200      	movs	r2, #0
 80070e0:	2300      	movs	r3, #0
 80070e2:	4606      	mov	r6, r0
 80070e4:	460f      	mov	r7, r1
 80070e6:	f7f9 fd0f 	bl	8000b08 <__aeabi_dcmpeq>
 80070ea:	2800      	cmp	r0, #0
 80070ec:	d09d      	beq.n	800702a <_dtoa_r+0x63a>
 80070ee:	e7cf      	b.n	8007090 <_dtoa_r+0x6a0>
 80070f0:	9a08      	ldr	r2, [sp, #32]
 80070f2:	2a00      	cmp	r2, #0
 80070f4:	f000 80d7 	beq.w	80072a6 <_dtoa_r+0x8b6>
 80070f8:	9a06      	ldr	r2, [sp, #24]
 80070fa:	2a01      	cmp	r2, #1
 80070fc:	f300 80ba 	bgt.w	8007274 <_dtoa_r+0x884>
 8007100:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007102:	2a00      	cmp	r2, #0
 8007104:	f000 80b2 	beq.w	800726c <_dtoa_r+0x87c>
 8007108:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800710c:	9e07      	ldr	r6, [sp, #28]
 800710e:	9d04      	ldr	r5, [sp, #16]
 8007110:	9a04      	ldr	r2, [sp, #16]
 8007112:	441a      	add	r2, r3
 8007114:	9204      	str	r2, [sp, #16]
 8007116:	9a05      	ldr	r2, [sp, #20]
 8007118:	2101      	movs	r1, #1
 800711a:	441a      	add	r2, r3
 800711c:	4620      	mov	r0, r4
 800711e:	9205      	str	r2, [sp, #20]
 8007120:	f000 fd86 	bl	8007c30 <__i2b>
 8007124:	4607      	mov	r7, r0
 8007126:	2d00      	cmp	r5, #0
 8007128:	dd0c      	ble.n	8007144 <_dtoa_r+0x754>
 800712a:	9b05      	ldr	r3, [sp, #20]
 800712c:	2b00      	cmp	r3, #0
 800712e:	dd09      	ble.n	8007144 <_dtoa_r+0x754>
 8007130:	42ab      	cmp	r3, r5
 8007132:	9a04      	ldr	r2, [sp, #16]
 8007134:	bfa8      	it	ge
 8007136:	462b      	movge	r3, r5
 8007138:	1ad2      	subs	r2, r2, r3
 800713a:	9204      	str	r2, [sp, #16]
 800713c:	9a05      	ldr	r2, [sp, #20]
 800713e:	1aed      	subs	r5, r5, r3
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	9305      	str	r3, [sp, #20]
 8007144:	9b07      	ldr	r3, [sp, #28]
 8007146:	b31b      	cbz	r3, 8007190 <_dtoa_r+0x7a0>
 8007148:	9b08      	ldr	r3, [sp, #32]
 800714a:	2b00      	cmp	r3, #0
 800714c:	f000 80af 	beq.w	80072ae <_dtoa_r+0x8be>
 8007150:	2e00      	cmp	r6, #0
 8007152:	dd13      	ble.n	800717c <_dtoa_r+0x78c>
 8007154:	4639      	mov	r1, r7
 8007156:	4632      	mov	r2, r6
 8007158:	4620      	mov	r0, r4
 800715a:	f000 fe29 	bl	8007db0 <__pow5mult>
 800715e:	ee18 2a10 	vmov	r2, s16
 8007162:	4601      	mov	r1, r0
 8007164:	4607      	mov	r7, r0
 8007166:	4620      	mov	r0, r4
 8007168:	f000 fd78 	bl	8007c5c <__multiply>
 800716c:	ee18 1a10 	vmov	r1, s16
 8007170:	4680      	mov	r8, r0
 8007172:	4620      	mov	r0, r4
 8007174:	f000 fca4 	bl	8007ac0 <_Bfree>
 8007178:	ee08 8a10 	vmov	s16, r8
 800717c:	9b07      	ldr	r3, [sp, #28]
 800717e:	1b9a      	subs	r2, r3, r6
 8007180:	d006      	beq.n	8007190 <_dtoa_r+0x7a0>
 8007182:	ee18 1a10 	vmov	r1, s16
 8007186:	4620      	mov	r0, r4
 8007188:	f000 fe12 	bl	8007db0 <__pow5mult>
 800718c:	ee08 0a10 	vmov	s16, r0
 8007190:	2101      	movs	r1, #1
 8007192:	4620      	mov	r0, r4
 8007194:	f000 fd4c 	bl	8007c30 <__i2b>
 8007198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800719a:	2b00      	cmp	r3, #0
 800719c:	4606      	mov	r6, r0
 800719e:	f340 8088 	ble.w	80072b2 <_dtoa_r+0x8c2>
 80071a2:	461a      	mov	r2, r3
 80071a4:	4601      	mov	r1, r0
 80071a6:	4620      	mov	r0, r4
 80071a8:	f000 fe02 	bl	8007db0 <__pow5mult>
 80071ac:	9b06      	ldr	r3, [sp, #24]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	4606      	mov	r6, r0
 80071b2:	f340 8081 	ble.w	80072b8 <_dtoa_r+0x8c8>
 80071b6:	f04f 0800 	mov.w	r8, #0
 80071ba:	6933      	ldr	r3, [r6, #16]
 80071bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80071c0:	6918      	ldr	r0, [r3, #16]
 80071c2:	f000 fce5 	bl	8007b90 <__hi0bits>
 80071c6:	f1c0 0020 	rsb	r0, r0, #32
 80071ca:	9b05      	ldr	r3, [sp, #20]
 80071cc:	4418      	add	r0, r3
 80071ce:	f010 001f 	ands.w	r0, r0, #31
 80071d2:	f000 8092 	beq.w	80072fa <_dtoa_r+0x90a>
 80071d6:	f1c0 0320 	rsb	r3, r0, #32
 80071da:	2b04      	cmp	r3, #4
 80071dc:	f340 808a 	ble.w	80072f4 <_dtoa_r+0x904>
 80071e0:	f1c0 001c 	rsb	r0, r0, #28
 80071e4:	9b04      	ldr	r3, [sp, #16]
 80071e6:	4403      	add	r3, r0
 80071e8:	9304      	str	r3, [sp, #16]
 80071ea:	9b05      	ldr	r3, [sp, #20]
 80071ec:	4403      	add	r3, r0
 80071ee:	4405      	add	r5, r0
 80071f0:	9305      	str	r3, [sp, #20]
 80071f2:	9b04      	ldr	r3, [sp, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	dd07      	ble.n	8007208 <_dtoa_r+0x818>
 80071f8:	ee18 1a10 	vmov	r1, s16
 80071fc:	461a      	mov	r2, r3
 80071fe:	4620      	mov	r0, r4
 8007200:	f000 fe30 	bl	8007e64 <__lshift>
 8007204:	ee08 0a10 	vmov	s16, r0
 8007208:	9b05      	ldr	r3, [sp, #20]
 800720a:	2b00      	cmp	r3, #0
 800720c:	dd05      	ble.n	800721a <_dtoa_r+0x82a>
 800720e:	4631      	mov	r1, r6
 8007210:	461a      	mov	r2, r3
 8007212:	4620      	mov	r0, r4
 8007214:	f000 fe26 	bl	8007e64 <__lshift>
 8007218:	4606      	mov	r6, r0
 800721a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800721c:	2b00      	cmp	r3, #0
 800721e:	d06e      	beq.n	80072fe <_dtoa_r+0x90e>
 8007220:	ee18 0a10 	vmov	r0, s16
 8007224:	4631      	mov	r1, r6
 8007226:	f000 fe8d 	bl	8007f44 <__mcmp>
 800722a:	2800      	cmp	r0, #0
 800722c:	da67      	bge.n	80072fe <_dtoa_r+0x90e>
 800722e:	9b00      	ldr	r3, [sp, #0]
 8007230:	3b01      	subs	r3, #1
 8007232:	ee18 1a10 	vmov	r1, s16
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	220a      	movs	r2, #10
 800723a:	2300      	movs	r3, #0
 800723c:	4620      	mov	r0, r4
 800723e:	f000 fc61 	bl	8007b04 <__multadd>
 8007242:	9b08      	ldr	r3, [sp, #32]
 8007244:	ee08 0a10 	vmov	s16, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 81b1 	beq.w	80075b0 <_dtoa_r+0xbc0>
 800724e:	2300      	movs	r3, #0
 8007250:	4639      	mov	r1, r7
 8007252:	220a      	movs	r2, #10
 8007254:	4620      	mov	r0, r4
 8007256:	f000 fc55 	bl	8007b04 <__multadd>
 800725a:	9b02      	ldr	r3, [sp, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	4607      	mov	r7, r0
 8007260:	f300 808e 	bgt.w	8007380 <_dtoa_r+0x990>
 8007264:	9b06      	ldr	r3, [sp, #24]
 8007266:	2b02      	cmp	r3, #2
 8007268:	dc51      	bgt.n	800730e <_dtoa_r+0x91e>
 800726a:	e089      	b.n	8007380 <_dtoa_r+0x990>
 800726c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800726e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007272:	e74b      	b.n	800710c <_dtoa_r+0x71c>
 8007274:	9b03      	ldr	r3, [sp, #12]
 8007276:	1e5e      	subs	r6, r3, #1
 8007278:	9b07      	ldr	r3, [sp, #28]
 800727a:	42b3      	cmp	r3, r6
 800727c:	bfbf      	itttt	lt
 800727e:	9b07      	ldrlt	r3, [sp, #28]
 8007280:	9607      	strlt	r6, [sp, #28]
 8007282:	1af2      	sublt	r2, r6, r3
 8007284:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007286:	bfb6      	itet	lt
 8007288:	189b      	addlt	r3, r3, r2
 800728a:	1b9e      	subge	r6, r3, r6
 800728c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800728e:	9b03      	ldr	r3, [sp, #12]
 8007290:	bfb8      	it	lt
 8007292:	2600      	movlt	r6, #0
 8007294:	2b00      	cmp	r3, #0
 8007296:	bfb7      	itett	lt
 8007298:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800729c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80072a0:	1a9d      	sublt	r5, r3, r2
 80072a2:	2300      	movlt	r3, #0
 80072a4:	e734      	b.n	8007110 <_dtoa_r+0x720>
 80072a6:	9e07      	ldr	r6, [sp, #28]
 80072a8:	9d04      	ldr	r5, [sp, #16]
 80072aa:	9f08      	ldr	r7, [sp, #32]
 80072ac:	e73b      	b.n	8007126 <_dtoa_r+0x736>
 80072ae:	9a07      	ldr	r2, [sp, #28]
 80072b0:	e767      	b.n	8007182 <_dtoa_r+0x792>
 80072b2:	9b06      	ldr	r3, [sp, #24]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	dc18      	bgt.n	80072ea <_dtoa_r+0x8fa>
 80072b8:	f1ba 0f00 	cmp.w	sl, #0
 80072bc:	d115      	bne.n	80072ea <_dtoa_r+0x8fa>
 80072be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072c2:	b993      	cbnz	r3, 80072ea <_dtoa_r+0x8fa>
 80072c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80072c8:	0d1b      	lsrs	r3, r3, #20
 80072ca:	051b      	lsls	r3, r3, #20
 80072cc:	b183      	cbz	r3, 80072f0 <_dtoa_r+0x900>
 80072ce:	9b04      	ldr	r3, [sp, #16]
 80072d0:	3301      	adds	r3, #1
 80072d2:	9304      	str	r3, [sp, #16]
 80072d4:	9b05      	ldr	r3, [sp, #20]
 80072d6:	3301      	adds	r3, #1
 80072d8:	9305      	str	r3, [sp, #20]
 80072da:	f04f 0801 	mov.w	r8, #1
 80072de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f47f af6a 	bne.w	80071ba <_dtoa_r+0x7ca>
 80072e6:	2001      	movs	r0, #1
 80072e8:	e76f      	b.n	80071ca <_dtoa_r+0x7da>
 80072ea:	f04f 0800 	mov.w	r8, #0
 80072ee:	e7f6      	b.n	80072de <_dtoa_r+0x8ee>
 80072f0:	4698      	mov	r8, r3
 80072f2:	e7f4      	b.n	80072de <_dtoa_r+0x8ee>
 80072f4:	f43f af7d 	beq.w	80071f2 <_dtoa_r+0x802>
 80072f8:	4618      	mov	r0, r3
 80072fa:	301c      	adds	r0, #28
 80072fc:	e772      	b.n	80071e4 <_dtoa_r+0x7f4>
 80072fe:	9b03      	ldr	r3, [sp, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	dc37      	bgt.n	8007374 <_dtoa_r+0x984>
 8007304:	9b06      	ldr	r3, [sp, #24]
 8007306:	2b02      	cmp	r3, #2
 8007308:	dd34      	ble.n	8007374 <_dtoa_r+0x984>
 800730a:	9b03      	ldr	r3, [sp, #12]
 800730c:	9302      	str	r3, [sp, #8]
 800730e:	9b02      	ldr	r3, [sp, #8]
 8007310:	b96b      	cbnz	r3, 800732e <_dtoa_r+0x93e>
 8007312:	4631      	mov	r1, r6
 8007314:	2205      	movs	r2, #5
 8007316:	4620      	mov	r0, r4
 8007318:	f000 fbf4 	bl	8007b04 <__multadd>
 800731c:	4601      	mov	r1, r0
 800731e:	4606      	mov	r6, r0
 8007320:	ee18 0a10 	vmov	r0, s16
 8007324:	f000 fe0e 	bl	8007f44 <__mcmp>
 8007328:	2800      	cmp	r0, #0
 800732a:	f73f adbb 	bgt.w	8006ea4 <_dtoa_r+0x4b4>
 800732e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007330:	9d01      	ldr	r5, [sp, #4]
 8007332:	43db      	mvns	r3, r3
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	f04f 0800 	mov.w	r8, #0
 800733a:	4631      	mov	r1, r6
 800733c:	4620      	mov	r0, r4
 800733e:	f000 fbbf 	bl	8007ac0 <_Bfree>
 8007342:	2f00      	cmp	r7, #0
 8007344:	f43f aea4 	beq.w	8007090 <_dtoa_r+0x6a0>
 8007348:	f1b8 0f00 	cmp.w	r8, #0
 800734c:	d005      	beq.n	800735a <_dtoa_r+0x96a>
 800734e:	45b8      	cmp	r8, r7
 8007350:	d003      	beq.n	800735a <_dtoa_r+0x96a>
 8007352:	4641      	mov	r1, r8
 8007354:	4620      	mov	r0, r4
 8007356:	f000 fbb3 	bl	8007ac0 <_Bfree>
 800735a:	4639      	mov	r1, r7
 800735c:	4620      	mov	r0, r4
 800735e:	f000 fbaf 	bl	8007ac0 <_Bfree>
 8007362:	e695      	b.n	8007090 <_dtoa_r+0x6a0>
 8007364:	2600      	movs	r6, #0
 8007366:	4637      	mov	r7, r6
 8007368:	e7e1      	b.n	800732e <_dtoa_r+0x93e>
 800736a:	9700      	str	r7, [sp, #0]
 800736c:	4637      	mov	r7, r6
 800736e:	e599      	b.n	8006ea4 <_dtoa_r+0x4b4>
 8007370:	40240000 	.word	0x40240000
 8007374:	9b08      	ldr	r3, [sp, #32]
 8007376:	2b00      	cmp	r3, #0
 8007378:	f000 80ca 	beq.w	8007510 <_dtoa_r+0xb20>
 800737c:	9b03      	ldr	r3, [sp, #12]
 800737e:	9302      	str	r3, [sp, #8]
 8007380:	2d00      	cmp	r5, #0
 8007382:	dd05      	ble.n	8007390 <_dtoa_r+0x9a0>
 8007384:	4639      	mov	r1, r7
 8007386:	462a      	mov	r2, r5
 8007388:	4620      	mov	r0, r4
 800738a:	f000 fd6b 	bl	8007e64 <__lshift>
 800738e:	4607      	mov	r7, r0
 8007390:	f1b8 0f00 	cmp.w	r8, #0
 8007394:	d05b      	beq.n	800744e <_dtoa_r+0xa5e>
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	4620      	mov	r0, r4
 800739a:	f000 fb51 	bl	8007a40 <_Balloc>
 800739e:	4605      	mov	r5, r0
 80073a0:	b928      	cbnz	r0, 80073ae <_dtoa_r+0x9be>
 80073a2:	4b87      	ldr	r3, [pc, #540]	; (80075c0 <_dtoa_r+0xbd0>)
 80073a4:	4602      	mov	r2, r0
 80073a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80073aa:	f7ff bb3b 	b.w	8006a24 <_dtoa_r+0x34>
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	3202      	adds	r2, #2
 80073b2:	0092      	lsls	r2, r2, #2
 80073b4:	f107 010c 	add.w	r1, r7, #12
 80073b8:	300c      	adds	r0, #12
 80073ba:	f000 fb33 	bl	8007a24 <memcpy>
 80073be:	2201      	movs	r2, #1
 80073c0:	4629      	mov	r1, r5
 80073c2:	4620      	mov	r0, r4
 80073c4:	f000 fd4e 	bl	8007e64 <__lshift>
 80073c8:	9b01      	ldr	r3, [sp, #4]
 80073ca:	f103 0901 	add.w	r9, r3, #1
 80073ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80073d2:	4413      	add	r3, r2
 80073d4:	9305      	str	r3, [sp, #20]
 80073d6:	f00a 0301 	and.w	r3, sl, #1
 80073da:	46b8      	mov	r8, r7
 80073dc:	9304      	str	r3, [sp, #16]
 80073de:	4607      	mov	r7, r0
 80073e0:	4631      	mov	r1, r6
 80073e2:	ee18 0a10 	vmov	r0, s16
 80073e6:	f7ff fa77 	bl	80068d8 <quorem>
 80073ea:	4641      	mov	r1, r8
 80073ec:	9002      	str	r0, [sp, #8]
 80073ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80073f2:	ee18 0a10 	vmov	r0, s16
 80073f6:	f000 fda5 	bl	8007f44 <__mcmp>
 80073fa:	463a      	mov	r2, r7
 80073fc:	9003      	str	r0, [sp, #12]
 80073fe:	4631      	mov	r1, r6
 8007400:	4620      	mov	r0, r4
 8007402:	f000 fdbb 	bl	8007f7c <__mdiff>
 8007406:	68c2      	ldr	r2, [r0, #12]
 8007408:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800740c:	4605      	mov	r5, r0
 800740e:	bb02      	cbnz	r2, 8007452 <_dtoa_r+0xa62>
 8007410:	4601      	mov	r1, r0
 8007412:	ee18 0a10 	vmov	r0, s16
 8007416:	f000 fd95 	bl	8007f44 <__mcmp>
 800741a:	4602      	mov	r2, r0
 800741c:	4629      	mov	r1, r5
 800741e:	4620      	mov	r0, r4
 8007420:	9207      	str	r2, [sp, #28]
 8007422:	f000 fb4d 	bl	8007ac0 <_Bfree>
 8007426:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800742a:	ea43 0102 	orr.w	r1, r3, r2
 800742e:	9b04      	ldr	r3, [sp, #16]
 8007430:	430b      	orrs	r3, r1
 8007432:	464d      	mov	r5, r9
 8007434:	d10f      	bne.n	8007456 <_dtoa_r+0xa66>
 8007436:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800743a:	d02a      	beq.n	8007492 <_dtoa_r+0xaa2>
 800743c:	9b03      	ldr	r3, [sp, #12]
 800743e:	2b00      	cmp	r3, #0
 8007440:	dd02      	ble.n	8007448 <_dtoa_r+0xa58>
 8007442:	9b02      	ldr	r3, [sp, #8]
 8007444:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007448:	f88b a000 	strb.w	sl, [fp]
 800744c:	e775      	b.n	800733a <_dtoa_r+0x94a>
 800744e:	4638      	mov	r0, r7
 8007450:	e7ba      	b.n	80073c8 <_dtoa_r+0x9d8>
 8007452:	2201      	movs	r2, #1
 8007454:	e7e2      	b.n	800741c <_dtoa_r+0xa2c>
 8007456:	9b03      	ldr	r3, [sp, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	db04      	blt.n	8007466 <_dtoa_r+0xa76>
 800745c:	9906      	ldr	r1, [sp, #24]
 800745e:	430b      	orrs	r3, r1
 8007460:	9904      	ldr	r1, [sp, #16]
 8007462:	430b      	orrs	r3, r1
 8007464:	d122      	bne.n	80074ac <_dtoa_r+0xabc>
 8007466:	2a00      	cmp	r2, #0
 8007468:	ddee      	ble.n	8007448 <_dtoa_r+0xa58>
 800746a:	ee18 1a10 	vmov	r1, s16
 800746e:	2201      	movs	r2, #1
 8007470:	4620      	mov	r0, r4
 8007472:	f000 fcf7 	bl	8007e64 <__lshift>
 8007476:	4631      	mov	r1, r6
 8007478:	ee08 0a10 	vmov	s16, r0
 800747c:	f000 fd62 	bl	8007f44 <__mcmp>
 8007480:	2800      	cmp	r0, #0
 8007482:	dc03      	bgt.n	800748c <_dtoa_r+0xa9c>
 8007484:	d1e0      	bne.n	8007448 <_dtoa_r+0xa58>
 8007486:	f01a 0f01 	tst.w	sl, #1
 800748a:	d0dd      	beq.n	8007448 <_dtoa_r+0xa58>
 800748c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007490:	d1d7      	bne.n	8007442 <_dtoa_r+0xa52>
 8007492:	2339      	movs	r3, #57	; 0x39
 8007494:	f88b 3000 	strb.w	r3, [fp]
 8007498:	462b      	mov	r3, r5
 800749a:	461d      	mov	r5, r3
 800749c:	3b01      	subs	r3, #1
 800749e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80074a2:	2a39      	cmp	r2, #57	; 0x39
 80074a4:	d071      	beq.n	800758a <_dtoa_r+0xb9a>
 80074a6:	3201      	adds	r2, #1
 80074a8:	701a      	strb	r2, [r3, #0]
 80074aa:	e746      	b.n	800733a <_dtoa_r+0x94a>
 80074ac:	2a00      	cmp	r2, #0
 80074ae:	dd07      	ble.n	80074c0 <_dtoa_r+0xad0>
 80074b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80074b4:	d0ed      	beq.n	8007492 <_dtoa_r+0xaa2>
 80074b6:	f10a 0301 	add.w	r3, sl, #1
 80074ba:	f88b 3000 	strb.w	r3, [fp]
 80074be:	e73c      	b.n	800733a <_dtoa_r+0x94a>
 80074c0:	9b05      	ldr	r3, [sp, #20]
 80074c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80074c6:	4599      	cmp	r9, r3
 80074c8:	d047      	beq.n	800755a <_dtoa_r+0xb6a>
 80074ca:	ee18 1a10 	vmov	r1, s16
 80074ce:	2300      	movs	r3, #0
 80074d0:	220a      	movs	r2, #10
 80074d2:	4620      	mov	r0, r4
 80074d4:	f000 fb16 	bl	8007b04 <__multadd>
 80074d8:	45b8      	cmp	r8, r7
 80074da:	ee08 0a10 	vmov	s16, r0
 80074de:	f04f 0300 	mov.w	r3, #0
 80074e2:	f04f 020a 	mov.w	r2, #10
 80074e6:	4641      	mov	r1, r8
 80074e8:	4620      	mov	r0, r4
 80074ea:	d106      	bne.n	80074fa <_dtoa_r+0xb0a>
 80074ec:	f000 fb0a 	bl	8007b04 <__multadd>
 80074f0:	4680      	mov	r8, r0
 80074f2:	4607      	mov	r7, r0
 80074f4:	f109 0901 	add.w	r9, r9, #1
 80074f8:	e772      	b.n	80073e0 <_dtoa_r+0x9f0>
 80074fa:	f000 fb03 	bl	8007b04 <__multadd>
 80074fe:	4639      	mov	r1, r7
 8007500:	4680      	mov	r8, r0
 8007502:	2300      	movs	r3, #0
 8007504:	220a      	movs	r2, #10
 8007506:	4620      	mov	r0, r4
 8007508:	f000 fafc 	bl	8007b04 <__multadd>
 800750c:	4607      	mov	r7, r0
 800750e:	e7f1      	b.n	80074f4 <_dtoa_r+0xb04>
 8007510:	9b03      	ldr	r3, [sp, #12]
 8007512:	9302      	str	r3, [sp, #8]
 8007514:	9d01      	ldr	r5, [sp, #4]
 8007516:	ee18 0a10 	vmov	r0, s16
 800751a:	4631      	mov	r1, r6
 800751c:	f7ff f9dc 	bl	80068d8 <quorem>
 8007520:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007524:	9b01      	ldr	r3, [sp, #4]
 8007526:	f805 ab01 	strb.w	sl, [r5], #1
 800752a:	1aea      	subs	r2, r5, r3
 800752c:	9b02      	ldr	r3, [sp, #8]
 800752e:	4293      	cmp	r3, r2
 8007530:	dd09      	ble.n	8007546 <_dtoa_r+0xb56>
 8007532:	ee18 1a10 	vmov	r1, s16
 8007536:	2300      	movs	r3, #0
 8007538:	220a      	movs	r2, #10
 800753a:	4620      	mov	r0, r4
 800753c:	f000 fae2 	bl	8007b04 <__multadd>
 8007540:	ee08 0a10 	vmov	s16, r0
 8007544:	e7e7      	b.n	8007516 <_dtoa_r+0xb26>
 8007546:	9b02      	ldr	r3, [sp, #8]
 8007548:	2b00      	cmp	r3, #0
 800754a:	bfc8      	it	gt
 800754c:	461d      	movgt	r5, r3
 800754e:	9b01      	ldr	r3, [sp, #4]
 8007550:	bfd8      	it	le
 8007552:	2501      	movle	r5, #1
 8007554:	441d      	add	r5, r3
 8007556:	f04f 0800 	mov.w	r8, #0
 800755a:	ee18 1a10 	vmov	r1, s16
 800755e:	2201      	movs	r2, #1
 8007560:	4620      	mov	r0, r4
 8007562:	f000 fc7f 	bl	8007e64 <__lshift>
 8007566:	4631      	mov	r1, r6
 8007568:	ee08 0a10 	vmov	s16, r0
 800756c:	f000 fcea 	bl	8007f44 <__mcmp>
 8007570:	2800      	cmp	r0, #0
 8007572:	dc91      	bgt.n	8007498 <_dtoa_r+0xaa8>
 8007574:	d102      	bne.n	800757c <_dtoa_r+0xb8c>
 8007576:	f01a 0f01 	tst.w	sl, #1
 800757a:	d18d      	bne.n	8007498 <_dtoa_r+0xaa8>
 800757c:	462b      	mov	r3, r5
 800757e:	461d      	mov	r5, r3
 8007580:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007584:	2a30      	cmp	r2, #48	; 0x30
 8007586:	d0fa      	beq.n	800757e <_dtoa_r+0xb8e>
 8007588:	e6d7      	b.n	800733a <_dtoa_r+0x94a>
 800758a:	9a01      	ldr	r2, [sp, #4]
 800758c:	429a      	cmp	r2, r3
 800758e:	d184      	bne.n	800749a <_dtoa_r+0xaaa>
 8007590:	9b00      	ldr	r3, [sp, #0]
 8007592:	3301      	adds	r3, #1
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	2331      	movs	r3, #49	; 0x31
 8007598:	7013      	strb	r3, [r2, #0]
 800759a:	e6ce      	b.n	800733a <_dtoa_r+0x94a>
 800759c:	4b09      	ldr	r3, [pc, #36]	; (80075c4 <_dtoa_r+0xbd4>)
 800759e:	f7ff ba95 	b.w	8006acc <_dtoa_r+0xdc>
 80075a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f47f aa6e 	bne.w	8006a86 <_dtoa_r+0x96>
 80075aa:	4b07      	ldr	r3, [pc, #28]	; (80075c8 <_dtoa_r+0xbd8>)
 80075ac:	f7ff ba8e 	b.w	8006acc <_dtoa_r+0xdc>
 80075b0:	9b02      	ldr	r3, [sp, #8]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	dcae      	bgt.n	8007514 <_dtoa_r+0xb24>
 80075b6:	9b06      	ldr	r3, [sp, #24]
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	f73f aea8 	bgt.w	800730e <_dtoa_r+0x91e>
 80075be:	e7a9      	b.n	8007514 <_dtoa_r+0xb24>
 80075c0:	0800a71f 	.word	0x0800a71f
 80075c4:	0800a67c 	.word	0x0800a67c
 80075c8:	0800a6a0 	.word	0x0800a6a0

080075cc <__sflush_r>:
 80075cc:	898a      	ldrh	r2, [r1, #12]
 80075ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d2:	4605      	mov	r5, r0
 80075d4:	0710      	lsls	r0, r2, #28
 80075d6:	460c      	mov	r4, r1
 80075d8:	d458      	bmi.n	800768c <__sflush_r+0xc0>
 80075da:	684b      	ldr	r3, [r1, #4]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	dc05      	bgt.n	80075ec <__sflush_r+0x20>
 80075e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	dc02      	bgt.n	80075ec <__sflush_r+0x20>
 80075e6:	2000      	movs	r0, #0
 80075e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075ee:	2e00      	cmp	r6, #0
 80075f0:	d0f9      	beq.n	80075e6 <__sflush_r+0x1a>
 80075f2:	2300      	movs	r3, #0
 80075f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075f8:	682f      	ldr	r7, [r5, #0]
 80075fa:	602b      	str	r3, [r5, #0]
 80075fc:	d032      	beq.n	8007664 <__sflush_r+0x98>
 80075fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	075a      	lsls	r2, r3, #29
 8007604:	d505      	bpl.n	8007612 <__sflush_r+0x46>
 8007606:	6863      	ldr	r3, [r4, #4]
 8007608:	1ac0      	subs	r0, r0, r3
 800760a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800760c:	b10b      	cbz	r3, 8007612 <__sflush_r+0x46>
 800760e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007610:	1ac0      	subs	r0, r0, r3
 8007612:	2300      	movs	r3, #0
 8007614:	4602      	mov	r2, r0
 8007616:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007618:	6a21      	ldr	r1, [r4, #32]
 800761a:	4628      	mov	r0, r5
 800761c:	47b0      	blx	r6
 800761e:	1c43      	adds	r3, r0, #1
 8007620:	89a3      	ldrh	r3, [r4, #12]
 8007622:	d106      	bne.n	8007632 <__sflush_r+0x66>
 8007624:	6829      	ldr	r1, [r5, #0]
 8007626:	291d      	cmp	r1, #29
 8007628:	d82c      	bhi.n	8007684 <__sflush_r+0xb8>
 800762a:	4a2a      	ldr	r2, [pc, #168]	; (80076d4 <__sflush_r+0x108>)
 800762c:	40ca      	lsrs	r2, r1
 800762e:	07d6      	lsls	r6, r2, #31
 8007630:	d528      	bpl.n	8007684 <__sflush_r+0xb8>
 8007632:	2200      	movs	r2, #0
 8007634:	6062      	str	r2, [r4, #4]
 8007636:	04d9      	lsls	r1, r3, #19
 8007638:	6922      	ldr	r2, [r4, #16]
 800763a:	6022      	str	r2, [r4, #0]
 800763c:	d504      	bpl.n	8007648 <__sflush_r+0x7c>
 800763e:	1c42      	adds	r2, r0, #1
 8007640:	d101      	bne.n	8007646 <__sflush_r+0x7a>
 8007642:	682b      	ldr	r3, [r5, #0]
 8007644:	b903      	cbnz	r3, 8007648 <__sflush_r+0x7c>
 8007646:	6560      	str	r0, [r4, #84]	; 0x54
 8007648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800764a:	602f      	str	r7, [r5, #0]
 800764c:	2900      	cmp	r1, #0
 800764e:	d0ca      	beq.n	80075e6 <__sflush_r+0x1a>
 8007650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007654:	4299      	cmp	r1, r3
 8007656:	d002      	beq.n	800765e <__sflush_r+0x92>
 8007658:	4628      	mov	r0, r5
 800765a:	f000 fd8b 	bl	8008174 <_free_r>
 800765e:	2000      	movs	r0, #0
 8007660:	6360      	str	r0, [r4, #52]	; 0x34
 8007662:	e7c1      	b.n	80075e8 <__sflush_r+0x1c>
 8007664:	6a21      	ldr	r1, [r4, #32]
 8007666:	2301      	movs	r3, #1
 8007668:	4628      	mov	r0, r5
 800766a:	47b0      	blx	r6
 800766c:	1c41      	adds	r1, r0, #1
 800766e:	d1c7      	bne.n	8007600 <__sflush_r+0x34>
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0c4      	beq.n	8007600 <__sflush_r+0x34>
 8007676:	2b1d      	cmp	r3, #29
 8007678:	d001      	beq.n	800767e <__sflush_r+0xb2>
 800767a:	2b16      	cmp	r3, #22
 800767c:	d101      	bne.n	8007682 <__sflush_r+0xb6>
 800767e:	602f      	str	r7, [r5, #0]
 8007680:	e7b1      	b.n	80075e6 <__sflush_r+0x1a>
 8007682:	89a3      	ldrh	r3, [r4, #12]
 8007684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007688:	81a3      	strh	r3, [r4, #12]
 800768a:	e7ad      	b.n	80075e8 <__sflush_r+0x1c>
 800768c:	690f      	ldr	r7, [r1, #16]
 800768e:	2f00      	cmp	r7, #0
 8007690:	d0a9      	beq.n	80075e6 <__sflush_r+0x1a>
 8007692:	0793      	lsls	r3, r2, #30
 8007694:	680e      	ldr	r6, [r1, #0]
 8007696:	bf08      	it	eq
 8007698:	694b      	ldreq	r3, [r1, #20]
 800769a:	600f      	str	r7, [r1, #0]
 800769c:	bf18      	it	ne
 800769e:	2300      	movne	r3, #0
 80076a0:	eba6 0807 	sub.w	r8, r6, r7
 80076a4:	608b      	str	r3, [r1, #8]
 80076a6:	f1b8 0f00 	cmp.w	r8, #0
 80076aa:	dd9c      	ble.n	80075e6 <__sflush_r+0x1a>
 80076ac:	6a21      	ldr	r1, [r4, #32]
 80076ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076b0:	4643      	mov	r3, r8
 80076b2:	463a      	mov	r2, r7
 80076b4:	4628      	mov	r0, r5
 80076b6:	47b0      	blx	r6
 80076b8:	2800      	cmp	r0, #0
 80076ba:	dc06      	bgt.n	80076ca <__sflush_r+0xfe>
 80076bc:	89a3      	ldrh	r3, [r4, #12]
 80076be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076c2:	81a3      	strh	r3, [r4, #12]
 80076c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076c8:	e78e      	b.n	80075e8 <__sflush_r+0x1c>
 80076ca:	4407      	add	r7, r0
 80076cc:	eba8 0800 	sub.w	r8, r8, r0
 80076d0:	e7e9      	b.n	80076a6 <__sflush_r+0xda>
 80076d2:	bf00      	nop
 80076d4:	20400001 	.word	0x20400001

080076d8 <_fflush_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	690b      	ldr	r3, [r1, #16]
 80076dc:	4605      	mov	r5, r0
 80076de:	460c      	mov	r4, r1
 80076e0:	b913      	cbnz	r3, 80076e8 <_fflush_r+0x10>
 80076e2:	2500      	movs	r5, #0
 80076e4:	4628      	mov	r0, r5
 80076e6:	bd38      	pop	{r3, r4, r5, pc}
 80076e8:	b118      	cbz	r0, 80076f2 <_fflush_r+0x1a>
 80076ea:	6983      	ldr	r3, [r0, #24]
 80076ec:	b90b      	cbnz	r3, 80076f2 <_fflush_r+0x1a>
 80076ee:	f000 f887 	bl	8007800 <__sinit>
 80076f2:	4b14      	ldr	r3, [pc, #80]	; (8007744 <_fflush_r+0x6c>)
 80076f4:	429c      	cmp	r4, r3
 80076f6:	d11b      	bne.n	8007730 <_fflush_r+0x58>
 80076f8:	686c      	ldr	r4, [r5, #4]
 80076fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d0ef      	beq.n	80076e2 <_fflush_r+0xa>
 8007702:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007704:	07d0      	lsls	r0, r2, #31
 8007706:	d404      	bmi.n	8007712 <_fflush_r+0x3a>
 8007708:	0599      	lsls	r1, r3, #22
 800770a:	d402      	bmi.n	8007712 <_fflush_r+0x3a>
 800770c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800770e:	f000 f91a 	bl	8007946 <__retarget_lock_acquire_recursive>
 8007712:	4628      	mov	r0, r5
 8007714:	4621      	mov	r1, r4
 8007716:	f7ff ff59 	bl	80075cc <__sflush_r>
 800771a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800771c:	07da      	lsls	r2, r3, #31
 800771e:	4605      	mov	r5, r0
 8007720:	d4e0      	bmi.n	80076e4 <_fflush_r+0xc>
 8007722:	89a3      	ldrh	r3, [r4, #12]
 8007724:	059b      	lsls	r3, r3, #22
 8007726:	d4dd      	bmi.n	80076e4 <_fflush_r+0xc>
 8007728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800772a:	f000 f90d 	bl	8007948 <__retarget_lock_release_recursive>
 800772e:	e7d9      	b.n	80076e4 <_fflush_r+0xc>
 8007730:	4b05      	ldr	r3, [pc, #20]	; (8007748 <_fflush_r+0x70>)
 8007732:	429c      	cmp	r4, r3
 8007734:	d101      	bne.n	800773a <_fflush_r+0x62>
 8007736:	68ac      	ldr	r4, [r5, #8]
 8007738:	e7df      	b.n	80076fa <_fflush_r+0x22>
 800773a:	4b04      	ldr	r3, [pc, #16]	; (800774c <_fflush_r+0x74>)
 800773c:	429c      	cmp	r4, r3
 800773e:	bf08      	it	eq
 8007740:	68ec      	ldreq	r4, [r5, #12]
 8007742:	e7da      	b.n	80076fa <_fflush_r+0x22>
 8007744:	0800a750 	.word	0x0800a750
 8007748:	0800a770 	.word	0x0800a770
 800774c:	0800a730 	.word	0x0800a730

08007750 <std>:
 8007750:	2300      	movs	r3, #0
 8007752:	b510      	push	{r4, lr}
 8007754:	4604      	mov	r4, r0
 8007756:	e9c0 3300 	strd	r3, r3, [r0]
 800775a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800775e:	6083      	str	r3, [r0, #8]
 8007760:	8181      	strh	r1, [r0, #12]
 8007762:	6643      	str	r3, [r0, #100]	; 0x64
 8007764:	81c2      	strh	r2, [r0, #14]
 8007766:	6183      	str	r3, [r0, #24]
 8007768:	4619      	mov	r1, r3
 800776a:	2208      	movs	r2, #8
 800776c:	305c      	adds	r0, #92	; 0x5c
 800776e:	f7fe faf3 	bl	8005d58 <memset>
 8007772:	4b05      	ldr	r3, [pc, #20]	; (8007788 <std+0x38>)
 8007774:	6263      	str	r3, [r4, #36]	; 0x24
 8007776:	4b05      	ldr	r3, [pc, #20]	; (800778c <std+0x3c>)
 8007778:	62a3      	str	r3, [r4, #40]	; 0x28
 800777a:	4b05      	ldr	r3, [pc, #20]	; (8007790 <std+0x40>)
 800777c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800777e:	4b05      	ldr	r3, [pc, #20]	; (8007794 <std+0x44>)
 8007780:	6224      	str	r4, [r4, #32]
 8007782:	6323      	str	r3, [r4, #48]	; 0x30
 8007784:	bd10      	pop	{r4, pc}
 8007786:	bf00      	nop
 8007788:	08008609 	.word	0x08008609
 800778c:	0800862b 	.word	0x0800862b
 8007790:	08008663 	.word	0x08008663
 8007794:	08008687 	.word	0x08008687

08007798 <_cleanup_r>:
 8007798:	4901      	ldr	r1, [pc, #4]	; (80077a0 <_cleanup_r+0x8>)
 800779a:	f000 b8af 	b.w	80078fc <_fwalk_reent>
 800779e:	bf00      	nop
 80077a0:	080076d9 	.word	0x080076d9

080077a4 <__sfmoreglue>:
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	2268      	movs	r2, #104	; 0x68
 80077a8:	1e4d      	subs	r5, r1, #1
 80077aa:	4355      	muls	r5, r2
 80077ac:	460e      	mov	r6, r1
 80077ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077b2:	f000 fd4b 	bl	800824c <_malloc_r>
 80077b6:	4604      	mov	r4, r0
 80077b8:	b140      	cbz	r0, 80077cc <__sfmoreglue+0x28>
 80077ba:	2100      	movs	r1, #0
 80077bc:	e9c0 1600 	strd	r1, r6, [r0]
 80077c0:	300c      	adds	r0, #12
 80077c2:	60a0      	str	r0, [r4, #8]
 80077c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077c8:	f7fe fac6 	bl	8005d58 <memset>
 80077cc:	4620      	mov	r0, r4
 80077ce:	bd70      	pop	{r4, r5, r6, pc}

080077d0 <__sfp_lock_acquire>:
 80077d0:	4801      	ldr	r0, [pc, #4]	; (80077d8 <__sfp_lock_acquire+0x8>)
 80077d2:	f000 b8b8 	b.w	8007946 <__retarget_lock_acquire_recursive>
 80077d6:	bf00      	nop
 80077d8:	20000341 	.word	0x20000341

080077dc <__sfp_lock_release>:
 80077dc:	4801      	ldr	r0, [pc, #4]	; (80077e4 <__sfp_lock_release+0x8>)
 80077de:	f000 b8b3 	b.w	8007948 <__retarget_lock_release_recursive>
 80077e2:	bf00      	nop
 80077e4:	20000341 	.word	0x20000341

080077e8 <__sinit_lock_acquire>:
 80077e8:	4801      	ldr	r0, [pc, #4]	; (80077f0 <__sinit_lock_acquire+0x8>)
 80077ea:	f000 b8ac 	b.w	8007946 <__retarget_lock_acquire_recursive>
 80077ee:	bf00      	nop
 80077f0:	20000342 	.word	0x20000342

080077f4 <__sinit_lock_release>:
 80077f4:	4801      	ldr	r0, [pc, #4]	; (80077fc <__sinit_lock_release+0x8>)
 80077f6:	f000 b8a7 	b.w	8007948 <__retarget_lock_release_recursive>
 80077fa:	bf00      	nop
 80077fc:	20000342 	.word	0x20000342

08007800 <__sinit>:
 8007800:	b510      	push	{r4, lr}
 8007802:	4604      	mov	r4, r0
 8007804:	f7ff fff0 	bl	80077e8 <__sinit_lock_acquire>
 8007808:	69a3      	ldr	r3, [r4, #24]
 800780a:	b11b      	cbz	r3, 8007814 <__sinit+0x14>
 800780c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007810:	f7ff bff0 	b.w	80077f4 <__sinit_lock_release>
 8007814:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007818:	6523      	str	r3, [r4, #80]	; 0x50
 800781a:	4b13      	ldr	r3, [pc, #76]	; (8007868 <__sinit+0x68>)
 800781c:	4a13      	ldr	r2, [pc, #76]	; (800786c <__sinit+0x6c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	62a2      	str	r2, [r4, #40]	; 0x28
 8007822:	42a3      	cmp	r3, r4
 8007824:	bf04      	itt	eq
 8007826:	2301      	moveq	r3, #1
 8007828:	61a3      	streq	r3, [r4, #24]
 800782a:	4620      	mov	r0, r4
 800782c:	f000 f820 	bl	8007870 <__sfp>
 8007830:	6060      	str	r0, [r4, #4]
 8007832:	4620      	mov	r0, r4
 8007834:	f000 f81c 	bl	8007870 <__sfp>
 8007838:	60a0      	str	r0, [r4, #8]
 800783a:	4620      	mov	r0, r4
 800783c:	f000 f818 	bl	8007870 <__sfp>
 8007840:	2200      	movs	r2, #0
 8007842:	60e0      	str	r0, [r4, #12]
 8007844:	2104      	movs	r1, #4
 8007846:	6860      	ldr	r0, [r4, #4]
 8007848:	f7ff ff82 	bl	8007750 <std>
 800784c:	68a0      	ldr	r0, [r4, #8]
 800784e:	2201      	movs	r2, #1
 8007850:	2109      	movs	r1, #9
 8007852:	f7ff ff7d 	bl	8007750 <std>
 8007856:	68e0      	ldr	r0, [r4, #12]
 8007858:	2202      	movs	r2, #2
 800785a:	2112      	movs	r1, #18
 800785c:	f7ff ff78 	bl	8007750 <std>
 8007860:	2301      	movs	r3, #1
 8007862:	61a3      	str	r3, [r4, #24]
 8007864:	e7d2      	b.n	800780c <__sinit+0xc>
 8007866:	bf00      	nop
 8007868:	0800a668 	.word	0x0800a668
 800786c:	08007799 	.word	0x08007799

08007870 <__sfp>:
 8007870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007872:	4607      	mov	r7, r0
 8007874:	f7ff ffac 	bl	80077d0 <__sfp_lock_acquire>
 8007878:	4b1e      	ldr	r3, [pc, #120]	; (80078f4 <__sfp+0x84>)
 800787a:	681e      	ldr	r6, [r3, #0]
 800787c:	69b3      	ldr	r3, [r6, #24]
 800787e:	b913      	cbnz	r3, 8007886 <__sfp+0x16>
 8007880:	4630      	mov	r0, r6
 8007882:	f7ff ffbd 	bl	8007800 <__sinit>
 8007886:	3648      	adds	r6, #72	; 0x48
 8007888:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800788c:	3b01      	subs	r3, #1
 800788e:	d503      	bpl.n	8007898 <__sfp+0x28>
 8007890:	6833      	ldr	r3, [r6, #0]
 8007892:	b30b      	cbz	r3, 80078d8 <__sfp+0x68>
 8007894:	6836      	ldr	r6, [r6, #0]
 8007896:	e7f7      	b.n	8007888 <__sfp+0x18>
 8007898:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800789c:	b9d5      	cbnz	r5, 80078d4 <__sfp+0x64>
 800789e:	4b16      	ldr	r3, [pc, #88]	; (80078f8 <__sfp+0x88>)
 80078a0:	60e3      	str	r3, [r4, #12]
 80078a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078a6:	6665      	str	r5, [r4, #100]	; 0x64
 80078a8:	f000 f84c 	bl	8007944 <__retarget_lock_init_recursive>
 80078ac:	f7ff ff96 	bl	80077dc <__sfp_lock_release>
 80078b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078b8:	6025      	str	r5, [r4, #0]
 80078ba:	61a5      	str	r5, [r4, #24]
 80078bc:	2208      	movs	r2, #8
 80078be:	4629      	mov	r1, r5
 80078c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078c4:	f7fe fa48 	bl	8005d58 <memset>
 80078c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078d0:	4620      	mov	r0, r4
 80078d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d4:	3468      	adds	r4, #104	; 0x68
 80078d6:	e7d9      	b.n	800788c <__sfp+0x1c>
 80078d8:	2104      	movs	r1, #4
 80078da:	4638      	mov	r0, r7
 80078dc:	f7ff ff62 	bl	80077a4 <__sfmoreglue>
 80078e0:	4604      	mov	r4, r0
 80078e2:	6030      	str	r0, [r6, #0]
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d1d5      	bne.n	8007894 <__sfp+0x24>
 80078e8:	f7ff ff78 	bl	80077dc <__sfp_lock_release>
 80078ec:	230c      	movs	r3, #12
 80078ee:	603b      	str	r3, [r7, #0]
 80078f0:	e7ee      	b.n	80078d0 <__sfp+0x60>
 80078f2:	bf00      	nop
 80078f4:	0800a668 	.word	0x0800a668
 80078f8:	ffff0001 	.word	0xffff0001

080078fc <_fwalk_reent>:
 80078fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007900:	4606      	mov	r6, r0
 8007902:	4688      	mov	r8, r1
 8007904:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007908:	2700      	movs	r7, #0
 800790a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800790e:	f1b9 0901 	subs.w	r9, r9, #1
 8007912:	d505      	bpl.n	8007920 <_fwalk_reent+0x24>
 8007914:	6824      	ldr	r4, [r4, #0]
 8007916:	2c00      	cmp	r4, #0
 8007918:	d1f7      	bne.n	800790a <_fwalk_reent+0xe>
 800791a:	4638      	mov	r0, r7
 800791c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007920:	89ab      	ldrh	r3, [r5, #12]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d907      	bls.n	8007936 <_fwalk_reent+0x3a>
 8007926:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800792a:	3301      	adds	r3, #1
 800792c:	d003      	beq.n	8007936 <_fwalk_reent+0x3a>
 800792e:	4629      	mov	r1, r5
 8007930:	4630      	mov	r0, r6
 8007932:	47c0      	blx	r8
 8007934:	4307      	orrs	r7, r0
 8007936:	3568      	adds	r5, #104	; 0x68
 8007938:	e7e9      	b.n	800790e <_fwalk_reent+0x12>
	...

0800793c <_localeconv_r>:
 800793c:	4800      	ldr	r0, [pc, #0]	; (8007940 <_localeconv_r+0x4>)
 800793e:	4770      	bx	lr
 8007940:	2000016c 	.word	0x2000016c

08007944 <__retarget_lock_init_recursive>:
 8007944:	4770      	bx	lr

08007946 <__retarget_lock_acquire_recursive>:
 8007946:	4770      	bx	lr

08007948 <__retarget_lock_release_recursive>:
 8007948:	4770      	bx	lr

0800794a <__swhatbuf_r>:
 800794a:	b570      	push	{r4, r5, r6, lr}
 800794c:	460e      	mov	r6, r1
 800794e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007952:	2900      	cmp	r1, #0
 8007954:	b096      	sub	sp, #88	; 0x58
 8007956:	4614      	mov	r4, r2
 8007958:	461d      	mov	r5, r3
 800795a:	da08      	bge.n	800796e <__swhatbuf_r+0x24>
 800795c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	602a      	str	r2, [r5, #0]
 8007964:	061a      	lsls	r2, r3, #24
 8007966:	d410      	bmi.n	800798a <__swhatbuf_r+0x40>
 8007968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800796c:	e00e      	b.n	800798c <__swhatbuf_r+0x42>
 800796e:	466a      	mov	r2, sp
 8007970:	f000 fee0 	bl	8008734 <_fstat_r>
 8007974:	2800      	cmp	r0, #0
 8007976:	dbf1      	blt.n	800795c <__swhatbuf_r+0x12>
 8007978:	9a01      	ldr	r2, [sp, #4]
 800797a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800797e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007982:	425a      	negs	r2, r3
 8007984:	415a      	adcs	r2, r3
 8007986:	602a      	str	r2, [r5, #0]
 8007988:	e7ee      	b.n	8007968 <__swhatbuf_r+0x1e>
 800798a:	2340      	movs	r3, #64	; 0x40
 800798c:	2000      	movs	r0, #0
 800798e:	6023      	str	r3, [r4, #0]
 8007990:	b016      	add	sp, #88	; 0x58
 8007992:	bd70      	pop	{r4, r5, r6, pc}

08007994 <__smakebuf_r>:
 8007994:	898b      	ldrh	r3, [r1, #12]
 8007996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007998:	079d      	lsls	r5, r3, #30
 800799a:	4606      	mov	r6, r0
 800799c:	460c      	mov	r4, r1
 800799e:	d507      	bpl.n	80079b0 <__smakebuf_r+0x1c>
 80079a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	6123      	str	r3, [r4, #16]
 80079a8:	2301      	movs	r3, #1
 80079aa:	6163      	str	r3, [r4, #20]
 80079ac:	b002      	add	sp, #8
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
 80079b0:	ab01      	add	r3, sp, #4
 80079b2:	466a      	mov	r2, sp
 80079b4:	f7ff ffc9 	bl	800794a <__swhatbuf_r>
 80079b8:	9900      	ldr	r1, [sp, #0]
 80079ba:	4605      	mov	r5, r0
 80079bc:	4630      	mov	r0, r6
 80079be:	f000 fc45 	bl	800824c <_malloc_r>
 80079c2:	b948      	cbnz	r0, 80079d8 <__smakebuf_r+0x44>
 80079c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079c8:	059a      	lsls	r2, r3, #22
 80079ca:	d4ef      	bmi.n	80079ac <__smakebuf_r+0x18>
 80079cc:	f023 0303 	bic.w	r3, r3, #3
 80079d0:	f043 0302 	orr.w	r3, r3, #2
 80079d4:	81a3      	strh	r3, [r4, #12]
 80079d6:	e7e3      	b.n	80079a0 <__smakebuf_r+0xc>
 80079d8:	4b0d      	ldr	r3, [pc, #52]	; (8007a10 <__smakebuf_r+0x7c>)
 80079da:	62b3      	str	r3, [r6, #40]	; 0x28
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	6020      	str	r0, [r4, #0]
 80079e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079e4:	81a3      	strh	r3, [r4, #12]
 80079e6:	9b00      	ldr	r3, [sp, #0]
 80079e8:	6163      	str	r3, [r4, #20]
 80079ea:	9b01      	ldr	r3, [sp, #4]
 80079ec:	6120      	str	r0, [r4, #16]
 80079ee:	b15b      	cbz	r3, 8007a08 <__smakebuf_r+0x74>
 80079f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079f4:	4630      	mov	r0, r6
 80079f6:	f000 feaf 	bl	8008758 <_isatty_r>
 80079fa:	b128      	cbz	r0, 8007a08 <__smakebuf_r+0x74>
 80079fc:	89a3      	ldrh	r3, [r4, #12]
 80079fe:	f023 0303 	bic.w	r3, r3, #3
 8007a02:	f043 0301 	orr.w	r3, r3, #1
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	89a0      	ldrh	r0, [r4, #12]
 8007a0a:	4305      	orrs	r5, r0
 8007a0c:	81a5      	strh	r5, [r4, #12]
 8007a0e:	e7cd      	b.n	80079ac <__smakebuf_r+0x18>
 8007a10:	08007799 	.word	0x08007799

08007a14 <malloc>:
 8007a14:	4b02      	ldr	r3, [pc, #8]	; (8007a20 <malloc+0xc>)
 8007a16:	4601      	mov	r1, r0
 8007a18:	6818      	ldr	r0, [r3, #0]
 8007a1a:	f000 bc17 	b.w	800824c <_malloc_r>
 8007a1e:	bf00      	nop
 8007a20:	20000018 	.word	0x20000018

08007a24 <memcpy>:
 8007a24:	440a      	add	r2, r1
 8007a26:	4291      	cmp	r1, r2
 8007a28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007a2c:	d100      	bne.n	8007a30 <memcpy+0xc>
 8007a2e:	4770      	bx	lr
 8007a30:	b510      	push	{r4, lr}
 8007a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a3a:	4291      	cmp	r1, r2
 8007a3c:	d1f9      	bne.n	8007a32 <memcpy+0xe>
 8007a3e:	bd10      	pop	{r4, pc}

08007a40 <_Balloc>:
 8007a40:	b570      	push	{r4, r5, r6, lr}
 8007a42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a44:	4604      	mov	r4, r0
 8007a46:	460d      	mov	r5, r1
 8007a48:	b976      	cbnz	r6, 8007a68 <_Balloc+0x28>
 8007a4a:	2010      	movs	r0, #16
 8007a4c:	f7ff ffe2 	bl	8007a14 <malloc>
 8007a50:	4602      	mov	r2, r0
 8007a52:	6260      	str	r0, [r4, #36]	; 0x24
 8007a54:	b920      	cbnz	r0, 8007a60 <_Balloc+0x20>
 8007a56:	4b18      	ldr	r3, [pc, #96]	; (8007ab8 <_Balloc+0x78>)
 8007a58:	4818      	ldr	r0, [pc, #96]	; (8007abc <_Balloc+0x7c>)
 8007a5a:	2166      	movs	r1, #102	; 0x66
 8007a5c:	f000 fe2a 	bl	80086b4 <__assert_func>
 8007a60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a64:	6006      	str	r6, [r0, #0]
 8007a66:	60c6      	str	r6, [r0, #12]
 8007a68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a6a:	68f3      	ldr	r3, [r6, #12]
 8007a6c:	b183      	cbz	r3, 8007a90 <_Balloc+0x50>
 8007a6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a76:	b9b8      	cbnz	r0, 8007aa8 <_Balloc+0x68>
 8007a78:	2101      	movs	r1, #1
 8007a7a:	fa01 f605 	lsl.w	r6, r1, r5
 8007a7e:	1d72      	adds	r2, r6, #5
 8007a80:	0092      	lsls	r2, r2, #2
 8007a82:	4620      	mov	r0, r4
 8007a84:	f000 fb60 	bl	8008148 <_calloc_r>
 8007a88:	b160      	cbz	r0, 8007aa4 <_Balloc+0x64>
 8007a8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a8e:	e00e      	b.n	8007aae <_Balloc+0x6e>
 8007a90:	2221      	movs	r2, #33	; 0x21
 8007a92:	2104      	movs	r1, #4
 8007a94:	4620      	mov	r0, r4
 8007a96:	f000 fb57 	bl	8008148 <_calloc_r>
 8007a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a9c:	60f0      	str	r0, [r6, #12]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1e4      	bne.n	8007a6e <_Balloc+0x2e>
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	bd70      	pop	{r4, r5, r6, pc}
 8007aa8:	6802      	ldr	r2, [r0, #0]
 8007aaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007aae:	2300      	movs	r3, #0
 8007ab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ab4:	e7f7      	b.n	8007aa6 <_Balloc+0x66>
 8007ab6:	bf00      	nop
 8007ab8:	0800a6ad 	.word	0x0800a6ad
 8007abc:	0800a790 	.word	0x0800a790

08007ac0 <_Bfree>:
 8007ac0:	b570      	push	{r4, r5, r6, lr}
 8007ac2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ac4:	4605      	mov	r5, r0
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	b976      	cbnz	r6, 8007ae8 <_Bfree+0x28>
 8007aca:	2010      	movs	r0, #16
 8007acc:	f7ff ffa2 	bl	8007a14 <malloc>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	6268      	str	r0, [r5, #36]	; 0x24
 8007ad4:	b920      	cbnz	r0, 8007ae0 <_Bfree+0x20>
 8007ad6:	4b09      	ldr	r3, [pc, #36]	; (8007afc <_Bfree+0x3c>)
 8007ad8:	4809      	ldr	r0, [pc, #36]	; (8007b00 <_Bfree+0x40>)
 8007ada:	218a      	movs	r1, #138	; 0x8a
 8007adc:	f000 fdea 	bl	80086b4 <__assert_func>
 8007ae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ae4:	6006      	str	r6, [r0, #0]
 8007ae6:	60c6      	str	r6, [r0, #12]
 8007ae8:	b13c      	cbz	r4, 8007afa <_Bfree+0x3a>
 8007aea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007aec:	6862      	ldr	r2, [r4, #4]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007af4:	6021      	str	r1, [r4, #0]
 8007af6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007afa:	bd70      	pop	{r4, r5, r6, pc}
 8007afc:	0800a6ad 	.word	0x0800a6ad
 8007b00:	0800a790 	.word	0x0800a790

08007b04 <__multadd>:
 8007b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b08:	690d      	ldr	r5, [r1, #16]
 8007b0a:	4607      	mov	r7, r0
 8007b0c:	460c      	mov	r4, r1
 8007b0e:	461e      	mov	r6, r3
 8007b10:	f101 0c14 	add.w	ip, r1, #20
 8007b14:	2000      	movs	r0, #0
 8007b16:	f8dc 3000 	ldr.w	r3, [ip]
 8007b1a:	b299      	uxth	r1, r3
 8007b1c:	fb02 6101 	mla	r1, r2, r1, r6
 8007b20:	0c1e      	lsrs	r6, r3, #16
 8007b22:	0c0b      	lsrs	r3, r1, #16
 8007b24:	fb02 3306 	mla	r3, r2, r6, r3
 8007b28:	b289      	uxth	r1, r1
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b30:	4285      	cmp	r5, r0
 8007b32:	f84c 1b04 	str.w	r1, [ip], #4
 8007b36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b3a:	dcec      	bgt.n	8007b16 <__multadd+0x12>
 8007b3c:	b30e      	cbz	r6, 8007b82 <__multadd+0x7e>
 8007b3e:	68a3      	ldr	r3, [r4, #8]
 8007b40:	42ab      	cmp	r3, r5
 8007b42:	dc19      	bgt.n	8007b78 <__multadd+0x74>
 8007b44:	6861      	ldr	r1, [r4, #4]
 8007b46:	4638      	mov	r0, r7
 8007b48:	3101      	adds	r1, #1
 8007b4a:	f7ff ff79 	bl	8007a40 <_Balloc>
 8007b4e:	4680      	mov	r8, r0
 8007b50:	b928      	cbnz	r0, 8007b5e <__multadd+0x5a>
 8007b52:	4602      	mov	r2, r0
 8007b54:	4b0c      	ldr	r3, [pc, #48]	; (8007b88 <__multadd+0x84>)
 8007b56:	480d      	ldr	r0, [pc, #52]	; (8007b8c <__multadd+0x88>)
 8007b58:	21b5      	movs	r1, #181	; 0xb5
 8007b5a:	f000 fdab 	bl	80086b4 <__assert_func>
 8007b5e:	6922      	ldr	r2, [r4, #16]
 8007b60:	3202      	adds	r2, #2
 8007b62:	f104 010c 	add.w	r1, r4, #12
 8007b66:	0092      	lsls	r2, r2, #2
 8007b68:	300c      	adds	r0, #12
 8007b6a:	f7ff ff5b 	bl	8007a24 <memcpy>
 8007b6e:	4621      	mov	r1, r4
 8007b70:	4638      	mov	r0, r7
 8007b72:	f7ff ffa5 	bl	8007ac0 <_Bfree>
 8007b76:	4644      	mov	r4, r8
 8007b78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b7c:	3501      	adds	r5, #1
 8007b7e:	615e      	str	r6, [r3, #20]
 8007b80:	6125      	str	r5, [r4, #16]
 8007b82:	4620      	mov	r0, r4
 8007b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b88:	0800a71f 	.word	0x0800a71f
 8007b8c:	0800a790 	.word	0x0800a790

08007b90 <__hi0bits>:
 8007b90:	0c03      	lsrs	r3, r0, #16
 8007b92:	041b      	lsls	r3, r3, #16
 8007b94:	b9d3      	cbnz	r3, 8007bcc <__hi0bits+0x3c>
 8007b96:	0400      	lsls	r0, r0, #16
 8007b98:	2310      	movs	r3, #16
 8007b9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007b9e:	bf04      	itt	eq
 8007ba0:	0200      	lsleq	r0, r0, #8
 8007ba2:	3308      	addeq	r3, #8
 8007ba4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007ba8:	bf04      	itt	eq
 8007baa:	0100      	lsleq	r0, r0, #4
 8007bac:	3304      	addeq	r3, #4
 8007bae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007bb2:	bf04      	itt	eq
 8007bb4:	0080      	lsleq	r0, r0, #2
 8007bb6:	3302      	addeq	r3, #2
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	db05      	blt.n	8007bc8 <__hi0bits+0x38>
 8007bbc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007bc0:	f103 0301 	add.w	r3, r3, #1
 8007bc4:	bf08      	it	eq
 8007bc6:	2320      	moveq	r3, #32
 8007bc8:	4618      	mov	r0, r3
 8007bca:	4770      	bx	lr
 8007bcc:	2300      	movs	r3, #0
 8007bce:	e7e4      	b.n	8007b9a <__hi0bits+0xa>

08007bd0 <__lo0bits>:
 8007bd0:	6803      	ldr	r3, [r0, #0]
 8007bd2:	f013 0207 	ands.w	r2, r3, #7
 8007bd6:	4601      	mov	r1, r0
 8007bd8:	d00b      	beq.n	8007bf2 <__lo0bits+0x22>
 8007bda:	07da      	lsls	r2, r3, #31
 8007bdc:	d423      	bmi.n	8007c26 <__lo0bits+0x56>
 8007bde:	0798      	lsls	r0, r3, #30
 8007be0:	bf49      	itett	mi
 8007be2:	085b      	lsrmi	r3, r3, #1
 8007be4:	089b      	lsrpl	r3, r3, #2
 8007be6:	2001      	movmi	r0, #1
 8007be8:	600b      	strmi	r3, [r1, #0]
 8007bea:	bf5c      	itt	pl
 8007bec:	600b      	strpl	r3, [r1, #0]
 8007bee:	2002      	movpl	r0, #2
 8007bf0:	4770      	bx	lr
 8007bf2:	b298      	uxth	r0, r3
 8007bf4:	b9a8      	cbnz	r0, 8007c22 <__lo0bits+0x52>
 8007bf6:	0c1b      	lsrs	r3, r3, #16
 8007bf8:	2010      	movs	r0, #16
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	b90a      	cbnz	r2, 8007c02 <__lo0bits+0x32>
 8007bfe:	3008      	adds	r0, #8
 8007c00:	0a1b      	lsrs	r3, r3, #8
 8007c02:	071a      	lsls	r2, r3, #28
 8007c04:	bf04      	itt	eq
 8007c06:	091b      	lsreq	r3, r3, #4
 8007c08:	3004      	addeq	r0, #4
 8007c0a:	079a      	lsls	r2, r3, #30
 8007c0c:	bf04      	itt	eq
 8007c0e:	089b      	lsreq	r3, r3, #2
 8007c10:	3002      	addeq	r0, #2
 8007c12:	07da      	lsls	r2, r3, #31
 8007c14:	d403      	bmi.n	8007c1e <__lo0bits+0x4e>
 8007c16:	085b      	lsrs	r3, r3, #1
 8007c18:	f100 0001 	add.w	r0, r0, #1
 8007c1c:	d005      	beq.n	8007c2a <__lo0bits+0x5a>
 8007c1e:	600b      	str	r3, [r1, #0]
 8007c20:	4770      	bx	lr
 8007c22:	4610      	mov	r0, r2
 8007c24:	e7e9      	b.n	8007bfa <__lo0bits+0x2a>
 8007c26:	2000      	movs	r0, #0
 8007c28:	4770      	bx	lr
 8007c2a:	2020      	movs	r0, #32
 8007c2c:	4770      	bx	lr
	...

08007c30 <__i2b>:
 8007c30:	b510      	push	{r4, lr}
 8007c32:	460c      	mov	r4, r1
 8007c34:	2101      	movs	r1, #1
 8007c36:	f7ff ff03 	bl	8007a40 <_Balloc>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	b928      	cbnz	r0, 8007c4a <__i2b+0x1a>
 8007c3e:	4b05      	ldr	r3, [pc, #20]	; (8007c54 <__i2b+0x24>)
 8007c40:	4805      	ldr	r0, [pc, #20]	; (8007c58 <__i2b+0x28>)
 8007c42:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007c46:	f000 fd35 	bl	80086b4 <__assert_func>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	6144      	str	r4, [r0, #20]
 8007c4e:	6103      	str	r3, [r0, #16]
 8007c50:	bd10      	pop	{r4, pc}
 8007c52:	bf00      	nop
 8007c54:	0800a71f 	.word	0x0800a71f
 8007c58:	0800a790 	.word	0x0800a790

08007c5c <__multiply>:
 8007c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c60:	4691      	mov	r9, r2
 8007c62:	690a      	ldr	r2, [r1, #16]
 8007c64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	bfb8      	it	lt
 8007c6c:	460b      	movlt	r3, r1
 8007c6e:	460c      	mov	r4, r1
 8007c70:	bfbc      	itt	lt
 8007c72:	464c      	movlt	r4, r9
 8007c74:	4699      	movlt	r9, r3
 8007c76:	6927      	ldr	r7, [r4, #16]
 8007c78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c7c:	68a3      	ldr	r3, [r4, #8]
 8007c7e:	6861      	ldr	r1, [r4, #4]
 8007c80:	eb07 060a 	add.w	r6, r7, sl
 8007c84:	42b3      	cmp	r3, r6
 8007c86:	b085      	sub	sp, #20
 8007c88:	bfb8      	it	lt
 8007c8a:	3101      	addlt	r1, #1
 8007c8c:	f7ff fed8 	bl	8007a40 <_Balloc>
 8007c90:	b930      	cbnz	r0, 8007ca0 <__multiply+0x44>
 8007c92:	4602      	mov	r2, r0
 8007c94:	4b44      	ldr	r3, [pc, #272]	; (8007da8 <__multiply+0x14c>)
 8007c96:	4845      	ldr	r0, [pc, #276]	; (8007dac <__multiply+0x150>)
 8007c98:	f240 115d 	movw	r1, #349	; 0x15d
 8007c9c:	f000 fd0a 	bl	80086b4 <__assert_func>
 8007ca0:	f100 0514 	add.w	r5, r0, #20
 8007ca4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ca8:	462b      	mov	r3, r5
 8007caa:	2200      	movs	r2, #0
 8007cac:	4543      	cmp	r3, r8
 8007cae:	d321      	bcc.n	8007cf4 <__multiply+0x98>
 8007cb0:	f104 0314 	add.w	r3, r4, #20
 8007cb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007cb8:	f109 0314 	add.w	r3, r9, #20
 8007cbc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007cc0:	9202      	str	r2, [sp, #8]
 8007cc2:	1b3a      	subs	r2, r7, r4
 8007cc4:	3a15      	subs	r2, #21
 8007cc6:	f022 0203 	bic.w	r2, r2, #3
 8007cca:	3204      	adds	r2, #4
 8007ccc:	f104 0115 	add.w	r1, r4, #21
 8007cd0:	428f      	cmp	r7, r1
 8007cd2:	bf38      	it	cc
 8007cd4:	2204      	movcc	r2, #4
 8007cd6:	9201      	str	r2, [sp, #4]
 8007cd8:	9a02      	ldr	r2, [sp, #8]
 8007cda:	9303      	str	r3, [sp, #12]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d80c      	bhi.n	8007cfa <__multiply+0x9e>
 8007ce0:	2e00      	cmp	r6, #0
 8007ce2:	dd03      	ble.n	8007cec <__multiply+0x90>
 8007ce4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d05a      	beq.n	8007da2 <__multiply+0x146>
 8007cec:	6106      	str	r6, [r0, #16]
 8007cee:	b005      	add	sp, #20
 8007cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf4:	f843 2b04 	str.w	r2, [r3], #4
 8007cf8:	e7d8      	b.n	8007cac <__multiply+0x50>
 8007cfa:	f8b3 a000 	ldrh.w	sl, [r3]
 8007cfe:	f1ba 0f00 	cmp.w	sl, #0
 8007d02:	d024      	beq.n	8007d4e <__multiply+0xf2>
 8007d04:	f104 0e14 	add.w	lr, r4, #20
 8007d08:	46a9      	mov	r9, r5
 8007d0a:	f04f 0c00 	mov.w	ip, #0
 8007d0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007d12:	f8d9 1000 	ldr.w	r1, [r9]
 8007d16:	fa1f fb82 	uxth.w	fp, r2
 8007d1a:	b289      	uxth	r1, r1
 8007d1c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007d24:	f8d9 2000 	ldr.w	r2, [r9]
 8007d28:	4461      	add	r1, ip
 8007d2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d2e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007d32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d36:	b289      	uxth	r1, r1
 8007d38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d3c:	4577      	cmp	r7, lr
 8007d3e:	f849 1b04 	str.w	r1, [r9], #4
 8007d42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d46:	d8e2      	bhi.n	8007d0e <__multiply+0xb2>
 8007d48:	9a01      	ldr	r2, [sp, #4]
 8007d4a:	f845 c002 	str.w	ip, [r5, r2]
 8007d4e:	9a03      	ldr	r2, [sp, #12]
 8007d50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d54:	3304      	adds	r3, #4
 8007d56:	f1b9 0f00 	cmp.w	r9, #0
 8007d5a:	d020      	beq.n	8007d9e <__multiply+0x142>
 8007d5c:	6829      	ldr	r1, [r5, #0]
 8007d5e:	f104 0c14 	add.w	ip, r4, #20
 8007d62:	46ae      	mov	lr, r5
 8007d64:	f04f 0a00 	mov.w	sl, #0
 8007d68:	f8bc b000 	ldrh.w	fp, [ip]
 8007d6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007d70:	fb09 220b 	mla	r2, r9, fp, r2
 8007d74:	4492      	add	sl, r2
 8007d76:	b289      	uxth	r1, r1
 8007d78:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007d7c:	f84e 1b04 	str.w	r1, [lr], #4
 8007d80:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007d84:	f8be 1000 	ldrh.w	r1, [lr]
 8007d88:	0c12      	lsrs	r2, r2, #16
 8007d8a:	fb09 1102 	mla	r1, r9, r2, r1
 8007d8e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007d92:	4567      	cmp	r7, ip
 8007d94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d98:	d8e6      	bhi.n	8007d68 <__multiply+0x10c>
 8007d9a:	9a01      	ldr	r2, [sp, #4]
 8007d9c:	50a9      	str	r1, [r5, r2]
 8007d9e:	3504      	adds	r5, #4
 8007da0:	e79a      	b.n	8007cd8 <__multiply+0x7c>
 8007da2:	3e01      	subs	r6, #1
 8007da4:	e79c      	b.n	8007ce0 <__multiply+0x84>
 8007da6:	bf00      	nop
 8007da8:	0800a71f 	.word	0x0800a71f
 8007dac:	0800a790 	.word	0x0800a790

08007db0 <__pow5mult>:
 8007db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007db4:	4615      	mov	r5, r2
 8007db6:	f012 0203 	ands.w	r2, r2, #3
 8007dba:	4606      	mov	r6, r0
 8007dbc:	460f      	mov	r7, r1
 8007dbe:	d007      	beq.n	8007dd0 <__pow5mult+0x20>
 8007dc0:	4c25      	ldr	r4, [pc, #148]	; (8007e58 <__pow5mult+0xa8>)
 8007dc2:	3a01      	subs	r2, #1
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007dca:	f7ff fe9b 	bl	8007b04 <__multadd>
 8007dce:	4607      	mov	r7, r0
 8007dd0:	10ad      	asrs	r5, r5, #2
 8007dd2:	d03d      	beq.n	8007e50 <__pow5mult+0xa0>
 8007dd4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007dd6:	b97c      	cbnz	r4, 8007df8 <__pow5mult+0x48>
 8007dd8:	2010      	movs	r0, #16
 8007dda:	f7ff fe1b 	bl	8007a14 <malloc>
 8007dde:	4602      	mov	r2, r0
 8007de0:	6270      	str	r0, [r6, #36]	; 0x24
 8007de2:	b928      	cbnz	r0, 8007df0 <__pow5mult+0x40>
 8007de4:	4b1d      	ldr	r3, [pc, #116]	; (8007e5c <__pow5mult+0xac>)
 8007de6:	481e      	ldr	r0, [pc, #120]	; (8007e60 <__pow5mult+0xb0>)
 8007de8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007dec:	f000 fc62 	bl	80086b4 <__assert_func>
 8007df0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007df4:	6004      	str	r4, [r0, #0]
 8007df6:	60c4      	str	r4, [r0, #12]
 8007df8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007dfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e00:	b94c      	cbnz	r4, 8007e16 <__pow5mult+0x66>
 8007e02:	f240 2171 	movw	r1, #625	; 0x271
 8007e06:	4630      	mov	r0, r6
 8007e08:	f7ff ff12 	bl	8007c30 <__i2b>
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e12:	4604      	mov	r4, r0
 8007e14:	6003      	str	r3, [r0, #0]
 8007e16:	f04f 0900 	mov.w	r9, #0
 8007e1a:	07eb      	lsls	r3, r5, #31
 8007e1c:	d50a      	bpl.n	8007e34 <__pow5mult+0x84>
 8007e1e:	4639      	mov	r1, r7
 8007e20:	4622      	mov	r2, r4
 8007e22:	4630      	mov	r0, r6
 8007e24:	f7ff ff1a 	bl	8007c5c <__multiply>
 8007e28:	4639      	mov	r1, r7
 8007e2a:	4680      	mov	r8, r0
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	f7ff fe47 	bl	8007ac0 <_Bfree>
 8007e32:	4647      	mov	r7, r8
 8007e34:	106d      	asrs	r5, r5, #1
 8007e36:	d00b      	beq.n	8007e50 <__pow5mult+0xa0>
 8007e38:	6820      	ldr	r0, [r4, #0]
 8007e3a:	b938      	cbnz	r0, 8007e4c <__pow5mult+0x9c>
 8007e3c:	4622      	mov	r2, r4
 8007e3e:	4621      	mov	r1, r4
 8007e40:	4630      	mov	r0, r6
 8007e42:	f7ff ff0b 	bl	8007c5c <__multiply>
 8007e46:	6020      	str	r0, [r4, #0]
 8007e48:	f8c0 9000 	str.w	r9, [r0]
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	e7e4      	b.n	8007e1a <__pow5mult+0x6a>
 8007e50:	4638      	mov	r0, r7
 8007e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e56:	bf00      	nop
 8007e58:	0800a8e0 	.word	0x0800a8e0
 8007e5c:	0800a6ad 	.word	0x0800a6ad
 8007e60:	0800a790 	.word	0x0800a790

08007e64 <__lshift>:
 8007e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e68:	460c      	mov	r4, r1
 8007e6a:	6849      	ldr	r1, [r1, #4]
 8007e6c:	6923      	ldr	r3, [r4, #16]
 8007e6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e72:	68a3      	ldr	r3, [r4, #8]
 8007e74:	4607      	mov	r7, r0
 8007e76:	4691      	mov	r9, r2
 8007e78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e7c:	f108 0601 	add.w	r6, r8, #1
 8007e80:	42b3      	cmp	r3, r6
 8007e82:	db0b      	blt.n	8007e9c <__lshift+0x38>
 8007e84:	4638      	mov	r0, r7
 8007e86:	f7ff fddb 	bl	8007a40 <_Balloc>
 8007e8a:	4605      	mov	r5, r0
 8007e8c:	b948      	cbnz	r0, 8007ea2 <__lshift+0x3e>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	4b2a      	ldr	r3, [pc, #168]	; (8007f3c <__lshift+0xd8>)
 8007e92:	482b      	ldr	r0, [pc, #172]	; (8007f40 <__lshift+0xdc>)
 8007e94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007e98:	f000 fc0c 	bl	80086b4 <__assert_func>
 8007e9c:	3101      	adds	r1, #1
 8007e9e:	005b      	lsls	r3, r3, #1
 8007ea0:	e7ee      	b.n	8007e80 <__lshift+0x1c>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	f100 0114 	add.w	r1, r0, #20
 8007ea8:	f100 0210 	add.w	r2, r0, #16
 8007eac:	4618      	mov	r0, r3
 8007eae:	4553      	cmp	r3, sl
 8007eb0:	db37      	blt.n	8007f22 <__lshift+0xbe>
 8007eb2:	6920      	ldr	r0, [r4, #16]
 8007eb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007eb8:	f104 0314 	add.w	r3, r4, #20
 8007ebc:	f019 091f 	ands.w	r9, r9, #31
 8007ec0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ec4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007ec8:	d02f      	beq.n	8007f2a <__lshift+0xc6>
 8007eca:	f1c9 0e20 	rsb	lr, r9, #32
 8007ece:	468a      	mov	sl, r1
 8007ed0:	f04f 0c00 	mov.w	ip, #0
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	fa02 f209 	lsl.w	r2, r2, r9
 8007eda:	ea42 020c 	orr.w	r2, r2, ip
 8007ede:	f84a 2b04 	str.w	r2, [sl], #4
 8007ee2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ee6:	4298      	cmp	r0, r3
 8007ee8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007eec:	d8f2      	bhi.n	8007ed4 <__lshift+0x70>
 8007eee:	1b03      	subs	r3, r0, r4
 8007ef0:	3b15      	subs	r3, #21
 8007ef2:	f023 0303 	bic.w	r3, r3, #3
 8007ef6:	3304      	adds	r3, #4
 8007ef8:	f104 0215 	add.w	r2, r4, #21
 8007efc:	4290      	cmp	r0, r2
 8007efe:	bf38      	it	cc
 8007f00:	2304      	movcc	r3, #4
 8007f02:	f841 c003 	str.w	ip, [r1, r3]
 8007f06:	f1bc 0f00 	cmp.w	ip, #0
 8007f0a:	d001      	beq.n	8007f10 <__lshift+0xac>
 8007f0c:	f108 0602 	add.w	r6, r8, #2
 8007f10:	3e01      	subs	r6, #1
 8007f12:	4638      	mov	r0, r7
 8007f14:	612e      	str	r6, [r5, #16]
 8007f16:	4621      	mov	r1, r4
 8007f18:	f7ff fdd2 	bl	8007ac0 <_Bfree>
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f22:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f26:	3301      	adds	r3, #1
 8007f28:	e7c1      	b.n	8007eae <__lshift+0x4a>
 8007f2a:	3904      	subs	r1, #4
 8007f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f30:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f34:	4298      	cmp	r0, r3
 8007f36:	d8f9      	bhi.n	8007f2c <__lshift+0xc8>
 8007f38:	e7ea      	b.n	8007f10 <__lshift+0xac>
 8007f3a:	bf00      	nop
 8007f3c:	0800a71f 	.word	0x0800a71f
 8007f40:	0800a790 	.word	0x0800a790

08007f44 <__mcmp>:
 8007f44:	b530      	push	{r4, r5, lr}
 8007f46:	6902      	ldr	r2, [r0, #16]
 8007f48:	690c      	ldr	r4, [r1, #16]
 8007f4a:	1b12      	subs	r2, r2, r4
 8007f4c:	d10e      	bne.n	8007f6c <__mcmp+0x28>
 8007f4e:	f100 0314 	add.w	r3, r0, #20
 8007f52:	3114      	adds	r1, #20
 8007f54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007f58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007f5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007f60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007f64:	42a5      	cmp	r5, r4
 8007f66:	d003      	beq.n	8007f70 <__mcmp+0x2c>
 8007f68:	d305      	bcc.n	8007f76 <__mcmp+0x32>
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	4610      	mov	r0, r2
 8007f6e:	bd30      	pop	{r4, r5, pc}
 8007f70:	4283      	cmp	r3, r0
 8007f72:	d3f3      	bcc.n	8007f5c <__mcmp+0x18>
 8007f74:	e7fa      	b.n	8007f6c <__mcmp+0x28>
 8007f76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f7a:	e7f7      	b.n	8007f6c <__mcmp+0x28>

08007f7c <__mdiff>:
 8007f7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f80:	460c      	mov	r4, r1
 8007f82:	4606      	mov	r6, r0
 8007f84:	4611      	mov	r1, r2
 8007f86:	4620      	mov	r0, r4
 8007f88:	4690      	mov	r8, r2
 8007f8a:	f7ff ffdb 	bl	8007f44 <__mcmp>
 8007f8e:	1e05      	subs	r5, r0, #0
 8007f90:	d110      	bne.n	8007fb4 <__mdiff+0x38>
 8007f92:	4629      	mov	r1, r5
 8007f94:	4630      	mov	r0, r6
 8007f96:	f7ff fd53 	bl	8007a40 <_Balloc>
 8007f9a:	b930      	cbnz	r0, 8007faa <__mdiff+0x2e>
 8007f9c:	4b3a      	ldr	r3, [pc, #232]	; (8008088 <__mdiff+0x10c>)
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	f240 2132 	movw	r1, #562	; 0x232
 8007fa4:	4839      	ldr	r0, [pc, #228]	; (800808c <__mdiff+0x110>)
 8007fa6:	f000 fb85 	bl	80086b4 <__assert_func>
 8007faa:	2301      	movs	r3, #1
 8007fac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007fb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb4:	bfa4      	itt	ge
 8007fb6:	4643      	movge	r3, r8
 8007fb8:	46a0      	movge	r8, r4
 8007fba:	4630      	mov	r0, r6
 8007fbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007fc0:	bfa6      	itte	ge
 8007fc2:	461c      	movge	r4, r3
 8007fc4:	2500      	movge	r5, #0
 8007fc6:	2501      	movlt	r5, #1
 8007fc8:	f7ff fd3a 	bl	8007a40 <_Balloc>
 8007fcc:	b920      	cbnz	r0, 8007fd8 <__mdiff+0x5c>
 8007fce:	4b2e      	ldr	r3, [pc, #184]	; (8008088 <__mdiff+0x10c>)
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007fd6:	e7e5      	b.n	8007fa4 <__mdiff+0x28>
 8007fd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007fdc:	6926      	ldr	r6, [r4, #16]
 8007fde:	60c5      	str	r5, [r0, #12]
 8007fe0:	f104 0914 	add.w	r9, r4, #20
 8007fe4:	f108 0514 	add.w	r5, r8, #20
 8007fe8:	f100 0e14 	add.w	lr, r0, #20
 8007fec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007ff0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007ff4:	f108 0210 	add.w	r2, r8, #16
 8007ff8:	46f2      	mov	sl, lr
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008000:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008004:	fa1f f883 	uxth.w	r8, r3
 8008008:	fa11 f18b 	uxtah	r1, r1, fp
 800800c:	0c1b      	lsrs	r3, r3, #16
 800800e:	eba1 0808 	sub.w	r8, r1, r8
 8008012:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008016:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800801a:	fa1f f888 	uxth.w	r8, r8
 800801e:	1419      	asrs	r1, r3, #16
 8008020:	454e      	cmp	r6, r9
 8008022:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008026:	f84a 3b04 	str.w	r3, [sl], #4
 800802a:	d8e7      	bhi.n	8007ffc <__mdiff+0x80>
 800802c:	1b33      	subs	r3, r6, r4
 800802e:	3b15      	subs	r3, #21
 8008030:	f023 0303 	bic.w	r3, r3, #3
 8008034:	3304      	adds	r3, #4
 8008036:	3415      	adds	r4, #21
 8008038:	42a6      	cmp	r6, r4
 800803a:	bf38      	it	cc
 800803c:	2304      	movcc	r3, #4
 800803e:	441d      	add	r5, r3
 8008040:	4473      	add	r3, lr
 8008042:	469e      	mov	lr, r3
 8008044:	462e      	mov	r6, r5
 8008046:	4566      	cmp	r6, ip
 8008048:	d30e      	bcc.n	8008068 <__mdiff+0xec>
 800804a:	f10c 0203 	add.w	r2, ip, #3
 800804e:	1b52      	subs	r2, r2, r5
 8008050:	f022 0203 	bic.w	r2, r2, #3
 8008054:	3d03      	subs	r5, #3
 8008056:	45ac      	cmp	ip, r5
 8008058:	bf38      	it	cc
 800805a:	2200      	movcc	r2, #0
 800805c:	441a      	add	r2, r3
 800805e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008062:	b17b      	cbz	r3, 8008084 <__mdiff+0x108>
 8008064:	6107      	str	r7, [r0, #16]
 8008066:	e7a3      	b.n	8007fb0 <__mdiff+0x34>
 8008068:	f856 8b04 	ldr.w	r8, [r6], #4
 800806c:	fa11 f288 	uxtah	r2, r1, r8
 8008070:	1414      	asrs	r4, r2, #16
 8008072:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008076:	b292      	uxth	r2, r2
 8008078:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800807c:	f84e 2b04 	str.w	r2, [lr], #4
 8008080:	1421      	asrs	r1, r4, #16
 8008082:	e7e0      	b.n	8008046 <__mdiff+0xca>
 8008084:	3f01      	subs	r7, #1
 8008086:	e7ea      	b.n	800805e <__mdiff+0xe2>
 8008088:	0800a71f 	.word	0x0800a71f
 800808c:	0800a790 	.word	0x0800a790

08008090 <__d2b>:
 8008090:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008094:	4689      	mov	r9, r1
 8008096:	2101      	movs	r1, #1
 8008098:	ec57 6b10 	vmov	r6, r7, d0
 800809c:	4690      	mov	r8, r2
 800809e:	f7ff fccf 	bl	8007a40 <_Balloc>
 80080a2:	4604      	mov	r4, r0
 80080a4:	b930      	cbnz	r0, 80080b4 <__d2b+0x24>
 80080a6:	4602      	mov	r2, r0
 80080a8:	4b25      	ldr	r3, [pc, #148]	; (8008140 <__d2b+0xb0>)
 80080aa:	4826      	ldr	r0, [pc, #152]	; (8008144 <__d2b+0xb4>)
 80080ac:	f240 310a 	movw	r1, #778	; 0x30a
 80080b0:	f000 fb00 	bl	80086b4 <__assert_func>
 80080b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80080b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080bc:	bb35      	cbnz	r5, 800810c <__d2b+0x7c>
 80080be:	2e00      	cmp	r6, #0
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	d028      	beq.n	8008116 <__d2b+0x86>
 80080c4:	4668      	mov	r0, sp
 80080c6:	9600      	str	r6, [sp, #0]
 80080c8:	f7ff fd82 	bl	8007bd0 <__lo0bits>
 80080cc:	9900      	ldr	r1, [sp, #0]
 80080ce:	b300      	cbz	r0, 8008112 <__d2b+0x82>
 80080d0:	9a01      	ldr	r2, [sp, #4]
 80080d2:	f1c0 0320 	rsb	r3, r0, #32
 80080d6:	fa02 f303 	lsl.w	r3, r2, r3
 80080da:	430b      	orrs	r3, r1
 80080dc:	40c2      	lsrs	r2, r0
 80080de:	6163      	str	r3, [r4, #20]
 80080e0:	9201      	str	r2, [sp, #4]
 80080e2:	9b01      	ldr	r3, [sp, #4]
 80080e4:	61a3      	str	r3, [r4, #24]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	bf14      	ite	ne
 80080ea:	2202      	movne	r2, #2
 80080ec:	2201      	moveq	r2, #1
 80080ee:	6122      	str	r2, [r4, #16]
 80080f0:	b1d5      	cbz	r5, 8008128 <__d2b+0x98>
 80080f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80080f6:	4405      	add	r5, r0
 80080f8:	f8c9 5000 	str.w	r5, [r9]
 80080fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008100:	f8c8 0000 	str.w	r0, [r8]
 8008104:	4620      	mov	r0, r4
 8008106:	b003      	add	sp, #12
 8008108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800810c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008110:	e7d5      	b.n	80080be <__d2b+0x2e>
 8008112:	6161      	str	r1, [r4, #20]
 8008114:	e7e5      	b.n	80080e2 <__d2b+0x52>
 8008116:	a801      	add	r0, sp, #4
 8008118:	f7ff fd5a 	bl	8007bd0 <__lo0bits>
 800811c:	9b01      	ldr	r3, [sp, #4]
 800811e:	6163      	str	r3, [r4, #20]
 8008120:	2201      	movs	r2, #1
 8008122:	6122      	str	r2, [r4, #16]
 8008124:	3020      	adds	r0, #32
 8008126:	e7e3      	b.n	80080f0 <__d2b+0x60>
 8008128:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800812c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008130:	f8c9 0000 	str.w	r0, [r9]
 8008134:	6918      	ldr	r0, [r3, #16]
 8008136:	f7ff fd2b 	bl	8007b90 <__hi0bits>
 800813a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800813e:	e7df      	b.n	8008100 <__d2b+0x70>
 8008140:	0800a71f 	.word	0x0800a71f
 8008144:	0800a790 	.word	0x0800a790

08008148 <_calloc_r>:
 8008148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800814a:	fba1 2402 	umull	r2, r4, r1, r2
 800814e:	b94c      	cbnz	r4, 8008164 <_calloc_r+0x1c>
 8008150:	4611      	mov	r1, r2
 8008152:	9201      	str	r2, [sp, #4]
 8008154:	f000 f87a 	bl	800824c <_malloc_r>
 8008158:	9a01      	ldr	r2, [sp, #4]
 800815a:	4605      	mov	r5, r0
 800815c:	b930      	cbnz	r0, 800816c <_calloc_r+0x24>
 800815e:	4628      	mov	r0, r5
 8008160:	b003      	add	sp, #12
 8008162:	bd30      	pop	{r4, r5, pc}
 8008164:	220c      	movs	r2, #12
 8008166:	6002      	str	r2, [r0, #0]
 8008168:	2500      	movs	r5, #0
 800816a:	e7f8      	b.n	800815e <_calloc_r+0x16>
 800816c:	4621      	mov	r1, r4
 800816e:	f7fd fdf3 	bl	8005d58 <memset>
 8008172:	e7f4      	b.n	800815e <_calloc_r+0x16>

08008174 <_free_r>:
 8008174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008176:	2900      	cmp	r1, #0
 8008178:	d044      	beq.n	8008204 <_free_r+0x90>
 800817a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800817e:	9001      	str	r0, [sp, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	f1a1 0404 	sub.w	r4, r1, #4
 8008186:	bfb8      	it	lt
 8008188:	18e4      	addlt	r4, r4, r3
 800818a:	f000 fb19 	bl	80087c0 <__malloc_lock>
 800818e:	4a1e      	ldr	r2, [pc, #120]	; (8008208 <_free_r+0x94>)
 8008190:	9801      	ldr	r0, [sp, #4]
 8008192:	6813      	ldr	r3, [r2, #0]
 8008194:	b933      	cbnz	r3, 80081a4 <_free_r+0x30>
 8008196:	6063      	str	r3, [r4, #4]
 8008198:	6014      	str	r4, [r2, #0]
 800819a:	b003      	add	sp, #12
 800819c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081a0:	f000 bb14 	b.w	80087cc <__malloc_unlock>
 80081a4:	42a3      	cmp	r3, r4
 80081a6:	d908      	bls.n	80081ba <_free_r+0x46>
 80081a8:	6825      	ldr	r5, [r4, #0]
 80081aa:	1961      	adds	r1, r4, r5
 80081ac:	428b      	cmp	r3, r1
 80081ae:	bf01      	itttt	eq
 80081b0:	6819      	ldreq	r1, [r3, #0]
 80081b2:	685b      	ldreq	r3, [r3, #4]
 80081b4:	1949      	addeq	r1, r1, r5
 80081b6:	6021      	streq	r1, [r4, #0]
 80081b8:	e7ed      	b.n	8008196 <_free_r+0x22>
 80081ba:	461a      	mov	r2, r3
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	b10b      	cbz	r3, 80081c4 <_free_r+0x50>
 80081c0:	42a3      	cmp	r3, r4
 80081c2:	d9fa      	bls.n	80081ba <_free_r+0x46>
 80081c4:	6811      	ldr	r1, [r2, #0]
 80081c6:	1855      	adds	r5, r2, r1
 80081c8:	42a5      	cmp	r5, r4
 80081ca:	d10b      	bne.n	80081e4 <_free_r+0x70>
 80081cc:	6824      	ldr	r4, [r4, #0]
 80081ce:	4421      	add	r1, r4
 80081d0:	1854      	adds	r4, r2, r1
 80081d2:	42a3      	cmp	r3, r4
 80081d4:	6011      	str	r1, [r2, #0]
 80081d6:	d1e0      	bne.n	800819a <_free_r+0x26>
 80081d8:	681c      	ldr	r4, [r3, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	6053      	str	r3, [r2, #4]
 80081de:	4421      	add	r1, r4
 80081e0:	6011      	str	r1, [r2, #0]
 80081e2:	e7da      	b.n	800819a <_free_r+0x26>
 80081e4:	d902      	bls.n	80081ec <_free_r+0x78>
 80081e6:	230c      	movs	r3, #12
 80081e8:	6003      	str	r3, [r0, #0]
 80081ea:	e7d6      	b.n	800819a <_free_r+0x26>
 80081ec:	6825      	ldr	r5, [r4, #0]
 80081ee:	1961      	adds	r1, r4, r5
 80081f0:	428b      	cmp	r3, r1
 80081f2:	bf04      	itt	eq
 80081f4:	6819      	ldreq	r1, [r3, #0]
 80081f6:	685b      	ldreq	r3, [r3, #4]
 80081f8:	6063      	str	r3, [r4, #4]
 80081fa:	bf04      	itt	eq
 80081fc:	1949      	addeq	r1, r1, r5
 80081fe:	6021      	streq	r1, [r4, #0]
 8008200:	6054      	str	r4, [r2, #4]
 8008202:	e7ca      	b.n	800819a <_free_r+0x26>
 8008204:	b003      	add	sp, #12
 8008206:	bd30      	pop	{r4, r5, pc}
 8008208:	20000344 	.word	0x20000344

0800820c <sbrk_aligned>:
 800820c:	b570      	push	{r4, r5, r6, lr}
 800820e:	4e0e      	ldr	r6, [pc, #56]	; (8008248 <sbrk_aligned+0x3c>)
 8008210:	460c      	mov	r4, r1
 8008212:	6831      	ldr	r1, [r6, #0]
 8008214:	4605      	mov	r5, r0
 8008216:	b911      	cbnz	r1, 800821e <sbrk_aligned+0x12>
 8008218:	f000 f9e6 	bl	80085e8 <_sbrk_r>
 800821c:	6030      	str	r0, [r6, #0]
 800821e:	4621      	mov	r1, r4
 8008220:	4628      	mov	r0, r5
 8008222:	f000 f9e1 	bl	80085e8 <_sbrk_r>
 8008226:	1c43      	adds	r3, r0, #1
 8008228:	d00a      	beq.n	8008240 <sbrk_aligned+0x34>
 800822a:	1cc4      	adds	r4, r0, #3
 800822c:	f024 0403 	bic.w	r4, r4, #3
 8008230:	42a0      	cmp	r0, r4
 8008232:	d007      	beq.n	8008244 <sbrk_aligned+0x38>
 8008234:	1a21      	subs	r1, r4, r0
 8008236:	4628      	mov	r0, r5
 8008238:	f000 f9d6 	bl	80085e8 <_sbrk_r>
 800823c:	3001      	adds	r0, #1
 800823e:	d101      	bne.n	8008244 <sbrk_aligned+0x38>
 8008240:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008244:	4620      	mov	r0, r4
 8008246:	bd70      	pop	{r4, r5, r6, pc}
 8008248:	20000348 	.word	0x20000348

0800824c <_malloc_r>:
 800824c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008250:	1ccd      	adds	r5, r1, #3
 8008252:	f025 0503 	bic.w	r5, r5, #3
 8008256:	3508      	adds	r5, #8
 8008258:	2d0c      	cmp	r5, #12
 800825a:	bf38      	it	cc
 800825c:	250c      	movcc	r5, #12
 800825e:	2d00      	cmp	r5, #0
 8008260:	4607      	mov	r7, r0
 8008262:	db01      	blt.n	8008268 <_malloc_r+0x1c>
 8008264:	42a9      	cmp	r1, r5
 8008266:	d905      	bls.n	8008274 <_malloc_r+0x28>
 8008268:	230c      	movs	r3, #12
 800826a:	603b      	str	r3, [r7, #0]
 800826c:	2600      	movs	r6, #0
 800826e:	4630      	mov	r0, r6
 8008270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008274:	4e2e      	ldr	r6, [pc, #184]	; (8008330 <_malloc_r+0xe4>)
 8008276:	f000 faa3 	bl	80087c0 <__malloc_lock>
 800827a:	6833      	ldr	r3, [r6, #0]
 800827c:	461c      	mov	r4, r3
 800827e:	bb34      	cbnz	r4, 80082ce <_malloc_r+0x82>
 8008280:	4629      	mov	r1, r5
 8008282:	4638      	mov	r0, r7
 8008284:	f7ff ffc2 	bl	800820c <sbrk_aligned>
 8008288:	1c43      	adds	r3, r0, #1
 800828a:	4604      	mov	r4, r0
 800828c:	d14d      	bne.n	800832a <_malloc_r+0xde>
 800828e:	6834      	ldr	r4, [r6, #0]
 8008290:	4626      	mov	r6, r4
 8008292:	2e00      	cmp	r6, #0
 8008294:	d140      	bne.n	8008318 <_malloc_r+0xcc>
 8008296:	6823      	ldr	r3, [r4, #0]
 8008298:	4631      	mov	r1, r6
 800829a:	4638      	mov	r0, r7
 800829c:	eb04 0803 	add.w	r8, r4, r3
 80082a0:	f000 f9a2 	bl	80085e8 <_sbrk_r>
 80082a4:	4580      	cmp	r8, r0
 80082a6:	d13a      	bne.n	800831e <_malloc_r+0xd2>
 80082a8:	6821      	ldr	r1, [r4, #0]
 80082aa:	3503      	adds	r5, #3
 80082ac:	1a6d      	subs	r5, r5, r1
 80082ae:	f025 0503 	bic.w	r5, r5, #3
 80082b2:	3508      	adds	r5, #8
 80082b4:	2d0c      	cmp	r5, #12
 80082b6:	bf38      	it	cc
 80082b8:	250c      	movcc	r5, #12
 80082ba:	4629      	mov	r1, r5
 80082bc:	4638      	mov	r0, r7
 80082be:	f7ff ffa5 	bl	800820c <sbrk_aligned>
 80082c2:	3001      	adds	r0, #1
 80082c4:	d02b      	beq.n	800831e <_malloc_r+0xd2>
 80082c6:	6823      	ldr	r3, [r4, #0]
 80082c8:	442b      	add	r3, r5
 80082ca:	6023      	str	r3, [r4, #0]
 80082cc:	e00e      	b.n	80082ec <_malloc_r+0xa0>
 80082ce:	6822      	ldr	r2, [r4, #0]
 80082d0:	1b52      	subs	r2, r2, r5
 80082d2:	d41e      	bmi.n	8008312 <_malloc_r+0xc6>
 80082d4:	2a0b      	cmp	r2, #11
 80082d6:	d916      	bls.n	8008306 <_malloc_r+0xba>
 80082d8:	1961      	adds	r1, r4, r5
 80082da:	42a3      	cmp	r3, r4
 80082dc:	6025      	str	r5, [r4, #0]
 80082de:	bf18      	it	ne
 80082e0:	6059      	strne	r1, [r3, #4]
 80082e2:	6863      	ldr	r3, [r4, #4]
 80082e4:	bf08      	it	eq
 80082e6:	6031      	streq	r1, [r6, #0]
 80082e8:	5162      	str	r2, [r4, r5]
 80082ea:	604b      	str	r3, [r1, #4]
 80082ec:	4638      	mov	r0, r7
 80082ee:	f104 060b 	add.w	r6, r4, #11
 80082f2:	f000 fa6b 	bl	80087cc <__malloc_unlock>
 80082f6:	f026 0607 	bic.w	r6, r6, #7
 80082fa:	1d23      	adds	r3, r4, #4
 80082fc:	1af2      	subs	r2, r6, r3
 80082fe:	d0b6      	beq.n	800826e <_malloc_r+0x22>
 8008300:	1b9b      	subs	r3, r3, r6
 8008302:	50a3      	str	r3, [r4, r2]
 8008304:	e7b3      	b.n	800826e <_malloc_r+0x22>
 8008306:	6862      	ldr	r2, [r4, #4]
 8008308:	42a3      	cmp	r3, r4
 800830a:	bf0c      	ite	eq
 800830c:	6032      	streq	r2, [r6, #0]
 800830e:	605a      	strne	r2, [r3, #4]
 8008310:	e7ec      	b.n	80082ec <_malloc_r+0xa0>
 8008312:	4623      	mov	r3, r4
 8008314:	6864      	ldr	r4, [r4, #4]
 8008316:	e7b2      	b.n	800827e <_malloc_r+0x32>
 8008318:	4634      	mov	r4, r6
 800831a:	6876      	ldr	r6, [r6, #4]
 800831c:	e7b9      	b.n	8008292 <_malloc_r+0x46>
 800831e:	230c      	movs	r3, #12
 8008320:	603b      	str	r3, [r7, #0]
 8008322:	4638      	mov	r0, r7
 8008324:	f000 fa52 	bl	80087cc <__malloc_unlock>
 8008328:	e7a1      	b.n	800826e <_malloc_r+0x22>
 800832a:	6025      	str	r5, [r4, #0]
 800832c:	e7de      	b.n	80082ec <_malloc_r+0xa0>
 800832e:	bf00      	nop
 8008330:	20000344 	.word	0x20000344

08008334 <__sfputc_r>:
 8008334:	6893      	ldr	r3, [r2, #8]
 8008336:	3b01      	subs	r3, #1
 8008338:	2b00      	cmp	r3, #0
 800833a:	b410      	push	{r4}
 800833c:	6093      	str	r3, [r2, #8]
 800833e:	da08      	bge.n	8008352 <__sfputc_r+0x1e>
 8008340:	6994      	ldr	r4, [r2, #24]
 8008342:	42a3      	cmp	r3, r4
 8008344:	db01      	blt.n	800834a <__sfputc_r+0x16>
 8008346:	290a      	cmp	r1, #10
 8008348:	d103      	bne.n	8008352 <__sfputc_r+0x1e>
 800834a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800834e:	f7fe ba03 	b.w	8006758 <__swbuf_r>
 8008352:	6813      	ldr	r3, [r2, #0]
 8008354:	1c58      	adds	r0, r3, #1
 8008356:	6010      	str	r0, [r2, #0]
 8008358:	7019      	strb	r1, [r3, #0]
 800835a:	4608      	mov	r0, r1
 800835c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008360:	4770      	bx	lr

08008362 <__sfputs_r>:
 8008362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008364:	4606      	mov	r6, r0
 8008366:	460f      	mov	r7, r1
 8008368:	4614      	mov	r4, r2
 800836a:	18d5      	adds	r5, r2, r3
 800836c:	42ac      	cmp	r4, r5
 800836e:	d101      	bne.n	8008374 <__sfputs_r+0x12>
 8008370:	2000      	movs	r0, #0
 8008372:	e007      	b.n	8008384 <__sfputs_r+0x22>
 8008374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008378:	463a      	mov	r2, r7
 800837a:	4630      	mov	r0, r6
 800837c:	f7ff ffda 	bl	8008334 <__sfputc_r>
 8008380:	1c43      	adds	r3, r0, #1
 8008382:	d1f3      	bne.n	800836c <__sfputs_r+0xa>
 8008384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008388 <_vfiprintf_r>:
 8008388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838c:	460d      	mov	r5, r1
 800838e:	b09d      	sub	sp, #116	; 0x74
 8008390:	4614      	mov	r4, r2
 8008392:	4698      	mov	r8, r3
 8008394:	4606      	mov	r6, r0
 8008396:	b118      	cbz	r0, 80083a0 <_vfiprintf_r+0x18>
 8008398:	6983      	ldr	r3, [r0, #24]
 800839a:	b90b      	cbnz	r3, 80083a0 <_vfiprintf_r+0x18>
 800839c:	f7ff fa30 	bl	8007800 <__sinit>
 80083a0:	4b89      	ldr	r3, [pc, #548]	; (80085c8 <_vfiprintf_r+0x240>)
 80083a2:	429d      	cmp	r5, r3
 80083a4:	d11b      	bne.n	80083de <_vfiprintf_r+0x56>
 80083a6:	6875      	ldr	r5, [r6, #4]
 80083a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083aa:	07d9      	lsls	r1, r3, #31
 80083ac:	d405      	bmi.n	80083ba <_vfiprintf_r+0x32>
 80083ae:	89ab      	ldrh	r3, [r5, #12]
 80083b0:	059a      	lsls	r2, r3, #22
 80083b2:	d402      	bmi.n	80083ba <_vfiprintf_r+0x32>
 80083b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083b6:	f7ff fac6 	bl	8007946 <__retarget_lock_acquire_recursive>
 80083ba:	89ab      	ldrh	r3, [r5, #12]
 80083bc:	071b      	lsls	r3, r3, #28
 80083be:	d501      	bpl.n	80083c4 <_vfiprintf_r+0x3c>
 80083c0:	692b      	ldr	r3, [r5, #16]
 80083c2:	b9eb      	cbnz	r3, 8008400 <_vfiprintf_r+0x78>
 80083c4:	4629      	mov	r1, r5
 80083c6:	4630      	mov	r0, r6
 80083c8:	f7fe fa18 	bl	80067fc <__swsetup_r>
 80083cc:	b1c0      	cbz	r0, 8008400 <_vfiprintf_r+0x78>
 80083ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083d0:	07dc      	lsls	r4, r3, #31
 80083d2:	d50e      	bpl.n	80083f2 <_vfiprintf_r+0x6a>
 80083d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083d8:	b01d      	add	sp, #116	; 0x74
 80083da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083de:	4b7b      	ldr	r3, [pc, #492]	; (80085cc <_vfiprintf_r+0x244>)
 80083e0:	429d      	cmp	r5, r3
 80083e2:	d101      	bne.n	80083e8 <_vfiprintf_r+0x60>
 80083e4:	68b5      	ldr	r5, [r6, #8]
 80083e6:	e7df      	b.n	80083a8 <_vfiprintf_r+0x20>
 80083e8:	4b79      	ldr	r3, [pc, #484]	; (80085d0 <_vfiprintf_r+0x248>)
 80083ea:	429d      	cmp	r5, r3
 80083ec:	bf08      	it	eq
 80083ee:	68f5      	ldreq	r5, [r6, #12]
 80083f0:	e7da      	b.n	80083a8 <_vfiprintf_r+0x20>
 80083f2:	89ab      	ldrh	r3, [r5, #12]
 80083f4:	0598      	lsls	r0, r3, #22
 80083f6:	d4ed      	bmi.n	80083d4 <_vfiprintf_r+0x4c>
 80083f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083fa:	f7ff faa5 	bl	8007948 <__retarget_lock_release_recursive>
 80083fe:	e7e9      	b.n	80083d4 <_vfiprintf_r+0x4c>
 8008400:	2300      	movs	r3, #0
 8008402:	9309      	str	r3, [sp, #36]	; 0x24
 8008404:	2320      	movs	r3, #32
 8008406:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800840a:	f8cd 800c 	str.w	r8, [sp, #12]
 800840e:	2330      	movs	r3, #48	; 0x30
 8008410:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80085d4 <_vfiprintf_r+0x24c>
 8008414:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008418:	f04f 0901 	mov.w	r9, #1
 800841c:	4623      	mov	r3, r4
 800841e:	469a      	mov	sl, r3
 8008420:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008424:	b10a      	cbz	r2, 800842a <_vfiprintf_r+0xa2>
 8008426:	2a25      	cmp	r2, #37	; 0x25
 8008428:	d1f9      	bne.n	800841e <_vfiprintf_r+0x96>
 800842a:	ebba 0b04 	subs.w	fp, sl, r4
 800842e:	d00b      	beq.n	8008448 <_vfiprintf_r+0xc0>
 8008430:	465b      	mov	r3, fp
 8008432:	4622      	mov	r2, r4
 8008434:	4629      	mov	r1, r5
 8008436:	4630      	mov	r0, r6
 8008438:	f7ff ff93 	bl	8008362 <__sfputs_r>
 800843c:	3001      	adds	r0, #1
 800843e:	f000 80aa 	beq.w	8008596 <_vfiprintf_r+0x20e>
 8008442:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008444:	445a      	add	r2, fp
 8008446:	9209      	str	r2, [sp, #36]	; 0x24
 8008448:	f89a 3000 	ldrb.w	r3, [sl]
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 80a2 	beq.w	8008596 <_vfiprintf_r+0x20e>
 8008452:	2300      	movs	r3, #0
 8008454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008458:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800845c:	f10a 0a01 	add.w	sl, sl, #1
 8008460:	9304      	str	r3, [sp, #16]
 8008462:	9307      	str	r3, [sp, #28]
 8008464:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008468:	931a      	str	r3, [sp, #104]	; 0x68
 800846a:	4654      	mov	r4, sl
 800846c:	2205      	movs	r2, #5
 800846e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008472:	4858      	ldr	r0, [pc, #352]	; (80085d4 <_vfiprintf_r+0x24c>)
 8008474:	f7f7 fed4 	bl	8000220 <memchr>
 8008478:	9a04      	ldr	r2, [sp, #16]
 800847a:	b9d8      	cbnz	r0, 80084b4 <_vfiprintf_r+0x12c>
 800847c:	06d1      	lsls	r1, r2, #27
 800847e:	bf44      	itt	mi
 8008480:	2320      	movmi	r3, #32
 8008482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008486:	0713      	lsls	r3, r2, #28
 8008488:	bf44      	itt	mi
 800848a:	232b      	movmi	r3, #43	; 0x2b
 800848c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008490:	f89a 3000 	ldrb.w	r3, [sl]
 8008494:	2b2a      	cmp	r3, #42	; 0x2a
 8008496:	d015      	beq.n	80084c4 <_vfiprintf_r+0x13c>
 8008498:	9a07      	ldr	r2, [sp, #28]
 800849a:	4654      	mov	r4, sl
 800849c:	2000      	movs	r0, #0
 800849e:	f04f 0c0a 	mov.w	ip, #10
 80084a2:	4621      	mov	r1, r4
 80084a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084a8:	3b30      	subs	r3, #48	; 0x30
 80084aa:	2b09      	cmp	r3, #9
 80084ac:	d94e      	bls.n	800854c <_vfiprintf_r+0x1c4>
 80084ae:	b1b0      	cbz	r0, 80084de <_vfiprintf_r+0x156>
 80084b0:	9207      	str	r2, [sp, #28]
 80084b2:	e014      	b.n	80084de <_vfiprintf_r+0x156>
 80084b4:	eba0 0308 	sub.w	r3, r0, r8
 80084b8:	fa09 f303 	lsl.w	r3, r9, r3
 80084bc:	4313      	orrs	r3, r2
 80084be:	9304      	str	r3, [sp, #16]
 80084c0:	46a2      	mov	sl, r4
 80084c2:	e7d2      	b.n	800846a <_vfiprintf_r+0xe2>
 80084c4:	9b03      	ldr	r3, [sp, #12]
 80084c6:	1d19      	adds	r1, r3, #4
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	9103      	str	r1, [sp, #12]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	bfbb      	ittet	lt
 80084d0:	425b      	neglt	r3, r3
 80084d2:	f042 0202 	orrlt.w	r2, r2, #2
 80084d6:	9307      	strge	r3, [sp, #28]
 80084d8:	9307      	strlt	r3, [sp, #28]
 80084da:	bfb8      	it	lt
 80084dc:	9204      	strlt	r2, [sp, #16]
 80084de:	7823      	ldrb	r3, [r4, #0]
 80084e0:	2b2e      	cmp	r3, #46	; 0x2e
 80084e2:	d10c      	bne.n	80084fe <_vfiprintf_r+0x176>
 80084e4:	7863      	ldrb	r3, [r4, #1]
 80084e6:	2b2a      	cmp	r3, #42	; 0x2a
 80084e8:	d135      	bne.n	8008556 <_vfiprintf_r+0x1ce>
 80084ea:	9b03      	ldr	r3, [sp, #12]
 80084ec:	1d1a      	adds	r2, r3, #4
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	9203      	str	r2, [sp, #12]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	bfb8      	it	lt
 80084f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80084fa:	3402      	adds	r4, #2
 80084fc:	9305      	str	r3, [sp, #20]
 80084fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80085e4 <_vfiprintf_r+0x25c>
 8008502:	7821      	ldrb	r1, [r4, #0]
 8008504:	2203      	movs	r2, #3
 8008506:	4650      	mov	r0, sl
 8008508:	f7f7 fe8a 	bl	8000220 <memchr>
 800850c:	b140      	cbz	r0, 8008520 <_vfiprintf_r+0x198>
 800850e:	2340      	movs	r3, #64	; 0x40
 8008510:	eba0 000a 	sub.w	r0, r0, sl
 8008514:	fa03 f000 	lsl.w	r0, r3, r0
 8008518:	9b04      	ldr	r3, [sp, #16]
 800851a:	4303      	orrs	r3, r0
 800851c:	3401      	adds	r4, #1
 800851e:	9304      	str	r3, [sp, #16]
 8008520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008524:	482c      	ldr	r0, [pc, #176]	; (80085d8 <_vfiprintf_r+0x250>)
 8008526:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800852a:	2206      	movs	r2, #6
 800852c:	f7f7 fe78 	bl	8000220 <memchr>
 8008530:	2800      	cmp	r0, #0
 8008532:	d03f      	beq.n	80085b4 <_vfiprintf_r+0x22c>
 8008534:	4b29      	ldr	r3, [pc, #164]	; (80085dc <_vfiprintf_r+0x254>)
 8008536:	bb1b      	cbnz	r3, 8008580 <_vfiprintf_r+0x1f8>
 8008538:	9b03      	ldr	r3, [sp, #12]
 800853a:	3307      	adds	r3, #7
 800853c:	f023 0307 	bic.w	r3, r3, #7
 8008540:	3308      	adds	r3, #8
 8008542:	9303      	str	r3, [sp, #12]
 8008544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008546:	443b      	add	r3, r7
 8008548:	9309      	str	r3, [sp, #36]	; 0x24
 800854a:	e767      	b.n	800841c <_vfiprintf_r+0x94>
 800854c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008550:	460c      	mov	r4, r1
 8008552:	2001      	movs	r0, #1
 8008554:	e7a5      	b.n	80084a2 <_vfiprintf_r+0x11a>
 8008556:	2300      	movs	r3, #0
 8008558:	3401      	adds	r4, #1
 800855a:	9305      	str	r3, [sp, #20]
 800855c:	4619      	mov	r1, r3
 800855e:	f04f 0c0a 	mov.w	ip, #10
 8008562:	4620      	mov	r0, r4
 8008564:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008568:	3a30      	subs	r2, #48	; 0x30
 800856a:	2a09      	cmp	r2, #9
 800856c:	d903      	bls.n	8008576 <_vfiprintf_r+0x1ee>
 800856e:	2b00      	cmp	r3, #0
 8008570:	d0c5      	beq.n	80084fe <_vfiprintf_r+0x176>
 8008572:	9105      	str	r1, [sp, #20]
 8008574:	e7c3      	b.n	80084fe <_vfiprintf_r+0x176>
 8008576:	fb0c 2101 	mla	r1, ip, r1, r2
 800857a:	4604      	mov	r4, r0
 800857c:	2301      	movs	r3, #1
 800857e:	e7f0      	b.n	8008562 <_vfiprintf_r+0x1da>
 8008580:	ab03      	add	r3, sp, #12
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	462a      	mov	r2, r5
 8008586:	4b16      	ldr	r3, [pc, #88]	; (80085e0 <_vfiprintf_r+0x258>)
 8008588:	a904      	add	r1, sp, #16
 800858a:	4630      	mov	r0, r6
 800858c:	f7fd fc8c 	bl	8005ea8 <_printf_float>
 8008590:	4607      	mov	r7, r0
 8008592:	1c78      	adds	r0, r7, #1
 8008594:	d1d6      	bne.n	8008544 <_vfiprintf_r+0x1bc>
 8008596:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008598:	07d9      	lsls	r1, r3, #31
 800859a:	d405      	bmi.n	80085a8 <_vfiprintf_r+0x220>
 800859c:	89ab      	ldrh	r3, [r5, #12]
 800859e:	059a      	lsls	r2, r3, #22
 80085a0:	d402      	bmi.n	80085a8 <_vfiprintf_r+0x220>
 80085a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085a4:	f7ff f9d0 	bl	8007948 <__retarget_lock_release_recursive>
 80085a8:	89ab      	ldrh	r3, [r5, #12]
 80085aa:	065b      	lsls	r3, r3, #25
 80085ac:	f53f af12 	bmi.w	80083d4 <_vfiprintf_r+0x4c>
 80085b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085b2:	e711      	b.n	80083d8 <_vfiprintf_r+0x50>
 80085b4:	ab03      	add	r3, sp, #12
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	462a      	mov	r2, r5
 80085ba:	4b09      	ldr	r3, [pc, #36]	; (80085e0 <_vfiprintf_r+0x258>)
 80085bc:	a904      	add	r1, sp, #16
 80085be:	4630      	mov	r0, r6
 80085c0:	f7fd ff16 	bl	80063f0 <_printf_i>
 80085c4:	e7e4      	b.n	8008590 <_vfiprintf_r+0x208>
 80085c6:	bf00      	nop
 80085c8:	0800a750 	.word	0x0800a750
 80085cc:	0800a770 	.word	0x0800a770
 80085d0:	0800a730 	.word	0x0800a730
 80085d4:	0800a8ec 	.word	0x0800a8ec
 80085d8:	0800a8f6 	.word	0x0800a8f6
 80085dc:	08005ea9 	.word	0x08005ea9
 80085e0:	08008363 	.word	0x08008363
 80085e4:	0800a8f2 	.word	0x0800a8f2

080085e8 <_sbrk_r>:
 80085e8:	b538      	push	{r3, r4, r5, lr}
 80085ea:	4d06      	ldr	r5, [pc, #24]	; (8008604 <_sbrk_r+0x1c>)
 80085ec:	2300      	movs	r3, #0
 80085ee:	4604      	mov	r4, r0
 80085f0:	4608      	mov	r0, r1
 80085f2:	602b      	str	r3, [r5, #0]
 80085f4:	f7fa fa82 	bl	8002afc <_sbrk>
 80085f8:	1c43      	adds	r3, r0, #1
 80085fa:	d102      	bne.n	8008602 <_sbrk_r+0x1a>
 80085fc:	682b      	ldr	r3, [r5, #0]
 80085fe:	b103      	cbz	r3, 8008602 <_sbrk_r+0x1a>
 8008600:	6023      	str	r3, [r4, #0]
 8008602:	bd38      	pop	{r3, r4, r5, pc}
 8008604:	2000034c 	.word	0x2000034c

08008608 <__sread>:
 8008608:	b510      	push	{r4, lr}
 800860a:	460c      	mov	r4, r1
 800860c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008610:	f000 f8e2 	bl	80087d8 <_read_r>
 8008614:	2800      	cmp	r0, #0
 8008616:	bfab      	itete	ge
 8008618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800861a:	89a3      	ldrhlt	r3, [r4, #12]
 800861c:	181b      	addge	r3, r3, r0
 800861e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008622:	bfac      	ite	ge
 8008624:	6563      	strge	r3, [r4, #84]	; 0x54
 8008626:	81a3      	strhlt	r3, [r4, #12]
 8008628:	bd10      	pop	{r4, pc}

0800862a <__swrite>:
 800862a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800862e:	461f      	mov	r7, r3
 8008630:	898b      	ldrh	r3, [r1, #12]
 8008632:	05db      	lsls	r3, r3, #23
 8008634:	4605      	mov	r5, r0
 8008636:	460c      	mov	r4, r1
 8008638:	4616      	mov	r6, r2
 800863a:	d505      	bpl.n	8008648 <__swrite+0x1e>
 800863c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008640:	2302      	movs	r3, #2
 8008642:	2200      	movs	r2, #0
 8008644:	f000 f898 	bl	8008778 <_lseek_r>
 8008648:	89a3      	ldrh	r3, [r4, #12]
 800864a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800864e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008652:	81a3      	strh	r3, [r4, #12]
 8008654:	4632      	mov	r2, r6
 8008656:	463b      	mov	r3, r7
 8008658:	4628      	mov	r0, r5
 800865a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800865e:	f000 b817 	b.w	8008690 <_write_r>

08008662 <__sseek>:
 8008662:	b510      	push	{r4, lr}
 8008664:	460c      	mov	r4, r1
 8008666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800866a:	f000 f885 	bl	8008778 <_lseek_r>
 800866e:	1c43      	adds	r3, r0, #1
 8008670:	89a3      	ldrh	r3, [r4, #12]
 8008672:	bf15      	itete	ne
 8008674:	6560      	strne	r0, [r4, #84]	; 0x54
 8008676:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800867a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800867e:	81a3      	strheq	r3, [r4, #12]
 8008680:	bf18      	it	ne
 8008682:	81a3      	strhne	r3, [r4, #12]
 8008684:	bd10      	pop	{r4, pc}

08008686 <__sclose>:
 8008686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800868a:	f000 b831 	b.w	80086f0 <_close_r>
	...

08008690 <_write_r>:
 8008690:	b538      	push	{r3, r4, r5, lr}
 8008692:	4d07      	ldr	r5, [pc, #28]	; (80086b0 <_write_r+0x20>)
 8008694:	4604      	mov	r4, r0
 8008696:	4608      	mov	r0, r1
 8008698:	4611      	mov	r1, r2
 800869a:	2200      	movs	r2, #0
 800869c:	602a      	str	r2, [r5, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	f7fa f9db 	bl	8002a5a <_write>
 80086a4:	1c43      	adds	r3, r0, #1
 80086a6:	d102      	bne.n	80086ae <_write_r+0x1e>
 80086a8:	682b      	ldr	r3, [r5, #0]
 80086aa:	b103      	cbz	r3, 80086ae <_write_r+0x1e>
 80086ac:	6023      	str	r3, [r4, #0]
 80086ae:	bd38      	pop	{r3, r4, r5, pc}
 80086b0:	2000034c 	.word	0x2000034c

080086b4 <__assert_func>:
 80086b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086b6:	4614      	mov	r4, r2
 80086b8:	461a      	mov	r2, r3
 80086ba:	4b09      	ldr	r3, [pc, #36]	; (80086e0 <__assert_func+0x2c>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4605      	mov	r5, r0
 80086c0:	68d8      	ldr	r0, [r3, #12]
 80086c2:	b14c      	cbz	r4, 80086d8 <__assert_func+0x24>
 80086c4:	4b07      	ldr	r3, [pc, #28]	; (80086e4 <__assert_func+0x30>)
 80086c6:	9100      	str	r1, [sp, #0]
 80086c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086cc:	4906      	ldr	r1, [pc, #24]	; (80086e8 <__assert_func+0x34>)
 80086ce:	462b      	mov	r3, r5
 80086d0:	f000 f81e 	bl	8008710 <fiprintf>
 80086d4:	f000 f89f 	bl	8008816 <abort>
 80086d8:	4b04      	ldr	r3, [pc, #16]	; (80086ec <__assert_func+0x38>)
 80086da:	461c      	mov	r4, r3
 80086dc:	e7f3      	b.n	80086c6 <__assert_func+0x12>
 80086de:	bf00      	nop
 80086e0:	20000018 	.word	0x20000018
 80086e4:	0800a8fd 	.word	0x0800a8fd
 80086e8:	0800a90a 	.word	0x0800a90a
 80086ec:	0800a938 	.word	0x0800a938

080086f0 <_close_r>:
 80086f0:	b538      	push	{r3, r4, r5, lr}
 80086f2:	4d06      	ldr	r5, [pc, #24]	; (800870c <_close_r+0x1c>)
 80086f4:	2300      	movs	r3, #0
 80086f6:	4604      	mov	r4, r0
 80086f8:	4608      	mov	r0, r1
 80086fa:	602b      	str	r3, [r5, #0]
 80086fc:	f7fa f9c9 	bl	8002a92 <_close>
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	d102      	bne.n	800870a <_close_r+0x1a>
 8008704:	682b      	ldr	r3, [r5, #0]
 8008706:	b103      	cbz	r3, 800870a <_close_r+0x1a>
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	bd38      	pop	{r3, r4, r5, pc}
 800870c:	2000034c 	.word	0x2000034c

08008710 <fiprintf>:
 8008710:	b40e      	push	{r1, r2, r3}
 8008712:	b503      	push	{r0, r1, lr}
 8008714:	4601      	mov	r1, r0
 8008716:	ab03      	add	r3, sp, #12
 8008718:	4805      	ldr	r0, [pc, #20]	; (8008730 <fiprintf+0x20>)
 800871a:	f853 2b04 	ldr.w	r2, [r3], #4
 800871e:	6800      	ldr	r0, [r0, #0]
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	f7ff fe31 	bl	8008388 <_vfiprintf_r>
 8008726:	b002      	add	sp, #8
 8008728:	f85d eb04 	ldr.w	lr, [sp], #4
 800872c:	b003      	add	sp, #12
 800872e:	4770      	bx	lr
 8008730:	20000018 	.word	0x20000018

08008734 <_fstat_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	4d07      	ldr	r5, [pc, #28]	; (8008754 <_fstat_r+0x20>)
 8008738:	2300      	movs	r3, #0
 800873a:	4604      	mov	r4, r0
 800873c:	4608      	mov	r0, r1
 800873e:	4611      	mov	r1, r2
 8008740:	602b      	str	r3, [r5, #0]
 8008742:	f7fa f9b2 	bl	8002aaa <_fstat>
 8008746:	1c43      	adds	r3, r0, #1
 8008748:	d102      	bne.n	8008750 <_fstat_r+0x1c>
 800874a:	682b      	ldr	r3, [r5, #0]
 800874c:	b103      	cbz	r3, 8008750 <_fstat_r+0x1c>
 800874e:	6023      	str	r3, [r4, #0]
 8008750:	bd38      	pop	{r3, r4, r5, pc}
 8008752:	bf00      	nop
 8008754:	2000034c 	.word	0x2000034c

08008758 <_isatty_r>:
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	4d06      	ldr	r5, [pc, #24]	; (8008774 <_isatty_r+0x1c>)
 800875c:	2300      	movs	r3, #0
 800875e:	4604      	mov	r4, r0
 8008760:	4608      	mov	r0, r1
 8008762:	602b      	str	r3, [r5, #0]
 8008764:	f7fa f9b1 	bl	8002aca <_isatty>
 8008768:	1c43      	adds	r3, r0, #1
 800876a:	d102      	bne.n	8008772 <_isatty_r+0x1a>
 800876c:	682b      	ldr	r3, [r5, #0]
 800876e:	b103      	cbz	r3, 8008772 <_isatty_r+0x1a>
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	bd38      	pop	{r3, r4, r5, pc}
 8008774:	2000034c 	.word	0x2000034c

08008778 <_lseek_r>:
 8008778:	b538      	push	{r3, r4, r5, lr}
 800877a:	4d07      	ldr	r5, [pc, #28]	; (8008798 <_lseek_r+0x20>)
 800877c:	4604      	mov	r4, r0
 800877e:	4608      	mov	r0, r1
 8008780:	4611      	mov	r1, r2
 8008782:	2200      	movs	r2, #0
 8008784:	602a      	str	r2, [r5, #0]
 8008786:	461a      	mov	r2, r3
 8008788:	f7fa f9aa 	bl	8002ae0 <_lseek>
 800878c:	1c43      	adds	r3, r0, #1
 800878e:	d102      	bne.n	8008796 <_lseek_r+0x1e>
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	b103      	cbz	r3, 8008796 <_lseek_r+0x1e>
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	bd38      	pop	{r3, r4, r5, pc}
 8008798:	2000034c 	.word	0x2000034c

0800879c <__ascii_mbtowc>:
 800879c:	b082      	sub	sp, #8
 800879e:	b901      	cbnz	r1, 80087a2 <__ascii_mbtowc+0x6>
 80087a0:	a901      	add	r1, sp, #4
 80087a2:	b142      	cbz	r2, 80087b6 <__ascii_mbtowc+0x1a>
 80087a4:	b14b      	cbz	r3, 80087ba <__ascii_mbtowc+0x1e>
 80087a6:	7813      	ldrb	r3, [r2, #0]
 80087a8:	600b      	str	r3, [r1, #0]
 80087aa:	7812      	ldrb	r2, [r2, #0]
 80087ac:	1e10      	subs	r0, r2, #0
 80087ae:	bf18      	it	ne
 80087b0:	2001      	movne	r0, #1
 80087b2:	b002      	add	sp, #8
 80087b4:	4770      	bx	lr
 80087b6:	4610      	mov	r0, r2
 80087b8:	e7fb      	b.n	80087b2 <__ascii_mbtowc+0x16>
 80087ba:	f06f 0001 	mvn.w	r0, #1
 80087be:	e7f8      	b.n	80087b2 <__ascii_mbtowc+0x16>

080087c0 <__malloc_lock>:
 80087c0:	4801      	ldr	r0, [pc, #4]	; (80087c8 <__malloc_lock+0x8>)
 80087c2:	f7ff b8c0 	b.w	8007946 <__retarget_lock_acquire_recursive>
 80087c6:	bf00      	nop
 80087c8:	20000340 	.word	0x20000340

080087cc <__malloc_unlock>:
 80087cc:	4801      	ldr	r0, [pc, #4]	; (80087d4 <__malloc_unlock+0x8>)
 80087ce:	f7ff b8bb 	b.w	8007948 <__retarget_lock_release_recursive>
 80087d2:	bf00      	nop
 80087d4:	20000340 	.word	0x20000340

080087d8 <_read_r>:
 80087d8:	b538      	push	{r3, r4, r5, lr}
 80087da:	4d07      	ldr	r5, [pc, #28]	; (80087f8 <_read_r+0x20>)
 80087dc:	4604      	mov	r4, r0
 80087de:	4608      	mov	r0, r1
 80087e0:	4611      	mov	r1, r2
 80087e2:	2200      	movs	r2, #0
 80087e4:	602a      	str	r2, [r5, #0]
 80087e6:	461a      	mov	r2, r3
 80087e8:	f7fa f91a 	bl	8002a20 <_read>
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	d102      	bne.n	80087f6 <_read_r+0x1e>
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	b103      	cbz	r3, 80087f6 <_read_r+0x1e>
 80087f4:	6023      	str	r3, [r4, #0]
 80087f6:	bd38      	pop	{r3, r4, r5, pc}
 80087f8:	2000034c 	.word	0x2000034c

080087fc <__ascii_wctomb>:
 80087fc:	b149      	cbz	r1, 8008812 <__ascii_wctomb+0x16>
 80087fe:	2aff      	cmp	r2, #255	; 0xff
 8008800:	bf85      	ittet	hi
 8008802:	238a      	movhi	r3, #138	; 0x8a
 8008804:	6003      	strhi	r3, [r0, #0]
 8008806:	700a      	strbls	r2, [r1, #0]
 8008808:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800880c:	bf98      	it	ls
 800880e:	2001      	movls	r0, #1
 8008810:	4770      	bx	lr
 8008812:	4608      	mov	r0, r1
 8008814:	4770      	bx	lr

08008816 <abort>:
 8008816:	b508      	push	{r3, lr}
 8008818:	2006      	movs	r0, #6
 800881a:	f000 f82b 	bl	8008874 <raise>
 800881e:	2001      	movs	r0, #1
 8008820:	f7fa f8f4 	bl	8002a0c <_exit>

08008824 <_raise_r>:
 8008824:	291f      	cmp	r1, #31
 8008826:	b538      	push	{r3, r4, r5, lr}
 8008828:	4604      	mov	r4, r0
 800882a:	460d      	mov	r5, r1
 800882c:	d904      	bls.n	8008838 <_raise_r+0x14>
 800882e:	2316      	movs	r3, #22
 8008830:	6003      	str	r3, [r0, #0]
 8008832:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008836:	bd38      	pop	{r3, r4, r5, pc}
 8008838:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800883a:	b112      	cbz	r2, 8008842 <_raise_r+0x1e>
 800883c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008840:	b94b      	cbnz	r3, 8008856 <_raise_r+0x32>
 8008842:	4620      	mov	r0, r4
 8008844:	f000 f830 	bl	80088a8 <_getpid_r>
 8008848:	462a      	mov	r2, r5
 800884a:	4601      	mov	r1, r0
 800884c:	4620      	mov	r0, r4
 800884e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008852:	f000 b817 	b.w	8008884 <_kill_r>
 8008856:	2b01      	cmp	r3, #1
 8008858:	d00a      	beq.n	8008870 <_raise_r+0x4c>
 800885a:	1c59      	adds	r1, r3, #1
 800885c:	d103      	bne.n	8008866 <_raise_r+0x42>
 800885e:	2316      	movs	r3, #22
 8008860:	6003      	str	r3, [r0, #0]
 8008862:	2001      	movs	r0, #1
 8008864:	e7e7      	b.n	8008836 <_raise_r+0x12>
 8008866:	2400      	movs	r4, #0
 8008868:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800886c:	4628      	mov	r0, r5
 800886e:	4798      	blx	r3
 8008870:	2000      	movs	r0, #0
 8008872:	e7e0      	b.n	8008836 <_raise_r+0x12>

08008874 <raise>:
 8008874:	4b02      	ldr	r3, [pc, #8]	; (8008880 <raise+0xc>)
 8008876:	4601      	mov	r1, r0
 8008878:	6818      	ldr	r0, [r3, #0]
 800887a:	f7ff bfd3 	b.w	8008824 <_raise_r>
 800887e:	bf00      	nop
 8008880:	20000018 	.word	0x20000018

08008884 <_kill_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	4d07      	ldr	r5, [pc, #28]	; (80088a4 <_kill_r+0x20>)
 8008888:	2300      	movs	r3, #0
 800888a:	4604      	mov	r4, r0
 800888c:	4608      	mov	r0, r1
 800888e:	4611      	mov	r1, r2
 8008890:	602b      	str	r3, [r5, #0]
 8008892:	f7fa f8ab 	bl	80029ec <_kill>
 8008896:	1c43      	adds	r3, r0, #1
 8008898:	d102      	bne.n	80088a0 <_kill_r+0x1c>
 800889a:	682b      	ldr	r3, [r5, #0]
 800889c:	b103      	cbz	r3, 80088a0 <_kill_r+0x1c>
 800889e:	6023      	str	r3, [r4, #0]
 80088a0:	bd38      	pop	{r3, r4, r5, pc}
 80088a2:	bf00      	nop
 80088a4:	2000034c 	.word	0x2000034c

080088a8 <_getpid_r>:
 80088a8:	f7fa b898 	b.w	80029dc <_getpid>
 80088ac:	0000      	movs	r0, r0
	...

080088b0 <cos>:
 80088b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088b2:	ec53 2b10 	vmov	r2, r3, d0
 80088b6:	4826      	ldr	r0, [pc, #152]	; (8008950 <cos+0xa0>)
 80088b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80088bc:	4281      	cmp	r1, r0
 80088be:	dc06      	bgt.n	80088ce <cos+0x1e>
 80088c0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008948 <cos+0x98>
 80088c4:	b005      	add	sp, #20
 80088c6:	f85d eb04 	ldr.w	lr, [sp], #4
 80088ca:	f000 bf09 	b.w	80096e0 <__kernel_cos>
 80088ce:	4821      	ldr	r0, [pc, #132]	; (8008954 <cos+0xa4>)
 80088d0:	4281      	cmp	r1, r0
 80088d2:	dd09      	ble.n	80088e8 <cos+0x38>
 80088d4:	ee10 0a10 	vmov	r0, s0
 80088d8:	4619      	mov	r1, r3
 80088da:	f7f7 fcf5 	bl	80002c8 <__aeabi_dsub>
 80088de:	ec41 0b10 	vmov	d0, r0, r1
 80088e2:	b005      	add	sp, #20
 80088e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80088e8:	4668      	mov	r0, sp
 80088ea:	f000 fc39 	bl	8009160 <__ieee754_rem_pio2>
 80088ee:	f000 0003 	and.w	r0, r0, #3
 80088f2:	2801      	cmp	r0, #1
 80088f4:	d00b      	beq.n	800890e <cos+0x5e>
 80088f6:	2802      	cmp	r0, #2
 80088f8:	d016      	beq.n	8008928 <cos+0x78>
 80088fa:	b9e0      	cbnz	r0, 8008936 <cos+0x86>
 80088fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008900:	ed9d 0b00 	vldr	d0, [sp]
 8008904:	f000 feec 	bl	80096e0 <__kernel_cos>
 8008908:	ec51 0b10 	vmov	r0, r1, d0
 800890c:	e7e7      	b.n	80088de <cos+0x2e>
 800890e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008912:	ed9d 0b00 	vldr	d0, [sp]
 8008916:	f001 fafb 	bl	8009f10 <__kernel_sin>
 800891a:	ec53 2b10 	vmov	r2, r3, d0
 800891e:	ee10 0a10 	vmov	r0, s0
 8008922:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008926:	e7da      	b.n	80088de <cos+0x2e>
 8008928:	ed9d 1b02 	vldr	d1, [sp, #8]
 800892c:	ed9d 0b00 	vldr	d0, [sp]
 8008930:	f000 fed6 	bl	80096e0 <__kernel_cos>
 8008934:	e7f1      	b.n	800891a <cos+0x6a>
 8008936:	ed9d 1b02 	vldr	d1, [sp, #8]
 800893a:	ed9d 0b00 	vldr	d0, [sp]
 800893e:	2001      	movs	r0, #1
 8008940:	f001 fae6 	bl	8009f10 <__kernel_sin>
 8008944:	e7e0      	b.n	8008908 <cos+0x58>
 8008946:	bf00      	nop
	...
 8008950:	3fe921fb 	.word	0x3fe921fb
 8008954:	7fefffff 	.word	0x7fefffff

08008958 <round>:
 8008958:	ec51 0b10 	vmov	r0, r1, d0
 800895c:	b570      	push	{r4, r5, r6, lr}
 800895e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8008962:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8008966:	2c13      	cmp	r4, #19
 8008968:	ee10 2a10 	vmov	r2, s0
 800896c:	460b      	mov	r3, r1
 800896e:	dc19      	bgt.n	80089a4 <round+0x4c>
 8008970:	2c00      	cmp	r4, #0
 8008972:	da09      	bge.n	8008988 <round+0x30>
 8008974:	3401      	adds	r4, #1
 8008976:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800897a:	d103      	bne.n	8008984 <round+0x2c>
 800897c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008980:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008984:	2200      	movs	r2, #0
 8008986:	e028      	b.n	80089da <round+0x82>
 8008988:	4d15      	ldr	r5, [pc, #84]	; (80089e0 <round+0x88>)
 800898a:	4125      	asrs	r5, r4
 800898c:	ea01 0605 	and.w	r6, r1, r5
 8008990:	4332      	orrs	r2, r6
 8008992:	d00e      	beq.n	80089b2 <round+0x5a>
 8008994:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008998:	fa42 f404 	asr.w	r4, r2, r4
 800899c:	4423      	add	r3, r4
 800899e:	ea23 0305 	bic.w	r3, r3, r5
 80089a2:	e7ef      	b.n	8008984 <round+0x2c>
 80089a4:	2c33      	cmp	r4, #51	; 0x33
 80089a6:	dd07      	ble.n	80089b8 <round+0x60>
 80089a8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80089ac:	d101      	bne.n	80089b2 <round+0x5a>
 80089ae:	f7f7 fc8d 	bl	80002cc <__adddf3>
 80089b2:	ec41 0b10 	vmov	d0, r0, r1
 80089b6:	bd70      	pop	{r4, r5, r6, pc}
 80089b8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80089bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80089c0:	40f5      	lsrs	r5, r6
 80089c2:	4228      	tst	r0, r5
 80089c4:	d0f5      	beq.n	80089b2 <round+0x5a>
 80089c6:	2101      	movs	r1, #1
 80089c8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80089cc:	fa01 f404 	lsl.w	r4, r1, r4
 80089d0:	1912      	adds	r2, r2, r4
 80089d2:	bf28      	it	cs
 80089d4:	185b      	addcs	r3, r3, r1
 80089d6:	ea22 0205 	bic.w	r2, r2, r5
 80089da:	4619      	mov	r1, r3
 80089dc:	4610      	mov	r0, r2
 80089de:	e7e8      	b.n	80089b2 <round+0x5a>
 80089e0:	000fffff 	.word	0x000fffff
 80089e4:	00000000 	.word	0x00000000

080089e8 <sin>:
 80089e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089ea:	ec53 2b10 	vmov	r2, r3, d0
 80089ee:	4828      	ldr	r0, [pc, #160]	; (8008a90 <sin+0xa8>)
 80089f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80089f4:	4281      	cmp	r1, r0
 80089f6:	dc07      	bgt.n	8008a08 <sin+0x20>
 80089f8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8008a88 <sin+0xa0>
 80089fc:	2000      	movs	r0, #0
 80089fe:	b005      	add	sp, #20
 8008a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a04:	f001 ba84 	b.w	8009f10 <__kernel_sin>
 8008a08:	4822      	ldr	r0, [pc, #136]	; (8008a94 <sin+0xac>)
 8008a0a:	4281      	cmp	r1, r0
 8008a0c:	dd09      	ble.n	8008a22 <sin+0x3a>
 8008a0e:	ee10 0a10 	vmov	r0, s0
 8008a12:	4619      	mov	r1, r3
 8008a14:	f7f7 fc58 	bl	80002c8 <__aeabi_dsub>
 8008a18:	ec41 0b10 	vmov	d0, r0, r1
 8008a1c:	b005      	add	sp, #20
 8008a1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a22:	4668      	mov	r0, sp
 8008a24:	f000 fb9c 	bl	8009160 <__ieee754_rem_pio2>
 8008a28:	f000 0003 	and.w	r0, r0, #3
 8008a2c:	2801      	cmp	r0, #1
 8008a2e:	d00c      	beq.n	8008a4a <sin+0x62>
 8008a30:	2802      	cmp	r0, #2
 8008a32:	d011      	beq.n	8008a58 <sin+0x70>
 8008a34:	b9f0      	cbnz	r0, 8008a74 <sin+0x8c>
 8008a36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008a3a:	ed9d 0b00 	vldr	d0, [sp]
 8008a3e:	2001      	movs	r0, #1
 8008a40:	f001 fa66 	bl	8009f10 <__kernel_sin>
 8008a44:	ec51 0b10 	vmov	r0, r1, d0
 8008a48:	e7e6      	b.n	8008a18 <sin+0x30>
 8008a4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008a4e:	ed9d 0b00 	vldr	d0, [sp]
 8008a52:	f000 fe45 	bl	80096e0 <__kernel_cos>
 8008a56:	e7f5      	b.n	8008a44 <sin+0x5c>
 8008a58:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008a5c:	ed9d 0b00 	vldr	d0, [sp]
 8008a60:	2001      	movs	r0, #1
 8008a62:	f001 fa55 	bl	8009f10 <__kernel_sin>
 8008a66:	ec53 2b10 	vmov	r2, r3, d0
 8008a6a:	ee10 0a10 	vmov	r0, s0
 8008a6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008a72:	e7d1      	b.n	8008a18 <sin+0x30>
 8008a74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008a78:	ed9d 0b00 	vldr	d0, [sp]
 8008a7c:	f000 fe30 	bl	80096e0 <__kernel_cos>
 8008a80:	e7f1      	b.n	8008a66 <sin+0x7e>
 8008a82:	bf00      	nop
 8008a84:	f3af 8000 	nop.w
	...
 8008a90:	3fe921fb 	.word	0x3fe921fb
 8008a94:	7fefffff 	.word	0x7fefffff

08008a98 <acos>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	ed2d 8b02 	vpush	{d8}
 8008a9e:	ec55 4b10 	vmov	r4, r5, d0
 8008aa2:	f000 f831 	bl	8008b08 <__ieee754_acos>
 8008aa6:	4622      	mov	r2, r4
 8008aa8:	462b      	mov	r3, r5
 8008aaa:	4620      	mov	r0, r4
 8008aac:	4629      	mov	r1, r5
 8008aae:	eeb0 8a40 	vmov.f32	s16, s0
 8008ab2:	eef0 8a60 	vmov.f32	s17, s1
 8008ab6:	f7f8 f859 	bl	8000b6c <__aeabi_dcmpun>
 8008aba:	b9a8      	cbnz	r0, 8008ae8 <acos+0x50>
 8008abc:	ec45 4b10 	vmov	d0, r4, r5
 8008ac0:	f001 fc86 	bl	800a3d0 <fabs>
 8008ac4:	4b0c      	ldr	r3, [pc, #48]	; (8008af8 <acos+0x60>)
 8008ac6:	ec51 0b10 	vmov	r0, r1, d0
 8008aca:	2200      	movs	r2, #0
 8008acc:	f7f8 f844 	bl	8000b58 <__aeabi_dcmpgt>
 8008ad0:	b150      	cbz	r0, 8008ae8 <acos+0x50>
 8008ad2:	f7fd f917 	bl	8005d04 <__errno>
 8008ad6:	ecbd 8b02 	vpop	{d8}
 8008ada:	2321      	movs	r3, #33	; 0x21
 8008adc:	6003      	str	r3, [r0, #0]
 8008ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ae2:	4806      	ldr	r0, [pc, #24]	; (8008afc <acos+0x64>)
 8008ae4:	f001 bd00 	b.w	800a4e8 <nan>
 8008ae8:	eeb0 0a48 	vmov.f32	s0, s16
 8008aec:	eef0 0a68 	vmov.f32	s1, s17
 8008af0:	ecbd 8b02 	vpop	{d8}
 8008af4:	bd38      	pop	{r3, r4, r5, pc}
 8008af6:	bf00      	nop
 8008af8:	3ff00000 	.word	0x3ff00000
 8008afc:	0800a938 	.word	0x0800a938

08008b00 <atan2>:
 8008b00:	f000 ba62 	b.w	8008fc8 <__ieee754_atan2>
 8008b04:	0000      	movs	r0, r0
	...

08008b08 <__ieee754_acos>:
 8008b08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0c:	ec55 4b10 	vmov	r4, r5, d0
 8008b10:	49b7      	ldr	r1, [pc, #732]	; (8008df0 <__ieee754_acos+0x2e8>)
 8008b12:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008b16:	428b      	cmp	r3, r1
 8008b18:	dd1b      	ble.n	8008b52 <__ieee754_acos+0x4a>
 8008b1a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8008b1e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008b22:	4323      	orrs	r3, r4
 8008b24:	d106      	bne.n	8008b34 <__ieee754_acos+0x2c>
 8008b26:	2d00      	cmp	r5, #0
 8008b28:	f300 8211 	bgt.w	8008f4e <__ieee754_acos+0x446>
 8008b2c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8008d88 <__ieee754_acos+0x280>
 8008b30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b34:	ee10 2a10 	vmov	r2, s0
 8008b38:	462b      	mov	r3, r5
 8008b3a:	ee10 0a10 	vmov	r0, s0
 8008b3e:	4629      	mov	r1, r5
 8008b40:	f7f7 fbc2 	bl	80002c8 <__aeabi_dsub>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	f7f7 fea0 	bl	800088c <__aeabi_ddiv>
 8008b4c:	ec41 0b10 	vmov	d0, r0, r1
 8008b50:	e7ee      	b.n	8008b30 <__ieee754_acos+0x28>
 8008b52:	49a8      	ldr	r1, [pc, #672]	; (8008df4 <__ieee754_acos+0x2ec>)
 8008b54:	428b      	cmp	r3, r1
 8008b56:	f300 8087 	bgt.w	8008c68 <__ieee754_acos+0x160>
 8008b5a:	4aa7      	ldr	r2, [pc, #668]	; (8008df8 <__ieee754_acos+0x2f0>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	f340 81f9 	ble.w	8008f54 <__ieee754_acos+0x44c>
 8008b62:	ee10 2a10 	vmov	r2, s0
 8008b66:	ee10 0a10 	vmov	r0, s0
 8008b6a:	462b      	mov	r3, r5
 8008b6c:	4629      	mov	r1, r5
 8008b6e:	f7f7 fd63 	bl	8000638 <__aeabi_dmul>
 8008b72:	a387      	add	r3, pc, #540	; (adr r3, 8008d90 <__ieee754_acos+0x288>)
 8008b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b78:	4606      	mov	r6, r0
 8008b7a:	460f      	mov	r7, r1
 8008b7c:	f7f7 fd5c 	bl	8000638 <__aeabi_dmul>
 8008b80:	a385      	add	r3, pc, #532	; (adr r3, 8008d98 <__ieee754_acos+0x290>)
 8008b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b86:	f7f7 fba1 	bl	80002cc <__adddf3>
 8008b8a:	4632      	mov	r2, r6
 8008b8c:	463b      	mov	r3, r7
 8008b8e:	f7f7 fd53 	bl	8000638 <__aeabi_dmul>
 8008b92:	a383      	add	r3, pc, #524	; (adr r3, 8008da0 <__ieee754_acos+0x298>)
 8008b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b98:	f7f7 fb96 	bl	80002c8 <__aeabi_dsub>
 8008b9c:	4632      	mov	r2, r6
 8008b9e:	463b      	mov	r3, r7
 8008ba0:	f7f7 fd4a 	bl	8000638 <__aeabi_dmul>
 8008ba4:	a380      	add	r3, pc, #512	; (adr r3, 8008da8 <__ieee754_acos+0x2a0>)
 8008ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008baa:	f7f7 fb8f 	bl	80002cc <__adddf3>
 8008bae:	4632      	mov	r2, r6
 8008bb0:	463b      	mov	r3, r7
 8008bb2:	f7f7 fd41 	bl	8000638 <__aeabi_dmul>
 8008bb6:	a37e      	add	r3, pc, #504	; (adr r3, 8008db0 <__ieee754_acos+0x2a8>)
 8008bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbc:	f7f7 fb84 	bl	80002c8 <__aeabi_dsub>
 8008bc0:	4632      	mov	r2, r6
 8008bc2:	463b      	mov	r3, r7
 8008bc4:	f7f7 fd38 	bl	8000638 <__aeabi_dmul>
 8008bc8:	a37b      	add	r3, pc, #492	; (adr r3, 8008db8 <__ieee754_acos+0x2b0>)
 8008bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bce:	f7f7 fb7d 	bl	80002cc <__adddf3>
 8008bd2:	4632      	mov	r2, r6
 8008bd4:	463b      	mov	r3, r7
 8008bd6:	f7f7 fd2f 	bl	8000638 <__aeabi_dmul>
 8008bda:	a379      	add	r3, pc, #484	; (adr r3, 8008dc0 <__ieee754_acos+0x2b8>)
 8008bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be0:	4680      	mov	r8, r0
 8008be2:	4689      	mov	r9, r1
 8008be4:	4630      	mov	r0, r6
 8008be6:	4639      	mov	r1, r7
 8008be8:	f7f7 fd26 	bl	8000638 <__aeabi_dmul>
 8008bec:	a376      	add	r3, pc, #472	; (adr r3, 8008dc8 <__ieee754_acos+0x2c0>)
 8008bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf2:	f7f7 fb69 	bl	80002c8 <__aeabi_dsub>
 8008bf6:	4632      	mov	r2, r6
 8008bf8:	463b      	mov	r3, r7
 8008bfa:	f7f7 fd1d 	bl	8000638 <__aeabi_dmul>
 8008bfe:	a374      	add	r3, pc, #464	; (adr r3, 8008dd0 <__ieee754_acos+0x2c8>)
 8008c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c04:	f7f7 fb62 	bl	80002cc <__adddf3>
 8008c08:	4632      	mov	r2, r6
 8008c0a:	463b      	mov	r3, r7
 8008c0c:	f7f7 fd14 	bl	8000638 <__aeabi_dmul>
 8008c10:	a371      	add	r3, pc, #452	; (adr r3, 8008dd8 <__ieee754_acos+0x2d0>)
 8008c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c16:	f7f7 fb57 	bl	80002c8 <__aeabi_dsub>
 8008c1a:	4632      	mov	r2, r6
 8008c1c:	463b      	mov	r3, r7
 8008c1e:	f7f7 fd0b 	bl	8000638 <__aeabi_dmul>
 8008c22:	4b76      	ldr	r3, [pc, #472]	; (8008dfc <__ieee754_acos+0x2f4>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	f7f7 fb51 	bl	80002cc <__adddf3>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4640      	mov	r0, r8
 8008c30:	4649      	mov	r1, r9
 8008c32:	f7f7 fe2b 	bl	800088c <__aeabi_ddiv>
 8008c36:	4622      	mov	r2, r4
 8008c38:	462b      	mov	r3, r5
 8008c3a:	f7f7 fcfd 	bl	8000638 <__aeabi_dmul>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	460b      	mov	r3, r1
 8008c42:	a167      	add	r1, pc, #412	; (adr r1, 8008de0 <__ieee754_acos+0x2d8>)
 8008c44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c48:	f7f7 fb3e 	bl	80002c8 <__aeabi_dsub>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	460b      	mov	r3, r1
 8008c50:	4620      	mov	r0, r4
 8008c52:	4629      	mov	r1, r5
 8008c54:	f7f7 fb38 	bl	80002c8 <__aeabi_dsub>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	a162      	add	r1, pc, #392	; (adr r1, 8008de8 <__ieee754_acos+0x2e0>)
 8008c5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c62:	f7f7 fb31 	bl	80002c8 <__aeabi_dsub>
 8008c66:	e771      	b.n	8008b4c <__ieee754_acos+0x44>
 8008c68:	2d00      	cmp	r5, #0
 8008c6a:	f280 80cb 	bge.w	8008e04 <__ieee754_acos+0x2fc>
 8008c6e:	ee10 0a10 	vmov	r0, s0
 8008c72:	4b62      	ldr	r3, [pc, #392]	; (8008dfc <__ieee754_acos+0x2f4>)
 8008c74:	2200      	movs	r2, #0
 8008c76:	4629      	mov	r1, r5
 8008c78:	f7f7 fb28 	bl	80002cc <__adddf3>
 8008c7c:	4b60      	ldr	r3, [pc, #384]	; (8008e00 <__ieee754_acos+0x2f8>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f7f7 fcda 	bl	8000638 <__aeabi_dmul>
 8008c84:	a342      	add	r3, pc, #264	; (adr r3, 8008d90 <__ieee754_acos+0x288>)
 8008c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	460d      	mov	r5, r1
 8008c8e:	f7f7 fcd3 	bl	8000638 <__aeabi_dmul>
 8008c92:	a341      	add	r3, pc, #260	; (adr r3, 8008d98 <__ieee754_acos+0x290>)
 8008c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c98:	f7f7 fb18 	bl	80002cc <__adddf3>
 8008c9c:	4622      	mov	r2, r4
 8008c9e:	462b      	mov	r3, r5
 8008ca0:	f7f7 fcca 	bl	8000638 <__aeabi_dmul>
 8008ca4:	a33e      	add	r3, pc, #248	; (adr r3, 8008da0 <__ieee754_acos+0x298>)
 8008ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008caa:	f7f7 fb0d 	bl	80002c8 <__aeabi_dsub>
 8008cae:	4622      	mov	r2, r4
 8008cb0:	462b      	mov	r3, r5
 8008cb2:	f7f7 fcc1 	bl	8000638 <__aeabi_dmul>
 8008cb6:	a33c      	add	r3, pc, #240	; (adr r3, 8008da8 <__ieee754_acos+0x2a0>)
 8008cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbc:	f7f7 fb06 	bl	80002cc <__adddf3>
 8008cc0:	4622      	mov	r2, r4
 8008cc2:	462b      	mov	r3, r5
 8008cc4:	f7f7 fcb8 	bl	8000638 <__aeabi_dmul>
 8008cc8:	a339      	add	r3, pc, #228	; (adr r3, 8008db0 <__ieee754_acos+0x2a8>)
 8008cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cce:	f7f7 fafb 	bl	80002c8 <__aeabi_dsub>
 8008cd2:	4622      	mov	r2, r4
 8008cd4:	462b      	mov	r3, r5
 8008cd6:	f7f7 fcaf 	bl	8000638 <__aeabi_dmul>
 8008cda:	a337      	add	r3, pc, #220	; (adr r3, 8008db8 <__ieee754_acos+0x2b0>)
 8008cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce0:	f7f7 faf4 	bl	80002cc <__adddf3>
 8008ce4:	4622      	mov	r2, r4
 8008ce6:	462b      	mov	r3, r5
 8008ce8:	f7f7 fca6 	bl	8000638 <__aeabi_dmul>
 8008cec:	ec45 4b10 	vmov	d0, r4, r5
 8008cf0:	4680      	mov	r8, r0
 8008cf2:	4689      	mov	r9, r1
 8008cf4:	f000 fc40 	bl	8009578 <__ieee754_sqrt>
 8008cf8:	a331      	add	r3, pc, #196	; (adr r3, 8008dc0 <__ieee754_acos+0x2b8>)
 8008cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfe:	4620      	mov	r0, r4
 8008d00:	4629      	mov	r1, r5
 8008d02:	ec57 6b10 	vmov	r6, r7, d0
 8008d06:	f7f7 fc97 	bl	8000638 <__aeabi_dmul>
 8008d0a:	a32f      	add	r3, pc, #188	; (adr r3, 8008dc8 <__ieee754_acos+0x2c0>)
 8008d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d10:	f7f7 fada 	bl	80002c8 <__aeabi_dsub>
 8008d14:	4622      	mov	r2, r4
 8008d16:	462b      	mov	r3, r5
 8008d18:	f7f7 fc8e 	bl	8000638 <__aeabi_dmul>
 8008d1c:	a32c      	add	r3, pc, #176	; (adr r3, 8008dd0 <__ieee754_acos+0x2c8>)
 8008d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d22:	f7f7 fad3 	bl	80002cc <__adddf3>
 8008d26:	4622      	mov	r2, r4
 8008d28:	462b      	mov	r3, r5
 8008d2a:	f7f7 fc85 	bl	8000638 <__aeabi_dmul>
 8008d2e:	a32a      	add	r3, pc, #168	; (adr r3, 8008dd8 <__ieee754_acos+0x2d0>)
 8008d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d34:	f7f7 fac8 	bl	80002c8 <__aeabi_dsub>
 8008d38:	4622      	mov	r2, r4
 8008d3a:	462b      	mov	r3, r5
 8008d3c:	f7f7 fc7c 	bl	8000638 <__aeabi_dmul>
 8008d40:	4b2e      	ldr	r3, [pc, #184]	; (8008dfc <__ieee754_acos+0x2f4>)
 8008d42:	2200      	movs	r2, #0
 8008d44:	f7f7 fac2 	bl	80002cc <__adddf3>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	4640      	mov	r0, r8
 8008d4e:	4649      	mov	r1, r9
 8008d50:	f7f7 fd9c 	bl	800088c <__aeabi_ddiv>
 8008d54:	4632      	mov	r2, r6
 8008d56:	463b      	mov	r3, r7
 8008d58:	f7f7 fc6e 	bl	8000638 <__aeabi_dmul>
 8008d5c:	a320      	add	r3, pc, #128	; (adr r3, 8008de0 <__ieee754_acos+0x2d8>)
 8008d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d62:	f7f7 fab1 	bl	80002c8 <__aeabi_dsub>
 8008d66:	4632      	mov	r2, r6
 8008d68:	463b      	mov	r3, r7
 8008d6a:	f7f7 faaf 	bl	80002cc <__adddf3>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	460b      	mov	r3, r1
 8008d72:	f7f7 faab 	bl	80002cc <__adddf3>
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	a103      	add	r1, pc, #12	; (adr r1, 8008d88 <__ieee754_acos+0x280>)
 8008d7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d80:	e76f      	b.n	8008c62 <__ieee754_acos+0x15a>
 8008d82:	bf00      	nop
 8008d84:	f3af 8000 	nop.w
 8008d88:	54442d18 	.word	0x54442d18
 8008d8c:	400921fb 	.word	0x400921fb
 8008d90:	0dfdf709 	.word	0x0dfdf709
 8008d94:	3f023de1 	.word	0x3f023de1
 8008d98:	7501b288 	.word	0x7501b288
 8008d9c:	3f49efe0 	.word	0x3f49efe0
 8008da0:	b5688f3b 	.word	0xb5688f3b
 8008da4:	3fa48228 	.word	0x3fa48228
 8008da8:	0e884455 	.word	0x0e884455
 8008dac:	3fc9c155 	.word	0x3fc9c155
 8008db0:	03eb6f7d 	.word	0x03eb6f7d
 8008db4:	3fd4d612 	.word	0x3fd4d612
 8008db8:	55555555 	.word	0x55555555
 8008dbc:	3fc55555 	.word	0x3fc55555
 8008dc0:	b12e9282 	.word	0xb12e9282
 8008dc4:	3fb3b8c5 	.word	0x3fb3b8c5
 8008dc8:	1b8d0159 	.word	0x1b8d0159
 8008dcc:	3fe6066c 	.word	0x3fe6066c
 8008dd0:	9c598ac8 	.word	0x9c598ac8
 8008dd4:	40002ae5 	.word	0x40002ae5
 8008dd8:	1c8a2d4b 	.word	0x1c8a2d4b
 8008ddc:	40033a27 	.word	0x40033a27
 8008de0:	33145c07 	.word	0x33145c07
 8008de4:	3c91a626 	.word	0x3c91a626
 8008de8:	54442d18 	.word	0x54442d18
 8008dec:	3ff921fb 	.word	0x3ff921fb
 8008df0:	3fefffff 	.word	0x3fefffff
 8008df4:	3fdfffff 	.word	0x3fdfffff
 8008df8:	3c600000 	.word	0x3c600000
 8008dfc:	3ff00000 	.word	0x3ff00000
 8008e00:	3fe00000 	.word	0x3fe00000
 8008e04:	ee10 2a10 	vmov	r2, s0
 8008e08:	462b      	mov	r3, r5
 8008e0a:	496d      	ldr	r1, [pc, #436]	; (8008fc0 <__ieee754_acos+0x4b8>)
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	f7f7 fa5b 	bl	80002c8 <__aeabi_dsub>
 8008e12:	4b6c      	ldr	r3, [pc, #432]	; (8008fc4 <__ieee754_acos+0x4bc>)
 8008e14:	2200      	movs	r2, #0
 8008e16:	f7f7 fc0f 	bl	8000638 <__aeabi_dmul>
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	460d      	mov	r5, r1
 8008e1e:	ec45 4b10 	vmov	d0, r4, r5
 8008e22:	f000 fba9 	bl	8009578 <__ieee754_sqrt>
 8008e26:	a34e      	add	r3, pc, #312	; (adr r3, 8008f60 <__ieee754_acos+0x458>)
 8008e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	4629      	mov	r1, r5
 8008e30:	ec59 8b10 	vmov	r8, r9, d0
 8008e34:	f7f7 fc00 	bl	8000638 <__aeabi_dmul>
 8008e38:	a34b      	add	r3, pc, #300	; (adr r3, 8008f68 <__ieee754_acos+0x460>)
 8008e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3e:	f7f7 fa45 	bl	80002cc <__adddf3>
 8008e42:	4622      	mov	r2, r4
 8008e44:	462b      	mov	r3, r5
 8008e46:	f7f7 fbf7 	bl	8000638 <__aeabi_dmul>
 8008e4a:	a349      	add	r3, pc, #292	; (adr r3, 8008f70 <__ieee754_acos+0x468>)
 8008e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e50:	f7f7 fa3a 	bl	80002c8 <__aeabi_dsub>
 8008e54:	4622      	mov	r2, r4
 8008e56:	462b      	mov	r3, r5
 8008e58:	f7f7 fbee 	bl	8000638 <__aeabi_dmul>
 8008e5c:	a346      	add	r3, pc, #280	; (adr r3, 8008f78 <__ieee754_acos+0x470>)
 8008e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e62:	f7f7 fa33 	bl	80002cc <__adddf3>
 8008e66:	4622      	mov	r2, r4
 8008e68:	462b      	mov	r3, r5
 8008e6a:	f7f7 fbe5 	bl	8000638 <__aeabi_dmul>
 8008e6e:	a344      	add	r3, pc, #272	; (adr r3, 8008f80 <__ieee754_acos+0x478>)
 8008e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e74:	f7f7 fa28 	bl	80002c8 <__aeabi_dsub>
 8008e78:	4622      	mov	r2, r4
 8008e7a:	462b      	mov	r3, r5
 8008e7c:	f7f7 fbdc 	bl	8000638 <__aeabi_dmul>
 8008e80:	a341      	add	r3, pc, #260	; (adr r3, 8008f88 <__ieee754_acos+0x480>)
 8008e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e86:	f7f7 fa21 	bl	80002cc <__adddf3>
 8008e8a:	4622      	mov	r2, r4
 8008e8c:	462b      	mov	r3, r5
 8008e8e:	f7f7 fbd3 	bl	8000638 <__aeabi_dmul>
 8008e92:	a33f      	add	r3, pc, #252	; (adr r3, 8008f90 <__ieee754_acos+0x488>)
 8008e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e98:	4682      	mov	sl, r0
 8008e9a:	468b      	mov	fp, r1
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	f7f7 fbca 	bl	8000638 <__aeabi_dmul>
 8008ea4:	a33c      	add	r3, pc, #240	; (adr r3, 8008f98 <__ieee754_acos+0x490>)
 8008ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eaa:	f7f7 fa0d 	bl	80002c8 <__aeabi_dsub>
 8008eae:	4622      	mov	r2, r4
 8008eb0:	462b      	mov	r3, r5
 8008eb2:	f7f7 fbc1 	bl	8000638 <__aeabi_dmul>
 8008eb6:	a33a      	add	r3, pc, #232	; (adr r3, 8008fa0 <__ieee754_acos+0x498>)
 8008eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebc:	f7f7 fa06 	bl	80002cc <__adddf3>
 8008ec0:	4622      	mov	r2, r4
 8008ec2:	462b      	mov	r3, r5
 8008ec4:	f7f7 fbb8 	bl	8000638 <__aeabi_dmul>
 8008ec8:	a337      	add	r3, pc, #220	; (adr r3, 8008fa8 <__ieee754_acos+0x4a0>)
 8008eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ece:	f7f7 f9fb 	bl	80002c8 <__aeabi_dsub>
 8008ed2:	4622      	mov	r2, r4
 8008ed4:	462b      	mov	r3, r5
 8008ed6:	f7f7 fbaf 	bl	8000638 <__aeabi_dmul>
 8008eda:	4b39      	ldr	r3, [pc, #228]	; (8008fc0 <__ieee754_acos+0x4b8>)
 8008edc:	2200      	movs	r2, #0
 8008ede:	f7f7 f9f5 	bl	80002cc <__adddf3>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	4650      	mov	r0, sl
 8008ee8:	4659      	mov	r1, fp
 8008eea:	f7f7 fccf 	bl	800088c <__aeabi_ddiv>
 8008eee:	4642      	mov	r2, r8
 8008ef0:	464b      	mov	r3, r9
 8008ef2:	f7f7 fba1 	bl	8000638 <__aeabi_dmul>
 8008ef6:	2600      	movs	r6, #0
 8008ef8:	4682      	mov	sl, r0
 8008efa:	468b      	mov	fp, r1
 8008efc:	4632      	mov	r2, r6
 8008efe:	464b      	mov	r3, r9
 8008f00:	4630      	mov	r0, r6
 8008f02:	4649      	mov	r1, r9
 8008f04:	f7f7 fb98 	bl	8000638 <__aeabi_dmul>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	4629      	mov	r1, r5
 8008f10:	f7f7 f9da 	bl	80002c8 <__aeabi_dsub>
 8008f14:	4632      	mov	r2, r6
 8008f16:	4604      	mov	r4, r0
 8008f18:	460d      	mov	r5, r1
 8008f1a:	464b      	mov	r3, r9
 8008f1c:	4640      	mov	r0, r8
 8008f1e:	4649      	mov	r1, r9
 8008f20:	f7f7 f9d4 	bl	80002cc <__adddf3>
 8008f24:	4602      	mov	r2, r0
 8008f26:	460b      	mov	r3, r1
 8008f28:	4620      	mov	r0, r4
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	f7f7 fcae 	bl	800088c <__aeabi_ddiv>
 8008f30:	4602      	mov	r2, r0
 8008f32:	460b      	mov	r3, r1
 8008f34:	4650      	mov	r0, sl
 8008f36:	4659      	mov	r1, fp
 8008f38:	f7f7 f9c8 	bl	80002cc <__adddf3>
 8008f3c:	4632      	mov	r2, r6
 8008f3e:	464b      	mov	r3, r9
 8008f40:	f7f7 f9c4 	bl	80002cc <__adddf3>
 8008f44:	4602      	mov	r2, r0
 8008f46:	460b      	mov	r3, r1
 8008f48:	f7f7 f9c0 	bl	80002cc <__adddf3>
 8008f4c:	e5fe      	b.n	8008b4c <__ieee754_acos+0x44>
 8008f4e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8008fb0 <__ieee754_acos+0x4a8>
 8008f52:	e5ed      	b.n	8008b30 <__ieee754_acos+0x28>
 8008f54:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8008fb8 <__ieee754_acos+0x4b0>
 8008f58:	e5ea      	b.n	8008b30 <__ieee754_acos+0x28>
 8008f5a:	bf00      	nop
 8008f5c:	f3af 8000 	nop.w
 8008f60:	0dfdf709 	.word	0x0dfdf709
 8008f64:	3f023de1 	.word	0x3f023de1
 8008f68:	7501b288 	.word	0x7501b288
 8008f6c:	3f49efe0 	.word	0x3f49efe0
 8008f70:	b5688f3b 	.word	0xb5688f3b
 8008f74:	3fa48228 	.word	0x3fa48228
 8008f78:	0e884455 	.word	0x0e884455
 8008f7c:	3fc9c155 	.word	0x3fc9c155
 8008f80:	03eb6f7d 	.word	0x03eb6f7d
 8008f84:	3fd4d612 	.word	0x3fd4d612
 8008f88:	55555555 	.word	0x55555555
 8008f8c:	3fc55555 	.word	0x3fc55555
 8008f90:	b12e9282 	.word	0xb12e9282
 8008f94:	3fb3b8c5 	.word	0x3fb3b8c5
 8008f98:	1b8d0159 	.word	0x1b8d0159
 8008f9c:	3fe6066c 	.word	0x3fe6066c
 8008fa0:	9c598ac8 	.word	0x9c598ac8
 8008fa4:	40002ae5 	.word	0x40002ae5
 8008fa8:	1c8a2d4b 	.word	0x1c8a2d4b
 8008fac:	40033a27 	.word	0x40033a27
	...
 8008fb8:	54442d18 	.word	0x54442d18
 8008fbc:	3ff921fb 	.word	0x3ff921fb
 8008fc0:	3ff00000 	.word	0x3ff00000
 8008fc4:	3fe00000 	.word	0x3fe00000

08008fc8 <__ieee754_atan2>:
 8008fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fcc:	ec57 6b11 	vmov	r6, r7, d1
 8008fd0:	4273      	negs	r3, r6
 8008fd2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009158 <__ieee754_atan2+0x190>
 8008fd6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008fda:	4333      	orrs	r3, r6
 8008fdc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008fe0:	4573      	cmp	r3, lr
 8008fe2:	ec51 0b10 	vmov	r0, r1, d0
 8008fe6:	ee11 8a10 	vmov	r8, s2
 8008fea:	d80a      	bhi.n	8009002 <__ieee754_atan2+0x3a>
 8008fec:	4244      	negs	r4, r0
 8008fee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008ff2:	4304      	orrs	r4, r0
 8008ff4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008ff8:	4574      	cmp	r4, lr
 8008ffa:	ee10 9a10 	vmov	r9, s0
 8008ffe:	468c      	mov	ip, r1
 8009000:	d907      	bls.n	8009012 <__ieee754_atan2+0x4a>
 8009002:	4632      	mov	r2, r6
 8009004:	463b      	mov	r3, r7
 8009006:	f7f7 f961 	bl	80002cc <__adddf3>
 800900a:	ec41 0b10 	vmov	d0, r0, r1
 800900e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009012:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009016:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800901a:	4334      	orrs	r4, r6
 800901c:	d103      	bne.n	8009026 <__ieee754_atan2+0x5e>
 800901e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009022:	f001 b835 	b.w	800a090 <atan>
 8009026:	17bc      	asrs	r4, r7, #30
 8009028:	f004 0402 	and.w	r4, r4, #2
 800902c:	ea53 0909 	orrs.w	r9, r3, r9
 8009030:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009034:	d107      	bne.n	8009046 <__ieee754_atan2+0x7e>
 8009036:	2c02      	cmp	r4, #2
 8009038:	d060      	beq.n	80090fc <__ieee754_atan2+0x134>
 800903a:	2c03      	cmp	r4, #3
 800903c:	d1e5      	bne.n	800900a <__ieee754_atan2+0x42>
 800903e:	a142      	add	r1, pc, #264	; (adr r1, 8009148 <__ieee754_atan2+0x180>)
 8009040:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009044:	e7e1      	b.n	800900a <__ieee754_atan2+0x42>
 8009046:	ea52 0808 	orrs.w	r8, r2, r8
 800904a:	d106      	bne.n	800905a <__ieee754_atan2+0x92>
 800904c:	f1bc 0f00 	cmp.w	ip, #0
 8009050:	da5f      	bge.n	8009112 <__ieee754_atan2+0x14a>
 8009052:	a13f      	add	r1, pc, #252	; (adr r1, 8009150 <__ieee754_atan2+0x188>)
 8009054:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009058:	e7d7      	b.n	800900a <__ieee754_atan2+0x42>
 800905a:	4572      	cmp	r2, lr
 800905c:	d10f      	bne.n	800907e <__ieee754_atan2+0xb6>
 800905e:	4293      	cmp	r3, r2
 8009060:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009064:	d107      	bne.n	8009076 <__ieee754_atan2+0xae>
 8009066:	2c02      	cmp	r4, #2
 8009068:	d84c      	bhi.n	8009104 <__ieee754_atan2+0x13c>
 800906a:	4b35      	ldr	r3, [pc, #212]	; (8009140 <__ieee754_atan2+0x178>)
 800906c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009070:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009074:	e7c9      	b.n	800900a <__ieee754_atan2+0x42>
 8009076:	2c02      	cmp	r4, #2
 8009078:	d848      	bhi.n	800910c <__ieee754_atan2+0x144>
 800907a:	4b32      	ldr	r3, [pc, #200]	; (8009144 <__ieee754_atan2+0x17c>)
 800907c:	e7f6      	b.n	800906c <__ieee754_atan2+0xa4>
 800907e:	4573      	cmp	r3, lr
 8009080:	d0e4      	beq.n	800904c <__ieee754_atan2+0x84>
 8009082:	1a9b      	subs	r3, r3, r2
 8009084:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009088:	ea4f 5223 	mov.w	r2, r3, asr #20
 800908c:	da1e      	bge.n	80090cc <__ieee754_atan2+0x104>
 800908e:	2f00      	cmp	r7, #0
 8009090:	da01      	bge.n	8009096 <__ieee754_atan2+0xce>
 8009092:	323c      	adds	r2, #60	; 0x3c
 8009094:	db1e      	blt.n	80090d4 <__ieee754_atan2+0x10c>
 8009096:	4632      	mov	r2, r6
 8009098:	463b      	mov	r3, r7
 800909a:	f7f7 fbf7 	bl	800088c <__aeabi_ddiv>
 800909e:	ec41 0b10 	vmov	d0, r0, r1
 80090a2:	f001 f995 	bl	800a3d0 <fabs>
 80090a6:	f000 fff3 	bl	800a090 <atan>
 80090aa:	ec51 0b10 	vmov	r0, r1, d0
 80090ae:	2c01      	cmp	r4, #1
 80090b0:	d013      	beq.n	80090da <__ieee754_atan2+0x112>
 80090b2:	2c02      	cmp	r4, #2
 80090b4:	d015      	beq.n	80090e2 <__ieee754_atan2+0x11a>
 80090b6:	2c00      	cmp	r4, #0
 80090b8:	d0a7      	beq.n	800900a <__ieee754_atan2+0x42>
 80090ba:	a319      	add	r3, pc, #100	; (adr r3, 8009120 <__ieee754_atan2+0x158>)
 80090bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c0:	f7f7 f902 	bl	80002c8 <__aeabi_dsub>
 80090c4:	a318      	add	r3, pc, #96	; (adr r3, 8009128 <__ieee754_atan2+0x160>)
 80090c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ca:	e014      	b.n	80090f6 <__ieee754_atan2+0x12e>
 80090cc:	a118      	add	r1, pc, #96	; (adr r1, 8009130 <__ieee754_atan2+0x168>)
 80090ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090d2:	e7ec      	b.n	80090ae <__ieee754_atan2+0xe6>
 80090d4:	2000      	movs	r0, #0
 80090d6:	2100      	movs	r1, #0
 80090d8:	e7e9      	b.n	80090ae <__ieee754_atan2+0xe6>
 80090da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090de:	4619      	mov	r1, r3
 80090e0:	e793      	b.n	800900a <__ieee754_atan2+0x42>
 80090e2:	a30f      	add	r3, pc, #60	; (adr r3, 8009120 <__ieee754_atan2+0x158>)
 80090e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e8:	f7f7 f8ee 	bl	80002c8 <__aeabi_dsub>
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	a10d      	add	r1, pc, #52	; (adr r1, 8009128 <__ieee754_atan2+0x160>)
 80090f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090f6:	f7f7 f8e7 	bl	80002c8 <__aeabi_dsub>
 80090fa:	e786      	b.n	800900a <__ieee754_atan2+0x42>
 80090fc:	a10a      	add	r1, pc, #40	; (adr r1, 8009128 <__ieee754_atan2+0x160>)
 80090fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009102:	e782      	b.n	800900a <__ieee754_atan2+0x42>
 8009104:	a10c      	add	r1, pc, #48	; (adr r1, 8009138 <__ieee754_atan2+0x170>)
 8009106:	e9d1 0100 	ldrd	r0, r1, [r1]
 800910a:	e77e      	b.n	800900a <__ieee754_atan2+0x42>
 800910c:	2000      	movs	r0, #0
 800910e:	2100      	movs	r1, #0
 8009110:	e77b      	b.n	800900a <__ieee754_atan2+0x42>
 8009112:	a107      	add	r1, pc, #28	; (adr r1, 8009130 <__ieee754_atan2+0x168>)
 8009114:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009118:	e777      	b.n	800900a <__ieee754_atan2+0x42>
 800911a:	bf00      	nop
 800911c:	f3af 8000 	nop.w
 8009120:	33145c07 	.word	0x33145c07
 8009124:	3ca1a626 	.word	0x3ca1a626
 8009128:	54442d18 	.word	0x54442d18
 800912c:	400921fb 	.word	0x400921fb
 8009130:	54442d18 	.word	0x54442d18
 8009134:	3ff921fb 	.word	0x3ff921fb
 8009138:	54442d18 	.word	0x54442d18
 800913c:	3fe921fb 	.word	0x3fe921fb
 8009140:	0800aa48 	.word	0x0800aa48
 8009144:	0800aa60 	.word	0x0800aa60
 8009148:	54442d18 	.word	0x54442d18
 800914c:	c00921fb 	.word	0xc00921fb
 8009150:	54442d18 	.word	0x54442d18
 8009154:	bff921fb 	.word	0xbff921fb
 8009158:	7ff00000 	.word	0x7ff00000
 800915c:	00000000 	.word	0x00000000

08009160 <__ieee754_rem_pio2>:
 8009160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009164:	ed2d 8b02 	vpush	{d8}
 8009168:	ec55 4b10 	vmov	r4, r5, d0
 800916c:	4bca      	ldr	r3, [pc, #808]	; (8009498 <__ieee754_rem_pio2+0x338>)
 800916e:	b08b      	sub	sp, #44	; 0x2c
 8009170:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009174:	4598      	cmp	r8, r3
 8009176:	4682      	mov	sl, r0
 8009178:	9502      	str	r5, [sp, #8]
 800917a:	dc08      	bgt.n	800918e <__ieee754_rem_pio2+0x2e>
 800917c:	2200      	movs	r2, #0
 800917e:	2300      	movs	r3, #0
 8009180:	ed80 0b00 	vstr	d0, [r0]
 8009184:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009188:	f04f 0b00 	mov.w	fp, #0
 800918c:	e028      	b.n	80091e0 <__ieee754_rem_pio2+0x80>
 800918e:	4bc3      	ldr	r3, [pc, #780]	; (800949c <__ieee754_rem_pio2+0x33c>)
 8009190:	4598      	cmp	r8, r3
 8009192:	dc78      	bgt.n	8009286 <__ieee754_rem_pio2+0x126>
 8009194:	9b02      	ldr	r3, [sp, #8]
 8009196:	4ec2      	ldr	r6, [pc, #776]	; (80094a0 <__ieee754_rem_pio2+0x340>)
 8009198:	2b00      	cmp	r3, #0
 800919a:	ee10 0a10 	vmov	r0, s0
 800919e:	a3b0      	add	r3, pc, #704	; (adr r3, 8009460 <__ieee754_rem_pio2+0x300>)
 80091a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a4:	4629      	mov	r1, r5
 80091a6:	dd39      	ble.n	800921c <__ieee754_rem_pio2+0xbc>
 80091a8:	f7f7 f88e 	bl	80002c8 <__aeabi_dsub>
 80091ac:	45b0      	cmp	r8, r6
 80091ae:	4604      	mov	r4, r0
 80091b0:	460d      	mov	r5, r1
 80091b2:	d01b      	beq.n	80091ec <__ieee754_rem_pio2+0x8c>
 80091b4:	a3ac      	add	r3, pc, #688	; (adr r3, 8009468 <__ieee754_rem_pio2+0x308>)
 80091b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ba:	f7f7 f885 	bl	80002c8 <__aeabi_dsub>
 80091be:	4602      	mov	r2, r0
 80091c0:	460b      	mov	r3, r1
 80091c2:	e9ca 2300 	strd	r2, r3, [sl]
 80091c6:	4620      	mov	r0, r4
 80091c8:	4629      	mov	r1, r5
 80091ca:	f7f7 f87d 	bl	80002c8 <__aeabi_dsub>
 80091ce:	a3a6      	add	r3, pc, #664	; (adr r3, 8009468 <__ieee754_rem_pio2+0x308>)
 80091d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d4:	f7f7 f878 	bl	80002c8 <__aeabi_dsub>
 80091d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80091dc:	f04f 0b01 	mov.w	fp, #1
 80091e0:	4658      	mov	r0, fp
 80091e2:	b00b      	add	sp, #44	; 0x2c
 80091e4:	ecbd 8b02 	vpop	{d8}
 80091e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ec:	a3a0      	add	r3, pc, #640	; (adr r3, 8009470 <__ieee754_rem_pio2+0x310>)
 80091ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f2:	f7f7 f869 	bl	80002c8 <__aeabi_dsub>
 80091f6:	a3a0      	add	r3, pc, #640	; (adr r3, 8009478 <__ieee754_rem_pio2+0x318>)
 80091f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fc:	4604      	mov	r4, r0
 80091fe:	460d      	mov	r5, r1
 8009200:	f7f7 f862 	bl	80002c8 <__aeabi_dsub>
 8009204:	4602      	mov	r2, r0
 8009206:	460b      	mov	r3, r1
 8009208:	e9ca 2300 	strd	r2, r3, [sl]
 800920c:	4620      	mov	r0, r4
 800920e:	4629      	mov	r1, r5
 8009210:	f7f7 f85a 	bl	80002c8 <__aeabi_dsub>
 8009214:	a398      	add	r3, pc, #608	; (adr r3, 8009478 <__ieee754_rem_pio2+0x318>)
 8009216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921a:	e7db      	b.n	80091d4 <__ieee754_rem_pio2+0x74>
 800921c:	f7f7 f856 	bl	80002cc <__adddf3>
 8009220:	45b0      	cmp	r8, r6
 8009222:	4604      	mov	r4, r0
 8009224:	460d      	mov	r5, r1
 8009226:	d016      	beq.n	8009256 <__ieee754_rem_pio2+0xf6>
 8009228:	a38f      	add	r3, pc, #572	; (adr r3, 8009468 <__ieee754_rem_pio2+0x308>)
 800922a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922e:	f7f7 f84d 	bl	80002cc <__adddf3>
 8009232:	4602      	mov	r2, r0
 8009234:	460b      	mov	r3, r1
 8009236:	e9ca 2300 	strd	r2, r3, [sl]
 800923a:	4620      	mov	r0, r4
 800923c:	4629      	mov	r1, r5
 800923e:	f7f7 f843 	bl	80002c8 <__aeabi_dsub>
 8009242:	a389      	add	r3, pc, #548	; (adr r3, 8009468 <__ieee754_rem_pio2+0x308>)
 8009244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009248:	f7f7 f840 	bl	80002cc <__adddf3>
 800924c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8009250:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009254:	e7c4      	b.n	80091e0 <__ieee754_rem_pio2+0x80>
 8009256:	a386      	add	r3, pc, #536	; (adr r3, 8009470 <__ieee754_rem_pio2+0x310>)
 8009258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925c:	f7f7 f836 	bl	80002cc <__adddf3>
 8009260:	a385      	add	r3, pc, #532	; (adr r3, 8009478 <__ieee754_rem_pio2+0x318>)
 8009262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009266:	4604      	mov	r4, r0
 8009268:	460d      	mov	r5, r1
 800926a:	f7f7 f82f 	bl	80002cc <__adddf3>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	e9ca 2300 	strd	r2, r3, [sl]
 8009276:	4620      	mov	r0, r4
 8009278:	4629      	mov	r1, r5
 800927a:	f7f7 f825 	bl	80002c8 <__aeabi_dsub>
 800927e:	a37e      	add	r3, pc, #504	; (adr r3, 8009478 <__ieee754_rem_pio2+0x318>)
 8009280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009284:	e7e0      	b.n	8009248 <__ieee754_rem_pio2+0xe8>
 8009286:	4b87      	ldr	r3, [pc, #540]	; (80094a4 <__ieee754_rem_pio2+0x344>)
 8009288:	4598      	cmp	r8, r3
 800928a:	f300 80d9 	bgt.w	8009440 <__ieee754_rem_pio2+0x2e0>
 800928e:	f001 f89f 	bl	800a3d0 <fabs>
 8009292:	ec55 4b10 	vmov	r4, r5, d0
 8009296:	ee10 0a10 	vmov	r0, s0
 800929a:	a379      	add	r3, pc, #484	; (adr r3, 8009480 <__ieee754_rem_pio2+0x320>)
 800929c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a0:	4629      	mov	r1, r5
 80092a2:	f7f7 f9c9 	bl	8000638 <__aeabi_dmul>
 80092a6:	4b80      	ldr	r3, [pc, #512]	; (80094a8 <__ieee754_rem_pio2+0x348>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	f7f7 f80f 	bl	80002cc <__adddf3>
 80092ae:	f7f7 fc73 	bl	8000b98 <__aeabi_d2iz>
 80092b2:	4683      	mov	fp, r0
 80092b4:	f7f7 f956 	bl	8000564 <__aeabi_i2d>
 80092b8:	4602      	mov	r2, r0
 80092ba:	460b      	mov	r3, r1
 80092bc:	ec43 2b18 	vmov	d8, r2, r3
 80092c0:	a367      	add	r3, pc, #412	; (adr r3, 8009460 <__ieee754_rem_pio2+0x300>)
 80092c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c6:	f7f7 f9b7 	bl	8000638 <__aeabi_dmul>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	4620      	mov	r0, r4
 80092d0:	4629      	mov	r1, r5
 80092d2:	f7f6 fff9 	bl	80002c8 <__aeabi_dsub>
 80092d6:	a364      	add	r3, pc, #400	; (adr r3, 8009468 <__ieee754_rem_pio2+0x308>)
 80092d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092dc:	4606      	mov	r6, r0
 80092de:	460f      	mov	r7, r1
 80092e0:	ec51 0b18 	vmov	r0, r1, d8
 80092e4:	f7f7 f9a8 	bl	8000638 <__aeabi_dmul>
 80092e8:	f1bb 0f1f 	cmp.w	fp, #31
 80092ec:	4604      	mov	r4, r0
 80092ee:	460d      	mov	r5, r1
 80092f0:	dc0d      	bgt.n	800930e <__ieee754_rem_pio2+0x1ae>
 80092f2:	4b6e      	ldr	r3, [pc, #440]	; (80094ac <__ieee754_rem_pio2+0x34c>)
 80092f4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80092f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092fc:	4543      	cmp	r3, r8
 80092fe:	d006      	beq.n	800930e <__ieee754_rem_pio2+0x1ae>
 8009300:	4622      	mov	r2, r4
 8009302:	462b      	mov	r3, r5
 8009304:	4630      	mov	r0, r6
 8009306:	4639      	mov	r1, r7
 8009308:	f7f6 ffde 	bl	80002c8 <__aeabi_dsub>
 800930c:	e00f      	b.n	800932e <__ieee754_rem_pio2+0x1ce>
 800930e:	462b      	mov	r3, r5
 8009310:	4622      	mov	r2, r4
 8009312:	4630      	mov	r0, r6
 8009314:	4639      	mov	r1, r7
 8009316:	f7f6 ffd7 	bl	80002c8 <__aeabi_dsub>
 800931a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800931e:	9303      	str	r3, [sp, #12]
 8009320:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009324:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009328:	f1b8 0f10 	cmp.w	r8, #16
 800932c:	dc02      	bgt.n	8009334 <__ieee754_rem_pio2+0x1d4>
 800932e:	e9ca 0100 	strd	r0, r1, [sl]
 8009332:	e039      	b.n	80093a8 <__ieee754_rem_pio2+0x248>
 8009334:	a34e      	add	r3, pc, #312	; (adr r3, 8009470 <__ieee754_rem_pio2+0x310>)
 8009336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933a:	ec51 0b18 	vmov	r0, r1, d8
 800933e:	f7f7 f97b 	bl	8000638 <__aeabi_dmul>
 8009342:	4604      	mov	r4, r0
 8009344:	460d      	mov	r5, r1
 8009346:	4602      	mov	r2, r0
 8009348:	460b      	mov	r3, r1
 800934a:	4630      	mov	r0, r6
 800934c:	4639      	mov	r1, r7
 800934e:	f7f6 ffbb 	bl	80002c8 <__aeabi_dsub>
 8009352:	4602      	mov	r2, r0
 8009354:	460b      	mov	r3, r1
 8009356:	4680      	mov	r8, r0
 8009358:	4689      	mov	r9, r1
 800935a:	4630      	mov	r0, r6
 800935c:	4639      	mov	r1, r7
 800935e:	f7f6 ffb3 	bl	80002c8 <__aeabi_dsub>
 8009362:	4622      	mov	r2, r4
 8009364:	462b      	mov	r3, r5
 8009366:	f7f6 ffaf 	bl	80002c8 <__aeabi_dsub>
 800936a:	a343      	add	r3, pc, #268	; (adr r3, 8009478 <__ieee754_rem_pio2+0x318>)
 800936c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009370:	4604      	mov	r4, r0
 8009372:	460d      	mov	r5, r1
 8009374:	ec51 0b18 	vmov	r0, r1, d8
 8009378:	f7f7 f95e 	bl	8000638 <__aeabi_dmul>
 800937c:	4622      	mov	r2, r4
 800937e:	462b      	mov	r3, r5
 8009380:	f7f6 ffa2 	bl	80002c8 <__aeabi_dsub>
 8009384:	4602      	mov	r2, r0
 8009386:	460b      	mov	r3, r1
 8009388:	4604      	mov	r4, r0
 800938a:	460d      	mov	r5, r1
 800938c:	4640      	mov	r0, r8
 800938e:	4649      	mov	r1, r9
 8009390:	f7f6 ff9a 	bl	80002c8 <__aeabi_dsub>
 8009394:	9a03      	ldr	r2, [sp, #12]
 8009396:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	2b31      	cmp	r3, #49	; 0x31
 800939e:	dc24      	bgt.n	80093ea <__ieee754_rem_pio2+0x28a>
 80093a0:	e9ca 0100 	strd	r0, r1, [sl]
 80093a4:	4646      	mov	r6, r8
 80093a6:	464f      	mov	r7, r9
 80093a8:	e9da 8900 	ldrd	r8, r9, [sl]
 80093ac:	4630      	mov	r0, r6
 80093ae:	4642      	mov	r2, r8
 80093b0:	464b      	mov	r3, r9
 80093b2:	4639      	mov	r1, r7
 80093b4:	f7f6 ff88 	bl	80002c8 <__aeabi_dsub>
 80093b8:	462b      	mov	r3, r5
 80093ba:	4622      	mov	r2, r4
 80093bc:	f7f6 ff84 	bl	80002c8 <__aeabi_dsub>
 80093c0:	9b02      	ldr	r3, [sp, #8]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80093c8:	f6bf af0a 	bge.w	80091e0 <__ieee754_rem_pio2+0x80>
 80093cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80093d0:	f8ca 3004 	str.w	r3, [sl, #4]
 80093d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093d8:	f8ca 8000 	str.w	r8, [sl]
 80093dc:	f8ca 0008 	str.w	r0, [sl, #8]
 80093e0:	f8ca 300c 	str.w	r3, [sl, #12]
 80093e4:	f1cb 0b00 	rsb	fp, fp, #0
 80093e8:	e6fa      	b.n	80091e0 <__ieee754_rem_pio2+0x80>
 80093ea:	a327      	add	r3, pc, #156	; (adr r3, 8009488 <__ieee754_rem_pio2+0x328>)
 80093ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f0:	ec51 0b18 	vmov	r0, r1, d8
 80093f4:	f7f7 f920 	bl	8000638 <__aeabi_dmul>
 80093f8:	4604      	mov	r4, r0
 80093fa:	460d      	mov	r5, r1
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	4640      	mov	r0, r8
 8009402:	4649      	mov	r1, r9
 8009404:	f7f6 ff60 	bl	80002c8 <__aeabi_dsub>
 8009408:	4602      	mov	r2, r0
 800940a:	460b      	mov	r3, r1
 800940c:	4606      	mov	r6, r0
 800940e:	460f      	mov	r7, r1
 8009410:	4640      	mov	r0, r8
 8009412:	4649      	mov	r1, r9
 8009414:	f7f6 ff58 	bl	80002c8 <__aeabi_dsub>
 8009418:	4622      	mov	r2, r4
 800941a:	462b      	mov	r3, r5
 800941c:	f7f6 ff54 	bl	80002c8 <__aeabi_dsub>
 8009420:	a31b      	add	r3, pc, #108	; (adr r3, 8009490 <__ieee754_rem_pio2+0x330>)
 8009422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009426:	4604      	mov	r4, r0
 8009428:	460d      	mov	r5, r1
 800942a:	ec51 0b18 	vmov	r0, r1, d8
 800942e:	f7f7 f903 	bl	8000638 <__aeabi_dmul>
 8009432:	4622      	mov	r2, r4
 8009434:	462b      	mov	r3, r5
 8009436:	f7f6 ff47 	bl	80002c8 <__aeabi_dsub>
 800943a:	4604      	mov	r4, r0
 800943c:	460d      	mov	r5, r1
 800943e:	e75f      	b.n	8009300 <__ieee754_rem_pio2+0x1a0>
 8009440:	4b1b      	ldr	r3, [pc, #108]	; (80094b0 <__ieee754_rem_pio2+0x350>)
 8009442:	4598      	cmp	r8, r3
 8009444:	dd36      	ble.n	80094b4 <__ieee754_rem_pio2+0x354>
 8009446:	ee10 2a10 	vmov	r2, s0
 800944a:	462b      	mov	r3, r5
 800944c:	4620      	mov	r0, r4
 800944e:	4629      	mov	r1, r5
 8009450:	f7f6 ff3a 	bl	80002c8 <__aeabi_dsub>
 8009454:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009458:	e9ca 0100 	strd	r0, r1, [sl]
 800945c:	e694      	b.n	8009188 <__ieee754_rem_pio2+0x28>
 800945e:	bf00      	nop
 8009460:	54400000 	.word	0x54400000
 8009464:	3ff921fb 	.word	0x3ff921fb
 8009468:	1a626331 	.word	0x1a626331
 800946c:	3dd0b461 	.word	0x3dd0b461
 8009470:	1a600000 	.word	0x1a600000
 8009474:	3dd0b461 	.word	0x3dd0b461
 8009478:	2e037073 	.word	0x2e037073
 800947c:	3ba3198a 	.word	0x3ba3198a
 8009480:	6dc9c883 	.word	0x6dc9c883
 8009484:	3fe45f30 	.word	0x3fe45f30
 8009488:	2e000000 	.word	0x2e000000
 800948c:	3ba3198a 	.word	0x3ba3198a
 8009490:	252049c1 	.word	0x252049c1
 8009494:	397b839a 	.word	0x397b839a
 8009498:	3fe921fb 	.word	0x3fe921fb
 800949c:	4002d97b 	.word	0x4002d97b
 80094a0:	3ff921fb 	.word	0x3ff921fb
 80094a4:	413921fb 	.word	0x413921fb
 80094a8:	3fe00000 	.word	0x3fe00000
 80094ac:	0800aa78 	.word	0x0800aa78
 80094b0:	7fefffff 	.word	0x7fefffff
 80094b4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80094b8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80094bc:	ee10 0a10 	vmov	r0, s0
 80094c0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80094c4:	ee10 6a10 	vmov	r6, s0
 80094c8:	460f      	mov	r7, r1
 80094ca:	f7f7 fb65 	bl	8000b98 <__aeabi_d2iz>
 80094ce:	f7f7 f849 	bl	8000564 <__aeabi_i2d>
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	4630      	mov	r0, r6
 80094d8:	4639      	mov	r1, r7
 80094da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80094de:	f7f6 fef3 	bl	80002c8 <__aeabi_dsub>
 80094e2:	4b23      	ldr	r3, [pc, #140]	; (8009570 <__ieee754_rem_pio2+0x410>)
 80094e4:	2200      	movs	r2, #0
 80094e6:	f7f7 f8a7 	bl	8000638 <__aeabi_dmul>
 80094ea:	460f      	mov	r7, r1
 80094ec:	4606      	mov	r6, r0
 80094ee:	f7f7 fb53 	bl	8000b98 <__aeabi_d2iz>
 80094f2:	f7f7 f837 	bl	8000564 <__aeabi_i2d>
 80094f6:	4602      	mov	r2, r0
 80094f8:	460b      	mov	r3, r1
 80094fa:	4630      	mov	r0, r6
 80094fc:	4639      	mov	r1, r7
 80094fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009502:	f7f6 fee1 	bl	80002c8 <__aeabi_dsub>
 8009506:	4b1a      	ldr	r3, [pc, #104]	; (8009570 <__ieee754_rem_pio2+0x410>)
 8009508:	2200      	movs	r2, #0
 800950a:	f7f7 f895 	bl	8000638 <__aeabi_dmul>
 800950e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009512:	ad04      	add	r5, sp, #16
 8009514:	f04f 0803 	mov.w	r8, #3
 8009518:	46a9      	mov	r9, r5
 800951a:	2600      	movs	r6, #0
 800951c:	2700      	movs	r7, #0
 800951e:	4632      	mov	r2, r6
 8009520:	463b      	mov	r3, r7
 8009522:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8009526:	46c3      	mov	fp, r8
 8009528:	3d08      	subs	r5, #8
 800952a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800952e:	f7f7 faeb 	bl	8000b08 <__aeabi_dcmpeq>
 8009532:	2800      	cmp	r0, #0
 8009534:	d1f3      	bne.n	800951e <__ieee754_rem_pio2+0x3be>
 8009536:	4b0f      	ldr	r3, [pc, #60]	; (8009574 <__ieee754_rem_pio2+0x414>)
 8009538:	9301      	str	r3, [sp, #4]
 800953a:	2302      	movs	r3, #2
 800953c:	9300      	str	r3, [sp, #0]
 800953e:	4622      	mov	r2, r4
 8009540:	465b      	mov	r3, fp
 8009542:	4651      	mov	r1, sl
 8009544:	4648      	mov	r0, r9
 8009546:	f000 f993 	bl	8009870 <__kernel_rem_pio2>
 800954a:	9b02      	ldr	r3, [sp, #8]
 800954c:	2b00      	cmp	r3, #0
 800954e:	4683      	mov	fp, r0
 8009550:	f6bf ae46 	bge.w	80091e0 <__ieee754_rem_pio2+0x80>
 8009554:	e9da 2100 	ldrd	r2, r1, [sl]
 8009558:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800955c:	e9ca 2300 	strd	r2, r3, [sl]
 8009560:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009564:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009568:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800956c:	e73a      	b.n	80093e4 <__ieee754_rem_pio2+0x284>
 800956e:	bf00      	nop
 8009570:	41700000 	.word	0x41700000
 8009574:	0800aaf8 	.word	0x0800aaf8

08009578 <__ieee754_sqrt>:
 8009578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800957c:	ec55 4b10 	vmov	r4, r5, d0
 8009580:	4e55      	ldr	r6, [pc, #340]	; (80096d8 <__ieee754_sqrt+0x160>)
 8009582:	43ae      	bics	r6, r5
 8009584:	ee10 0a10 	vmov	r0, s0
 8009588:	ee10 3a10 	vmov	r3, s0
 800958c:	462a      	mov	r2, r5
 800958e:	4629      	mov	r1, r5
 8009590:	d110      	bne.n	80095b4 <__ieee754_sqrt+0x3c>
 8009592:	ee10 2a10 	vmov	r2, s0
 8009596:	462b      	mov	r3, r5
 8009598:	f7f7 f84e 	bl	8000638 <__aeabi_dmul>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	4620      	mov	r0, r4
 80095a2:	4629      	mov	r1, r5
 80095a4:	f7f6 fe92 	bl	80002cc <__adddf3>
 80095a8:	4604      	mov	r4, r0
 80095aa:	460d      	mov	r5, r1
 80095ac:	ec45 4b10 	vmov	d0, r4, r5
 80095b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095b4:	2d00      	cmp	r5, #0
 80095b6:	dc10      	bgt.n	80095da <__ieee754_sqrt+0x62>
 80095b8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80095bc:	4330      	orrs	r0, r6
 80095be:	d0f5      	beq.n	80095ac <__ieee754_sqrt+0x34>
 80095c0:	b15d      	cbz	r5, 80095da <__ieee754_sqrt+0x62>
 80095c2:	ee10 2a10 	vmov	r2, s0
 80095c6:	462b      	mov	r3, r5
 80095c8:	ee10 0a10 	vmov	r0, s0
 80095cc:	f7f6 fe7c 	bl	80002c8 <__aeabi_dsub>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	f7f7 f95a 	bl	800088c <__aeabi_ddiv>
 80095d8:	e7e6      	b.n	80095a8 <__ieee754_sqrt+0x30>
 80095da:	1512      	asrs	r2, r2, #20
 80095dc:	d074      	beq.n	80096c8 <__ieee754_sqrt+0x150>
 80095de:	07d4      	lsls	r4, r2, #31
 80095e0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80095e4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80095e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80095ec:	bf5e      	ittt	pl
 80095ee:	0fda      	lsrpl	r2, r3, #31
 80095f0:	005b      	lslpl	r3, r3, #1
 80095f2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80095f6:	2400      	movs	r4, #0
 80095f8:	0fda      	lsrs	r2, r3, #31
 80095fa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80095fe:	107f      	asrs	r7, r7, #1
 8009600:	005b      	lsls	r3, r3, #1
 8009602:	2516      	movs	r5, #22
 8009604:	4620      	mov	r0, r4
 8009606:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800960a:	1886      	adds	r6, r0, r2
 800960c:	428e      	cmp	r6, r1
 800960e:	bfde      	ittt	le
 8009610:	1b89      	suble	r1, r1, r6
 8009612:	18b0      	addle	r0, r6, r2
 8009614:	18a4      	addle	r4, r4, r2
 8009616:	0049      	lsls	r1, r1, #1
 8009618:	3d01      	subs	r5, #1
 800961a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800961e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009622:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009626:	d1f0      	bne.n	800960a <__ieee754_sqrt+0x92>
 8009628:	462a      	mov	r2, r5
 800962a:	f04f 0e20 	mov.w	lr, #32
 800962e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009632:	4281      	cmp	r1, r0
 8009634:	eb06 0c05 	add.w	ip, r6, r5
 8009638:	dc02      	bgt.n	8009640 <__ieee754_sqrt+0xc8>
 800963a:	d113      	bne.n	8009664 <__ieee754_sqrt+0xec>
 800963c:	459c      	cmp	ip, r3
 800963e:	d811      	bhi.n	8009664 <__ieee754_sqrt+0xec>
 8009640:	f1bc 0f00 	cmp.w	ip, #0
 8009644:	eb0c 0506 	add.w	r5, ip, r6
 8009648:	da43      	bge.n	80096d2 <__ieee754_sqrt+0x15a>
 800964a:	2d00      	cmp	r5, #0
 800964c:	db41      	blt.n	80096d2 <__ieee754_sqrt+0x15a>
 800964e:	f100 0801 	add.w	r8, r0, #1
 8009652:	1a09      	subs	r1, r1, r0
 8009654:	459c      	cmp	ip, r3
 8009656:	bf88      	it	hi
 8009658:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800965c:	eba3 030c 	sub.w	r3, r3, ip
 8009660:	4432      	add	r2, r6
 8009662:	4640      	mov	r0, r8
 8009664:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009668:	f1be 0e01 	subs.w	lr, lr, #1
 800966c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009670:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009674:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009678:	d1db      	bne.n	8009632 <__ieee754_sqrt+0xba>
 800967a:	430b      	orrs	r3, r1
 800967c:	d006      	beq.n	800968c <__ieee754_sqrt+0x114>
 800967e:	1c50      	adds	r0, r2, #1
 8009680:	bf13      	iteet	ne
 8009682:	3201      	addne	r2, #1
 8009684:	3401      	addeq	r4, #1
 8009686:	4672      	moveq	r2, lr
 8009688:	f022 0201 	bicne.w	r2, r2, #1
 800968c:	1063      	asrs	r3, r4, #1
 800968e:	0852      	lsrs	r2, r2, #1
 8009690:	07e1      	lsls	r1, r4, #31
 8009692:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009696:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800969a:	bf48      	it	mi
 800969c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80096a0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80096a4:	4614      	mov	r4, r2
 80096a6:	e781      	b.n	80095ac <__ieee754_sqrt+0x34>
 80096a8:	0ad9      	lsrs	r1, r3, #11
 80096aa:	3815      	subs	r0, #21
 80096ac:	055b      	lsls	r3, r3, #21
 80096ae:	2900      	cmp	r1, #0
 80096b0:	d0fa      	beq.n	80096a8 <__ieee754_sqrt+0x130>
 80096b2:	02cd      	lsls	r5, r1, #11
 80096b4:	d50a      	bpl.n	80096cc <__ieee754_sqrt+0x154>
 80096b6:	f1c2 0420 	rsb	r4, r2, #32
 80096ba:	fa23 f404 	lsr.w	r4, r3, r4
 80096be:	1e55      	subs	r5, r2, #1
 80096c0:	4093      	lsls	r3, r2
 80096c2:	4321      	orrs	r1, r4
 80096c4:	1b42      	subs	r2, r0, r5
 80096c6:	e78a      	b.n	80095de <__ieee754_sqrt+0x66>
 80096c8:	4610      	mov	r0, r2
 80096ca:	e7f0      	b.n	80096ae <__ieee754_sqrt+0x136>
 80096cc:	0049      	lsls	r1, r1, #1
 80096ce:	3201      	adds	r2, #1
 80096d0:	e7ef      	b.n	80096b2 <__ieee754_sqrt+0x13a>
 80096d2:	4680      	mov	r8, r0
 80096d4:	e7bd      	b.n	8009652 <__ieee754_sqrt+0xda>
 80096d6:	bf00      	nop
 80096d8:	7ff00000 	.word	0x7ff00000
 80096dc:	00000000 	.word	0x00000000

080096e0 <__kernel_cos>:
 80096e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e4:	ec57 6b10 	vmov	r6, r7, d0
 80096e8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80096ec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80096f0:	ed8d 1b00 	vstr	d1, [sp]
 80096f4:	da07      	bge.n	8009706 <__kernel_cos+0x26>
 80096f6:	ee10 0a10 	vmov	r0, s0
 80096fa:	4639      	mov	r1, r7
 80096fc:	f7f7 fa4c 	bl	8000b98 <__aeabi_d2iz>
 8009700:	2800      	cmp	r0, #0
 8009702:	f000 8088 	beq.w	8009816 <__kernel_cos+0x136>
 8009706:	4632      	mov	r2, r6
 8009708:	463b      	mov	r3, r7
 800970a:	4630      	mov	r0, r6
 800970c:	4639      	mov	r1, r7
 800970e:	f7f6 ff93 	bl	8000638 <__aeabi_dmul>
 8009712:	4b51      	ldr	r3, [pc, #324]	; (8009858 <__kernel_cos+0x178>)
 8009714:	2200      	movs	r2, #0
 8009716:	4604      	mov	r4, r0
 8009718:	460d      	mov	r5, r1
 800971a:	f7f6 ff8d 	bl	8000638 <__aeabi_dmul>
 800971e:	a340      	add	r3, pc, #256	; (adr r3, 8009820 <__kernel_cos+0x140>)
 8009720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009724:	4682      	mov	sl, r0
 8009726:	468b      	mov	fp, r1
 8009728:	4620      	mov	r0, r4
 800972a:	4629      	mov	r1, r5
 800972c:	f7f6 ff84 	bl	8000638 <__aeabi_dmul>
 8009730:	a33d      	add	r3, pc, #244	; (adr r3, 8009828 <__kernel_cos+0x148>)
 8009732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009736:	f7f6 fdc9 	bl	80002cc <__adddf3>
 800973a:	4622      	mov	r2, r4
 800973c:	462b      	mov	r3, r5
 800973e:	f7f6 ff7b 	bl	8000638 <__aeabi_dmul>
 8009742:	a33b      	add	r3, pc, #236	; (adr r3, 8009830 <__kernel_cos+0x150>)
 8009744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009748:	f7f6 fdbe 	bl	80002c8 <__aeabi_dsub>
 800974c:	4622      	mov	r2, r4
 800974e:	462b      	mov	r3, r5
 8009750:	f7f6 ff72 	bl	8000638 <__aeabi_dmul>
 8009754:	a338      	add	r3, pc, #224	; (adr r3, 8009838 <__kernel_cos+0x158>)
 8009756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975a:	f7f6 fdb7 	bl	80002cc <__adddf3>
 800975e:	4622      	mov	r2, r4
 8009760:	462b      	mov	r3, r5
 8009762:	f7f6 ff69 	bl	8000638 <__aeabi_dmul>
 8009766:	a336      	add	r3, pc, #216	; (adr r3, 8009840 <__kernel_cos+0x160>)
 8009768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976c:	f7f6 fdac 	bl	80002c8 <__aeabi_dsub>
 8009770:	4622      	mov	r2, r4
 8009772:	462b      	mov	r3, r5
 8009774:	f7f6 ff60 	bl	8000638 <__aeabi_dmul>
 8009778:	a333      	add	r3, pc, #204	; (adr r3, 8009848 <__kernel_cos+0x168>)
 800977a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977e:	f7f6 fda5 	bl	80002cc <__adddf3>
 8009782:	4622      	mov	r2, r4
 8009784:	462b      	mov	r3, r5
 8009786:	f7f6 ff57 	bl	8000638 <__aeabi_dmul>
 800978a:	4622      	mov	r2, r4
 800978c:	462b      	mov	r3, r5
 800978e:	f7f6 ff53 	bl	8000638 <__aeabi_dmul>
 8009792:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009796:	4604      	mov	r4, r0
 8009798:	460d      	mov	r5, r1
 800979a:	4630      	mov	r0, r6
 800979c:	4639      	mov	r1, r7
 800979e:	f7f6 ff4b 	bl	8000638 <__aeabi_dmul>
 80097a2:	460b      	mov	r3, r1
 80097a4:	4602      	mov	r2, r0
 80097a6:	4629      	mov	r1, r5
 80097a8:	4620      	mov	r0, r4
 80097aa:	f7f6 fd8d 	bl	80002c8 <__aeabi_dsub>
 80097ae:	4b2b      	ldr	r3, [pc, #172]	; (800985c <__kernel_cos+0x17c>)
 80097b0:	4598      	cmp	r8, r3
 80097b2:	4606      	mov	r6, r0
 80097b4:	460f      	mov	r7, r1
 80097b6:	dc10      	bgt.n	80097da <__kernel_cos+0xfa>
 80097b8:	4602      	mov	r2, r0
 80097ba:	460b      	mov	r3, r1
 80097bc:	4650      	mov	r0, sl
 80097be:	4659      	mov	r1, fp
 80097c0:	f7f6 fd82 	bl	80002c8 <__aeabi_dsub>
 80097c4:	460b      	mov	r3, r1
 80097c6:	4926      	ldr	r1, [pc, #152]	; (8009860 <__kernel_cos+0x180>)
 80097c8:	4602      	mov	r2, r0
 80097ca:	2000      	movs	r0, #0
 80097cc:	f7f6 fd7c 	bl	80002c8 <__aeabi_dsub>
 80097d0:	ec41 0b10 	vmov	d0, r0, r1
 80097d4:	b003      	add	sp, #12
 80097d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097da:	4b22      	ldr	r3, [pc, #136]	; (8009864 <__kernel_cos+0x184>)
 80097dc:	4920      	ldr	r1, [pc, #128]	; (8009860 <__kernel_cos+0x180>)
 80097de:	4598      	cmp	r8, r3
 80097e0:	bfcc      	ite	gt
 80097e2:	4d21      	ldrgt	r5, [pc, #132]	; (8009868 <__kernel_cos+0x188>)
 80097e4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80097e8:	2400      	movs	r4, #0
 80097ea:	4622      	mov	r2, r4
 80097ec:	462b      	mov	r3, r5
 80097ee:	2000      	movs	r0, #0
 80097f0:	f7f6 fd6a 	bl	80002c8 <__aeabi_dsub>
 80097f4:	4622      	mov	r2, r4
 80097f6:	4680      	mov	r8, r0
 80097f8:	4689      	mov	r9, r1
 80097fa:	462b      	mov	r3, r5
 80097fc:	4650      	mov	r0, sl
 80097fe:	4659      	mov	r1, fp
 8009800:	f7f6 fd62 	bl	80002c8 <__aeabi_dsub>
 8009804:	4632      	mov	r2, r6
 8009806:	463b      	mov	r3, r7
 8009808:	f7f6 fd5e 	bl	80002c8 <__aeabi_dsub>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4640      	mov	r0, r8
 8009812:	4649      	mov	r1, r9
 8009814:	e7da      	b.n	80097cc <__kernel_cos+0xec>
 8009816:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009850 <__kernel_cos+0x170>
 800981a:	e7db      	b.n	80097d4 <__kernel_cos+0xf4>
 800981c:	f3af 8000 	nop.w
 8009820:	be8838d4 	.word	0xbe8838d4
 8009824:	bda8fae9 	.word	0xbda8fae9
 8009828:	bdb4b1c4 	.word	0xbdb4b1c4
 800982c:	3e21ee9e 	.word	0x3e21ee9e
 8009830:	809c52ad 	.word	0x809c52ad
 8009834:	3e927e4f 	.word	0x3e927e4f
 8009838:	19cb1590 	.word	0x19cb1590
 800983c:	3efa01a0 	.word	0x3efa01a0
 8009840:	16c15177 	.word	0x16c15177
 8009844:	3f56c16c 	.word	0x3f56c16c
 8009848:	5555554c 	.word	0x5555554c
 800984c:	3fa55555 	.word	0x3fa55555
 8009850:	00000000 	.word	0x00000000
 8009854:	3ff00000 	.word	0x3ff00000
 8009858:	3fe00000 	.word	0x3fe00000
 800985c:	3fd33332 	.word	0x3fd33332
 8009860:	3ff00000 	.word	0x3ff00000
 8009864:	3fe90000 	.word	0x3fe90000
 8009868:	3fd20000 	.word	0x3fd20000
 800986c:	00000000 	.word	0x00000000

08009870 <__kernel_rem_pio2>:
 8009870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009874:	ed2d 8b02 	vpush	{d8}
 8009878:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800987c:	f112 0f14 	cmn.w	r2, #20
 8009880:	9308      	str	r3, [sp, #32]
 8009882:	9101      	str	r1, [sp, #4]
 8009884:	4bc4      	ldr	r3, [pc, #784]	; (8009b98 <__kernel_rem_pio2+0x328>)
 8009886:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009888:	900b      	str	r0, [sp, #44]	; 0x2c
 800988a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800988e:	9302      	str	r3, [sp, #8]
 8009890:	9b08      	ldr	r3, [sp, #32]
 8009892:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009896:	bfa8      	it	ge
 8009898:	1ed4      	subge	r4, r2, #3
 800989a:	9306      	str	r3, [sp, #24]
 800989c:	bfb2      	itee	lt
 800989e:	2400      	movlt	r4, #0
 80098a0:	2318      	movge	r3, #24
 80098a2:	fb94 f4f3 	sdivge	r4, r4, r3
 80098a6:	f06f 0317 	mvn.w	r3, #23
 80098aa:	fb04 3303 	mla	r3, r4, r3, r3
 80098ae:	eb03 0a02 	add.w	sl, r3, r2
 80098b2:	9b02      	ldr	r3, [sp, #8]
 80098b4:	9a06      	ldr	r2, [sp, #24]
 80098b6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8009b88 <__kernel_rem_pio2+0x318>
 80098ba:	eb03 0802 	add.w	r8, r3, r2
 80098be:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80098c0:	1aa7      	subs	r7, r4, r2
 80098c2:	ae22      	add	r6, sp, #136	; 0x88
 80098c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80098c8:	2500      	movs	r5, #0
 80098ca:	4545      	cmp	r5, r8
 80098cc:	dd13      	ble.n	80098f6 <__kernel_rem_pio2+0x86>
 80098ce:	9b08      	ldr	r3, [sp, #32]
 80098d0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8009b88 <__kernel_rem_pio2+0x318>
 80098d4:	aa22      	add	r2, sp, #136	; 0x88
 80098d6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80098da:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80098de:	f04f 0800 	mov.w	r8, #0
 80098e2:	9b02      	ldr	r3, [sp, #8]
 80098e4:	4598      	cmp	r8, r3
 80098e6:	dc2f      	bgt.n	8009948 <__kernel_rem_pio2+0xd8>
 80098e8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80098ec:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80098f0:	462f      	mov	r7, r5
 80098f2:	2600      	movs	r6, #0
 80098f4:	e01b      	b.n	800992e <__kernel_rem_pio2+0xbe>
 80098f6:	42ef      	cmn	r7, r5
 80098f8:	d407      	bmi.n	800990a <__kernel_rem_pio2+0x9a>
 80098fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80098fe:	f7f6 fe31 	bl	8000564 <__aeabi_i2d>
 8009902:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009906:	3501      	adds	r5, #1
 8009908:	e7df      	b.n	80098ca <__kernel_rem_pio2+0x5a>
 800990a:	ec51 0b18 	vmov	r0, r1, d8
 800990e:	e7f8      	b.n	8009902 <__kernel_rem_pio2+0x92>
 8009910:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009914:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009918:	f7f6 fe8e 	bl	8000638 <__aeabi_dmul>
 800991c:	4602      	mov	r2, r0
 800991e:	460b      	mov	r3, r1
 8009920:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009924:	f7f6 fcd2 	bl	80002cc <__adddf3>
 8009928:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800992c:	3601      	adds	r6, #1
 800992e:	9b06      	ldr	r3, [sp, #24]
 8009930:	429e      	cmp	r6, r3
 8009932:	f1a7 0708 	sub.w	r7, r7, #8
 8009936:	ddeb      	ble.n	8009910 <__kernel_rem_pio2+0xa0>
 8009938:	ed9d 7b04 	vldr	d7, [sp, #16]
 800993c:	f108 0801 	add.w	r8, r8, #1
 8009940:	ecab 7b02 	vstmia	fp!, {d7}
 8009944:	3508      	adds	r5, #8
 8009946:	e7cc      	b.n	80098e2 <__kernel_rem_pio2+0x72>
 8009948:	9b02      	ldr	r3, [sp, #8]
 800994a:	aa0e      	add	r2, sp, #56	; 0x38
 800994c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009950:	930d      	str	r3, [sp, #52]	; 0x34
 8009952:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009954:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009958:	9c02      	ldr	r4, [sp, #8]
 800995a:	930c      	str	r3, [sp, #48]	; 0x30
 800995c:	00e3      	lsls	r3, r4, #3
 800995e:	930a      	str	r3, [sp, #40]	; 0x28
 8009960:	ab9a      	add	r3, sp, #616	; 0x268
 8009962:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009966:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800996a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800996e:	ab72      	add	r3, sp, #456	; 0x1c8
 8009970:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8009974:	46c3      	mov	fp, r8
 8009976:	46a1      	mov	r9, r4
 8009978:	f1b9 0f00 	cmp.w	r9, #0
 800997c:	f1a5 0508 	sub.w	r5, r5, #8
 8009980:	dc77      	bgt.n	8009a72 <__kernel_rem_pio2+0x202>
 8009982:	ec47 6b10 	vmov	d0, r6, r7
 8009986:	4650      	mov	r0, sl
 8009988:	f000 fdb6 	bl	800a4f8 <scalbn>
 800998c:	ec57 6b10 	vmov	r6, r7, d0
 8009990:	2200      	movs	r2, #0
 8009992:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009996:	ee10 0a10 	vmov	r0, s0
 800999a:	4639      	mov	r1, r7
 800999c:	f7f6 fe4c 	bl	8000638 <__aeabi_dmul>
 80099a0:	ec41 0b10 	vmov	d0, r0, r1
 80099a4:	f000 fd20 	bl	800a3e8 <floor>
 80099a8:	4b7c      	ldr	r3, [pc, #496]	; (8009b9c <__kernel_rem_pio2+0x32c>)
 80099aa:	ec51 0b10 	vmov	r0, r1, d0
 80099ae:	2200      	movs	r2, #0
 80099b0:	f7f6 fe42 	bl	8000638 <__aeabi_dmul>
 80099b4:	4602      	mov	r2, r0
 80099b6:	460b      	mov	r3, r1
 80099b8:	4630      	mov	r0, r6
 80099ba:	4639      	mov	r1, r7
 80099bc:	f7f6 fc84 	bl	80002c8 <__aeabi_dsub>
 80099c0:	460f      	mov	r7, r1
 80099c2:	4606      	mov	r6, r0
 80099c4:	f7f7 f8e8 	bl	8000b98 <__aeabi_d2iz>
 80099c8:	9004      	str	r0, [sp, #16]
 80099ca:	f7f6 fdcb 	bl	8000564 <__aeabi_i2d>
 80099ce:	4602      	mov	r2, r0
 80099d0:	460b      	mov	r3, r1
 80099d2:	4630      	mov	r0, r6
 80099d4:	4639      	mov	r1, r7
 80099d6:	f7f6 fc77 	bl	80002c8 <__aeabi_dsub>
 80099da:	f1ba 0f00 	cmp.w	sl, #0
 80099de:	4606      	mov	r6, r0
 80099e0:	460f      	mov	r7, r1
 80099e2:	dd6d      	ble.n	8009ac0 <__kernel_rem_pio2+0x250>
 80099e4:	1e62      	subs	r2, r4, #1
 80099e6:	ab0e      	add	r3, sp, #56	; 0x38
 80099e8:	9d04      	ldr	r5, [sp, #16]
 80099ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80099ee:	f1ca 0118 	rsb	r1, sl, #24
 80099f2:	fa40 f301 	asr.w	r3, r0, r1
 80099f6:	441d      	add	r5, r3
 80099f8:	408b      	lsls	r3, r1
 80099fa:	1ac0      	subs	r0, r0, r3
 80099fc:	ab0e      	add	r3, sp, #56	; 0x38
 80099fe:	9504      	str	r5, [sp, #16]
 8009a00:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009a04:	f1ca 0317 	rsb	r3, sl, #23
 8009a08:	fa40 fb03 	asr.w	fp, r0, r3
 8009a0c:	f1bb 0f00 	cmp.w	fp, #0
 8009a10:	dd65      	ble.n	8009ade <__kernel_rem_pio2+0x26e>
 8009a12:	9b04      	ldr	r3, [sp, #16]
 8009a14:	2200      	movs	r2, #0
 8009a16:	3301      	adds	r3, #1
 8009a18:	9304      	str	r3, [sp, #16]
 8009a1a:	4615      	mov	r5, r2
 8009a1c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009a20:	4294      	cmp	r4, r2
 8009a22:	f300 809c 	bgt.w	8009b5e <__kernel_rem_pio2+0x2ee>
 8009a26:	f1ba 0f00 	cmp.w	sl, #0
 8009a2a:	dd07      	ble.n	8009a3c <__kernel_rem_pio2+0x1cc>
 8009a2c:	f1ba 0f01 	cmp.w	sl, #1
 8009a30:	f000 80c0 	beq.w	8009bb4 <__kernel_rem_pio2+0x344>
 8009a34:	f1ba 0f02 	cmp.w	sl, #2
 8009a38:	f000 80c6 	beq.w	8009bc8 <__kernel_rem_pio2+0x358>
 8009a3c:	f1bb 0f02 	cmp.w	fp, #2
 8009a40:	d14d      	bne.n	8009ade <__kernel_rem_pio2+0x26e>
 8009a42:	4632      	mov	r2, r6
 8009a44:	463b      	mov	r3, r7
 8009a46:	4956      	ldr	r1, [pc, #344]	; (8009ba0 <__kernel_rem_pio2+0x330>)
 8009a48:	2000      	movs	r0, #0
 8009a4a:	f7f6 fc3d 	bl	80002c8 <__aeabi_dsub>
 8009a4e:	4606      	mov	r6, r0
 8009a50:	460f      	mov	r7, r1
 8009a52:	2d00      	cmp	r5, #0
 8009a54:	d043      	beq.n	8009ade <__kernel_rem_pio2+0x26e>
 8009a56:	4650      	mov	r0, sl
 8009a58:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8009b90 <__kernel_rem_pio2+0x320>
 8009a5c:	f000 fd4c 	bl	800a4f8 <scalbn>
 8009a60:	4630      	mov	r0, r6
 8009a62:	4639      	mov	r1, r7
 8009a64:	ec53 2b10 	vmov	r2, r3, d0
 8009a68:	f7f6 fc2e 	bl	80002c8 <__aeabi_dsub>
 8009a6c:	4606      	mov	r6, r0
 8009a6e:	460f      	mov	r7, r1
 8009a70:	e035      	b.n	8009ade <__kernel_rem_pio2+0x26e>
 8009a72:	4b4c      	ldr	r3, [pc, #304]	; (8009ba4 <__kernel_rem_pio2+0x334>)
 8009a74:	2200      	movs	r2, #0
 8009a76:	4630      	mov	r0, r6
 8009a78:	4639      	mov	r1, r7
 8009a7a:	f7f6 fddd 	bl	8000638 <__aeabi_dmul>
 8009a7e:	f7f7 f88b 	bl	8000b98 <__aeabi_d2iz>
 8009a82:	f7f6 fd6f 	bl	8000564 <__aeabi_i2d>
 8009a86:	4602      	mov	r2, r0
 8009a88:	460b      	mov	r3, r1
 8009a8a:	ec43 2b18 	vmov	d8, r2, r3
 8009a8e:	4b46      	ldr	r3, [pc, #280]	; (8009ba8 <__kernel_rem_pio2+0x338>)
 8009a90:	2200      	movs	r2, #0
 8009a92:	f7f6 fdd1 	bl	8000638 <__aeabi_dmul>
 8009a96:	4602      	mov	r2, r0
 8009a98:	460b      	mov	r3, r1
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	4639      	mov	r1, r7
 8009a9e:	f7f6 fc13 	bl	80002c8 <__aeabi_dsub>
 8009aa2:	f7f7 f879 	bl	8000b98 <__aeabi_d2iz>
 8009aa6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009aaa:	f84b 0b04 	str.w	r0, [fp], #4
 8009aae:	ec51 0b18 	vmov	r0, r1, d8
 8009ab2:	f7f6 fc0b 	bl	80002cc <__adddf3>
 8009ab6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009aba:	4606      	mov	r6, r0
 8009abc:	460f      	mov	r7, r1
 8009abe:	e75b      	b.n	8009978 <__kernel_rem_pio2+0x108>
 8009ac0:	d106      	bne.n	8009ad0 <__kernel_rem_pio2+0x260>
 8009ac2:	1e63      	subs	r3, r4, #1
 8009ac4:	aa0e      	add	r2, sp, #56	; 0x38
 8009ac6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009aca:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8009ace:	e79d      	b.n	8009a0c <__kernel_rem_pio2+0x19c>
 8009ad0:	4b36      	ldr	r3, [pc, #216]	; (8009bac <__kernel_rem_pio2+0x33c>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f7f7 f836 	bl	8000b44 <__aeabi_dcmpge>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d13d      	bne.n	8009b58 <__kernel_rem_pio2+0x2e8>
 8009adc:	4683      	mov	fp, r0
 8009ade:	2200      	movs	r2, #0
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	4639      	mov	r1, r7
 8009ae6:	f7f7 f80f 	bl	8000b08 <__aeabi_dcmpeq>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	f000 80c0 	beq.w	8009c70 <__kernel_rem_pio2+0x400>
 8009af0:	1e65      	subs	r5, r4, #1
 8009af2:	462b      	mov	r3, r5
 8009af4:	2200      	movs	r2, #0
 8009af6:	9902      	ldr	r1, [sp, #8]
 8009af8:	428b      	cmp	r3, r1
 8009afa:	da6c      	bge.n	8009bd6 <__kernel_rem_pio2+0x366>
 8009afc:	2a00      	cmp	r2, #0
 8009afe:	f000 8089 	beq.w	8009c14 <__kernel_rem_pio2+0x3a4>
 8009b02:	ab0e      	add	r3, sp, #56	; 0x38
 8009b04:	f1aa 0a18 	sub.w	sl, sl, #24
 8009b08:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f000 80ad 	beq.w	8009c6c <__kernel_rem_pio2+0x3fc>
 8009b12:	4650      	mov	r0, sl
 8009b14:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8009b90 <__kernel_rem_pio2+0x320>
 8009b18:	f000 fcee 	bl	800a4f8 <scalbn>
 8009b1c:	ab9a      	add	r3, sp, #616	; 0x268
 8009b1e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009b22:	ec57 6b10 	vmov	r6, r7, d0
 8009b26:	00ec      	lsls	r4, r5, #3
 8009b28:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8009b2c:	46aa      	mov	sl, r5
 8009b2e:	f1ba 0f00 	cmp.w	sl, #0
 8009b32:	f280 80d6 	bge.w	8009ce2 <__kernel_rem_pio2+0x472>
 8009b36:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8009b88 <__kernel_rem_pio2+0x318>
 8009b3a:	462e      	mov	r6, r5
 8009b3c:	2e00      	cmp	r6, #0
 8009b3e:	f2c0 8104 	blt.w	8009d4a <__kernel_rem_pio2+0x4da>
 8009b42:	ab72      	add	r3, sp, #456	; 0x1c8
 8009b44:	ed8d 8b06 	vstr	d8, [sp, #24]
 8009b48:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009bb0 <__kernel_rem_pio2+0x340>
 8009b4c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8009b50:	f04f 0800 	mov.w	r8, #0
 8009b54:	1baf      	subs	r7, r5, r6
 8009b56:	e0ea      	b.n	8009d2e <__kernel_rem_pio2+0x4be>
 8009b58:	f04f 0b02 	mov.w	fp, #2
 8009b5c:	e759      	b.n	8009a12 <__kernel_rem_pio2+0x1a2>
 8009b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8009b62:	b955      	cbnz	r5, 8009b7a <__kernel_rem_pio2+0x30a>
 8009b64:	b123      	cbz	r3, 8009b70 <__kernel_rem_pio2+0x300>
 8009b66:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009b6a:	f8c8 3000 	str.w	r3, [r8]
 8009b6e:	2301      	movs	r3, #1
 8009b70:	3201      	adds	r2, #1
 8009b72:	f108 0804 	add.w	r8, r8, #4
 8009b76:	461d      	mov	r5, r3
 8009b78:	e752      	b.n	8009a20 <__kernel_rem_pio2+0x1b0>
 8009b7a:	1acb      	subs	r3, r1, r3
 8009b7c:	f8c8 3000 	str.w	r3, [r8]
 8009b80:	462b      	mov	r3, r5
 8009b82:	e7f5      	b.n	8009b70 <__kernel_rem_pio2+0x300>
 8009b84:	f3af 8000 	nop.w
	...
 8009b94:	3ff00000 	.word	0x3ff00000
 8009b98:	0800ac40 	.word	0x0800ac40
 8009b9c:	40200000 	.word	0x40200000
 8009ba0:	3ff00000 	.word	0x3ff00000
 8009ba4:	3e700000 	.word	0x3e700000
 8009ba8:	41700000 	.word	0x41700000
 8009bac:	3fe00000 	.word	0x3fe00000
 8009bb0:	0800ac00 	.word	0x0800ac00
 8009bb4:	1e62      	subs	r2, r4, #1
 8009bb6:	ab0e      	add	r3, sp, #56	; 0x38
 8009bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bbc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009bc0:	a90e      	add	r1, sp, #56	; 0x38
 8009bc2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009bc6:	e739      	b.n	8009a3c <__kernel_rem_pio2+0x1cc>
 8009bc8:	1e62      	subs	r2, r4, #1
 8009bca:	ab0e      	add	r3, sp, #56	; 0x38
 8009bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bd0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009bd4:	e7f4      	b.n	8009bc0 <__kernel_rem_pio2+0x350>
 8009bd6:	a90e      	add	r1, sp, #56	; 0x38
 8009bd8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009bdc:	3b01      	subs	r3, #1
 8009bde:	430a      	orrs	r2, r1
 8009be0:	e789      	b.n	8009af6 <__kernel_rem_pio2+0x286>
 8009be2:	3301      	adds	r3, #1
 8009be4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009be8:	2900      	cmp	r1, #0
 8009bea:	d0fa      	beq.n	8009be2 <__kernel_rem_pio2+0x372>
 8009bec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bee:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8009bf2:	446a      	add	r2, sp
 8009bf4:	3a98      	subs	r2, #152	; 0x98
 8009bf6:	920a      	str	r2, [sp, #40]	; 0x28
 8009bf8:	9a08      	ldr	r2, [sp, #32]
 8009bfa:	18e3      	adds	r3, r4, r3
 8009bfc:	18a5      	adds	r5, r4, r2
 8009bfe:	aa22      	add	r2, sp, #136	; 0x88
 8009c00:	f104 0801 	add.w	r8, r4, #1
 8009c04:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009c08:	9304      	str	r3, [sp, #16]
 8009c0a:	9b04      	ldr	r3, [sp, #16]
 8009c0c:	4543      	cmp	r3, r8
 8009c0e:	da04      	bge.n	8009c1a <__kernel_rem_pio2+0x3aa>
 8009c10:	461c      	mov	r4, r3
 8009c12:	e6a3      	b.n	800995c <__kernel_rem_pio2+0xec>
 8009c14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c16:	2301      	movs	r3, #1
 8009c18:	e7e4      	b.n	8009be4 <__kernel_rem_pio2+0x374>
 8009c1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c1c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009c20:	f7f6 fca0 	bl	8000564 <__aeabi_i2d>
 8009c24:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c2a:	46ab      	mov	fp, r5
 8009c2c:	461c      	mov	r4, r3
 8009c2e:	f04f 0900 	mov.w	r9, #0
 8009c32:	2600      	movs	r6, #0
 8009c34:	2700      	movs	r7, #0
 8009c36:	9b06      	ldr	r3, [sp, #24]
 8009c38:	4599      	cmp	r9, r3
 8009c3a:	dd06      	ble.n	8009c4a <__kernel_rem_pio2+0x3da>
 8009c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c3e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8009c42:	f108 0801 	add.w	r8, r8, #1
 8009c46:	930a      	str	r3, [sp, #40]	; 0x28
 8009c48:	e7df      	b.n	8009c0a <__kernel_rem_pio2+0x39a>
 8009c4a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009c4e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009c52:	f7f6 fcf1 	bl	8000638 <__aeabi_dmul>
 8009c56:	4602      	mov	r2, r0
 8009c58:	460b      	mov	r3, r1
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	4639      	mov	r1, r7
 8009c5e:	f7f6 fb35 	bl	80002cc <__adddf3>
 8009c62:	f109 0901 	add.w	r9, r9, #1
 8009c66:	4606      	mov	r6, r0
 8009c68:	460f      	mov	r7, r1
 8009c6a:	e7e4      	b.n	8009c36 <__kernel_rem_pio2+0x3c6>
 8009c6c:	3d01      	subs	r5, #1
 8009c6e:	e748      	b.n	8009b02 <__kernel_rem_pio2+0x292>
 8009c70:	ec47 6b10 	vmov	d0, r6, r7
 8009c74:	f1ca 0000 	rsb	r0, sl, #0
 8009c78:	f000 fc3e 	bl	800a4f8 <scalbn>
 8009c7c:	ec57 6b10 	vmov	r6, r7, d0
 8009c80:	4ba0      	ldr	r3, [pc, #640]	; (8009f04 <__kernel_rem_pio2+0x694>)
 8009c82:	ee10 0a10 	vmov	r0, s0
 8009c86:	2200      	movs	r2, #0
 8009c88:	4639      	mov	r1, r7
 8009c8a:	f7f6 ff5b 	bl	8000b44 <__aeabi_dcmpge>
 8009c8e:	b1f8      	cbz	r0, 8009cd0 <__kernel_rem_pio2+0x460>
 8009c90:	4b9d      	ldr	r3, [pc, #628]	; (8009f08 <__kernel_rem_pio2+0x698>)
 8009c92:	2200      	movs	r2, #0
 8009c94:	4630      	mov	r0, r6
 8009c96:	4639      	mov	r1, r7
 8009c98:	f7f6 fcce 	bl	8000638 <__aeabi_dmul>
 8009c9c:	f7f6 ff7c 	bl	8000b98 <__aeabi_d2iz>
 8009ca0:	4680      	mov	r8, r0
 8009ca2:	f7f6 fc5f 	bl	8000564 <__aeabi_i2d>
 8009ca6:	4b97      	ldr	r3, [pc, #604]	; (8009f04 <__kernel_rem_pio2+0x694>)
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f7f6 fcc5 	bl	8000638 <__aeabi_dmul>
 8009cae:	460b      	mov	r3, r1
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	4639      	mov	r1, r7
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	f7f6 fb07 	bl	80002c8 <__aeabi_dsub>
 8009cba:	f7f6 ff6d 	bl	8000b98 <__aeabi_d2iz>
 8009cbe:	1c65      	adds	r5, r4, #1
 8009cc0:	ab0e      	add	r3, sp, #56	; 0x38
 8009cc2:	f10a 0a18 	add.w	sl, sl, #24
 8009cc6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009cca:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009cce:	e720      	b.n	8009b12 <__kernel_rem_pio2+0x2a2>
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	4639      	mov	r1, r7
 8009cd4:	f7f6 ff60 	bl	8000b98 <__aeabi_d2iz>
 8009cd8:	ab0e      	add	r3, sp, #56	; 0x38
 8009cda:	4625      	mov	r5, r4
 8009cdc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009ce0:	e717      	b.n	8009b12 <__kernel_rem_pio2+0x2a2>
 8009ce2:	ab0e      	add	r3, sp, #56	; 0x38
 8009ce4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009ce8:	f7f6 fc3c 	bl	8000564 <__aeabi_i2d>
 8009cec:	4632      	mov	r2, r6
 8009cee:	463b      	mov	r3, r7
 8009cf0:	f7f6 fca2 	bl	8000638 <__aeabi_dmul>
 8009cf4:	4b84      	ldr	r3, [pc, #528]	; (8009f08 <__kernel_rem_pio2+0x698>)
 8009cf6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	4639      	mov	r1, r7
 8009d00:	f7f6 fc9a 	bl	8000638 <__aeabi_dmul>
 8009d04:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009d08:	4606      	mov	r6, r0
 8009d0a:	460f      	mov	r7, r1
 8009d0c:	e70f      	b.n	8009b2e <__kernel_rem_pio2+0x2be>
 8009d0e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009d12:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8009d16:	f7f6 fc8f 	bl	8000638 <__aeabi_dmul>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d22:	f7f6 fad3 	bl	80002cc <__adddf3>
 8009d26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009d2a:	f108 0801 	add.w	r8, r8, #1
 8009d2e:	9b02      	ldr	r3, [sp, #8]
 8009d30:	4598      	cmp	r8, r3
 8009d32:	dc01      	bgt.n	8009d38 <__kernel_rem_pio2+0x4c8>
 8009d34:	45b8      	cmp	r8, r7
 8009d36:	ddea      	ble.n	8009d0e <__kernel_rem_pio2+0x49e>
 8009d38:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009d3c:	ab4a      	add	r3, sp, #296	; 0x128
 8009d3e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009d42:	ed87 7b00 	vstr	d7, [r7]
 8009d46:	3e01      	subs	r6, #1
 8009d48:	e6f8      	b.n	8009b3c <__kernel_rem_pio2+0x2cc>
 8009d4a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	dc0b      	bgt.n	8009d68 <__kernel_rem_pio2+0x4f8>
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	dc35      	bgt.n	8009dc0 <__kernel_rem_pio2+0x550>
 8009d54:	d059      	beq.n	8009e0a <__kernel_rem_pio2+0x59a>
 8009d56:	9b04      	ldr	r3, [sp, #16]
 8009d58:	f003 0007 	and.w	r0, r3, #7
 8009d5c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009d60:	ecbd 8b02 	vpop	{d8}
 8009d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d68:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009d6a:	2b03      	cmp	r3, #3
 8009d6c:	d1f3      	bne.n	8009d56 <__kernel_rem_pio2+0x4e6>
 8009d6e:	ab4a      	add	r3, sp, #296	; 0x128
 8009d70:	4423      	add	r3, r4
 8009d72:	9306      	str	r3, [sp, #24]
 8009d74:	461c      	mov	r4, r3
 8009d76:	469a      	mov	sl, r3
 8009d78:	9502      	str	r5, [sp, #8]
 8009d7a:	9b02      	ldr	r3, [sp, #8]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f1aa 0a08 	sub.w	sl, sl, #8
 8009d82:	dc6b      	bgt.n	8009e5c <__kernel_rem_pio2+0x5ec>
 8009d84:	46aa      	mov	sl, r5
 8009d86:	f1ba 0f01 	cmp.w	sl, #1
 8009d8a:	f1a4 0408 	sub.w	r4, r4, #8
 8009d8e:	f300 8085 	bgt.w	8009e9c <__kernel_rem_pio2+0x62c>
 8009d92:	9c06      	ldr	r4, [sp, #24]
 8009d94:	2000      	movs	r0, #0
 8009d96:	3408      	adds	r4, #8
 8009d98:	2100      	movs	r1, #0
 8009d9a:	2d01      	cmp	r5, #1
 8009d9c:	f300 809d 	bgt.w	8009eda <__kernel_rem_pio2+0x66a>
 8009da0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009da4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8009da8:	f1bb 0f00 	cmp.w	fp, #0
 8009dac:	f040 809b 	bne.w	8009ee6 <__kernel_rem_pio2+0x676>
 8009db0:	9b01      	ldr	r3, [sp, #4]
 8009db2:	e9c3 5600 	strd	r5, r6, [r3]
 8009db6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009dba:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009dbe:	e7ca      	b.n	8009d56 <__kernel_rem_pio2+0x4e6>
 8009dc0:	3408      	adds	r4, #8
 8009dc2:	ab4a      	add	r3, sp, #296	; 0x128
 8009dc4:	441c      	add	r4, r3
 8009dc6:	462e      	mov	r6, r5
 8009dc8:	2000      	movs	r0, #0
 8009dca:	2100      	movs	r1, #0
 8009dcc:	2e00      	cmp	r6, #0
 8009dce:	da36      	bge.n	8009e3e <__kernel_rem_pio2+0x5ce>
 8009dd0:	f1bb 0f00 	cmp.w	fp, #0
 8009dd4:	d039      	beq.n	8009e4a <__kernel_rem_pio2+0x5da>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ddc:	9c01      	ldr	r4, [sp, #4]
 8009dde:	e9c4 2300 	strd	r2, r3, [r4]
 8009de2:	4602      	mov	r2, r0
 8009de4:	460b      	mov	r3, r1
 8009de6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8009dea:	f7f6 fa6d 	bl	80002c8 <__aeabi_dsub>
 8009dee:	ae4c      	add	r6, sp, #304	; 0x130
 8009df0:	2401      	movs	r4, #1
 8009df2:	42a5      	cmp	r5, r4
 8009df4:	da2c      	bge.n	8009e50 <__kernel_rem_pio2+0x5e0>
 8009df6:	f1bb 0f00 	cmp.w	fp, #0
 8009dfa:	d002      	beq.n	8009e02 <__kernel_rem_pio2+0x592>
 8009dfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e00:	4619      	mov	r1, r3
 8009e02:	9b01      	ldr	r3, [sp, #4]
 8009e04:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009e08:	e7a5      	b.n	8009d56 <__kernel_rem_pio2+0x4e6>
 8009e0a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8009e0e:	eb0d 0403 	add.w	r4, sp, r3
 8009e12:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009e16:	2000      	movs	r0, #0
 8009e18:	2100      	movs	r1, #0
 8009e1a:	2d00      	cmp	r5, #0
 8009e1c:	da09      	bge.n	8009e32 <__kernel_rem_pio2+0x5c2>
 8009e1e:	f1bb 0f00 	cmp.w	fp, #0
 8009e22:	d002      	beq.n	8009e2a <__kernel_rem_pio2+0x5ba>
 8009e24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e28:	4619      	mov	r1, r3
 8009e2a:	9b01      	ldr	r3, [sp, #4]
 8009e2c:	e9c3 0100 	strd	r0, r1, [r3]
 8009e30:	e791      	b.n	8009d56 <__kernel_rem_pio2+0x4e6>
 8009e32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009e36:	f7f6 fa49 	bl	80002cc <__adddf3>
 8009e3a:	3d01      	subs	r5, #1
 8009e3c:	e7ed      	b.n	8009e1a <__kernel_rem_pio2+0x5aa>
 8009e3e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009e42:	f7f6 fa43 	bl	80002cc <__adddf3>
 8009e46:	3e01      	subs	r6, #1
 8009e48:	e7c0      	b.n	8009dcc <__kernel_rem_pio2+0x55c>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	e7c5      	b.n	8009ddc <__kernel_rem_pio2+0x56c>
 8009e50:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009e54:	f7f6 fa3a 	bl	80002cc <__adddf3>
 8009e58:	3401      	adds	r4, #1
 8009e5a:	e7ca      	b.n	8009df2 <__kernel_rem_pio2+0x582>
 8009e5c:	e9da 8900 	ldrd	r8, r9, [sl]
 8009e60:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009e64:	9b02      	ldr	r3, [sp, #8]
 8009e66:	3b01      	subs	r3, #1
 8009e68:	9302      	str	r3, [sp, #8]
 8009e6a:	4632      	mov	r2, r6
 8009e6c:	463b      	mov	r3, r7
 8009e6e:	4640      	mov	r0, r8
 8009e70:	4649      	mov	r1, r9
 8009e72:	f7f6 fa2b 	bl	80002cc <__adddf3>
 8009e76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	4640      	mov	r0, r8
 8009e80:	4649      	mov	r1, r9
 8009e82:	f7f6 fa21 	bl	80002c8 <__aeabi_dsub>
 8009e86:	4632      	mov	r2, r6
 8009e88:	463b      	mov	r3, r7
 8009e8a:	f7f6 fa1f 	bl	80002cc <__adddf3>
 8009e8e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009e92:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009e96:	ed8a 7b00 	vstr	d7, [sl]
 8009e9a:	e76e      	b.n	8009d7a <__kernel_rem_pio2+0x50a>
 8009e9c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009ea0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009ea4:	4640      	mov	r0, r8
 8009ea6:	4632      	mov	r2, r6
 8009ea8:	463b      	mov	r3, r7
 8009eaa:	4649      	mov	r1, r9
 8009eac:	f7f6 fa0e 	bl	80002cc <__adddf3>
 8009eb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4640      	mov	r0, r8
 8009eba:	4649      	mov	r1, r9
 8009ebc:	f7f6 fa04 	bl	80002c8 <__aeabi_dsub>
 8009ec0:	4632      	mov	r2, r6
 8009ec2:	463b      	mov	r3, r7
 8009ec4:	f7f6 fa02 	bl	80002cc <__adddf3>
 8009ec8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ecc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009ed0:	ed84 7b00 	vstr	d7, [r4]
 8009ed4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009ed8:	e755      	b.n	8009d86 <__kernel_rem_pio2+0x516>
 8009eda:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009ede:	f7f6 f9f5 	bl	80002cc <__adddf3>
 8009ee2:	3d01      	subs	r5, #1
 8009ee4:	e759      	b.n	8009d9a <__kernel_rem_pio2+0x52a>
 8009ee6:	9b01      	ldr	r3, [sp, #4]
 8009ee8:	9a01      	ldr	r2, [sp, #4]
 8009eea:	601d      	str	r5, [r3, #0]
 8009eec:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009ef0:	605c      	str	r4, [r3, #4]
 8009ef2:	609f      	str	r7, [r3, #8]
 8009ef4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009ef8:	60d3      	str	r3, [r2, #12]
 8009efa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009efe:	6110      	str	r0, [r2, #16]
 8009f00:	6153      	str	r3, [r2, #20]
 8009f02:	e728      	b.n	8009d56 <__kernel_rem_pio2+0x4e6>
 8009f04:	41700000 	.word	0x41700000
 8009f08:	3e700000 	.word	0x3e700000
 8009f0c:	00000000 	.word	0x00000000

08009f10 <__kernel_sin>:
 8009f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f14:	ed2d 8b04 	vpush	{d8-d9}
 8009f18:	eeb0 8a41 	vmov.f32	s16, s2
 8009f1c:	eef0 8a61 	vmov.f32	s17, s3
 8009f20:	ec55 4b10 	vmov	r4, r5, d0
 8009f24:	b083      	sub	sp, #12
 8009f26:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009f2a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009f2e:	9001      	str	r0, [sp, #4]
 8009f30:	da06      	bge.n	8009f40 <__kernel_sin+0x30>
 8009f32:	ee10 0a10 	vmov	r0, s0
 8009f36:	4629      	mov	r1, r5
 8009f38:	f7f6 fe2e 	bl	8000b98 <__aeabi_d2iz>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	d051      	beq.n	8009fe4 <__kernel_sin+0xd4>
 8009f40:	4622      	mov	r2, r4
 8009f42:	462b      	mov	r3, r5
 8009f44:	4620      	mov	r0, r4
 8009f46:	4629      	mov	r1, r5
 8009f48:	f7f6 fb76 	bl	8000638 <__aeabi_dmul>
 8009f4c:	4682      	mov	sl, r0
 8009f4e:	468b      	mov	fp, r1
 8009f50:	4602      	mov	r2, r0
 8009f52:	460b      	mov	r3, r1
 8009f54:	4620      	mov	r0, r4
 8009f56:	4629      	mov	r1, r5
 8009f58:	f7f6 fb6e 	bl	8000638 <__aeabi_dmul>
 8009f5c:	a341      	add	r3, pc, #260	; (adr r3, 800a064 <__kernel_sin+0x154>)
 8009f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f62:	4680      	mov	r8, r0
 8009f64:	4689      	mov	r9, r1
 8009f66:	4650      	mov	r0, sl
 8009f68:	4659      	mov	r1, fp
 8009f6a:	f7f6 fb65 	bl	8000638 <__aeabi_dmul>
 8009f6e:	a33f      	add	r3, pc, #252	; (adr r3, 800a06c <__kernel_sin+0x15c>)
 8009f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f74:	f7f6 f9a8 	bl	80002c8 <__aeabi_dsub>
 8009f78:	4652      	mov	r2, sl
 8009f7a:	465b      	mov	r3, fp
 8009f7c:	f7f6 fb5c 	bl	8000638 <__aeabi_dmul>
 8009f80:	a33c      	add	r3, pc, #240	; (adr r3, 800a074 <__kernel_sin+0x164>)
 8009f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f86:	f7f6 f9a1 	bl	80002cc <__adddf3>
 8009f8a:	4652      	mov	r2, sl
 8009f8c:	465b      	mov	r3, fp
 8009f8e:	f7f6 fb53 	bl	8000638 <__aeabi_dmul>
 8009f92:	a33a      	add	r3, pc, #232	; (adr r3, 800a07c <__kernel_sin+0x16c>)
 8009f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f98:	f7f6 f996 	bl	80002c8 <__aeabi_dsub>
 8009f9c:	4652      	mov	r2, sl
 8009f9e:	465b      	mov	r3, fp
 8009fa0:	f7f6 fb4a 	bl	8000638 <__aeabi_dmul>
 8009fa4:	a337      	add	r3, pc, #220	; (adr r3, 800a084 <__kernel_sin+0x174>)
 8009fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009faa:	f7f6 f98f 	bl	80002cc <__adddf3>
 8009fae:	9b01      	ldr	r3, [sp, #4]
 8009fb0:	4606      	mov	r6, r0
 8009fb2:	460f      	mov	r7, r1
 8009fb4:	b9eb      	cbnz	r3, 8009ff2 <__kernel_sin+0xe2>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	460b      	mov	r3, r1
 8009fba:	4650      	mov	r0, sl
 8009fbc:	4659      	mov	r1, fp
 8009fbe:	f7f6 fb3b 	bl	8000638 <__aeabi_dmul>
 8009fc2:	a325      	add	r3, pc, #148	; (adr r3, 800a058 <__kernel_sin+0x148>)
 8009fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc8:	f7f6 f97e 	bl	80002c8 <__aeabi_dsub>
 8009fcc:	4642      	mov	r2, r8
 8009fce:	464b      	mov	r3, r9
 8009fd0:	f7f6 fb32 	bl	8000638 <__aeabi_dmul>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4620      	mov	r0, r4
 8009fda:	4629      	mov	r1, r5
 8009fdc:	f7f6 f976 	bl	80002cc <__adddf3>
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	460d      	mov	r5, r1
 8009fe4:	ec45 4b10 	vmov	d0, r4, r5
 8009fe8:	b003      	add	sp, #12
 8009fea:	ecbd 8b04 	vpop	{d8-d9}
 8009fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff2:	4b1b      	ldr	r3, [pc, #108]	; (800a060 <__kernel_sin+0x150>)
 8009ff4:	ec51 0b18 	vmov	r0, r1, d8
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f7f6 fb1d 	bl	8000638 <__aeabi_dmul>
 8009ffe:	4632      	mov	r2, r6
 800a000:	ec41 0b19 	vmov	d9, r0, r1
 800a004:	463b      	mov	r3, r7
 800a006:	4640      	mov	r0, r8
 800a008:	4649      	mov	r1, r9
 800a00a:	f7f6 fb15 	bl	8000638 <__aeabi_dmul>
 800a00e:	4602      	mov	r2, r0
 800a010:	460b      	mov	r3, r1
 800a012:	ec51 0b19 	vmov	r0, r1, d9
 800a016:	f7f6 f957 	bl	80002c8 <__aeabi_dsub>
 800a01a:	4652      	mov	r2, sl
 800a01c:	465b      	mov	r3, fp
 800a01e:	f7f6 fb0b 	bl	8000638 <__aeabi_dmul>
 800a022:	ec53 2b18 	vmov	r2, r3, d8
 800a026:	f7f6 f94f 	bl	80002c8 <__aeabi_dsub>
 800a02a:	a30b      	add	r3, pc, #44	; (adr r3, 800a058 <__kernel_sin+0x148>)
 800a02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a030:	4606      	mov	r6, r0
 800a032:	460f      	mov	r7, r1
 800a034:	4640      	mov	r0, r8
 800a036:	4649      	mov	r1, r9
 800a038:	f7f6 fafe 	bl	8000638 <__aeabi_dmul>
 800a03c:	4602      	mov	r2, r0
 800a03e:	460b      	mov	r3, r1
 800a040:	4630      	mov	r0, r6
 800a042:	4639      	mov	r1, r7
 800a044:	f7f6 f942 	bl	80002cc <__adddf3>
 800a048:	4602      	mov	r2, r0
 800a04a:	460b      	mov	r3, r1
 800a04c:	4620      	mov	r0, r4
 800a04e:	4629      	mov	r1, r5
 800a050:	f7f6 f93a 	bl	80002c8 <__aeabi_dsub>
 800a054:	e7c4      	b.n	8009fe0 <__kernel_sin+0xd0>
 800a056:	bf00      	nop
 800a058:	55555549 	.word	0x55555549
 800a05c:	3fc55555 	.word	0x3fc55555
 800a060:	3fe00000 	.word	0x3fe00000
 800a064:	5acfd57c 	.word	0x5acfd57c
 800a068:	3de5d93a 	.word	0x3de5d93a
 800a06c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a070:	3e5ae5e6 	.word	0x3e5ae5e6
 800a074:	57b1fe7d 	.word	0x57b1fe7d
 800a078:	3ec71de3 	.word	0x3ec71de3
 800a07c:	19c161d5 	.word	0x19c161d5
 800a080:	3f2a01a0 	.word	0x3f2a01a0
 800a084:	1110f8a6 	.word	0x1110f8a6
 800a088:	3f811111 	.word	0x3f811111
 800a08c:	00000000 	.word	0x00000000

0800a090 <atan>:
 800a090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a094:	ec55 4b10 	vmov	r4, r5, d0
 800a098:	4bc3      	ldr	r3, [pc, #780]	; (800a3a8 <atan+0x318>)
 800a09a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a09e:	429e      	cmp	r6, r3
 800a0a0:	46ab      	mov	fp, r5
 800a0a2:	dd18      	ble.n	800a0d6 <atan+0x46>
 800a0a4:	4bc1      	ldr	r3, [pc, #772]	; (800a3ac <atan+0x31c>)
 800a0a6:	429e      	cmp	r6, r3
 800a0a8:	dc01      	bgt.n	800a0ae <atan+0x1e>
 800a0aa:	d109      	bne.n	800a0c0 <atan+0x30>
 800a0ac:	b144      	cbz	r4, 800a0c0 <atan+0x30>
 800a0ae:	4622      	mov	r2, r4
 800a0b0:	462b      	mov	r3, r5
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	4629      	mov	r1, r5
 800a0b6:	f7f6 f909 	bl	80002cc <__adddf3>
 800a0ba:	4604      	mov	r4, r0
 800a0bc:	460d      	mov	r5, r1
 800a0be:	e006      	b.n	800a0ce <atan+0x3e>
 800a0c0:	f1bb 0f00 	cmp.w	fp, #0
 800a0c4:	f300 8131 	bgt.w	800a32a <atan+0x29a>
 800a0c8:	a59b      	add	r5, pc, #620	; (adr r5, 800a338 <atan+0x2a8>)
 800a0ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a0ce:	ec45 4b10 	vmov	d0, r4, r5
 800a0d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0d6:	4bb6      	ldr	r3, [pc, #728]	; (800a3b0 <atan+0x320>)
 800a0d8:	429e      	cmp	r6, r3
 800a0da:	dc14      	bgt.n	800a106 <atan+0x76>
 800a0dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a0e0:	429e      	cmp	r6, r3
 800a0e2:	dc0d      	bgt.n	800a100 <atan+0x70>
 800a0e4:	a396      	add	r3, pc, #600	; (adr r3, 800a340 <atan+0x2b0>)
 800a0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ea:	ee10 0a10 	vmov	r0, s0
 800a0ee:	4629      	mov	r1, r5
 800a0f0:	f7f6 f8ec 	bl	80002cc <__adddf3>
 800a0f4:	4baf      	ldr	r3, [pc, #700]	; (800a3b4 <atan+0x324>)
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f7f6 fd2e 	bl	8000b58 <__aeabi_dcmpgt>
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d1e6      	bne.n	800a0ce <atan+0x3e>
 800a100:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a104:	e02b      	b.n	800a15e <atan+0xce>
 800a106:	f000 f963 	bl	800a3d0 <fabs>
 800a10a:	4bab      	ldr	r3, [pc, #684]	; (800a3b8 <atan+0x328>)
 800a10c:	429e      	cmp	r6, r3
 800a10e:	ec55 4b10 	vmov	r4, r5, d0
 800a112:	f300 80bf 	bgt.w	800a294 <atan+0x204>
 800a116:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a11a:	429e      	cmp	r6, r3
 800a11c:	f300 80a0 	bgt.w	800a260 <atan+0x1d0>
 800a120:	ee10 2a10 	vmov	r2, s0
 800a124:	ee10 0a10 	vmov	r0, s0
 800a128:	462b      	mov	r3, r5
 800a12a:	4629      	mov	r1, r5
 800a12c:	f7f6 f8ce 	bl	80002cc <__adddf3>
 800a130:	4ba0      	ldr	r3, [pc, #640]	; (800a3b4 <atan+0x324>)
 800a132:	2200      	movs	r2, #0
 800a134:	f7f6 f8c8 	bl	80002c8 <__aeabi_dsub>
 800a138:	2200      	movs	r2, #0
 800a13a:	4606      	mov	r6, r0
 800a13c:	460f      	mov	r7, r1
 800a13e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a142:	4620      	mov	r0, r4
 800a144:	4629      	mov	r1, r5
 800a146:	f7f6 f8c1 	bl	80002cc <__adddf3>
 800a14a:	4602      	mov	r2, r0
 800a14c:	460b      	mov	r3, r1
 800a14e:	4630      	mov	r0, r6
 800a150:	4639      	mov	r1, r7
 800a152:	f7f6 fb9b 	bl	800088c <__aeabi_ddiv>
 800a156:	f04f 0a00 	mov.w	sl, #0
 800a15a:	4604      	mov	r4, r0
 800a15c:	460d      	mov	r5, r1
 800a15e:	4622      	mov	r2, r4
 800a160:	462b      	mov	r3, r5
 800a162:	4620      	mov	r0, r4
 800a164:	4629      	mov	r1, r5
 800a166:	f7f6 fa67 	bl	8000638 <__aeabi_dmul>
 800a16a:	4602      	mov	r2, r0
 800a16c:	460b      	mov	r3, r1
 800a16e:	4680      	mov	r8, r0
 800a170:	4689      	mov	r9, r1
 800a172:	f7f6 fa61 	bl	8000638 <__aeabi_dmul>
 800a176:	a374      	add	r3, pc, #464	; (adr r3, 800a348 <atan+0x2b8>)
 800a178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17c:	4606      	mov	r6, r0
 800a17e:	460f      	mov	r7, r1
 800a180:	f7f6 fa5a 	bl	8000638 <__aeabi_dmul>
 800a184:	a372      	add	r3, pc, #456	; (adr r3, 800a350 <atan+0x2c0>)
 800a186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18a:	f7f6 f89f 	bl	80002cc <__adddf3>
 800a18e:	4632      	mov	r2, r6
 800a190:	463b      	mov	r3, r7
 800a192:	f7f6 fa51 	bl	8000638 <__aeabi_dmul>
 800a196:	a370      	add	r3, pc, #448	; (adr r3, 800a358 <atan+0x2c8>)
 800a198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19c:	f7f6 f896 	bl	80002cc <__adddf3>
 800a1a0:	4632      	mov	r2, r6
 800a1a2:	463b      	mov	r3, r7
 800a1a4:	f7f6 fa48 	bl	8000638 <__aeabi_dmul>
 800a1a8:	a36d      	add	r3, pc, #436	; (adr r3, 800a360 <atan+0x2d0>)
 800a1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ae:	f7f6 f88d 	bl	80002cc <__adddf3>
 800a1b2:	4632      	mov	r2, r6
 800a1b4:	463b      	mov	r3, r7
 800a1b6:	f7f6 fa3f 	bl	8000638 <__aeabi_dmul>
 800a1ba:	a36b      	add	r3, pc, #428	; (adr r3, 800a368 <atan+0x2d8>)
 800a1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c0:	f7f6 f884 	bl	80002cc <__adddf3>
 800a1c4:	4632      	mov	r2, r6
 800a1c6:	463b      	mov	r3, r7
 800a1c8:	f7f6 fa36 	bl	8000638 <__aeabi_dmul>
 800a1cc:	a368      	add	r3, pc, #416	; (adr r3, 800a370 <atan+0x2e0>)
 800a1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d2:	f7f6 f87b 	bl	80002cc <__adddf3>
 800a1d6:	4642      	mov	r2, r8
 800a1d8:	464b      	mov	r3, r9
 800a1da:	f7f6 fa2d 	bl	8000638 <__aeabi_dmul>
 800a1de:	a366      	add	r3, pc, #408	; (adr r3, 800a378 <atan+0x2e8>)
 800a1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e4:	4680      	mov	r8, r0
 800a1e6:	4689      	mov	r9, r1
 800a1e8:	4630      	mov	r0, r6
 800a1ea:	4639      	mov	r1, r7
 800a1ec:	f7f6 fa24 	bl	8000638 <__aeabi_dmul>
 800a1f0:	a363      	add	r3, pc, #396	; (adr r3, 800a380 <atan+0x2f0>)
 800a1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f6:	f7f6 f867 	bl	80002c8 <__aeabi_dsub>
 800a1fa:	4632      	mov	r2, r6
 800a1fc:	463b      	mov	r3, r7
 800a1fe:	f7f6 fa1b 	bl	8000638 <__aeabi_dmul>
 800a202:	a361      	add	r3, pc, #388	; (adr r3, 800a388 <atan+0x2f8>)
 800a204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a208:	f7f6 f85e 	bl	80002c8 <__aeabi_dsub>
 800a20c:	4632      	mov	r2, r6
 800a20e:	463b      	mov	r3, r7
 800a210:	f7f6 fa12 	bl	8000638 <__aeabi_dmul>
 800a214:	a35e      	add	r3, pc, #376	; (adr r3, 800a390 <atan+0x300>)
 800a216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21a:	f7f6 f855 	bl	80002c8 <__aeabi_dsub>
 800a21e:	4632      	mov	r2, r6
 800a220:	463b      	mov	r3, r7
 800a222:	f7f6 fa09 	bl	8000638 <__aeabi_dmul>
 800a226:	a35c      	add	r3, pc, #368	; (adr r3, 800a398 <atan+0x308>)
 800a228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22c:	f7f6 f84c 	bl	80002c8 <__aeabi_dsub>
 800a230:	4632      	mov	r2, r6
 800a232:	463b      	mov	r3, r7
 800a234:	f7f6 fa00 	bl	8000638 <__aeabi_dmul>
 800a238:	4602      	mov	r2, r0
 800a23a:	460b      	mov	r3, r1
 800a23c:	4640      	mov	r0, r8
 800a23e:	4649      	mov	r1, r9
 800a240:	f7f6 f844 	bl	80002cc <__adddf3>
 800a244:	4622      	mov	r2, r4
 800a246:	462b      	mov	r3, r5
 800a248:	f7f6 f9f6 	bl	8000638 <__aeabi_dmul>
 800a24c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800a250:	4602      	mov	r2, r0
 800a252:	460b      	mov	r3, r1
 800a254:	d14b      	bne.n	800a2ee <atan+0x25e>
 800a256:	4620      	mov	r0, r4
 800a258:	4629      	mov	r1, r5
 800a25a:	f7f6 f835 	bl	80002c8 <__aeabi_dsub>
 800a25e:	e72c      	b.n	800a0ba <atan+0x2a>
 800a260:	ee10 0a10 	vmov	r0, s0
 800a264:	4b53      	ldr	r3, [pc, #332]	; (800a3b4 <atan+0x324>)
 800a266:	2200      	movs	r2, #0
 800a268:	4629      	mov	r1, r5
 800a26a:	f7f6 f82d 	bl	80002c8 <__aeabi_dsub>
 800a26e:	4b51      	ldr	r3, [pc, #324]	; (800a3b4 <atan+0x324>)
 800a270:	4606      	mov	r6, r0
 800a272:	460f      	mov	r7, r1
 800a274:	2200      	movs	r2, #0
 800a276:	4620      	mov	r0, r4
 800a278:	4629      	mov	r1, r5
 800a27a:	f7f6 f827 	bl	80002cc <__adddf3>
 800a27e:	4602      	mov	r2, r0
 800a280:	460b      	mov	r3, r1
 800a282:	4630      	mov	r0, r6
 800a284:	4639      	mov	r1, r7
 800a286:	f7f6 fb01 	bl	800088c <__aeabi_ddiv>
 800a28a:	f04f 0a01 	mov.w	sl, #1
 800a28e:	4604      	mov	r4, r0
 800a290:	460d      	mov	r5, r1
 800a292:	e764      	b.n	800a15e <atan+0xce>
 800a294:	4b49      	ldr	r3, [pc, #292]	; (800a3bc <atan+0x32c>)
 800a296:	429e      	cmp	r6, r3
 800a298:	da1d      	bge.n	800a2d6 <atan+0x246>
 800a29a:	ee10 0a10 	vmov	r0, s0
 800a29e:	4b48      	ldr	r3, [pc, #288]	; (800a3c0 <atan+0x330>)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	4629      	mov	r1, r5
 800a2a4:	f7f6 f810 	bl	80002c8 <__aeabi_dsub>
 800a2a8:	4b45      	ldr	r3, [pc, #276]	; (800a3c0 <atan+0x330>)
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	460f      	mov	r7, r1
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	4629      	mov	r1, r5
 800a2b4:	f7f6 f9c0 	bl	8000638 <__aeabi_dmul>
 800a2b8:	4b3e      	ldr	r3, [pc, #248]	; (800a3b4 <atan+0x324>)
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f7f6 f806 	bl	80002cc <__adddf3>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	4639      	mov	r1, r7
 800a2c8:	f7f6 fae0 	bl	800088c <__aeabi_ddiv>
 800a2cc:	f04f 0a02 	mov.w	sl, #2
 800a2d0:	4604      	mov	r4, r0
 800a2d2:	460d      	mov	r5, r1
 800a2d4:	e743      	b.n	800a15e <atan+0xce>
 800a2d6:	462b      	mov	r3, r5
 800a2d8:	ee10 2a10 	vmov	r2, s0
 800a2dc:	4939      	ldr	r1, [pc, #228]	; (800a3c4 <atan+0x334>)
 800a2de:	2000      	movs	r0, #0
 800a2e0:	f7f6 fad4 	bl	800088c <__aeabi_ddiv>
 800a2e4:	f04f 0a03 	mov.w	sl, #3
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	460d      	mov	r5, r1
 800a2ec:	e737      	b.n	800a15e <atan+0xce>
 800a2ee:	4b36      	ldr	r3, [pc, #216]	; (800a3c8 <atan+0x338>)
 800a2f0:	4e36      	ldr	r6, [pc, #216]	; (800a3cc <atan+0x33c>)
 800a2f2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a2f6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a2fa:	e9da 2300 	ldrd	r2, r3, [sl]
 800a2fe:	f7f5 ffe3 	bl	80002c8 <__aeabi_dsub>
 800a302:	4622      	mov	r2, r4
 800a304:	462b      	mov	r3, r5
 800a306:	f7f5 ffdf 	bl	80002c8 <__aeabi_dsub>
 800a30a:	4602      	mov	r2, r0
 800a30c:	460b      	mov	r3, r1
 800a30e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a312:	f7f5 ffd9 	bl	80002c8 <__aeabi_dsub>
 800a316:	f1bb 0f00 	cmp.w	fp, #0
 800a31a:	4604      	mov	r4, r0
 800a31c:	460d      	mov	r5, r1
 800a31e:	f6bf aed6 	bge.w	800a0ce <atan+0x3e>
 800a322:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a326:	461d      	mov	r5, r3
 800a328:	e6d1      	b.n	800a0ce <atan+0x3e>
 800a32a:	a51d      	add	r5, pc, #116	; (adr r5, 800a3a0 <atan+0x310>)
 800a32c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a330:	e6cd      	b.n	800a0ce <atan+0x3e>
 800a332:	bf00      	nop
 800a334:	f3af 8000 	nop.w
 800a338:	54442d18 	.word	0x54442d18
 800a33c:	bff921fb 	.word	0xbff921fb
 800a340:	8800759c 	.word	0x8800759c
 800a344:	7e37e43c 	.word	0x7e37e43c
 800a348:	e322da11 	.word	0xe322da11
 800a34c:	3f90ad3a 	.word	0x3f90ad3a
 800a350:	24760deb 	.word	0x24760deb
 800a354:	3fa97b4b 	.word	0x3fa97b4b
 800a358:	a0d03d51 	.word	0xa0d03d51
 800a35c:	3fb10d66 	.word	0x3fb10d66
 800a360:	c54c206e 	.word	0xc54c206e
 800a364:	3fb745cd 	.word	0x3fb745cd
 800a368:	920083ff 	.word	0x920083ff
 800a36c:	3fc24924 	.word	0x3fc24924
 800a370:	5555550d 	.word	0x5555550d
 800a374:	3fd55555 	.word	0x3fd55555
 800a378:	2c6a6c2f 	.word	0x2c6a6c2f
 800a37c:	bfa2b444 	.word	0xbfa2b444
 800a380:	52defd9a 	.word	0x52defd9a
 800a384:	3fadde2d 	.word	0x3fadde2d
 800a388:	af749a6d 	.word	0xaf749a6d
 800a38c:	3fb3b0f2 	.word	0x3fb3b0f2
 800a390:	fe231671 	.word	0xfe231671
 800a394:	3fbc71c6 	.word	0x3fbc71c6
 800a398:	9998ebc4 	.word	0x9998ebc4
 800a39c:	3fc99999 	.word	0x3fc99999
 800a3a0:	54442d18 	.word	0x54442d18
 800a3a4:	3ff921fb 	.word	0x3ff921fb
 800a3a8:	440fffff 	.word	0x440fffff
 800a3ac:	7ff00000 	.word	0x7ff00000
 800a3b0:	3fdbffff 	.word	0x3fdbffff
 800a3b4:	3ff00000 	.word	0x3ff00000
 800a3b8:	3ff2ffff 	.word	0x3ff2ffff
 800a3bc:	40038000 	.word	0x40038000
 800a3c0:	3ff80000 	.word	0x3ff80000
 800a3c4:	bff00000 	.word	0xbff00000
 800a3c8:	0800ac70 	.word	0x0800ac70
 800a3cc:	0800ac50 	.word	0x0800ac50

0800a3d0 <fabs>:
 800a3d0:	ec51 0b10 	vmov	r0, r1, d0
 800a3d4:	ee10 2a10 	vmov	r2, s0
 800a3d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a3dc:	ec43 2b10 	vmov	d0, r2, r3
 800a3e0:	4770      	bx	lr
 800a3e2:	0000      	movs	r0, r0
 800a3e4:	0000      	movs	r0, r0
	...

0800a3e8 <floor>:
 800a3e8:	ec51 0b10 	vmov	r0, r1, d0
 800a3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a3f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a3f8:	2e13      	cmp	r6, #19
 800a3fa:	ee10 5a10 	vmov	r5, s0
 800a3fe:	ee10 8a10 	vmov	r8, s0
 800a402:	460c      	mov	r4, r1
 800a404:	dc32      	bgt.n	800a46c <floor+0x84>
 800a406:	2e00      	cmp	r6, #0
 800a408:	da14      	bge.n	800a434 <floor+0x4c>
 800a40a:	a333      	add	r3, pc, #204	; (adr r3, 800a4d8 <floor+0xf0>)
 800a40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a410:	f7f5 ff5c 	bl	80002cc <__adddf3>
 800a414:	2200      	movs	r2, #0
 800a416:	2300      	movs	r3, #0
 800a418:	f7f6 fb9e 	bl	8000b58 <__aeabi_dcmpgt>
 800a41c:	b138      	cbz	r0, 800a42e <floor+0x46>
 800a41e:	2c00      	cmp	r4, #0
 800a420:	da57      	bge.n	800a4d2 <floor+0xea>
 800a422:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a426:	431d      	orrs	r5, r3
 800a428:	d001      	beq.n	800a42e <floor+0x46>
 800a42a:	4c2d      	ldr	r4, [pc, #180]	; (800a4e0 <floor+0xf8>)
 800a42c:	2500      	movs	r5, #0
 800a42e:	4621      	mov	r1, r4
 800a430:	4628      	mov	r0, r5
 800a432:	e025      	b.n	800a480 <floor+0x98>
 800a434:	4f2b      	ldr	r7, [pc, #172]	; (800a4e4 <floor+0xfc>)
 800a436:	4137      	asrs	r7, r6
 800a438:	ea01 0307 	and.w	r3, r1, r7
 800a43c:	4303      	orrs	r3, r0
 800a43e:	d01f      	beq.n	800a480 <floor+0x98>
 800a440:	a325      	add	r3, pc, #148	; (adr r3, 800a4d8 <floor+0xf0>)
 800a442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a446:	f7f5 ff41 	bl	80002cc <__adddf3>
 800a44a:	2200      	movs	r2, #0
 800a44c:	2300      	movs	r3, #0
 800a44e:	f7f6 fb83 	bl	8000b58 <__aeabi_dcmpgt>
 800a452:	2800      	cmp	r0, #0
 800a454:	d0eb      	beq.n	800a42e <floor+0x46>
 800a456:	2c00      	cmp	r4, #0
 800a458:	bfbe      	ittt	lt
 800a45a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a45e:	fa43 f606 	asrlt.w	r6, r3, r6
 800a462:	19a4      	addlt	r4, r4, r6
 800a464:	ea24 0407 	bic.w	r4, r4, r7
 800a468:	2500      	movs	r5, #0
 800a46a:	e7e0      	b.n	800a42e <floor+0x46>
 800a46c:	2e33      	cmp	r6, #51	; 0x33
 800a46e:	dd0b      	ble.n	800a488 <floor+0xa0>
 800a470:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a474:	d104      	bne.n	800a480 <floor+0x98>
 800a476:	ee10 2a10 	vmov	r2, s0
 800a47a:	460b      	mov	r3, r1
 800a47c:	f7f5 ff26 	bl	80002cc <__adddf3>
 800a480:	ec41 0b10 	vmov	d0, r0, r1
 800a484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a488:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a48c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a490:	fa23 f707 	lsr.w	r7, r3, r7
 800a494:	4207      	tst	r7, r0
 800a496:	d0f3      	beq.n	800a480 <floor+0x98>
 800a498:	a30f      	add	r3, pc, #60	; (adr r3, 800a4d8 <floor+0xf0>)
 800a49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49e:	f7f5 ff15 	bl	80002cc <__adddf3>
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	f7f6 fb57 	bl	8000b58 <__aeabi_dcmpgt>
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	d0bf      	beq.n	800a42e <floor+0x46>
 800a4ae:	2c00      	cmp	r4, #0
 800a4b0:	da02      	bge.n	800a4b8 <floor+0xd0>
 800a4b2:	2e14      	cmp	r6, #20
 800a4b4:	d103      	bne.n	800a4be <floor+0xd6>
 800a4b6:	3401      	adds	r4, #1
 800a4b8:	ea25 0507 	bic.w	r5, r5, r7
 800a4bc:	e7b7      	b.n	800a42e <floor+0x46>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a4c4:	fa03 f606 	lsl.w	r6, r3, r6
 800a4c8:	4435      	add	r5, r6
 800a4ca:	4545      	cmp	r5, r8
 800a4cc:	bf38      	it	cc
 800a4ce:	18e4      	addcc	r4, r4, r3
 800a4d0:	e7f2      	b.n	800a4b8 <floor+0xd0>
 800a4d2:	2500      	movs	r5, #0
 800a4d4:	462c      	mov	r4, r5
 800a4d6:	e7aa      	b.n	800a42e <floor+0x46>
 800a4d8:	8800759c 	.word	0x8800759c
 800a4dc:	7e37e43c 	.word	0x7e37e43c
 800a4e0:	bff00000 	.word	0xbff00000
 800a4e4:	000fffff 	.word	0x000fffff

0800a4e8 <nan>:
 800a4e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a4f0 <nan+0x8>
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	00000000 	.word	0x00000000
 800a4f4:	7ff80000 	.word	0x7ff80000

0800a4f8 <scalbn>:
 800a4f8:	b570      	push	{r4, r5, r6, lr}
 800a4fa:	ec55 4b10 	vmov	r4, r5, d0
 800a4fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a502:	4606      	mov	r6, r0
 800a504:	462b      	mov	r3, r5
 800a506:	b99a      	cbnz	r2, 800a530 <scalbn+0x38>
 800a508:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a50c:	4323      	orrs	r3, r4
 800a50e:	d036      	beq.n	800a57e <scalbn+0x86>
 800a510:	4b39      	ldr	r3, [pc, #228]	; (800a5f8 <scalbn+0x100>)
 800a512:	4629      	mov	r1, r5
 800a514:	ee10 0a10 	vmov	r0, s0
 800a518:	2200      	movs	r2, #0
 800a51a:	f7f6 f88d 	bl	8000638 <__aeabi_dmul>
 800a51e:	4b37      	ldr	r3, [pc, #220]	; (800a5fc <scalbn+0x104>)
 800a520:	429e      	cmp	r6, r3
 800a522:	4604      	mov	r4, r0
 800a524:	460d      	mov	r5, r1
 800a526:	da10      	bge.n	800a54a <scalbn+0x52>
 800a528:	a32b      	add	r3, pc, #172	; (adr r3, 800a5d8 <scalbn+0xe0>)
 800a52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52e:	e03a      	b.n	800a5a6 <scalbn+0xae>
 800a530:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a534:	428a      	cmp	r2, r1
 800a536:	d10c      	bne.n	800a552 <scalbn+0x5a>
 800a538:	ee10 2a10 	vmov	r2, s0
 800a53c:	4620      	mov	r0, r4
 800a53e:	4629      	mov	r1, r5
 800a540:	f7f5 fec4 	bl	80002cc <__adddf3>
 800a544:	4604      	mov	r4, r0
 800a546:	460d      	mov	r5, r1
 800a548:	e019      	b.n	800a57e <scalbn+0x86>
 800a54a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a54e:	460b      	mov	r3, r1
 800a550:	3a36      	subs	r2, #54	; 0x36
 800a552:	4432      	add	r2, r6
 800a554:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a558:	428a      	cmp	r2, r1
 800a55a:	dd08      	ble.n	800a56e <scalbn+0x76>
 800a55c:	2d00      	cmp	r5, #0
 800a55e:	a120      	add	r1, pc, #128	; (adr r1, 800a5e0 <scalbn+0xe8>)
 800a560:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a564:	da1c      	bge.n	800a5a0 <scalbn+0xa8>
 800a566:	a120      	add	r1, pc, #128	; (adr r1, 800a5e8 <scalbn+0xf0>)
 800a568:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a56c:	e018      	b.n	800a5a0 <scalbn+0xa8>
 800a56e:	2a00      	cmp	r2, #0
 800a570:	dd08      	ble.n	800a584 <scalbn+0x8c>
 800a572:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a576:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a57a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a57e:	ec45 4b10 	vmov	d0, r4, r5
 800a582:	bd70      	pop	{r4, r5, r6, pc}
 800a584:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a588:	da19      	bge.n	800a5be <scalbn+0xc6>
 800a58a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a58e:	429e      	cmp	r6, r3
 800a590:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a594:	dd0a      	ble.n	800a5ac <scalbn+0xb4>
 800a596:	a112      	add	r1, pc, #72	; (adr r1, 800a5e0 <scalbn+0xe8>)
 800a598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1e2      	bne.n	800a566 <scalbn+0x6e>
 800a5a0:	a30f      	add	r3, pc, #60	; (adr r3, 800a5e0 <scalbn+0xe8>)
 800a5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a6:	f7f6 f847 	bl	8000638 <__aeabi_dmul>
 800a5aa:	e7cb      	b.n	800a544 <scalbn+0x4c>
 800a5ac:	a10a      	add	r1, pc, #40	; (adr r1, 800a5d8 <scalbn+0xe0>)
 800a5ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d0b8      	beq.n	800a528 <scalbn+0x30>
 800a5b6:	a10e      	add	r1, pc, #56	; (adr r1, 800a5f0 <scalbn+0xf8>)
 800a5b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5bc:	e7b4      	b.n	800a528 <scalbn+0x30>
 800a5be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a5c2:	3236      	adds	r2, #54	; 0x36
 800a5c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a5c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	4b0c      	ldr	r3, [pc, #48]	; (800a600 <scalbn+0x108>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	e7e8      	b.n	800a5a6 <scalbn+0xae>
 800a5d4:	f3af 8000 	nop.w
 800a5d8:	c2f8f359 	.word	0xc2f8f359
 800a5dc:	01a56e1f 	.word	0x01a56e1f
 800a5e0:	8800759c 	.word	0x8800759c
 800a5e4:	7e37e43c 	.word	0x7e37e43c
 800a5e8:	8800759c 	.word	0x8800759c
 800a5ec:	fe37e43c 	.word	0xfe37e43c
 800a5f0:	c2f8f359 	.word	0xc2f8f359
 800a5f4:	81a56e1f 	.word	0x81a56e1f
 800a5f8:	43500000 	.word	0x43500000
 800a5fc:	ffff3cb0 	.word	0xffff3cb0
 800a600:	3c900000 	.word	0x3c900000

0800a604 <_init>:
 800a604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a606:	bf00      	nop
 800a608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a60a:	bc08      	pop	{r3}
 800a60c:	469e      	mov	lr, r3
 800a60e:	4770      	bx	lr

0800a610 <_fini>:
 800a610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a612:	bf00      	nop
 800a614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a616:	bc08      	pop	{r3}
 800a618:	469e      	mov	lr, r3
 800a61a:	4770      	bx	lr
