
steppingmotor_TIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003310  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003498  08003498  00013498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800351c  0800351c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800351c  0800351c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800351c  0800351c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800351c  0800351c  0001351c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003520  08003520  00013520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000fc  200000fc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d90e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001859  00000000  00000000  0002d94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b88  00000000  00000000  0002f1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b00  00000000  00000000  0002fd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a50b  00000000  00000000  00030830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e6e4  00000000  00000000  0004ad3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0577  00000000  00000000  0005941f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f9996  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030cc  00000000  00000000  000f99e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003480 	.word	0x08003480

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003480 	.word	0x08003480

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b5b0      	push	{r4, r5, r7, lr}
 80001ca:	b094      	sub	sp, #80	; 0x50
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 faaf 	bl	8000730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f8a9 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f969 	bl	80004ac <MX_GPIO_Init>
  MX_TIM3_Init();
 80001da:	f000 f8e7 	bl	80003ac <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80001de:	f000 f935 	bl	800044c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80001e2:	4849      	ldr	r0, [pc, #292]	; (8000308 <main+0x140>)
 80001e4:	f002 f872 	bl	80022cc <HAL_TIM_Base_Start_IT>
  uint8_t rxbuf[1];
  char start[] ="1:front,2:back\r\n";
 80001e8:	4b48      	ldr	r3, [pc, #288]	; (800030c <main+0x144>)
 80001ea:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80001ee:	461d      	mov	r5, r3
 80001f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f4:	682b      	ldr	r3, [r5, #0]
 80001f6:	7023      	strb	r3, [r4, #0]
  char front[] ="front turn\r\n";
 80001f8:	4b45      	ldr	r3, [pc, #276]	; (8000310 <main+0x148>)
 80001fa:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80001fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000200:	c407      	stmia	r4!, {r0, r1, r2}
 8000202:	7023      	strb	r3, [r4, #0]
  char back[] ="back turn\r\n";
 8000204:	4a43      	ldr	r2, [pc, #268]	; (8000314 <main+0x14c>)
 8000206:	f107 031c 	add.w	r3, r7, #28
 800020a:	ca07      	ldmia	r2, {r0, r1, r2}
 800020c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  char stop[] ="stop\r\n";
 8000210:	4a41      	ldr	r2, [pc, #260]	; (8000318 <main+0x150>)
 8000212:	f107 0314 	add.w	r3, r7, #20
 8000216:	e892 0003 	ldmia.w	r2, {r0, r1}
 800021a:	6018      	str	r0, [r3, #0]
 800021c:	3304      	adds	r3, #4
 800021e:	8019      	strh	r1, [r3, #0]
 8000220:	3302      	adds	r3, #2
 8000222:	0c0a      	lsrs	r2, r1, #16
 8000224:	701a      	strb	r2, [r3, #0]
  char nonans[] ="Not Understand\r\n";
 8000226:	4b3d      	ldr	r3, [pc, #244]	; (800031c <main+0x154>)
 8000228:	463c      	mov	r4, r7
 800022a:	461d      	mov	r5, r3
 800022c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800022e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000230:	682b      	ldr	r3, [r5, #0]
 8000232:	7023      	strb	r3, [r4, #0]

  HAL_UART_Transmit(&huart2,(uint8_t *)start,sizeof(start),3000);
 8000234:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000238:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023c:	2211      	movs	r2, #17
 800023e:	4838      	ldr	r0, [pc, #224]	; (8000320 <main+0x158>)
 8000240:	f002 fca6 	bl	8002b90 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive(&huart2,rxbuf, sizeof(rxbuf), 100);
 8000244:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8000248:	2364      	movs	r3, #100	; 0x64
 800024a:	2201      	movs	r2, #1
 800024c:	4834      	ldr	r0, [pc, #208]	; (8000320 <main+0x158>)
 800024e:	f002 fd33 	bl	8002cb8 <HAL_UART_Receive>
	  	  	  if (rxbuf[0] != 0){
 8000252:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000256:	2b00      	cmp	r3, #0
 8000258:	d0f4      	beq.n	8000244 <main+0x7c>
	  	  		  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
	  	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,RESET);
 800025a:	2200      	movs	r2, #0
 800025c:	2120      	movs	r1, #32
 800025e:	4831      	ldr	r0, [pc, #196]	; (8000324 <main+0x15c>)
 8000260:	f000 fd50 	bl	8000d04 <HAL_GPIO_WritePin>
	  	  		  HAL_UART_Transmit(&huart2,(uint8_t *)start, sizeof(start),3000);
 8000264:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000268:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800026c:	2211      	movs	r2, #17
 800026e:	482c      	ldr	r0, [pc, #176]	; (8000320 <main+0x158>)
 8000270:	f002 fc8e 	bl	8002b90 <HAL_UART_Transmit>
	  	  		  if(rxbuf[0] == '1'){
 8000274:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000278:	2b31      	cmp	r3, #49	; 0x31
 800027a:	d110      	bne.n	800029e <main+0xd6>
	  	  			  HAL_UART_Transmit(&huart2,(uint8_t *)front, sizeof(front),3000);
 800027c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000280:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000284:	220d      	movs	r2, #13
 8000286:	4826      	ldr	r0, [pc, #152]	; (8000320 <main+0x158>)
 8000288:	f002 fc82 	bl	8002b90 <HAL_UART_Transmit>
	  	  			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2108      	movs	r1, #8
 8000290:	4824      	ldr	r0, [pc, #144]	; (8000324 <main+0x15c>)
 8000292:	f000 fd37 	bl	8000d04 <HAL_GPIO_WritePin>
	  	  		  		  rxbuf[0]=0;
 8000296:	2300      	movs	r3, #0
 8000298:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 800029c:	e7d2      	b.n	8000244 <main+0x7c>
	  	  		  	  }
	  	  		  else if(rxbuf[0] == '2'){
 800029e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80002a2:	2b32      	cmp	r3, #50	; 0x32
 80002a4:	d110      	bne.n	80002c8 <main+0x100>
	  	  			  HAL_UART_Transmit(&huart2,(uint8_t *)back, sizeof(back),3000);
 80002a6:	f107 011c 	add.w	r1, r7, #28
 80002aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002ae:	220c      	movs	r2, #12
 80002b0:	481b      	ldr	r0, [pc, #108]	; (8000320 <main+0x158>)
 80002b2:	f002 fc6d 	bl	8002b90 <HAL_UART_Transmit>
	  	  			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2108      	movs	r1, #8
 80002ba:	481a      	ldr	r0, [pc, #104]	; (8000324 <main+0x15c>)
 80002bc:	f000 fd22 	bl	8000d04 <HAL_GPIO_WritePin>
	  	  			  	  rxbuf[0]=0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 80002c6:	e7bd      	b.n	8000244 <main+0x7c>
	  	  		  	 }
	  	  		  else if(rxbuf[0] == '3'){
 80002c8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80002cc:	2b33      	cmp	r3, #51	; 0x33
 80002ce:	d110      	bne.n	80002f2 <main+0x12a>
	  	  			  HAL_UART_Transmit(&huart2,(uint8_t *)stop, sizeof(stop),3000);
 80002d0:	f107 0114 	add.w	r1, r7, #20
 80002d4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002d8:	2207      	movs	r2, #7
 80002da:	4811      	ldr	r0, [pc, #68]	; (8000320 <main+0x158>)
 80002dc:	f002 fc58 	bl	8002b90 <HAL_UART_Transmit>
	  	  			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,SET);
 80002e0:	2201      	movs	r2, #1
 80002e2:	2120      	movs	r1, #32
 80002e4:	480f      	ldr	r0, [pc, #60]	; (8000324 <main+0x15c>)
 80002e6:	f000 fd0d 	bl	8000d04 <HAL_GPIO_WritePin>
	  	  			  	  rxbuf[0]=0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 80002f0:	e7a8      	b.n	8000244 <main+0x7c>
	  	  		  	 }
	  	  		  else{
	  	  			  HAL_UART_Transmit(&huart2,(uint8_t *)nonans, sizeof(nonans),3000);
 80002f2:	4639      	mov	r1, r7
 80002f4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002f8:	2211      	movs	r2, #17
 80002fa:	4809      	ldr	r0, [pc, #36]	; (8000320 <main+0x158>)
 80002fc:	f002 fc48 	bl	8002b90 <HAL_UART_Transmit>
	  	  			  rxbuf[0]=0;
 8000300:	2300      	movs	r3, #0
 8000302:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	  HAL_UART_Receive(&huart2,rxbuf, sizeof(rxbuf), 100);
 8000306:	e79d      	b.n	8000244 <main+0x7c>
 8000308:	20000028 	.word	0x20000028
 800030c:	08003498 	.word	0x08003498
 8000310:	080034ac 	.word	0x080034ac
 8000314:	080034bc 	.word	0x080034bc
 8000318:	080034c8 	.word	0x080034c8
 800031c:	080034d0 	.word	0x080034d0
 8000320:	20000074 	.word	0x20000074
 8000324:	48000400 	.word	0x48000400

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b090      	sub	sp, #64	; 0x40
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	f107 0318 	add.w	r3, r7, #24
 8000332:	2228      	movs	r2, #40	; 0x28
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f003 f89a 	bl	8003470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
 8000348:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800034a:	2302      	movs	r3, #2
 800034c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034e:	2301      	movs	r3, #1
 8000350:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000352:	2310      	movs	r3, #16
 8000354:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000356:	2302      	movs	r3, #2
 8000358:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800035a:	2300      	movs	r3, #0
 800035c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800035e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000362:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000364:	f107 0318 	add.w	r3, r7, #24
 8000368:	4618      	mov	r0, r3
 800036a:	f000 fce3 	bl	8000d34 <HAL_RCC_OscConfig>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000374:	f000 f8d8 	bl	8000528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000378:	230f      	movs	r3, #15
 800037a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800037c:	2302      	movs	r3, #2
 800037e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000384:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000388:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	2102      	movs	r1, #2
 8000392:	4618      	mov	r0, r3
 8000394:	f001 fd0c 	bl	8001db0 <HAL_RCC_ClockConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800039e:	f000 f8c3 	bl	8000528 <Error_Handler>
  }
}
 80003a2:	bf00      	nop
 80003a4:	3740      	adds	r7, #64	; 0x40
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
	...

080003ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b088      	sub	sp, #32
 80003b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003ca:	4b1e      	ldr	r3, [pc, #120]	; (8000444 <MX_TIM3_Init+0x98>)
 80003cc:	4a1e      	ldr	r2, [pc, #120]	; (8000448 <MX_TIM3_Init+0x9c>)
 80003ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000-1;
 80003d0:	4b1c      	ldr	r3, [pc, #112]	; (8000444 <MX_TIM3_Init+0x98>)
 80003d2:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80003d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d8:	4b1a      	ldr	r3, [pc, #104]	; (8000444 <MX_TIM3_Init+0x98>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80003de:	4b19      	ldr	r3, [pc, #100]	; (8000444 <MX_TIM3_Init+0x98>)
 80003e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e6:	4b17      	ldr	r3, [pc, #92]	; (8000444 <MX_TIM3_Init+0x98>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ec:	4b15      	ldr	r3, [pc, #84]	; (8000444 <MX_TIM3_Init+0x98>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003f2:	4814      	ldr	r0, [pc, #80]	; (8000444 <MX_TIM3_Init+0x98>)
 80003f4:	f001 ff12 	bl	800221c <HAL_TIM_Base_Init>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80003fe:	f000 f893 	bl	8000528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000406:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000408:	f107 0310 	add.w	r3, r7, #16
 800040c:	4619      	mov	r1, r3
 800040e:	480d      	ldr	r0, [pc, #52]	; (8000444 <MX_TIM3_Init+0x98>)
 8000410:	f002 f8d7 	bl	80025c2 <HAL_TIM_ConfigClockSource>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800041a:	f000 f885 	bl	8000528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800041e:	2300      	movs	r3, #0
 8000420:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	4619      	mov	r1, r3
 800042a:	4806      	ldr	r0, [pc, #24]	; (8000444 <MX_TIM3_Init+0x98>)
 800042c:	f002 fad6 	bl	80029dc <HAL_TIMEx_MasterConfigSynchronization>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000436:	f000 f877 	bl	8000528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800043a:	bf00      	nop
 800043c:	3720      	adds	r7, #32
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	20000028 	.word	0x20000028
 8000448:	40000400 	.word	0x40000400

0800044c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000450:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000452:	4a15      	ldr	r2, [pc, #84]	; (80004a8 <MX_USART2_UART_Init+0x5c>)
 8000454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000456:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800045c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800045e:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000466:	2200      	movs	r2, #0
 8000468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800046a:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000472:	220c      	movs	r2, #12
 8000474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000476:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000478:	2200      	movs	r2, #0
 800047a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800047c:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 800047e:	2200      	movs	r2, #0
 8000480:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000484:	2200      	movs	r2, #0
 8000486:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 800048a:	2200      	movs	r2, #0
 800048c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800048e:	4805      	ldr	r0, [pc, #20]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000490:	f002 fb30 	bl	8002af4 <HAL_UART_Init>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800049a:	f000 f845 	bl	8000528 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000074 	.word	0x20000074
 80004a8:	40004400 	.word	0x40004400

080004ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b088      	sub	sp, #32
 80004b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	f107 030c 	add.w	r3, r7, #12
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
 80004c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	4b17      	ldr	r3, [pc, #92]	; (8000520 <MX_GPIO_Init+0x74>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a16      	ldr	r2, [pc, #88]	; (8000520 <MX_GPIO_Init+0x74>)
 80004c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b14      	ldr	r3, [pc, #80]	; (8000520 <MX_GPIO_Init+0x74>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004da:	4b11      	ldr	r3, [pc, #68]	; (8000520 <MX_GPIO_Init+0x74>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a10      	ldr	r2, [pc, #64]	; (8000520 <MX_GPIO_Init+0x74>)
 80004e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <MX_GPIO_Init+0x74>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2138      	movs	r1, #56	; 0x38
 80004f6:	480b      	ldr	r0, [pc, #44]	; (8000524 <MX_GPIO_Init+0x78>)
 80004f8:	f000 fc04 	bl	8000d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80004fc:	2338      	movs	r3, #56	; 0x38
 80004fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000500:	2301      	movs	r3, #1
 8000502:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000508:	2300      	movs	r3, #0
 800050a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	4619      	mov	r1, r3
 8000512:	4804      	ldr	r0, [pc, #16]	; (8000524 <MX_GPIO_Init+0x78>)
 8000514:	f000 fa84 	bl	8000a20 <HAL_GPIO_Init>

}
 8000518:	bf00      	nop
 800051a:	3720      	adds	r7, #32
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40021000 	.word	0x40021000
 8000524:	48000400 	.word	0x48000400

08000528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800052c:	b672      	cpsid	i
}
 800052e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000530:	e7fe      	b.n	8000530 <Error_Handler+0x8>
	...

08000534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <HAL_MspInit+0x44>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <HAL_MspInit+0x44>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6193      	str	r3, [r2, #24]
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <HAL_MspInit+0x44>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <HAL_MspInit+0x44>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	4a08      	ldr	r2, [pc, #32]	; (8000578 <HAL_MspInit+0x44>)
 8000558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055c:	61d3      	str	r3, [r2, #28]
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <HAL_MspInit+0x44>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000

0800057c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_TIM_Base_MspInit+0x44>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d113      	bne.n	80005b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800058e:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <HAL_TIM_Base_MspInit+0x48>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	4a0c      	ldr	r2, [pc, #48]	; (80005c4 <HAL_TIM_Base_MspInit+0x48>)
 8000594:	f043 0302 	orr.w	r3, r3, #2
 8000598:	61d3      	str	r3, [r2, #28]
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <HAL_TIM_Base_MspInit+0x48>)
 800059c:	69db      	ldr	r3, [r3, #28]
 800059e:	f003 0302 	and.w	r3, r3, #2
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	201d      	movs	r0, #29
 80005ac:	f000 fa01 	bl	80009b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80005b0:	201d      	movs	r0, #29
 80005b2:	f000 fa1a 	bl	80009ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40000400 	.word	0x40000400
 80005c4:	40021000 	.word	0x40021000

080005c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a18      	ldr	r2, [pc, #96]	; (8000648 <HAL_UART_MspInit+0x80>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d129      	bne.n	800063e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005ea:	4b18      	ldr	r3, [pc, #96]	; (800064c <HAL_UART_MspInit+0x84>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	4a17      	ldr	r2, [pc, #92]	; (800064c <HAL_UART_MspInit+0x84>)
 80005f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f4:	61d3      	str	r3, [r2, #28]
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <HAL_UART_MspInit+0x84>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <HAL_UART_MspInit+0x84>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a11      	ldr	r2, [pc, #68]	; (800064c <HAL_UART_MspInit+0x84>)
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <HAL_UART_MspInit+0x84>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800061a:	f248 0304 	movw	r3, #32772	; 0x8004
 800061e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000620:	2302      	movs	r3, #2
 8000622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000628:	2303      	movs	r3, #3
 800062a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800062c:	2307      	movs	r3, #7
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	4619      	mov	r1, r3
 8000636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063a:	f000 f9f1 	bl	8000a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800063e:	bf00      	nop
 8000640:	3728      	adds	r7, #40	; 0x28
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40004400 	.word	0x40004400
 800064c:	40021000 	.word	0x40021000

08000650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <NMI_Handler+0x4>

08000656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <HardFault_Handler+0x4>

0800065c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <MemManage_Handler+0x4>

08000662 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000666:	e7fe      	b.n	8000666 <BusFault_Handler+0x4>

08000668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800066c:	e7fe      	b.n	800066c <UsageFault_Handler+0x4>

0800066e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069c:	f000 f88e 	bl	80007bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80006a8:	4802      	ldr	r0, [pc, #8]	; (80006b4 <TIM3_IRQHandler+0x10>)
 80006aa:	f001 fe6b 	bl	8002384 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000028 	.word	0x20000028

080006b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <SystemInit+0x20>)
 80006be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006c2:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <SystemInit+0x20>)
 80006c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000714 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e0:	480d      	ldr	r0, [pc, #52]	; (8000718 <LoopForever+0x6>)
  ldr r1, =_edata
 80006e2:	490e      	ldr	r1, [pc, #56]	; (800071c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e4:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <LoopForever+0xe>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e8:	e002      	b.n	80006f0 <LoopCopyDataInit>

080006ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ee:	3304      	adds	r3, #4

080006f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f4:	d3f9      	bcc.n	80006ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f6:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f8:	4c0b      	ldr	r4, [pc, #44]	; (8000728 <LoopForever+0x16>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006fc:	e001      	b.n	8000702 <LoopFillZerobss>

080006fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000700:	3204      	adds	r2, #4

08000702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000704:	d3fb      	bcc.n	80006fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000706:	f7ff ffd7 	bl	80006b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800070a:	f002 fe8d 	bl	8003428 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800070e:	f7ff fd5b 	bl	80001c8 <main>

08000712 <LoopForever>:

LoopForever:
    b LoopForever
 8000712:	e7fe      	b.n	8000712 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000714:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800071c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000720:	08003524 	.word	0x08003524
  ldr r2, =_sbss
 8000724:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000728:	200000fc 	.word	0x200000fc

0800072c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800072c:	e7fe      	b.n	800072c <ADC1_2_IRQHandler>
	...

08000730 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <HAL_Init+0x28>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a07      	ldr	r2, [pc, #28]	; (8000758 <HAL_Init+0x28>)
 800073a:	f043 0310 	orr.w	r3, r3, #16
 800073e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000740:	2003      	movs	r0, #3
 8000742:	f000 f92b 	bl	800099c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000746:	200f      	movs	r0, #15
 8000748:	f000 f808 	bl	800075c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800074c:	f7ff fef2 	bl	8000534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40022000 	.word	0x40022000

0800075c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_InitTick+0x54>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <HAL_InitTick+0x58>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000772:	fbb3 f3f1 	udiv	r3, r3, r1
 8000776:	fbb2 f3f3 	udiv	r3, r2, r3
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f943 	bl	8000a06 <HAL_SYSTICK_Config>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000786:	2301      	movs	r3, #1
 8000788:	e00e      	b.n	80007a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b0f      	cmp	r3, #15
 800078e:	d80a      	bhi.n	80007a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000790:	2200      	movs	r2, #0
 8000792:	6879      	ldr	r1, [r7, #4]
 8000794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000798:	f000 f90b 	bl	80009b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800079c:	4a06      	ldr	r2, [pc, #24]	; (80007b8 <HAL_InitTick+0x5c>)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007a2:	2300      	movs	r3, #0
 80007a4:	e000      	b.n	80007a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000000 	.word	0x20000000
 80007b4:	20000008 	.word	0x20000008
 80007b8:	20000004 	.word	0x20000004

080007bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_IncTick+0x20>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <HAL_IncTick+0x24>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4413      	add	r3, r2
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <HAL_IncTick+0x24>)
 80007ce:	6013      	str	r3, [r2, #0]
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000008 	.word	0x20000008
 80007e0:	200000f8 	.word	0x200000f8

080007e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80007e8:	4b03      	ldr	r3, [pc, #12]	; (80007f8 <HAL_GetTick+0x14>)
 80007ea:	681b      	ldr	r3, [r3, #0]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	200000f8 	.word	0x200000f8

080007fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082e:	4a04      	ldr	r2, [pc, #16]	; (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	60d3      	str	r3, [r2, #12]
}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <__NVIC_GetPriorityGrouping+0x18>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	f003 0307 	and.w	r3, r3, #7
}
 8000852:	4618      	mov	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	2b00      	cmp	r3, #0
 8000870:	db0b      	blt.n	800088a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	f003 021f 	and.w	r2, r3, #31
 8000878:	4907      	ldr	r1, [pc, #28]	; (8000898 <__NVIC_EnableIRQ+0x38>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	095b      	lsrs	r3, r3, #5
 8000880:	2001      	movs	r0, #1
 8000882:	fa00 f202 	lsl.w	r2, r0, r2
 8000886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000e100 	.word	0xe000e100

0800089c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	6039      	str	r1, [r7, #0]
 80008a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	db0a      	blt.n	80008c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	490c      	ldr	r1, [pc, #48]	; (80008e8 <__NVIC_SetPriority+0x4c>)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	0112      	lsls	r2, r2, #4
 80008bc:	b2d2      	uxtb	r2, r2
 80008be:	440b      	add	r3, r1
 80008c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c4:	e00a      	b.n	80008dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4908      	ldr	r1, [pc, #32]	; (80008ec <__NVIC_SetPriority+0x50>)
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	f003 030f 	and.w	r3, r3, #15
 80008d2:	3b04      	subs	r3, #4
 80008d4:	0112      	lsls	r2, r2, #4
 80008d6:	b2d2      	uxtb	r2, r2
 80008d8:	440b      	add	r3, r1
 80008da:	761a      	strb	r2, [r3, #24]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	e000e100 	.word	0xe000e100
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b089      	sub	sp, #36	; 0x24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	f1c3 0307 	rsb	r3, r3, #7
 800090a:	2b04      	cmp	r3, #4
 800090c:	bf28      	it	cs
 800090e:	2304      	movcs	r3, #4
 8000910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	3304      	adds	r3, #4
 8000916:	2b06      	cmp	r3, #6
 8000918:	d902      	bls.n	8000920 <NVIC_EncodePriority+0x30>
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	3b03      	subs	r3, #3
 800091e:	e000      	b.n	8000922 <NVIC_EncodePriority+0x32>
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43da      	mvns	r2, r3
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	401a      	ands	r2, r3
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000938:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	fa01 f303 	lsl.w	r3, r1, r3
 8000942:	43d9      	mvns	r1, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	4313      	orrs	r3, r2
         );
}
 800094a:	4618      	mov	r0, r3
 800094c:	3724      	adds	r7, #36	; 0x24
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
	...

08000958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3b01      	subs	r3, #1
 8000964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000968:	d301      	bcc.n	800096e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800096a:	2301      	movs	r3, #1
 800096c:	e00f      	b.n	800098e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <SysTick_Config+0x40>)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3b01      	subs	r3, #1
 8000974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000976:	210f      	movs	r1, #15
 8000978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800097c:	f7ff ff8e 	bl	800089c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <SysTick_Config+0x40>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <SysTick_Config+0x40>)
 8000988:	2207      	movs	r2, #7
 800098a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	e000e010 	.word	0xe000e010

0800099c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff ff29 	bl	80007fc <__NVIC_SetPriorityGrouping>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b086      	sub	sp, #24
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	4603      	mov	r3, r0
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
 80009be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009c4:	f7ff ff3e 	bl	8000844 <__NVIC_GetPriorityGrouping>
 80009c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	6978      	ldr	r0, [r7, #20]
 80009d0:	f7ff ff8e 	bl	80008f0 <NVIC_EncodePriority>
 80009d4:	4602      	mov	r2, r0
 80009d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009da:	4611      	mov	r1, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff5d 	bl	800089c <__NVIC_SetPriority>
}
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4603      	mov	r3, r0
 80009f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff31 	bl	8000860 <__NVIC_EnableIRQ>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff ffa2 	bl	8000958 <SysTick_Config>
 8000a14:	4603      	mov	r3, r0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b087      	sub	sp, #28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2e:	e14e      	b.n	8000cce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	2101      	movs	r1, #1
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	f000 8140 	beq.w	8000cc8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f003 0303 	and.w	r3, r3, #3
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d005      	beq.n	8000a60 <HAL_GPIO_Init+0x40>
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f003 0303 	and.w	r3, r3, #3
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d130      	bne.n	8000ac2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	2203      	movs	r2, #3
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	68da      	ldr	r2, [r3, #12]
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a96:	2201      	movs	r2, #1
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	091b      	lsrs	r3, r3, #4
 8000aac:	f003 0201 	and.w	r2, r3, #1
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f003 0303 	and.w	r3, r3, #3
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	d017      	beq.n	8000afe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	2203      	movs	r2, #3
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 0303 	and.w	r3, r3, #3
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d123      	bne.n	8000b52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	08da      	lsrs	r2, r3, #3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3208      	adds	r2, #8
 8000b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	220f      	movs	r2, #15
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	691a      	ldr	r2, [r3, #16]
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	f003 0307 	and.w	r3, r3, #7
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	08da      	lsrs	r2, r3, #3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3208      	adds	r2, #8
 8000b4c:	6939      	ldr	r1, [r7, #16]
 8000b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 0203 	and.w	r2, r3, #3
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f000 809a 	beq.w	8000cc8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b94:	4b55      	ldr	r3, [pc, #340]	; (8000cec <HAL_GPIO_Init+0x2cc>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a54      	ldr	r2, [pc, #336]	; (8000cec <HAL_GPIO_Init+0x2cc>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b52      	ldr	r3, [pc, #328]	; (8000cec <HAL_GPIO_Init+0x2cc>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bac:	4a50      	ldr	r2, [pc, #320]	; (8000cf0 <HAL_GPIO_Init+0x2d0>)
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	089b      	lsrs	r3, r3, #2
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	220f      	movs	r2, #15
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bd6:	d013      	beq.n	8000c00 <HAL_GPIO_Init+0x1e0>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a46      	ldr	r2, [pc, #280]	; (8000cf4 <HAL_GPIO_Init+0x2d4>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d00d      	beq.n	8000bfc <HAL_GPIO_Init+0x1dc>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a45      	ldr	r2, [pc, #276]	; (8000cf8 <HAL_GPIO_Init+0x2d8>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d007      	beq.n	8000bf8 <HAL_GPIO_Init+0x1d8>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a44      	ldr	r2, [pc, #272]	; (8000cfc <HAL_GPIO_Init+0x2dc>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d101      	bne.n	8000bf4 <HAL_GPIO_Init+0x1d4>
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	e006      	b.n	8000c02 <HAL_GPIO_Init+0x1e2>
 8000bf4:	2305      	movs	r3, #5
 8000bf6:	e004      	b.n	8000c02 <HAL_GPIO_Init+0x1e2>
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	e002      	b.n	8000c02 <HAL_GPIO_Init+0x1e2>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e000      	b.n	8000c02 <HAL_GPIO_Init+0x1e2>
 8000c00:	2300      	movs	r3, #0
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	f002 0203 	and.w	r2, r2, #3
 8000c08:	0092      	lsls	r2, r2, #2
 8000c0a:	4093      	lsls	r3, r2
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c12:	4937      	ldr	r1, [pc, #220]	; (8000cf0 <HAL_GPIO_Init+0x2d0>)
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	089b      	lsrs	r3, r3, #2
 8000c18:	3302      	adds	r3, #2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c20:	4b37      	ldr	r3, [pc, #220]	; (8000d00 <HAL_GPIO_Init+0x2e0>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d003      	beq.n	8000c44 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c44:	4a2e      	ldr	r2, [pc, #184]	; (8000d00 <HAL_GPIO_Init+0x2e0>)
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c4a:	4b2d      	ldr	r3, [pc, #180]	; (8000d00 <HAL_GPIO_Init+0x2e0>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	43db      	mvns	r3, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d003      	beq.n	8000c6e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c6e:	4a24      	ldr	r2, [pc, #144]	; (8000d00 <HAL_GPIO_Init+0x2e0>)
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <HAL_GPIO_Init+0x2e0>)
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d003      	beq.n	8000c98 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c98:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <HAL_GPIO_Init+0x2e0>)
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_GPIO_Init+0x2e0>)
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cc2:	4a0f      	ldr	r2, [pc, #60]	; (8000d00 <HAL_GPIO_Init+0x2e0>)
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	f47f aea9 	bne.w	8000a30 <HAL_GPIO_Init+0x10>
  }
}
 8000cde:	bf00      	nop
 8000ce0:	bf00      	nop
 8000ce2:	371c      	adds	r7, #28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010000 	.word	0x40010000
 8000cf4:	48000400 	.word	0x48000400
 8000cf8:	48000800 	.word	0x48000800
 8000cfc:	48000c00 	.word	0x48000c00
 8000d00:	40010400 	.word	0x40010400

08000d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	807b      	strh	r3, [r7, #2]
 8000d10:	4613      	mov	r3, r2
 8000d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d14:	787b      	ldrb	r3, [r7, #1]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d003      	beq.n	8000d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d1a:	887a      	ldrh	r2, [r7, #2]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d20:	e002      	b.n	8000d28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d22:	887a      	ldrh	r2, [r7, #2]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d44:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	f001 b823 	b.w	8001da0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 817d 	beq.w	800106a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d70:	4bbc      	ldr	r3, [pc, #752]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 030c 	and.w	r3, r3, #12
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	d00c      	beq.n	8000d96 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d7c:	4bb9      	ldr	r3, [pc, #740]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 030c 	and.w	r3, r3, #12
 8000d84:	2b08      	cmp	r3, #8
 8000d86:	d15c      	bne.n	8000e42 <HAL_RCC_OscConfig+0x10e>
 8000d88:	4bb6      	ldr	r3, [pc, #728]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d94:	d155      	bne.n	8000e42 <HAL_RCC_OscConfig+0x10e>
 8000d96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d9a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d9e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000da2:	fa93 f3a3 	rbit	r3, r3
 8000da6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000daa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dae:	fab3 f383 	clz	r3, r3
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	095b      	lsrs	r3, r3, #5
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d102      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x94>
 8000dc2:	4ba8      	ldr	r3, [pc, #672]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	e015      	b.n	8000df4 <HAL_RCC_OscConfig+0xc0>
 8000dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dcc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000dd4:	fa93 f3a3 	rbit	r3, r3
 8000dd8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000ddc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000de0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000de4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000de8:	fa93 f3a3 	rbit	r3, r3
 8000dec:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000df0:	4b9c      	ldr	r3, [pc, #624]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000df8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000dfc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e00:	fa92 f2a2 	rbit	r2, r2
 8000e04:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e08:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e0c:	fab2 f282 	clz	r2, r2
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	f042 0220 	orr.w	r2, r2, #32
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	f002 021f 	and.w	r2, r2, #31
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e22:	4013      	ands	r3, r2
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f000 811f 	beq.w	8001068 <HAL_RCC_OscConfig+0x334>
 8000e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f040 8116 	bne.w	8001068 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	f000 bfaf 	b.w	8001da0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e52:	d106      	bne.n	8000e62 <HAL_RCC_OscConfig+0x12e>
 8000e54:	4b83      	ldr	r3, [pc, #524]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a82      	ldr	r2, [pc, #520]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	e036      	b.n	8000ed0 <HAL_RCC_OscConfig+0x19c>
 8000e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d10c      	bne.n	8000e8c <HAL_RCC_OscConfig+0x158>
 8000e72:	4b7c      	ldr	r3, [pc, #496]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a7b      	ldr	r2, [pc, #492]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	4b79      	ldr	r3, [pc, #484]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a78      	ldr	r2, [pc, #480]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	e021      	b.n	8000ed0 <HAL_RCC_OscConfig+0x19c>
 8000e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e9c:	d10c      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x184>
 8000e9e:	4b71      	ldr	r3, [pc, #452]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a70      	ldr	r2, [pc, #448]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	4b6e      	ldr	r3, [pc, #440]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a6d      	ldr	r2, [pc, #436]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	e00b      	b.n	8000ed0 <HAL_RCC_OscConfig+0x19c>
 8000eb8:	4b6a      	ldr	r3, [pc, #424]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a69      	ldr	r2, [pc, #420]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	4b67      	ldr	r3, [pc, #412]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a66      	ldr	r2, [pc, #408]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ece:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ed0:	4b64      	ldr	r3, [pc, #400]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed4:	f023 020f 	bic.w	r2, r3, #15
 8000ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000edc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	495f      	ldr	r1, [pc, #380]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d059      	beq.n	8000fae <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efa:	f7ff fc73 	bl	80007e4 <HAL_GetTick>
 8000efe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f02:	e00a      	b.n	8000f1a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f04:	f7ff fc6e 	bl	80007e4 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	2b64      	cmp	r3, #100	; 0x64
 8000f12:	d902      	bls.n	8000f1a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	f000 bf43 	b.w	8001da0 <HAL_RCC_OscConfig+0x106c>
 8000f1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f1e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f22:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f26:	fa93 f3a3 	rbit	r3, r3
 8000f2a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f2e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f32:	fab3 f383 	clz	r3, r3
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	095b      	lsrs	r3, r3, #5
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d102      	bne.n	8000f4c <HAL_RCC_OscConfig+0x218>
 8000f46:	4b47      	ldr	r3, [pc, #284]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	e015      	b.n	8000f78 <HAL_RCC_OscConfig+0x244>
 8000f4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f50:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f54:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f58:	fa93 f3a3 	rbit	r3, r3
 8000f5c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f64:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f68:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f6c:	fa93 f3a3 	rbit	r3, r3
 8000f70:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f74:	4b3b      	ldr	r3, [pc, #236]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f7c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f80:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f84:	fa92 f2a2 	rbit	r2, r2
 8000f88:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f8c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f90:	fab2 f282 	clz	r2, r2
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	f042 0220 	orr.w	r2, r2, #32
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	f002 021f 	and.w	r2, r2, #31
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0ab      	beq.n	8000f04 <HAL_RCC_OscConfig+0x1d0>
 8000fac:	e05d      	b.n	800106a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fae:	f7ff fc19 	bl	80007e4 <HAL_GetTick>
 8000fb2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb6:	e00a      	b.n	8000fce <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fb8:	f7ff fc14 	bl	80007e4 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b64      	cmp	r3, #100	; 0x64
 8000fc6:	d902      	bls.n	8000fce <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	f000 bee9 	b.w	8001da0 <HAL_RCC_OscConfig+0x106c>
 8000fce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000fda:	fa93 f3a3 	rbit	r3, r3
 8000fde:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000fe2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe6:	fab3 f383 	clz	r3, r3
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	095b      	lsrs	r3, r3, #5
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d102      	bne.n	8001000 <HAL_RCC_OscConfig+0x2cc>
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	e015      	b.n	800102c <HAL_RCC_OscConfig+0x2f8>
 8001000:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001004:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001008:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800100c:	fa93 f3a3 	rbit	r3, r3
 8001010:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001014:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001018:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800101c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001020:	fa93 f3a3 	rbit	r3, r3
 8001024:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 800102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001030:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001034:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001038:	fa92 f2a2 	rbit	r2, r2
 800103c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001040:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001044:	fab2 f282 	clz	r2, r2
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	f042 0220 	orr.w	r2, r2, #32
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	f002 021f 	and.w	r2, r2, #31
 8001054:	2101      	movs	r1, #1
 8001056:	fa01 f202 	lsl.w	r2, r1, r2
 800105a:	4013      	ands	r3, r2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1ab      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x284>
 8001060:	e003      	b.n	800106a <HAL_RCC_OscConfig+0x336>
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800106e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	f000 817d 	beq.w	800137a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001080:	4ba6      	ldr	r3, [pc, #664]	; (800131c <HAL_RCC_OscConfig+0x5e8>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 030c 	and.w	r3, r3, #12
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00b      	beq.n	80010a4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800108c:	4ba3      	ldr	r3, [pc, #652]	; (800131c <HAL_RCC_OscConfig+0x5e8>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 030c 	and.w	r3, r3, #12
 8001094:	2b08      	cmp	r3, #8
 8001096:	d172      	bne.n	800117e <HAL_RCC_OscConfig+0x44a>
 8001098:	4ba0      	ldr	r3, [pc, #640]	; (800131c <HAL_RCC_OscConfig+0x5e8>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d16c      	bne.n	800117e <HAL_RCC_OscConfig+0x44a>
 80010a4:	2302      	movs	r3, #2
 80010a6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010aa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010ae:	fa93 f3a3 	rbit	r3, r3
 80010b2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80010b6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ba:	fab3 f383 	clz	r3, r3
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	095b      	lsrs	r3, r3, #5
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d102      	bne.n	80010d4 <HAL_RCC_OscConfig+0x3a0>
 80010ce:	4b93      	ldr	r3, [pc, #588]	; (800131c <HAL_RCC_OscConfig+0x5e8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	e013      	b.n	80010fc <HAL_RCC_OscConfig+0x3c8>
 80010d4:	2302      	movs	r3, #2
 80010d6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010da:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80010de:	fa93 f3a3 	rbit	r3, r3
 80010e2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010e6:	2302      	movs	r3, #2
 80010e8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80010f0:	fa93 f3a3 	rbit	r3, r3
 80010f4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80010f8:	4b88      	ldr	r3, [pc, #544]	; (800131c <HAL_RCC_OscConfig+0x5e8>)
 80010fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fc:	2202      	movs	r2, #2
 80010fe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001102:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001106:	fa92 f2a2 	rbit	r2, r2
 800110a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800110e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001112:	fab2 f282 	clz	r2, r2
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	f042 0220 	orr.w	r2, r2, #32
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	f002 021f 	and.w	r2, r2, #31
 8001122:	2101      	movs	r1, #1
 8001124:	fa01 f202 	lsl.w	r2, r1, r2
 8001128:	4013      	ands	r3, r2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00a      	beq.n	8001144 <HAL_RCC_OscConfig+0x410>
 800112e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001132:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d002      	beq.n	8001144 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	f000 be2e 	b.w	8001da0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001144:	4b75      	ldr	r3, [pc, #468]	; (800131c <HAL_RCC_OscConfig+0x5e8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800114c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001150:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	21f8      	movs	r1, #248	; 0xf8
 800115a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001162:	fa91 f1a1 	rbit	r1, r1
 8001166:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800116a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800116e:	fab1 f181 	clz	r1, r1
 8001172:	b2c9      	uxtb	r1, r1
 8001174:	408b      	lsls	r3, r1
 8001176:	4969      	ldr	r1, [pc, #420]	; (800131c <HAL_RCC_OscConfig+0x5e8>)
 8001178:	4313      	orrs	r3, r2
 800117a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117c:	e0fd      	b.n	800137a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800117e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001182:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 8088 	beq.w	80012a0 <HAL_RCC_OscConfig+0x56c>
 8001190:	2301      	movs	r3, #1
 8001192:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001196:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800119a:	fa93 f3a3 	rbit	r3, r3
 800119e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80011a2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a6:	fab3 f383 	clz	r3, r3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	461a      	mov	r2, r3
 80011b8:	2301      	movs	r3, #1
 80011ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011bc:	f7ff fb12 	bl	80007e4 <HAL_GetTick>
 80011c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c4:	e00a      	b.n	80011dc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c6:	f7ff fb0d 	bl	80007e4 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d902      	bls.n	80011dc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	f000 bde2 	b.w	8001da0 <HAL_RCC_OscConfig+0x106c>
 80011dc:	2302      	movs	r3, #2
 80011de:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80011e6:	fa93 f3a3 	rbit	r3, r3
 80011ea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80011ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f2:	fab3 f383 	clz	r3, r3
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	095b      	lsrs	r3, r3, #5
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b01      	cmp	r3, #1
 8001204:	d102      	bne.n	800120c <HAL_RCC_OscConfig+0x4d8>
 8001206:	4b45      	ldr	r3, [pc, #276]	; (800131c <HAL_RCC_OscConfig+0x5e8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	e013      	b.n	8001234 <HAL_RCC_OscConfig+0x500>
 800120c:	2302      	movs	r3, #2
 800120e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001212:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001216:	fa93 f3a3 	rbit	r3, r3
 800121a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800121e:	2302      	movs	r3, #2
 8001220:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001224:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001228:	fa93 f3a3 	rbit	r3, r3
 800122c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001230:	4b3a      	ldr	r3, [pc, #232]	; (800131c <HAL_RCC_OscConfig+0x5e8>)
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	2202      	movs	r2, #2
 8001236:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800123a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800123e:	fa92 f2a2 	rbit	r2, r2
 8001242:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001246:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800124a:	fab2 f282 	clz	r2, r2
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	f042 0220 	orr.w	r2, r2, #32
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	f002 021f 	and.w	r2, r2, #31
 800125a:	2101      	movs	r1, #1
 800125c:	fa01 f202 	lsl.w	r2, r1, r2
 8001260:	4013      	ands	r3, r2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0af      	beq.n	80011c6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001266:	4b2d      	ldr	r3, [pc, #180]	; (800131c <HAL_RCC_OscConfig+0x5e8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800126e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001272:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	21f8      	movs	r1, #248	; 0xf8
 800127c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001280:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001284:	fa91 f1a1 	rbit	r1, r1
 8001288:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800128c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001290:	fab1 f181 	clz	r1, r1
 8001294:	b2c9      	uxtb	r1, r1
 8001296:	408b      	lsls	r3, r1
 8001298:	4920      	ldr	r1, [pc, #128]	; (800131c <HAL_RCC_OscConfig+0x5e8>)
 800129a:	4313      	orrs	r3, r2
 800129c:	600b      	str	r3, [r1, #0]
 800129e:	e06c      	b.n	800137a <HAL_RCC_OscConfig+0x646>
 80012a0:	2301      	movs	r3, #1
 80012a2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012aa:	fa93 f3a3 	rbit	r3, r3
 80012ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80012b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b6:	fab3 f383 	clz	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	461a      	mov	r2, r3
 80012c8:	2300      	movs	r3, #0
 80012ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012cc:	f7ff fa8a 	bl	80007e4 <HAL_GetTick>
 80012d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d4:	e00a      	b.n	80012ec <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d6:	f7ff fa85 	bl	80007e4 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d902      	bls.n	80012ec <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	f000 bd5a 	b.w	8001da0 <HAL_RCC_OscConfig+0x106c>
 80012ec:	2302      	movs	r3, #2
 80012ee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80012f6:	fa93 f3a3 	rbit	r3, r3
 80012fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80012fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001302:	fab3 f383 	clz	r3, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	095b      	lsrs	r3, r3, #5
 800130a:	b2db      	uxtb	r3, r3
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b01      	cmp	r3, #1
 8001314:	d104      	bne.n	8001320 <HAL_RCC_OscConfig+0x5ec>
 8001316:	4b01      	ldr	r3, [pc, #4]	; (800131c <HAL_RCC_OscConfig+0x5e8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	e015      	b.n	8001348 <HAL_RCC_OscConfig+0x614>
 800131c:	40021000 	.word	0x40021000
 8001320:	2302      	movs	r3, #2
 8001322:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001332:	2302      	movs	r3, #2
 8001334:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001338:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800133c:	fa93 f3a3 	rbit	r3, r3
 8001340:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001344:	4bc8      	ldr	r3, [pc, #800]	; (8001668 <HAL_RCC_OscConfig+0x934>)
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	2202      	movs	r2, #2
 800134a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800134e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001352:	fa92 f2a2 	rbit	r2, r2
 8001356:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800135a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800135e:	fab2 f282 	clz	r2, r2
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	f042 0220 	orr.w	r2, r2, #32
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	f002 021f 	and.w	r2, r2, #31
 800136e:	2101      	movs	r1, #1
 8001370:	fa01 f202 	lsl.w	r2, r1, r2
 8001374:	4013      	ands	r3, r2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1ad      	bne.n	80012d6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800137a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800137e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 8110 	beq.w	80015b0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001394:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d079      	beq.n	8001494 <HAL_RCC_OscConfig+0x760>
 80013a0:	2301      	movs	r3, #1
 80013a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013aa:	fa93 f3a3 	rbit	r3, r3
 80013ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80013b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013b6:	fab3 f383 	clz	r3, r3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	4bab      	ldr	r3, [pc, #684]	; (800166c <HAL_RCC_OscConfig+0x938>)
 80013c0:	4413      	add	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	461a      	mov	r2, r3
 80013c6:	2301      	movs	r3, #1
 80013c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ca:	f7ff fa0b 	bl	80007e4 <HAL_GetTick>
 80013ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d2:	e00a      	b.n	80013ea <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d4:	f7ff fa06 	bl	80007e4 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d902      	bls.n	80013ea <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	f000 bcdb 	b.w	8001da0 <HAL_RCC_OscConfig+0x106c>
 80013ea:	2302      	movs	r3, #2
 80013ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80013f4:	fa93 f3a3 	rbit	r3, r3
 80013f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80013fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001400:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001404:	2202      	movs	r2, #2
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	fa93 f2a3 	rbit	r2, r3
 8001416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001428:	2202      	movs	r2, #2
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	fa93 f2a3 	rbit	r2, r3
 800143a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800143e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001442:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001444:	4b88      	ldr	r3, [pc, #544]	; (8001668 <HAL_RCC_OscConfig+0x934>)
 8001446:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001450:	2102      	movs	r1, #2
 8001452:	6019      	str	r1, [r3, #0]
 8001454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001458:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	fa93 f1a3 	rbit	r1, r3
 8001462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001466:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800146a:	6019      	str	r1, [r3, #0]
  return result;
 800146c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001470:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	fab3 f383 	clz	r3, r3
 800147a:	b2db      	uxtb	r3, r3
 800147c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001480:	b2db      	uxtb	r3, r3
 8001482:	f003 031f 	and.w	r3, r3, #31
 8001486:	2101      	movs	r1, #1
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	4013      	ands	r3, r2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0a0      	beq.n	80013d4 <HAL_RCC_OscConfig+0x6a0>
 8001492:	e08d      	b.n	80015b0 <HAL_RCC_OscConfig+0x87c>
 8001494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001498:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800149c:	2201      	movs	r2, #1
 800149e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	fa93 f2a3 	rbit	r2, r3
 80014ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014b6:	601a      	str	r2, [r3, #0]
  return result;
 80014b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014c0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c2:	fab3 f383 	clz	r3, r3
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b68      	ldr	r3, [pc, #416]	; (800166c <HAL_RCC_OscConfig+0x938>)
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	461a      	mov	r2, r3
 80014d2:	2300      	movs	r3, #0
 80014d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d6:	f7ff f985 	bl	80007e4 <HAL_GetTick>
 80014da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014de:	e00a      	b.n	80014f6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e0:	f7ff f980 	bl	80007e4 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d902      	bls.n	80014f6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	f000 bc55 	b.w	8001da0 <HAL_RCC_OscConfig+0x106c>
 80014f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014fe:	2202      	movs	r2, #2
 8001500:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001506:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	fa93 f2a3 	rbit	r2, r3
 8001510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001514:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001522:	2202      	movs	r2, #2
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	fa93 f2a3 	rbit	r2, r3
 8001534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001538:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001546:	2202      	movs	r2, #2
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	fa93 f2a3 	rbit	r2, r3
 8001558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001560:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001562:	4b41      	ldr	r3, [pc, #260]	; (8001668 <HAL_RCC_OscConfig+0x934>)
 8001564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800156e:	2102      	movs	r1, #2
 8001570:	6019      	str	r1, [r3, #0]
 8001572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001576:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	fa93 f1a3 	rbit	r1, r3
 8001580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001584:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001588:	6019      	str	r1, [r3, #0]
  return result;
 800158a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	fab3 f383 	clz	r3, r3
 8001598:	b2db      	uxtb	r3, r3
 800159a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	f003 031f 	and.w	r3, r3, #31
 80015a4:	2101      	movs	r1, #1
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d197      	bne.n	80014e0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 81a1 	beq.w	8001908 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015cc:	4b26      	ldr	r3, [pc, #152]	; (8001668 <HAL_RCC_OscConfig+0x934>)
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d116      	bne.n	8001606 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d8:	4b23      	ldr	r3, [pc, #140]	; (8001668 <HAL_RCC_OscConfig+0x934>)
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	4a22      	ldr	r2, [pc, #136]	; (8001668 <HAL_RCC_OscConfig+0x934>)
 80015de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e2:	61d3      	str	r3, [r2, #28]
 80015e4:	4b20      	ldr	r3, [pc, #128]	; (8001668 <HAL_RCC_OscConfig+0x934>)
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80015ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015fe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001600:	2301      	movs	r3, #1
 8001602:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001606:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <HAL_RCC_OscConfig+0x93c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160e:	2b00      	cmp	r3, #0
 8001610:	d11a      	bne.n	8001648 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_RCC_OscConfig+0x93c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a16      	ldr	r2, [pc, #88]	; (8001670 <HAL_RCC_OscConfig+0x93c>)
 8001618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800161e:	f7ff f8e1 	bl	80007e4 <HAL_GetTick>
 8001622:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001626:	e009      	b.n	800163c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001628:	f7ff f8dc 	bl	80007e4 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b64      	cmp	r3, #100	; 0x64
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e3b1      	b.n	8001da0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <HAL_RCC_OscConfig+0x93c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0ef      	beq.n	8001628 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d10d      	bne.n	8001674 <HAL_RCC_OscConfig+0x940>
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <HAL_RCC_OscConfig+0x934>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4a02      	ldr	r2, [pc, #8]	; (8001668 <HAL_RCC_OscConfig+0x934>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6213      	str	r3, [r2, #32]
 8001664:	e03c      	b.n	80016e0 <HAL_RCC_OscConfig+0x9ac>
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000
 800166c:	10908120 	.word	0x10908120
 8001670:	40007000 	.word	0x40007000
 8001674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001678:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d10c      	bne.n	800169e <HAL_RCC_OscConfig+0x96a>
 8001684:	4bc1      	ldr	r3, [pc, #772]	; (800198c <HAL_RCC_OscConfig+0xc58>)
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	4ac0      	ldr	r2, [pc, #768]	; (800198c <HAL_RCC_OscConfig+0xc58>)
 800168a:	f023 0301 	bic.w	r3, r3, #1
 800168e:	6213      	str	r3, [r2, #32]
 8001690:	4bbe      	ldr	r3, [pc, #760]	; (800198c <HAL_RCC_OscConfig+0xc58>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	4abd      	ldr	r2, [pc, #756]	; (800198c <HAL_RCC_OscConfig+0xc58>)
 8001696:	f023 0304 	bic.w	r3, r3, #4
 800169a:	6213      	str	r3, [r2, #32]
 800169c:	e020      	b.n	80016e0 <HAL_RCC_OscConfig+0x9ac>
 800169e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	2b05      	cmp	r3, #5
 80016ac:	d10c      	bne.n	80016c8 <HAL_RCC_OscConfig+0x994>
 80016ae:	4bb7      	ldr	r3, [pc, #732]	; (800198c <HAL_RCC_OscConfig+0xc58>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	4ab6      	ldr	r2, [pc, #728]	; (800198c <HAL_RCC_OscConfig+0xc58>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	6213      	str	r3, [r2, #32]
 80016ba:	4bb4      	ldr	r3, [pc, #720]	; (800198c <HAL_RCC_OscConfig+0xc58>)
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	4ab3      	ldr	r2, [pc, #716]	; (800198c <HAL_RCC_OscConfig+0xc58>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6213      	str	r3, [r2, #32]
 80016c6:	e00b      	b.n	80016e0 <HAL_RCC_OscConfig+0x9ac>
 80016c8:	4bb0      	ldr	r3, [pc, #704]	; (800198c <HAL_RCC_OscConfig+0xc58>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	4aaf      	ldr	r2, [pc, #700]	; (800198c <HAL_RCC_OscConfig+0xc58>)
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	6213      	str	r3, [r2, #32]
 80016d4:	4bad      	ldr	r3, [pc, #692]	; (800198c <HAL_RCC_OscConfig+0xc58>)
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	4aac      	ldr	r2, [pc, #688]	; (800198c <HAL_RCC_OscConfig+0xc58>)
 80016da:	f023 0304 	bic.w	r3, r3, #4
 80016de:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 8081 	beq.w	80017f4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f2:	f7ff f877 	bl	80007e4 <HAL_GetTick>
 80016f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fa:	e00b      	b.n	8001714 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016fc:	f7ff f872 	bl	80007e4 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	f241 3288 	movw	r2, #5000	; 0x1388
 800170c:	4293      	cmp	r3, r2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e345      	b.n	8001da0 <HAL_RCC_OscConfig+0x106c>
 8001714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001718:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800171c:	2202      	movs	r2, #2
 800171e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001724:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	fa93 f2a3 	rbit	r2, r3
 800172e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001732:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001740:	2202      	movs	r2, #2
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001748:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	fa93 f2a3 	rbit	r2, r3
 8001752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001756:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800175a:	601a      	str	r2, [r3, #0]
  return result;
 800175c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001760:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001764:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001766:	fab3 f383 	clz	r3, r3
 800176a:	b2db      	uxtb	r3, r3
 800176c:	095b      	lsrs	r3, r3, #5
 800176e:	b2db      	uxtb	r3, r3
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d102      	bne.n	8001780 <HAL_RCC_OscConfig+0xa4c>
 800177a:	4b84      	ldr	r3, [pc, #528]	; (800198c <HAL_RCC_OscConfig+0xc58>)
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	e013      	b.n	80017a8 <HAL_RCC_OscConfig+0xa74>
 8001780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001784:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001788:	2202      	movs	r2, #2
 800178a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001790:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	fa93 f2a3 	rbit	r2, r3
 800179a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	4b79      	ldr	r3, [pc, #484]	; (800198c <HAL_RCC_OscConfig+0xc58>)
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017ac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017b0:	2102      	movs	r1, #2
 80017b2:	6011      	str	r1, [r2, #0]
 80017b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017b8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	fa92 f1a2 	rbit	r1, r2
 80017c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017c6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017ca:	6011      	str	r1, [r2, #0]
  return result;
 80017cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017d0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017d4:	6812      	ldr	r2, [r2, #0]
 80017d6:	fab2 f282 	clz	r2, r2
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	f002 021f 	and.w	r2, r2, #31
 80017e6:	2101      	movs	r1, #1
 80017e8:	fa01 f202 	lsl.w	r2, r1, r2
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d084      	beq.n	80016fc <HAL_RCC_OscConfig+0x9c8>
 80017f2:	e07f      	b.n	80018f4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f4:	f7fe fff6 	bl	80007e4 <HAL_GetTick>
 80017f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fc:	e00b      	b.n	8001816 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fe:	f7fe fff1 	bl	80007e4 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	f241 3288 	movw	r2, #5000	; 0x1388
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e2c4      	b.n	8001da0 <HAL_RCC_OscConfig+0x106c>
 8001816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800181e:	2202      	movs	r2, #2
 8001820:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001826:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	fa93 f2a3 	rbit	r2, r3
 8001830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001834:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001842:	2202      	movs	r2, #2
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	fa93 f2a3 	rbit	r2, r3
 8001854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001858:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800185c:	601a      	str	r2, [r3, #0]
  return result;
 800185e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001862:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001866:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001868:	fab3 f383 	clz	r3, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f043 0302 	orr.w	r3, r3, #2
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d102      	bne.n	8001882 <HAL_RCC_OscConfig+0xb4e>
 800187c:	4b43      	ldr	r3, [pc, #268]	; (800198c <HAL_RCC_OscConfig+0xc58>)
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	e013      	b.n	80018aa <HAL_RCC_OscConfig+0xb76>
 8001882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001886:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800188a:	2202      	movs	r2, #2
 800188c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001892:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	fa93 f2a3 	rbit	r2, r3
 800189c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	4b39      	ldr	r3, [pc, #228]	; (800198c <HAL_RCC_OscConfig+0xc58>)
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018ae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018b2:	2102      	movs	r1, #2
 80018b4:	6011      	str	r1, [r2, #0]
 80018b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018ba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	fa92 f1a2 	rbit	r1, r2
 80018c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018c8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018cc:	6011      	str	r1, [r2, #0]
  return result;
 80018ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018d2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	fab2 f282 	clz	r2, r2
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	f002 021f 	and.w	r2, r2, #31
 80018e8:	2101      	movs	r1, #1
 80018ea:	fa01 f202 	lsl.w	r2, r1, r2
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d184      	bne.n	80017fe <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018f4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d105      	bne.n	8001908 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018fc:	4b23      	ldr	r3, [pc, #140]	; (800198c <HAL_RCC_OscConfig+0xc58>)
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	4a22      	ldr	r2, [pc, #136]	; (800198c <HAL_RCC_OscConfig+0xc58>)
 8001902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001906:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 8242 	beq.w	8001d9e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800191a:	4b1c      	ldr	r3, [pc, #112]	; (800198c <HAL_RCC_OscConfig+0xc58>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b08      	cmp	r3, #8
 8001924:	f000 8213 	beq.w	8001d4e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	2b02      	cmp	r3, #2
 8001936:	f040 8162 	bne.w	8001bfe <HAL_RCC_OscConfig+0xeca>
 800193a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001942:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001946:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	fa93 f2a3 	rbit	r2, r3
 8001956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800195e:	601a      	str	r2, [r3, #0]
  return result;
 8001960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001964:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001968:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196a:	fab3 f383 	clz	r3, r3
 800196e:	b2db      	uxtb	r3, r3
 8001970:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001974:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	461a      	mov	r2, r3
 800197c:	2300      	movs	r3, #0
 800197e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7fe ff30 	bl	80007e4 <HAL_GetTick>
 8001984:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001988:	e00c      	b.n	80019a4 <HAL_RCC_OscConfig+0xc70>
 800198a:	bf00      	nop
 800198c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001990:	f7fe ff28 	bl	80007e4 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e1fd      	b.n	8001da0 <HAL_RCC_OscConfig+0x106c>
 80019a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	fa93 f2a3 	rbit	r2, r3
 80019c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019c8:	601a      	str	r2, [r3, #0]
  return result;
 80019ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d4:	fab3 f383 	clz	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d102      	bne.n	80019ee <HAL_RCC_OscConfig+0xcba>
 80019e8:	4bb0      	ldr	r3, [pc, #704]	; (8001cac <HAL_RCC_OscConfig+0xf78>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	e027      	b.n	8001a3e <HAL_RCC_OscConfig+0xd0a>
 80019ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a00:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	fa93 f2a3 	rbit	r2, r3
 8001a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a18:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a26:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	fa93 f2a3 	rbit	r2, r3
 8001a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a34:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	4b9c      	ldr	r3, [pc, #624]	; (8001cac <HAL_RCC_OscConfig+0xf78>)
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a42:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a46:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a4a:	6011      	str	r1, [r2, #0]
 8001a4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a50:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	fa92 f1a2 	rbit	r1, r2
 8001a5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a5e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a62:	6011      	str	r1, [r2, #0]
  return result;
 8001a64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a68:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	fab2 f282 	clz	r2, r2
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	f042 0220 	orr.w	r2, r2, #32
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	f002 021f 	and.w	r2, r2, #31
 8001a7e:	2101      	movs	r1, #1
 8001a80:	fa01 f202 	lsl.w	r2, r1, r2
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d182      	bne.n	8001990 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a8a:	4b88      	ldr	r3, [pc, #544]	; (8001cac <HAL_RCC_OscConfig+0xf78>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	430b      	orrs	r3, r1
 8001aac:	497f      	ldr	r1, [pc, #508]	; (8001cac <HAL_RCC_OscConfig+0xf78>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	604b      	str	r3, [r1, #4]
 8001ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001aba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001abe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	fa93 f2a3 	rbit	r2, r3
 8001ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ad6:	601a      	str	r2, [r3, #0]
  return result;
 8001ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001adc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ae0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae2:	fab3 f383 	clz	r3, r3
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	461a      	mov	r2, r3
 8001af4:	2301      	movs	r3, #1
 8001af6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7fe fe74 	bl	80007e4 <HAL_GetTick>
 8001afc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b00:	e009      	b.n	8001b16 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b02:	f7fe fe6f 	bl	80007e4 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e144      	b.n	8001da0 <HAL_RCC_OscConfig+0x106c>
 8001b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b28:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	fa93 f2a3 	rbit	r2, r3
 8001b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b36:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b3a:	601a      	str	r2, [r3, #0]
  return result;
 8001b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b40:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b44:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b46:	fab3 f383 	clz	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	095b      	lsrs	r3, r3, #5
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d102      	bne.n	8001b60 <HAL_RCC_OscConfig+0xe2c>
 8001b5a:	4b54      	ldr	r3, [pc, #336]	; (8001cac <HAL_RCC_OscConfig+0xf78>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	e027      	b.n	8001bb0 <HAL_RCC_OscConfig+0xe7c>
 8001b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b64:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b72:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	fa93 f2a3 	rbit	r2, r3
 8001b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b80:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b98:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	fa93 f2a3 	rbit	r2, r3
 8001ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	4b3f      	ldr	r3, [pc, #252]	; (8001cac <HAL_RCC_OscConfig+0xf78>)
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bb4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001bb8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bbc:	6011      	str	r1, [r2, #0]
 8001bbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bc2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	fa92 f1a2 	rbit	r1, r2
 8001bcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bd0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001bd4:	6011      	str	r1, [r2, #0]
  return result;
 8001bd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bda:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	fab2 f282 	clz	r2, r2
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	f042 0220 	orr.w	r2, r2, #32
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	f002 021f 	and.w	r2, r2, #31
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d082      	beq.n	8001b02 <HAL_RCC_OscConfig+0xdce>
 8001bfc:	e0cf      	b.n	8001d9e <HAL_RCC_OscConfig+0x106a>
 8001bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c02:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c10:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	fa93 f2a3 	rbit	r2, r3
 8001c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c22:	601a      	str	r2, [r3, #0]
  return result;
 8001c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c28:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c2c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2e:	fab3 f383 	clz	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	461a      	mov	r2, r3
 8001c40:	2300      	movs	r3, #0
 8001c42:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7fe fdce 	bl	80007e4 <HAL_GetTick>
 8001c48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4c:	e009      	b.n	8001c62 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4e:	f7fe fdc9 	bl	80007e4 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e09e      	b.n	8001da0 <HAL_RCC_OscConfig+0x106c>
 8001c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c66:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c74:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	fa93 f2a3 	rbit	r2, r3
 8001c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c82:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c86:	601a      	str	r2, [r3, #0]
  return result;
 8001c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c92:	fab3 f383 	clz	r3, r3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	095b      	lsrs	r3, r3, #5
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d104      	bne.n	8001cb0 <HAL_RCC_OscConfig+0xf7c>
 8001ca6:	4b01      	ldr	r3, [pc, #4]	; (8001cac <HAL_RCC_OscConfig+0xf78>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	e029      	b.n	8001d00 <HAL_RCC_OscConfig+0xfcc>
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	fa93 f2a3 	rbit	r2, r3
 8001ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cda:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	fa93 f2a3 	rbit	r2, r3
 8001cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <HAL_RCC_OscConfig+0x1078>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d04:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d0c:	6011      	str	r1, [r2, #0]
 8001d0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d12:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	fa92 f1a2 	rbit	r1, r2
 8001d1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d20:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d24:	6011      	str	r1, [r2, #0]
  return result;
 8001d26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d2a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	fab2 f282 	clz	r2, r2
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	f042 0220 	orr.w	r2, r2, #32
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	f002 021f 	and.w	r2, r2, #31
 8001d40:	2101      	movs	r1, #1
 8001d42:	fa01 f202 	lsl.w	r2, r1, r2
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d180      	bne.n	8001c4e <HAL_RCC_OscConfig+0xf1a>
 8001d4c:	e027      	b.n	8001d9e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e01e      	b.n	8001da0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_RCC_OscConfig+0x1078>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d6a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d6e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d10b      	bne.n	8001d9a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d82:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d001      	beq.n	8001d9e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000

08001db0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b09e      	sub	sp, #120	; 0x78
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e162      	b.n	800208e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b90      	ldr	r3, [pc, #576]	; (800200c <HAL_RCC_ClockConfig+0x25c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d910      	bls.n	8001df8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b8d      	ldr	r3, [pc, #564]	; (800200c <HAL_RCC_ClockConfig+0x25c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 0207 	bic.w	r2, r3, #7
 8001dde:	498b      	ldr	r1, [pc, #556]	; (800200c <HAL_RCC_ClockConfig+0x25c>)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b89      	ldr	r3, [pc, #548]	; (800200c <HAL_RCC_ClockConfig+0x25c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e14a      	b.n	800208e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e04:	4b82      	ldr	r3, [pc, #520]	; (8002010 <HAL_RCC_ClockConfig+0x260>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	497f      	ldr	r1, [pc, #508]	; (8002010 <HAL_RCC_ClockConfig+0x260>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 80dc 	beq.w	8001fdc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d13c      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xf6>
 8001e2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e30:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d102      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xa6>
 8001e50:	4b6f      	ldr	r3, [pc, #444]	; (8002010 <HAL_RCC_ClockConfig+0x260>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	e00f      	b.n	8001e76 <HAL_RCC_ClockConfig+0xc6>
 8001e56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	667b      	str	r3, [r7, #100]	; 0x64
 8001e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e68:	663b      	str	r3, [r7, #96]	; 0x60
 8001e6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e72:	4b67      	ldr	r3, [pc, #412]	; (8002010 <HAL_RCC_ClockConfig+0x260>)
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e7a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e7e:	fa92 f2a2 	rbit	r2, r2
 8001e82:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e86:	fab2 f282 	clz	r2, r2
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	f042 0220 	orr.w	r2, r2, #32
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	f002 021f 	and.w	r2, r2, #31
 8001e96:	2101      	movs	r1, #1
 8001e98:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d17b      	bne.n	8001f9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e0f3      	b.n	800208e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d13c      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x178>
 8001eae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eb2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ebe:	fab3 f383 	clz	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	095b      	lsrs	r3, r3, #5
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d102      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x128>
 8001ed2:	4b4f      	ldr	r3, [pc, #316]	; (8002010 <HAL_RCC_ClockConfig+0x260>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	e00f      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x148>
 8001ed8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001edc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ee0:	fa93 f3a3 	rbit	r3, r3
 8001ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8001ee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eea:	643b      	str	r3, [r7, #64]	; 0x40
 8001eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eee:	fa93 f3a3 	rbit	r3, r3
 8001ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ef4:	4b46      	ldr	r3, [pc, #280]	; (8002010 <HAL_RCC_ClockConfig+0x260>)
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001efc:	63ba      	str	r2, [r7, #56]	; 0x38
 8001efe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f00:	fa92 f2a2 	rbit	r2, r2
 8001f04:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f08:	fab2 f282 	clz	r2, r2
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	f042 0220 	orr.w	r2, r2, #32
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	f002 021f 	and.w	r2, r2, #31
 8001f18:	2101      	movs	r1, #1
 8001f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d13a      	bne.n	8001f9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0b2      	b.n	800208e <HAL_RCC_ClockConfig+0x2de>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	095b      	lsrs	r3, r3, #5
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d102      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x1a0>
 8001f4a:	4b31      	ldr	r3, [pc, #196]	; (8002010 <HAL_RCC_ClockConfig+0x260>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	e00d      	b.n	8001f6c <HAL_RCC_ClockConfig+0x1bc>
 8001f50:	2302      	movs	r3, #2
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	623b      	str	r3, [r7, #32]
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	4b29      	ldr	r3, [pc, #164]	; (8002010 <HAL_RCC_ClockConfig+0x260>)
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	61ba      	str	r2, [r7, #24]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	fa92 f2a2 	rbit	r2, r2
 8001f76:	617a      	str	r2, [r7, #20]
  return result;
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	fab2 f282 	clz	r2, r2
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	f042 0220 	orr.w	r2, r2, #32
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	f002 021f 	and.w	r2, r2, #31
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e079      	b.n	800208e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f9a:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <HAL_RCC_ClockConfig+0x260>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f023 0203 	bic.w	r2, r3, #3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	491a      	ldr	r1, [pc, #104]	; (8002010 <HAL_RCC_ClockConfig+0x260>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fac:	f7fe fc1a 	bl	80007e4 <HAL_GetTick>
 8001fb0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb2:	e00a      	b.n	8001fca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb4:	f7fe fc16 	bl	80007e4 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e061      	b.n	800208e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_RCC_ClockConfig+0x260>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 020c 	and.w	r2, r3, #12
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d1eb      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_RCC_ClockConfig+0x25c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d214      	bcs.n	8002014 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <HAL_RCC_ClockConfig+0x25c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 0207 	bic.w	r2, r3, #7
 8001ff2:	4906      	ldr	r1, [pc, #24]	; (800200c <HAL_RCC_ClockConfig+0x25c>)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b04      	ldr	r3, [pc, #16]	; (800200c <HAL_RCC_ClockConfig+0x25c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d005      	beq.n	8002014 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e040      	b.n	800208e <HAL_RCC_ClockConfig+0x2de>
 800200c:	40022000 	.word	0x40022000
 8002010:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002020:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <HAL_RCC_ClockConfig+0x2e8>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	491a      	ldr	r1, [pc, #104]	; (8002098 <HAL_RCC_ClockConfig+0x2e8>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d009      	beq.n	8002052 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800203e:	4b16      	ldr	r3, [pc, #88]	; (8002098 <HAL_RCC_ClockConfig+0x2e8>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4912      	ldr	r1, [pc, #72]	; (8002098 <HAL_RCC_ClockConfig+0x2e8>)
 800204e:	4313      	orrs	r3, r2
 8002050:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002052:	f000 f829 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8002056:	4601      	mov	r1, r0
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <HAL_RCC_ClockConfig+0x2e8>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002060:	22f0      	movs	r2, #240	; 0xf0
 8002062:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	fa92 f2a2 	rbit	r2, r2
 800206a:	60fa      	str	r2, [r7, #12]
  return result;
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	fab2 f282 	clz	r2, r2
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	40d3      	lsrs	r3, r2
 8002076:	4a09      	ldr	r2, [pc, #36]	; (800209c <HAL_RCC_ClockConfig+0x2ec>)
 8002078:	5cd3      	ldrb	r3, [r2, r3]
 800207a:	fa21 f303 	lsr.w	r3, r1, r3
 800207e:	4a08      	ldr	r2, [pc, #32]	; (80020a0 <HAL_RCC_ClockConfig+0x2f0>)
 8002080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_RCC_ClockConfig+0x2f4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fb68 	bl	800075c <HAL_InitTick>
  
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3778      	adds	r7, #120	; 0x78
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	080034e4 	.word	0x080034e4
 80020a0:	20000000 	.word	0x20000000
 80020a4:	20000004 	.word	0x20000004

080020a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b08b      	sub	sp, #44	; 0x2c
 80020ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	2300      	movs	r3, #0
 80020b4:	61bb      	str	r3, [r7, #24]
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80020c2:	4b29      	ldr	r3, [pc, #164]	; (8002168 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d002      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x30>
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d003      	beq.n	80020de <HAL_RCC_GetSysClockFreq+0x36>
 80020d6:	e03c      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020d8:	4b24      	ldr	r3, [pc, #144]	; (800216c <HAL_RCC_GetSysClockFreq+0xc4>)
 80020da:	623b      	str	r3, [r7, #32]
      break;
 80020dc:	e03c      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020e4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020e8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	fa92 f2a2 	rbit	r2, r2
 80020f0:	607a      	str	r2, [r7, #4]
  return result;
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	fab2 f282 	clz	r2, r2
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	40d3      	lsrs	r3, r2
 80020fc:	4a1c      	ldr	r2, [pc, #112]	; (8002170 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020fe:	5cd3      	ldrb	r3, [r2, r3]
 8002100:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002102:	4b19      	ldr	r3, [pc, #100]	; (8002168 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	220f      	movs	r2, #15
 800210c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	fa92 f2a2 	rbit	r2, r2
 8002114:	60fa      	str	r2, [r7, #12]
  return result;
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	fab2 f282 	clz	r2, r2
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	40d3      	lsrs	r3, r2
 8002120:	4a14      	ldr	r2, [pc, #80]	; (8002174 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002122:	5cd3      	ldrb	r3, [r2, r3]
 8002124:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002130:	4a0e      	ldr	r2, [pc, #56]	; (800216c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	fbb2 f2f3 	udiv	r2, r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
 8002140:	e004      	b.n	800214c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	4a0c      	ldr	r2, [pc, #48]	; (8002178 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	623b      	str	r3, [r7, #32]
      break;
 8002150:	e002      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002154:	623b      	str	r3, [r7, #32]
      break;
 8002156:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002158:	6a3b      	ldr	r3, [r7, #32]
}
 800215a:	4618      	mov	r0, r3
 800215c:	372c      	adds	r7, #44	; 0x2c
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
 800216c:	007a1200 	.word	0x007a1200
 8002170:	080034fc 	.word	0x080034fc
 8002174:	0800350c 	.word	0x0800350c
 8002178:	003d0900 	.word	0x003d0900

0800217c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <HAL_RCC_GetHCLKFreq+0x14>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000000 	.word	0x20000000

08002194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800219a:	f7ff ffef 	bl	800217c <HAL_RCC_GetHCLKFreq>
 800219e:	4601      	mov	r1, r0
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021a8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	fa92 f2a2 	rbit	r2, r2
 80021b4:	603a      	str	r2, [r7, #0]
  return result;
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	fab2 f282 	clz	r2, r2
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	40d3      	lsrs	r3, r2
 80021c0:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021c2:	5cd3      	ldrb	r3, [r2, r3]
 80021c4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021000 	.word	0x40021000
 80021d4:	080034f4 	.word	0x080034f4

080021d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021de:	f7ff ffcd 	bl	800217c <HAL_RCC_GetHCLKFreq>
 80021e2:	4601      	mov	r1, r0
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021ec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	fa92 f2a2 	rbit	r2, r2
 80021f8:	603a      	str	r2, [r7, #0]
  return result;
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	fab2 f282 	clz	r2, r2
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	40d3      	lsrs	r3, r2
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002206:	5cd3      	ldrb	r3, [r2, r3]
 8002208:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40021000 	.word	0x40021000
 8002218:	080034f4 	.word	0x080034f4

0800221c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e049      	b.n	80022c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7fe f99a 	bl	800057c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2202      	movs	r2, #2
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3304      	adds	r3, #4
 8002258:	4619      	mov	r1, r3
 800225a:	4610      	mov	r0, r2
 800225c:	f000 faac 	bl	80027b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d001      	beq.n	80022e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e040      	b.n	8002366 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0201 	orr.w	r2, r2, #1
 80022fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a1c      	ldr	r2, [pc, #112]	; (8002374 <HAL_TIM_Base_Start_IT+0xa8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00e      	beq.n	8002324 <HAL_TIM_Base_Start_IT+0x58>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800230e:	d009      	beq.n	8002324 <HAL_TIM_Base_Start_IT+0x58>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a18      	ldr	r2, [pc, #96]	; (8002378 <HAL_TIM_Base_Start_IT+0xac>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d004      	beq.n	8002324 <HAL_TIM_Base_Start_IT+0x58>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a17      	ldr	r2, [pc, #92]	; (800237c <HAL_TIM_Base_Start_IT+0xb0>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d115      	bne.n	8002350 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <HAL_TIM_Base_Start_IT+0xb4>)
 800232c:	4013      	ands	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2b06      	cmp	r3, #6
 8002334:	d015      	beq.n	8002362 <HAL_TIM_Base_Start_IT+0x96>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233c:	d011      	beq.n	8002362 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0201 	orr.w	r2, r2, #1
 800234c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800234e:	e008      	b.n	8002362 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e000      	b.n	8002364 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002362:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40012c00 	.word	0x40012c00
 8002378:	40000400 	.word	0x40000400
 800237c:	40014000 	.word	0x40014000
 8002380:	00010007 	.word	0x00010007

08002384 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b02      	cmp	r3, #2
 8002398:	d122      	bne.n	80023e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d11b      	bne.n	80023e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0202 	mvn.w	r2, #2
 80023b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f9d8 	bl	800277c <HAL_TIM_IC_CaptureCallback>
 80023cc:	e005      	b.n	80023da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f9ca 	bl	8002768 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f9db 	bl	8002790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d122      	bne.n	8002434 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d11b      	bne.n	8002434 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0204 	mvn.w	r2, #4
 8002404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2202      	movs	r2, #2
 800240a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f9ae 	bl	800277c <HAL_TIM_IC_CaptureCallback>
 8002420:	e005      	b.n	800242e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f9a0 	bl	8002768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f9b1 	bl	8002790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b08      	cmp	r3, #8
 8002440:	d122      	bne.n	8002488 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b08      	cmp	r3, #8
 800244e:	d11b      	bne.n	8002488 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0208 	mvn.w	r2, #8
 8002458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2204      	movs	r2, #4
 800245e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f984 	bl	800277c <HAL_TIM_IC_CaptureCallback>
 8002474:	e005      	b.n	8002482 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f976 	bl	8002768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f987 	bl	8002790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	2b10      	cmp	r3, #16
 8002494:	d122      	bne.n	80024dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0310 	and.w	r3, r3, #16
 80024a0:	2b10      	cmp	r3, #16
 80024a2:	d11b      	bne.n	80024dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f06f 0210 	mvn.w	r2, #16
 80024ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2208      	movs	r2, #8
 80024b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f95a 	bl	800277c <HAL_TIM_IC_CaptureCallback>
 80024c8:	e005      	b.n	80024d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f94c 	bl	8002768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f95d 	bl	8002790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d10e      	bne.n	8002508 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d107      	bne.n	8002508 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f06f 0201 	mvn.w	r2, #1
 8002500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f926 	bl	8002754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002512:	2b80      	cmp	r3, #128	; 0x80
 8002514:	d10e      	bne.n	8002534 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002520:	2b80      	cmp	r3, #128	; 0x80
 8002522:	d107      	bne.n	8002534 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800252c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 facc 	bl	8002acc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002542:	d10e      	bne.n	8002562 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254e:	2b80      	cmp	r3, #128	; 0x80
 8002550:	d107      	bne.n	8002562 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800255a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 fabf 	bl	8002ae0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256c:	2b40      	cmp	r3, #64	; 0x40
 800256e:	d10e      	bne.n	800258e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257a:	2b40      	cmp	r3, #64	; 0x40
 800257c:	d107      	bne.n	800258e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f90b 	bl	80027a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	f003 0320 	and.w	r3, r3, #32
 8002598:	2b20      	cmp	r3, #32
 800259a:	d10e      	bne.n	80025ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f003 0320 	and.w	r3, r3, #32
 80025a6:	2b20      	cmp	r3, #32
 80025a8:	d107      	bne.n	80025ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f06f 0220 	mvn.w	r2, #32
 80025b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 fa7f 	bl	8002ab8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d101      	bne.n	80025de <HAL_TIM_ConfigClockSource+0x1c>
 80025da:	2302      	movs	r3, #2
 80025dc:	e0b6      	b.n	800274c <HAL_TIM_ConfigClockSource+0x18a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2202      	movs	r2, #2
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025fc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002600:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002608:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261a:	d03e      	beq.n	800269a <HAL_TIM_ConfigClockSource+0xd8>
 800261c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002620:	f200 8087 	bhi.w	8002732 <HAL_TIM_ConfigClockSource+0x170>
 8002624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002628:	f000 8086 	beq.w	8002738 <HAL_TIM_ConfigClockSource+0x176>
 800262c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002630:	d87f      	bhi.n	8002732 <HAL_TIM_ConfigClockSource+0x170>
 8002632:	2b70      	cmp	r3, #112	; 0x70
 8002634:	d01a      	beq.n	800266c <HAL_TIM_ConfigClockSource+0xaa>
 8002636:	2b70      	cmp	r3, #112	; 0x70
 8002638:	d87b      	bhi.n	8002732 <HAL_TIM_ConfigClockSource+0x170>
 800263a:	2b60      	cmp	r3, #96	; 0x60
 800263c:	d050      	beq.n	80026e0 <HAL_TIM_ConfigClockSource+0x11e>
 800263e:	2b60      	cmp	r3, #96	; 0x60
 8002640:	d877      	bhi.n	8002732 <HAL_TIM_ConfigClockSource+0x170>
 8002642:	2b50      	cmp	r3, #80	; 0x50
 8002644:	d03c      	beq.n	80026c0 <HAL_TIM_ConfigClockSource+0xfe>
 8002646:	2b50      	cmp	r3, #80	; 0x50
 8002648:	d873      	bhi.n	8002732 <HAL_TIM_ConfigClockSource+0x170>
 800264a:	2b40      	cmp	r3, #64	; 0x40
 800264c:	d058      	beq.n	8002700 <HAL_TIM_ConfigClockSource+0x13e>
 800264e:	2b40      	cmp	r3, #64	; 0x40
 8002650:	d86f      	bhi.n	8002732 <HAL_TIM_ConfigClockSource+0x170>
 8002652:	2b30      	cmp	r3, #48	; 0x30
 8002654:	d064      	beq.n	8002720 <HAL_TIM_ConfigClockSource+0x15e>
 8002656:	2b30      	cmp	r3, #48	; 0x30
 8002658:	d86b      	bhi.n	8002732 <HAL_TIM_ConfigClockSource+0x170>
 800265a:	2b20      	cmp	r3, #32
 800265c:	d060      	beq.n	8002720 <HAL_TIM_ConfigClockSource+0x15e>
 800265e:	2b20      	cmp	r3, #32
 8002660:	d867      	bhi.n	8002732 <HAL_TIM_ConfigClockSource+0x170>
 8002662:	2b00      	cmp	r3, #0
 8002664:	d05c      	beq.n	8002720 <HAL_TIM_ConfigClockSource+0x15e>
 8002666:	2b10      	cmp	r3, #16
 8002668:	d05a      	beq.n	8002720 <HAL_TIM_ConfigClockSource+0x15e>
 800266a:	e062      	b.n	8002732 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	6899      	ldr	r1, [r3, #8]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f000 f98e 	bl	800299c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800268e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	609a      	str	r2, [r3, #8]
      break;
 8002698:	e04f      	b.n	800273a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6899      	ldr	r1, [r3, #8]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f000 f977 	bl	800299c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026bc:	609a      	str	r2, [r3, #8]
      break;
 80026be:	e03c      	b.n	800273a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	6859      	ldr	r1, [r3, #4]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	461a      	mov	r2, r3
 80026ce:	f000 f8eb 	bl	80028a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2150      	movs	r1, #80	; 0x50
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 f944 	bl	8002966 <TIM_ITRx_SetConfig>
      break;
 80026de:	e02c      	b.n	800273a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	6859      	ldr	r1, [r3, #4]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	461a      	mov	r2, r3
 80026ee:	f000 f90a 	bl	8002906 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2160      	movs	r1, #96	; 0x60
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 f934 	bl	8002966 <TIM_ITRx_SetConfig>
      break;
 80026fe:	e01c      	b.n	800273a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	461a      	mov	r2, r3
 800270e:	f000 f8cb 	bl	80028a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2140      	movs	r1, #64	; 0x40
 8002718:	4618      	mov	r0, r3
 800271a:	f000 f924 	bl	8002966 <TIM_ITRx_SetConfig>
      break;
 800271e:	e00c      	b.n	800273a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4619      	mov	r1, r3
 800272a:	4610      	mov	r0, r2
 800272c:	f000 f91b 	bl	8002966 <TIM_ITRx_SetConfig>
      break;
 8002730:	e003      	b.n	800273a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
      break;
 8002736:	e000      	b.n	800273a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002738:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800274a:	7bfb      	ldrb	r3, [r7, #15]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a32      	ldr	r2, [pc, #200]	; (8002894 <TIM_Base_SetConfig+0xdc>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d007      	beq.n	80027e0 <TIM_Base_SetConfig+0x28>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d6:	d003      	beq.n	80027e0 <TIM_Base_SetConfig+0x28>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a2f      	ldr	r2, [pc, #188]	; (8002898 <TIM_Base_SetConfig+0xe0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d108      	bne.n	80027f2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a27      	ldr	r2, [pc, #156]	; (8002894 <TIM_Base_SetConfig+0xdc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d013      	beq.n	8002822 <TIM_Base_SetConfig+0x6a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002800:	d00f      	beq.n	8002822 <TIM_Base_SetConfig+0x6a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a24      	ldr	r2, [pc, #144]	; (8002898 <TIM_Base_SetConfig+0xe0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00b      	beq.n	8002822 <TIM_Base_SetConfig+0x6a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a23      	ldr	r2, [pc, #140]	; (800289c <TIM_Base_SetConfig+0xe4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d007      	beq.n	8002822 <TIM_Base_SetConfig+0x6a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a22      	ldr	r2, [pc, #136]	; (80028a0 <TIM_Base_SetConfig+0xe8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d003      	beq.n	8002822 <TIM_Base_SetConfig+0x6a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a21      	ldr	r2, [pc, #132]	; (80028a4 <TIM_Base_SetConfig+0xec>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d108      	bne.n	8002834 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4313      	orrs	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a0e      	ldr	r2, [pc, #56]	; (8002894 <TIM_Base_SetConfig+0xdc>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d00b      	beq.n	8002878 <TIM_Base_SetConfig+0xc0>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a0e      	ldr	r2, [pc, #56]	; (800289c <TIM_Base_SetConfig+0xe4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d007      	beq.n	8002878 <TIM_Base_SetConfig+0xc0>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a0d      	ldr	r2, [pc, #52]	; (80028a0 <TIM_Base_SetConfig+0xe8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d003      	beq.n	8002878 <TIM_Base_SetConfig+0xc0>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a0c      	ldr	r2, [pc, #48]	; (80028a4 <TIM_Base_SetConfig+0xec>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d103      	bne.n	8002880 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	615a      	str	r2, [r3, #20]
}
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40012c00 	.word	0x40012c00
 8002898:	40000400 	.word	0x40000400
 800289c:	40014000 	.word	0x40014000
 80028a0:	40014400 	.word	0x40014400
 80028a4:	40014800 	.word	0x40014800

080028a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	f023 0201 	bic.w	r2, r3, #1
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f023 030a 	bic.w	r3, r3, #10
 80028e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	621a      	str	r2, [r3, #32]
}
 80028fa:	bf00      	nop
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002906:	b480      	push	{r7}
 8002908:	b087      	sub	sp, #28
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	f023 0210 	bic.w	r2, r3, #16
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002930:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	031b      	lsls	r3, r3, #12
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4313      	orrs	r3, r2
 800293a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002942:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	621a      	str	r2, [r3, #32]
}
 800295a:	bf00      	nop
 800295c:	371c      	adds	r7, #28
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002966:	b480      	push	{r7}
 8002968:	b085      	sub	sp, #20
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	f043 0307 	orr.w	r3, r3, #7
 8002988:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	609a      	str	r2, [r3, #8]
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	021a      	lsls	r2, r3, #8
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	431a      	orrs	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	609a      	str	r2, [r3, #8]
}
 80029d0:	bf00      	nop
 80029d2:	371c      	adds	r7, #28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e054      	b.n	8002a9e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a24      	ldr	r2, [pc, #144]	; (8002aac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d108      	bne.n	8002a30 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002a24:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a17      	ldr	r2, [pc, #92]	; (8002aac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00e      	beq.n	8002a72 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5c:	d009      	beq.n	8002a72 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a13      	ldr	r2, [pc, #76]	; (8002ab0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d004      	beq.n	8002a72 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a11      	ldr	r2, [pc, #68]	; (8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d10c      	bne.n	8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40012c00 	.word	0x40012c00
 8002ab0:	40000400 	.word	0x40000400
 8002ab4:	40014000 	.word	0x40014000

08002ab8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e040      	b.n	8002b88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fd fd56 	bl	80005c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2224      	movs	r2, #36	; 0x24
 8002b20:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0201 	bic.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f992 	bl	8002e5c <UART_SetConfig>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e022      	b.n	8002b88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fabc 	bl	80030c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 fb43 	bl	800320c <UART_CheckIdleState>
 8002b86:	4603      	mov	r3, r0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	; 0x28
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	f040 8082 	bne.w	8002cae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_UART_Transmit+0x26>
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e07a      	b.n	8002cb0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_UART_Transmit+0x38>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e073      	b.n	8002cb0 <HAL_UART_Transmit+0x120>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2221      	movs	r2, #33	; 0x21
 8002bdc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bde:	f7fd fe01 	bl	80007e4 <HAL_GetTick>
 8002be2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	88fa      	ldrh	r2, [r7, #6]
 8002be8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	88fa      	ldrh	r2, [r7, #6]
 8002bf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfc:	d108      	bne.n	8002c10 <HAL_UART_Transmit+0x80>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d104      	bne.n	8002c10 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	61bb      	str	r3, [r7, #24]
 8002c0e:	e003      	b.n	8002c18 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002c20:	e02d      	b.n	8002c7e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2180      	movs	r1, #128	; 0x80
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 fb36 	bl	800329e <UART_WaitOnFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e039      	b.n	8002cb0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10b      	bne.n	8002c5a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	881a      	ldrh	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c4e:	b292      	uxth	r2, r2
 8002c50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	3302      	adds	r3, #2
 8002c56:	61bb      	str	r3, [r7, #24]
 8002c58:	e008      	b.n	8002c6c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	781a      	ldrb	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	b292      	uxth	r2, r2
 8002c64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1cb      	bne.n	8002c22 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2200      	movs	r2, #0
 8002c92:	2140      	movs	r1, #64	; 0x40
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fb02 	bl	800329e <UART_WaitOnFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e005      	b.n	8002cb0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e000      	b.n	8002cb0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002cae:	2302      	movs	r3, #2
  }
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3720      	adds	r7, #32
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	; 0x28
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	f040 80bf 	bne.w	8002e50 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <HAL_UART_Receive+0x26>
 8002cd8:	88fb      	ldrh	r3, [r7, #6]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e0b7      	b.n	8002e52 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_UART_Receive+0x38>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e0b0      	b.n	8002e52 <HAL_UART_Receive+0x19a>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2222      	movs	r2, #34	; 0x22
 8002d04:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d0c:	f7fd fd6a 	bl	80007e4 <HAL_GetTick>
 8002d10:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	88fa      	ldrh	r2, [r7, #6]
 8002d16:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	88fa      	ldrh	r2, [r7, #6]
 8002d1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d2a:	d10e      	bne.n	8002d4a <HAL_UART_Receive+0x92>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d105      	bne.n	8002d40 <HAL_UART_Receive+0x88>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002d3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d3e:	e02d      	b.n	8002d9c <HAL_UART_Receive+0xe4>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	22ff      	movs	r2, #255	; 0xff
 8002d44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d48:	e028      	b.n	8002d9c <HAL_UART_Receive+0xe4>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10d      	bne.n	8002d6e <HAL_UART_Receive+0xb6>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d104      	bne.n	8002d64 <HAL_UART_Receive+0xac>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	22ff      	movs	r2, #255	; 0xff
 8002d5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d62:	e01b      	b.n	8002d9c <HAL_UART_Receive+0xe4>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	227f      	movs	r2, #127	; 0x7f
 8002d68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d6c:	e016      	b.n	8002d9c <HAL_UART_Receive+0xe4>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d76:	d10d      	bne.n	8002d94 <HAL_UART_Receive+0xdc>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d104      	bne.n	8002d8a <HAL_UART_Receive+0xd2>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	227f      	movs	r2, #127	; 0x7f
 8002d84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d88:	e008      	b.n	8002d9c <HAL_UART_Receive+0xe4>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	223f      	movs	r2, #63	; 0x3f
 8002d8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d92:	e003      	b.n	8002d9c <HAL_UART_Receive+0xe4>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002da2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dac:	d108      	bne.n	8002dc0 <HAL_UART_Receive+0x108>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d104      	bne.n	8002dc0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	61bb      	str	r3, [r7, #24]
 8002dbe:	e003      	b.n	8002dc8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002dd0:	e033      	b.n	8002e3a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2120      	movs	r1, #32
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 fa5e 	bl	800329e <UART_WaitOnFlagUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e032      	b.n	8002e52 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10c      	bne.n	8002e0c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	8a7b      	ldrh	r3, [r7, #18]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	3302      	adds	r3, #2
 8002e08:	61bb      	str	r3, [r7, #24]
 8002e0a:	e00d      	b.n	8002e28 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	8a7b      	ldrh	r3, [r7, #18]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3301      	adds	r3, #1
 8002e26:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1c5      	bne.n	8002dd2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e000      	b.n	8002e52 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002e50:	2302      	movs	r3, #2
  }
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3720      	adds	r7, #32
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	431a      	orrs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	4b8a      	ldr	r3, [pc, #552]	; (80030b0 <UART_SetConfig+0x254>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	6979      	ldr	r1, [r7, #20]
 8002e90:	430b      	orrs	r3, r1
 8002e92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a78      	ldr	r2, [pc, #480]	; (80030b4 <UART_SetConfig+0x258>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d120      	bne.n	8002f1a <UART_SetConfig+0xbe>
 8002ed8:	4b77      	ldr	r3, [pc, #476]	; (80030b8 <UART_SetConfig+0x25c>)
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d817      	bhi.n	8002f14 <UART_SetConfig+0xb8>
 8002ee4:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <UART_SetConfig+0x90>)
 8002ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eea:	bf00      	nop
 8002eec:	08002efd 	.word	0x08002efd
 8002ef0:	08002f09 	.word	0x08002f09
 8002ef4:	08002f0f 	.word	0x08002f0f
 8002ef8:	08002f03 	.word	0x08002f03
 8002efc:	2300      	movs	r3, #0
 8002efe:	77fb      	strb	r3, [r7, #31]
 8002f00:	e01d      	b.n	8002f3e <UART_SetConfig+0xe2>
 8002f02:	2302      	movs	r3, #2
 8002f04:	77fb      	strb	r3, [r7, #31]
 8002f06:	e01a      	b.n	8002f3e <UART_SetConfig+0xe2>
 8002f08:	2304      	movs	r3, #4
 8002f0a:	77fb      	strb	r3, [r7, #31]
 8002f0c:	e017      	b.n	8002f3e <UART_SetConfig+0xe2>
 8002f0e:	2308      	movs	r3, #8
 8002f10:	77fb      	strb	r3, [r7, #31]
 8002f12:	e014      	b.n	8002f3e <UART_SetConfig+0xe2>
 8002f14:	2310      	movs	r3, #16
 8002f16:	77fb      	strb	r3, [r7, #31]
 8002f18:	e011      	b.n	8002f3e <UART_SetConfig+0xe2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a67      	ldr	r2, [pc, #412]	; (80030bc <UART_SetConfig+0x260>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d102      	bne.n	8002f2a <UART_SetConfig+0xce>
 8002f24:	2300      	movs	r3, #0
 8002f26:	77fb      	strb	r3, [r7, #31]
 8002f28:	e009      	b.n	8002f3e <UART_SetConfig+0xe2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a64      	ldr	r2, [pc, #400]	; (80030c0 <UART_SetConfig+0x264>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d102      	bne.n	8002f3a <UART_SetConfig+0xde>
 8002f34:	2300      	movs	r3, #0
 8002f36:	77fb      	strb	r3, [r7, #31]
 8002f38:	e001      	b.n	8002f3e <UART_SetConfig+0xe2>
 8002f3a:	2310      	movs	r3, #16
 8002f3c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f46:	d15b      	bne.n	8003000 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002f48:	7ffb      	ldrb	r3, [r7, #31]
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d827      	bhi.n	8002f9e <UART_SetConfig+0x142>
 8002f4e:	a201      	add	r2, pc, #4	; (adr r2, 8002f54 <UART_SetConfig+0xf8>)
 8002f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f54:	08002f79 	.word	0x08002f79
 8002f58:	08002f81 	.word	0x08002f81
 8002f5c:	08002f89 	.word	0x08002f89
 8002f60:	08002f9f 	.word	0x08002f9f
 8002f64:	08002f8f 	.word	0x08002f8f
 8002f68:	08002f9f 	.word	0x08002f9f
 8002f6c:	08002f9f 	.word	0x08002f9f
 8002f70:	08002f9f 	.word	0x08002f9f
 8002f74:	08002f97 	.word	0x08002f97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f78:	f7ff f90c 	bl	8002194 <HAL_RCC_GetPCLK1Freq>
 8002f7c:	61b8      	str	r0, [r7, #24]
        break;
 8002f7e:	e013      	b.n	8002fa8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f80:	f7ff f92a 	bl	80021d8 <HAL_RCC_GetPCLK2Freq>
 8002f84:	61b8      	str	r0, [r7, #24]
        break;
 8002f86:	e00f      	b.n	8002fa8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f88:	4b4e      	ldr	r3, [pc, #312]	; (80030c4 <UART_SetConfig+0x268>)
 8002f8a:	61bb      	str	r3, [r7, #24]
        break;
 8002f8c:	e00c      	b.n	8002fa8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f8e:	f7ff f88b 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8002f92:	61b8      	str	r0, [r7, #24]
        break;
 8002f94:	e008      	b.n	8002fa8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f9a:	61bb      	str	r3, [r7, #24]
        break;
 8002f9c:	e004      	b.n	8002fa8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	77bb      	strb	r3, [r7, #30]
        break;
 8002fa6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d074      	beq.n	8003098 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	005a      	lsls	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	085b      	lsrs	r3, r3, #1
 8002fb8:	441a      	add	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	2b0f      	cmp	r3, #15
 8002fca:	d916      	bls.n	8002ffa <UART_SetConfig+0x19e>
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd2:	d212      	bcs.n	8002ffa <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	f023 030f 	bic.w	r3, r3, #15
 8002fdc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	085b      	lsrs	r3, r3, #1
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	89fb      	ldrh	r3, [r7, #14]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	89fa      	ldrh	r2, [r7, #14]
 8002ff6:	60da      	str	r2, [r3, #12]
 8002ff8:	e04e      	b.n	8003098 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	77bb      	strb	r3, [r7, #30]
 8002ffe:	e04b      	b.n	8003098 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003000:	7ffb      	ldrb	r3, [r7, #31]
 8003002:	2b08      	cmp	r3, #8
 8003004:	d827      	bhi.n	8003056 <UART_SetConfig+0x1fa>
 8003006:	a201      	add	r2, pc, #4	; (adr r2, 800300c <UART_SetConfig+0x1b0>)
 8003008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300c:	08003031 	.word	0x08003031
 8003010:	08003039 	.word	0x08003039
 8003014:	08003041 	.word	0x08003041
 8003018:	08003057 	.word	0x08003057
 800301c:	08003047 	.word	0x08003047
 8003020:	08003057 	.word	0x08003057
 8003024:	08003057 	.word	0x08003057
 8003028:	08003057 	.word	0x08003057
 800302c:	0800304f 	.word	0x0800304f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003030:	f7ff f8b0 	bl	8002194 <HAL_RCC_GetPCLK1Freq>
 8003034:	61b8      	str	r0, [r7, #24]
        break;
 8003036:	e013      	b.n	8003060 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003038:	f7ff f8ce 	bl	80021d8 <HAL_RCC_GetPCLK2Freq>
 800303c:	61b8      	str	r0, [r7, #24]
        break;
 800303e:	e00f      	b.n	8003060 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003040:	4b20      	ldr	r3, [pc, #128]	; (80030c4 <UART_SetConfig+0x268>)
 8003042:	61bb      	str	r3, [r7, #24]
        break;
 8003044:	e00c      	b.n	8003060 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003046:	f7ff f82f 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 800304a:	61b8      	str	r0, [r7, #24]
        break;
 800304c:	e008      	b.n	8003060 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800304e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003052:	61bb      	str	r3, [r7, #24]
        break;
 8003054:	e004      	b.n	8003060 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	77bb      	strb	r3, [r7, #30]
        break;
 800305e:	bf00      	nop
    }

    if (pclk != 0U)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d018      	beq.n	8003098 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	085a      	lsrs	r2, r3, #1
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	441a      	add	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	fbb2 f3f3 	udiv	r3, r2, r3
 8003078:	b29b      	uxth	r3, r3
 800307a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	2b0f      	cmp	r3, #15
 8003080:	d908      	bls.n	8003094 <UART_SetConfig+0x238>
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003088:	d204      	bcs.n	8003094 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	60da      	str	r2, [r3, #12]
 8003092:	e001      	b.n	8003098 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80030a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3720      	adds	r7, #32
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	efff69f3 	.word	0xefff69f3
 80030b4:	40013800 	.word	0x40013800
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40004400 	.word	0x40004400
 80030c0:	40004800 	.word	0x40004800
 80030c4:	007a1200 	.word	0x007a1200

080030c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00a      	beq.n	800317a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d01a      	beq.n	80031de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031c6:	d10a      	bne.n	80031de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	605a      	str	r2, [r3, #4]
  }
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af02      	add	r7, sp, #8
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800321c:	f7fd fae2 	bl	80007e4 <HAL_GetTick>
 8003220:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b08      	cmp	r3, #8
 800322e:	d10e      	bne.n	800324e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f82d 	bl	800329e <UART_WaitOnFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e023      	b.n	8003296 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b04      	cmp	r3, #4
 800325a:	d10e      	bne.n	800327a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800325c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f817 	bl	800329e <UART_WaitOnFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e00d      	b.n	8003296 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2220      	movs	r2, #32
 8003284:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b09c      	sub	sp, #112	; 0x70
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	4613      	mov	r3, r2
 80032ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ae:	e0a5      	b.n	80033fc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032b6:	f000 80a1 	beq.w	80033fc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ba:	f7fd fa93 	bl	80007e4 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d302      	bcc.n	80032d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80032ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d13e      	bne.n	800334e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d8:	e853 3f00 	ldrex	r3, [r3]
 80032dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80032de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032e4:	667b      	str	r3, [r7, #100]	; 0x64
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80032f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032f6:	e841 2300 	strex	r3, r2, [r1]
 80032fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80032fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1e6      	bne.n	80032d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3308      	adds	r3, #8
 8003308:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330c:	e853 3f00 	ldrex	r3, [r3]
 8003310:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003314:	f023 0301 	bic.w	r3, r3, #1
 8003318:	663b      	str	r3, [r7, #96]	; 0x60
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	3308      	adds	r3, #8
 8003320:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003322:	64ba      	str	r2, [r7, #72]	; 0x48
 8003324:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003326:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800332a:	e841 2300 	strex	r3, r2, [r1]
 800332e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1e5      	bne.n	8003302 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2220      	movs	r2, #32
 800333a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e067      	b.n	800341e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d04f      	beq.n	80033fc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336a:	d147      	bne.n	80033fc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003374:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337e:	e853 3f00 	ldrex	r3, [r3]
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800338a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003394:	637b      	str	r3, [r7, #52]	; 0x34
 8003396:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003398:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800339a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800339c:	e841 2300 	strex	r3, r2, [r1]
 80033a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1e6      	bne.n	8003376 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3308      	adds	r3, #8
 80033ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	e853 3f00 	ldrex	r3, [r3]
 80033b6:	613b      	str	r3, [r7, #16]
   return(result);
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f023 0301 	bic.w	r3, r3, #1
 80033be:	66bb      	str	r3, [r7, #104]	; 0x68
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3308      	adds	r3, #8
 80033c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033c8:	623a      	str	r2, [r7, #32]
 80033ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033cc:	69f9      	ldr	r1, [r7, #28]
 80033ce:	6a3a      	ldr	r2, [r7, #32]
 80033d0:	e841 2300 	strex	r3, r2, [r1]
 80033d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1e5      	bne.n	80033a8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2220      	movs	r2, #32
 80033e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e010      	b.n	800341e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69da      	ldr	r2, [r3, #28]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4013      	ands	r3, r2
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	429a      	cmp	r2, r3
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	429a      	cmp	r2, r3
 8003418:	f43f af4a 	beq.w	80032b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3770      	adds	r7, #112	; 0x70
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <__libc_init_array>:
 8003428:	b570      	push	{r4, r5, r6, lr}
 800342a:	4d0d      	ldr	r5, [pc, #52]	; (8003460 <__libc_init_array+0x38>)
 800342c:	4c0d      	ldr	r4, [pc, #52]	; (8003464 <__libc_init_array+0x3c>)
 800342e:	1b64      	subs	r4, r4, r5
 8003430:	10a4      	asrs	r4, r4, #2
 8003432:	2600      	movs	r6, #0
 8003434:	42a6      	cmp	r6, r4
 8003436:	d109      	bne.n	800344c <__libc_init_array+0x24>
 8003438:	4d0b      	ldr	r5, [pc, #44]	; (8003468 <__libc_init_array+0x40>)
 800343a:	4c0c      	ldr	r4, [pc, #48]	; (800346c <__libc_init_array+0x44>)
 800343c:	f000 f820 	bl	8003480 <_init>
 8003440:	1b64      	subs	r4, r4, r5
 8003442:	10a4      	asrs	r4, r4, #2
 8003444:	2600      	movs	r6, #0
 8003446:	42a6      	cmp	r6, r4
 8003448:	d105      	bne.n	8003456 <__libc_init_array+0x2e>
 800344a:	bd70      	pop	{r4, r5, r6, pc}
 800344c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003450:	4798      	blx	r3
 8003452:	3601      	adds	r6, #1
 8003454:	e7ee      	b.n	8003434 <__libc_init_array+0xc>
 8003456:	f855 3b04 	ldr.w	r3, [r5], #4
 800345a:	4798      	blx	r3
 800345c:	3601      	adds	r6, #1
 800345e:	e7f2      	b.n	8003446 <__libc_init_array+0x1e>
 8003460:	0800351c 	.word	0x0800351c
 8003464:	0800351c 	.word	0x0800351c
 8003468:	0800351c 	.word	0x0800351c
 800346c:	08003520 	.word	0x08003520

08003470 <memset>:
 8003470:	4402      	add	r2, r0
 8003472:	4603      	mov	r3, r0
 8003474:	4293      	cmp	r3, r2
 8003476:	d100      	bne.n	800347a <memset+0xa>
 8003478:	4770      	bx	lr
 800347a:	f803 1b01 	strb.w	r1, [r3], #1
 800347e:	e7f9      	b.n	8003474 <memset+0x4>

08003480 <_init>:
 8003480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003482:	bf00      	nop
 8003484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003486:	bc08      	pop	{r3}
 8003488:	469e      	mov	lr, r3
 800348a:	4770      	bx	lr

0800348c <_fini>:
 800348c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348e:	bf00      	nop
 8003490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003492:	bc08      	pop	{r3}
 8003494:	469e      	mov	lr, r3
 8003496:	4770      	bx	lr
