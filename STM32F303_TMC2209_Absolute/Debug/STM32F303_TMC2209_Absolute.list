
STM32F303_TMC2209_Absolute.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08007480  08007480  00017480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800795c  0800795c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800795c  0800795c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800795c  0800795c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800795c  0800795c  0001795c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007960  08007960  00017960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000880  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008f0  200008f0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011860  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000266b  00000000  00000000  00031900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec0  00000000  00000000  00033f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dc8  00000000  00000000  00034e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d1bb  00000000  00000000  00035bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012249  00000000  00000000  00052db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a982b  00000000  00000000  00064ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010e827  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045d4  00000000  00000000  0010e878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007468 	.word	0x08007468

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007468 	.word	0x08007468

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <tmc2209_readWriteArray>:
    if (htim == &htim3){ //htim3に設定したタイマー割り込みの時間で発火する
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);//ピンの出力を切り替え
    }
}*/
void tmc2209_readWriteArray(uint8_t channel, uint8_t *data, size_t writeLength, size_t readLength)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	60b9      	str	r1, [r7, #8]
 8000278:	607a      	str	r2, [r7, #4]
 800027a:	603b      	str	r3, [r7, #0]
 800027c:	4603      	mov	r3, r0
 800027e:	73fb      	strb	r3, [r7, #15]
	//set your uart read write
	//UART_readWrite(channelToUART(channel), data, writeLength, readLength);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8000280:	480e      	ldr	r0, [pc, #56]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000282:	f004 fda5 	bl	8004dd0 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart1, data, writeLength,3000);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	b29a      	uxth	r2, r3
 800028a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800028e:	68b9      	ldr	r1, [r7, #8]
 8000290:	480a      	ldr	r0, [pc, #40]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000292:	f004 f87d 	bl	8004390 <HAL_UART_Transmit>

	if(readLength > 0){
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d00a      	beq.n	80002b2 <tmc2209_readWriteArray+0x42>
		HAL_HalfDuplex_EnableReceiver(&huart1);
 800029c:	4807      	ldr	r0, [pc, #28]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 800029e:	f004 fde9 	bl	8004e74 <HAL_HalfDuplex_EnableReceiver>
		HAL_UART_Receive(&huart1, data, readLength, 3000);
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002aa:	68b9      	ldr	r1, [r7, #8]
 80002ac:	4803      	ldr	r0, [pc, #12]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 80002ae:	f004 f903 	bl	80044b8 <HAL_UART_Receive>
	}
}
 80002b2:	bf00      	nop
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	200000d8 	.word	0x200000d8

080002c0 <tmc2209_CRC8>:

uint8_t tmc2209_CRC8(uint8_t *data, size_t length)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
	return TMC2209_CRC(data, length);
 80002ca:	2201      	movs	r2, #1
 80002cc:	6839      	ldr	r1, [r7, #0]
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f005 fd32 	bl	8005d38 <tmc_CRC8>
 80002d4:	4603      	mov	r3, r0
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <reset>:
//
//	//StepDir_periodicJob(0);
//}

static uint8_t reset()
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	//StepDir_init(STEPDIR_PRECISION);
	//StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.DIAG);

	return tmc2209_reset(&TMC2209);
 80002e4:	4802      	ldr	r0, [pc, #8]	; (80002f0 <reset+0x10>)
 80002e6:	f005 ff5f 	bl	80061a8 <tmc2209_reset>
 80002ea:	4603      	mov	r3, r0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	200001e0 	.word	0x200001e0

080002f4 <restore>:

static uint8_t restore()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	return tmc2209_restore(&TMC2209);
 80002f8:	4802      	ldr	r0, [pc, #8]	; (8000304 <restore+0x10>)
 80002fa:	f005 ff8f 	bl	800621c <tmc2209_restore>
 80002fe:	4603      	mov	r3, r0
}
 8000300:	4618      	mov	r0, r3
 8000302:	bd80      	pop	{r7, pc}
 8000304:	200001e0 	.word	0x200001e0

08000308 <TMC2209_INIT>:


void TMC2209_INIT()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 800030e:	2201      	movs	r2, #1
 8000310:	2101      	movs	r1, #1
 8000312:	2007      	movs	r0, #7
 8000314:	f005 fc58 	bl	8005bc8 <tmc_fillCRC8Table>

	TMC2209_config.reset = reset;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <TMC2209_INIT+0x38>)
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <TMC2209_INIT+0x3c>)
 800031c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	TMC2209_config.restore = restore;
 8000320:	4b07      	ldr	r3, [pc, #28]	; (8000340 <TMC2209_INIT+0x38>)
 8000322:	4a09      	ldr	r2, [pc, #36]	; (8000348 <TMC2209_INIT+0x40>)
 8000324:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	tmc2209_init(&TMC2209, 0, 0, &TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <TMC2209_INIT+0x44>)
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <TMC2209_INIT+0x38>)
 800032e:	2200      	movs	r2, #0
 8000330:	2100      	movs	r1, #0
 8000332:	4807      	ldr	r0, [pc, #28]	; (8000350 <TMC2209_INIT+0x48>)
 8000334:	f005 fe54 	bl	8005fe0 <tmc2209_init>


	//restore();
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000468 	.word	0x20000468
 8000344:	080002e1 	.word	0x080002e1
 8000348:	080002f5 	.word	0x080002f5
 800034c:	0800760c 	.word	0x0800760c
 8000350:	200001e0 	.word	0x200001e0

08000354 <Step0>:
	UNUSED(motor);

	return &TMC2209;
}

void Step0(){                                       //step pin
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	//pull+

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2120      	movs	r1, #32
 800035c:	4804      	ldr	r0, [pc, #16]	; (8000370 <Step0+0x1c>)
 800035e:	f001 fad9 	bl	8001914 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000362:	2201      	movs	r2, #1
 8000364:	2120      	movs	r1, #32
 8000366:	4802      	ldr	r0, [pc, #8]	; (8000370 <Step0+0x1c>)
 8000368:	f001 fad4 	bl	8001914 <HAL_GPIO_WritePin>
	/*
	 * pull-
	 * HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
	 * HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
	 */
}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}
 8000370:	48000400 	.word	0x48000400

08000374 <Dir0>:

void Dir0(int dir){
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dir); //Dir0関数にdirピンを指定して格納
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	b2db      	uxtb	r3, r3
 8000380:	461a      	mov	r2, r3
 8000382:	2110      	movs	r1, #16
 8000384:	4803      	ldr	r0, [pc, #12]	; (8000394 <Dir0+0x20>)
 8000386:	f001 fac5 	bl	8001914 <HAL_GPIO_WritePin>
}
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	48000400 	.word	0x48000400

08000398 <resetStepper>:
	si->stepPosition = 0;
	si->movementDone = 0;
}


void resetStepper(volatile stepperInfo* si){    //resetStepper関数に引数をstepperInfo構造隊にポイント型変数siとして与える
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	si->c0 = si->acceleration;      //変数*siがメンバc0にアクセス.した値に変数*siがメンバaccelerationにアクセス.した値を代入する
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	edd3 7a00 	vldr	s15, [r3]
 80003a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003aa:	ee17 2a90 	vmov	r2, s15
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	615a      	str	r2, [r3, #20]
	si->d = si->c0;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	ee07 3a90 	vmov	s15, r3
 80003ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	si->di = si->d;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80003ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003ce:	ee17 2a90 	vmov	r2, s15
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	645a      	str	r2, [r3, #68]	; 0x44
	si->stepCount = 0;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2200      	movs	r2, #0
 80003da:	649a      	str	r2, [r3, #72]	; 0x48
	si->n = 0;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2200      	movs	r2, #0
 80003e0:	63da      	str	r2, [r3, #60]	; 0x3c
	si->rampUpStepCount = 0;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2200      	movs	r2, #0
 80003e6:	639a      	str	r2, [r3, #56]	; 0x38
	si->movementDone = 0;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	2200      	movs	r2, #0
 80003ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 80003f0:	bf00      	nop
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr

080003fc <prepareAbsoluteMovement>:
//	resetStepper(si);
//}



void prepareAbsoluteMovement(int absolute_steps){   //prepareAbsoluteMovementで与えられたステップ数だけモータを回す(main文から）
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	printf("absolute_steps:%d\r\n",absolute_steps);
 8000404:	6879      	ldr	r1, [r7, #4]
 8000406:	4820      	ldr	r0, [pc, #128]	; (8000488 <prepareAbsoluteMovement+0x8c>)
 8000408:	f005 ff54 	bl	80062b4 <iprintf>
	volatile stepperInfo* si = &steppers[0];	//steppers[0]のアドレスをstepperInfo* si に代入
 800040c:	4b1f      	ldr	r3, [pc, #124]	; (800048c <prepareAbsoluteMovement+0x90>)
 800040e:	60fb      	str	r3, [r7, #12]
	int steps = absolute_steps - si->stepPosition;	//目標値からstepPositionを引いた値（stepposition=毎ステップカウントされるdirの値)
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	1ad3      	subs	r3, r2, r3
 8000418:	60bb      	str	r3, [r7, #8]
	printf("steps:%d\r\n",steps);
 800041a:	68b9      	ldr	r1, [r7, #8]
 800041c:	481c      	ldr	r0, [pc, #112]	; (8000490 <prepareAbsoluteMovement+0x94>)
 800041e:	f005 ff49 	bl	80062b4 <iprintf>
	if(steps == 0){
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d02b      	beq.n	8000480 <prepareAbsoluteMovement+0x84>
					return;
				}
	si->dirFunc( steps < 0 ? 1 : 0);
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	689b      	ldr	r3, [r3, #8]
 800042c:	68ba      	ldr	r2, [r7, #8]
 800042e:	0fd2      	lsrs	r2, r2, #31
 8000430:	4610      	mov	r0, r2
 8000432:	4798      	blx	r3
	si->dir = steps > 0 ? 1:-1;
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	2b00      	cmp	r3, #0
 8000438:	dd01      	ble.n	800043e <prepareAbsoluteMovement+0x42>
 800043a:	2201      	movs	r2, #1
 800043c:	e001      	b.n	8000442 <prepareAbsoluteMovement+0x46>
 800043e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	61da      	str	r2, [r3, #28]
	//printf("prepareAbsoluteMovement\r\n");

	si->totalSteps = abs(steps);	//stepsの値をアブソリュートでtotalstepsに格納
 8000446:	68bb      	ldr	r3, [r7, #8]
 8000448:	2b00      	cmp	r3, #0
 800044a:	bfb8      	it	lt
 800044c:	425b      	neglt	r3, r3
 800044e:	461a      	mov	r2, r3
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	631a      	str	r2, [r3, #48]	; 0x30
	printf("steps:%d\r\n",si->totalSteps);
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000458:	4619      	mov	r1, r3
 800045a:	480d      	ldr	r0, [pc, #52]	; (8000490 <prepareAbsoluteMovement+0x94>)
 800045c:	f005 ff2a 	bl	80062b4 <iprintf>

	resetStepper(si);
 8000460:	68f8      	ldr	r0, [r7, #12]
 8000462:	f7ff ff99 	bl	8000398 <resetStepper>
	printf("steps:%d\r\n",steps);
 8000466:	68b9      	ldr	r1, [r7, #8]
 8000468:	4809      	ldr	r0, [pc, #36]	; (8000490 <prepareAbsoluteMovement+0x94>)
 800046a:	f005 ff23 	bl	80062b4 <iprintf>
	remainingSteppersFlag |= (1 << 0);
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <prepareAbsoluteMovement+0x98>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	b2da      	uxtb	r2, r3
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <prepareAbsoluteMovement+0x98>)
 800047c:	701a      	strb	r2, [r3, #0]
 800047e:	e000      	b.n	8000482 <prepareAbsoluteMovement+0x86>
					return;
 8000480:	bf00      	nop
}
 8000482:	3710      	adds	r7, #16
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	08007480 	.word	0x08007480
 800048c:	2000067c 	.word	0x2000067c
 8000490:	08007494 	.word	0x08007494
 8000494:	200006c8 	.word	0x200006c8

08000498 <setNextInterruptInterval>:


volatile uint8_t nextStepperFlag = 0;

void setNextInterruptInterval(){
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0

	unsigned int mind = 999999;
 800049e:	4b1d      	ldr	r3, [pc, #116]	; (8000514 <setNextInterruptInterval+0x7c>)
 80004a0:	607b      	str	r3, [r7, #4]

		if( ((1 << 0)& remainingSteppersFlag) && steppers[0].di < mind ){
 80004a2:	4b1d      	ldr	r3, [pc, #116]	; (8000518 <setNextInterruptInterval+0x80>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	f003 0301 	and.w	r3, r3, #1
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d007      	beq.n	80004c2 <setNextInterruptInterval+0x2a>
 80004b2:	4b1a      	ldr	r3, [pc, #104]	; (800051c <setNextInterruptInterval+0x84>)
 80004b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	d902      	bls.n	80004c2 <setNextInterruptInterval+0x2a>
			mind = steppers[0].di;
 80004bc:	4b17      	ldr	r3, [pc, #92]	; (800051c <setNextInterruptInterval+0x84>)
 80004be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004c0:	607b      	str	r3, [r7, #4]
		}
		nextStepperFlag = 0;
 80004c2:	4b17      	ldr	r3, [pc, #92]	; (8000520 <setNextInterruptInterval+0x88>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	701a      	strb	r2, [r3, #0]

			if( (1 << 0) && steppers[0].di == mind ){
 80004c8:	4b14      	ldr	r3, [pc, #80]	; (800051c <setNextInterruptInterval+0x84>)
 80004ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	429a      	cmp	r2, r3
 80004d0:	d107      	bne.n	80004e2 <setNextInterruptInterval+0x4a>
				nextStepperFlag |= (1 << 0);
 80004d2:	4b13      	ldr	r3, [pc, #76]	; (8000520 <setNextInterruptInterval+0x88>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	b2da      	uxtb	r2, r3
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <setNextInterruptInterval+0x88>)
 80004e0:	701a      	strb	r2, [r3, #0]
			}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);		//mindにコンペアを設定
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <setNextInterruptInterval+0x8c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	635a      	str	r2, [r3, #52]	; 0x34
			//printf("mind:%d \r\n",mind);

	if (remainingSteppersFlag == 0){
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <setNextInterruptInterval+0x80>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d104      	bne.n	80004fe <setNextInterruptInterval+0x66>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);    //65500→コンペアマッチさせない
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <setNextInterruptInterval+0x8c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80004fc:	635a      	str	r2, [r3, #52]	; 0x34
	}

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <setNextInterruptInterval+0x8c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 8000506:	bf00      	nop

}
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	000f423f 	.word	0x000f423f
 8000518:	200006c8 	.word	0x200006c8
 800051c:	2000067c 	.word	0x2000067c
 8000520:	200006c9 	.word	0x200006c9
 8000524:	2000008c 	.word	0x2000008c

08000528 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){      //指定したコンペアを超えた時発火
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	//HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
	unsigned int tmpCtr = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1);	//指定されたタイマーチャンネルのコンペアを所得
 8000530:	4b60      	ldr	r3, [pc, #384]	; (80006b4 <HAL_TIM_OC_DelayElapsedCallback+0x18c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000536:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);			//コンペアを65500にセット
 8000538:	4b5e      	ldr	r3, [pc, #376]	; (80006b4 <HAL_TIM_OC_DelayElapsedCallback+0x18c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8000540:	635a      	str	r2, [r3, #52]	; 0x34


	if ( ! (nextStepperFlag & (1 << 0)) ){				//nextStepperFlagが真でない(0なら)
 8000542:	4b5d      	ldr	r3, [pc, #372]	; (80006b8 <HAL_TIM_OC_DelayElapsedCallback+0x190>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	b2db      	uxtb	r3, r3
 8000548:	f003 0301 	and.w	r3, r3, #1
 800054c:	2b00      	cmp	r3, #0
 800054e:	d105      	bne.n	800055c <HAL_TIM_OC_DelayElapsedCallback+0x34>
			steppers[0].di -= tmpCtr;           //tmpCtrの値からsteppers[i].di引いた値を新しくsteppers[i].diに代入
 8000550:	4b5a      	ldr	r3, [pc, #360]	; (80006bc <HAL_TIM_OC_DelayElapsedCallback+0x194>)
 8000552:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	1ad3      	subs	r3, r2, r3
 8000558:	4a58      	ldr	r2, [pc, #352]	; (80006bc <HAL_TIM_OC_DelayElapsedCallback+0x194>)
 800055a:	6453      	str	r3, [r2, #68]	; 0x44
		}
		//printf("steppers:%ld \r\n",steppers[0].di);

		volatile stepperInfo* s = &steppers[0];
 800055c:	4b57      	ldr	r3, [pc, #348]	; (80006bc <HAL_TIM_OC_DelayElapsedCallback+0x194>)
 800055e:	60bb      	str	r3, [r7, #8]

		if( (s->stepCount) < (s->totalSteps) ){		//1周ごとにカウントしたstepCountがabs(steps)より小さかったら==動作が終了するまで
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000568:	429a      	cmp	r2, r3
 800056a:	d220      	bcs.n	80005ae <HAL_TIM_OC_DelayElapsedCallback+0x86>
			s->stepFunc();
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	4798      	blx	r3
			s->stepCount++;							//カウントし続ける
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000576:	1c5a      	adds	r2, r3, #1
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	649a      	str	r2, [r3, #72]	; 0x48
			s->stepPosition += s->dir;		//dir(+もしくはー(dirの向き）を加算してstepPositionに格納
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	69da      	ldr	r2, [r3, #28]
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	441a      	add	r2, r3
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	619a      	str	r2, [r3, #24]
			if ( (s->stepCount) >= (s->totalSteps) ){	//stepCountがtotalStepsを超えたとき
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	429a      	cmp	r2, r3
 8000594:	d30b      	bcc.n	80005ae <HAL_TIM_OC_DelayElapsedCallback+0x86>
				s->movementDone = 1;	//movementDoneを1にする
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	2201      	movs	r2, #1
 800059a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				remainingSteppersFlag &= ~(1 << 0);
 800059e:	4b48      	ldr	r3, [pc, #288]	; (80006c0 <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	f023 0301 	bic.w	r3, r3, #1
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b45      	ldr	r3, [pc, #276]	; (80006c0 <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 80005ac:	701a      	strb	r2, [r3, #0]

			}
		}

		if (s->rampUpStepCount == 0){
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d142      	bne.n	800063c <HAL_TIM_OC_DelayElapsedCallback+0x114>
			s->n++;									//sにnを代入して、nをプラス1する
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005ba:	1c5a      	adds	r2, r3, #1
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	63da      	str	r2, [r3, #60]	; 0x3c
			s->d = s->d - (2*s->d) / (4*s->n +1);	//加減速遅延時間
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80005cc:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	3301      	adds	r3, #1
 80005d8:	ee07 3a90 	vmov	s15, r3
 80005dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80005e0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80005e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			if (s->d <= s->minStepInterval ){		//加減速遅延時間がminStepIntervalより短いなら（定数で指定）
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	ee07 3a90 	vmov	s15, r3
 80005fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000600:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000608:	d80c      	bhi.n	8000624 <HAL_TIM_OC_DelayElapsedCallback+0xfc>
				s->d = s->minStepInterval;			//minStepIntervalを加減速遅延時間にする
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	ee07 3a90 	vmov	s15, r3
 8000612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
				s->rampUpStepCount = s->stepCount;	//rampUpStepCountはstepCountとする
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	639a      	str	r2, [r3, #56]	; 0x38
			}
			if (s->stepCount >= (s->totalSteps / 2) ){  //目標値から現在のステップを引いた値の1/2よりstepCountが大きくなったとき
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062c:	085b      	lsrs	r3, r3, #1
 800062e:	429a      	cmp	r2, r3
 8000630:	d32c      	bcc.n	800068c <HAL_TIM_OC_DelayElapsedCallback+0x164>
				s->rampUpStepCount = s->stepCount;		//rampUpStepCountはstepCountとする
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	639a      	str	r2, [r3, #56]	; 0x38
 800063a:	e027      	b.n	800068c <HAL_TIM_OC_DelayElapsedCallback+0x164>
			}
		} else if ( s->stepCount >= s->totalSteps - s->rampUpStepCount) {	//目標値から現在のステップを引いた値からrampUpStepCountを引いた値がstepCountより小さいなら
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000648:	1acb      	subs	r3, r1, r3
 800064a:	429a      	cmp	r2, r3
 800064c:	d31e      	bcc.n	800068c <HAL_TIM_OC_DelayElapsedCallback+0x164>
			s->d = (s->d * (4 * s->n + 1)) / (4 * s->n + 1 -2);				//減速の時のステップ
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	3301      	adds	r3, #1
 800065c:	ee07 3a90 	vmov	s15, r3
 8000660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000664:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	3b01      	subs	r3, #1
 8000670:	ee07 3a90 	vmov	s15, r3
 8000674:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			s->n--;		//sにnを代入し、nから1を引く
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000686:	1e5a      	subs	r2, r3, #1
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		s->di = s->d;	//計算結果sをstepperInfoのメンバdに代入したものをメンバdiに代入
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8000692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000696:	ee17 2a90 	vmov	r2, s15
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	645a      	str	r2, [r3, #68]	; 0x44
		//printf("s->di:%ld \r\n",s->di);



	setNextInterruptInterval();
 800069e:	f7ff fefb 	bl	8000498 <setNextInterruptInterval>

	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80006a2:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <HAL_TIM_OC_DelayElapsedCallback+0x18c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2200      	movs	r2, #0
 80006a8:	625a      	str	r2, [r3, #36]	; 0x24


}
 80006aa:	bf00      	nop
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	2000008c 	.word	0x2000008c
 80006b8:	200006c9 	.word	0x200006c9
 80006bc:	2000067c 	.word	0x2000067c
 80006c0:	200006c8 	.word	0x200006c8

080006c4 <runAndWait>:


void runAndWait(){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	setNextInterruptInterval();
 80006c8:	f7ff fee6 	bl	8000498 <setNextInterruptInterval>
	while(remainingSteppersFlag);
 80006cc:	bf00      	nop
 80006ce:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <runAndWait+0x1c>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d1fa      	bne.n	80006ce <runAndWait+0xa>
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200006c8 	.word	0x200006c8

080006e4 <TMCsetup>:



void TMCsetup(){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
	int32_t mstep_value = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
	int32_t toff_value = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
	int32_t microstep_value = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
	int32_t stanby_value = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
	int32_t max_value = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
	mstep_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK,TMC2209_MSTEP_REG_SELECT_SHIFT);	//uartでのmicrostepの有効化
 80006fe:	2100      	movs	r1, #0
 8000700:	4886      	ldr	r0, [pc, #536]	; (800091c <TMCsetup+0x238>)
 8000702:	f005 fc0a 	bl	8005f1a <tmc2209_readInt>
 8000706:	4603      	mov	r3, r0
 8000708:	11db      	asrs	r3, r3, #7
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	617b      	str	r3, [r7, #20]
	printf("mstep_before : %ld\r\n", mstep_value);
 8000710:	6979      	ldr	r1, [r7, #20]
 8000712:	4883      	ldr	r0, [pc, #524]	; (8000920 <TMCsetup+0x23c>)
 8000714:	f005 fdce 	bl	80062b4 <iprintf>
	mstep_value = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	617b      	str	r3, [r7, #20]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT,mstep_value);
 800071c:	2100      	movs	r1, #0
 800071e:	487f      	ldr	r0, [pc, #508]	; (800091c <TMCsetup+0x238>)
 8000720:	f005 fbfb 	bl	8005f1a <tmc2209_readInt>
 8000724:	4603      	mov	r3, r0
 8000726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	01db      	lsls	r3, r3, #7
 800072e:	b2db      	uxtb	r3, r3
 8000730:	4313      	orrs	r3, r2
 8000732:	461a      	mov	r2, r3
 8000734:	2100      	movs	r1, #0
 8000736:	4879      	ldr	r0, [pc, #484]	; (800091c <TMCsetup+0x238>)
 8000738:	f005 fb9f 	bl	8005e7a <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800073c:	f000 fdc0 	bl	80012c0 <HAL_GetTick>
 8000740:	4603      	mov	r3, r0
 8000742:	4619      	mov	r1, r3
 8000744:	4875      	ldr	r0, [pc, #468]	; (800091c <TMCsetup+0x238>)
 8000746:	f005 fd1e 	bl	8006186 <tmc2209_periodicJob>
	mstep_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT);
 800074a:	2100      	movs	r1, #0
 800074c:	4873      	ldr	r0, [pc, #460]	; (800091c <TMCsetup+0x238>)
 800074e:	f005 fbe4 	bl	8005f1a <tmc2209_readInt>
 8000752:	4603      	mov	r3, r0
 8000754:	11db      	asrs	r3, r3, #7
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	617b      	str	r3, [r7, #20]
	printf("mstep_after : %ld\r\n", mstep_value);
 800075c:	6979      	ldr	r1, [r7, #20]
 800075e:	4871      	ldr	r0, [pc, #452]	; (8000924 <TMCsetup+0x240>)
 8000760:	f005 fda8 	bl	80062b4 <iprintf>

	toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);	//保持トルクの設定
 8000764:	216c      	movs	r1, #108	; 0x6c
 8000766:	486d      	ldr	r0, [pc, #436]	; (800091c <TMCsetup+0x238>)
 8000768:	f005 fbd7 	bl	8005f1a <tmc2209_readInt>
 800076c:	4603      	mov	r3, r0
 800076e:	f003 030f 	and.w	r3, r3, #15
 8000772:	613b      	str	r3, [r7, #16]
	printf("toff_before : %ld\r\n", toff_value);
 8000774:	6939      	ldr	r1, [r7, #16]
 8000776:	486c      	ldr	r0, [pc, #432]	; (8000928 <TMCsetup+0x244>)
 8000778:	f005 fd9c 	bl	80062b4 <iprintf>
	toff_value = 3;
 800077c:	2303      	movs	r3, #3
 800077e:	613b      	str	r3, [r7, #16]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT,toff_value);
 8000780:	216c      	movs	r1, #108	; 0x6c
 8000782:	4866      	ldr	r0, [pc, #408]	; (800091c <TMCsetup+0x238>)
 8000784:	f005 fbc9 	bl	8005f1a <tmc2209_readInt>
 8000788:	4603      	mov	r3, r0
 800078a:	f023 020f 	bic.w	r2, r3, #15
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	f003 030f 	and.w	r3, r3, #15
 8000794:	4313      	orrs	r3, r2
 8000796:	461a      	mov	r2, r3
 8000798:	216c      	movs	r1, #108	; 0x6c
 800079a:	4860      	ldr	r0, [pc, #384]	; (800091c <TMCsetup+0x238>)
 800079c:	f005 fb6d 	bl	8005e7a <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80007a0:	f000 fd8e 	bl	80012c0 <HAL_GetTick>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4619      	mov	r1, r3
 80007a8:	485c      	ldr	r0, [pc, #368]	; (800091c <TMCsetup+0x238>)
 80007aa:	f005 fcec 	bl	8006186 <tmc2209_periodicJob>
	toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 80007ae:	216c      	movs	r1, #108	; 0x6c
 80007b0:	485a      	ldr	r0, [pc, #360]	; (800091c <TMCsetup+0x238>)
 80007b2:	f005 fbb2 	bl	8005f1a <tmc2209_readInt>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f003 030f 	and.w	r3, r3, #15
 80007bc:	613b      	str	r3, [r7, #16]
	printf("toff_after : %ld\r\n", toff_value);
 80007be:	6939      	ldr	r1, [r7, #16]
 80007c0:	485a      	ldr	r0, [pc, #360]	; (800092c <TMCsetup+0x248>)
 80007c2:	f005 fd77 	bl	80062b4 <iprintf>

	microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);	//microstepの設定
 80007c6:	216c      	movs	r1, #108	; 0x6c
 80007c8:	4854      	ldr	r0, [pc, #336]	; (800091c <TMCsetup+0x238>)
 80007ca:	f005 fba6 	bl	8005f1a <tmc2209_readInt>
 80007ce:	4603      	mov	r3, r0
 80007d0:	161b      	asrs	r3, r3, #24
 80007d2:	f003 030f 	and.w	r3, r3, #15
 80007d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007da:	fa42 f303 	asr.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
	printf("microstep_before : %ld\r\n", microstep_value);
 80007e0:	68f9      	ldr	r1, [r7, #12]
 80007e2:	4853      	ldr	r0, [pc, #332]	; (8000930 <TMCsetup+0x24c>)
 80007e4:	f005 fd66 	bl	80062b4 <iprintf>
	microstep_value = 4;
 80007e8:	2304      	movs	r3, #4
 80007ea:	60fb      	str	r3, [r7, #12]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT,microstep_value);
 80007ec:	216c      	movs	r1, #108	; 0x6c
 80007ee:	484b      	ldr	r0, [pc, #300]	; (800091c <TMCsetup+0x238>)
 80007f0:	f005 fb93 	bl	8005f1a <tmc2209_readInt>
 80007f4:	4603      	mov	r3, r0
 80007f6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	061b      	lsls	r3, r3, #24
 80007fe:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000802:	4313      	orrs	r3, r2
 8000804:	461a      	mov	r2, r3
 8000806:	216c      	movs	r1, #108	; 0x6c
 8000808:	4844      	ldr	r0, [pc, #272]	; (800091c <TMCsetup+0x238>)
 800080a:	f005 fb36 	bl	8005e7a <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800080e:	f000 fd57 	bl	80012c0 <HAL_GetTick>
 8000812:	4603      	mov	r3, r0
 8000814:	4619      	mov	r1, r3
 8000816:	4841      	ldr	r0, [pc, #260]	; (800091c <TMCsetup+0x238>)
 8000818:	f005 fcb5 	bl	8006186 <tmc2209_periodicJob>
	microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);
 800081c:	216c      	movs	r1, #108	; 0x6c
 800081e:	483f      	ldr	r0, [pc, #252]	; (800091c <TMCsetup+0x238>)
 8000820:	f005 fb7b 	bl	8005f1a <tmc2209_readInt>
 8000824:	4603      	mov	r3, r0
 8000826:	161b      	asrs	r3, r3, #24
 8000828:	f003 030f 	and.w	r3, r3, #15
 800082c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000830:	fa42 f303 	asr.w	r3, r2, r3
 8000834:	60fb      	str	r3, [r7, #12]
	printf("microstep_after : %ld\r\n", microstep_value);
 8000836:	68f9      	ldr	r1, [r7, #12]
 8000838:	483e      	ldr	r0, [pc, #248]	; (8000934 <TMCsetup+0x250>)
 800083a:	f005 fd3b 	bl	80062b4 <iprintf>

	stanby_value=TMC2209_FIELD_READ(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);	//待機電流の設定
 800083e:	2110      	movs	r1, #16
 8000840:	4836      	ldr	r0, [pc, #216]	; (800091c <TMCsetup+0x238>)
 8000842:	f005 fb6a 	bl	8005f1a <tmc2209_readInt>
 8000846:	4603      	mov	r3, r0
 8000848:	f003 031f 	and.w	r3, r3, #31
 800084c:	60bb      	str	r3, [r7, #8]
	printf("stanbycurrent_before: %ld\r\n", stanby_value);
 800084e:	68b9      	ldr	r1, [r7, #8]
 8000850:	4839      	ldr	r0, [pc, #228]	; (8000938 <TMCsetup+0x254>)
 8000852:	f005 fd2f 	bl	80062b4 <iprintf>
	stanby_value = 10;
 8000856:	230a      	movs	r3, #10
 8000858:	60bb      	str	r3, [r7, #8]
	TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, stanby_value);
 800085a:	2110      	movs	r1, #16
 800085c:	482f      	ldr	r0, [pc, #188]	; (800091c <TMCsetup+0x238>)
 800085e:	f005 fb5c 	bl	8005f1a <tmc2209_readInt>
 8000862:	4603      	mov	r3, r0
 8000864:	f023 021f 	bic.w	r2, r3, #31
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	f003 031f 	and.w	r3, r3, #31
 800086e:	4313      	orrs	r3, r2
 8000870:	461a      	mov	r2, r3
 8000872:	2110      	movs	r1, #16
 8000874:	4829      	ldr	r0, [pc, #164]	; (800091c <TMCsetup+0x238>)
 8000876:	f005 fb00 	bl	8005e7a <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800087a:	f000 fd21 	bl	80012c0 <HAL_GetTick>
 800087e:	4603      	mov	r3, r0
 8000880:	4619      	mov	r1, r3
 8000882:	4826      	ldr	r0, [pc, #152]	; (800091c <TMCsetup+0x238>)
 8000884:	f005 fc7f 	bl	8006186 <tmc2209_periodicJob>
	HAL_Delay(200);
 8000888:	20c8      	movs	r0, #200	; 0xc8
 800088a:	f000 fd25 	bl	80012d8 <HAL_Delay>
	stanby_value=TMC2209_FIELD_READ(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);
 800088e:	2110      	movs	r1, #16
 8000890:	4822      	ldr	r0, [pc, #136]	; (800091c <TMCsetup+0x238>)
 8000892:	f005 fb42 	bl	8005f1a <tmc2209_readInt>
 8000896:	4603      	mov	r3, r0
 8000898:	f003 031f 	and.w	r3, r3, #31
 800089c:	60bb      	str	r3, [r7, #8]
	printf("stanbycurrent_after: %ld\r\n", stanby_value);
 800089e:	68b9      	ldr	r1, [r7, #8]
 80008a0:	4826      	ldr	r0, [pc, #152]	; (800093c <TMCsetup+0x258>)
 80008a2:	f005 fd07 	bl	80062b4 <iprintf>

	max_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);	//最大電流の設定
 80008a6:	2110      	movs	r1, #16
 80008a8:	481c      	ldr	r0, [pc, #112]	; (800091c <TMCsetup+0x238>)
 80008aa:	f005 fb36 	bl	8005f1a <tmc2209_readInt>
 80008ae:	4603      	mov	r3, r0
 80008b0:	121b      	asrs	r3, r3, #8
 80008b2:	f003 031f 	and.w	r3, r3, #31
 80008b6:	607b      	str	r3, [r7, #4]
	printf("maxumum_before: %ld\r\n", max_value);
 80008b8:	6879      	ldr	r1, [r7, #4]
 80008ba:	4821      	ldr	r0, [pc, #132]	; (8000940 <TMCsetup+0x25c>)
 80008bc:	f005 fcfa 	bl	80062b4 <iprintf>
	max_value = 10;
 80008c0:	230a      	movs	r3, #10
 80008c2:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT, max_value);
 80008c4:	2110      	movs	r1, #16
 80008c6:	4815      	ldr	r0, [pc, #84]	; (800091c <TMCsetup+0x238>)
 80008c8:	f005 fb27 	bl	8005f1a <tmc2209_readInt>
 80008cc:	4603      	mov	r3, r0
 80008ce:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80008da:	4313      	orrs	r3, r2
 80008dc:	461a      	mov	r2, r3
 80008de:	2110      	movs	r1, #16
 80008e0:	480e      	ldr	r0, [pc, #56]	; (800091c <TMCsetup+0x238>)
 80008e2:	f005 faca 	bl	8005e7a <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80008e6:	f000 fceb 	bl	80012c0 <HAL_GetTick>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4619      	mov	r1, r3
 80008ee:	480b      	ldr	r0, [pc, #44]	; (800091c <TMCsetup+0x238>)
 80008f0:	f005 fc49 	bl	8006186 <tmc2209_periodicJob>
	HAL_Delay(200);
 80008f4:	20c8      	movs	r0, #200	; 0xc8
 80008f6:	f000 fcef 	bl	80012d8 <HAL_Delay>
	max_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 80008fa:	2110      	movs	r1, #16
 80008fc:	4807      	ldr	r0, [pc, #28]	; (800091c <TMCsetup+0x238>)
 80008fe:	f005 fb0c 	bl	8005f1a <tmc2209_readInt>
 8000902:	4603      	mov	r3, r0
 8000904:	121b      	asrs	r3, r3, #8
 8000906:	f003 031f 	and.w	r3, r3, #31
 800090a:	607b      	str	r3, [r7, #4]
	printf("maxumum_after: %ld\r\n", max_value);
 800090c:	6879      	ldr	r1, [r7, #4]
 800090e:	480d      	ldr	r0, [pc, #52]	; (8000944 <TMCsetup+0x260>)
 8000910:	f005 fcd0 	bl	80062b4 <iprintf>

}
 8000914:	bf00      	nop
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200001e0 	.word	0x200001e0
 8000920:	080074a0 	.word	0x080074a0
 8000924:	080074b8 	.word	0x080074b8
 8000928:	080074cc 	.word	0x080074cc
 800092c:	080074e0 	.word	0x080074e0
 8000930:	080074f4 	.word	0x080074f4
 8000934:	08007510 	.word	0x08007510
 8000938:	08007528 	.word	0x08007528
 800093c:	08007544 	.word	0x08007544
 8000940:	08007560 	.word	0x08007560
 8000944:	08007578 	.word	0x08007578

08000948 <motorrotate>:

int uartflag1=0;
char rxbuf[1];
void motorrotate()
{
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
	char motorrotate[] ="motorrotate\r\n";
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <motorrotate+0x28>)
 8000950:	463c      	mov	r4, r7
 8000952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000954:	c407      	stmia	r4!, {r0, r1, r2}
 8000956:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2,(uint8_t *)motorrotate,sizeof(motorrotate),3000);
 8000958:	4639      	mov	r1, r7
 800095a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800095e:	220e      	movs	r2, #14
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <motorrotate+0x2c>)
 8000962:	f003 fd15 	bl	8004390 <HAL_UART_Transmit>

}
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	bd90      	pop	{r4, r7, pc}
 800096e:	bf00      	nop
 8000970:	08007590 	.word	0x08007590
 8000974:	2000015c 	.word	0x2000015c

08000978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000978:	b5b0      	push	{r4, r5, r7, lr}
 800097a:	b092      	sub	sp, #72	; 0x48
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 800097e:	4b57      	ldr	r3, [pc, #348]	; (8000adc <main+0x164>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f005 fd22 	bl	80063d0 <setbuf>
	//uint8_t buffer[256];
	//char rxbuf[1];
	char start[] ="1:front,2:back\r\n";
 800098c:	4b54      	ldr	r3, [pc, #336]	; (8000ae0 <main+0x168>)
 800098e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000992:	461d      	mov	r5, r3
 8000994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000998:	682b      	ldr	r3, [r5, #0]
 800099a:	7023      	strb	r3, [r4, #0]
	char front[] ="front turn\r\n";
 800099c:	4b51      	ldr	r3, [pc, #324]	; (8000ae4 <main+0x16c>)
 800099e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80009a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009a4:	c407      	stmia	r4!, {r0, r1, r2}
 80009a6:	7023      	strb	r3, [r4, #0]
	char back[] ="back turn\r\n";
 80009a8:	4a4f      	ldr	r2, [pc, #316]	; (8000ae8 <main+0x170>)
 80009aa:	f107 0318 	add.w	r3, r7, #24
 80009ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80009b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char nonans[] ="Not Understand \r\n";
 80009b4:	4b4d      	ldr	r3, [pc, #308]	; (8000aec <main+0x174>)
 80009b6:	1d3c      	adds	r4, r7, #4
 80009b8:	461d      	mov	r5, r3
 80009ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009be:	682b      	ldr	r3, [r5, #0]
 80009c0:	8023      	strh	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c2:	f000 fc23 	bl	800120c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c6:	f000 f8ad 	bl	8000b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ca:	f000 f9d9 	bl	8000d80 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009ce:	f000 f9a7 	bl	8000d20 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80009d2:	f000 f975 	bl	8000cc0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80009d6:	f000 f8fd 	bl	8000bd4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //int getserial=0;
  TMC2209_INIT();
 80009da:	f7ff fc95 	bl	8000308 <TMC2209_INIT>
  TMCsetup();
 80009de:	f7ff fe81 	bl	80006e4 <TMCsetup>
  printf("Hello\r\n");
 80009e2:	4843      	ldr	r0, [pc, #268]	; (8000af0 <main+0x178>)
 80009e4:	f005 fcec 	bl	80063c0 <puts>

  //int i;

  HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);		//受信割り込み開始
 80009e8:	2201      	movs	r2, #1
 80009ea:	4942      	ldr	r1, [pc, #264]	; (8000af4 <main+0x17c>)
 80009ec:	4842      	ldr	r0, [pc, #264]	; (8000af8 <main+0x180>)
 80009ee:	f003 fea3 	bl	8004738 <HAL_UART_Receive_IT>
  if(uartflag1==1)
 80009f2:	4b42      	ldr	r3, [pc, #264]	; (8000afc <main+0x184>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d102      	bne.n	8000a00 <main+0x88>
  {
	  uartflag1=0;
 80009fa:	4b40      	ldr	r3, [pc, #256]	; (8000afc <main+0x184>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
  }
  	  uartflag1=0;
 8000a00:	4b3e      	ldr	r3, [pc, #248]	; (8000afc <main+0x184>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]



   HAL_UART_Transmit(&huart2,(uint8_t *)start,sizeof(start),3000);
 8000a06:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000a0a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a0e:	2211      	movs	r2, #17
 8000a10:	4839      	ldr	r0, [pc, #228]	; (8000af8 <main+0x180>)
 8000a12:	f003 fcbd 	bl	8004390 <HAL_UART_Transmit>
  //uint8_t rxbuf[1];
   //int32_t *value=3;

   //TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT, 3 );
   //Set stepper 1
   steppers[0].dirFunc = Dir0;
 8000a16:	4b3a      	ldr	r3, [pc, #232]	; (8000b00 <main+0x188>)
 8000a18:	4a3a      	ldr	r2, [pc, #232]	; (8000b04 <main+0x18c>)
 8000a1a:	609a      	str	r2, [r3, #8]
   steppers[0].stepFunc = Step0;
 8000a1c:	4b38      	ldr	r3, [pc, #224]	; (8000b00 <main+0x188>)
 8000a1e:	4a3a      	ldr	r2, [pc, #232]	; (8000b08 <main+0x190>)
 8000a20:	60da      	str	r2, [r3, #12]
   steppers[0].acceleration = 3000;
 8000a22:	4b37      	ldr	r3, [pc, #220]	; (8000b00 <main+0x188>)
 8000a24:	4a39      	ldr	r2, [pc, #228]	; (8000b0c <main+0x194>)
 8000a26:	601a      	str	r2, [r3, #0]
   steppers[0].minStepInterval = 100;
 8000a28:	4b35      	ldr	r3, [pc, #212]	; (8000b00 <main+0x188>)
 8000a2a:	2264      	movs	r2, #100	; 0x64
 8000a2c:	605a      	str	r2, [r3, #4]
   steppers[0].homing = 0;
 8000a2e:	4b34      	ldr	r3, [pc, #208]	; (8000b00 <main+0x188>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	741a      	strb	r2, [r3, #16]
   steppers[0].dir_inv = 1;
 8000a34:	4b32      	ldr	r3, [pc, #200]	; (8000b00 <main+0x188>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	621a      	str	r2, [r3, #32]
   steppers[0].seeking_vel = 100;
 8000a3a:	4b31      	ldr	r3, [pc, #196]	; (8000b00 <main+0x188>)
 8000a3c:	2264      	movs	r2, #100	; 0x64
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
   steppers[0].homing_vel = 200;
 8000a40:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <main+0x188>)
 8000a42:	22c8      	movs	r2, #200	; 0xc8
 8000a44:	62da      	str	r2, [r3, #44]	; 0x2c
   steppers[0].pull_off = 500;
 8000a46:	4b2e      	ldr	r3, [pc, #184]	; (8000b00 <main+0x188>)
 8000a48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
    //pull+
   //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);  //ena pin
    //pull-
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);

   HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000a4e:	2100      	movs	r1, #0
 8000a50:	482f      	ldr	r0, [pc, #188]	; (8000b10 <main+0x198>)
 8000a52:	f002 fbc9 	bl	80031e8 <HAL_TIM_OC_Start_IT>

	rxbuf[0]=0;
 8000a56:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <main+0x17c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
    /* USER CODE BEGIN 3 */
	  //example read register value
	  //int32_t value = 0;


	  if (rxbuf[0] != 0){
 8000a5c:	4b25      	ldr	r3, [pc, #148]	; (8000af4 <main+0x17c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d0fb      	beq.n	8000a5c <main+0xe4>
	  		printf("rxbuf : %d\r\n",rxbuf[0]);
 8000a64:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <main+0x17c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	482a      	ldr	r0, [pc, #168]	; (8000b14 <main+0x19c>)
 8000a6c:	f005 fc22 	bl	80062b4 <iprintf>

	  	if(rxbuf[0] == '1'){
 8000a70:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <main+0x17c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b31      	cmp	r3, #49	; 0x31
 8000a76:	d11a      	bne.n	8000aae <main+0x136>
	  		//HAL_UART_Transmit_IT(&huart2,(uint8_t *)front, sizeof(front));
	  		printf("1:start");
 8000a78:	4827      	ldr	r0, [pc, #156]	; (8000b18 <main+0x1a0>)
 8000a7a:	f005 fc1b 	bl	80062b4 <iprintf>
	  		prepareAbsoluteMovement(5000);
 8000a7e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a82:	f7ff fcbb 	bl	80003fc <prepareAbsoluteMovement>
	  		runAndWait();
 8000a86:	f7ff fe1d 	bl	80006c4 <runAndWait>
	  		HAL_Delay(100);
 8000a8a:	2064      	movs	r0, #100	; 0x64
 8000a8c:	f000 fc24 	bl	80012d8 <HAL_Delay>
	  		prepareAbsoluteMovement(-5000);
 8000a90:	4822      	ldr	r0, [pc, #136]	; (8000b1c <main+0x1a4>)
 8000a92:	f7ff fcb3 	bl	80003fc <prepareAbsoluteMovement>
	  		runAndWait();
 8000a96:	f7ff fe15 	bl	80006c4 <runAndWait>
	  		HAL_Delay(100);
 8000a9a:	2064      	movs	r0, #100	; 0x64
 8000a9c:	f000 fc1c 	bl	80012d8 <HAL_Delay>
	  		printf("1:end");
 8000aa0:	481f      	ldr	r0, [pc, #124]	; (8000b20 <main+0x1a8>)
 8000aa2:	f005 fc07 	bl	80062b4 <iprintf>


	  		rxbuf[0]=0;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <main+0x17c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
 8000aac:	e7d6      	b.n	8000a5c <main+0xe4>

	  		}
	  	else if(rxbuf[0] == '2'){
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <main+0x17c>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b32      	cmp	r3, #50	; 0x32
 8000ab4:	d108      	bne.n	8000ac8 <main+0x150>

	  		//HAL_UART_Transmit_IT(&huart2,(uint8_t *)back, sizeof(back));
	  		runAndWait();
 8000ab6:	f7ff fe05 	bl	80006c4 <runAndWait>
	  		HAL_Delay(100);
 8000aba:	2064      	movs	r0, #100	; 0x64
 8000abc:	f000 fc0c 	bl	80012d8 <HAL_Delay>
	  		//HAL_Delay(100);

	  		rxbuf[0]=0;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <main+0x17c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e7c9      	b.n	8000a5c <main+0xe4>
	  	}
	  	else{
	  		HAL_UART_Transmit_IT(&huart2,(uint8_t *)nonans, sizeof(nonans));
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2212      	movs	r2, #18
 8000acc:	4619      	mov	r1, r3
 8000ace:	480a      	ldr	r0, [pc, #40]	; (8000af8 <main+0x180>)
 8000ad0:	f003 fdc4 	bl	800465c <HAL_UART_Transmit_IT>
	  		rxbuf[0]=0;
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <main+0x17c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
	  if (rxbuf[0] != 0){
 8000ada:	e7bf      	b.n	8000a5c <main+0xe4>
 8000adc:	2000000c 	.word	0x2000000c
 8000ae0:	080075c8 	.word	0x080075c8
 8000ae4:	080075dc 	.word	0x080075dc
 8000ae8:	080075ec 	.word	0x080075ec
 8000aec:	080075f8 	.word	0x080075f8
 8000af0:	080075a0 	.word	0x080075a0
 8000af4:	200006d0 	.word	0x200006d0
 8000af8:	2000015c 	.word	0x2000015c
 8000afc:	200006cc 	.word	0x200006cc
 8000b00:	2000067c 	.word	0x2000067c
 8000b04:	08000375 	.word	0x08000375
 8000b08:	08000355 	.word	0x08000355
 8000b0c:	453b8000 	.word	0x453b8000
 8000b10:	2000008c 	.word	0x2000008c
 8000b14:	080075a8 	.word	0x080075a8
 8000b18:	080075b8 	.word	0x080075b8
 8000b1c:	ffffec78 	.word	0xffffec78
 8000b20:	080075c0 	.word	0x080075c0

08000b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b096      	sub	sp, #88	; 0x58
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b2e:	2228      	movs	r2, #40	; 0x28
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f005 fbb6 	bl	80062a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]
 8000b56:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b60:	2310      	movs	r3, #16
 8000b62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b64:	2302      	movs	r3, #2
 8000b66:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b6c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b70:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 fee4 	bl	8001944 <HAL_RCC_OscConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000b82:	f000 f973 	bl	8000e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b86:	230f      	movs	r3, #15
 8000b88:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 ff0c 	bl	80029c0 <HAL_RCC_ClockConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000bae:	f000 f95d 	bl	8000e6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f002 f935 	bl	8002e2c <HAL_RCCEx_PeriphCLKConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000bc8:	f000 f950 	bl	8000e6c <Error_Handler>
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3758      	adds	r7, #88	; 0x58
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08e      	sub	sp, #56	; 0x38
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]
 8000c02:	615a      	str	r2, [r3, #20]
 8000c04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c06:	4b2c      	ldr	r3, [pc, #176]	; (8000cb8 <MX_TIM3_Init+0xe4>)
 8000c08:	4a2c      	ldr	r2, [pc, #176]	; (8000cbc <MX_TIM3_Init+0xe8>)
 8000c0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1280-1;
 8000c0c:	4b2a      	ldr	r3, [pc, #168]	; (8000cb8 <MX_TIM3_Init+0xe4>)
 8000c0e:	f240 42ff 	movw	r2, #1279	; 0x4ff
 8000c12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c14:	4b28      	ldr	r3, [pc, #160]	; (8000cb8 <MX_TIM3_Init+0xe4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c1a:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <MX_TIM3_Init+0xe4>)
 8000c1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c22:	4b25      	ldr	r3, [pc, #148]	; (8000cb8 <MX_TIM3_Init+0xe4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c28:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <MX_TIM3_Init+0xe4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c2e:	4822      	ldr	r0, [pc, #136]	; (8000cb8 <MX_TIM3_Init+0xe4>)
 8000c30:	f002 fa22 	bl	8003078 <HAL_TIM_Base_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000c3a:	f000 f917 	bl	8000e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	481b      	ldr	r0, [pc, #108]	; (8000cb8 <MX_TIM3_Init+0xe4>)
 8000c4c:	f002 fda0 	bl	8003790 <HAL_TIM_ConfigClockSource>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000c56:	f000 f909 	bl	8000e6c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000c5a:	4817      	ldr	r0, [pc, #92]	; (8000cb8 <MX_TIM3_Init+0xe4>)
 8000c5c:	f002 fa63 	bl	8003126 <HAL_TIM_OC_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000c66:	f000 f901 	bl	8000e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	480f      	ldr	r0, [pc, #60]	; (8000cb8 <MX_TIM3_Init+0xe4>)
 8000c7a:	f003 fa59 	bl	8004130 <HAL_TIMEx_MasterConfigSynchronization>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000c84:	f000 f8f2 	bl	8000e6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <MX_TIM3_Init+0xe4>)
 8000ca0:	f002 fcfc 	bl	800369c <HAL_TIM_OC_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000caa:	f000 f8df 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	3738      	adds	r7, #56	; 0x38
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	2000008c 	.word	0x2000008c
 8000cbc:	40000400 	.word	0x40000400

08000cc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_USART1_UART_Init+0x58>)
 8000cc6:	4a15      	ldr	r2, [pc, #84]	; (8000d1c <MX_USART1_UART_Init+0x5c>)
 8000cc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <MX_USART1_UART_Init+0x58>)
 8000ccc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_USART1_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <MX_USART1_UART_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_USART1_UART_Init+0x58>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <MX_USART1_UART_Init+0x58>)
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <MX_USART1_UART_Init+0x58>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <MX_USART1_UART_Init+0x58>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <MX_USART1_UART_Init+0x58>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_USART1_UART_Init+0x58>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_USART1_UART_Init+0x58>)
 8000d04:	f003 faee 	bl	80042e4 <HAL_HalfDuplex_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d0e:	f000 f8ad 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200000d8 	.word	0x200000d8
 8000d1c:	40013800 	.word	0x40013800

08000d20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d26:	4a15      	ldr	r2, [pc, #84]	; (8000d7c <MX_USART2_UART_Init+0x5c>)
 8000d28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d64:	f003 fa70 	bl	8004248 <HAL_UART_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d6e:	f000 f87d 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2000015c 	.word	0x2000015c
 8000d7c:	40004400 	.word	0x40004400

08000d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <MX_GPIO_Init+0x8c>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	4a1c      	ldr	r2, [pc, #112]	; (8000e0c <MX_GPIO_Init+0x8c>)
 8000d9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000da0:	6153      	str	r3, [r2, #20]
 8000da2:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <MX_GPIO_Init+0x8c>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <MX_GPIO_Init+0x8c>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	4a16      	ldr	r2, [pc, #88]	; (8000e0c <MX_GPIO_Init+0x8c>)
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	6153      	str	r3, [r2, #20]
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_GPIO_Init+0x8c>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_GPIO_Init+0x8c>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	4a10      	ldr	r2, [pc, #64]	; (8000e0c <MX_GPIO_Init+0x8c>)
 8000dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dd0:	6153      	str	r3, [r2, #20]
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <MX_GPIO_Init+0x8c>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2130      	movs	r1, #48	; 0x30
 8000de2:	480b      	ldr	r0, [pc, #44]	; (8000e10 <MX_GPIO_Init+0x90>)
 8000de4:	f000 fd96 	bl	8001914 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000de8:	2330      	movs	r3, #48	; 0x30
 8000dea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	2301      	movs	r3, #1
 8000dee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4804      	ldr	r0, [pc, #16]	; (8000e10 <MX_GPIO_Init+0x90>)
 8000e00:	f000 fc16 	bl	8001630 <HAL_GPIO_Init>

}
 8000e04:	bf00      	nop
 8000e06:	3720      	adds	r7, #32
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	48000400 	.word	0x48000400

08000e14 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	230a      	movs	r3, #10
 8000e26:	68b9      	ldr	r1, [r7, #8]
 8000e28:	4803      	ldr	r0, [pc, #12]	; (8000e38 <_write+0x24>)
 8000e2a:	f003 fab1 	bl	8004390 <HAL_UART_Transmit>
  return len;
 8000e2e:	687b      	ldr	r3, [r7, #4]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	2000015c 	.word	0x2000015c

08000e3c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	motorrotate();
 8000e44:	f7ff fd80 	bl	8000948 <motorrotate>

	HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4905      	ldr	r1, [pc, #20]	; (8000e60 <HAL_UART_RxCpltCallback+0x24>)
 8000e4c:	4805      	ldr	r0, [pc, #20]	; (8000e64 <HAL_UART_RxCpltCallback+0x28>)
 8000e4e:	f003 fc73 	bl	8004738 <HAL_UART_Receive_IT>
	uartflag1 = 1;
 8000e52:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_UART_RxCpltCallback+0x2c>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	601a      	str	r2, [r3, #0]

}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	200006d0 	.word	0x200006d0
 8000e64:	2000015c 	.word	0x2000015c
 8000e68:	200006cc 	.word	0x200006cc

08000e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e70:	b672      	cpsid	i
}
 8000e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <Error_Handler+0x8>
	...

08000e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <HAL_MspInit+0x44>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <HAL_MspInit+0x44>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6193      	str	r3, [r2, #24]
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_MspInit+0x44>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <HAL_MspInit+0x44>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <HAL_MspInit+0x44>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	61d3      	str	r3, [r2, #28]
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_MspInit+0x44>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <HAL_TIM_Base_MspInit+0x44>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d113      	bne.n	8000efa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <HAL_TIM_Base_MspInit+0x48>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	4a0c      	ldr	r2, [pc, #48]	; (8000f08 <HAL_TIM_Base_MspInit+0x48>)
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	61d3      	str	r3, [r2, #28]
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_TIM_Base_MspInit+0x48>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	201d      	movs	r0, #29
 8000ef0:	f000 faf1 	bl	80014d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ef4:	201d      	movs	r0, #29
 8000ef6:	f000 fb0a 	bl	800150e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40000400 	.word	0x40000400
 8000f08:	40021000 	.word	0x40021000

08000f0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	; 0x30
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a34      	ldr	r2, [pc, #208]	; (8000ffc <HAL_UART_MspInit+0xf0>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d12a      	bne.n	8000f84 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f2e:	4b34      	ldr	r3, [pc, #208]	; (8001000 <HAL_UART_MspInit+0xf4>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	4a33      	ldr	r2, [pc, #204]	; (8001000 <HAL_UART_MspInit+0xf4>)
 8000f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f38:	6193      	str	r3, [r2, #24]
 8000f3a:	4b31      	ldr	r3, [pc, #196]	; (8001000 <HAL_UART_MspInit+0xf4>)
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f42:	61bb      	str	r3, [r7, #24]
 8000f44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b2e      	ldr	r3, [pc, #184]	; (8001000 <HAL_UART_MspInit+0xf4>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	4a2d      	ldr	r2, [pc, #180]	; (8001000 <HAL_UART_MspInit+0xf4>)
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	6153      	str	r3, [r2, #20]
 8000f52:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <HAL_UART_MspInit+0xf4>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f64:	2312      	movs	r3, #18
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f70:	2307      	movs	r3, #7
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7e:	f000 fb57 	bl	8001630 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f82:	e036      	b.n	8000ff2 <HAL_UART_MspInit+0xe6>
  else if(huart->Instance==USART2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a1e      	ldr	r2, [pc, #120]	; (8001004 <HAL_UART_MspInit+0xf8>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d131      	bne.n	8000ff2 <HAL_UART_MspInit+0xe6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <HAL_UART_MspInit+0xf4>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4a1b      	ldr	r2, [pc, #108]	; (8001000 <HAL_UART_MspInit+0xf4>)
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f98:	61d3      	str	r3, [r2, #28]
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_UART_MspInit+0xf4>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <HAL_UART_MspInit+0xf4>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	4a15      	ldr	r2, [pc, #84]	; (8001000 <HAL_UART_MspInit+0xf4>)
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	6153      	str	r3, [r2, #20]
 8000fb2:	4b13      	ldr	r3, [pc, #76]	; (8001000 <HAL_UART_MspInit+0xf4>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000fbe:	f248 0304 	movw	r3, #32772	; 0x8004
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fd0:	2307      	movs	r3, #7
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fde:	f000 fb27 	bl	8001630 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2026      	movs	r0, #38	; 0x26
 8000fe8:	f000 fa75 	bl	80014d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fec:	2026      	movs	r0, #38	; 0x26
 8000fee:	f000 fa8e 	bl	800150e <HAL_NVIC_EnableIRQ>
}
 8000ff2:	bf00      	nop
 8000ff4:	3730      	adds	r7, #48	; 0x30
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40013800 	.word	0x40013800
 8001000:	40021000 	.word	0x40021000
 8001004:	40004400 	.word	0x40004400

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800100c:	e7fe      	b.n	800100c <NMI_Handler+0x4>

0800100e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <HardFault_Handler+0x4>

08001014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <MemManage_Handler+0x4>

0800101a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <BusFault_Handler+0x4>

08001020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <UsageFault_Handler+0x4>

08001026 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001054:	f000 f920 	bl	8001298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <TIM3_IRQHandler+0x10>)
 8001062:	f002 f9fb 	bl	800345c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000008c 	.word	0x2000008c

08001070 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <USART2_IRQHandler+0x10>)
 8001076:	f003 fbad 	bl	80047d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000015c 	.word	0x2000015c

08001084 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	e00a      	b.n	80010ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001096:	f3af 8000 	nop.w
 800109a:	4601      	mov	r1, r0
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	60ba      	str	r2, [r7, #8]
 80010a2:	b2ca      	uxtb	r2, r1
 80010a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dbf0      	blt.n	8001096 <_read+0x12>
	}

return len;
 80010b4:	687b      	ldr	r3, [r7, #4]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <_close>:
	}
	return len;
}

int _close(int file)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
	return -1;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010e6:	605a      	str	r2, [r3, #4]
	return 0;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <_isatty>:

int _isatty(int file)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
	return 1;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
	return 0;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001130:	4a14      	ldr	r2, [pc, #80]	; (8001184 <_sbrk+0x5c>)
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <_sbrk+0x60>)
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <_sbrk+0x64>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <_sbrk+0x68>)
 8001148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	429a      	cmp	r2, r3
 8001156:	d207      	bcs.n	8001168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001158:	f005 f87a 	bl	8006250 <__errno>
 800115c:	4603      	mov	r3, r0
 800115e:	220c      	movs	r2, #12
 8001160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001166:	e009      	b.n	800117c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	4a05      	ldr	r2, [pc, #20]	; (800118c <_sbrk+0x64>)
 8001178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117a:	68fb      	ldr	r3, [r7, #12]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20003000 	.word	0x20003000
 8001188:	00000400 	.word	0x00000400
 800118c:	200006d4 	.word	0x200006d4
 8001190:	200008f0 	.word	0x200008f0

08001194 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <SystemInit+0x20>)
 800119a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <SystemInit+0x20>)
 80011a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011bc:	480d      	ldr	r0, [pc, #52]	; (80011f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80011be:	490e      	ldr	r1, [pc, #56]	; (80011f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c0:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <LoopForever+0xe>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011d4:	4c0b      	ldr	r4, [pc, #44]	; (8001204 <LoopForever+0x16>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011e2:	f7ff ffd7 	bl	8001194 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011e6:	f005 f839 	bl	800625c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ea:	f7ff fbc5 	bl	8000978 <main>

080011ee <LoopForever>:

LoopForever:
    b LoopForever
 80011ee:	e7fe      	b.n	80011ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011f0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80011f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011fc:	08007964 	.word	0x08007964
  ldr r2, =_sbss
 8001200:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001204:	200008f0 	.word	0x200008f0

08001208 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC1_2_IRQHandler>
	...

0800120c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_Init+0x28>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a07      	ldr	r2, [pc, #28]	; (8001234 <HAL_Init+0x28>)
 8001216:	f043 0310 	orr.w	r3, r3, #16
 800121a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121c:	2003      	movs	r0, #3
 800121e:	f000 f94f 	bl	80014c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001222:	2000      	movs	r0, #0
 8001224:	f000 f808 	bl	8001238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001228:	f7ff fe26 	bl	8000e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40022000 	.word	0x40022000

08001238 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x54>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_InitTick+0x58>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f967 	bl	800152a <HAL_SYSTICK_Config>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e00e      	b.n	8001284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	d80a      	bhi.n	8001282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126c:	2200      	movs	r2, #0
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001274:	f000 f92f 	bl	80014d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001278:	4a06      	ldr	r2, [pc, #24]	; (8001294 <HAL_InitTick+0x5c>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	e000      	b.n	8001284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000000 	.word	0x20000000
 8001290:	20000008 	.word	0x20000008
 8001294:	20000004 	.word	0x20000004

08001298 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x20>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x24>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <HAL_IncTick+0x24>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008
 80012bc:	200006d8 	.word	0x200006d8

080012c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	200006d8 	.word	0x200006d8

080012d8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff ffee 	bl	80012c0 <HAL_GetTick>
 80012e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012f0:	d005      	beq.n	80012fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <HAL_Delay+0x44>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012fe:	bf00      	nop
 8001300:	f7ff ffde 	bl	80012c0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	429a      	cmp	r2, r3
 800130e:	d8f7      	bhi.n	8001300 <HAL_Delay+0x28>
  {
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000008 	.word	0x20000008

08001320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800134c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <__NVIC_GetPriorityGrouping+0x18>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	f003 0307 	and.w	r3, r3, #7
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	2b00      	cmp	r3, #0
 8001394:	db0b      	blt.n	80013ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	f003 021f 	and.w	r2, r3, #31
 800139c:	4907      	ldr	r1, [pc, #28]	; (80013bc <__NVIC_EnableIRQ+0x38>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	095b      	lsrs	r3, r3, #5
 80013a4:	2001      	movs	r0, #1
 80013a6:	fa00 f202 	lsl.w	r2, r0, r2
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000e100 	.word	0xe000e100

080013c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	db0a      	blt.n	80013ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	490c      	ldr	r1, [pc, #48]	; (800140c <__NVIC_SetPriority+0x4c>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	440b      	add	r3, r1
 80013e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e8:	e00a      	b.n	8001400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4908      	ldr	r1, [pc, #32]	; (8001410 <__NVIC_SetPriority+0x50>)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	3b04      	subs	r3, #4
 80013f8:	0112      	lsls	r2, r2, #4
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	440b      	add	r3, r1
 80013fe:	761a      	strb	r2, [r3, #24]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000e100 	.word	0xe000e100
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	; 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f1c3 0307 	rsb	r3, r3, #7
 800142e:	2b04      	cmp	r3, #4
 8001430:	bf28      	it	cs
 8001432:	2304      	movcs	r3, #4
 8001434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3304      	adds	r3, #4
 800143a:	2b06      	cmp	r3, #6
 800143c:	d902      	bls.n	8001444 <NVIC_EncodePriority+0x30>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3b03      	subs	r3, #3
 8001442:	e000      	b.n	8001446 <NVIC_EncodePriority+0x32>
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	401a      	ands	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800145c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	43d9      	mvns	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	4313      	orrs	r3, r2
         );
}
 800146e:	4618      	mov	r0, r3
 8001470:	3724      	adds	r7, #36	; 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800148c:	d301      	bcc.n	8001492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148e:	2301      	movs	r3, #1
 8001490:	e00f      	b.n	80014b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <SysTick_Config+0x40>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149a:	210f      	movs	r1, #15
 800149c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014a0:	f7ff ff8e 	bl	80013c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <SysTick_Config+0x40>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014aa:	4b04      	ldr	r3, [pc, #16]	; (80014bc <SysTick_Config+0x40>)
 80014ac:	2207      	movs	r2, #7
 80014ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	e000e010 	.word	0xe000e010

080014c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff29 	bl	8001320 <__NVIC_SetPriorityGrouping>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e8:	f7ff ff3e 	bl	8001368 <__NVIC_GetPriorityGrouping>
 80014ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	6978      	ldr	r0, [r7, #20]
 80014f4:	f7ff ff8e 	bl	8001414 <NVIC_EncodePriority>
 80014f8:	4602      	mov	r2, r0
 80014fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff5d 	bl	80013c0 <__NVIC_SetPriority>
}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff31 	bl	8001384 <__NVIC_EnableIRQ>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ffa2 	bl	800147c <SysTick_Config>
 8001538:	4603      	mov	r3, r0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001550:	2b02      	cmp	r3, #2
 8001552:	d008      	beq.n	8001566 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2204      	movs	r2, #4
 8001558:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e020      	b.n	80015a8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 020e 	bic.w	r2, r2, #14
 8001574:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0201 	bic.w	r2, r2, #1
 8001584:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800158e:	2101      	movs	r1, #1
 8001590:	fa01 f202 	lsl.w	r2, r1, r2
 8001594:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d005      	beq.n	80015d6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2204      	movs	r2, #4
 80015ce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	e027      	b.n	8001626 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 020e 	bic.w	r2, r2, #14
 80015e4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0201 	bic.w	r2, r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fe:	2101      	movs	r1, #1
 8001600:	fa01 f202 	lsl.w	r2, r1, r2
 8001604:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	4798      	blx	r3
    } 
  }
  return status;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001630:	b480      	push	{r7}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163e:	e14e      	b.n	80018de <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	2101      	movs	r1, #1
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	fa01 f303 	lsl.w	r3, r1, r3
 800164c:	4013      	ands	r3, r2
 800164e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 8140 	beq.w	80018d8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b01      	cmp	r3, #1
 8001662:	d005      	beq.n	8001670 <HAL_GPIO_Init+0x40>
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d130      	bne.n	80016d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a6:	2201      	movs	r2, #1
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	091b      	lsrs	r3, r3, #4
 80016bc:	f003 0201 	and.w	r2, r3, #1
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d017      	beq.n	800170e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	2203      	movs	r2, #3
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4013      	ands	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d123      	bne.n	8001762 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	08da      	lsrs	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3208      	adds	r2, #8
 8001722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	220f      	movs	r2, #15
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	691a      	ldr	r2, [r3, #16]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	08da      	lsrs	r2, r3, #3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3208      	adds	r2, #8
 800175c:	6939      	ldr	r1, [r7, #16]
 800175e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	2203      	movs	r2, #3
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 0203 	and.w	r2, r3, #3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 809a 	beq.w	80018d8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a4:	4b55      	ldr	r3, [pc, #340]	; (80018fc <HAL_GPIO_Init+0x2cc>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	4a54      	ldr	r2, [pc, #336]	; (80018fc <HAL_GPIO_Init+0x2cc>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6193      	str	r3, [r2, #24]
 80017b0:	4b52      	ldr	r3, [pc, #328]	; (80018fc <HAL_GPIO_Init+0x2cc>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017bc:	4a50      	ldr	r2, [pc, #320]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	089b      	lsrs	r3, r3, #2
 80017c2:	3302      	adds	r3, #2
 80017c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	220f      	movs	r2, #15
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017e6:	d013      	beq.n	8001810 <HAL_GPIO_Init+0x1e0>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a46      	ldr	r2, [pc, #280]	; (8001904 <HAL_GPIO_Init+0x2d4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d00d      	beq.n	800180c <HAL_GPIO_Init+0x1dc>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a45      	ldr	r2, [pc, #276]	; (8001908 <HAL_GPIO_Init+0x2d8>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d007      	beq.n	8001808 <HAL_GPIO_Init+0x1d8>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a44      	ldr	r2, [pc, #272]	; (800190c <HAL_GPIO_Init+0x2dc>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d101      	bne.n	8001804 <HAL_GPIO_Init+0x1d4>
 8001800:	2303      	movs	r3, #3
 8001802:	e006      	b.n	8001812 <HAL_GPIO_Init+0x1e2>
 8001804:	2305      	movs	r3, #5
 8001806:	e004      	b.n	8001812 <HAL_GPIO_Init+0x1e2>
 8001808:	2302      	movs	r3, #2
 800180a:	e002      	b.n	8001812 <HAL_GPIO_Init+0x1e2>
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <HAL_GPIO_Init+0x1e2>
 8001810:	2300      	movs	r3, #0
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	f002 0203 	and.w	r2, r2, #3
 8001818:	0092      	lsls	r2, r2, #2
 800181a:	4093      	lsls	r3, r2
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001822:	4937      	ldr	r1, [pc, #220]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	3302      	adds	r3, #2
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001830:	4b37      	ldr	r3, [pc, #220]	; (8001910 <HAL_GPIO_Init+0x2e0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001854:	4a2e      	ldr	r2, [pc, #184]	; (8001910 <HAL_GPIO_Init+0x2e0>)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800185a:	4b2d      	ldr	r3, [pc, #180]	; (8001910 <HAL_GPIO_Init+0x2e0>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	43db      	mvns	r3, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800187e:	4a24      	ldr	r2, [pc, #144]	; (8001910 <HAL_GPIO_Init+0x2e0>)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001884:	4b22      	ldr	r3, [pc, #136]	; (8001910 <HAL_GPIO_Init+0x2e0>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	43db      	mvns	r3, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018a8:	4a19      	ldr	r2, [pc, #100]	; (8001910 <HAL_GPIO_Init+0x2e0>)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ae:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_GPIO_Init+0x2e0>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018d2:	4a0f      	ldr	r2, [pc, #60]	; (8001910 <HAL_GPIO_Init+0x2e0>)
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	3301      	adds	r3, #1
 80018dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	fa22 f303 	lsr.w	r3, r2, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f47f aea9 	bne.w	8001640 <HAL_GPIO_Init+0x10>
  }
}
 80018ee:	bf00      	nop
 80018f0:	bf00      	nop
 80018f2:	371c      	adds	r7, #28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	40021000 	.word	0x40021000
 8001900:	40010000 	.word	0x40010000
 8001904:	48000400 	.word	0x48000400
 8001908:	48000800 	.word	0x48000800
 800190c:	48000c00 	.word	0x48000c00
 8001910:	40010400 	.word	0x40010400

08001914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	807b      	strh	r3, [r7, #2]
 8001920:	4613      	mov	r3, r2
 8001922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001924:	787b      	ldrb	r3, [r7, #1]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800192a:	887a      	ldrh	r2, [r7, #2]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001930:	e002      	b.n	8001938 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001932:	887a      	ldrh	r2, [r7, #2]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800194a:	af00      	add	r7, sp, #0
 800194c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001950:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001954:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	f001 b823 	b.w	80029b0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 817d 	beq.w	8001c7a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001980:	4bbc      	ldr	r3, [pc, #752]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 030c 	and.w	r3, r3, #12
 8001988:	2b04      	cmp	r3, #4
 800198a:	d00c      	beq.n	80019a6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800198c:	4bb9      	ldr	r3, [pc, #740]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	2b08      	cmp	r3, #8
 8001996:	d15c      	bne.n	8001a52 <HAL_RCC_OscConfig+0x10e>
 8001998:	4bb6      	ldr	r3, [pc, #728]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a4:	d155      	bne.n	8001a52 <HAL_RCC_OscConfig+0x10e>
 80019a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019aa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80019b2:	fa93 f3a3 	rbit	r3, r3
 80019b6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019be:	fab3 f383 	clz	r3, r3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	095b      	lsrs	r3, r3, #5
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d102      	bne.n	80019d8 <HAL_RCC_OscConfig+0x94>
 80019d2:	4ba8      	ldr	r3, [pc, #672]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	e015      	b.n	8001a04 <HAL_RCC_OscConfig+0xc0>
 80019d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019dc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80019ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019f0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80019f4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80019f8:	fa93 f3a3 	rbit	r3, r3
 80019fc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001a00:	4b9c      	ldr	r3, [pc, #624]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a08:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001a0c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001a10:	fa92 f2a2 	rbit	r2, r2
 8001a14:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001a18:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001a1c:	fab2 f282 	clz	r2, r2
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	f042 0220 	orr.w	r2, r2, #32
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	f002 021f 	and.w	r2, r2, #31
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 811f 	beq.w	8001c78 <HAL_RCC_OscConfig+0x334>
 8001a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f040 8116 	bne.w	8001c78 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	f000 bfaf 	b.w	80029b0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a62:	d106      	bne.n	8001a72 <HAL_RCC_OscConfig+0x12e>
 8001a64:	4b83      	ldr	r3, [pc, #524]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a82      	ldr	r2, [pc, #520]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	e036      	b.n	8001ae0 <HAL_RCC_OscConfig+0x19c>
 8001a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x158>
 8001a82:	4b7c      	ldr	r3, [pc, #496]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a7b      	ldr	r2, [pc, #492]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b79      	ldr	r3, [pc, #484]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a78      	ldr	r2, [pc, #480]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001a94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e021      	b.n	8001ae0 <HAL_RCC_OscConfig+0x19c>
 8001a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aac:	d10c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x184>
 8001aae:	4b71      	ldr	r3, [pc, #452]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a70      	ldr	r2, [pc, #448]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	4b6e      	ldr	r3, [pc, #440]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a6d      	ldr	r2, [pc, #436]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e00b      	b.n	8001ae0 <HAL_RCC_OscConfig+0x19c>
 8001ac8:	4b6a      	ldr	r3, [pc, #424]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a69      	ldr	r2, [pc, #420]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	4b67      	ldr	r3, [pc, #412]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a66      	ldr	r2, [pc, #408]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ade:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ae0:	4b64      	ldr	r3, [pc, #400]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae4:	f023 020f 	bic.w	r2, r3, #15
 8001ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	495f      	ldr	r1, [pc, #380]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d059      	beq.n	8001bbe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0a:	f7ff fbd9 	bl	80012c0 <HAL_GetTick>
 8001b0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	e00a      	b.n	8001b2a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b14:	f7ff fbd4 	bl	80012c0 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b64      	cmp	r3, #100	; 0x64
 8001b22:	d902      	bls.n	8001b2a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	f000 bf43 	b.w	80029b0 <HAL_RCC_OscConfig+0x106c>
 8001b2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b2e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001b3e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	fab3 f383 	clz	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	095b      	lsrs	r3, r3, #5
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d102      	bne.n	8001b5c <HAL_RCC_OscConfig+0x218>
 8001b56:	4b47      	ldr	r3, [pc, #284]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	e015      	b.n	8001b88 <HAL_RCC_OscConfig+0x244>
 8001b5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b60:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001b68:	fa93 f3a3 	rbit	r3, r3
 8001b6c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001b70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b74:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001b78:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001b84:	4b3b      	ldr	r3, [pc, #236]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b8c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001b90:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001b94:	fa92 f2a2 	rbit	r2, r2
 8001b98:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001b9c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001ba0:	fab2 f282 	clz	r2, r2
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	f042 0220 	orr.w	r2, r2, #32
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	f002 021f 	and.w	r2, r2, #31
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0ab      	beq.n	8001b14 <HAL_RCC_OscConfig+0x1d0>
 8001bbc:	e05d      	b.n	8001c7a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbe:	f7ff fb7f 	bl	80012c0 <HAL_GetTick>
 8001bc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fb7a 	bl	80012c0 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b64      	cmp	r3, #100	; 0x64
 8001bd6:	d902      	bls.n	8001bde <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	f000 bee9 	b.w	80029b0 <HAL_RCC_OscConfig+0x106c>
 8001bde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001bea:	fa93 f3a3 	rbit	r3, r3
 8001bee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001bf2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	095b      	lsrs	r3, r3, #5
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d102      	bne.n	8001c10 <HAL_RCC_OscConfig+0x2cc>
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	e015      	b.n	8001c3c <HAL_RCC_OscConfig+0x2f8>
 8001c10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c14:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001c1c:	fa93 f3a3 	rbit	r3, r3
 8001c20:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c28:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c2c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c40:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001c44:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001c48:	fa92 f2a2 	rbit	r2, r2
 8001c4c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001c50:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001c54:	fab2 f282 	clz	r2, r2
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	f042 0220 	orr.w	r2, r2, #32
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	f002 021f 	and.w	r2, r2, #31
 8001c64:	2101      	movs	r1, #1
 8001c66:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1ab      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x284>
 8001c70:	e003      	b.n	8001c7a <HAL_RCC_OscConfig+0x336>
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 817d 	beq.w	8001f8a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c90:	4ba6      	ldr	r3, [pc, #664]	; (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 030c 	and.w	r3, r3, #12
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00b      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c9c:	4ba3      	ldr	r3, [pc, #652]	; (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d172      	bne.n	8001d8e <HAL_RCC_OscConfig+0x44a>
 8001ca8:	4ba0      	ldr	r3, [pc, #640]	; (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d16c      	bne.n	8001d8e <HAL_RCC_OscConfig+0x44a>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001cc6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cca:	fab3 f383 	clz	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	095b      	lsrs	r3, r3, #5
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d102      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x3a0>
 8001cde:	4b93      	ldr	r3, [pc, #588]	; (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	e013      	b.n	8001d0c <HAL_RCC_OscConfig+0x3c8>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001cee:	fa93 f3a3 	rbit	r3, r3
 8001cf2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001cfc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001d08:	4b88      	ldr	r3, [pc, #544]	; (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001d12:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001d16:	fa92 f2a2 	rbit	r2, r2
 8001d1a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001d1e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001d22:	fab2 f282 	clz	r2, r2
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	f042 0220 	orr.w	r2, r2, #32
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	f002 021f 	and.w	r2, r2, #31
 8001d32:	2101      	movs	r1, #1
 8001d34:	fa01 f202 	lsl.w	r2, r1, r2
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00a      	beq.n	8001d54 <HAL_RCC_OscConfig+0x410>
 8001d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d002      	beq.n	8001d54 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	f000 be2e 	b.w	80029b0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d54:	4b75      	ldr	r3, [pc, #468]	; (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	21f8      	movs	r1, #248	; 0xf8
 8001d6a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001d72:	fa91 f1a1 	rbit	r1, r1
 8001d76:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001d7a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001d7e:	fab1 f181 	clz	r1, r1
 8001d82:	b2c9      	uxtb	r1, r1
 8001d84:	408b      	lsls	r3, r1
 8001d86:	4969      	ldr	r1, [pc, #420]	; (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8c:	e0fd      	b.n	8001f8a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 8088 	beq.w	8001eb0 <HAL_RCC_OscConfig+0x56c>
 8001da0:	2301      	movs	r3, #1
 8001da2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001daa:	fa93 f3a3 	rbit	r3, r3
 8001dae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001db2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db6:	fab3 f383 	clz	r3, r3
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	2301      	movs	r3, #1
 8001dca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fa78 	bl	80012c0 <HAL_GetTick>
 8001dd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd6:	f7ff fa73 	bl	80012c0 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d902      	bls.n	8001dec <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	f000 bde2 	b.w	80029b0 <HAL_RCC_OscConfig+0x106c>
 8001dec:	2302      	movs	r3, #2
 8001dee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001dfe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	095b      	lsrs	r3, r3, #5
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d102      	bne.n	8001e1c <HAL_RCC_OscConfig+0x4d8>
 8001e16:	4b45      	ldr	r3, [pc, #276]	; (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	e013      	b.n	8001e44 <HAL_RCC_OscConfig+0x500>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e2e:	2302      	movs	r3, #2
 8001e30:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e34:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001e38:	fa93 f3a3 	rbit	r3, r3
 8001e3c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e40:	4b3a      	ldr	r3, [pc, #232]	; (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	2202      	movs	r2, #2
 8001e46:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001e4a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001e4e:	fa92 f2a2 	rbit	r2, r2
 8001e52:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001e56:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e5a:	fab2 f282 	clz	r2, r2
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	f042 0220 	orr.w	r2, r2, #32
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	f002 021f 	and.w	r2, r2, #31
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0af      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e76:	4b2d      	ldr	r3, [pc, #180]	; (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	21f8      	movs	r1, #248	; 0xf8
 8001e8c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001e94:	fa91 f1a1 	rbit	r1, r1
 8001e98:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001e9c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001ea0:	fab1 f181 	clz	r1, r1
 8001ea4:	b2c9      	uxtb	r1, r1
 8001ea6:	408b      	lsls	r3, r1
 8001ea8:	4920      	ldr	r1, [pc, #128]	; (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]
 8001eae:	e06c      	b.n	8001f8a <HAL_RCC_OscConfig+0x646>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001ec2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec6:	fab3 f383 	clz	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ed0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	2300      	movs	r3, #0
 8001eda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7ff f9f0 	bl	80012c0 <HAL_GetTick>
 8001ee0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee4:	e00a      	b.n	8001efc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee6:	f7ff f9eb 	bl	80012c0 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d902      	bls.n	8001efc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	f000 bd5a 	b.w	80029b0 <HAL_RCC_OscConfig+0x106c>
 8001efc:	2302      	movs	r3, #2
 8001efe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f02:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	095b      	lsrs	r3, r3, #5
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d104      	bne.n	8001f30 <HAL_RCC_OscConfig+0x5ec>
 8001f26:	4b01      	ldr	r3, [pc, #4]	; (8001f2c <HAL_RCC_OscConfig+0x5e8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	e015      	b.n	8001f58 <HAL_RCC_OscConfig+0x614>
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	2302      	movs	r3, #2
 8001f32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f3a:	fa93 f3a3 	rbit	r3, r3
 8001f3e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f42:	2302      	movs	r3, #2
 8001f44:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f48:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001f54:	4bc8      	ldr	r3, [pc, #800]	; (8002278 <HAL_RCC_OscConfig+0x934>)
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	2202      	movs	r2, #2
 8001f5a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001f5e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f62:	fa92 f2a2 	rbit	r2, r2
 8001f66:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001f6a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001f6e:	fab2 f282 	clz	r2, r2
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	f042 0220 	orr.w	r2, r2, #32
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	f002 021f 	and.w	r2, r2, #31
 8001f7e:	2101      	movs	r1, #1
 8001f80:	fa01 f202 	lsl.w	r2, r1, r2
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1ad      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 8110 	beq.w	80021c0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d079      	beq.n	80020a4 <HAL_RCC_OscConfig+0x760>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc6:	fab3 f383 	clz	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4bab      	ldr	r3, [pc, #684]	; (800227c <HAL_RCC_OscConfig+0x938>)
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fda:	f7ff f971 	bl	80012c0 <HAL_GetTick>
 8001fde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe4:	f7ff f96c 	bl	80012c0 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d902      	bls.n	8001ffa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	f000 bcdb 	b.w	80029b0 <HAL_RCC_OscConfig+0x106c>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800200c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002010:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002014:	2202      	movs	r2, #2
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	fa93 f2a3 	rbit	r2, r3
 8002026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002038:	2202      	movs	r2, #2
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	fa93 f2a3 	rbit	r2, r3
 800204a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002052:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002054:	4b88      	ldr	r3, [pc, #544]	; (8002278 <HAL_RCC_OscConfig+0x934>)
 8002056:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002060:	2102      	movs	r1, #2
 8002062:	6019      	str	r1, [r3, #0]
 8002064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002068:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	fa93 f1a3 	rbit	r1, r3
 8002072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002076:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800207a:	6019      	str	r1, [r3, #0]
  return result;
 800207c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002080:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002090:	b2db      	uxtb	r3, r3
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	2101      	movs	r1, #1
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0a0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x6a0>
 80020a2:	e08d      	b.n	80021c0 <HAL_RCC_OscConfig+0x87c>
 80020a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020ac:	2201      	movs	r2, #1
 80020ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	fa93 f2a3 	rbit	r2, r3
 80020be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80020c6:	601a      	str	r2, [r3, #0]
  return result;
 80020c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80020d0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	4b68      	ldr	r3, [pc, #416]	; (800227c <HAL_RCC_OscConfig+0x938>)
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	461a      	mov	r2, r3
 80020e2:	2300      	movs	r3, #0
 80020e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e6:	f7ff f8eb 	bl	80012c0 <HAL_GetTick>
 80020ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ee:	e00a      	b.n	8002106 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020f0:	f7ff f8e6 	bl	80012c0 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d902      	bls.n	8002106 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	f000 bc55 	b.w	80029b0 <HAL_RCC_OscConfig+0x106c>
 8002106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800210e:	2202      	movs	r2, #2
 8002110:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	fa93 f2a3 	rbit	r2, r3
 8002120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002124:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002132:	2202      	movs	r2, #2
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	fa93 f2a3 	rbit	r2, r3
 8002144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002148:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002152:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002156:	2202      	movs	r2, #2
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	fa93 f2a3 	rbit	r2, r3
 8002168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002170:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002172:	4b41      	ldr	r3, [pc, #260]	; (8002278 <HAL_RCC_OscConfig+0x934>)
 8002174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800217e:	2102      	movs	r1, #2
 8002180:	6019      	str	r1, [r3, #0]
 8002182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002186:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	fa93 f1a3 	rbit	r1, r3
 8002190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002194:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002198:	6019      	str	r1, [r3, #0]
  return result;
 800219a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	fab3 f383 	clz	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	2101      	movs	r1, #1
 80021b6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d197      	bne.n	80020f0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 81a1 	beq.w	8002518 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021dc:	4b26      	ldr	r3, [pc, #152]	; (8002278 <HAL_RCC_OscConfig+0x934>)
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d116      	bne.n	8002216 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e8:	4b23      	ldr	r3, [pc, #140]	; (8002278 <HAL_RCC_OscConfig+0x934>)
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	4a22      	ldr	r2, [pc, #136]	; (8002278 <HAL_RCC_OscConfig+0x934>)
 80021ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f2:	61d3      	str	r3, [r2, #28]
 80021f4:	4b20      	ldr	r3, [pc, #128]	; (8002278 <HAL_RCC_OscConfig+0x934>)
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80021fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002200:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800220e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002210:	2301      	movs	r3, #1
 8002212:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002216:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <HAL_RCC_OscConfig+0x93c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221e:	2b00      	cmp	r3, #0
 8002220:	d11a      	bne.n	8002258 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002222:	4b17      	ldr	r3, [pc, #92]	; (8002280 <HAL_RCC_OscConfig+0x93c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a16      	ldr	r2, [pc, #88]	; (8002280 <HAL_RCC_OscConfig+0x93c>)
 8002228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800222e:	f7ff f847 	bl	80012c0 <HAL_GetTick>
 8002232:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002236:	e009      	b.n	800224c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002238:	f7ff f842 	bl	80012c0 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b64      	cmp	r3, #100	; 0x64
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e3b1      	b.n	80029b0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <HAL_RCC_OscConfig+0x93c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0ef      	beq.n	8002238 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d10d      	bne.n	8002284 <HAL_RCC_OscConfig+0x940>
 8002268:	4b03      	ldr	r3, [pc, #12]	; (8002278 <HAL_RCC_OscConfig+0x934>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4a02      	ldr	r2, [pc, #8]	; (8002278 <HAL_RCC_OscConfig+0x934>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6213      	str	r3, [r2, #32]
 8002274:	e03c      	b.n	80022f0 <HAL_RCC_OscConfig+0x9ac>
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000
 800227c:	10908120 	.word	0x10908120
 8002280:	40007000 	.word	0x40007000
 8002284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002288:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10c      	bne.n	80022ae <HAL_RCC_OscConfig+0x96a>
 8002294:	4bc1      	ldr	r3, [pc, #772]	; (800259c <HAL_RCC_OscConfig+0xc58>)
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	4ac0      	ldr	r2, [pc, #768]	; (800259c <HAL_RCC_OscConfig+0xc58>)
 800229a:	f023 0301 	bic.w	r3, r3, #1
 800229e:	6213      	str	r3, [r2, #32]
 80022a0:	4bbe      	ldr	r3, [pc, #760]	; (800259c <HAL_RCC_OscConfig+0xc58>)
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4abd      	ldr	r2, [pc, #756]	; (800259c <HAL_RCC_OscConfig+0xc58>)
 80022a6:	f023 0304 	bic.w	r3, r3, #4
 80022aa:	6213      	str	r3, [r2, #32]
 80022ac:	e020      	b.n	80022f0 <HAL_RCC_OscConfig+0x9ac>
 80022ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2b05      	cmp	r3, #5
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x994>
 80022be:	4bb7      	ldr	r3, [pc, #732]	; (800259c <HAL_RCC_OscConfig+0xc58>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4ab6      	ldr	r2, [pc, #728]	; (800259c <HAL_RCC_OscConfig+0xc58>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	6213      	str	r3, [r2, #32]
 80022ca:	4bb4      	ldr	r3, [pc, #720]	; (800259c <HAL_RCC_OscConfig+0xc58>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4ab3      	ldr	r2, [pc, #716]	; (800259c <HAL_RCC_OscConfig+0xc58>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6213      	str	r3, [r2, #32]
 80022d6:	e00b      	b.n	80022f0 <HAL_RCC_OscConfig+0x9ac>
 80022d8:	4bb0      	ldr	r3, [pc, #704]	; (800259c <HAL_RCC_OscConfig+0xc58>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4aaf      	ldr	r2, [pc, #700]	; (800259c <HAL_RCC_OscConfig+0xc58>)
 80022de:	f023 0301 	bic.w	r3, r3, #1
 80022e2:	6213      	str	r3, [r2, #32]
 80022e4:	4bad      	ldr	r3, [pc, #692]	; (800259c <HAL_RCC_OscConfig+0xc58>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	4aac      	ldr	r2, [pc, #688]	; (800259c <HAL_RCC_OscConfig+0xc58>)
 80022ea:	f023 0304 	bic.w	r3, r3, #4
 80022ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 8081 	beq.w	8002404 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002302:	f7fe ffdd 	bl	80012c0 <HAL_GetTick>
 8002306:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230a:	e00b      	b.n	8002324 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800230c:	f7fe ffd8 	bl	80012c0 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f241 3288 	movw	r2, #5000	; 0x1388
 800231c:	4293      	cmp	r3, r2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e345      	b.n	80029b0 <HAL_RCC_OscConfig+0x106c>
 8002324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002328:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800232c:	2202      	movs	r2, #2
 800232e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002334:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	fa93 f2a3 	rbit	r2, r3
 800233e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002342:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002350:	2202      	movs	r2, #2
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002358:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	fa93 f2a3 	rbit	r2, r3
 8002362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002366:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800236a:	601a      	str	r2, [r3, #0]
  return result;
 800236c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002370:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002374:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	095b      	lsrs	r3, r3, #5
 800237e:	b2db      	uxtb	r3, r3
 8002380:	f043 0302 	orr.w	r3, r3, #2
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d102      	bne.n	8002390 <HAL_RCC_OscConfig+0xa4c>
 800238a:	4b84      	ldr	r3, [pc, #528]	; (800259c <HAL_RCC_OscConfig+0xc58>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	e013      	b.n	80023b8 <HAL_RCC_OscConfig+0xa74>
 8002390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002394:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002398:	2202      	movs	r2, #2
 800239a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	fa93 f2a3 	rbit	r2, r3
 80023aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	4b79      	ldr	r3, [pc, #484]	; (800259c <HAL_RCC_OscConfig+0xc58>)
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80023c0:	2102      	movs	r1, #2
 80023c2:	6011      	str	r1, [r2, #0]
 80023c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023c8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	fa92 f1a2 	rbit	r1, r2
 80023d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023d6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80023da:	6011      	str	r1, [r2, #0]
  return result;
 80023dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023e0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	fab2 f282 	clz	r2, r2
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	f002 021f 	and.w	r2, r2, #31
 80023f6:	2101      	movs	r1, #1
 80023f8:	fa01 f202 	lsl.w	r2, r1, r2
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d084      	beq.n	800230c <HAL_RCC_OscConfig+0x9c8>
 8002402:	e07f      	b.n	8002504 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002404:	f7fe ff5c 	bl	80012c0 <HAL_GetTick>
 8002408:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240c:	e00b      	b.n	8002426 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800240e:	f7fe ff57 	bl	80012c0 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	; 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e2c4      	b.n	80029b0 <HAL_RCC_OscConfig+0x106c>
 8002426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800242e:	2202      	movs	r2, #2
 8002430:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002436:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	fa93 f2a3 	rbit	r2, r3
 8002440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002444:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002452:	2202      	movs	r2, #2
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	fa93 f2a3 	rbit	r2, r3
 8002464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002468:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800246c:	601a      	str	r2, [r3, #0]
  return result;
 800246e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002472:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002476:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002478:	fab3 f383 	clz	r3, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	b2db      	uxtb	r3, r3
 8002482:	f043 0302 	orr.w	r3, r3, #2
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d102      	bne.n	8002492 <HAL_RCC_OscConfig+0xb4e>
 800248c:	4b43      	ldr	r3, [pc, #268]	; (800259c <HAL_RCC_OscConfig+0xc58>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	e013      	b.n	80024ba <HAL_RCC_OscConfig+0xb76>
 8002492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002496:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800249a:	2202      	movs	r2, #2
 800249c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	fa93 f2a3 	rbit	r2, r3
 80024ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	4b39      	ldr	r3, [pc, #228]	; (800259c <HAL_RCC_OscConfig+0xc58>)
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80024c2:	2102      	movs	r1, #2
 80024c4:	6011      	str	r1, [r2, #0]
 80024c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024ca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	fa92 f1a2 	rbit	r1, r2
 80024d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024d8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80024dc:	6011      	str	r1, [r2, #0]
  return result;
 80024de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024e2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	fab2 f282 	clz	r2, r2
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	f002 021f 	and.w	r2, r2, #31
 80024f8:	2101      	movs	r1, #1
 80024fa:	fa01 f202 	lsl.w	r2, r1, r2
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d184      	bne.n	800240e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002504:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002508:	2b01      	cmp	r3, #1
 800250a:	d105      	bne.n	8002518 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250c:	4b23      	ldr	r3, [pc, #140]	; (800259c <HAL_RCC_OscConfig+0xc58>)
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	4a22      	ldr	r2, [pc, #136]	; (800259c <HAL_RCC_OscConfig+0xc58>)
 8002512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002516:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 8242 	beq.w	80029ae <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800252a:	4b1c      	ldr	r3, [pc, #112]	; (800259c <HAL_RCC_OscConfig+0xc58>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b08      	cmp	r3, #8
 8002534:	f000 8213 	beq.w	800295e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	2b02      	cmp	r3, #2
 8002546:	f040 8162 	bne.w	800280e <HAL_RCC_OscConfig+0xeca>
 800254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002552:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	fa93 f2a3 	rbit	r2, r3
 8002566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800256e:	601a      	str	r2, [r3, #0]
  return result;
 8002570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002574:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002578:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002584:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	461a      	mov	r2, r3
 800258c:	2300      	movs	r3, #0
 800258e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7fe fe96 	bl	80012c0 <HAL_GetTick>
 8002594:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002598:	e00c      	b.n	80025b4 <HAL_RCC_OscConfig+0xc70>
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a0:	f7fe fe8e 	bl	80012c0 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e1fd      	b.n	80029b0 <HAL_RCC_OscConfig+0x106c>
 80025b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80025bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	fa93 f2a3 	rbit	r2, r3
 80025d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80025d8:	601a      	str	r2, [r3, #0]
  return result;
 80025da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025de:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80025e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e4:	fab3 f383 	clz	r3, r3
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d102      	bne.n	80025fe <HAL_RCC_OscConfig+0xcba>
 80025f8:	4bb0      	ldr	r3, [pc, #704]	; (80028bc <HAL_RCC_OscConfig+0xf78>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	e027      	b.n	800264e <HAL_RCC_OscConfig+0xd0a>
 80025fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002602:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002606:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800260a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002610:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	fa93 f2a3 	rbit	r2, r3
 800261a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002628:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800262c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002636:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	fa93 f2a3 	rbit	r2, r3
 8002640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002644:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	4b9c      	ldr	r3, [pc, #624]	; (80028bc <HAL_RCC_OscConfig+0xf78>)
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002652:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002656:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800265a:	6011      	str	r1, [r2, #0]
 800265c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002660:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002664:	6812      	ldr	r2, [r2, #0]
 8002666:	fa92 f1a2 	rbit	r1, r2
 800266a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800266e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002672:	6011      	str	r1, [r2, #0]
  return result;
 8002674:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002678:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	fab2 f282 	clz	r2, r2
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	f042 0220 	orr.w	r2, r2, #32
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	f002 021f 	and.w	r2, r2, #31
 800268e:	2101      	movs	r1, #1
 8002690:	fa01 f202 	lsl.w	r2, r1, r2
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d182      	bne.n	80025a0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800269a:	4b88      	ldr	r3, [pc, #544]	; (80028bc <HAL_RCC_OscConfig+0xf78>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80026ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	430b      	orrs	r3, r1
 80026bc:	497f      	ldr	r1, [pc, #508]	; (80028bc <HAL_RCC_OscConfig+0xf78>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	604b      	str	r3, [r1, #4]
 80026c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80026ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	fa93 f2a3 	rbit	r2, r3
 80026de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80026e6:	601a      	str	r2, [r3, #0]
  return result;
 80026e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80026f0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	461a      	mov	r2, r3
 8002704:	2301      	movs	r3, #1
 8002706:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7fe fdda 	bl	80012c0 <HAL_GetTick>
 800270c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002710:	e009      	b.n	8002726 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002712:	f7fe fdd5 	bl	80012c0 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e144      	b.n	80029b0 <HAL_RCC_OscConfig+0x106c>
 8002726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800272e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002732:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002738:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	fa93 f2a3 	rbit	r2, r3
 8002742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002746:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800274a:	601a      	str	r2, [r3, #0]
  return result;
 800274c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002750:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002754:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b01      	cmp	r3, #1
 8002768:	d102      	bne.n	8002770 <HAL_RCC_OscConfig+0xe2c>
 800276a:	4b54      	ldr	r3, [pc, #336]	; (80028bc <HAL_RCC_OscConfig+0xf78>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	e027      	b.n	80027c0 <HAL_RCC_OscConfig+0xe7c>
 8002770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002774:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002778:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800277c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002782:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	fa93 f2a3 	rbit	r2, r3
 800278c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002790:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800279e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	fa93 f2a3 	rbit	r2, r3
 80027b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	4b3f      	ldr	r3, [pc, #252]	; (80028bc <HAL_RCC_OscConfig+0xf78>)
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027c4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80027c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027cc:	6011      	str	r1, [r2, #0]
 80027ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027d2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	fa92 f1a2 	rbit	r1, r2
 80027dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027e0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80027e4:	6011      	str	r1, [r2, #0]
  return result;
 80027e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ea:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	fab2 f282 	clz	r2, r2
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	f042 0220 	orr.w	r2, r2, #32
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	f002 021f 	and.w	r2, r2, #31
 8002800:	2101      	movs	r1, #1
 8002802:	fa01 f202 	lsl.w	r2, r1, r2
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d082      	beq.n	8002712 <HAL_RCC_OscConfig+0xdce>
 800280c:	e0cf      	b.n	80029ae <HAL_RCC_OscConfig+0x106a>
 800280e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002812:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002816:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800281a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002820:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	fa93 f2a3 	rbit	r2, r3
 800282a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002832:	601a      	str	r2, [r3, #0]
  return result;
 8002834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002838:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800283c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002848:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	461a      	mov	r2, r3
 8002850:	2300      	movs	r3, #0
 8002852:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe fd34 	bl	80012c0 <HAL_GetTick>
 8002858:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285c:	e009      	b.n	8002872 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe fd2f 	bl	80012c0 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e09e      	b.n	80029b0 <HAL_RCC_OscConfig+0x106c>
 8002872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002876:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800287a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800287e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002884:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	fa93 f2a3 	rbit	r2, r3
 800288e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002892:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002896:	601a      	str	r2, [r3, #0]
  return result;
 8002898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80028a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d104      	bne.n	80028c0 <HAL_RCC_OscConfig+0xf7c>
 80028b6:	4b01      	ldr	r3, [pc, #4]	; (80028bc <HAL_RCC_OscConfig+0xf78>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	e029      	b.n	8002910 <HAL_RCC_OscConfig+0xfcc>
 80028bc:	40021000 	.word	0x40021000
 80028c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80028c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	fa93 f2a3 	rbit	r2, r3
 80028dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ea:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80028ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	fa93 f2a3 	rbit	r2, r3
 8002902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002906:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <HAL_RCC_OscConfig+0x1078>)
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002914:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002918:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800291c:	6011      	str	r1, [r2, #0]
 800291e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002922:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	fa92 f1a2 	rbit	r1, r2
 800292c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002930:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002934:	6011      	str	r1, [r2, #0]
  return result;
 8002936:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800293a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	fab2 f282 	clz	r2, r2
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	f042 0220 	orr.w	r2, r2, #32
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	f002 021f 	and.w	r2, r2, #31
 8002950:	2101      	movs	r1, #1
 8002952:	fa01 f202 	lsl.w	r2, r1, r2
 8002956:	4013      	ands	r3, r2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d180      	bne.n	800285e <HAL_RCC_OscConfig+0xf1a>
 800295c:	e027      	b.n	80029ae <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800295e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002962:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e01e      	b.n	80029b0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_RCC_OscConfig+0x1078>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800297a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800297e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002986:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	429a      	cmp	r2, r3
 8002990:	d10b      	bne.n	80029aa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002992:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002996:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800299a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d001      	beq.n	80029ae <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000

080029c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b09e      	sub	sp, #120	; 0x78
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e162      	b.n	8002c9e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d8:	4b90      	ldr	r3, [pc, #576]	; (8002c1c <HAL_RCC_ClockConfig+0x25c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d910      	bls.n	8002a08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e6:	4b8d      	ldr	r3, [pc, #564]	; (8002c1c <HAL_RCC_ClockConfig+0x25c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 0207 	bic.w	r2, r3, #7
 80029ee:	498b      	ldr	r1, [pc, #556]	; (8002c1c <HAL_RCC_ClockConfig+0x25c>)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b89      	ldr	r3, [pc, #548]	; (8002c1c <HAL_RCC_ClockConfig+0x25c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e14a      	b.n	8002c9e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a14:	4b82      	ldr	r3, [pc, #520]	; (8002c20 <HAL_RCC_ClockConfig+0x260>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	497f      	ldr	r1, [pc, #508]	; (8002c20 <HAL_RCC_ClockConfig+0x260>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 80dc 	beq.w	8002bec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d13c      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xf6>
 8002a3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a40:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4c:	fab3 f383 	clz	r3, r3
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d102      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xa6>
 8002a60:	4b6f      	ldr	r3, [pc, #444]	; (8002c20 <HAL_RCC_ClockConfig+0x260>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	e00f      	b.n	8002a86 <HAL_RCC_ClockConfig+0xc6>
 8002a66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	667b      	str	r3, [r7, #100]	; 0x64
 8002a74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a78:	663b      	str	r3, [r7, #96]	; 0x60
 8002a7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a7c:	fa93 f3a3 	rbit	r3, r3
 8002a80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a82:	4b67      	ldr	r3, [pc, #412]	; (8002c20 <HAL_RCC_ClockConfig+0x260>)
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a8e:	fa92 f2a2 	rbit	r2, r2
 8002a92:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a96:	fab2 f282 	clz	r2, r2
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	f042 0220 	orr.w	r2, r2, #32
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	f002 021f 	and.w	r2, r2, #31
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d17b      	bne.n	8002baa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0f3      	b.n	8002c9e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d13c      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x178>
 8002abe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ac2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d102      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x128>
 8002ae2:	4b4f      	ldr	r3, [pc, #316]	; (8002c20 <HAL_RCC_ClockConfig+0x260>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	e00f      	b.n	8002b08 <HAL_RCC_ClockConfig+0x148>
 8002ae8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af0:	fa93 f3a3 	rbit	r3, r3
 8002af4:	647b      	str	r3, [r7, #68]	; 0x44
 8002af6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002afa:	643b      	str	r3, [r7, #64]	; 0x40
 8002afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002afe:	fa93 f3a3 	rbit	r3, r3
 8002b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b04:	4b46      	ldr	r3, [pc, #280]	; (8002c20 <HAL_RCC_ClockConfig+0x260>)
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b0c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002b0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b10:	fa92 f2a2 	rbit	r2, r2
 8002b14:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b18:	fab2 f282 	clz	r2, r2
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	f042 0220 	orr.w	r2, r2, #32
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	f002 021f 	and.w	r2, r2, #31
 8002b28:	2101      	movs	r1, #1
 8002b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d13a      	bne.n	8002baa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0b2      	b.n	8002c9e <HAL_RCC_ClockConfig+0x2de>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	095b      	lsrs	r3, r3, #5
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d102      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x1a0>
 8002b5a:	4b31      	ldr	r3, [pc, #196]	; (8002c20 <HAL_RCC_ClockConfig+0x260>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	e00d      	b.n	8002b7c <HAL_RCC_ClockConfig+0x1bc>
 8002b60:	2302      	movs	r3, #2
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	623b      	str	r3, [r7, #32]
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	fa93 f3a3 	rbit	r3, r3
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	4b29      	ldr	r3, [pc, #164]	; (8002c20 <HAL_RCC_ClockConfig+0x260>)
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	61ba      	str	r2, [r7, #24]
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	fa92 f2a2 	rbit	r2, r2
 8002b86:	617a      	str	r2, [r7, #20]
  return result;
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	fab2 f282 	clz	r2, r2
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	f042 0220 	orr.w	r2, r2, #32
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	f002 021f 	and.w	r2, r2, #31
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e079      	b.n	8002c9e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002baa:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <HAL_RCC_ClockConfig+0x260>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f023 0203 	bic.w	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	491a      	ldr	r1, [pc, #104]	; (8002c20 <HAL_RCC_ClockConfig+0x260>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bbc:	f7fe fb80 	bl	80012c0 <HAL_GetTick>
 8002bc0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	e00a      	b.n	8002bda <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc4:	f7fe fb7c 	bl	80012c0 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e061      	b.n	8002c9e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bda:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <HAL_RCC_ClockConfig+0x260>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 020c 	and.w	r2, r3, #12
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d1eb      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_RCC_ClockConfig+0x25c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d214      	bcs.n	8002c24 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfa:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <HAL_RCC_ClockConfig+0x25c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 0207 	bic.w	r2, r3, #7
 8002c02:	4906      	ldr	r1, [pc, #24]	; (8002c1c <HAL_RCC_ClockConfig+0x25c>)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0a:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <HAL_RCC_ClockConfig+0x25c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d005      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e040      	b.n	8002c9e <HAL_RCC_ClockConfig+0x2de>
 8002c1c:	40022000 	.word	0x40022000
 8002c20:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c30:	4b1d      	ldr	r3, [pc, #116]	; (8002ca8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	491a      	ldr	r1, [pc, #104]	; (8002ca8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d009      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c4e:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4912      	ldr	r1, [pc, #72]	; (8002ca8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c62:	f000 f829 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 8002c66:	4601      	mov	r1, r0
 8002c68:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c70:	22f0      	movs	r2, #240	; 0xf0
 8002c72:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	fa92 f2a2 	rbit	r2, r2
 8002c7a:	60fa      	str	r2, [r7, #12]
  return result;
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	fab2 f282 	clz	r2, r2
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	40d3      	lsrs	r3, r2
 8002c86:	4a09      	ldr	r2, [pc, #36]	; (8002cac <HAL_RCC_ClockConfig+0x2ec>)
 8002c88:	5cd3      	ldrb	r3, [r2, r3]
 8002c8a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c8e:	4a08      	ldr	r2, [pc, #32]	; (8002cb0 <HAL_RCC_ClockConfig+0x2f0>)
 8002c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c92:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <HAL_RCC_ClockConfig+0x2f4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe face 	bl	8001238 <HAL_InitTick>
  
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3778      	adds	r7, #120	; 0x78
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	0800780c 	.word	0x0800780c
 8002cb0:	20000000 	.word	0x20000000
 8002cb4:	20000004 	.word	0x20000004

08002cb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b08b      	sub	sp, #44	; 0x2c
 8002cbc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002cd2:	4b29      	ldr	r3, [pc, #164]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d002      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x30>
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d003      	beq.n	8002cee <HAL_RCC_GetSysClockFreq+0x36>
 8002ce6:	e03c      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ce8:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cea:	623b      	str	r3, [r7, #32]
      break;
 8002cec:	e03c      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002cf4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002cf8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	fa92 f2a2 	rbit	r2, r2
 8002d00:	607a      	str	r2, [r7, #4]
  return result;
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	fab2 f282 	clz	r2, r2
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	40d3      	lsrs	r3, r2
 8002d0c:	4a1c      	ldr	r2, [pc, #112]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d0e:	5cd3      	ldrb	r3, [r2, r3]
 8002d10:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002d12:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	220f      	movs	r2, #15
 8002d1c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	fa92 f2a2 	rbit	r2, r2
 8002d24:	60fa      	str	r2, [r7, #12]
  return result;
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	fab2 f282 	clz	r2, r2
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	40d3      	lsrs	r3, r2
 8002d30:	4a14      	ldr	r2, [pc, #80]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d32:	5cd3      	ldrb	r3, [r2, r3]
 8002d34:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d40:	4a0e      	ldr	r2, [pc, #56]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	fb02 f303 	mul.w	r3, r2, r3
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d50:	e004      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	4a0c      	ldr	r2, [pc, #48]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d56:	fb02 f303 	mul.w	r3, r2, r3
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	623b      	str	r3, [r7, #32]
      break;
 8002d60:	e002      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d62:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d64:	623b      	str	r3, [r7, #32]
      break;
 8002d66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d68:	6a3b      	ldr	r3, [r7, #32]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	372c      	adds	r7, #44	; 0x2c
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	007a1200 	.word	0x007a1200
 8002d80:	08007824 	.word	0x08007824
 8002d84:	08007834 	.word	0x08007834
 8002d88:	003d0900 	.word	0x003d0900

08002d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d90:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d92:	681b      	ldr	r3, [r3, #0]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	20000000 	.word	0x20000000

08002da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002daa:	f7ff ffef 	bl	8002d8c <HAL_RCC_GetHCLKFreq>
 8002dae:	4601      	mov	r1, r0
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002db8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002dbc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	fa92 f2a2 	rbit	r2, r2
 8002dc4:	603a      	str	r2, [r7, #0]
  return result;
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	fab2 f282 	clz	r2, r2
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	40d3      	lsrs	r3, r2
 8002dd0:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002dd2:	5cd3      	ldrb	r3, [r2, r3]
 8002dd4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000
 8002de4:	0800781c 	.word	0x0800781c

08002de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002dee:	f7ff ffcd 	bl	8002d8c <HAL_RCC_GetHCLKFreq>
 8002df2:	4601      	mov	r1, r0
 8002df4:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002dfc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002e00:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	fa92 f2a2 	rbit	r2, r2
 8002e08:	603a      	str	r2, [r7, #0]
  return result;
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	fab2 f282 	clz	r2, r2
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	40d3      	lsrs	r3, r2
 8002e14:	4a04      	ldr	r2, [pc, #16]	; (8002e28 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002e16:	5cd3      	ldrb	r3, [r2, r3]
 8002e18:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40021000 	.word	0x40021000
 8002e28:	0800781c 	.word	0x0800781c

08002e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b092      	sub	sp, #72	; 0x48
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 80cd 	beq.w	8002fea <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e50:	4b86      	ldr	r3, [pc, #536]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10e      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5c:	4b83      	ldr	r3, [pc, #524]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	4a82      	ldr	r2, [pc, #520]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e66:	61d3      	str	r3, [r2, #28]
 8002e68:	4b80      	ldr	r3, [pc, #512]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e74:	2301      	movs	r3, #1
 8002e76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7a:	4b7d      	ldr	r3, [pc, #500]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d118      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e86:	4b7a      	ldr	r3, [pc, #488]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a79      	ldr	r2, [pc, #484]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e92:	f7fe fa15 	bl	80012c0 <HAL_GetTick>
 8002e96:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e98:	e008      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9a:	f7fe fa11 	bl	80012c0 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b64      	cmp	r3, #100	; 0x64
 8002ea6:	d901      	bls.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e0db      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eac:	4b70      	ldr	r3, [pc, #448]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002eb8:	4b6c      	ldr	r3, [pc, #432]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d07d      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d076      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ed6:	4b65      	ldr	r3, [pc, #404]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ee0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ee4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	4b5e      	ldr	r3, [pc, #376]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	461a      	mov	r2, r3
 8002f00:	2301      	movs	r3, #1
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4b55      	ldr	r3, [pc, #340]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	461a      	mov	r2, r3
 8002f24:	2300      	movs	r3, #0
 8002f26:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f28:	4a50      	ldr	r2, [pc, #320]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d045      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7fe f9c2 	bl	80012c0 <HAL_GetTick>
 8002f3c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f40:	f7fe f9be 	bl	80012c0 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e086      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002f56:	2302      	movs	r3, #2
 8002f58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	fa93 f3a3 	rbit	r3, r3
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
 8002f62:	2302      	movs	r3, #2
 8002f64:	623b      	str	r3, [r7, #32]
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	fa93 f3a3 	rbit	r3, r3
 8002f6c:	61fb      	str	r3, [r7, #28]
  return result;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f70:	fab3 f383 	clz	r3, r3
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	f043 0302 	orr.w	r3, r3, #2
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d102      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002f84:	4b39      	ldr	r3, [pc, #228]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	e007      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	fa93 f3a3 	rbit	r3, r3
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	4b35      	ldr	r3, [pc, #212]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	613a      	str	r2, [r7, #16]
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	fa92 f2a2 	rbit	r2, r2
 8002fa4:	60fa      	str	r2, [r7, #12]
  return result;
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	fab2 f282 	clz	r2, r2
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	f002 021f 	and.w	r2, r2, #31
 8002fb8:	2101      	movs	r1, #1
 8002fba:	fa01 f202 	lsl.w	r2, r1, r2
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0bd      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002fc4:	4b29      	ldr	r3, [pc, #164]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4926      	ldr	r1, [pc, #152]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fd6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d105      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fde:	4b23      	ldr	r3, [pc, #140]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	4a22      	ldr	r2, [pc, #136]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d008      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	f023 0203 	bic.w	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	491a      	ldr	r1, [pc, #104]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003004:	4313      	orrs	r3, r2
 8003006:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003014:	4b15      	ldr	r3, [pc, #84]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	f023 0210 	bic.w	r2, r3, #16
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4912      	ldr	r1, [pc, #72]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003022:	4313      	orrs	r3, r2
 8003024:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302e:	2b00      	cmp	r3, #0
 8003030:	d008      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003032:	4b0e      	ldr	r3, [pc, #56]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	490b      	ldr	r1, [pc, #44]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003040:	4313      	orrs	r3, r2
 8003042:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d008      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003050:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	4903      	ldr	r1, [pc, #12]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800305e:	4313      	orrs	r3, r2
 8003060:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3748      	adds	r7, #72	; 0x48
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40021000 	.word	0x40021000
 8003070:	40007000 	.word	0x40007000
 8003074:	10908100 	.word	0x10908100

08003078 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e049      	b.n	800311e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fd ff0e 	bl	8000ec0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3304      	adds	r3, #4
 80030b4:	4619      	mov	r1, r3
 80030b6:	4610      	mov	r0, r2
 80030b8:	f000 fc5c 	bl	8003974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e049      	b.n	80031cc <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d106      	bne.n	8003152 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f841 	bl	80031d4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2202      	movs	r2, #2
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3304      	adds	r3, #4
 8003162:	4619      	mov	r1, r3
 8003164:	4610      	mov	r0, r2
 8003166:	f000 fc05 	bl	8003974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d109      	bne.n	8003210 <HAL_TIM_OC_Start_IT+0x28>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b01      	cmp	r3, #1
 8003206:	bf14      	ite	ne
 8003208:	2301      	movne	r3, #1
 800320a:	2300      	moveq	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	e03c      	b.n	800328a <HAL_TIM_OC_Start_IT+0xa2>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	2b04      	cmp	r3, #4
 8003214:	d109      	bne.n	800322a <HAL_TIM_OC_Start_IT+0x42>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b01      	cmp	r3, #1
 8003220:	bf14      	ite	ne
 8003222:	2301      	movne	r3, #1
 8003224:	2300      	moveq	r3, #0
 8003226:	b2db      	uxtb	r3, r3
 8003228:	e02f      	b.n	800328a <HAL_TIM_OC_Start_IT+0xa2>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b08      	cmp	r3, #8
 800322e:	d109      	bne.n	8003244 <HAL_TIM_OC_Start_IT+0x5c>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	bf14      	ite	ne
 800323c:	2301      	movne	r3, #1
 800323e:	2300      	moveq	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	e022      	b.n	800328a <HAL_TIM_OC_Start_IT+0xa2>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	2b0c      	cmp	r3, #12
 8003248:	d109      	bne.n	800325e <HAL_TIM_OC_Start_IT+0x76>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b01      	cmp	r3, #1
 8003254:	bf14      	ite	ne
 8003256:	2301      	movne	r3, #1
 8003258:	2300      	moveq	r3, #0
 800325a:	b2db      	uxtb	r3, r3
 800325c:	e015      	b.n	800328a <HAL_TIM_OC_Start_IT+0xa2>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b10      	cmp	r3, #16
 8003262:	d109      	bne.n	8003278 <HAL_TIM_OC_Start_IT+0x90>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	bf14      	ite	ne
 8003270:	2301      	movne	r3, #1
 8003272:	2300      	moveq	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	e008      	b.n	800328a <HAL_TIM_OC_Start_IT+0xa2>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b01      	cmp	r3, #1
 8003282:	bf14      	ite	ne
 8003284:	2301      	movne	r3, #1
 8003286:	2300      	moveq	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e0d3      	b.n	800343a <HAL_TIM_OC_Start_IT+0x252>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d104      	bne.n	80032a2 <HAL_TIM_OC_Start_IT+0xba>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032a0:	e023      	b.n	80032ea <HAL_TIM_OC_Start_IT+0x102>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d104      	bne.n	80032b2 <HAL_TIM_OC_Start_IT+0xca>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032b0:	e01b      	b.n	80032ea <HAL_TIM_OC_Start_IT+0x102>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d104      	bne.n	80032c2 <HAL_TIM_OC_Start_IT+0xda>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032c0:	e013      	b.n	80032ea <HAL_TIM_OC_Start_IT+0x102>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b0c      	cmp	r3, #12
 80032c6:	d104      	bne.n	80032d2 <HAL_TIM_OC_Start_IT+0xea>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032d0:	e00b      	b.n	80032ea <HAL_TIM_OC_Start_IT+0x102>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b10      	cmp	r3, #16
 80032d6:	d104      	bne.n	80032e2 <HAL_TIM_OC_Start_IT+0xfa>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032e0:	e003      	b.n	80032ea <HAL_TIM_OC_Start_IT+0x102>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2202      	movs	r2, #2
 80032e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b0c      	cmp	r3, #12
 80032ee:	d841      	bhi.n	8003374 <HAL_TIM_OC_Start_IT+0x18c>
 80032f0:	a201      	add	r2, pc, #4	; (adr r2, 80032f8 <HAL_TIM_OC_Start_IT+0x110>)
 80032f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f6:	bf00      	nop
 80032f8:	0800332d 	.word	0x0800332d
 80032fc:	08003375 	.word	0x08003375
 8003300:	08003375 	.word	0x08003375
 8003304:	08003375 	.word	0x08003375
 8003308:	0800333f 	.word	0x0800333f
 800330c:	08003375 	.word	0x08003375
 8003310:	08003375 	.word	0x08003375
 8003314:	08003375 	.word	0x08003375
 8003318:	08003351 	.word	0x08003351
 800331c:	08003375 	.word	0x08003375
 8003320:	08003375 	.word	0x08003375
 8003324:	08003375 	.word	0x08003375
 8003328:	08003363 	.word	0x08003363
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0202 	orr.w	r2, r2, #2
 800333a:	60da      	str	r2, [r3, #12]
      break;
 800333c:	e01d      	b.n	800337a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0204 	orr.w	r2, r2, #4
 800334c:	60da      	str	r2, [r3, #12]
      break;
 800334e:	e014      	b.n	800337a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0208 	orr.w	r2, r2, #8
 800335e:	60da      	str	r2, [r3, #12]
      break;
 8003360:	e00b      	b.n	800337a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0210 	orr.w	r2, r2, #16
 8003370:	60da      	str	r2, [r3, #12]
      break;
 8003372:	e002      	b.n	800337a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
      break;
 8003378:	bf00      	nop
  }

  if (status == HAL_OK)
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d15b      	bne.n	8003438 <HAL_TIM_OC_Start_IT+0x250>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2201      	movs	r2, #1
 8003386:	6839      	ldr	r1, [r7, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f000 feab 	bl	80040e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a2c      	ldr	r2, [pc, #176]	; (8003444 <HAL_TIM_OC_Start_IT+0x25c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d00e      	beq.n	80033b6 <HAL_TIM_OC_Start_IT+0x1ce>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a2a      	ldr	r2, [pc, #168]	; (8003448 <HAL_TIM_OC_Start_IT+0x260>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d009      	beq.n	80033b6 <HAL_TIM_OC_Start_IT+0x1ce>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a29      	ldr	r2, [pc, #164]	; (800344c <HAL_TIM_OC_Start_IT+0x264>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d004      	beq.n	80033b6 <HAL_TIM_OC_Start_IT+0x1ce>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a27      	ldr	r2, [pc, #156]	; (8003450 <HAL_TIM_OC_Start_IT+0x268>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d101      	bne.n	80033ba <HAL_TIM_OC_Start_IT+0x1d2>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <HAL_TIM_OC_Start_IT+0x1d4>
 80033ba:	2300      	movs	r3, #0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d007      	beq.n	80033d0 <HAL_TIM_OC_Start_IT+0x1e8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033ce:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1b      	ldr	r2, [pc, #108]	; (8003444 <HAL_TIM_OC_Start_IT+0x25c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00e      	beq.n	80033f8 <HAL_TIM_OC_Start_IT+0x210>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e2:	d009      	beq.n	80033f8 <HAL_TIM_OC_Start_IT+0x210>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1a      	ldr	r2, [pc, #104]	; (8003454 <HAL_TIM_OC_Start_IT+0x26c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d004      	beq.n	80033f8 <HAL_TIM_OC_Start_IT+0x210>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a15      	ldr	r2, [pc, #84]	; (8003448 <HAL_TIM_OC_Start_IT+0x260>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d115      	bne.n	8003424 <HAL_TIM_OC_Start_IT+0x23c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	4b16      	ldr	r3, [pc, #88]	; (8003458 <HAL_TIM_OC_Start_IT+0x270>)
 8003400:	4013      	ands	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b06      	cmp	r3, #6
 8003408:	d015      	beq.n	8003436 <HAL_TIM_OC_Start_IT+0x24e>
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003410:	d011      	beq.n	8003436 <HAL_TIM_OC_Start_IT+0x24e>
      {
        __HAL_TIM_ENABLE(htim);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0201 	orr.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003422:	e008      	b.n	8003436 <HAL_TIM_OC_Start_IT+0x24e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	e000      	b.n	8003438 <HAL_TIM_OC_Start_IT+0x250>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003436:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003438:	7bfb      	ldrb	r3, [r7, #15]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40012c00 	.word	0x40012c00
 8003448:	40014000 	.word	0x40014000
 800344c:	40014400 	.word	0x40014400
 8003450:	40014800 	.word	0x40014800
 8003454:	40000400 	.word	0x40000400
 8003458:	00010007 	.word	0x00010007

0800345c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b02      	cmp	r3, #2
 8003470:	d122      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b02      	cmp	r3, #2
 800347e:	d11b      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0202 	mvn.w	r2, #2
 8003488:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fa49 	bl	8003936 <HAL_TIM_IC_CaptureCallback>
 80034a4:	e005      	b.n	80034b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fd f83e 	bl	8000528 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fa4c 	bl	800394a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d122      	bne.n	800350c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d11b      	bne.n	800350c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0204 	mvn.w	r2, #4
 80034dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2202      	movs	r2, #2
 80034e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fa1f 	bl	8003936 <HAL_TIM_IC_CaptureCallback>
 80034f8:	e005      	b.n	8003506 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fd f814 	bl	8000528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fa22 	bl	800394a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b08      	cmp	r3, #8
 8003518:	d122      	bne.n	8003560 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	2b08      	cmp	r3, #8
 8003526:	d11b      	bne.n	8003560 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0208 	mvn.w	r2, #8
 8003530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2204      	movs	r2, #4
 8003536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f9f5 	bl	8003936 <HAL_TIM_IC_CaptureCallback>
 800354c:	e005      	b.n	800355a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fc ffea 	bl	8000528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f9f8 	bl	800394a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f003 0310 	and.w	r3, r3, #16
 800356a:	2b10      	cmp	r3, #16
 800356c:	d122      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	2b10      	cmp	r3, #16
 800357a:	d11b      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0210 	mvn.w	r2, #16
 8003584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2208      	movs	r2, #8
 800358a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f9cb 	bl	8003936 <HAL_TIM_IC_CaptureCallback>
 80035a0:	e005      	b.n	80035ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fc ffc0 	bl	8000528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f9ce 	bl	800394a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d10e      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d107      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0201 	mvn.w	r2, #1
 80035d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f9a1 	bl	8003922 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ea:	2b80      	cmp	r3, #128	; 0x80
 80035ec:	d10e      	bne.n	800360c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f8:	2b80      	cmp	r3, #128	; 0x80
 80035fa:	d107      	bne.n	800360c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fe0a 	bl	8004220 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800361a:	d10e      	bne.n	800363a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003626:	2b80      	cmp	r3, #128	; 0x80
 8003628:	d107      	bne.n	800363a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fdfd 	bl	8004234 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003644:	2b40      	cmp	r3, #64	; 0x40
 8003646:	d10e      	bne.n	8003666 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003652:	2b40      	cmp	r3, #64	; 0x40
 8003654:	d107      	bne.n	8003666 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800365e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f97c 	bl	800395e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b20      	cmp	r3, #32
 8003672:	d10e      	bne.n	8003692 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b20      	cmp	r3, #32
 8003680:	d107      	bne.n	8003692 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f06f 0220 	mvn.w	r2, #32
 800368a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 fdbd 	bl	800420c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
	...

0800369c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d101      	bne.n	80036ba <HAL_TIM_OC_ConfigChannel+0x1e>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e066      	b.n	8003788 <HAL_TIM_OC_ConfigChannel+0xec>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b14      	cmp	r3, #20
 80036c6:	d857      	bhi.n	8003778 <HAL_TIM_OC_ConfigChannel+0xdc>
 80036c8:	a201      	add	r2, pc, #4	; (adr r2, 80036d0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80036ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ce:	bf00      	nop
 80036d0:	08003725 	.word	0x08003725
 80036d4:	08003779 	.word	0x08003779
 80036d8:	08003779 	.word	0x08003779
 80036dc:	08003779 	.word	0x08003779
 80036e0:	08003733 	.word	0x08003733
 80036e4:	08003779 	.word	0x08003779
 80036e8:	08003779 	.word	0x08003779
 80036ec:	08003779 	.word	0x08003779
 80036f0:	08003741 	.word	0x08003741
 80036f4:	08003779 	.word	0x08003779
 80036f8:	08003779 	.word	0x08003779
 80036fc:	08003779 	.word	0x08003779
 8003700:	0800374f 	.word	0x0800374f
 8003704:	08003779 	.word	0x08003779
 8003708:	08003779 	.word	0x08003779
 800370c:	08003779 	.word	0x08003779
 8003710:	0800375d 	.word	0x0800375d
 8003714:	08003779 	.word	0x08003779
 8003718:	08003779 	.word	0x08003779
 800371c:	08003779 	.word	0x08003779
 8003720:	0800376b 	.word	0x0800376b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	4618      	mov	r0, r3
 800372c:	f000 f99a 	bl	8003a64 <TIM_OC1_SetConfig>
      break;
 8003730:	e025      	b.n	800377e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	4618      	mov	r0, r3
 800373a:	f000 fa19 	bl	8003b70 <TIM_OC2_SetConfig>
      break;
 800373e:	e01e      	b.n	800377e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fa92 	bl	8003c70 <TIM_OC3_SetConfig>
      break;
 800374c:	e017      	b.n	800377e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68b9      	ldr	r1, [r7, #8]
 8003754:	4618      	mov	r0, r3
 8003756:	f000 fb09 	bl	8003d6c <TIM_OC4_SetConfig>
      break;
 800375a:	e010      	b.n	800377e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fb66 	bl	8003e34 <TIM_OC5_SetConfig>
      break;
 8003768:	e009      	b.n	800377e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68b9      	ldr	r1, [r7, #8]
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fbbd 	bl	8003ef0 <TIM_OC6_SetConfig>
      break;
 8003776:	e002      	b.n	800377e <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	75fb      	strb	r3, [r7, #23]
      break;
 800377c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003786:	7dfb      	ldrb	r3, [r7, #23]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_TIM_ConfigClockSource+0x1c>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e0b6      	b.n	800391a <HAL_TIM_ConfigClockSource+0x18a>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e8:	d03e      	beq.n	8003868 <HAL_TIM_ConfigClockSource+0xd8>
 80037ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ee:	f200 8087 	bhi.w	8003900 <HAL_TIM_ConfigClockSource+0x170>
 80037f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f6:	f000 8086 	beq.w	8003906 <HAL_TIM_ConfigClockSource+0x176>
 80037fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037fe:	d87f      	bhi.n	8003900 <HAL_TIM_ConfigClockSource+0x170>
 8003800:	2b70      	cmp	r3, #112	; 0x70
 8003802:	d01a      	beq.n	800383a <HAL_TIM_ConfigClockSource+0xaa>
 8003804:	2b70      	cmp	r3, #112	; 0x70
 8003806:	d87b      	bhi.n	8003900 <HAL_TIM_ConfigClockSource+0x170>
 8003808:	2b60      	cmp	r3, #96	; 0x60
 800380a:	d050      	beq.n	80038ae <HAL_TIM_ConfigClockSource+0x11e>
 800380c:	2b60      	cmp	r3, #96	; 0x60
 800380e:	d877      	bhi.n	8003900 <HAL_TIM_ConfigClockSource+0x170>
 8003810:	2b50      	cmp	r3, #80	; 0x50
 8003812:	d03c      	beq.n	800388e <HAL_TIM_ConfigClockSource+0xfe>
 8003814:	2b50      	cmp	r3, #80	; 0x50
 8003816:	d873      	bhi.n	8003900 <HAL_TIM_ConfigClockSource+0x170>
 8003818:	2b40      	cmp	r3, #64	; 0x40
 800381a:	d058      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x13e>
 800381c:	2b40      	cmp	r3, #64	; 0x40
 800381e:	d86f      	bhi.n	8003900 <HAL_TIM_ConfigClockSource+0x170>
 8003820:	2b30      	cmp	r3, #48	; 0x30
 8003822:	d064      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0x15e>
 8003824:	2b30      	cmp	r3, #48	; 0x30
 8003826:	d86b      	bhi.n	8003900 <HAL_TIM_ConfigClockSource+0x170>
 8003828:	2b20      	cmp	r3, #32
 800382a:	d060      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0x15e>
 800382c:	2b20      	cmp	r3, #32
 800382e:	d867      	bhi.n	8003900 <HAL_TIM_ConfigClockSource+0x170>
 8003830:	2b00      	cmp	r3, #0
 8003832:	d05c      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0x15e>
 8003834:	2b10      	cmp	r3, #16
 8003836:	d05a      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0x15e>
 8003838:	e062      	b.n	8003900 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6899      	ldr	r1, [r3, #8]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f000 fc2b 	bl	80040a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800385c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	609a      	str	r2, [r3, #8]
      break;
 8003866:	e04f      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	6899      	ldr	r1, [r3, #8]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f000 fc14 	bl	80040a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800388a:	609a      	str	r2, [r3, #8]
      break;
 800388c:	e03c      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	6859      	ldr	r1, [r3, #4]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	461a      	mov	r2, r3
 800389c:	f000 fb88 	bl	8003fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2150      	movs	r1, #80	; 0x50
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 fbe1 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 80038ac:	e02c      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	6859      	ldr	r1, [r3, #4]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	461a      	mov	r2, r3
 80038bc:	f000 fba7 	bl	800400e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2160      	movs	r1, #96	; 0x60
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fbd1 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 80038cc:	e01c      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	6859      	ldr	r1, [r3, #4]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	461a      	mov	r2, r3
 80038dc:	f000 fb68 	bl	8003fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2140      	movs	r1, #64	; 0x40
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fbc1 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 80038ec:	e00c      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4619      	mov	r1, r3
 80038f8:	4610      	mov	r0, r2
 80038fa:	f000 fbb8 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 80038fe:	e003      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	73fb      	strb	r3, [r7, #15]
      break;
 8003904:	e000      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003906:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003918:	7bfb      	ldrb	r3, [r7, #15]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a32      	ldr	r2, [pc, #200]	; (8003a50 <TIM_Base_SetConfig+0xdc>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d007      	beq.n	800399c <TIM_Base_SetConfig+0x28>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003992:	d003      	beq.n	800399c <TIM_Base_SetConfig+0x28>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a2f      	ldr	r2, [pc, #188]	; (8003a54 <TIM_Base_SetConfig+0xe0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d108      	bne.n	80039ae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a27      	ldr	r2, [pc, #156]	; (8003a50 <TIM_Base_SetConfig+0xdc>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d013      	beq.n	80039de <TIM_Base_SetConfig+0x6a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039bc:	d00f      	beq.n	80039de <TIM_Base_SetConfig+0x6a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a24      	ldr	r2, [pc, #144]	; (8003a54 <TIM_Base_SetConfig+0xe0>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00b      	beq.n	80039de <TIM_Base_SetConfig+0x6a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a23      	ldr	r2, [pc, #140]	; (8003a58 <TIM_Base_SetConfig+0xe4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d007      	beq.n	80039de <TIM_Base_SetConfig+0x6a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a22      	ldr	r2, [pc, #136]	; (8003a5c <TIM_Base_SetConfig+0xe8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d003      	beq.n	80039de <TIM_Base_SetConfig+0x6a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a21      	ldr	r2, [pc, #132]	; (8003a60 <TIM_Base_SetConfig+0xec>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d108      	bne.n	80039f0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a0e      	ldr	r2, [pc, #56]	; (8003a50 <TIM_Base_SetConfig+0xdc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00b      	beq.n	8003a34 <TIM_Base_SetConfig+0xc0>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a0e      	ldr	r2, [pc, #56]	; (8003a58 <TIM_Base_SetConfig+0xe4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d007      	beq.n	8003a34 <TIM_Base_SetConfig+0xc0>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a0d      	ldr	r2, [pc, #52]	; (8003a5c <TIM_Base_SetConfig+0xe8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <TIM_Base_SetConfig+0xc0>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a0c      	ldr	r2, [pc, #48]	; (8003a60 <TIM_Base_SetConfig+0xec>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d103      	bne.n	8003a3c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	615a      	str	r2, [r3, #20]
}
 8003a42:	bf00      	nop
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	40012c00 	.word	0x40012c00
 8003a54:	40000400 	.word	0x40000400
 8003a58:	40014000 	.word	0x40014000
 8003a5c:	40014400 	.word	0x40014400
 8003a60:	40014800 	.word	0x40014800

08003a64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	f023 0201 	bic.w	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 0303 	bic.w	r3, r3, #3
 8003a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f023 0302 	bic.w	r3, r3, #2
 8003ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a28      	ldr	r2, [pc, #160]	; (8003b60 <TIM_OC1_SetConfig+0xfc>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00b      	beq.n	8003adc <TIM_OC1_SetConfig+0x78>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a27      	ldr	r2, [pc, #156]	; (8003b64 <TIM_OC1_SetConfig+0x100>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d007      	beq.n	8003adc <TIM_OC1_SetConfig+0x78>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a26      	ldr	r2, [pc, #152]	; (8003b68 <TIM_OC1_SetConfig+0x104>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d003      	beq.n	8003adc <TIM_OC1_SetConfig+0x78>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a25      	ldr	r2, [pc, #148]	; (8003b6c <TIM_OC1_SetConfig+0x108>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d10c      	bne.n	8003af6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	f023 0308 	bic.w	r3, r3, #8
 8003ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f023 0304 	bic.w	r3, r3, #4
 8003af4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a19      	ldr	r2, [pc, #100]	; (8003b60 <TIM_OC1_SetConfig+0xfc>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00b      	beq.n	8003b16 <TIM_OC1_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a18      	ldr	r2, [pc, #96]	; (8003b64 <TIM_OC1_SetConfig+0x100>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d007      	beq.n	8003b16 <TIM_OC1_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a17      	ldr	r2, [pc, #92]	; (8003b68 <TIM_OC1_SetConfig+0x104>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d003      	beq.n	8003b16 <TIM_OC1_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a16      	ldr	r2, [pc, #88]	; (8003b6c <TIM_OC1_SetConfig+0x108>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d111      	bne.n	8003b3a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	621a      	str	r2, [r3, #32]
}
 8003b54:	bf00      	nop
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	40012c00 	.word	0x40012c00
 8003b64:	40014000 	.word	0x40014000
 8003b68:	40014400 	.word	0x40014400
 8003b6c:	40014800 	.word	0x40014800

08003b70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	f023 0210 	bic.w	r2, r3, #16
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f023 0320 	bic.w	r3, r3, #32
 8003bbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a24      	ldr	r2, [pc, #144]	; (8003c60 <TIM_OC2_SetConfig+0xf0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d10d      	bne.n	8003bf0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a1b      	ldr	r2, [pc, #108]	; (8003c60 <TIM_OC2_SetConfig+0xf0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d00b      	beq.n	8003c10 <TIM_OC2_SetConfig+0xa0>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a1a      	ldr	r2, [pc, #104]	; (8003c64 <TIM_OC2_SetConfig+0xf4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d007      	beq.n	8003c10 <TIM_OC2_SetConfig+0xa0>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a19      	ldr	r2, [pc, #100]	; (8003c68 <TIM_OC2_SetConfig+0xf8>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d003      	beq.n	8003c10 <TIM_OC2_SetConfig+0xa0>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a18      	ldr	r2, [pc, #96]	; (8003c6c <TIM_OC2_SetConfig+0xfc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d113      	bne.n	8003c38 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c16:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c1e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	621a      	str	r2, [r3, #32]
}
 8003c52:	bf00      	nop
 8003c54:	371c      	adds	r7, #28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40012c00 	.word	0x40012c00
 8003c64:	40014000 	.word	0x40014000
 8003c68:	40014400 	.word	0x40014400
 8003c6c:	40014800 	.word	0x40014800

08003c70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0303 	bic.w	r3, r3, #3
 8003caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	021b      	lsls	r3, r3, #8
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a23      	ldr	r2, [pc, #140]	; (8003d5c <TIM_OC3_SetConfig+0xec>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d10d      	bne.n	8003cee <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	021b      	lsls	r3, r3, #8
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cec:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a1a      	ldr	r2, [pc, #104]	; (8003d5c <TIM_OC3_SetConfig+0xec>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d00b      	beq.n	8003d0e <TIM_OC3_SetConfig+0x9e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a19      	ldr	r2, [pc, #100]	; (8003d60 <TIM_OC3_SetConfig+0xf0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d007      	beq.n	8003d0e <TIM_OC3_SetConfig+0x9e>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a18      	ldr	r2, [pc, #96]	; (8003d64 <TIM_OC3_SetConfig+0xf4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d003      	beq.n	8003d0e <TIM_OC3_SetConfig+0x9e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a17      	ldr	r2, [pc, #92]	; (8003d68 <TIM_OC3_SetConfig+0xf8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d113      	bne.n	8003d36 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	621a      	str	r2, [r3, #32]
}
 8003d50:	bf00      	nop
 8003d52:	371c      	adds	r7, #28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	40012c00 	.word	0x40012c00
 8003d60:	40014000 	.word	0x40014000
 8003d64:	40014400 	.word	0x40014400
 8003d68:	40014800 	.word	0x40014800

08003d6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	031b      	lsls	r3, r3, #12
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a16      	ldr	r2, [pc, #88]	; (8003e24 <TIM_OC4_SetConfig+0xb8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00b      	beq.n	8003de8 <TIM_OC4_SetConfig+0x7c>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a15      	ldr	r2, [pc, #84]	; (8003e28 <TIM_OC4_SetConfig+0xbc>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d007      	beq.n	8003de8 <TIM_OC4_SetConfig+0x7c>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a14      	ldr	r2, [pc, #80]	; (8003e2c <TIM_OC4_SetConfig+0xc0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d003      	beq.n	8003de8 <TIM_OC4_SetConfig+0x7c>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a13      	ldr	r2, [pc, #76]	; (8003e30 <TIM_OC4_SetConfig+0xc4>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d109      	bne.n	8003dfc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	019b      	lsls	r3, r3, #6
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	621a      	str	r2, [r3, #32]
}
 8003e16:	bf00      	nop
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40012c00 	.word	0x40012c00
 8003e28:	40014000 	.word	0x40014000
 8003e2c:	40014400 	.word	0x40014400
 8003e30:	40014800 	.word	0x40014800

08003e34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	041b      	lsls	r3, r3, #16
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a15      	ldr	r2, [pc, #84]	; (8003ee0 <TIM_OC5_SetConfig+0xac>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00b      	beq.n	8003ea6 <TIM_OC5_SetConfig+0x72>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a14      	ldr	r2, [pc, #80]	; (8003ee4 <TIM_OC5_SetConfig+0xb0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d007      	beq.n	8003ea6 <TIM_OC5_SetConfig+0x72>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a13      	ldr	r2, [pc, #76]	; (8003ee8 <TIM_OC5_SetConfig+0xb4>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d003      	beq.n	8003ea6 <TIM_OC5_SetConfig+0x72>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a12      	ldr	r2, [pc, #72]	; (8003eec <TIM_OC5_SetConfig+0xb8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d109      	bne.n	8003eba <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	621a      	str	r2, [r3, #32]
}
 8003ed4:	bf00      	nop
 8003ed6:	371c      	adds	r7, #28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	40012c00 	.word	0x40012c00
 8003ee4:	40014000 	.word	0x40014000
 8003ee8:	40014400 	.word	0x40014400
 8003eec:	40014800 	.word	0x40014800

08003ef0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b087      	sub	sp, #28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	021b      	lsls	r3, r3, #8
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	051b      	lsls	r3, r3, #20
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a16      	ldr	r2, [pc, #88]	; (8003fa0 <TIM_OC6_SetConfig+0xb0>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00b      	beq.n	8003f64 <TIM_OC6_SetConfig+0x74>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a15      	ldr	r2, [pc, #84]	; (8003fa4 <TIM_OC6_SetConfig+0xb4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d007      	beq.n	8003f64 <TIM_OC6_SetConfig+0x74>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a14      	ldr	r2, [pc, #80]	; (8003fa8 <TIM_OC6_SetConfig+0xb8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d003      	beq.n	8003f64 <TIM_OC6_SetConfig+0x74>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a13      	ldr	r2, [pc, #76]	; (8003fac <TIM_OC6_SetConfig+0xbc>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d109      	bne.n	8003f78 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	029b      	lsls	r3, r3, #10
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	621a      	str	r2, [r3, #32]
}
 8003f92:	bf00      	nop
 8003f94:	371c      	adds	r7, #28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40014000 	.word	0x40014000
 8003fa8:	40014400 	.word	0x40014400
 8003fac:	40014800 	.word	0x40014800

08003fb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f023 0201 	bic.w	r2, r3, #1
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f023 030a 	bic.w	r3, r3, #10
 8003fec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	621a      	str	r2, [r3, #32]
}
 8004002:	bf00      	nop
 8004004:	371c      	adds	r7, #28
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800400e:	b480      	push	{r7}
 8004010:	b087      	sub	sp, #28
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	f023 0210 	bic.w	r2, r3, #16
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	031b      	lsls	r3, r3, #12
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800404a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	621a      	str	r2, [r3, #32]
}
 8004062:	bf00      	nop
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800406e:	b480      	push	{r7}
 8004070:	b085      	sub	sp, #20
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004084:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4313      	orrs	r3, r2
 800408c:	f043 0307 	orr.w	r3, r3, #7
 8004090:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	609a      	str	r2, [r3, #8]
}
 8004098:	bf00      	nop
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	021a      	lsls	r2, r3, #8
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	609a      	str	r2, [r3, #8]
}
 80040d8:	bf00      	nop
 80040da:	371c      	adds	r7, #28
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 031f 	and.w	r3, r3, #31
 80040f6:	2201      	movs	r2, #1
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a1a      	ldr	r2, [r3, #32]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	43db      	mvns	r3, r3
 8004106:	401a      	ands	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a1a      	ldr	r2, [r3, #32]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f003 031f 	and.w	r3, r3, #31
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	fa01 f303 	lsl.w	r3, r1, r3
 800411c:	431a      	orrs	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	621a      	str	r2, [r3, #32]
}
 8004122:	bf00      	nop
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
	...

08004130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004144:	2302      	movs	r3, #2
 8004146:	e054      	b.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a24      	ldr	r2, [pc, #144]	; (8004200 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d108      	bne.n	8004184 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004178:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4313      	orrs	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a17      	ldr	r2, [pc, #92]	; (8004200 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00e      	beq.n	80041c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b0:	d009      	beq.n	80041c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a13      	ldr	r2, [pc, #76]	; (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d004      	beq.n	80041c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a11      	ldr	r2, [pc, #68]	; (8004208 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d10c      	bne.n	80041e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40012c00 	.word	0x40012c00
 8004204:	40000400 	.word	0x40000400
 8004208:	40014000 	.word	0x40014000

0800420c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e040      	b.n	80042dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fc fe4e 	bl	8000f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2224      	movs	r2, #36	; 0x24
 8004274:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0201 	bic.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 fe46 	bl	8004f18 <UART_SetConfig>
 800428c:	4603      	mov	r3, r0
 800428e:	2b01      	cmp	r3, #1
 8004290:	d101      	bne.n	8004296 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e022      	b.n	80042dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 ff70 	bl	8005184 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fff7 	bl	80052c8 <UART_CheckIdleState>
 80042da:	4603      	mov	r3, r0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e048      	b.n	8004388 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fc fe00 	bl	8000f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2224      	movs	r2, #36	; 0x24
 8004310:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0201 	bic.w	r2, r2, #1
 8004320:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fdf8 	bl	8004f18 <UART_SetConfig>
 8004328:	4603      	mov	r3, r0
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e02a      	b.n	8004388 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 ff22 	bl	8005184 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800434e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800435e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0208 	orr.w	r2, r2, #8
 800436e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 ffa1 	bl	80052c8 <UART_CheckIdleState>
 8004386:	4603      	mov	r3, r0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08a      	sub	sp, #40	; 0x28
 8004394:	af02      	add	r7, sp, #8
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	4613      	mov	r3, r2
 800439e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043a4:	2b20      	cmp	r3, #32
 80043a6:	f040 8082 	bne.w	80044ae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <HAL_UART_Transmit+0x26>
 80043b0:	88fb      	ldrh	r3, [r7, #6]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e07a      	b.n	80044b0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_UART_Transmit+0x38>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e073      	b.n	80044b0 <HAL_UART_Transmit+0x120>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2221      	movs	r2, #33	; 0x21
 80043dc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043de:	f7fc ff6f 	bl	80012c0 <HAL_GetTick>
 80043e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	88fa      	ldrh	r2, [r7, #6]
 80043e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	88fa      	ldrh	r2, [r7, #6]
 80043f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043fc:	d108      	bne.n	8004410 <HAL_UART_Transmit+0x80>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d104      	bne.n	8004410 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004406:	2300      	movs	r3, #0
 8004408:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	e003      	b.n	8004418 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004414:	2300      	movs	r3, #0
 8004416:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004420:	e02d      	b.n	800447e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2200      	movs	r2, #0
 800442a:	2180      	movs	r1, #128	; 0x80
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 ff94 	bl	800535a <UART_WaitOnFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e039      	b.n	80044b0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10b      	bne.n	800445a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	881a      	ldrh	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800444e:	b292      	uxth	r2, r2
 8004450:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	3302      	adds	r3, #2
 8004456:	61bb      	str	r3, [r7, #24]
 8004458:	e008      	b.n	800446c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	781a      	ldrb	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	b292      	uxth	r2, r2
 8004464:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	3301      	adds	r3, #1
 800446a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004472:	b29b      	uxth	r3, r3
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1cb      	bne.n	8004422 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2200      	movs	r2, #0
 8004492:	2140      	movs	r1, #64	; 0x40
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 ff60 	bl	800535a <UART_WaitOnFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e005      	b.n	80044b0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	e000      	b.n	80044b0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80044ae:	2302      	movs	r3, #2
  }
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3720      	adds	r7, #32
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08a      	sub	sp, #40	; 0x28
 80044bc:	af02      	add	r7, sp, #8
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	4613      	mov	r3, r2
 80044c6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	f040 80bf 	bne.w	8004650 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <HAL_UART_Receive+0x26>
 80044d8:	88fb      	ldrh	r3, [r7, #6]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e0b7      	b.n	8004652 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d101      	bne.n	80044f0 <HAL_UART_Receive+0x38>
 80044ec:	2302      	movs	r3, #2
 80044ee:	e0b0      	b.n	8004652 <HAL_UART_Receive+0x19a>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2222      	movs	r2, #34	; 0x22
 8004504:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800450c:	f7fc fed8 	bl	80012c0 <HAL_GetTick>
 8004510:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	88fa      	ldrh	r2, [r7, #6]
 8004516:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	88fa      	ldrh	r2, [r7, #6]
 800451e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800452a:	d10e      	bne.n	800454a <HAL_UART_Receive+0x92>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d105      	bne.n	8004540 <HAL_UART_Receive+0x88>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f240 12ff 	movw	r2, #511	; 0x1ff
 800453a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800453e:	e02d      	b.n	800459c <HAL_UART_Receive+0xe4>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	22ff      	movs	r2, #255	; 0xff
 8004544:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004548:	e028      	b.n	800459c <HAL_UART_Receive+0xe4>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10d      	bne.n	800456e <HAL_UART_Receive+0xb6>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d104      	bne.n	8004564 <HAL_UART_Receive+0xac>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	22ff      	movs	r2, #255	; 0xff
 800455e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004562:	e01b      	b.n	800459c <HAL_UART_Receive+0xe4>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	227f      	movs	r2, #127	; 0x7f
 8004568:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800456c:	e016      	b.n	800459c <HAL_UART_Receive+0xe4>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004576:	d10d      	bne.n	8004594 <HAL_UART_Receive+0xdc>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d104      	bne.n	800458a <HAL_UART_Receive+0xd2>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	227f      	movs	r2, #127	; 0x7f
 8004584:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004588:	e008      	b.n	800459c <HAL_UART_Receive+0xe4>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	223f      	movs	r2, #63	; 0x3f
 800458e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004592:	e003      	b.n	800459c <HAL_UART_Receive+0xe4>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80045a2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ac:	d108      	bne.n	80045c0 <HAL_UART_Receive+0x108>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d104      	bne.n	80045c0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	e003      	b.n	80045c8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045c4:	2300      	movs	r3, #0
 80045c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80045d0:	e033      	b.n	800463a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2200      	movs	r2, #0
 80045da:	2120      	movs	r1, #32
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 febc 	bl	800535a <UART_WaitOnFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e032      	b.n	8004652 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10c      	bne.n	800460c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	8a7b      	ldrh	r3, [r7, #18]
 80045fc:	4013      	ands	r3, r2
 80045fe:	b29a      	uxth	r2, r3
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	3302      	adds	r3, #2
 8004608:	61bb      	str	r3, [r7, #24]
 800460a:	e00d      	b.n	8004628 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004612:	b29b      	uxth	r3, r3
 8004614:	b2da      	uxtb	r2, r3
 8004616:	8a7b      	ldrh	r3, [r7, #18]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	4013      	ands	r3, r2
 800461c:	b2da      	uxtb	r2, r3
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	3301      	adds	r3, #1
 8004626:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004640:	b29b      	uxth	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1c5      	bne.n	80045d2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2220      	movs	r2, #32
 800464a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800464c:	2300      	movs	r3, #0
 800464e:	e000      	b.n	8004652 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004650:	2302      	movs	r3, #2
  }
}
 8004652:	4618      	mov	r0, r3
 8004654:	3720      	adds	r7, #32
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800465c:	b480      	push	{r7}
 800465e:	b08b      	sub	sp, #44	; 0x2c
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	4613      	mov	r3, r2
 8004668:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800466e:	2b20      	cmp	r3, #32
 8004670:	d156      	bne.n	8004720 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <HAL_UART_Transmit_IT+0x22>
 8004678:	88fb      	ldrh	r3, [r7, #6]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e04f      	b.n	8004722 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <HAL_UART_Transmit_IT+0x34>
 800468c:	2302      	movs	r3, #2
 800468e:	e048      	b.n	8004722 <HAL_UART_Transmit_IT+0xc6>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	88fa      	ldrh	r2, [r7, #6]
 80046a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	88fa      	ldrh	r2, [r7, #6]
 80046aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2221      	movs	r2, #33	; 0x21
 80046c0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ca:	d107      	bne.n	80046dc <HAL_UART_Transmit_IT+0x80>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d103      	bne.n	80046dc <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4a16      	ldr	r2, [pc, #88]	; (8004730 <HAL_UART_Transmit_IT+0xd4>)
 80046d8:	669a      	str	r2, [r3, #104]	; 0x68
 80046da:	e002      	b.n	80046e2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4a15      	ldr	r2, [pc, #84]	; (8004734 <HAL_UART_Transmit_IT+0xd8>)
 80046e0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	e853 3f00 	ldrex	r3, [r3]
 80046f6:	613b      	str	r3, [r7, #16]
   return(result);
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	623b      	str	r3, [r7, #32]
 800470a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470c:	69f9      	ldr	r1, [r7, #28]
 800470e:	6a3a      	ldr	r2, [r7, #32]
 8004710:	e841 2300 	strex	r3, r2, [r1]
 8004714:	61bb      	str	r3, [r7, #24]
   return(result);
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1e6      	bne.n	80046ea <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	e000      	b.n	8004722 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004720:	2302      	movs	r3, #2
  }
}
 8004722:	4618      	mov	r0, r3
 8004724:	372c      	adds	r7, #44	; 0x2c
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	080057e7 	.word	0x080057e7
 8004734:	0800572f 	.word	0x0800572f

08004738 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08a      	sub	sp, #40	; 0x28
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	4613      	mov	r3, r2
 8004744:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800474a:	2b20      	cmp	r3, #32
 800474c:	d13d      	bne.n	80047ca <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <HAL_UART_Receive_IT+0x22>
 8004754:	88fb      	ldrh	r3, [r7, #6]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e036      	b.n	80047cc <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_UART_Receive_IT+0x34>
 8004768:	2302      	movs	r3, #2
 800476a:	e02f      	b.n	80047cc <HAL_UART_Receive_IT+0x94>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d018      	beq.n	80047ba <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	e853 3f00 	ldrex	r3, [r3]
 8004794:	613b      	str	r3, [r7, #16]
   return(result);
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	623b      	str	r3, [r7, #32]
 80047a8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047aa:	69f9      	ldr	r1, [r7, #28]
 80047ac:	6a3a      	ldr	r2, [r7, #32]
 80047ae:	e841 2300 	strex	r3, r2, [r1]
 80047b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1e6      	bne.n	8004788 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	461a      	mov	r2, r3
 80047be:	68b9      	ldr	r1, [r7, #8]
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 fe8f 	bl	80054e4 <UART_Start_Receive_IT>
 80047c6:	4603      	mov	r3, r0
 80047c8:	e000      	b.n	80047cc <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047ca:	2302      	movs	r3, #2
  }
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3728      	adds	r7, #40	; 0x28
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b0ba      	sub	sp, #232	; 0xe8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80047fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8004802:	4013      	ands	r3, r2
 8004804:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004808:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800480c:	2b00      	cmp	r3, #0
 800480e:	d115      	bne.n	800483c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00f      	beq.n	800483c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800481c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b00      	cmp	r3, #0
 8004826:	d009      	beq.n	800483c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 82a3 	beq.w	8004d78 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	4798      	blx	r3
      }
      return;
 800483a:	e29d      	b.n	8004d78 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800483c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 8117 	beq.w	8004a74 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004852:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004856:	4b85      	ldr	r3, [pc, #532]	; (8004a6c <HAL_UART_IRQHandler+0x298>)
 8004858:	4013      	ands	r3, r2
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 810a 	beq.w	8004a74 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b00      	cmp	r3, #0
 800486a:	d011      	beq.n	8004890 <HAL_UART_IRQHandler+0xbc>
 800486c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00b      	beq.n	8004890 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2201      	movs	r2, #1
 800487e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004886:	f043 0201 	orr.w	r2, r3, #1
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d011      	beq.n	80048c0 <HAL_UART_IRQHandler+0xec>
 800489c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00b      	beq.n	80048c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2202      	movs	r2, #2
 80048ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048b6:	f043 0204 	orr.w	r2, r3, #4
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d011      	beq.n	80048f0 <HAL_UART_IRQHandler+0x11c>
 80048cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00b      	beq.n	80048f0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2204      	movs	r2, #4
 80048de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048e6:	f043 0202 	orr.w	r2, r3, #2
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d017      	beq.n	800492c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b00      	cmp	r3, #0
 8004906:	d105      	bne.n	8004914 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800490c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00b      	beq.n	800492c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2208      	movs	r2, #8
 800491a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004922:	f043 0208 	orr.w	r2, r3, #8
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800492c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004934:	2b00      	cmp	r3, #0
 8004936:	d012      	beq.n	800495e <HAL_UART_IRQHandler+0x18a>
 8004938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800493c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00c      	beq.n	800495e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800494c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004954:	f043 0220 	orr.w	r2, r3, #32
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 8209 	beq.w	8004d7c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800496a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00d      	beq.n	8004992 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004998:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b40      	cmp	r3, #64	; 0x40
 80049a8:	d005      	beq.n	80049b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d04f      	beq.n	8004a56 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fe40 	bl	800563c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c6:	2b40      	cmp	r3, #64	; 0x40
 80049c8:	d141      	bne.n	8004a4e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3308      	adds	r3, #8
 80049d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049d8:	e853 3f00 	ldrex	r3, [r3]
 80049dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3308      	adds	r3, #8
 80049f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a06:	e841 2300 	strex	r3, r2, [r1]
 8004a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1d9      	bne.n	80049ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d013      	beq.n	8004a46 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a22:	4a13      	ldr	r2, [pc, #76]	; (8004a70 <HAL_UART_IRQHandler+0x29c>)
 8004a24:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fc fdc2 	bl	80015b4 <HAL_DMA_Abort_IT>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d017      	beq.n	8004a66 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004a40:	4610      	mov	r0, r2
 8004a42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a44:	e00f      	b.n	8004a66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f9ac 	bl	8004da4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a4c:	e00b      	b.n	8004a66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f9a8 	bl	8004da4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a54:	e007      	b.n	8004a66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f9a4 	bl	8004da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004a64:	e18a      	b.n	8004d7c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a66:	bf00      	nop
    return;
 8004a68:	e188      	b.n	8004d7c <HAL_UART_IRQHandler+0x5a8>
 8004a6a:	bf00      	nop
 8004a6c:	04000120 	.word	0x04000120
 8004a70:	08005703 	.word	0x08005703

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	f040 8143 	bne.w	8004d04 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a82:	f003 0310 	and.w	r3, r3, #16
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 813c 	beq.w	8004d04 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 8135 	beq.w	8004d04 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2210      	movs	r2, #16
 8004aa0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aac:	2b40      	cmp	r3, #64	; 0x40
 8004aae:	f040 80b1 	bne.w	8004c14 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004abe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 815c 	beq.w	8004d80 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ace:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	f080 8154 	bcs.w	8004d80 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ade:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	f000 8085 	beq.w	8004bf8 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004afa:	e853 3f00 	ldrex	r3, [r3]
 8004afe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b1c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1da      	bne.n	8004aee <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b42:	e853 3f00 	ldrex	r3, [r3]
 8004b46:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b4a:	f023 0301 	bic.w	r3, r3, #1
 8004b4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3308      	adds	r3, #8
 8004b58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b5c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b60:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e1      	bne.n	8004b38 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3308      	adds	r3, #8
 8004b7a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3308      	adds	r3, #8
 8004b94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b98:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ba0:	e841 2300 	strex	r3, r2, [r1]
 8004ba4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ba6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1e3      	bne.n	8004b74 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bc0:	e853 3f00 	ldrex	r3, [r3]
 8004bc4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc8:	f023 0310 	bic.w	r3, r3, #16
 8004bcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bda:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bdc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bde:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004be0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004be2:	e841 2300 	strex	r3, r2, [r1]
 8004be6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1e4      	bne.n	8004bb8 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fc fca5 	bl	8001542 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f8d3 	bl	8004db8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c12:	e0b5      	b.n	8004d80 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 80a7 	beq.w	8004d84 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004c36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 80a2 	beq.w	8004d84 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c62:	647b      	str	r3, [r7, #68]	; 0x44
 8004c64:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e4      	bne.n	8004c40 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	e853 3f00 	ldrex	r3, [r3]
 8004c84:	623b      	str	r3, [r7, #32]
   return(result);
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	f023 0301 	bic.w	r3, r3, #1
 8004c8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3308      	adds	r3, #8
 8004c96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c9a:	633a      	str	r2, [r7, #48]	; 0x30
 8004c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ca2:	e841 2300 	strex	r3, r2, [r1]
 8004ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1e3      	bne.n	8004c76 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	e853 3f00 	ldrex	r3, [r3]
 8004ccc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f023 0310 	bic.w	r3, r3, #16
 8004cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	69b9      	ldr	r1, [r7, #24]
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	617b      	str	r3, [r7, #20]
   return(result);
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e4      	bne.n	8004cc0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cf6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f85b 	bl	8004db8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d02:	e03f      	b.n	8004d84 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00e      	beq.n	8004d2e <HAL_UART_IRQHandler+0x55a>
 8004d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d008      	beq.n	8004d2e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 ff43 	bl	8005bb2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d2c:	e02d      	b.n	8004d8a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00e      	beq.n	8004d58 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d008      	beq.n	8004d58 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d01c      	beq.n	8004d88 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	4798      	blx	r3
    }
    return;
 8004d56:	e017      	b.n	8004d88 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d012      	beq.n	8004d8a <HAL_UART_IRQHandler+0x5b6>
 8004d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00c      	beq.n	8004d8a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fd98 	bl	80058a6 <UART_EndTransmit_IT>
    return;
 8004d76:	e008      	b.n	8004d8a <HAL_UART_IRQHandler+0x5b6>
      return;
 8004d78:	bf00      	nop
 8004d7a:	e006      	b.n	8004d8a <HAL_UART_IRQHandler+0x5b6>
    return;
 8004d7c:	bf00      	nop
 8004d7e:	e004      	b.n	8004d8a <HAL_UART_IRQHandler+0x5b6>
      return;
 8004d80:	bf00      	nop
 8004d82:	e002      	b.n	8004d8a <HAL_UART_IRQHandler+0x5b6>
      return;
 8004d84:	bf00      	nop
 8004d86:	e000      	b.n	8004d8a <HAL_UART_IRQHandler+0x5b6>
    return;
 8004d88:	bf00      	nop
  }

}
 8004d8a:	37e8      	adds	r7, #232	; 0xe8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b08f      	sub	sp, #60	; 0x3c
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d101      	bne.n	8004de6 <HAL_HalfDuplex_EnableTransmitter+0x16>
 8004de2:	2302      	movs	r3, #2
 8004de4:	e040      	b.n	8004e68 <HAL_HalfDuplex_EnableTransmitter+0x98>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2224      	movs	r2, #36	; 0x24
 8004df2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	e853 3f00 	ldrex	r3, [r3]
 8004e00:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	f023 030c 	bic.w	r3, r3, #12
 8004e08:	637b      	str	r3, [r7, #52]	; 0x34
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e14:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e6      	bne.n	8004df4 <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	e853 3f00 	ldrex	r3, [r3]
 8004e32:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f043 0308 	orr.w	r3, r3, #8
 8004e3a:	633b      	str	r3, [r7, #48]	; 0x30
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	461a      	mov	r2, r3
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e48:	6979      	ldr	r1, [r7, #20]
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	e841 2300 	strex	r3, r2, [r1]
 8004e50:	613b      	str	r3, [r7, #16]
   return(result);
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1e6      	bne.n	8004e26 <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	373c      	adds	r7, #60	; 0x3c
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b08f      	sub	sp, #60	; 0x3c
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d101      	bne.n	8004e8a <HAL_HalfDuplex_EnableReceiver+0x16>
 8004e86:	2302      	movs	r3, #2
 8004e88:	e040      	b.n	8004f0c <HAL_HalfDuplex_EnableReceiver+0x98>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2224      	movs	r2, #36	; 0x24
 8004e96:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	e853 3f00 	ldrex	r3, [r3]
 8004ea4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	f023 030c 	bic.w	r3, r3, #12
 8004eac:	637b      	str	r3, [r7, #52]	; 0x34
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eb8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ebe:	e841 2300 	strex	r3, r2, [r1]
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1e6      	bne.n	8004e98 <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	e853 3f00 	ldrex	r3, [r3]
 8004ed6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f043 0304 	orr.w	r3, r3, #4
 8004ede:	633b      	str	r3, [r7, #48]	; 0x30
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee8:	61bb      	str	r3, [r7, #24]
 8004eea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	6979      	ldr	r1, [r7, #20]
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	e841 2300 	strex	r3, r2, [r1]
 8004ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e6      	bne.n	8004eca <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	373c      	adds	r7, #60	; 0x3c
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	4b8a      	ldr	r3, [pc, #552]	; (800516c <UART_SetConfig+0x254>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6812      	ldr	r2, [r2, #0]
 8004f4a:	6979      	ldr	r1, [r7, #20]
 8004f4c:	430b      	orrs	r3, r1
 8004f4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a78      	ldr	r2, [pc, #480]	; (8005170 <UART_SetConfig+0x258>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d120      	bne.n	8004fd6 <UART_SetConfig+0xbe>
 8004f94:	4b77      	ldr	r3, [pc, #476]	; (8005174 <UART_SetConfig+0x25c>)
 8004f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f98:	f003 0303 	and.w	r3, r3, #3
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d817      	bhi.n	8004fd0 <UART_SetConfig+0xb8>
 8004fa0:	a201      	add	r2, pc, #4	; (adr r2, 8004fa8 <UART_SetConfig+0x90>)
 8004fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa6:	bf00      	nop
 8004fa8:	08004fb9 	.word	0x08004fb9
 8004fac:	08004fc5 	.word	0x08004fc5
 8004fb0:	08004fcb 	.word	0x08004fcb
 8004fb4:	08004fbf 	.word	0x08004fbf
 8004fb8:	2300      	movs	r3, #0
 8004fba:	77fb      	strb	r3, [r7, #31]
 8004fbc:	e01d      	b.n	8004ffa <UART_SetConfig+0xe2>
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	77fb      	strb	r3, [r7, #31]
 8004fc2:	e01a      	b.n	8004ffa <UART_SetConfig+0xe2>
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	77fb      	strb	r3, [r7, #31]
 8004fc8:	e017      	b.n	8004ffa <UART_SetConfig+0xe2>
 8004fca:	2308      	movs	r3, #8
 8004fcc:	77fb      	strb	r3, [r7, #31]
 8004fce:	e014      	b.n	8004ffa <UART_SetConfig+0xe2>
 8004fd0:	2310      	movs	r3, #16
 8004fd2:	77fb      	strb	r3, [r7, #31]
 8004fd4:	e011      	b.n	8004ffa <UART_SetConfig+0xe2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a67      	ldr	r2, [pc, #412]	; (8005178 <UART_SetConfig+0x260>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d102      	bne.n	8004fe6 <UART_SetConfig+0xce>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e009      	b.n	8004ffa <UART_SetConfig+0xe2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a64      	ldr	r2, [pc, #400]	; (800517c <UART_SetConfig+0x264>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d102      	bne.n	8004ff6 <UART_SetConfig+0xde>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	77fb      	strb	r3, [r7, #31]
 8004ff4:	e001      	b.n	8004ffa <UART_SetConfig+0xe2>
 8004ff6:	2310      	movs	r3, #16
 8004ff8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005002:	d15b      	bne.n	80050bc <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005004:	7ffb      	ldrb	r3, [r7, #31]
 8005006:	2b08      	cmp	r3, #8
 8005008:	d827      	bhi.n	800505a <UART_SetConfig+0x142>
 800500a:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <UART_SetConfig+0xf8>)
 800500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005010:	08005035 	.word	0x08005035
 8005014:	0800503d 	.word	0x0800503d
 8005018:	08005045 	.word	0x08005045
 800501c:	0800505b 	.word	0x0800505b
 8005020:	0800504b 	.word	0x0800504b
 8005024:	0800505b 	.word	0x0800505b
 8005028:	0800505b 	.word	0x0800505b
 800502c:	0800505b 	.word	0x0800505b
 8005030:	08005053 	.word	0x08005053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005034:	f7fd feb6 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 8005038:	61b8      	str	r0, [r7, #24]
        break;
 800503a:	e013      	b.n	8005064 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800503c:	f7fd fed4 	bl	8002de8 <HAL_RCC_GetPCLK2Freq>
 8005040:	61b8      	str	r0, [r7, #24]
        break;
 8005042:	e00f      	b.n	8005064 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005044:	4b4e      	ldr	r3, [pc, #312]	; (8005180 <UART_SetConfig+0x268>)
 8005046:	61bb      	str	r3, [r7, #24]
        break;
 8005048:	e00c      	b.n	8005064 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800504a:	f7fd fe35 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 800504e:	61b8      	str	r0, [r7, #24]
        break;
 8005050:	e008      	b.n	8005064 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005056:	61bb      	str	r3, [r7, #24]
        break;
 8005058:	e004      	b.n	8005064 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800505a:	2300      	movs	r3, #0
 800505c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	77bb      	strb	r3, [r7, #30]
        break;
 8005062:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d074      	beq.n	8005154 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	005a      	lsls	r2, r3, #1
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	085b      	lsrs	r3, r3, #1
 8005074:	441a      	add	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	fbb2 f3f3 	udiv	r3, r2, r3
 800507e:	b29b      	uxth	r3, r3
 8005080:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	2b0f      	cmp	r3, #15
 8005086:	d916      	bls.n	80050b6 <UART_SetConfig+0x19e>
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800508e:	d212      	bcs.n	80050b6 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	b29b      	uxth	r3, r3
 8005094:	f023 030f 	bic.w	r3, r3, #15
 8005098:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	085b      	lsrs	r3, r3, #1
 800509e:	b29b      	uxth	r3, r3
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	89fb      	ldrh	r3, [r7, #14]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	89fa      	ldrh	r2, [r7, #14]
 80050b2:	60da      	str	r2, [r3, #12]
 80050b4:	e04e      	b.n	8005154 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	77bb      	strb	r3, [r7, #30]
 80050ba:	e04b      	b.n	8005154 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050bc:	7ffb      	ldrb	r3, [r7, #31]
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d827      	bhi.n	8005112 <UART_SetConfig+0x1fa>
 80050c2:	a201      	add	r2, pc, #4	; (adr r2, 80050c8 <UART_SetConfig+0x1b0>)
 80050c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c8:	080050ed 	.word	0x080050ed
 80050cc:	080050f5 	.word	0x080050f5
 80050d0:	080050fd 	.word	0x080050fd
 80050d4:	08005113 	.word	0x08005113
 80050d8:	08005103 	.word	0x08005103
 80050dc:	08005113 	.word	0x08005113
 80050e0:	08005113 	.word	0x08005113
 80050e4:	08005113 	.word	0x08005113
 80050e8:	0800510b 	.word	0x0800510b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050ec:	f7fd fe5a 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 80050f0:	61b8      	str	r0, [r7, #24]
        break;
 80050f2:	e013      	b.n	800511c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050f4:	f7fd fe78 	bl	8002de8 <HAL_RCC_GetPCLK2Freq>
 80050f8:	61b8      	str	r0, [r7, #24]
        break;
 80050fa:	e00f      	b.n	800511c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050fc:	4b20      	ldr	r3, [pc, #128]	; (8005180 <UART_SetConfig+0x268>)
 80050fe:	61bb      	str	r3, [r7, #24]
        break;
 8005100:	e00c      	b.n	800511c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005102:	f7fd fdd9 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 8005106:	61b8      	str	r0, [r7, #24]
        break;
 8005108:	e008      	b.n	800511c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800510a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800510e:	61bb      	str	r3, [r7, #24]
        break;
 8005110:	e004      	b.n	800511c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	77bb      	strb	r3, [r7, #30]
        break;
 800511a:	bf00      	nop
    }

    if (pclk != 0U)
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d018      	beq.n	8005154 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	085a      	lsrs	r2, r3, #1
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	441a      	add	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	fbb2 f3f3 	udiv	r3, r2, r3
 8005134:	b29b      	uxth	r3, r3
 8005136:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	2b0f      	cmp	r3, #15
 800513c:	d908      	bls.n	8005150 <UART_SetConfig+0x238>
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005144:	d204      	bcs.n	8005150 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	60da      	str	r2, [r3, #12]
 800514e:	e001      	b.n	8005154 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005160:	7fbb      	ldrb	r3, [r7, #30]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3720      	adds	r7, #32
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	efff69f3 	.word	0xefff69f3
 8005170:	40013800 	.word	0x40013800
 8005174:	40021000 	.word	0x40021000
 8005178:	40004400 	.word	0x40004400
 800517c:	40004800 	.word	0x40004800
 8005180:	007a1200 	.word	0x007a1200

08005184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	f003 0310 	and.w	r3, r3, #16
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005260:	2b00      	cmp	r3, #0
 8005262:	d01a      	beq.n	800529a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005282:	d10a      	bne.n	800529a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	605a      	str	r2, [r3, #4]
  }
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052d8:	f7fb fff2 	bl	80012c0 <HAL_GetTick>
 80052dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0308 	and.w	r3, r3, #8
 80052e8:	2b08      	cmp	r3, #8
 80052ea:	d10e      	bne.n	800530a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f82d 	bl	800535a <UART_WaitOnFlagUntilTimeout>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e023      	b.n	8005352 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b04      	cmp	r3, #4
 8005316:	d10e      	bne.n	8005336 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005318:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f817 	bl	800535a <UART_WaitOnFlagUntilTimeout>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e00d      	b.n	8005352 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2220      	movs	r2, #32
 800533a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b09c      	sub	sp, #112	; 0x70
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	603b      	str	r3, [r7, #0]
 8005366:	4613      	mov	r3, r2
 8005368:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800536a:	e0a5      	b.n	80054b8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800536c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800536e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005372:	f000 80a1 	beq.w	80054b8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005376:	f7fb ffa3 	bl	80012c0 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005382:	429a      	cmp	r2, r3
 8005384:	d302      	bcc.n	800538c <UART_WaitOnFlagUntilTimeout+0x32>
 8005386:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005388:	2b00      	cmp	r3, #0
 800538a:	d13e      	bne.n	800540a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005394:	e853 3f00 	ldrex	r3, [r3]
 8005398:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800539a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800539c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053a0:	667b      	str	r3, [r7, #100]	; 0x64
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	461a      	mov	r2, r3
 80053a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053ac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80053b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1e6      	bne.n	800538c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3308      	adds	r3, #8
 80053c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d0:	f023 0301 	bic.w	r3, r3, #1
 80053d4:	663b      	str	r3, [r7, #96]	; 0x60
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3308      	adds	r3, #8
 80053dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053de:	64ba      	str	r2, [r7, #72]	; 0x48
 80053e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053e6:	e841 2300 	strex	r3, r2, [r1]
 80053ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1e5      	bne.n	80053be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2220      	movs	r2, #32
 80053f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e067      	b.n	80054da <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d04f      	beq.n	80054b8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005422:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005426:	d147      	bne.n	80054b8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005430:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005446:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005450:	637b      	str	r3, [r7, #52]	; 0x34
 8005452:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800545e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e6      	bne.n	8005432 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3308      	adds	r3, #8
 800546a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	e853 3f00 	ldrex	r3, [r3]
 8005472:	613b      	str	r3, [r7, #16]
   return(result);
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f023 0301 	bic.w	r3, r3, #1
 800547a:	66bb      	str	r3, [r7, #104]	; 0x68
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3308      	adds	r3, #8
 8005482:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005484:	623a      	str	r2, [r7, #32]
 8005486:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	69f9      	ldr	r1, [r7, #28]
 800548a:	6a3a      	ldr	r2, [r7, #32]
 800548c:	e841 2300 	strex	r3, r2, [r1]
 8005490:	61bb      	str	r3, [r7, #24]
   return(result);
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e5      	bne.n	8005464 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2220      	movs	r2, #32
 80054a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e010      	b.n	80054da <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	69da      	ldr	r2, [r3, #28]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	4013      	ands	r3, r2
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	bf0c      	ite	eq
 80054c8:	2301      	moveq	r3, #1
 80054ca:	2300      	movne	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	461a      	mov	r2, r3
 80054d0:	79fb      	ldrb	r3, [r7, #7]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	f43f af4a 	beq.w	800536c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3770      	adds	r7, #112	; 0x70
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
	...

080054e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b091      	sub	sp, #68	; 0x44
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	4613      	mov	r3, r2
 80054f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	88fa      	ldrh	r2, [r7, #6]
 80054fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	88fa      	ldrh	r2, [r7, #6]
 8005504:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005516:	d10e      	bne.n	8005536 <UART_Start_Receive_IT+0x52>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d105      	bne.n	800552c <UART_Start_Receive_IT+0x48>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005526:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800552a:	e02d      	b.n	8005588 <UART_Start_Receive_IT+0xa4>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	22ff      	movs	r2, #255	; 0xff
 8005530:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005534:	e028      	b.n	8005588 <UART_Start_Receive_IT+0xa4>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10d      	bne.n	800555a <UART_Start_Receive_IT+0x76>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d104      	bne.n	8005550 <UART_Start_Receive_IT+0x6c>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	22ff      	movs	r2, #255	; 0xff
 800554a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800554e:	e01b      	b.n	8005588 <UART_Start_Receive_IT+0xa4>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	227f      	movs	r2, #127	; 0x7f
 8005554:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005558:	e016      	b.n	8005588 <UART_Start_Receive_IT+0xa4>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005562:	d10d      	bne.n	8005580 <UART_Start_Receive_IT+0x9c>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d104      	bne.n	8005576 <UART_Start_Receive_IT+0x92>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	227f      	movs	r2, #127	; 0x7f
 8005570:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005574:	e008      	b.n	8005588 <UART_Start_Receive_IT+0xa4>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	223f      	movs	r2, #63	; 0x3f
 800557a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800557e:	e003      	b.n	8005588 <UART_Start_Receive_IT+0xa4>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2222      	movs	r2, #34	; 0x22
 8005594:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3308      	adds	r3, #8
 800559c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	f043 0301 	orr.w	r3, r3, #1
 80055ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3308      	adds	r3, #8
 80055b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055b6:	637a      	str	r2, [r7, #52]	; 0x34
 80055b8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055be:	e841 2300 	strex	r3, r2, [r1]
 80055c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1e5      	bne.n	8005596 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d2:	d107      	bne.n	80055e4 <UART_Start_Receive_IT+0x100>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d103      	bne.n	80055e4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4a15      	ldr	r2, [pc, #84]	; (8005634 <UART_Start_Receive_IT+0x150>)
 80055e0:	665a      	str	r2, [r3, #100]	; 0x64
 80055e2:	e002      	b.n	80055ea <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4a14      	ldr	r2, [pc, #80]	; (8005638 <UART_Start_Receive_IT+0x154>)
 80055e8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	e853 3f00 	ldrex	r3, [r3]
 80055fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005606:	63bb      	str	r3, [r7, #56]	; 0x38
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	461a      	mov	r2, r3
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	623b      	str	r3, [r7, #32]
 8005612:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005614:	69f9      	ldr	r1, [r7, #28]
 8005616:	6a3a      	ldr	r2, [r7, #32]
 8005618:	e841 2300 	strex	r3, r2, [r1]
 800561c:	61bb      	str	r3, [r7, #24]
   return(result);
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e6      	bne.n	80055f2 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3744      	adds	r7, #68	; 0x44
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	08005a57 	.word	0x08005a57
 8005638:	080058fb 	.word	0x080058fb

0800563c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800563c:	b480      	push	{r7}
 800563e:	b095      	sub	sp, #84	; 0x54
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564c:	e853 3f00 	ldrex	r3, [r3]
 8005650:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005658:	64fb      	str	r3, [r7, #76]	; 0x4c
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005662:	643b      	str	r3, [r7, #64]	; 0x40
 8005664:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005668:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e6      	bne.n	8005644 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3308      	adds	r3, #8
 800567c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	61fb      	str	r3, [r7, #28]
   return(result);
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	f023 0301 	bic.w	r3, r3, #1
 800568c:	64bb      	str	r3, [r7, #72]	; 0x48
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3308      	adds	r3, #8
 8005694:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005696:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005698:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800569c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800569e:	e841 2300 	strex	r3, r2, [r1]
 80056a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1e5      	bne.n	8005676 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d118      	bne.n	80056e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	60bb      	str	r3, [r7, #8]
   return(result);
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f023 0310 	bic.w	r3, r3, #16
 80056c6:	647b      	str	r3, [r7, #68]	; 0x44
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056d0:	61bb      	str	r3, [r7, #24]
 80056d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	6979      	ldr	r1, [r7, #20]
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	e841 2300 	strex	r3, r2, [r1]
 80056dc:	613b      	str	r3, [r7, #16]
   return(result);
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e6      	bne.n	80056b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2220      	movs	r2, #32
 80056e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80056f6:	bf00      	nop
 80056f8:	3754      	adds	r7, #84	; 0x54
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f7ff fb3f 	bl	8004da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800572e:	b480      	push	{r7}
 8005730:	b08f      	sub	sp, #60	; 0x3c
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800573a:	2b21      	cmp	r3, #33	; 0x21
 800573c:	d14d      	bne.n	80057da <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d132      	bne.n	80057b0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	e853 3f00 	ldrex	r3, [r3]
 8005756:	61fb      	str	r3, [r7, #28]
   return(result);
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800575e:	637b      	str	r3, [r7, #52]	; 0x34
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	461a      	mov	r2, r3
 8005766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800576a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800576e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005770:	e841 2300 	strex	r3, r2, [r1]
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1e6      	bne.n	800574a <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	60bb      	str	r3, [r7, #8]
   return(result);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005790:	633b      	str	r3, [r7, #48]	; 0x30
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	461a      	mov	r2, r3
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579a:	61bb      	str	r3, [r7, #24]
 800579c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	6979      	ldr	r1, [r7, #20]
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	e841 2300 	strex	r3, r2, [r1]
 80057a6:	613b      	str	r3, [r7, #16]
   return(result);
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e6      	bne.n	800577c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80057ae:	e014      	b.n	80057da <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057b4:	781a      	ldrb	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	b292      	uxth	r2, r2
 80057bc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80057da:	bf00      	nop
 80057dc:	373c      	adds	r7, #60	; 0x3c
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b091      	sub	sp, #68	; 0x44
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057f2:	2b21      	cmp	r3, #33	; 0x21
 80057f4:	d151      	bne.n	800589a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d132      	bne.n	8005868 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	e853 3f00 	ldrex	r3, [r3]
 800580e:	623b      	str	r3, [r7, #32]
   return(result);
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005816:	63bb      	str	r3, [r7, #56]	; 0x38
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	461a      	mov	r2, r3
 800581e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005820:	633b      	str	r3, [r7, #48]	; 0x30
 8005822:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005828:	e841 2300 	strex	r3, r2, [r1]
 800582c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1e6      	bne.n	8005802 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	60fb      	str	r3, [r7, #12]
   return(result);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005848:	637b      	str	r3, [r7, #52]	; 0x34
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005852:	61fb      	str	r3, [r7, #28]
 8005854:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	69b9      	ldr	r1, [r7, #24]
 8005858:	69fa      	ldr	r2, [r7, #28]
 800585a:	e841 2300 	strex	r3, r2, [r1]
 800585e:	617b      	str	r3, [r7, #20]
   return(result);
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1e6      	bne.n	8005834 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005866:	e018      	b.n	800589a <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800586c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800586e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005870:	881a      	ldrh	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800587a:	b292      	uxth	r2, r2
 800587c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005882:	1c9a      	adds	r2, r3, #2
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800589a:	bf00      	nop
 800589c:	3744      	adds	r7, #68	; 0x44
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b088      	sub	sp, #32
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	e853 3f00 	ldrex	r3, [r3]
 80058ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058c2:	61fb      	str	r3, [r7, #28]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	461a      	mov	r2, r3
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	61bb      	str	r3, [r7, #24]
 80058ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d0:	6979      	ldr	r1, [r7, #20]
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	e841 2300 	strex	r3, r2, [r1]
 80058d8:	613b      	str	r3, [r7, #16]
   return(result);
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1e6      	bne.n	80058ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff fa4f 	bl	8004d90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058f2:	bf00      	nop
 80058f4:	3720      	adds	r7, #32
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b096      	sub	sp, #88	; 0x58
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005908:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005910:	2b22      	cmp	r3, #34	; 0x22
 8005912:	f040 8094 	bne.w	8005a3e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800591c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005920:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005924:	b2d9      	uxtb	r1, r3
 8005926:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800592a:	b2da      	uxtb	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005930:	400a      	ands	r2, r1
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005946:	b29b      	uxth	r3, r3
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d177      	bne.n	8005a4e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	e853 3f00 	ldrex	r3, [r3]
 800596a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005972:	653b      	str	r3, [r7, #80]	; 0x50
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	461a      	mov	r2, r3
 800597a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800597c:	647b      	str	r3, [r7, #68]	; 0x44
 800597e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005982:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005984:	e841 2300 	strex	r3, r2, [r1]
 8005988:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800598a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e6      	bne.n	800595e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3308      	adds	r3, #8
 8005996:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	e853 3f00 	ldrex	r3, [r3]
 800599e:	623b      	str	r3, [r7, #32]
   return(result);
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	f023 0301 	bic.w	r3, r3, #1
 80059a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3308      	adds	r3, #8
 80059ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059b0:	633a      	str	r2, [r7, #48]	; 0x30
 80059b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059b8:	e841 2300 	strex	r3, r2, [r1]
 80059bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1e5      	bne.n	8005990 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2220      	movs	r2, #32
 80059c8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d12e      	bne.n	8005a36 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	e853 3f00 	ldrex	r3, [r3]
 80059ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 0310 	bic.w	r3, r3, #16
 80059f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	461a      	mov	r2, r3
 80059fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059fc:	61fb      	str	r3, [r7, #28]
 80059fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a00:	69b9      	ldr	r1, [r7, #24]
 8005a02:	69fa      	ldr	r2, [r7, #28]
 8005a04:	e841 2300 	strex	r3, r2, [r1]
 8005a08:	617b      	str	r3, [r7, #20]
   return(result);
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e6      	bne.n	80059de <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f003 0310 	and.w	r3, r3, #16
 8005a1a:	2b10      	cmp	r3, #16
 8005a1c:	d103      	bne.n	8005a26 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2210      	movs	r2, #16
 8005a24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7ff f9c2 	bl	8004db8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a34:	e00b      	b.n	8005a4e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7fb fa00 	bl	8000e3c <HAL_UART_RxCpltCallback>
}
 8005a3c:	e007      	b.n	8005a4e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	699a      	ldr	r2, [r3, #24]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f042 0208 	orr.w	r2, r2, #8
 8005a4c:	619a      	str	r2, [r3, #24]
}
 8005a4e:	bf00      	nop
 8005a50:	3758      	adds	r7, #88	; 0x58
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b096      	sub	sp, #88	; 0x58
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a64:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a6c:	2b22      	cmp	r3, #34	; 0x22
 8005a6e:	f040 8094 	bne.w	8005b9a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a78:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a80:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005a82:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005a86:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a90:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a96:	1c9a      	adds	r2, r3, #2
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d177      	bne.n	8005baa <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac2:	e853 3f00 	ldrex	r3, [r3]
 8005ac6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad8:	643b      	str	r3, [r7, #64]	; 0x40
 8005ada:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005adc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ade:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ae0:	e841 2300 	strex	r3, r2, [r1]
 8005ae4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e6      	bne.n	8005aba <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3308      	adds	r3, #8
 8005af2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	e853 3f00 	ldrex	r3, [r3]
 8005afa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f023 0301 	bic.w	r3, r3, #1
 8005b02:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3308      	adds	r3, #8
 8005b0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e5      	bne.n	8005aec <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d12e      	bne.n	8005b92 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	e853 3f00 	ldrex	r3, [r3]
 8005b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f023 0310 	bic.w	r3, r3, #16
 8005b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	461a      	mov	r2, r3
 8005b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b58:	61bb      	str	r3, [r7, #24]
 8005b5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	6979      	ldr	r1, [r7, #20]
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	e841 2300 	strex	r3, r2, [r1]
 8005b64:	613b      	str	r3, [r7, #16]
   return(result);
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e6      	bne.n	8005b3a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	f003 0310 	and.w	r3, r3, #16
 8005b76:	2b10      	cmp	r3, #16
 8005b78:	d103      	bne.n	8005b82 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2210      	movs	r2, #16
 8005b80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b88:	4619      	mov	r1, r3
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff f914 	bl	8004db8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b90:	e00b      	b.n	8005baa <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7fb f952 	bl	8000e3c <HAL_UART_RxCpltCallback>
}
 8005b98:	e007      	b.n	8005baa <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699a      	ldr	r2, [r3, #24]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f042 0208 	orr.w	r2, r2, #8
 8005ba8:	619a      	str	r2, [r3, #24]
}
 8005baa:	bf00      	nop
 8005bac:	3758      	adds	r7, #88	; 0x58
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005bba:	bf00      	nop
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
	...

08005bc8 <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	4603      	mov	r3, r0
 8005bd0:	71fb      	strb	r3, [r7, #7]
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	71bb      	strb	r3, [r7, #6]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8005bda:	797b      	ldrb	r3, [r7, #5]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d901      	bls.n	8005be4 <tmc_fillCRC8Table+0x1c>
		return 0;
 8005be0:	2300      	movs	r3, #0
 8005be2:	e09e      	b.n	8005d22 <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 8005be4:	797a      	ldrb	r2, [r7, #5]
 8005be6:	4951      	ldr	r1, [pc, #324]	; (8005d2c <tmc_fillCRC8Table+0x164>)
 8005be8:	4613      	mov	r3, r2
 8005bea:	01db      	lsls	r3, r3, #7
 8005bec:	4413      	add	r3, r2
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	440b      	add	r3, r1
 8005bf2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005bf6:	79fa      	ldrb	r2, [r7, #7]
 8005bf8:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 8005bfa:	797a      	ldrb	r2, [r7, #5]
 8005bfc:	494b      	ldr	r1, [pc, #300]	; (8005d2c <tmc_fillCRC8Table+0x164>)
 8005bfe:	4613      	mov	r3, r2
 8005c00:	01db      	lsls	r3, r3, #7
 8005c02:	4413      	add	r3, r2
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	440b      	add	r3, r1
 8005c08:	f203 1301 	addw	r3, r3, #257	; 0x101
 8005c0c:	79ba      	ldrb	r2, [r7, #6]
 8005c0e:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 8005c10:	797a      	ldrb	r2, [r7, #5]
 8005c12:	4613      	mov	r3, r2
 8005c14:	01db      	lsls	r3, r3, #7
 8005c16:	4413      	add	r3, r2
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	4a44      	ldr	r2, [pc, #272]	; (8005d2c <tmc_fillCRC8Table+0x164>)
 8005c1c:	4413      	add	r3, r2
 8005c1e:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 8005c20:	79fb      	ldrb	r3, [r7, #7]
 8005c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c26:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8005c28:	4b41      	ldr	r3, [pc, #260]	; (8005d30 <tmc_fillCRC8Table+0x168>)
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	e074      	b.n	8005d18 <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 8005c2e:	79bb      	ldrb	r3, [r7, #6]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d004      	beq.n	8005c3e <tmc_fillCRC8Table+0x76>
 8005c34:	6978      	ldr	r0, [r7, #20]
 8005c36:	f000 f8f7 	bl	8005e28 <flipBitsInBytes>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	e000      	b.n	8005c40 <tmc_fillCRC8Table+0x78>
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 8005c42:	2300      	movs	r3, #0
 8005c44:	613b      	str	r3, [r7, #16]
 8005c46:	e035      	b.n	8005cb4 <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	0fdb      	lsrs	r3, r3, #31
 8005c4c:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <tmc_fillCRC8Table+0x9a>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	e000      	b.n	8005c64 <tmc_fillCRC8Table+0x9c>
 8005c62:	2300      	movs	r3, #0
 8005c64:	69fa      	ldr	r2, [r7, #28]
 8005c66:	4053      	eors	r3, r2
 8005c68:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <tmc_fillCRC8Table+0xb2>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	021b      	lsls	r3, r3, #8
 8005c78:	e000      	b.n	8005c7c <tmc_fillCRC8Table+0xb4>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	69fa      	ldr	r2, [r7, #28]
 8005c7e:	4053      	eors	r3, r2
 8005c80:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <tmc_fillCRC8Table+0xca>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	041b      	lsls	r3, r3, #16
 8005c90:	e000      	b.n	8005c94 <tmc_fillCRC8Table+0xcc>
 8005c92:	2300      	movs	r3, #0
 8005c94:	69fa      	ldr	r2, [r7, #28]
 8005c96:	4053      	eors	r3, r2
 8005c98:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 8005c9a:	7afb      	ldrb	r3, [r7, #11]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <tmc_fillCRC8Table+0xde>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	061b      	lsls	r3, r3, #24
 8005ca4:	e000      	b.n	8005ca8 <tmc_fillCRC8Table+0xe0>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	4053      	eors	r3, r2
 8005cac:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	613b      	str	r3, [r7, #16]
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	2b07      	cmp	r3, #7
 8005cb8:	ddc6      	ble.n	8005c48 <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 8005cba:	79bb      	ldrb	r3, [r7, #6]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d004      	beq.n	8005cca <tmc_fillCRC8Table+0x102>
 8005cc0:	69f8      	ldr	r0, [r7, #28]
 8005cc2:	f000 f8b1 	bl	8005e28 <flipBitsInBytes>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	e000      	b.n	8005ccc <tmc_fillCRC8Table+0x104>
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	61ba      	str	r2, [r7, #24]
 8005cd4:	69fa      	ldr	r2, [r7, #28]
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	0a1b      	lsrs	r3, r3, #8
 8005cde:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	61ba      	str	r2, [r7, #24]
 8005ce6:	69fa      	ldr	r2, [r7, #28]
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	0a1b      	lsrs	r3, r3, #8
 8005cf0:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	1c5a      	adds	r2, r3, #1
 8005cf6:	61ba      	str	r2, [r7, #24]
 8005cf8:	69fa      	ldr	r2, [r7, #28]
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	0a1b      	lsrs	r3, r3, #8
 8005d02:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	61ba      	str	r2, [r7, #24]
 8005d0a:	69fa      	ldr	r2, [r7, #28]
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 8005d16:	617b      	str	r3, [r7, #20]
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	4a06      	ldr	r2, [pc, #24]	; (8005d34 <tmc_fillCRC8Table+0x16c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d186      	bne.n	8005c2e <tmc_fillCRC8Table+0x66>
	}

	return 1;
 8005d20:	2301      	movs	r3, #1
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3720      	adds	r7, #32
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	200006dc 	.word	0x200006dc
 8005d30:	03020100 	.word	0x03020100
 8005d34:	04030200 	.word	0x04030200

08005d38 <tmc_CRC8>:
 *     uint8_t *data: A pointer to the data that will be CRC'd.
 *     uint32_t bytes: The length of the data buffer.
 *     uint8_t index: The index of the CRC table to be used.
 */
uint8_t tmc_CRC8(uint8_t *data, uint32_t bytes, uint8_t index)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	4613      	mov	r3, r2
 8005d44:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8005d46:	2300      	movs	r3, #0
 8005d48:	75fb      	strb	r3, [r7, #23]
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8005d4a:	79fb      	ldrb	r3, [r7, #7]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d901      	bls.n	8005d54 <tmc_CRC8+0x1c>
		return 0;
 8005d50:	2300      	movs	r3, #0
 8005d52:	e02c      	b.n	8005dae <tmc_CRC8+0x76>

	table = &CRCTables[index].table[0];
 8005d54:	79fa      	ldrb	r2, [r7, #7]
 8005d56:	4613      	mov	r3, r2
 8005d58:	01db      	lsls	r3, r3, #7
 8005d5a:	4413      	add	r3, r2
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	4a16      	ldr	r2, [pc, #88]	; (8005db8 <tmc_CRC8+0x80>)
 8005d60:	4413      	add	r3, r2
 8005d62:	613b      	str	r3, [r7, #16]

	while(bytes--)
 8005d64:	e00b      	b.n	8005d7e <tmc_CRC8+0x46>
		result = table[result ^ *data++];
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	60fa      	str	r2, [r7, #12]
 8005d6c:	781a      	ldrb	r2, [r3, #0]
 8005d6e:	7dfb      	ldrb	r3, [r7, #23]
 8005d70:	4053      	eors	r3, r2
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	461a      	mov	r2, r3
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	4413      	add	r3, r2
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	1e5a      	subs	r2, r3, #1
 8005d82:	60ba      	str	r2, [r7, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1ee      	bne.n	8005d66 <tmc_CRC8+0x2e>

	return (CRCTables[index].isReflected)? flipByte(result) : result;
 8005d88:	79fa      	ldrb	r2, [r7, #7]
 8005d8a:	490b      	ldr	r1, [pc, #44]	; (8005db8 <tmc_CRC8+0x80>)
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	01db      	lsls	r3, r3, #7
 8005d90:	4413      	add	r3, r2
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	440b      	add	r3, r1
 8005d96:	f203 1301 	addw	r3, r3, #257	; 0x101
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d005      	beq.n	8005dac <tmc_CRC8+0x74>
 8005da0:	7dfb      	ldrb	r3, [r7, #23]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 f80a 	bl	8005dbc <flipByte>
 8005da8:	4603      	mov	r3, r0
 8005daa:	e000      	b.n	8005dae <tmc_CRC8+0x76>
 8005dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	200006dc 	.word	0x200006dc

08005dbc <flipByte>:
	return CRCTables[index].isReflected;
}

// Helper functions
static uint8_t flipByte(uint8_t value)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	71fb      	strb	r3, [r7, #7]
	// swap odd and even bits
	value = ((value >> 1) & 0x55) | ((value & 0x55) << 1);
 8005dc6:	79fb      	ldrb	r3, [r7, #7]
 8005dc8:	085b      	lsrs	r3, r3, #1
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	b25b      	sxtb	r3, r3
 8005dce:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8005dd2:	b25a      	sxtb	r2, r3
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	b25b      	sxtb	r3, r3
 8005dda:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8005dde:	b25b      	sxtb	r3, r3
 8005de0:	4313      	orrs	r3, r2
 8005de2:	b25b      	sxtb	r3, r3
 8005de4:	71fb      	strb	r3, [r7, #7]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33) | ((value & 0x33) << 2);
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	089b      	lsrs	r3, r3, #2
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	b25b      	sxtb	r3, r3
 8005dee:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8005df2:	b25a      	sxtb	r2, r3
 8005df4:	79fb      	ldrb	r3, [r7, #7]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	b25b      	sxtb	r3, r3
 8005dfa:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8005dfe:	b25b      	sxtb	r3, r3
 8005e00:	4313      	orrs	r3, r2
 8005e02:	b25b      	sxtb	r3, r3
 8005e04:	71fb      	strb	r3, [r7, #7]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F) | ((value & 0x0F) << 4);
 8005e06:	79fb      	ldrb	r3, [r7, #7]
 8005e08:	091b      	lsrs	r3, r3, #4
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	b25a      	sxtb	r2, r3
 8005e0e:	79fb      	ldrb	r3, [r7, #7]
 8005e10:	011b      	lsls	r3, r3, #4
 8005e12:	b25b      	sxtb	r3, r3
 8005e14:	4313      	orrs	r3, r2
 8005e16:	b25b      	sxtb	r3, r3
 8005e18:	71fb      	strb	r3, [r7, #7]

	return value;
 8005e1a:	79fb      	ldrb	r3, [r7, #7]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	085b      	lsrs	r3, r3, #1
 8005e34:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	005b      	lsls	r3, r3, #1
 8005e3c:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8005e40:	4313      	orrs	r3, r2
 8005e42:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	089b      	lsrs	r3, r3, #2
 8005e48:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 8005e54:	4313      	orrs	r3, r2
 8005e56:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	091b      	lsrs	r3, r3, #4
 8005e5c:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	607b      	str	r3, [r7, #4]

	return value;
 8005e6c:	687b      	ldr	r3, [r7, #4]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <tmc2209_writeInt>:
// => CRC wrapper
extern uint8_t tmc2209_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2209_writeInt(TMC2209TypeDef *tmc2209, uint8_t address, int32_t value)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b086      	sub	sp, #24
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	60f8      	str	r0, [r7, #12]
 8005e82:	460b      	mov	r3, r1
 8005e84:	607a      	str	r2, [r7, #4]
 8005e86:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8];

	data[0] = 0x05;
 8005e88:	2305      	movs	r3, #5
 8005e8a:	743b      	strb	r3, [r7, #16]
	data[1] = tmc2209->slaveAddress;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8005e92:	747b      	strb	r3, [r7, #17]
	data[2] = address | TMC_WRITE_BIT;
 8005e94:	7afb      	ldrb	r3, [r7, #11]
 8005e96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	74bb      	strb	r3, [r7, #18]
	data[3] = (value >> 24) & 0xFF;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	0e1b      	lsrs	r3, r3, #24
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	74fb      	strb	r3, [r7, #19]
	data[4] = (value >> 16) & 0xFF;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	141b      	asrs	r3, r3, #16
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	753b      	strb	r3, [r7, #20]
	data[5] = (value >> 8 ) & 0xFF;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	121b      	asrs	r3, r3, #8
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	757b      	strb	r3, [r7, #21]
	data[6] = (value      ) & 0xFF;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	75bb      	strb	r3, [r7, #22]
	data[7] = tmc2209_CRC8(data, 7);
 8005ebc:	f107 0310 	add.w	r3, r7, #16
 8005ec0:	2107      	movs	r1, #7
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fa f9fc 	bl	80002c0 <tmc2209_CRC8>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	75fb      	strb	r3, [r7, #23]

	tmc2209_readWriteArray(tmc2209->config->channel, &data[0], 8, 0);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8005ed4:	f107 0110 	add.w	r1, r7, #16
 8005ed8:	2300      	movs	r3, #0
 8005eda:	2208      	movs	r2, #8
 8005edc:	f7fa f9c8 	bl	8000270 <tmc2209_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
 8005ee0:	7afb      	ldrb	r3, [r7, #11]
 8005ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ee6:	72fb      	strb	r3, [r7, #11]
	tmc2209->config->shadowRegister[address] = value;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	7afb      	ldrb	r3, [r7, #11]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	605a      	str	r2, [r3, #4]
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
 8005ef6:	7afb      	ldrb	r3, [r7, #11]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4413      	add	r3, r2
 8005efc:	f893 2204 	ldrb.w	r2, [r3, #516]	; 0x204
 8005f00:	7afb      	ldrb	r3, [r7, #11]
 8005f02:	f042 0208 	orr.w	r2, r2, #8
 8005f06:	b2d1      	uxtb	r1, r2
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	460a      	mov	r2, r1
 8005f0e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 8005f12:	bf00      	nop
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <tmc2209_readInt>:

int32_t tmc2209_readInt(TMC2209TypeDef *tmc2209, uint8_t address)
{
 8005f1a:	b590      	push	{r4, r7, lr}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	460b      	mov	r3, r1
 8005f24:	70fb      	strb	r3, [r7, #3]
	uint8_t data[8] = { 0 };
 8005f26:	2300      	movs	r3, #0
 8005f28:	60bb      	str	r3, [r7, #8]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60fb      	str	r3, [r7, #12]

	address = TMC_ADDRESS(address);
 8005f2e:	78fb      	ldrb	r3, [r7, #3]
 8005f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f34:	70fb      	strb	r3, [r7, #3]

	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
 8005f36:	78fb      	ldrb	r3, [r7, #3]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d106      	bne.n	8005f56 <tmc2209_readInt+0x3c>
		return tmc2209->config->shadowRegister[address];
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	78fb      	ldrb	r3, [r7, #3]
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	e03f      	b.n	8005fd6 <tmc2209_readInt+0xbc>

	data[0] = 0x05;
 8005f56:	2305      	movs	r3, #5
 8005f58:	723b      	strb	r3, [r7, #8]
	data[1] = tmc2209->slaveAddress;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8005f60:	727b      	strb	r3, [r7, #9]
	data[2] = address;
 8005f62:	78fb      	ldrb	r3, [r7, #3]
 8005f64:	72bb      	strb	r3, [r7, #10]
	data[3] = tmc2209_CRC8(data, 3);
 8005f66:	f107 0308 	add.w	r3, r7, #8
 8005f6a:	2103      	movs	r1, #3
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7fa f9a7 	bl	80002c0 <tmc2209_CRC8>
 8005f72:	4603      	mov	r3, r0
 8005f74:	72fb      	strb	r3, [r7, #11]

	tmc2209_readWriteArray(tmc2209->config->channel, data, 4, 8);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8005f7e:	f107 0108 	add.w	r1, r7, #8
 8005f82:	2308      	movs	r3, #8
 8005f84:	2204      	movs	r2, #4
 8005f86:	f7fa f973 	bl	8000270 <tmc2209_readWriteArray>

	// Byte 0: Sync nibble correct?
	if (data[0] != 0x05)
 8005f8a:	7a3b      	ldrb	r3, [r7, #8]
 8005f8c:	2b05      	cmp	r3, #5
 8005f8e:	d001      	beq.n	8005f94 <tmc2209_readInt+0x7a>
		return 0;
 8005f90:	2300      	movs	r3, #0
 8005f92:	e020      	b.n	8005fd6 <tmc2209_readInt+0xbc>

	// Byte 1: Master address correct?
	if (data[1] != 0xFF)
 8005f94:	7a7b      	ldrb	r3, [r7, #9]
 8005f96:	2bff      	cmp	r3, #255	; 0xff
 8005f98:	d001      	beq.n	8005f9e <tmc2209_readInt+0x84>
		return 0;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	e01b      	b.n	8005fd6 <tmc2209_readInt+0xbc>

	// Byte 2: Address correct?
	if (data[2] != address)
 8005f9e:	7abb      	ldrb	r3, [r7, #10]
 8005fa0:	78fa      	ldrb	r2, [r7, #3]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d001      	beq.n	8005faa <tmc2209_readInt+0x90>
		return 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	e015      	b.n	8005fd6 <tmc2209_readInt+0xbc>

	// Byte 7: CRC correct?
	if (data[7] != tmc2209_CRC8(data, 7))
 8005faa:	7bfc      	ldrb	r4, [r7, #15]
 8005fac:	f107 0308 	add.w	r3, r7, #8
 8005fb0:	2107      	movs	r1, #7
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fa f984 	bl	80002c0 <tmc2209_CRC8>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	429c      	cmp	r4, r3
 8005fbc:	d001      	beq.n	8005fc2 <tmc2209_readInt+0xa8>
		return 0;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	e009      	b.n	8005fd6 <tmc2209_readInt+0xbc>

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
 8005fc2:	7afb      	ldrb	r3, [r7, #11]
 8005fc4:	061a      	lsls	r2, r3, #24
 8005fc6:	7b3b      	ldrb	r3, [r7, #12]
 8005fc8:	041b      	lsls	r3, r3, #16
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	7b7a      	ldrb	r2, [r7, #13]
 8005fce:	0212      	lsls	r2, r2, #8
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	7bba      	ldrb	r2, [r7, #14]
 8005fd4:	4313      	orrs	r3, r2
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd90      	pop	{r4, r7, pc}
	...

08005fe0 <tmc2209_init>:

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	607b      	str	r3, [r7, #4]
 8005fea:	460b      	mov	r3, r1
 8005fec:	72fb      	strb	r3, [r7, #11]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	7aba      	ldrb	r2, [r7, #10]
 8005ff6:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2200      	movs	r2, #0
 8006006:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	7afa      	ldrb	r2, [r7, #11]
 8006010:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2200      	movs	r2, #0
 800601a:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2200      	movs	r2, #0
 8006022:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8006024:	2300      	movs	r3, #0
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e017      	b.n	800605a <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 800602a:	4a11      	ldr	r2, [pc, #68]	; (8006070 <tmc2209_init+0x90>)
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	4413      	add	r3, r2
 8006030:	7819      	ldrb	r1, [r3, #0]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	4413      	add	r3, r2
 8006038:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800603c:	460a      	mov	r2, r1
 800603e:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	6a3a      	ldr	r2, [r7, #32]
 8006046:	4413      	add	r3, r2
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68f9      	ldr	r1, [r7, #12]
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	440b      	add	r3, r1
 8006052:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	3301      	adds	r3, #1
 8006058:	617b      	str	r3, [r7, #20]
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2b7f      	cmp	r3, #127	; 0x7f
 800605e:	d9e4      	bls.n	800602a <tmc2209_init+0x4a>
	}
}
 8006060:	bf00      	nop
 8006062:	bf00      	nop
 8006064:	371c      	adds	r7, #28
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	08007844 	.word	0x08007844

08006074 <writeConfiguration>:

static void writeConfiguration(TMC2209TypeDef *tmc2209)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
	uint8_t *ptr = &tmc2209->config->configIndex;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3301      	adds	r3, #1
 8006082:	60bb      	str	r3, [r7, #8]
	const int32_t *settings;

	if(tmc2209->config->state == CONFIG_RESTORE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	2b02      	cmp	r3, #2
 800608c:	d131      	bne.n	80060f2 <writeConfiguration+0x7e>
	{
		settings = tmc2209->config->shadowRegister;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3304      	adds	r3, #4
 8006094:	60fb      	str	r3, [r7, #12]
		// Find the next restorable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8006096:	e005      	b.n	80060a4 <writeConfiguration+0x30>
		{
			(*ptr)++;
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	3301      	adds	r3, #1
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	b25b      	sxtb	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	db3b      	blt.n	8006126 <writeConfiguration+0xb2>
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4413      	add	r3, r2
 80060b8:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d0e9      	beq.n	8006098 <writeConfiguration+0x24>
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	461a      	mov	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4413      	add	r3, r2
 80060ce:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80060d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d025      	beq.n	8006126 <writeConfiguration+0xb2>
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4413      	add	r3, r2
 80060e4:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80060e8:	f003 0308 	and.w	r3, r3, #8
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d0d3      	beq.n	8006098 <writeConfiguration+0x24>
 80060f0:	e019      	b.n	8006126 <writeConfiguration+0xb2>
		}
	}
	else
	{
		settings = tmc2209->registerResetState;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	3304      	adds	r3, #4
 80060f6:	60fb      	str	r3, [r7, #12]
		// Find the next resettable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 80060f8:	e005      	b.n	8006106 <writeConfiguration+0x92>
		{
			(*ptr)++;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	3301      	adds	r3, #1
 8006100:	b2da      	uxtb	r2, r3
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	b25b      	sxtb	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	db0a      	blt.n	8006126 <writeConfiguration+0xb2>
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	461a      	mov	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4413      	add	r3, r2
 800611a:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800611e:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8006122:	2b02      	cmp	r3, #2
 8006124:	d1e9      	bne.n	80060fa <writeConfiguration+0x86>
		}
	}

	if(*ptr < TMC2209_REGISTER_COUNT)
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	b25b      	sxtb	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	db12      	blt.n	8006156 <writeConfiguration+0xe2>
	{
		tmc2209_writeInt(tmc2209, *ptr, settings[*ptr]);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	7819      	ldrb	r1, [r3, #0]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	4413      	add	r3, r2
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	461a      	mov	r2, r3
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7ff fe99 	bl	8005e7a <tmc2209_writeInt>
		(*ptr)++;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	3301      	adds	r3, #1
 800614e:	b2da      	uxtb	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	701a      	strb	r2, [r3, #0]
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
		}

		tmc2209->config->state = CONFIG_READY;
	}
}
 8006154:	e013      	b.n	800617e <writeConfiguration+0x10a>
		if(tmc2209->config->callback)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800615e:	2b00      	cmp	r3, #0
 8006160:	d009      	beq.n	8006176 <writeConfiguration+0x102>
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	6812      	ldr	r2, [r2, #0]
 800616e:	7812      	ldrb	r2, [r2, #0]
 8006170:	4611      	mov	r1, r2
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	4798      	blx	r3
		tmc2209->config->state = CONFIG_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2200      	movs	r2, #0
 800617c:	701a      	strb	r2, [r3, #0]
}
 800617e:	bf00      	nop
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <tmc2209_periodicJob>:

void tmc2209_periodicJob(TMC2209TypeDef *tmc2209, uint32_t tick)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b082      	sub	sp, #8
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	6039      	str	r1, [r7, #0]
	UNUSED(tick);

	if(tmc2209->config->state != CONFIG_READY)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <tmc2209_periodicJob+0x1c>
	{
		writeConfiguration(tmc2209);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7ff ff6a 	bl	8006074 <writeConfiguration>
		return;
 80061a0:	bf00      	nop
	}
}
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <tmc2209_reset>:
{
	tmc2209->config->callback = (tmc_callback_config) callback;
}

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <tmc2209_reset+0x16>
		return false;
 80061ba:	2300      	movs	r3, #0
 80061bc:	e028      	b.n	8006210 <tmc2209_reset+0x68>

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80061be:	2300      	movs	r3, #0
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	e019      	b.n	80061f8 <tmc2209_reset+0x50>
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	f023 0308 	bic.w	r3, r3, #8
 80061d4:	b2d9      	uxtb	r1, r3
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80061e0:	460a      	mov	r2, r1
 80061e2:	701a      	strb	r2, [r3, #0]
		tmc2209->config->shadowRegister[i] = 0;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	2200      	movs	r2, #0
 80061f0:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	3301      	adds	r3, #1
 80061f6:	60fb      	str	r3, [r7, #12]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2b7f      	cmp	r3, #127	; 0x7f
 80061fc:	d9e2      	bls.n	80061c4 <tmc2209_reset+0x1c>
	}

	tmc2209->config->state        = CONFIG_RESET;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2201      	movs	r2, #1
 8006204:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2200      	movs	r2, #0
 800620c:	705a      	strb	r2, [r3, #1]

	return true;
 800620e:	2301      	movs	r3, #1
}
 8006210:	4618      	mov	r0, r3
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <tmc2209_restore+0x16>
		return false;
 800622e:	2300      	movs	r3, #0
 8006230:	e008      	b.n	8006244 <tmc2209_restore+0x28>

	tmc2209->config->state        = CONFIG_RESTORE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2202      	movs	r2, #2
 8006238:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2200      	movs	r2, #0
 8006240:	705a      	strb	r2, [r3, #1]

	return true;
 8006242:	2301      	movs	r3, #1
}
 8006244:	4618      	mov	r0, r3
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <__errno>:
 8006250:	4b01      	ldr	r3, [pc, #4]	; (8006258 <__errno+0x8>)
 8006252:	6818      	ldr	r0, [r3, #0]
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	2000000c 	.word	0x2000000c

0800625c <__libc_init_array>:
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	4d0d      	ldr	r5, [pc, #52]	; (8006294 <__libc_init_array+0x38>)
 8006260:	4c0d      	ldr	r4, [pc, #52]	; (8006298 <__libc_init_array+0x3c>)
 8006262:	1b64      	subs	r4, r4, r5
 8006264:	10a4      	asrs	r4, r4, #2
 8006266:	2600      	movs	r6, #0
 8006268:	42a6      	cmp	r6, r4
 800626a:	d109      	bne.n	8006280 <__libc_init_array+0x24>
 800626c:	4d0b      	ldr	r5, [pc, #44]	; (800629c <__libc_init_array+0x40>)
 800626e:	4c0c      	ldr	r4, [pc, #48]	; (80062a0 <__libc_init_array+0x44>)
 8006270:	f001 f8fa 	bl	8007468 <_init>
 8006274:	1b64      	subs	r4, r4, r5
 8006276:	10a4      	asrs	r4, r4, #2
 8006278:	2600      	movs	r6, #0
 800627a:	42a6      	cmp	r6, r4
 800627c:	d105      	bne.n	800628a <__libc_init_array+0x2e>
 800627e:	bd70      	pop	{r4, r5, r6, pc}
 8006280:	f855 3b04 	ldr.w	r3, [r5], #4
 8006284:	4798      	blx	r3
 8006286:	3601      	adds	r6, #1
 8006288:	e7ee      	b.n	8006268 <__libc_init_array+0xc>
 800628a:	f855 3b04 	ldr.w	r3, [r5], #4
 800628e:	4798      	blx	r3
 8006290:	3601      	adds	r6, #1
 8006292:	e7f2      	b.n	800627a <__libc_init_array+0x1e>
 8006294:	0800795c 	.word	0x0800795c
 8006298:	0800795c 	.word	0x0800795c
 800629c:	0800795c 	.word	0x0800795c
 80062a0:	08007960 	.word	0x08007960

080062a4 <memset>:
 80062a4:	4402      	add	r2, r0
 80062a6:	4603      	mov	r3, r0
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d100      	bne.n	80062ae <memset+0xa>
 80062ac:	4770      	bx	lr
 80062ae:	f803 1b01 	strb.w	r1, [r3], #1
 80062b2:	e7f9      	b.n	80062a8 <memset+0x4>

080062b4 <iprintf>:
 80062b4:	b40f      	push	{r0, r1, r2, r3}
 80062b6:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <iprintf+0x2c>)
 80062b8:	b513      	push	{r0, r1, r4, lr}
 80062ba:	681c      	ldr	r4, [r3, #0]
 80062bc:	b124      	cbz	r4, 80062c8 <iprintf+0x14>
 80062be:	69a3      	ldr	r3, [r4, #24]
 80062c0:	b913      	cbnz	r3, 80062c8 <iprintf+0x14>
 80062c2:	4620      	mov	r0, r4
 80062c4:	f000 fb2c 	bl	8006920 <__sinit>
 80062c8:	ab05      	add	r3, sp, #20
 80062ca:	9a04      	ldr	r2, [sp, #16]
 80062cc:	68a1      	ldr	r1, [r4, #8]
 80062ce:	9301      	str	r3, [sp, #4]
 80062d0:	4620      	mov	r0, r4
 80062d2:	f000 fd3d 	bl	8006d50 <_vfiprintf_r>
 80062d6:	b002      	add	sp, #8
 80062d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062dc:	b004      	add	sp, #16
 80062de:	4770      	bx	lr
 80062e0:	2000000c 	.word	0x2000000c

080062e4 <_puts_r>:
 80062e4:	b570      	push	{r4, r5, r6, lr}
 80062e6:	460e      	mov	r6, r1
 80062e8:	4605      	mov	r5, r0
 80062ea:	b118      	cbz	r0, 80062f4 <_puts_r+0x10>
 80062ec:	6983      	ldr	r3, [r0, #24]
 80062ee:	b90b      	cbnz	r3, 80062f4 <_puts_r+0x10>
 80062f0:	f000 fb16 	bl	8006920 <__sinit>
 80062f4:	69ab      	ldr	r3, [r5, #24]
 80062f6:	68ac      	ldr	r4, [r5, #8]
 80062f8:	b913      	cbnz	r3, 8006300 <_puts_r+0x1c>
 80062fa:	4628      	mov	r0, r5
 80062fc:	f000 fb10 	bl	8006920 <__sinit>
 8006300:	4b2c      	ldr	r3, [pc, #176]	; (80063b4 <_puts_r+0xd0>)
 8006302:	429c      	cmp	r4, r3
 8006304:	d120      	bne.n	8006348 <_puts_r+0x64>
 8006306:	686c      	ldr	r4, [r5, #4]
 8006308:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800630a:	07db      	lsls	r3, r3, #31
 800630c:	d405      	bmi.n	800631a <_puts_r+0x36>
 800630e:	89a3      	ldrh	r3, [r4, #12]
 8006310:	0598      	lsls	r0, r3, #22
 8006312:	d402      	bmi.n	800631a <_puts_r+0x36>
 8006314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006316:	f000 fba1 	bl	8006a5c <__retarget_lock_acquire_recursive>
 800631a:	89a3      	ldrh	r3, [r4, #12]
 800631c:	0719      	lsls	r1, r3, #28
 800631e:	d51d      	bpl.n	800635c <_puts_r+0x78>
 8006320:	6923      	ldr	r3, [r4, #16]
 8006322:	b1db      	cbz	r3, 800635c <_puts_r+0x78>
 8006324:	3e01      	subs	r6, #1
 8006326:	68a3      	ldr	r3, [r4, #8]
 8006328:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800632c:	3b01      	subs	r3, #1
 800632e:	60a3      	str	r3, [r4, #8]
 8006330:	bb39      	cbnz	r1, 8006382 <_puts_r+0x9e>
 8006332:	2b00      	cmp	r3, #0
 8006334:	da38      	bge.n	80063a8 <_puts_r+0xc4>
 8006336:	4622      	mov	r2, r4
 8006338:	210a      	movs	r1, #10
 800633a:	4628      	mov	r0, r5
 800633c:	f000 f916 	bl	800656c <__swbuf_r>
 8006340:	3001      	adds	r0, #1
 8006342:	d011      	beq.n	8006368 <_puts_r+0x84>
 8006344:	250a      	movs	r5, #10
 8006346:	e011      	b.n	800636c <_puts_r+0x88>
 8006348:	4b1b      	ldr	r3, [pc, #108]	; (80063b8 <_puts_r+0xd4>)
 800634a:	429c      	cmp	r4, r3
 800634c:	d101      	bne.n	8006352 <_puts_r+0x6e>
 800634e:	68ac      	ldr	r4, [r5, #8]
 8006350:	e7da      	b.n	8006308 <_puts_r+0x24>
 8006352:	4b1a      	ldr	r3, [pc, #104]	; (80063bc <_puts_r+0xd8>)
 8006354:	429c      	cmp	r4, r3
 8006356:	bf08      	it	eq
 8006358:	68ec      	ldreq	r4, [r5, #12]
 800635a:	e7d5      	b.n	8006308 <_puts_r+0x24>
 800635c:	4621      	mov	r1, r4
 800635e:	4628      	mov	r0, r5
 8006360:	f000 f956 	bl	8006610 <__swsetup_r>
 8006364:	2800      	cmp	r0, #0
 8006366:	d0dd      	beq.n	8006324 <_puts_r+0x40>
 8006368:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800636c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800636e:	07da      	lsls	r2, r3, #31
 8006370:	d405      	bmi.n	800637e <_puts_r+0x9a>
 8006372:	89a3      	ldrh	r3, [r4, #12]
 8006374:	059b      	lsls	r3, r3, #22
 8006376:	d402      	bmi.n	800637e <_puts_r+0x9a>
 8006378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800637a:	f000 fb70 	bl	8006a5e <__retarget_lock_release_recursive>
 800637e:	4628      	mov	r0, r5
 8006380:	bd70      	pop	{r4, r5, r6, pc}
 8006382:	2b00      	cmp	r3, #0
 8006384:	da04      	bge.n	8006390 <_puts_r+0xac>
 8006386:	69a2      	ldr	r2, [r4, #24]
 8006388:	429a      	cmp	r2, r3
 800638a:	dc06      	bgt.n	800639a <_puts_r+0xb6>
 800638c:	290a      	cmp	r1, #10
 800638e:	d004      	beq.n	800639a <_puts_r+0xb6>
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	1c5a      	adds	r2, r3, #1
 8006394:	6022      	str	r2, [r4, #0]
 8006396:	7019      	strb	r1, [r3, #0]
 8006398:	e7c5      	b.n	8006326 <_puts_r+0x42>
 800639a:	4622      	mov	r2, r4
 800639c:	4628      	mov	r0, r5
 800639e:	f000 f8e5 	bl	800656c <__swbuf_r>
 80063a2:	3001      	adds	r0, #1
 80063a4:	d1bf      	bne.n	8006326 <_puts_r+0x42>
 80063a6:	e7df      	b.n	8006368 <_puts_r+0x84>
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	250a      	movs	r5, #10
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	6022      	str	r2, [r4, #0]
 80063b0:	701d      	strb	r5, [r3, #0]
 80063b2:	e7db      	b.n	800636c <_puts_r+0x88>
 80063b4:	080078e8 	.word	0x080078e8
 80063b8:	08007908 	.word	0x08007908
 80063bc:	080078c8 	.word	0x080078c8

080063c0 <puts>:
 80063c0:	4b02      	ldr	r3, [pc, #8]	; (80063cc <puts+0xc>)
 80063c2:	4601      	mov	r1, r0
 80063c4:	6818      	ldr	r0, [r3, #0]
 80063c6:	f7ff bf8d 	b.w	80062e4 <_puts_r>
 80063ca:	bf00      	nop
 80063cc:	2000000c 	.word	0x2000000c

080063d0 <setbuf>:
 80063d0:	2900      	cmp	r1, #0
 80063d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063d6:	bf0c      	ite	eq
 80063d8:	2202      	moveq	r2, #2
 80063da:	2200      	movne	r2, #0
 80063dc:	f000 b800 	b.w	80063e0 <setvbuf>

080063e0 <setvbuf>:
 80063e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80063e4:	461d      	mov	r5, r3
 80063e6:	4b5d      	ldr	r3, [pc, #372]	; (800655c <setvbuf+0x17c>)
 80063e8:	681f      	ldr	r7, [r3, #0]
 80063ea:	4604      	mov	r4, r0
 80063ec:	460e      	mov	r6, r1
 80063ee:	4690      	mov	r8, r2
 80063f0:	b127      	cbz	r7, 80063fc <setvbuf+0x1c>
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	b913      	cbnz	r3, 80063fc <setvbuf+0x1c>
 80063f6:	4638      	mov	r0, r7
 80063f8:	f000 fa92 	bl	8006920 <__sinit>
 80063fc:	4b58      	ldr	r3, [pc, #352]	; (8006560 <setvbuf+0x180>)
 80063fe:	429c      	cmp	r4, r3
 8006400:	d167      	bne.n	80064d2 <setvbuf+0xf2>
 8006402:	687c      	ldr	r4, [r7, #4]
 8006404:	f1b8 0f02 	cmp.w	r8, #2
 8006408:	d006      	beq.n	8006418 <setvbuf+0x38>
 800640a:	f1b8 0f01 	cmp.w	r8, #1
 800640e:	f200 809f 	bhi.w	8006550 <setvbuf+0x170>
 8006412:	2d00      	cmp	r5, #0
 8006414:	f2c0 809c 	blt.w	8006550 <setvbuf+0x170>
 8006418:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800641a:	07db      	lsls	r3, r3, #31
 800641c:	d405      	bmi.n	800642a <setvbuf+0x4a>
 800641e:	89a3      	ldrh	r3, [r4, #12]
 8006420:	0598      	lsls	r0, r3, #22
 8006422:	d402      	bmi.n	800642a <setvbuf+0x4a>
 8006424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006426:	f000 fb19 	bl	8006a5c <__retarget_lock_acquire_recursive>
 800642a:	4621      	mov	r1, r4
 800642c:	4638      	mov	r0, r7
 800642e:	f000 f9e3 	bl	80067f8 <_fflush_r>
 8006432:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006434:	b141      	cbz	r1, 8006448 <setvbuf+0x68>
 8006436:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800643a:	4299      	cmp	r1, r3
 800643c:	d002      	beq.n	8006444 <setvbuf+0x64>
 800643e:	4638      	mov	r0, r7
 8006440:	f000 fb7c 	bl	8006b3c <_free_r>
 8006444:	2300      	movs	r3, #0
 8006446:	6363      	str	r3, [r4, #52]	; 0x34
 8006448:	2300      	movs	r3, #0
 800644a:	61a3      	str	r3, [r4, #24]
 800644c:	6063      	str	r3, [r4, #4]
 800644e:	89a3      	ldrh	r3, [r4, #12]
 8006450:	0619      	lsls	r1, r3, #24
 8006452:	d503      	bpl.n	800645c <setvbuf+0x7c>
 8006454:	6921      	ldr	r1, [r4, #16]
 8006456:	4638      	mov	r0, r7
 8006458:	f000 fb70 	bl	8006b3c <_free_r>
 800645c:	89a3      	ldrh	r3, [r4, #12]
 800645e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006462:	f023 0303 	bic.w	r3, r3, #3
 8006466:	f1b8 0f02 	cmp.w	r8, #2
 800646a:	81a3      	strh	r3, [r4, #12]
 800646c:	d06c      	beq.n	8006548 <setvbuf+0x168>
 800646e:	ab01      	add	r3, sp, #4
 8006470:	466a      	mov	r2, sp
 8006472:	4621      	mov	r1, r4
 8006474:	4638      	mov	r0, r7
 8006476:	f000 faf3 	bl	8006a60 <__swhatbuf_r>
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	4318      	orrs	r0, r3
 800647e:	81a0      	strh	r0, [r4, #12]
 8006480:	2d00      	cmp	r5, #0
 8006482:	d130      	bne.n	80064e6 <setvbuf+0x106>
 8006484:	9d00      	ldr	r5, [sp, #0]
 8006486:	4628      	mov	r0, r5
 8006488:	f000 fb50 	bl	8006b2c <malloc>
 800648c:	4606      	mov	r6, r0
 800648e:	2800      	cmp	r0, #0
 8006490:	d155      	bne.n	800653e <setvbuf+0x15e>
 8006492:	f8dd 9000 	ldr.w	r9, [sp]
 8006496:	45a9      	cmp	r9, r5
 8006498:	d14a      	bne.n	8006530 <setvbuf+0x150>
 800649a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800649e:	2200      	movs	r2, #0
 80064a0:	60a2      	str	r2, [r4, #8]
 80064a2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80064a6:	6022      	str	r2, [r4, #0]
 80064a8:	6122      	str	r2, [r4, #16]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064b0:	6162      	str	r2, [r4, #20]
 80064b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064b4:	f043 0302 	orr.w	r3, r3, #2
 80064b8:	07d2      	lsls	r2, r2, #31
 80064ba:	81a3      	strh	r3, [r4, #12]
 80064bc:	d405      	bmi.n	80064ca <setvbuf+0xea>
 80064be:	f413 7f00 	tst.w	r3, #512	; 0x200
 80064c2:	d102      	bne.n	80064ca <setvbuf+0xea>
 80064c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064c6:	f000 faca 	bl	8006a5e <__retarget_lock_release_recursive>
 80064ca:	4628      	mov	r0, r5
 80064cc:	b003      	add	sp, #12
 80064ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064d2:	4b24      	ldr	r3, [pc, #144]	; (8006564 <setvbuf+0x184>)
 80064d4:	429c      	cmp	r4, r3
 80064d6:	d101      	bne.n	80064dc <setvbuf+0xfc>
 80064d8:	68bc      	ldr	r4, [r7, #8]
 80064da:	e793      	b.n	8006404 <setvbuf+0x24>
 80064dc:	4b22      	ldr	r3, [pc, #136]	; (8006568 <setvbuf+0x188>)
 80064de:	429c      	cmp	r4, r3
 80064e0:	bf08      	it	eq
 80064e2:	68fc      	ldreq	r4, [r7, #12]
 80064e4:	e78e      	b.n	8006404 <setvbuf+0x24>
 80064e6:	2e00      	cmp	r6, #0
 80064e8:	d0cd      	beq.n	8006486 <setvbuf+0xa6>
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	b913      	cbnz	r3, 80064f4 <setvbuf+0x114>
 80064ee:	4638      	mov	r0, r7
 80064f0:	f000 fa16 	bl	8006920 <__sinit>
 80064f4:	f1b8 0f01 	cmp.w	r8, #1
 80064f8:	bf08      	it	eq
 80064fa:	89a3      	ldrheq	r3, [r4, #12]
 80064fc:	6026      	str	r6, [r4, #0]
 80064fe:	bf04      	itt	eq
 8006500:	f043 0301 	orreq.w	r3, r3, #1
 8006504:	81a3      	strheq	r3, [r4, #12]
 8006506:	89a2      	ldrh	r2, [r4, #12]
 8006508:	f012 0308 	ands.w	r3, r2, #8
 800650c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006510:	d01c      	beq.n	800654c <setvbuf+0x16c>
 8006512:	07d3      	lsls	r3, r2, #31
 8006514:	bf41      	itttt	mi
 8006516:	2300      	movmi	r3, #0
 8006518:	426d      	negmi	r5, r5
 800651a:	60a3      	strmi	r3, [r4, #8]
 800651c:	61a5      	strmi	r5, [r4, #24]
 800651e:	bf58      	it	pl
 8006520:	60a5      	strpl	r5, [r4, #8]
 8006522:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006524:	f015 0501 	ands.w	r5, r5, #1
 8006528:	d115      	bne.n	8006556 <setvbuf+0x176>
 800652a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800652e:	e7c8      	b.n	80064c2 <setvbuf+0xe2>
 8006530:	4648      	mov	r0, r9
 8006532:	f000 fafb 	bl	8006b2c <malloc>
 8006536:	4606      	mov	r6, r0
 8006538:	2800      	cmp	r0, #0
 800653a:	d0ae      	beq.n	800649a <setvbuf+0xba>
 800653c:	464d      	mov	r5, r9
 800653e:	89a3      	ldrh	r3, [r4, #12]
 8006540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006544:	81a3      	strh	r3, [r4, #12]
 8006546:	e7d0      	b.n	80064ea <setvbuf+0x10a>
 8006548:	2500      	movs	r5, #0
 800654a:	e7a8      	b.n	800649e <setvbuf+0xbe>
 800654c:	60a3      	str	r3, [r4, #8]
 800654e:	e7e8      	b.n	8006522 <setvbuf+0x142>
 8006550:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006554:	e7b9      	b.n	80064ca <setvbuf+0xea>
 8006556:	2500      	movs	r5, #0
 8006558:	e7b7      	b.n	80064ca <setvbuf+0xea>
 800655a:	bf00      	nop
 800655c:	2000000c 	.word	0x2000000c
 8006560:	080078e8 	.word	0x080078e8
 8006564:	08007908 	.word	0x08007908
 8006568:	080078c8 	.word	0x080078c8

0800656c <__swbuf_r>:
 800656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656e:	460e      	mov	r6, r1
 8006570:	4614      	mov	r4, r2
 8006572:	4605      	mov	r5, r0
 8006574:	b118      	cbz	r0, 800657e <__swbuf_r+0x12>
 8006576:	6983      	ldr	r3, [r0, #24]
 8006578:	b90b      	cbnz	r3, 800657e <__swbuf_r+0x12>
 800657a:	f000 f9d1 	bl	8006920 <__sinit>
 800657e:	4b21      	ldr	r3, [pc, #132]	; (8006604 <__swbuf_r+0x98>)
 8006580:	429c      	cmp	r4, r3
 8006582:	d12b      	bne.n	80065dc <__swbuf_r+0x70>
 8006584:	686c      	ldr	r4, [r5, #4]
 8006586:	69a3      	ldr	r3, [r4, #24]
 8006588:	60a3      	str	r3, [r4, #8]
 800658a:	89a3      	ldrh	r3, [r4, #12]
 800658c:	071a      	lsls	r2, r3, #28
 800658e:	d52f      	bpl.n	80065f0 <__swbuf_r+0x84>
 8006590:	6923      	ldr	r3, [r4, #16]
 8006592:	b36b      	cbz	r3, 80065f0 <__swbuf_r+0x84>
 8006594:	6923      	ldr	r3, [r4, #16]
 8006596:	6820      	ldr	r0, [r4, #0]
 8006598:	1ac0      	subs	r0, r0, r3
 800659a:	6963      	ldr	r3, [r4, #20]
 800659c:	b2f6      	uxtb	r6, r6
 800659e:	4283      	cmp	r3, r0
 80065a0:	4637      	mov	r7, r6
 80065a2:	dc04      	bgt.n	80065ae <__swbuf_r+0x42>
 80065a4:	4621      	mov	r1, r4
 80065a6:	4628      	mov	r0, r5
 80065a8:	f000 f926 	bl	80067f8 <_fflush_r>
 80065ac:	bb30      	cbnz	r0, 80065fc <__swbuf_r+0x90>
 80065ae:	68a3      	ldr	r3, [r4, #8]
 80065b0:	3b01      	subs	r3, #1
 80065b2:	60a3      	str	r3, [r4, #8]
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	6022      	str	r2, [r4, #0]
 80065ba:	701e      	strb	r6, [r3, #0]
 80065bc:	6963      	ldr	r3, [r4, #20]
 80065be:	3001      	adds	r0, #1
 80065c0:	4283      	cmp	r3, r0
 80065c2:	d004      	beq.n	80065ce <__swbuf_r+0x62>
 80065c4:	89a3      	ldrh	r3, [r4, #12]
 80065c6:	07db      	lsls	r3, r3, #31
 80065c8:	d506      	bpl.n	80065d8 <__swbuf_r+0x6c>
 80065ca:	2e0a      	cmp	r6, #10
 80065cc:	d104      	bne.n	80065d8 <__swbuf_r+0x6c>
 80065ce:	4621      	mov	r1, r4
 80065d0:	4628      	mov	r0, r5
 80065d2:	f000 f911 	bl	80067f8 <_fflush_r>
 80065d6:	b988      	cbnz	r0, 80065fc <__swbuf_r+0x90>
 80065d8:	4638      	mov	r0, r7
 80065da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065dc:	4b0a      	ldr	r3, [pc, #40]	; (8006608 <__swbuf_r+0x9c>)
 80065de:	429c      	cmp	r4, r3
 80065e0:	d101      	bne.n	80065e6 <__swbuf_r+0x7a>
 80065e2:	68ac      	ldr	r4, [r5, #8]
 80065e4:	e7cf      	b.n	8006586 <__swbuf_r+0x1a>
 80065e6:	4b09      	ldr	r3, [pc, #36]	; (800660c <__swbuf_r+0xa0>)
 80065e8:	429c      	cmp	r4, r3
 80065ea:	bf08      	it	eq
 80065ec:	68ec      	ldreq	r4, [r5, #12]
 80065ee:	e7ca      	b.n	8006586 <__swbuf_r+0x1a>
 80065f0:	4621      	mov	r1, r4
 80065f2:	4628      	mov	r0, r5
 80065f4:	f000 f80c 	bl	8006610 <__swsetup_r>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d0cb      	beq.n	8006594 <__swbuf_r+0x28>
 80065fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006600:	e7ea      	b.n	80065d8 <__swbuf_r+0x6c>
 8006602:	bf00      	nop
 8006604:	080078e8 	.word	0x080078e8
 8006608:	08007908 	.word	0x08007908
 800660c:	080078c8 	.word	0x080078c8

08006610 <__swsetup_r>:
 8006610:	4b32      	ldr	r3, [pc, #200]	; (80066dc <__swsetup_r+0xcc>)
 8006612:	b570      	push	{r4, r5, r6, lr}
 8006614:	681d      	ldr	r5, [r3, #0]
 8006616:	4606      	mov	r6, r0
 8006618:	460c      	mov	r4, r1
 800661a:	b125      	cbz	r5, 8006626 <__swsetup_r+0x16>
 800661c:	69ab      	ldr	r3, [r5, #24]
 800661e:	b913      	cbnz	r3, 8006626 <__swsetup_r+0x16>
 8006620:	4628      	mov	r0, r5
 8006622:	f000 f97d 	bl	8006920 <__sinit>
 8006626:	4b2e      	ldr	r3, [pc, #184]	; (80066e0 <__swsetup_r+0xd0>)
 8006628:	429c      	cmp	r4, r3
 800662a:	d10f      	bne.n	800664c <__swsetup_r+0x3c>
 800662c:	686c      	ldr	r4, [r5, #4]
 800662e:	89a3      	ldrh	r3, [r4, #12]
 8006630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006634:	0719      	lsls	r1, r3, #28
 8006636:	d42c      	bmi.n	8006692 <__swsetup_r+0x82>
 8006638:	06dd      	lsls	r5, r3, #27
 800663a:	d411      	bmi.n	8006660 <__swsetup_r+0x50>
 800663c:	2309      	movs	r3, #9
 800663e:	6033      	str	r3, [r6, #0]
 8006640:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006644:	81a3      	strh	r3, [r4, #12]
 8006646:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800664a:	e03e      	b.n	80066ca <__swsetup_r+0xba>
 800664c:	4b25      	ldr	r3, [pc, #148]	; (80066e4 <__swsetup_r+0xd4>)
 800664e:	429c      	cmp	r4, r3
 8006650:	d101      	bne.n	8006656 <__swsetup_r+0x46>
 8006652:	68ac      	ldr	r4, [r5, #8]
 8006654:	e7eb      	b.n	800662e <__swsetup_r+0x1e>
 8006656:	4b24      	ldr	r3, [pc, #144]	; (80066e8 <__swsetup_r+0xd8>)
 8006658:	429c      	cmp	r4, r3
 800665a:	bf08      	it	eq
 800665c:	68ec      	ldreq	r4, [r5, #12]
 800665e:	e7e6      	b.n	800662e <__swsetup_r+0x1e>
 8006660:	0758      	lsls	r0, r3, #29
 8006662:	d512      	bpl.n	800668a <__swsetup_r+0x7a>
 8006664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006666:	b141      	cbz	r1, 800667a <__swsetup_r+0x6a>
 8006668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800666c:	4299      	cmp	r1, r3
 800666e:	d002      	beq.n	8006676 <__swsetup_r+0x66>
 8006670:	4630      	mov	r0, r6
 8006672:	f000 fa63 	bl	8006b3c <_free_r>
 8006676:	2300      	movs	r3, #0
 8006678:	6363      	str	r3, [r4, #52]	; 0x34
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006680:	81a3      	strh	r3, [r4, #12]
 8006682:	2300      	movs	r3, #0
 8006684:	6063      	str	r3, [r4, #4]
 8006686:	6923      	ldr	r3, [r4, #16]
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	89a3      	ldrh	r3, [r4, #12]
 800668c:	f043 0308 	orr.w	r3, r3, #8
 8006690:	81a3      	strh	r3, [r4, #12]
 8006692:	6923      	ldr	r3, [r4, #16]
 8006694:	b94b      	cbnz	r3, 80066aa <__swsetup_r+0x9a>
 8006696:	89a3      	ldrh	r3, [r4, #12]
 8006698:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800669c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066a0:	d003      	beq.n	80066aa <__swsetup_r+0x9a>
 80066a2:	4621      	mov	r1, r4
 80066a4:	4630      	mov	r0, r6
 80066a6:	f000 fa01 	bl	8006aac <__smakebuf_r>
 80066aa:	89a0      	ldrh	r0, [r4, #12]
 80066ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066b0:	f010 0301 	ands.w	r3, r0, #1
 80066b4:	d00a      	beq.n	80066cc <__swsetup_r+0xbc>
 80066b6:	2300      	movs	r3, #0
 80066b8:	60a3      	str	r3, [r4, #8]
 80066ba:	6963      	ldr	r3, [r4, #20]
 80066bc:	425b      	negs	r3, r3
 80066be:	61a3      	str	r3, [r4, #24]
 80066c0:	6923      	ldr	r3, [r4, #16]
 80066c2:	b943      	cbnz	r3, 80066d6 <__swsetup_r+0xc6>
 80066c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80066c8:	d1ba      	bne.n	8006640 <__swsetup_r+0x30>
 80066ca:	bd70      	pop	{r4, r5, r6, pc}
 80066cc:	0781      	lsls	r1, r0, #30
 80066ce:	bf58      	it	pl
 80066d0:	6963      	ldrpl	r3, [r4, #20]
 80066d2:	60a3      	str	r3, [r4, #8]
 80066d4:	e7f4      	b.n	80066c0 <__swsetup_r+0xb0>
 80066d6:	2000      	movs	r0, #0
 80066d8:	e7f7      	b.n	80066ca <__swsetup_r+0xba>
 80066da:	bf00      	nop
 80066dc:	2000000c 	.word	0x2000000c
 80066e0:	080078e8 	.word	0x080078e8
 80066e4:	08007908 	.word	0x08007908
 80066e8:	080078c8 	.word	0x080078c8

080066ec <__sflush_r>:
 80066ec:	898a      	ldrh	r2, [r1, #12]
 80066ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066f2:	4605      	mov	r5, r0
 80066f4:	0710      	lsls	r0, r2, #28
 80066f6:	460c      	mov	r4, r1
 80066f8:	d458      	bmi.n	80067ac <__sflush_r+0xc0>
 80066fa:	684b      	ldr	r3, [r1, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	dc05      	bgt.n	800670c <__sflush_r+0x20>
 8006700:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006702:	2b00      	cmp	r3, #0
 8006704:	dc02      	bgt.n	800670c <__sflush_r+0x20>
 8006706:	2000      	movs	r0, #0
 8006708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800670c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800670e:	2e00      	cmp	r6, #0
 8006710:	d0f9      	beq.n	8006706 <__sflush_r+0x1a>
 8006712:	2300      	movs	r3, #0
 8006714:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006718:	682f      	ldr	r7, [r5, #0]
 800671a:	602b      	str	r3, [r5, #0]
 800671c:	d032      	beq.n	8006784 <__sflush_r+0x98>
 800671e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006720:	89a3      	ldrh	r3, [r4, #12]
 8006722:	075a      	lsls	r2, r3, #29
 8006724:	d505      	bpl.n	8006732 <__sflush_r+0x46>
 8006726:	6863      	ldr	r3, [r4, #4]
 8006728:	1ac0      	subs	r0, r0, r3
 800672a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800672c:	b10b      	cbz	r3, 8006732 <__sflush_r+0x46>
 800672e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006730:	1ac0      	subs	r0, r0, r3
 8006732:	2300      	movs	r3, #0
 8006734:	4602      	mov	r2, r0
 8006736:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006738:	6a21      	ldr	r1, [r4, #32]
 800673a:	4628      	mov	r0, r5
 800673c:	47b0      	blx	r6
 800673e:	1c43      	adds	r3, r0, #1
 8006740:	89a3      	ldrh	r3, [r4, #12]
 8006742:	d106      	bne.n	8006752 <__sflush_r+0x66>
 8006744:	6829      	ldr	r1, [r5, #0]
 8006746:	291d      	cmp	r1, #29
 8006748:	d82c      	bhi.n	80067a4 <__sflush_r+0xb8>
 800674a:	4a2a      	ldr	r2, [pc, #168]	; (80067f4 <__sflush_r+0x108>)
 800674c:	40ca      	lsrs	r2, r1
 800674e:	07d6      	lsls	r6, r2, #31
 8006750:	d528      	bpl.n	80067a4 <__sflush_r+0xb8>
 8006752:	2200      	movs	r2, #0
 8006754:	6062      	str	r2, [r4, #4]
 8006756:	04d9      	lsls	r1, r3, #19
 8006758:	6922      	ldr	r2, [r4, #16]
 800675a:	6022      	str	r2, [r4, #0]
 800675c:	d504      	bpl.n	8006768 <__sflush_r+0x7c>
 800675e:	1c42      	adds	r2, r0, #1
 8006760:	d101      	bne.n	8006766 <__sflush_r+0x7a>
 8006762:	682b      	ldr	r3, [r5, #0]
 8006764:	b903      	cbnz	r3, 8006768 <__sflush_r+0x7c>
 8006766:	6560      	str	r0, [r4, #84]	; 0x54
 8006768:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800676a:	602f      	str	r7, [r5, #0]
 800676c:	2900      	cmp	r1, #0
 800676e:	d0ca      	beq.n	8006706 <__sflush_r+0x1a>
 8006770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006774:	4299      	cmp	r1, r3
 8006776:	d002      	beq.n	800677e <__sflush_r+0x92>
 8006778:	4628      	mov	r0, r5
 800677a:	f000 f9df 	bl	8006b3c <_free_r>
 800677e:	2000      	movs	r0, #0
 8006780:	6360      	str	r0, [r4, #52]	; 0x34
 8006782:	e7c1      	b.n	8006708 <__sflush_r+0x1c>
 8006784:	6a21      	ldr	r1, [r4, #32]
 8006786:	2301      	movs	r3, #1
 8006788:	4628      	mov	r0, r5
 800678a:	47b0      	blx	r6
 800678c:	1c41      	adds	r1, r0, #1
 800678e:	d1c7      	bne.n	8006720 <__sflush_r+0x34>
 8006790:	682b      	ldr	r3, [r5, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0c4      	beq.n	8006720 <__sflush_r+0x34>
 8006796:	2b1d      	cmp	r3, #29
 8006798:	d001      	beq.n	800679e <__sflush_r+0xb2>
 800679a:	2b16      	cmp	r3, #22
 800679c:	d101      	bne.n	80067a2 <__sflush_r+0xb6>
 800679e:	602f      	str	r7, [r5, #0]
 80067a0:	e7b1      	b.n	8006706 <__sflush_r+0x1a>
 80067a2:	89a3      	ldrh	r3, [r4, #12]
 80067a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067a8:	81a3      	strh	r3, [r4, #12]
 80067aa:	e7ad      	b.n	8006708 <__sflush_r+0x1c>
 80067ac:	690f      	ldr	r7, [r1, #16]
 80067ae:	2f00      	cmp	r7, #0
 80067b0:	d0a9      	beq.n	8006706 <__sflush_r+0x1a>
 80067b2:	0793      	lsls	r3, r2, #30
 80067b4:	680e      	ldr	r6, [r1, #0]
 80067b6:	bf08      	it	eq
 80067b8:	694b      	ldreq	r3, [r1, #20]
 80067ba:	600f      	str	r7, [r1, #0]
 80067bc:	bf18      	it	ne
 80067be:	2300      	movne	r3, #0
 80067c0:	eba6 0807 	sub.w	r8, r6, r7
 80067c4:	608b      	str	r3, [r1, #8]
 80067c6:	f1b8 0f00 	cmp.w	r8, #0
 80067ca:	dd9c      	ble.n	8006706 <__sflush_r+0x1a>
 80067cc:	6a21      	ldr	r1, [r4, #32]
 80067ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80067d0:	4643      	mov	r3, r8
 80067d2:	463a      	mov	r2, r7
 80067d4:	4628      	mov	r0, r5
 80067d6:	47b0      	blx	r6
 80067d8:	2800      	cmp	r0, #0
 80067da:	dc06      	bgt.n	80067ea <__sflush_r+0xfe>
 80067dc:	89a3      	ldrh	r3, [r4, #12]
 80067de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067e2:	81a3      	strh	r3, [r4, #12]
 80067e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067e8:	e78e      	b.n	8006708 <__sflush_r+0x1c>
 80067ea:	4407      	add	r7, r0
 80067ec:	eba8 0800 	sub.w	r8, r8, r0
 80067f0:	e7e9      	b.n	80067c6 <__sflush_r+0xda>
 80067f2:	bf00      	nop
 80067f4:	20400001 	.word	0x20400001

080067f8 <_fflush_r>:
 80067f8:	b538      	push	{r3, r4, r5, lr}
 80067fa:	690b      	ldr	r3, [r1, #16]
 80067fc:	4605      	mov	r5, r0
 80067fe:	460c      	mov	r4, r1
 8006800:	b913      	cbnz	r3, 8006808 <_fflush_r+0x10>
 8006802:	2500      	movs	r5, #0
 8006804:	4628      	mov	r0, r5
 8006806:	bd38      	pop	{r3, r4, r5, pc}
 8006808:	b118      	cbz	r0, 8006812 <_fflush_r+0x1a>
 800680a:	6983      	ldr	r3, [r0, #24]
 800680c:	b90b      	cbnz	r3, 8006812 <_fflush_r+0x1a>
 800680e:	f000 f887 	bl	8006920 <__sinit>
 8006812:	4b14      	ldr	r3, [pc, #80]	; (8006864 <_fflush_r+0x6c>)
 8006814:	429c      	cmp	r4, r3
 8006816:	d11b      	bne.n	8006850 <_fflush_r+0x58>
 8006818:	686c      	ldr	r4, [r5, #4]
 800681a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d0ef      	beq.n	8006802 <_fflush_r+0xa>
 8006822:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006824:	07d0      	lsls	r0, r2, #31
 8006826:	d404      	bmi.n	8006832 <_fflush_r+0x3a>
 8006828:	0599      	lsls	r1, r3, #22
 800682a:	d402      	bmi.n	8006832 <_fflush_r+0x3a>
 800682c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800682e:	f000 f915 	bl	8006a5c <__retarget_lock_acquire_recursive>
 8006832:	4628      	mov	r0, r5
 8006834:	4621      	mov	r1, r4
 8006836:	f7ff ff59 	bl	80066ec <__sflush_r>
 800683a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800683c:	07da      	lsls	r2, r3, #31
 800683e:	4605      	mov	r5, r0
 8006840:	d4e0      	bmi.n	8006804 <_fflush_r+0xc>
 8006842:	89a3      	ldrh	r3, [r4, #12]
 8006844:	059b      	lsls	r3, r3, #22
 8006846:	d4dd      	bmi.n	8006804 <_fflush_r+0xc>
 8006848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800684a:	f000 f908 	bl	8006a5e <__retarget_lock_release_recursive>
 800684e:	e7d9      	b.n	8006804 <_fflush_r+0xc>
 8006850:	4b05      	ldr	r3, [pc, #20]	; (8006868 <_fflush_r+0x70>)
 8006852:	429c      	cmp	r4, r3
 8006854:	d101      	bne.n	800685a <_fflush_r+0x62>
 8006856:	68ac      	ldr	r4, [r5, #8]
 8006858:	e7df      	b.n	800681a <_fflush_r+0x22>
 800685a:	4b04      	ldr	r3, [pc, #16]	; (800686c <_fflush_r+0x74>)
 800685c:	429c      	cmp	r4, r3
 800685e:	bf08      	it	eq
 8006860:	68ec      	ldreq	r4, [r5, #12]
 8006862:	e7da      	b.n	800681a <_fflush_r+0x22>
 8006864:	080078e8 	.word	0x080078e8
 8006868:	08007908 	.word	0x08007908
 800686c:	080078c8 	.word	0x080078c8

08006870 <std>:
 8006870:	2300      	movs	r3, #0
 8006872:	b510      	push	{r4, lr}
 8006874:	4604      	mov	r4, r0
 8006876:	e9c0 3300 	strd	r3, r3, [r0]
 800687a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800687e:	6083      	str	r3, [r0, #8]
 8006880:	8181      	strh	r1, [r0, #12]
 8006882:	6643      	str	r3, [r0, #100]	; 0x64
 8006884:	81c2      	strh	r2, [r0, #14]
 8006886:	6183      	str	r3, [r0, #24]
 8006888:	4619      	mov	r1, r3
 800688a:	2208      	movs	r2, #8
 800688c:	305c      	adds	r0, #92	; 0x5c
 800688e:	f7ff fd09 	bl	80062a4 <memset>
 8006892:	4b05      	ldr	r3, [pc, #20]	; (80068a8 <std+0x38>)
 8006894:	6263      	str	r3, [r4, #36]	; 0x24
 8006896:	4b05      	ldr	r3, [pc, #20]	; (80068ac <std+0x3c>)
 8006898:	62a3      	str	r3, [r4, #40]	; 0x28
 800689a:	4b05      	ldr	r3, [pc, #20]	; (80068b0 <std+0x40>)
 800689c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800689e:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <std+0x44>)
 80068a0:	6224      	str	r4, [r4, #32]
 80068a2:	6323      	str	r3, [r4, #48]	; 0x30
 80068a4:	bd10      	pop	{r4, pc}
 80068a6:	bf00      	nop
 80068a8:	080072f9 	.word	0x080072f9
 80068ac:	0800731b 	.word	0x0800731b
 80068b0:	08007353 	.word	0x08007353
 80068b4:	08007377 	.word	0x08007377

080068b8 <_cleanup_r>:
 80068b8:	4901      	ldr	r1, [pc, #4]	; (80068c0 <_cleanup_r+0x8>)
 80068ba:	f000 b8af 	b.w	8006a1c <_fwalk_reent>
 80068be:	bf00      	nop
 80068c0:	080067f9 	.word	0x080067f9

080068c4 <__sfmoreglue>:
 80068c4:	b570      	push	{r4, r5, r6, lr}
 80068c6:	2268      	movs	r2, #104	; 0x68
 80068c8:	1e4d      	subs	r5, r1, #1
 80068ca:	4355      	muls	r5, r2
 80068cc:	460e      	mov	r6, r1
 80068ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80068d2:	f000 f99f 	bl	8006c14 <_malloc_r>
 80068d6:	4604      	mov	r4, r0
 80068d8:	b140      	cbz	r0, 80068ec <__sfmoreglue+0x28>
 80068da:	2100      	movs	r1, #0
 80068dc:	e9c0 1600 	strd	r1, r6, [r0]
 80068e0:	300c      	adds	r0, #12
 80068e2:	60a0      	str	r0, [r4, #8]
 80068e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068e8:	f7ff fcdc 	bl	80062a4 <memset>
 80068ec:	4620      	mov	r0, r4
 80068ee:	bd70      	pop	{r4, r5, r6, pc}

080068f0 <__sfp_lock_acquire>:
 80068f0:	4801      	ldr	r0, [pc, #4]	; (80068f8 <__sfp_lock_acquire+0x8>)
 80068f2:	f000 b8b3 	b.w	8006a5c <__retarget_lock_acquire_recursive>
 80068f6:	bf00      	nop
 80068f8:	200008e1 	.word	0x200008e1

080068fc <__sfp_lock_release>:
 80068fc:	4801      	ldr	r0, [pc, #4]	; (8006904 <__sfp_lock_release+0x8>)
 80068fe:	f000 b8ae 	b.w	8006a5e <__retarget_lock_release_recursive>
 8006902:	bf00      	nop
 8006904:	200008e1 	.word	0x200008e1

08006908 <__sinit_lock_acquire>:
 8006908:	4801      	ldr	r0, [pc, #4]	; (8006910 <__sinit_lock_acquire+0x8>)
 800690a:	f000 b8a7 	b.w	8006a5c <__retarget_lock_acquire_recursive>
 800690e:	bf00      	nop
 8006910:	200008e2 	.word	0x200008e2

08006914 <__sinit_lock_release>:
 8006914:	4801      	ldr	r0, [pc, #4]	; (800691c <__sinit_lock_release+0x8>)
 8006916:	f000 b8a2 	b.w	8006a5e <__retarget_lock_release_recursive>
 800691a:	bf00      	nop
 800691c:	200008e2 	.word	0x200008e2

08006920 <__sinit>:
 8006920:	b510      	push	{r4, lr}
 8006922:	4604      	mov	r4, r0
 8006924:	f7ff fff0 	bl	8006908 <__sinit_lock_acquire>
 8006928:	69a3      	ldr	r3, [r4, #24]
 800692a:	b11b      	cbz	r3, 8006934 <__sinit+0x14>
 800692c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006930:	f7ff bff0 	b.w	8006914 <__sinit_lock_release>
 8006934:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006938:	6523      	str	r3, [r4, #80]	; 0x50
 800693a:	4b13      	ldr	r3, [pc, #76]	; (8006988 <__sinit+0x68>)
 800693c:	4a13      	ldr	r2, [pc, #76]	; (800698c <__sinit+0x6c>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	62a2      	str	r2, [r4, #40]	; 0x28
 8006942:	42a3      	cmp	r3, r4
 8006944:	bf04      	itt	eq
 8006946:	2301      	moveq	r3, #1
 8006948:	61a3      	streq	r3, [r4, #24]
 800694a:	4620      	mov	r0, r4
 800694c:	f000 f820 	bl	8006990 <__sfp>
 8006950:	6060      	str	r0, [r4, #4]
 8006952:	4620      	mov	r0, r4
 8006954:	f000 f81c 	bl	8006990 <__sfp>
 8006958:	60a0      	str	r0, [r4, #8]
 800695a:	4620      	mov	r0, r4
 800695c:	f000 f818 	bl	8006990 <__sfp>
 8006960:	2200      	movs	r2, #0
 8006962:	60e0      	str	r0, [r4, #12]
 8006964:	2104      	movs	r1, #4
 8006966:	6860      	ldr	r0, [r4, #4]
 8006968:	f7ff ff82 	bl	8006870 <std>
 800696c:	68a0      	ldr	r0, [r4, #8]
 800696e:	2201      	movs	r2, #1
 8006970:	2109      	movs	r1, #9
 8006972:	f7ff ff7d 	bl	8006870 <std>
 8006976:	68e0      	ldr	r0, [r4, #12]
 8006978:	2202      	movs	r2, #2
 800697a:	2112      	movs	r1, #18
 800697c:	f7ff ff78 	bl	8006870 <std>
 8006980:	2301      	movs	r3, #1
 8006982:	61a3      	str	r3, [r4, #24]
 8006984:	e7d2      	b.n	800692c <__sinit+0xc>
 8006986:	bf00      	nop
 8006988:	080078c4 	.word	0x080078c4
 800698c:	080068b9 	.word	0x080068b9

08006990 <__sfp>:
 8006990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006992:	4607      	mov	r7, r0
 8006994:	f7ff ffac 	bl	80068f0 <__sfp_lock_acquire>
 8006998:	4b1e      	ldr	r3, [pc, #120]	; (8006a14 <__sfp+0x84>)
 800699a:	681e      	ldr	r6, [r3, #0]
 800699c:	69b3      	ldr	r3, [r6, #24]
 800699e:	b913      	cbnz	r3, 80069a6 <__sfp+0x16>
 80069a0:	4630      	mov	r0, r6
 80069a2:	f7ff ffbd 	bl	8006920 <__sinit>
 80069a6:	3648      	adds	r6, #72	; 0x48
 80069a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	d503      	bpl.n	80069b8 <__sfp+0x28>
 80069b0:	6833      	ldr	r3, [r6, #0]
 80069b2:	b30b      	cbz	r3, 80069f8 <__sfp+0x68>
 80069b4:	6836      	ldr	r6, [r6, #0]
 80069b6:	e7f7      	b.n	80069a8 <__sfp+0x18>
 80069b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80069bc:	b9d5      	cbnz	r5, 80069f4 <__sfp+0x64>
 80069be:	4b16      	ldr	r3, [pc, #88]	; (8006a18 <__sfp+0x88>)
 80069c0:	60e3      	str	r3, [r4, #12]
 80069c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80069c6:	6665      	str	r5, [r4, #100]	; 0x64
 80069c8:	f000 f847 	bl	8006a5a <__retarget_lock_init_recursive>
 80069cc:	f7ff ff96 	bl	80068fc <__sfp_lock_release>
 80069d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80069d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80069d8:	6025      	str	r5, [r4, #0]
 80069da:	61a5      	str	r5, [r4, #24]
 80069dc:	2208      	movs	r2, #8
 80069de:	4629      	mov	r1, r5
 80069e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069e4:	f7ff fc5e 	bl	80062a4 <memset>
 80069e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069f0:	4620      	mov	r0, r4
 80069f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069f4:	3468      	adds	r4, #104	; 0x68
 80069f6:	e7d9      	b.n	80069ac <__sfp+0x1c>
 80069f8:	2104      	movs	r1, #4
 80069fa:	4638      	mov	r0, r7
 80069fc:	f7ff ff62 	bl	80068c4 <__sfmoreglue>
 8006a00:	4604      	mov	r4, r0
 8006a02:	6030      	str	r0, [r6, #0]
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d1d5      	bne.n	80069b4 <__sfp+0x24>
 8006a08:	f7ff ff78 	bl	80068fc <__sfp_lock_release>
 8006a0c:	230c      	movs	r3, #12
 8006a0e:	603b      	str	r3, [r7, #0]
 8006a10:	e7ee      	b.n	80069f0 <__sfp+0x60>
 8006a12:	bf00      	nop
 8006a14:	080078c4 	.word	0x080078c4
 8006a18:	ffff0001 	.word	0xffff0001

08006a1c <_fwalk_reent>:
 8006a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a20:	4606      	mov	r6, r0
 8006a22:	4688      	mov	r8, r1
 8006a24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a28:	2700      	movs	r7, #0
 8006a2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a2e:	f1b9 0901 	subs.w	r9, r9, #1
 8006a32:	d505      	bpl.n	8006a40 <_fwalk_reent+0x24>
 8006a34:	6824      	ldr	r4, [r4, #0]
 8006a36:	2c00      	cmp	r4, #0
 8006a38:	d1f7      	bne.n	8006a2a <_fwalk_reent+0xe>
 8006a3a:	4638      	mov	r0, r7
 8006a3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a40:	89ab      	ldrh	r3, [r5, #12]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d907      	bls.n	8006a56 <_fwalk_reent+0x3a>
 8006a46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	d003      	beq.n	8006a56 <_fwalk_reent+0x3a>
 8006a4e:	4629      	mov	r1, r5
 8006a50:	4630      	mov	r0, r6
 8006a52:	47c0      	blx	r8
 8006a54:	4307      	orrs	r7, r0
 8006a56:	3568      	adds	r5, #104	; 0x68
 8006a58:	e7e9      	b.n	8006a2e <_fwalk_reent+0x12>

08006a5a <__retarget_lock_init_recursive>:
 8006a5a:	4770      	bx	lr

08006a5c <__retarget_lock_acquire_recursive>:
 8006a5c:	4770      	bx	lr

08006a5e <__retarget_lock_release_recursive>:
 8006a5e:	4770      	bx	lr

08006a60 <__swhatbuf_r>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	460e      	mov	r6, r1
 8006a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a68:	2900      	cmp	r1, #0
 8006a6a:	b096      	sub	sp, #88	; 0x58
 8006a6c:	4614      	mov	r4, r2
 8006a6e:	461d      	mov	r5, r3
 8006a70:	da08      	bge.n	8006a84 <__swhatbuf_r+0x24>
 8006a72:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	602a      	str	r2, [r5, #0]
 8006a7a:	061a      	lsls	r2, r3, #24
 8006a7c:	d410      	bmi.n	8006aa0 <__swhatbuf_r+0x40>
 8006a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a82:	e00e      	b.n	8006aa2 <__swhatbuf_r+0x42>
 8006a84:	466a      	mov	r2, sp
 8006a86:	f000 fc9d 	bl	80073c4 <_fstat_r>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	dbf1      	blt.n	8006a72 <__swhatbuf_r+0x12>
 8006a8e:	9a01      	ldr	r2, [sp, #4]
 8006a90:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a94:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a98:	425a      	negs	r2, r3
 8006a9a:	415a      	adcs	r2, r3
 8006a9c:	602a      	str	r2, [r5, #0]
 8006a9e:	e7ee      	b.n	8006a7e <__swhatbuf_r+0x1e>
 8006aa0:	2340      	movs	r3, #64	; 0x40
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	b016      	add	sp, #88	; 0x58
 8006aa8:	bd70      	pop	{r4, r5, r6, pc}
	...

08006aac <__smakebuf_r>:
 8006aac:	898b      	ldrh	r3, [r1, #12]
 8006aae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ab0:	079d      	lsls	r5, r3, #30
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	d507      	bpl.n	8006ac8 <__smakebuf_r+0x1c>
 8006ab8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	6123      	str	r3, [r4, #16]
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	6163      	str	r3, [r4, #20]
 8006ac4:	b002      	add	sp, #8
 8006ac6:	bd70      	pop	{r4, r5, r6, pc}
 8006ac8:	ab01      	add	r3, sp, #4
 8006aca:	466a      	mov	r2, sp
 8006acc:	f7ff ffc8 	bl	8006a60 <__swhatbuf_r>
 8006ad0:	9900      	ldr	r1, [sp, #0]
 8006ad2:	4605      	mov	r5, r0
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	f000 f89d 	bl	8006c14 <_malloc_r>
 8006ada:	b948      	cbnz	r0, 8006af0 <__smakebuf_r+0x44>
 8006adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ae0:	059a      	lsls	r2, r3, #22
 8006ae2:	d4ef      	bmi.n	8006ac4 <__smakebuf_r+0x18>
 8006ae4:	f023 0303 	bic.w	r3, r3, #3
 8006ae8:	f043 0302 	orr.w	r3, r3, #2
 8006aec:	81a3      	strh	r3, [r4, #12]
 8006aee:	e7e3      	b.n	8006ab8 <__smakebuf_r+0xc>
 8006af0:	4b0d      	ldr	r3, [pc, #52]	; (8006b28 <__smakebuf_r+0x7c>)
 8006af2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006af4:	89a3      	ldrh	r3, [r4, #12]
 8006af6:	6020      	str	r0, [r4, #0]
 8006af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006afc:	81a3      	strh	r3, [r4, #12]
 8006afe:	9b00      	ldr	r3, [sp, #0]
 8006b00:	6163      	str	r3, [r4, #20]
 8006b02:	9b01      	ldr	r3, [sp, #4]
 8006b04:	6120      	str	r0, [r4, #16]
 8006b06:	b15b      	cbz	r3, 8006b20 <__smakebuf_r+0x74>
 8006b08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	f000 fc6b 	bl	80073e8 <_isatty_r>
 8006b12:	b128      	cbz	r0, 8006b20 <__smakebuf_r+0x74>
 8006b14:	89a3      	ldrh	r3, [r4, #12]
 8006b16:	f023 0303 	bic.w	r3, r3, #3
 8006b1a:	f043 0301 	orr.w	r3, r3, #1
 8006b1e:	81a3      	strh	r3, [r4, #12]
 8006b20:	89a0      	ldrh	r0, [r4, #12]
 8006b22:	4305      	orrs	r5, r0
 8006b24:	81a5      	strh	r5, [r4, #12]
 8006b26:	e7cd      	b.n	8006ac4 <__smakebuf_r+0x18>
 8006b28:	080068b9 	.word	0x080068b9

08006b2c <malloc>:
 8006b2c:	4b02      	ldr	r3, [pc, #8]	; (8006b38 <malloc+0xc>)
 8006b2e:	4601      	mov	r1, r0
 8006b30:	6818      	ldr	r0, [r3, #0]
 8006b32:	f000 b86f 	b.w	8006c14 <_malloc_r>
 8006b36:	bf00      	nop
 8006b38:	2000000c 	.word	0x2000000c

08006b3c <_free_r>:
 8006b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b3e:	2900      	cmp	r1, #0
 8006b40:	d044      	beq.n	8006bcc <_free_r+0x90>
 8006b42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b46:	9001      	str	r0, [sp, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f1a1 0404 	sub.w	r4, r1, #4
 8006b4e:	bfb8      	it	lt
 8006b50:	18e4      	addlt	r4, r4, r3
 8006b52:	f000 fc6b 	bl	800742c <__malloc_lock>
 8006b56:	4a1e      	ldr	r2, [pc, #120]	; (8006bd0 <_free_r+0x94>)
 8006b58:	9801      	ldr	r0, [sp, #4]
 8006b5a:	6813      	ldr	r3, [r2, #0]
 8006b5c:	b933      	cbnz	r3, 8006b6c <_free_r+0x30>
 8006b5e:	6063      	str	r3, [r4, #4]
 8006b60:	6014      	str	r4, [r2, #0]
 8006b62:	b003      	add	sp, #12
 8006b64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b68:	f000 bc66 	b.w	8007438 <__malloc_unlock>
 8006b6c:	42a3      	cmp	r3, r4
 8006b6e:	d908      	bls.n	8006b82 <_free_r+0x46>
 8006b70:	6825      	ldr	r5, [r4, #0]
 8006b72:	1961      	adds	r1, r4, r5
 8006b74:	428b      	cmp	r3, r1
 8006b76:	bf01      	itttt	eq
 8006b78:	6819      	ldreq	r1, [r3, #0]
 8006b7a:	685b      	ldreq	r3, [r3, #4]
 8006b7c:	1949      	addeq	r1, r1, r5
 8006b7e:	6021      	streq	r1, [r4, #0]
 8006b80:	e7ed      	b.n	8006b5e <_free_r+0x22>
 8006b82:	461a      	mov	r2, r3
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	b10b      	cbz	r3, 8006b8c <_free_r+0x50>
 8006b88:	42a3      	cmp	r3, r4
 8006b8a:	d9fa      	bls.n	8006b82 <_free_r+0x46>
 8006b8c:	6811      	ldr	r1, [r2, #0]
 8006b8e:	1855      	adds	r5, r2, r1
 8006b90:	42a5      	cmp	r5, r4
 8006b92:	d10b      	bne.n	8006bac <_free_r+0x70>
 8006b94:	6824      	ldr	r4, [r4, #0]
 8006b96:	4421      	add	r1, r4
 8006b98:	1854      	adds	r4, r2, r1
 8006b9a:	42a3      	cmp	r3, r4
 8006b9c:	6011      	str	r1, [r2, #0]
 8006b9e:	d1e0      	bne.n	8006b62 <_free_r+0x26>
 8006ba0:	681c      	ldr	r4, [r3, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	6053      	str	r3, [r2, #4]
 8006ba6:	4421      	add	r1, r4
 8006ba8:	6011      	str	r1, [r2, #0]
 8006baa:	e7da      	b.n	8006b62 <_free_r+0x26>
 8006bac:	d902      	bls.n	8006bb4 <_free_r+0x78>
 8006bae:	230c      	movs	r3, #12
 8006bb0:	6003      	str	r3, [r0, #0]
 8006bb2:	e7d6      	b.n	8006b62 <_free_r+0x26>
 8006bb4:	6825      	ldr	r5, [r4, #0]
 8006bb6:	1961      	adds	r1, r4, r5
 8006bb8:	428b      	cmp	r3, r1
 8006bba:	bf04      	itt	eq
 8006bbc:	6819      	ldreq	r1, [r3, #0]
 8006bbe:	685b      	ldreq	r3, [r3, #4]
 8006bc0:	6063      	str	r3, [r4, #4]
 8006bc2:	bf04      	itt	eq
 8006bc4:	1949      	addeq	r1, r1, r5
 8006bc6:	6021      	streq	r1, [r4, #0]
 8006bc8:	6054      	str	r4, [r2, #4]
 8006bca:	e7ca      	b.n	8006b62 <_free_r+0x26>
 8006bcc:	b003      	add	sp, #12
 8006bce:	bd30      	pop	{r4, r5, pc}
 8006bd0:	200008e4 	.word	0x200008e4

08006bd4 <sbrk_aligned>:
 8006bd4:	b570      	push	{r4, r5, r6, lr}
 8006bd6:	4e0e      	ldr	r6, [pc, #56]	; (8006c10 <sbrk_aligned+0x3c>)
 8006bd8:	460c      	mov	r4, r1
 8006bda:	6831      	ldr	r1, [r6, #0]
 8006bdc:	4605      	mov	r5, r0
 8006bde:	b911      	cbnz	r1, 8006be6 <sbrk_aligned+0x12>
 8006be0:	f000 fb7a 	bl	80072d8 <_sbrk_r>
 8006be4:	6030      	str	r0, [r6, #0]
 8006be6:	4621      	mov	r1, r4
 8006be8:	4628      	mov	r0, r5
 8006bea:	f000 fb75 	bl	80072d8 <_sbrk_r>
 8006bee:	1c43      	adds	r3, r0, #1
 8006bf0:	d00a      	beq.n	8006c08 <sbrk_aligned+0x34>
 8006bf2:	1cc4      	adds	r4, r0, #3
 8006bf4:	f024 0403 	bic.w	r4, r4, #3
 8006bf8:	42a0      	cmp	r0, r4
 8006bfa:	d007      	beq.n	8006c0c <sbrk_aligned+0x38>
 8006bfc:	1a21      	subs	r1, r4, r0
 8006bfe:	4628      	mov	r0, r5
 8006c00:	f000 fb6a 	bl	80072d8 <_sbrk_r>
 8006c04:	3001      	adds	r0, #1
 8006c06:	d101      	bne.n	8006c0c <sbrk_aligned+0x38>
 8006c08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	bd70      	pop	{r4, r5, r6, pc}
 8006c10:	200008e8 	.word	0x200008e8

08006c14 <_malloc_r>:
 8006c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c18:	1ccd      	adds	r5, r1, #3
 8006c1a:	f025 0503 	bic.w	r5, r5, #3
 8006c1e:	3508      	adds	r5, #8
 8006c20:	2d0c      	cmp	r5, #12
 8006c22:	bf38      	it	cc
 8006c24:	250c      	movcc	r5, #12
 8006c26:	2d00      	cmp	r5, #0
 8006c28:	4607      	mov	r7, r0
 8006c2a:	db01      	blt.n	8006c30 <_malloc_r+0x1c>
 8006c2c:	42a9      	cmp	r1, r5
 8006c2e:	d905      	bls.n	8006c3c <_malloc_r+0x28>
 8006c30:	230c      	movs	r3, #12
 8006c32:	603b      	str	r3, [r7, #0]
 8006c34:	2600      	movs	r6, #0
 8006c36:	4630      	mov	r0, r6
 8006c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c3c:	4e2e      	ldr	r6, [pc, #184]	; (8006cf8 <_malloc_r+0xe4>)
 8006c3e:	f000 fbf5 	bl	800742c <__malloc_lock>
 8006c42:	6833      	ldr	r3, [r6, #0]
 8006c44:	461c      	mov	r4, r3
 8006c46:	bb34      	cbnz	r4, 8006c96 <_malloc_r+0x82>
 8006c48:	4629      	mov	r1, r5
 8006c4a:	4638      	mov	r0, r7
 8006c4c:	f7ff ffc2 	bl	8006bd4 <sbrk_aligned>
 8006c50:	1c43      	adds	r3, r0, #1
 8006c52:	4604      	mov	r4, r0
 8006c54:	d14d      	bne.n	8006cf2 <_malloc_r+0xde>
 8006c56:	6834      	ldr	r4, [r6, #0]
 8006c58:	4626      	mov	r6, r4
 8006c5a:	2e00      	cmp	r6, #0
 8006c5c:	d140      	bne.n	8006ce0 <_malloc_r+0xcc>
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	4631      	mov	r1, r6
 8006c62:	4638      	mov	r0, r7
 8006c64:	eb04 0803 	add.w	r8, r4, r3
 8006c68:	f000 fb36 	bl	80072d8 <_sbrk_r>
 8006c6c:	4580      	cmp	r8, r0
 8006c6e:	d13a      	bne.n	8006ce6 <_malloc_r+0xd2>
 8006c70:	6821      	ldr	r1, [r4, #0]
 8006c72:	3503      	adds	r5, #3
 8006c74:	1a6d      	subs	r5, r5, r1
 8006c76:	f025 0503 	bic.w	r5, r5, #3
 8006c7a:	3508      	adds	r5, #8
 8006c7c:	2d0c      	cmp	r5, #12
 8006c7e:	bf38      	it	cc
 8006c80:	250c      	movcc	r5, #12
 8006c82:	4629      	mov	r1, r5
 8006c84:	4638      	mov	r0, r7
 8006c86:	f7ff ffa5 	bl	8006bd4 <sbrk_aligned>
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	d02b      	beq.n	8006ce6 <_malloc_r+0xd2>
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	442b      	add	r3, r5
 8006c92:	6023      	str	r3, [r4, #0]
 8006c94:	e00e      	b.n	8006cb4 <_malloc_r+0xa0>
 8006c96:	6822      	ldr	r2, [r4, #0]
 8006c98:	1b52      	subs	r2, r2, r5
 8006c9a:	d41e      	bmi.n	8006cda <_malloc_r+0xc6>
 8006c9c:	2a0b      	cmp	r2, #11
 8006c9e:	d916      	bls.n	8006cce <_malloc_r+0xba>
 8006ca0:	1961      	adds	r1, r4, r5
 8006ca2:	42a3      	cmp	r3, r4
 8006ca4:	6025      	str	r5, [r4, #0]
 8006ca6:	bf18      	it	ne
 8006ca8:	6059      	strne	r1, [r3, #4]
 8006caa:	6863      	ldr	r3, [r4, #4]
 8006cac:	bf08      	it	eq
 8006cae:	6031      	streq	r1, [r6, #0]
 8006cb0:	5162      	str	r2, [r4, r5]
 8006cb2:	604b      	str	r3, [r1, #4]
 8006cb4:	4638      	mov	r0, r7
 8006cb6:	f104 060b 	add.w	r6, r4, #11
 8006cba:	f000 fbbd 	bl	8007438 <__malloc_unlock>
 8006cbe:	f026 0607 	bic.w	r6, r6, #7
 8006cc2:	1d23      	adds	r3, r4, #4
 8006cc4:	1af2      	subs	r2, r6, r3
 8006cc6:	d0b6      	beq.n	8006c36 <_malloc_r+0x22>
 8006cc8:	1b9b      	subs	r3, r3, r6
 8006cca:	50a3      	str	r3, [r4, r2]
 8006ccc:	e7b3      	b.n	8006c36 <_malloc_r+0x22>
 8006cce:	6862      	ldr	r2, [r4, #4]
 8006cd0:	42a3      	cmp	r3, r4
 8006cd2:	bf0c      	ite	eq
 8006cd4:	6032      	streq	r2, [r6, #0]
 8006cd6:	605a      	strne	r2, [r3, #4]
 8006cd8:	e7ec      	b.n	8006cb4 <_malloc_r+0xa0>
 8006cda:	4623      	mov	r3, r4
 8006cdc:	6864      	ldr	r4, [r4, #4]
 8006cde:	e7b2      	b.n	8006c46 <_malloc_r+0x32>
 8006ce0:	4634      	mov	r4, r6
 8006ce2:	6876      	ldr	r6, [r6, #4]
 8006ce4:	e7b9      	b.n	8006c5a <_malloc_r+0x46>
 8006ce6:	230c      	movs	r3, #12
 8006ce8:	603b      	str	r3, [r7, #0]
 8006cea:	4638      	mov	r0, r7
 8006cec:	f000 fba4 	bl	8007438 <__malloc_unlock>
 8006cf0:	e7a1      	b.n	8006c36 <_malloc_r+0x22>
 8006cf2:	6025      	str	r5, [r4, #0]
 8006cf4:	e7de      	b.n	8006cb4 <_malloc_r+0xa0>
 8006cf6:	bf00      	nop
 8006cf8:	200008e4 	.word	0x200008e4

08006cfc <__sfputc_r>:
 8006cfc:	6893      	ldr	r3, [r2, #8]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	b410      	push	{r4}
 8006d04:	6093      	str	r3, [r2, #8]
 8006d06:	da08      	bge.n	8006d1a <__sfputc_r+0x1e>
 8006d08:	6994      	ldr	r4, [r2, #24]
 8006d0a:	42a3      	cmp	r3, r4
 8006d0c:	db01      	blt.n	8006d12 <__sfputc_r+0x16>
 8006d0e:	290a      	cmp	r1, #10
 8006d10:	d103      	bne.n	8006d1a <__sfputc_r+0x1e>
 8006d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d16:	f7ff bc29 	b.w	800656c <__swbuf_r>
 8006d1a:	6813      	ldr	r3, [r2, #0]
 8006d1c:	1c58      	adds	r0, r3, #1
 8006d1e:	6010      	str	r0, [r2, #0]
 8006d20:	7019      	strb	r1, [r3, #0]
 8006d22:	4608      	mov	r0, r1
 8006d24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <__sfputs_r>:
 8006d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2c:	4606      	mov	r6, r0
 8006d2e:	460f      	mov	r7, r1
 8006d30:	4614      	mov	r4, r2
 8006d32:	18d5      	adds	r5, r2, r3
 8006d34:	42ac      	cmp	r4, r5
 8006d36:	d101      	bne.n	8006d3c <__sfputs_r+0x12>
 8006d38:	2000      	movs	r0, #0
 8006d3a:	e007      	b.n	8006d4c <__sfputs_r+0x22>
 8006d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d40:	463a      	mov	r2, r7
 8006d42:	4630      	mov	r0, r6
 8006d44:	f7ff ffda 	bl	8006cfc <__sfputc_r>
 8006d48:	1c43      	adds	r3, r0, #1
 8006d4a:	d1f3      	bne.n	8006d34 <__sfputs_r+0xa>
 8006d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d50 <_vfiprintf_r>:
 8006d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d54:	460d      	mov	r5, r1
 8006d56:	b09d      	sub	sp, #116	; 0x74
 8006d58:	4614      	mov	r4, r2
 8006d5a:	4698      	mov	r8, r3
 8006d5c:	4606      	mov	r6, r0
 8006d5e:	b118      	cbz	r0, 8006d68 <_vfiprintf_r+0x18>
 8006d60:	6983      	ldr	r3, [r0, #24]
 8006d62:	b90b      	cbnz	r3, 8006d68 <_vfiprintf_r+0x18>
 8006d64:	f7ff fddc 	bl	8006920 <__sinit>
 8006d68:	4b89      	ldr	r3, [pc, #548]	; (8006f90 <_vfiprintf_r+0x240>)
 8006d6a:	429d      	cmp	r5, r3
 8006d6c:	d11b      	bne.n	8006da6 <_vfiprintf_r+0x56>
 8006d6e:	6875      	ldr	r5, [r6, #4]
 8006d70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d72:	07d9      	lsls	r1, r3, #31
 8006d74:	d405      	bmi.n	8006d82 <_vfiprintf_r+0x32>
 8006d76:	89ab      	ldrh	r3, [r5, #12]
 8006d78:	059a      	lsls	r2, r3, #22
 8006d7a:	d402      	bmi.n	8006d82 <_vfiprintf_r+0x32>
 8006d7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d7e:	f7ff fe6d 	bl	8006a5c <__retarget_lock_acquire_recursive>
 8006d82:	89ab      	ldrh	r3, [r5, #12]
 8006d84:	071b      	lsls	r3, r3, #28
 8006d86:	d501      	bpl.n	8006d8c <_vfiprintf_r+0x3c>
 8006d88:	692b      	ldr	r3, [r5, #16]
 8006d8a:	b9eb      	cbnz	r3, 8006dc8 <_vfiprintf_r+0x78>
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	4630      	mov	r0, r6
 8006d90:	f7ff fc3e 	bl	8006610 <__swsetup_r>
 8006d94:	b1c0      	cbz	r0, 8006dc8 <_vfiprintf_r+0x78>
 8006d96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d98:	07dc      	lsls	r4, r3, #31
 8006d9a:	d50e      	bpl.n	8006dba <_vfiprintf_r+0x6a>
 8006d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006da0:	b01d      	add	sp, #116	; 0x74
 8006da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da6:	4b7b      	ldr	r3, [pc, #492]	; (8006f94 <_vfiprintf_r+0x244>)
 8006da8:	429d      	cmp	r5, r3
 8006daa:	d101      	bne.n	8006db0 <_vfiprintf_r+0x60>
 8006dac:	68b5      	ldr	r5, [r6, #8]
 8006dae:	e7df      	b.n	8006d70 <_vfiprintf_r+0x20>
 8006db0:	4b79      	ldr	r3, [pc, #484]	; (8006f98 <_vfiprintf_r+0x248>)
 8006db2:	429d      	cmp	r5, r3
 8006db4:	bf08      	it	eq
 8006db6:	68f5      	ldreq	r5, [r6, #12]
 8006db8:	e7da      	b.n	8006d70 <_vfiprintf_r+0x20>
 8006dba:	89ab      	ldrh	r3, [r5, #12]
 8006dbc:	0598      	lsls	r0, r3, #22
 8006dbe:	d4ed      	bmi.n	8006d9c <_vfiprintf_r+0x4c>
 8006dc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dc2:	f7ff fe4c 	bl	8006a5e <__retarget_lock_release_recursive>
 8006dc6:	e7e9      	b.n	8006d9c <_vfiprintf_r+0x4c>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	9309      	str	r3, [sp, #36]	; 0x24
 8006dcc:	2320      	movs	r3, #32
 8006dce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dd6:	2330      	movs	r3, #48	; 0x30
 8006dd8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006f9c <_vfiprintf_r+0x24c>
 8006ddc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006de0:	f04f 0901 	mov.w	r9, #1
 8006de4:	4623      	mov	r3, r4
 8006de6:	469a      	mov	sl, r3
 8006de8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dec:	b10a      	cbz	r2, 8006df2 <_vfiprintf_r+0xa2>
 8006dee:	2a25      	cmp	r2, #37	; 0x25
 8006df0:	d1f9      	bne.n	8006de6 <_vfiprintf_r+0x96>
 8006df2:	ebba 0b04 	subs.w	fp, sl, r4
 8006df6:	d00b      	beq.n	8006e10 <_vfiprintf_r+0xc0>
 8006df8:	465b      	mov	r3, fp
 8006dfa:	4622      	mov	r2, r4
 8006dfc:	4629      	mov	r1, r5
 8006dfe:	4630      	mov	r0, r6
 8006e00:	f7ff ff93 	bl	8006d2a <__sfputs_r>
 8006e04:	3001      	adds	r0, #1
 8006e06:	f000 80aa 	beq.w	8006f5e <_vfiprintf_r+0x20e>
 8006e0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e0c:	445a      	add	r2, fp
 8006e0e:	9209      	str	r2, [sp, #36]	; 0x24
 8006e10:	f89a 3000 	ldrb.w	r3, [sl]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 80a2 	beq.w	8006f5e <_vfiprintf_r+0x20e>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e24:	f10a 0a01 	add.w	sl, sl, #1
 8006e28:	9304      	str	r3, [sp, #16]
 8006e2a:	9307      	str	r3, [sp, #28]
 8006e2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e30:	931a      	str	r3, [sp, #104]	; 0x68
 8006e32:	4654      	mov	r4, sl
 8006e34:	2205      	movs	r2, #5
 8006e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e3a:	4858      	ldr	r0, [pc, #352]	; (8006f9c <_vfiprintf_r+0x24c>)
 8006e3c:	f7f9 f9c8 	bl	80001d0 <memchr>
 8006e40:	9a04      	ldr	r2, [sp, #16]
 8006e42:	b9d8      	cbnz	r0, 8006e7c <_vfiprintf_r+0x12c>
 8006e44:	06d1      	lsls	r1, r2, #27
 8006e46:	bf44      	itt	mi
 8006e48:	2320      	movmi	r3, #32
 8006e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e4e:	0713      	lsls	r3, r2, #28
 8006e50:	bf44      	itt	mi
 8006e52:	232b      	movmi	r3, #43	; 0x2b
 8006e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e58:	f89a 3000 	ldrb.w	r3, [sl]
 8006e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8006e5e:	d015      	beq.n	8006e8c <_vfiprintf_r+0x13c>
 8006e60:	9a07      	ldr	r2, [sp, #28]
 8006e62:	4654      	mov	r4, sl
 8006e64:	2000      	movs	r0, #0
 8006e66:	f04f 0c0a 	mov.w	ip, #10
 8006e6a:	4621      	mov	r1, r4
 8006e6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e70:	3b30      	subs	r3, #48	; 0x30
 8006e72:	2b09      	cmp	r3, #9
 8006e74:	d94e      	bls.n	8006f14 <_vfiprintf_r+0x1c4>
 8006e76:	b1b0      	cbz	r0, 8006ea6 <_vfiprintf_r+0x156>
 8006e78:	9207      	str	r2, [sp, #28]
 8006e7a:	e014      	b.n	8006ea6 <_vfiprintf_r+0x156>
 8006e7c:	eba0 0308 	sub.w	r3, r0, r8
 8006e80:	fa09 f303 	lsl.w	r3, r9, r3
 8006e84:	4313      	orrs	r3, r2
 8006e86:	9304      	str	r3, [sp, #16]
 8006e88:	46a2      	mov	sl, r4
 8006e8a:	e7d2      	b.n	8006e32 <_vfiprintf_r+0xe2>
 8006e8c:	9b03      	ldr	r3, [sp, #12]
 8006e8e:	1d19      	adds	r1, r3, #4
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	9103      	str	r1, [sp, #12]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	bfbb      	ittet	lt
 8006e98:	425b      	neglt	r3, r3
 8006e9a:	f042 0202 	orrlt.w	r2, r2, #2
 8006e9e:	9307      	strge	r3, [sp, #28]
 8006ea0:	9307      	strlt	r3, [sp, #28]
 8006ea2:	bfb8      	it	lt
 8006ea4:	9204      	strlt	r2, [sp, #16]
 8006ea6:	7823      	ldrb	r3, [r4, #0]
 8006ea8:	2b2e      	cmp	r3, #46	; 0x2e
 8006eaa:	d10c      	bne.n	8006ec6 <_vfiprintf_r+0x176>
 8006eac:	7863      	ldrb	r3, [r4, #1]
 8006eae:	2b2a      	cmp	r3, #42	; 0x2a
 8006eb0:	d135      	bne.n	8006f1e <_vfiprintf_r+0x1ce>
 8006eb2:	9b03      	ldr	r3, [sp, #12]
 8006eb4:	1d1a      	adds	r2, r3, #4
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	9203      	str	r2, [sp, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	bfb8      	it	lt
 8006ebe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006ec2:	3402      	adds	r4, #2
 8006ec4:	9305      	str	r3, [sp, #20]
 8006ec6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006fac <_vfiprintf_r+0x25c>
 8006eca:	7821      	ldrb	r1, [r4, #0]
 8006ecc:	2203      	movs	r2, #3
 8006ece:	4650      	mov	r0, sl
 8006ed0:	f7f9 f97e 	bl	80001d0 <memchr>
 8006ed4:	b140      	cbz	r0, 8006ee8 <_vfiprintf_r+0x198>
 8006ed6:	2340      	movs	r3, #64	; 0x40
 8006ed8:	eba0 000a 	sub.w	r0, r0, sl
 8006edc:	fa03 f000 	lsl.w	r0, r3, r0
 8006ee0:	9b04      	ldr	r3, [sp, #16]
 8006ee2:	4303      	orrs	r3, r0
 8006ee4:	3401      	adds	r4, #1
 8006ee6:	9304      	str	r3, [sp, #16]
 8006ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eec:	482c      	ldr	r0, [pc, #176]	; (8006fa0 <_vfiprintf_r+0x250>)
 8006eee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ef2:	2206      	movs	r2, #6
 8006ef4:	f7f9 f96c 	bl	80001d0 <memchr>
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	d03f      	beq.n	8006f7c <_vfiprintf_r+0x22c>
 8006efc:	4b29      	ldr	r3, [pc, #164]	; (8006fa4 <_vfiprintf_r+0x254>)
 8006efe:	bb1b      	cbnz	r3, 8006f48 <_vfiprintf_r+0x1f8>
 8006f00:	9b03      	ldr	r3, [sp, #12]
 8006f02:	3307      	adds	r3, #7
 8006f04:	f023 0307 	bic.w	r3, r3, #7
 8006f08:	3308      	adds	r3, #8
 8006f0a:	9303      	str	r3, [sp, #12]
 8006f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f0e:	443b      	add	r3, r7
 8006f10:	9309      	str	r3, [sp, #36]	; 0x24
 8006f12:	e767      	b.n	8006de4 <_vfiprintf_r+0x94>
 8006f14:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f18:	460c      	mov	r4, r1
 8006f1a:	2001      	movs	r0, #1
 8006f1c:	e7a5      	b.n	8006e6a <_vfiprintf_r+0x11a>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	3401      	adds	r4, #1
 8006f22:	9305      	str	r3, [sp, #20]
 8006f24:	4619      	mov	r1, r3
 8006f26:	f04f 0c0a 	mov.w	ip, #10
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f30:	3a30      	subs	r2, #48	; 0x30
 8006f32:	2a09      	cmp	r2, #9
 8006f34:	d903      	bls.n	8006f3e <_vfiprintf_r+0x1ee>
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d0c5      	beq.n	8006ec6 <_vfiprintf_r+0x176>
 8006f3a:	9105      	str	r1, [sp, #20]
 8006f3c:	e7c3      	b.n	8006ec6 <_vfiprintf_r+0x176>
 8006f3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f42:	4604      	mov	r4, r0
 8006f44:	2301      	movs	r3, #1
 8006f46:	e7f0      	b.n	8006f2a <_vfiprintf_r+0x1da>
 8006f48:	ab03      	add	r3, sp, #12
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	462a      	mov	r2, r5
 8006f4e:	4b16      	ldr	r3, [pc, #88]	; (8006fa8 <_vfiprintf_r+0x258>)
 8006f50:	a904      	add	r1, sp, #16
 8006f52:	4630      	mov	r0, r6
 8006f54:	f3af 8000 	nop.w
 8006f58:	4607      	mov	r7, r0
 8006f5a:	1c78      	adds	r0, r7, #1
 8006f5c:	d1d6      	bne.n	8006f0c <_vfiprintf_r+0x1bc>
 8006f5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f60:	07d9      	lsls	r1, r3, #31
 8006f62:	d405      	bmi.n	8006f70 <_vfiprintf_r+0x220>
 8006f64:	89ab      	ldrh	r3, [r5, #12]
 8006f66:	059a      	lsls	r2, r3, #22
 8006f68:	d402      	bmi.n	8006f70 <_vfiprintf_r+0x220>
 8006f6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f6c:	f7ff fd77 	bl	8006a5e <__retarget_lock_release_recursive>
 8006f70:	89ab      	ldrh	r3, [r5, #12]
 8006f72:	065b      	lsls	r3, r3, #25
 8006f74:	f53f af12 	bmi.w	8006d9c <_vfiprintf_r+0x4c>
 8006f78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f7a:	e711      	b.n	8006da0 <_vfiprintf_r+0x50>
 8006f7c:	ab03      	add	r3, sp, #12
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	462a      	mov	r2, r5
 8006f82:	4b09      	ldr	r3, [pc, #36]	; (8006fa8 <_vfiprintf_r+0x258>)
 8006f84:	a904      	add	r1, sp, #16
 8006f86:	4630      	mov	r0, r6
 8006f88:	f000 f880 	bl	800708c <_printf_i>
 8006f8c:	e7e4      	b.n	8006f58 <_vfiprintf_r+0x208>
 8006f8e:	bf00      	nop
 8006f90:	080078e8 	.word	0x080078e8
 8006f94:	08007908 	.word	0x08007908
 8006f98:	080078c8 	.word	0x080078c8
 8006f9c:	08007928 	.word	0x08007928
 8006fa0:	08007932 	.word	0x08007932
 8006fa4:	00000000 	.word	0x00000000
 8006fa8:	08006d2b 	.word	0x08006d2b
 8006fac:	0800792e 	.word	0x0800792e

08006fb0 <_printf_common>:
 8006fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb4:	4616      	mov	r6, r2
 8006fb6:	4699      	mov	r9, r3
 8006fb8:	688a      	ldr	r2, [r1, #8]
 8006fba:	690b      	ldr	r3, [r1, #16]
 8006fbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	bfb8      	it	lt
 8006fc4:	4613      	movlt	r3, r2
 8006fc6:	6033      	str	r3, [r6, #0]
 8006fc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fcc:	4607      	mov	r7, r0
 8006fce:	460c      	mov	r4, r1
 8006fd0:	b10a      	cbz	r2, 8006fd6 <_printf_common+0x26>
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	6033      	str	r3, [r6, #0]
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	0699      	lsls	r1, r3, #26
 8006fda:	bf42      	ittt	mi
 8006fdc:	6833      	ldrmi	r3, [r6, #0]
 8006fde:	3302      	addmi	r3, #2
 8006fe0:	6033      	strmi	r3, [r6, #0]
 8006fe2:	6825      	ldr	r5, [r4, #0]
 8006fe4:	f015 0506 	ands.w	r5, r5, #6
 8006fe8:	d106      	bne.n	8006ff8 <_printf_common+0x48>
 8006fea:	f104 0a19 	add.w	sl, r4, #25
 8006fee:	68e3      	ldr	r3, [r4, #12]
 8006ff0:	6832      	ldr	r2, [r6, #0]
 8006ff2:	1a9b      	subs	r3, r3, r2
 8006ff4:	42ab      	cmp	r3, r5
 8006ff6:	dc26      	bgt.n	8007046 <_printf_common+0x96>
 8006ff8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ffc:	1e13      	subs	r3, r2, #0
 8006ffe:	6822      	ldr	r2, [r4, #0]
 8007000:	bf18      	it	ne
 8007002:	2301      	movne	r3, #1
 8007004:	0692      	lsls	r2, r2, #26
 8007006:	d42b      	bmi.n	8007060 <_printf_common+0xb0>
 8007008:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800700c:	4649      	mov	r1, r9
 800700e:	4638      	mov	r0, r7
 8007010:	47c0      	blx	r8
 8007012:	3001      	adds	r0, #1
 8007014:	d01e      	beq.n	8007054 <_printf_common+0xa4>
 8007016:	6823      	ldr	r3, [r4, #0]
 8007018:	68e5      	ldr	r5, [r4, #12]
 800701a:	6832      	ldr	r2, [r6, #0]
 800701c:	f003 0306 	and.w	r3, r3, #6
 8007020:	2b04      	cmp	r3, #4
 8007022:	bf08      	it	eq
 8007024:	1aad      	subeq	r5, r5, r2
 8007026:	68a3      	ldr	r3, [r4, #8]
 8007028:	6922      	ldr	r2, [r4, #16]
 800702a:	bf0c      	ite	eq
 800702c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007030:	2500      	movne	r5, #0
 8007032:	4293      	cmp	r3, r2
 8007034:	bfc4      	itt	gt
 8007036:	1a9b      	subgt	r3, r3, r2
 8007038:	18ed      	addgt	r5, r5, r3
 800703a:	2600      	movs	r6, #0
 800703c:	341a      	adds	r4, #26
 800703e:	42b5      	cmp	r5, r6
 8007040:	d11a      	bne.n	8007078 <_printf_common+0xc8>
 8007042:	2000      	movs	r0, #0
 8007044:	e008      	b.n	8007058 <_printf_common+0xa8>
 8007046:	2301      	movs	r3, #1
 8007048:	4652      	mov	r2, sl
 800704a:	4649      	mov	r1, r9
 800704c:	4638      	mov	r0, r7
 800704e:	47c0      	blx	r8
 8007050:	3001      	adds	r0, #1
 8007052:	d103      	bne.n	800705c <_printf_common+0xac>
 8007054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800705c:	3501      	adds	r5, #1
 800705e:	e7c6      	b.n	8006fee <_printf_common+0x3e>
 8007060:	18e1      	adds	r1, r4, r3
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	2030      	movs	r0, #48	; 0x30
 8007066:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800706a:	4422      	add	r2, r4
 800706c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007070:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007074:	3302      	adds	r3, #2
 8007076:	e7c7      	b.n	8007008 <_printf_common+0x58>
 8007078:	2301      	movs	r3, #1
 800707a:	4622      	mov	r2, r4
 800707c:	4649      	mov	r1, r9
 800707e:	4638      	mov	r0, r7
 8007080:	47c0      	blx	r8
 8007082:	3001      	adds	r0, #1
 8007084:	d0e6      	beq.n	8007054 <_printf_common+0xa4>
 8007086:	3601      	adds	r6, #1
 8007088:	e7d9      	b.n	800703e <_printf_common+0x8e>
	...

0800708c <_printf_i>:
 800708c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007090:	7e0f      	ldrb	r7, [r1, #24]
 8007092:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007094:	2f78      	cmp	r7, #120	; 0x78
 8007096:	4691      	mov	r9, r2
 8007098:	4680      	mov	r8, r0
 800709a:	460c      	mov	r4, r1
 800709c:	469a      	mov	sl, r3
 800709e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070a2:	d807      	bhi.n	80070b4 <_printf_i+0x28>
 80070a4:	2f62      	cmp	r7, #98	; 0x62
 80070a6:	d80a      	bhi.n	80070be <_printf_i+0x32>
 80070a8:	2f00      	cmp	r7, #0
 80070aa:	f000 80d8 	beq.w	800725e <_printf_i+0x1d2>
 80070ae:	2f58      	cmp	r7, #88	; 0x58
 80070b0:	f000 80a3 	beq.w	80071fa <_printf_i+0x16e>
 80070b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070bc:	e03a      	b.n	8007134 <_printf_i+0xa8>
 80070be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070c2:	2b15      	cmp	r3, #21
 80070c4:	d8f6      	bhi.n	80070b4 <_printf_i+0x28>
 80070c6:	a101      	add	r1, pc, #4	; (adr r1, 80070cc <_printf_i+0x40>)
 80070c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070cc:	08007125 	.word	0x08007125
 80070d0:	08007139 	.word	0x08007139
 80070d4:	080070b5 	.word	0x080070b5
 80070d8:	080070b5 	.word	0x080070b5
 80070dc:	080070b5 	.word	0x080070b5
 80070e0:	080070b5 	.word	0x080070b5
 80070e4:	08007139 	.word	0x08007139
 80070e8:	080070b5 	.word	0x080070b5
 80070ec:	080070b5 	.word	0x080070b5
 80070f0:	080070b5 	.word	0x080070b5
 80070f4:	080070b5 	.word	0x080070b5
 80070f8:	08007245 	.word	0x08007245
 80070fc:	08007169 	.word	0x08007169
 8007100:	08007227 	.word	0x08007227
 8007104:	080070b5 	.word	0x080070b5
 8007108:	080070b5 	.word	0x080070b5
 800710c:	08007267 	.word	0x08007267
 8007110:	080070b5 	.word	0x080070b5
 8007114:	08007169 	.word	0x08007169
 8007118:	080070b5 	.word	0x080070b5
 800711c:	080070b5 	.word	0x080070b5
 8007120:	0800722f 	.word	0x0800722f
 8007124:	682b      	ldr	r3, [r5, #0]
 8007126:	1d1a      	adds	r2, r3, #4
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	602a      	str	r2, [r5, #0]
 800712c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007134:	2301      	movs	r3, #1
 8007136:	e0a3      	b.n	8007280 <_printf_i+0x1f4>
 8007138:	6820      	ldr	r0, [r4, #0]
 800713a:	6829      	ldr	r1, [r5, #0]
 800713c:	0606      	lsls	r6, r0, #24
 800713e:	f101 0304 	add.w	r3, r1, #4
 8007142:	d50a      	bpl.n	800715a <_printf_i+0xce>
 8007144:	680e      	ldr	r6, [r1, #0]
 8007146:	602b      	str	r3, [r5, #0]
 8007148:	2e00      	cmp	r6, #0
 800714a:	da03      	bge.n	8007154 <_printf_i+0xc8>
 800714c:	232d      	movs	r3, #45	; 0x2d
 800714e:	4276      	negs	r6, r6
 8007150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007154:	485e      	ldr	r0, [pc, #376]	; (80072d0 <_printf_i+0x244>)
 8007156:	230a      	movs	r3, #10
 8007158:	e019      	b.n	800718e <_printf_i+0x102>
 800715a:	680e      	ldr	r6, [r1, #0]
 800715c:	602b      	str	r3, [r5, #0]
 800715e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007162:	bf18      	it	ne
 8007164:	b236      	sxthne	r6, r6
 8007166:	e7ef      	b.n	8007148 <_printf_i+0xbc>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	6820      	ldr	r0, [r4, #0]
 800716c:	1d19      	adds	r1, r3, #4
 800716e:	6029      	str	r1, [r5, #0]
 8007170:	0601      	lsls	r1, r0, #24
 8007172:	d501      	bpl.n	8007178 <_printf_i+0xec>
 8007174:	681e      	ldr	r6, [r3, #0]
 8007176:	e002      	b.n	800717e <_printf_i+0xf2>
 8007178:	0646      	lsls	r6, r0, #25
 800717a:	d5fb      	bpl.n	8007174 <_printf_i+0xe8>
 800717c:	881e      	ldrh	r6, [r3, #0]
 800717e:	4854      	ldr	r0, [pc, #336]	; (80072d0 <_printf_i+0x244>)
 8007180:	2f6f      	cmp	r7, #111	; 0x6f
 8007182:	bf0c      	ite	eq
 8007184:	2308      	moveq	r3, #8
 8007186:	230a      	movne	r3, #10
 8007188:	2100      	movs	r1, #0
 800718a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800718e:	6865      	ldr	r5, [r4, #4]
 8007190:	60a5      	str	r5, [r4, #8]
 8007192:	2d00      	cmp	r5, #0
 8007194:	bfa2      	ittt	ge
 8007196:	6821      	ldrge	r1, [r4, #0]
 8007198:	f021 0104 	bicge.w	r1, r1, #4
 800719c:	6021      	strge	r1, [r4, #0]
 800719e:	b90e      	cbnz	r6, 80071a4 <_printf_i+0x118>
 80071a0:	2d00      	cmp	r5, #0
 80071a2:	d04d      	beq.n	8007240 <_printf_i+0x1b4>
 80071a4:	4615      	mov	r5, r2
 80071a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80071aa:	fb03 6711 	mls	r7, r3, r1, r6
 80071ae:	5dc7      	ldrb	r7, [r0, r7]
 80071b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071b4:	4637      	mov	r7, r6
 80071b6:	42bb      	cmp	r3, r7
 80071b8:	460e      	mov	r6, r1
 80071ba:	d9f4      	bls.n	80071a6 <_printf_i+0x11a>
 80071bc:	2b08      	cmp	r3, #8
 80071be:	d10b      	bne.n	80071d8 <_printf_i+0x14c>
 80071c0:	6823      	ldr	r3, [r4, #0]
 80071c2:	07de      	lsls	r6, r3, #31
 80071c4:	d508      	bpl.n	80071d8 <_printf_i+0x14c>
 80071c6:	6923      	ldr	r3, [r4, #16]
 80071c8:	6861      	ldr	r1, [r4, #4]
 80071ca:	4299      	cmp	r1, r3
 80071cc:	bfde      	ittt	le
 80071ce:	2330      	movle	r3, #48	; 0x30
 80071d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071d4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80071d8:	1b52      	subs	r2, r2, r5
 80071da:	6122      	str	r2, [r4, #16]
 80071dc:	f8cd a000 	str.w	sl, [sp]
 80071e0:	464b      	mov	r3, r9
 80071e2:	aa03      	add	r2, sp, #12
 80071e4:	4621      	mov	r1, r4
 80071e6:	4640      	mov	r0, r8
 80071e8:	f7ff fee2 	bl	8006fb0 <_printf_common>
 80071ec:	3001      	adds	r0, #1
 80071ee:	d14c      	bne.n	800728a <_printf_i+0x1fe>
 80071f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071f4:	b004      	add	sp, #16
 80071f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071fa:	4835      	ldr	r0, [pc, #212]	; (80072d0 <_printf_i+0x244>)
 80071fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007200:	6829      	ldr	r1, [r5, #0]
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	f851 6b04 	ldr.w	r6, [r1], #4
 8007208:	6029      	str	r1, [r5, #0]
 800720a:	061d      	lsls	r5, r3, #24
 800720c:	d514      	bpl.n	8007238 <_printf_i+0x1ac>
 800720e:	07df      	lsls	r7, r3, #31
 8007210:	bf44      	itt	mi
 8007212:	f043 0320 	orrmi.w	r3, r3, #32
 8007216:	6023      	strmi	r3, [r4, #0]
 8007218:	b91e      	cbnz	r6, 8007222 <_printf_i+0x196>
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	f023 0320 	bic.w	r3, r3, #32
 8007220:	6023      	str	r3, [r4, #0]
 8007222:	2310      	movs	r3, #16
 8007224:	e7b0      	b.n	8007188 <_printf_i+0xfc>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	f043 0320 	orr.w	r3, r3, #32
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	2378      	movs	r3, #120	; 0x78
 8007230:	4828      	ldr	r0, [pc, #160]	; (80072d4 <_printf_i+0x248>)
 8007232:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007236:	e7e3      	b.n	8007200 <_printf_i+0x174>
 8007238:	0659      	lsls	r1, r3, #25
 800723a:	bf48      	it	mi
 800723c:	b2b6      	uxthmi	r6, r6
 800723e:	e7e6      	b.n	800720e <_printf_i+0x182>
 8007240:	4615      	mov	r5, r2
 8007242:	e7bb      	b.n	80071bc <_printf_i+0x130>
 8007244:	682b      	ldr	r3, [r5, #0]
 8007246:	6826      	ldr	r6, [r4, #0]
 8007248:	6961      	ldr	r1, [r4, #20]
 800724a:	1d18      	adds	r0, r3, #4
 800724c:	6028      	str	r0, [r5, #0]
 800724e:	0635      	lsls	r5, r6, #24
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	d501      	bpl.n	8007258 <_printf_i+0x1cc>
 8007254:	6019      	str	r1, [r3, #0]
 8007256:	e002      	b.n	800725e <_printf_i+0x1d2>
 8007258:	0670      	lsls	r0, r6, #25
 800725a:	d5fb      	bpl.n	8007254 <_printf_i+0x1c8>
 800725c:	8019      	strh	r1, [r3, #0]
 800725e:	2300      	movs	r3, #0
 8007260:	6123      	str	r3, [r4, #16]
 8007262:	4615      	mov	r5, r2
 8007264:	e7ba      	b.n	80071dc <_printf_i+0x150>
 8007266:	682b      	ldr	r3, [r5, #0]
 8007268:	1d1a      	adds	r2, r3, #4
 800726a:	602a      	str	r2, [r5, #0]
 800726c:	681d      	ldr	r5, [r3, #0]
 800726e:	6862      	ldr	r2, [r4, #4]
 8007270:	2100      	movs	r1, #0
 8007272:	4628      	mov	r0, r5
 8007274:	f7f8 ffac 	bl	80001d0 <memchr>
 8007278:	b108      	cbz	r0, 800727e <_printf_i+0x1f2>
 800727a:	1b40      	subs	r0, r0, r5
 800727c:	6060      	str	r0, [r4, #4]
 800727e:	6863      	ldr	r3, [r4, #4]
 8007280:	6123      	str	r3, [r4, #16]
 8007282:	2300      	movs	r3, #0
 8007284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007288:	e7a8      	b.n	80071dc <_printf_i+0x150>
 800728a:	6923      	ldr	r3, [r4, #16]
 800728c:	462a      	mov	r2, r5
 800728e:	4649      	mov	r1, r9
 8007290:	4640      	mov	r0, r8
 8007292:	47d0      	blx	sl
 8007294:	3001      	adds	r0, #1
 8007296:	d0ab      	beq.n	80071f0 <_printf_i+0x164>
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	079b      	lsls	r3, r3, #30
 800729c:	d413      	bmi.n	80072c6 <_printf_i+0x23a>
 800729e:	68e0      	ldr	r0, [r4, #12]
 80072a0:	9b03      	ldr	r3, [sp, #12]
 80072a2:	4298      	cmp	r0, r3
 80072a4:	bfb8      	it	lt
 80072a6:	4618      	movlt	r0, r3
 80072a8:	e7a4      	b.n	80071f4 <_printf_i+0x168>
 80072aa:	2301      	movs	r3, #1
 80072ac:	4632      	mov	r2, r6
 80072ae:	4649      	mov	r1, r9
 80072b0:	4640      	mov	r0, r8
 80072b2:	47d0      	blx	sl
 80072b4:	3001      	adds	r0, #1
 80072b6:	d09b      	beq.n	80071f0 <_printf_i+0x164>
 80072b8:	3501      	adds	r5, #1
 80072ba:	68e3      	ldr	r3, [r4, #12]
 80072bc:	9903      	ldr	r1, [sp, #12]
 80072be:	1a5b      	subs	r3, r3, r1
 80072c0:	42ab      	cmp	r3, r5
 80072c2:	dcf2      	bgt.n	80072aa <_printf_i+0x21e>
 80072c4:	e7eb      	b.n	800729e <_printf_i+0x212>
 80072c6:	2500      	movs	r5, #0
 80072c8:	f104 0619 	add.w	r6, r4, #25
 80072cc:	e7f5      	b.n	80072ba <_printf_i+0x22e>
 80072ce:	bf00      	nop
 80072d0:	08007939 	.word	0x08007939
 80072d4:	0800794a 	.word	0x0800794a

080072d8 <_sbrk_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	4d06      	ldr	r5, [pc, #24]	; (80072f4 <_sbrk_r+0x1c>)
 80072dc:	2300      	movs	r3, #0
 80072de:	4604      	mov	r4, r0
 80072e0:	4608      	mov	r0, r1
 80072e2:	602b      	str	r3, [r5, #0]
 80072e4:	f7f9 ff20 	bl	8001128 <_sbrk>
 80072e8:	1c43      	adds	r3, r0, #1
 80072ea:	d102      	bne.n	80072f2 <_sbrk_r+0x1a>
 80072ec:	682b      	ldr	r3, [r5, #0]
 80072ee:	b103      	cbz	r3, 80072f2 <_sbrk_r+0x1a>
 80072f0:	6023      	str	r3, [r4, #0]
 80072f2:	bd38      	pop	{r3, r4, r5, pc}
 80072f4:	200008ec 	.word	0x200008ec

080072f8 <__sread>:
 80072f8:	b510      	push	{r4, lr}
 80072fa:	460c      	mov	r4, r1
 80072fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007300:	f000 f8a0 	bl	8007444 <_read_r>
 8007304:	2800      	cmp	r0, #0
 8007306:	bfab      	itete	ge
 8007308:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800730a:	89a3      	ldrhlt	r3, [r4, #12]
 800730c:	181b      	addge	r3, r3, r0
 800730e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007312:	bfac      	ite	ge
 8007314:	6563      	strge	r3, [r4, #84]	; 0x54
 8007316:	81a3      	strhlt	r3, [r4, #12]
 8007318:	bd10      	pop	{r4, pc}

0800731a <__swrite>:
 800731a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800731e:	461f      	mov	r7, r3
 8007320:	898b      	ldrh	r3, [r1, #12]
 8007322:	05db      	lsls	r3, r3, #23
 8007324:	4605      	mov	r5, r0
 8007326:	460c      	mov	r4, r1
 8007328:	4616      	mov	r6, r2
 800732a:	d505      	bpl.n	8007338 <__swrite+0x1e>
 800732c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007330:	2302      	movs	r3, #2
 8007332:	2200      	movs	r2, #0
 8007334:	f000 f868 	bl	8007408 <_lseek_r>
 8007338:	89a3      	ldrh	r3, [r4, #12]
 800733a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800733e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007342:	81a3      	strh	r3, [r4, #12]
 8007344:	4632      	mov	r2, r6
 8007346:	463b      	mov	r3, r7
 8007348:	4628      	mov	r0, r5
 800734a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800734e:	f000 b817 	b.w	8007380 <_write_r>

08007352 <__sseek>:
 8007352:	b510      	push	{r4, lr}
 8007354:	460c      	mov	r4, r1
 8007356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800735a:	f000 f855 	bl	8007408 <_lseek_r>
 800735e:	1c43      	adds	r3, r0, #1
 8007360:	89a3      	ldrh	r3, [r4, #12]
 8007362:	bf15      	itete	ne
 8007364:	6560      	strne	r0, [r4, #84]	; 0x54
 8007366:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800736a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800736e:	81a3      	strheq	r3, [r4, #12]
 8007370:	bf18      	it	ne
 8007372:	81a3      	strhne	r3, [r4, #12]
 8007374:	bd10      	pop	{r4, pc}

08007376 <__sclose>:
 8007376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800737a:	f000 b813 	b.w	80073a4 <_close_r>
	...

08007380 <_write_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	4d07      	ldr	r5, [pc, #28]	; (80073a0 <_write_r+0x20>)
 8007384:	4604      	mov	r4, r0
 8007386:	4608      	mov	r0, r1
 8007388:	4611      	mov	r1, r2
 800738a:	2200      	movs	r2, #0
 800738c:	602a      	str	r2, [r5, #0]
 800738e:	461a      	mov	r2, r3
 8007390:	f7f9 fd40 	bl	8000e14 <_write>
 8007394:	1c43      	adds	r3, r0, #1
 8007396:	d102      	bne.n	800739e <_write_r+0x1e>
 8007398:	682b      	ldr	r3, [r5, #0]
 800739a:	b103      	cbz	r3, 800739e <_write_r+0x1e>
 800739c:	6023      	str	r3, [r4, #0]
 800739e:	bd38      	pop	{r3, r4, r5, pc}
 80073a0:	200008ec 	.word	0x200008ec

080073a4 <_close_r>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	4d06      	ldr	r5, [pc, #24]	; (80073c0 <_close_r+0x1c>)
 80073a8:	2300      	movs	r3, #0
 80073aa:	4604      	mov	r4, r0
 80073ac:	4608      	mov	r0, r1
 80073ae:	602b      	str	r3, [r5, #0]
 80073b0:	f7f9 fe85 	bl	80010be <_close>
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	d102      	bne.n	80073be <_close_r+0x1a>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	b103      	cbz	r3, 80073be <_close_r+0x1a>
 80073bc:	6023      	str	r3, [r4, #0]
 80073be:	bd38      	pop	{r3, r4, r5, pc}
 80073c0:	200008ec 	.word	0x200008ec

080073c4 <_fstat_r>:
 80073c4:	b538      	push	{r3, r4, r5, lr}
 80073c6:	4d07      	ldr	r5, [pc, #28]	; (80073e4 <_fstat_r+0x20>)
 80073c8:	2300      	movs	r3, #0
 80073ca:	4604      	mov	r4, r0
 80073cc:	4608      	mov	r0, r1
 80073ce:	4611      	mov	r1, r2
 80073d0:	602b      	str	r3, [r5, #0]
 80073d2:	f7f9 fe80 	bl	80010d6 <_fstat>
 80073d6:	1c43      	adds	r3, r0, #1
 80073d8:	d102      	bne.n	80073e0 <_fstat_r+0x1c>
 80073da:	682b      	ldr	r3, [r5, #0]
 80073dc:	b103      	cbz	r3, 80073e0 <_fstat_r+0x1c>
 80073de:	6023      	str	r3, [r4, #0]
 80073e0:	bd38      	pop	{r3, r4, r5, pc}
 80073e2:	bf00      	nop
 80073e4:	200008ec 	.word	0x200008ec

080073e8 <_isatty_r>:
 80073e8:	b538      	push	{r3, r4, r5, lr}
 80073ea:	4d06      	ldr	r5, [pc, #24]	; (8007404 <_isatty_r+0x1c>)
 80073ec:	2300      	movs	r3, #0
 80073ee:	4604      	mov	r4, r0
 80073f0:	4608      	mov	r0, r1
 80073f2:	602b      	str	r3, [r5, #0]
 80073f4:	f7f9 fe7f 	bl	80010f6 <_isatty>
 80073f8:	1c43      	adds	r3, r0, #1
 80073fa:	d102      	bne.n	8007402 <_isatty_r+0x1a>
 80073fc:	682b      	ldr	r3, [r5, #0]
 80073fe:	b103      	cbz	r3, 8007402 <_isatty_r+0x1a>
 8007400:	6023      	str	r3, [r4, #0]
 8007402:	bd38      	pop	{r3, r4, r5, pc}
 8007404:	200008ec 	.word	0x200008ec

08007408 <_lseek_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	4d07      	ldr	r5, [pc, #28]	; (8007428 <_lseek_r+0x20>)
 800740c:	4604      	mov	r4, r0
 800740e:	4608      	mov	r0, r1
 8007410:	4611      	mov	r1, r2
 8007412:	2200      	movs	r2, #0
 8007414:	602a      	str	r2, [r5, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	f7f9 fe78 	bl	800110c <_lseek>
 800741c:	1c43      	adds	r3, r0, #1
 800741e:	d102      	bne.n	8007426 <_lseek_r+0x1e>
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	b103      	cbz	r3, 8007426 <_lseek_r+0x1e>
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	bd38      	pop	{r3, r4, r5, pc}
 8007428:	200008ec 	.word	0x200008ec

0800742c <__malloc_lock>:
 800742c:	4801      	ldr	r0, [pc, #4]	; (8007434 <__malloc_lock+0x8>)
 800742e:	f7ff bb15 	b.w	8006a5c <__retarget_lock_acquire_recursive>
 8007432:	bf00      	nop
 8007434:	200008e0 	.word	0x200008e0

08007438 <__malloc_unlock>:
 8007438:	4801      	ldr	r0, [pc, #4]	; (8007440 <__malloc_unlock+0x8>)
 800743a:	f7ff bb10 	b.w	8006a5e <__retarget_lock_release_recursive>
 800743e:	bf00      	nop
 8007440:	200008e0 	.word	0x200008e0

08007444 <_read_r>:
 8007444:	b538      	push	{r3, r4, r5, lr}
 8007446:	4d07      	ldr	r5, [pc, #28]	; (8007464 <_read_r+0x20>)
 8007448:	4604      	mov	r4, r0
 800744a:	4608      	mov	r0, r1
 800744c:	4611      	mov	r1, r2
 800744e:	2200      	movs	r2, #0
 8007450:	602a      	str	r2, [r5, #0]
 8007452:	461a      	mov	r2, r3
 8007454:	f7f9 fe16 	bl	8001084 <_read>
 8007458:	1c43      	adds	r3, r0, #1
 800745a:	d102      	bne.n	8007462 <_read_r+0x1e>
 800745c:	682b      	ldr	r3, [r5, #0]
 800745e:	b103      	cbz	r3, 8007462 <_read_r+0x1e>
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	bd38      	pop	{r3, r4, r5, pc}
 8007464:	200008ec 	.word	0x200008ec

08007468 <_init>:
 8007468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746a:	bf00      	nop
 800746c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800746e:	bc08      	pop	{r3}
 8007470:	469e      	mov	lr, r3
 8007472:	4770      	bx	lr

08007474 <_fini>:
 8007474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007476:	bf00      	nop
 8007478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747a:	bc08      	pop	{r3}
 800747c:	469e      	mov	lr, r3
 800747e:	4770      	bx	lr
