
STM32F303_TMC2209_keycontrole.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006148  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  080062d8  080062d8  000162d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006764  08006764  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006764  08006764  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006764  08006764  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006764  08006764  00016764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006768  08006768  00016768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800676c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000828  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000898  20000898  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000114da  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025ea  00000000  00000000  0003157a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  00033b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d78  00000000  00000000  000349d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d00d  00000000  00000000  00035750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000120b2  00000000  00000000  0005275d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a8e9b  00000000  00000000  0006480f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010d6aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004468  00000000  00000000  0010d6fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080062c0 	.word	0x080062c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080062c0 	.word	0x080062c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <tmc2209_readWriteArray>:
    if (htim == &htim3){ //htim3に設定したタイマー割り込みの時間で発火する
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);//ピンの出力を切り替え
    }
}*/
void tmc2209_readWriteArray(uint8_t channel, uint8_t *data, size_t writeLength, size_t readLength)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	60b9      	str	r1, [r7, #8]
 8000278:	607a      	str	r2, [r7, #4]
 800027a:	603b      	str	r3, [r7, #0]
 800027c:	4603      	mov	r3, r0
 800027e:	73fb      	strb	r3, [r7, #15]
	//set your uart read write
	//UART_readWrite(channelToUART(channel), data, writeLength, readLength);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8000280:	480e      	ldr	r0, [pc, #56]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000282:	f003 ff97 	bl	80041b4 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart1, data, writeLength,3000);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	b29a      	uxth	r2, r3
 800028a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800028e:	68b9      	ldr	r1, [r7, #8]
 8000290:	480a      	ldr	r0, [pc, #40]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000292:	f003 fb2b 	bl	80038ec <HAL_UART_Transmit>

	if(readLength > 0){
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d00a      	beq.n	80002b2 <tmc2209_readWriteArray+0x42>
		HAL_HalfDuplex_EnableReceiver(&huart1);
 800029c:	4807      	ldr	r0, [pc, #28]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 800029e:	f003 ffdb 	bl	8004258 <HAL_HalfDuplex_EnableReceiver>
		HAL_UART_Receive(&huart1, data, readLength, 3000);
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002aa:	68b9      	ldr	r1, [r7, #8]
 80002ac:	4803      	ldr	r0, [pc, #12]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 80002ae:	f003 fbb1 	bl	8003a14 <HAL_UART_Receive>
	}
}
 80002b2:	bf00      	nop
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	200000d8 	.word	0x200000d8

080002c0 <tmc2209_CRC8>:

uint8_t tmc2209_CRC8(uint8_t *data, size_t length)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
	return TMC2209_CRC(data, length);
 80002ca:	2201      	movs	r2, #1
 80002cc:	6839      	ldr	r1, [r7, #0]
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f004 fc5e 	bl	8004b90 <tmc_CRC8>
 80002d4:	4603      	mov	r3, r0
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <reset>:

	//StepDir_periodicJob(0);
}

static uint8_t reset()
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	//StepDir_init(STEPDIR_PRECISION);
	//StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.DIAG);

	return tmc2209_reset(&TMC2209);
 80002e4:	4802      	ldr	r0, [pc, #8]	; (80002f0 <reset+0x10>)
 80002e6:	f004 fe8b 	bl	8005000 <tmc2209_reset>
 80002ea:	4603      	mov	r3, r0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	200001e0 	.word	0x200001e0

080002f4 <restore>:

static uint8_t restore()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	return tmc2209_restore(&TMC2209);
 80002f8:	4802      	ldr	r0, [pc, #8]	; (8000304 <restore+0x10>)
 80002fa:	f004 febb 	bl	8005074 <tmc2209_restore>
 80002fe:	4603      	mov	r3, r0
}
 8000300:	4618      	mov	r0, r3
 8000302:	bd80      	pop	{r7, pc}
 8000304:	200001e0 	.word	0x200001e0

08000308 <TMC2209_INIT>:


void TMC2209_INIT()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 800030e:	2201      	movs	r2, #1
 8000310:	2101      	movs	r1, #1
 8000312:	2007      	movs	r0, #7
 8000314:	f004 fb84 	bl	8004a20 <tmc_fillCRC8Table>

	TMC2209_config.reset = reset;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <TMC2209_INIT+0x38>)
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <TMC2209_INIT+0x3c>)
 800031c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	TMC2209_config.restore = restore;
 8000320:	4b07      	ldr	r3, [pc, #28]	; (8000340 <TMC2209_INIT+0x38>)
 8000322:	4a09      	ldr	r2, [pc, #36]	; (8000348 <TMC2209_INIT+0x40>)
 8000324:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	tmc2209_init(&TMC2209, 0, 0, &TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <TMC2209_INIT+0x44>)
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <TMC2209_INIT+0x38>)
 800032e:	2200      	movs	r2, #0
 8000330:	2100      	movs	r1, #0
 8000332:	4807      	ldr	r0, [pc, #28]	; (8000350 <TMC2209_INIT+0x48>)
 8000334:	f004 fd80 	bl	8004e38 <tmc2209_init>


	//restore();
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000468 	.word	0x20000468
 8000344:	080002e1 	.word	0x080002e1
 8000348:	080002f5 	.word	0x080002f5
 800034c:	08006414 	.word	0x08006414
 8000350:	200001e0 	.word	0x200001e0

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b5b0      	push	{r4, r5, r7, lr}
 8000356:	b0a0      	sub	sp, #128	; 0x80
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 800035a:	4bab      	ldr	r3, [pc, #684]	; (8000608 <main+0x2b4>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f004 ff60 	bl	8005228 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000368:	f000 fed6 	bl	8001118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036c:	f000 fba0 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000370:	f000 fca4 	bl	8000cbc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000374:	f000 fc72 	bl	8000c5c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000378:	f000 fc40 	bl	8000bfc <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800037c:	f000 fbf0 	bl	8000b60 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //int getserial=0;
  TMC2209_INIT();
 8000380:	f7ff ffc2 	bl	8000308 <TMC2209_INIT>
  printf("Hello\r\n");
 8000384:	48a1      	ldr	r0, [pc, #644]	; (800060c <main+0x2b8>)
 8000386:	f004 ff47 	bl	8005218 <puts>

  int i;
   char rxbuf[1];
   char start[] ="1:front,2:back\r\n";
 800038a:	4ba1      	ldr	r3, [pc, #644]	; (8000610 <main+0x2bc>)
 800038c:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000390:	461d      	mov	r5, r3
 8000392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000396:	682b      	ldr	r3, [r5, #0]
 8000398:	7023      	strb	r3, [r4, #0]
   char front[] ="front turn\r\n";
 800039a:	4b9e      	ldr	r3, [pc, #632]	; (8000614 <main+0x2c0>)
 800039c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80003a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003a2:	c407      	stmia	r4!, {r0, r1, r2}
 80003a4:	7023      	strb	r3, [r4, #0]
   char back[] ="back turn\r\n";
 80003a6:	4a9c      	ldr	r2, [pc, #624]	; (8000618 <main+0x2c4>)
 80003a8:	f107 0318 	add.w	r3, r7, #24
 80003ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80003ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   char nonans[] ="Not Understand \r\n";
 80003b2:	4b9a      	ldr	r3, [pc, #616]	; (800061c <main+0x2c8>)
 80003b4:	1d3c      	adds	r4, r7, #4
 80003b6:	461d      	mov	r5, r3
 80003b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003bc:	682b      	ldr	r3, [r5, #0]
 80003be:	8023      	strh	r3, [r4, #0]
   int32_t mstep_value = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	67bb      	str	r3, [r7, #120]	; 0x78




   HAL_UART_Transmit(&huart2,(uint8_t *)start,sizeof(start),3000);
 80003c4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80003c8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80003cc:	2211      	movs	r2, #17
 80003ce:	4894      	ldr	r0, [pc, #592]	; (8000620 <main+0x2cc>)
 80003d0:	f003 fa8c 	bl	80038ec <HAL_UART_Transmit>

   mstep_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK,TMC2209_MSTEP_REG_SELECT_SHIFT);
 80003d4:	2100      	movs	r1, #0
 80003d6:	4893      	ldr	r0, [pc, #588]	; (8000624 <main+0x2d0>)
 80003d8:	f004 fccb 	bl	8004d72 <tmc2209_readInt>
 80003dc:	4603      	mov	r3, r0
 80003de:	11db      	asrs	r3, r3, #7
 80003e0:	f003 0301 	and.w	r3, r3, #1
 80003e4:	67bb      	str	r3, [r7, #120]	; 0x78
   printf("mstep_before : %ld\r\n", mstep_value);
 80003e6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80003e8:	488f      	ldr	r0, [pc, #572]	; (8000628 <main+0x2d4>)
 80003ea:	f004 fe8f 	bl	800510c <iprintf>
   mstep_value = 1;
 80003ee:	2301      	movs	r3, #1
 80003f0:	67bb      	str	r3, [r7, #120]	; 0x78
   TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT,mstep_value);
 80003f2:	2100      	movs	r1, #0
 80003f4:	488b      	ldr	r0, [pc, #556]	; (8000624 <main+0x2d0>)
 80003f6:	f004 fcbc 	bl	8004d72 <tmc2209_readInt>
 80003fa:	4603      	mov	r3, r0
 80003fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000402:	01db      	lsls	r3, r3, #7
 8000404:	b2db      	uxtb	r3, r3
 8000406:	4313      	orrs	r3, r2
 8000408:	461a      	mov	r2, r3
 800040a:	2100      	movs	r1, #0
 800040c:	4885      	ldr	r0, [pc, #532]	; (8000624 <main+0x2d0>)
 800040e:	f004 fc60 	bl	8004cd2 <tmc2209_writeInt>
   tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000412:	f000 fedb 	bl	80011cc <HAL_GetTick>
 8000416:	4603      	mov	r3, r0
 8000418:	4619      	mov	r1, r3
 800041a:	4882      	ldr	r0, [pc, #520]	; (8000624 <main+0x2d0>)
 800041c:	f004 fddf 	bl	8004fde <tmc2209_periodicJob>
   mstep_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT);
 8000420:	2100      	movs	r1, #0
 8000422:	4880      	ldr	r0, [pc, #512]	; (8000624 <main+0x2d0>)
 8000424:	f004 fca5 	bl	8004d72 <tmc2209_readInt>
 8000428:	4603      	mov	r3, r0
 800042a:	11db      	asrs	r3, r3, #7
 800042c:	f003 0301 	and.w	r3, r3, #1
 8000430:	67bb      	str	r3, [r7, #120]	; 0x78
   printf("mstep_after : %ld\r\n", mstep_value);
 8000432:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000434:	487d      	ldr	r0, [pc, #500]	; (800062c <main+0x2d8>)
 8000436:	f004 fe69 	bl	800510c <iprintf>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //example read register value
	  //int32_t value = 0;
	  HAL_UART_Receive(&huart2,(uint8_t *)rxbuf, sizeof(rxbuf), 100);
 800043a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800043e:	2364      	movs	r3, #100	; 0x64
 8000440:	2201      	movs	r2, #1
 8000442:	4877      	ldr	r0, [pc, #476]	; (8000620 <main+0x2cc>)
 8000444:	f003 fae6 	bl	8003a14 <HAL_UART_Receive>


	  	  //tmc2209_writeInt(&TMC2209, TMC2209_ENN_MASK, 0);


	  	  if (rxbuf[0] != 0){
 8000448:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800044c:	2b00      	cmp	r3, #0
 800044e:	d0f4      	beq.n	800043a <main+0xe6>
  			  //tmc2209_writeInt(&TMC2209, TMC2209_IHOLD_IRUN, 0);


	  		  //TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT, *value);
  			  //tmc2209_writeInt(&TMC2209, TMC2209_PWM_REG_MASK, 1);	//比例係数を1にセット
  			  int32_t toff_value = 0;
 8000450:	2300      	movs	r3, #0
 8000452:	677b      	str	r3, [r7, #116]	; 0x74
  			  int32_t microstep_value = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	673b      	str	r3, [r7, #112]	; 0x70
	  		  toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 8000458:	216c      	movs	r1, #108	; 0x6c
 800045a:	4872      	ldr	r0, [pc, #456]	; (8000624 <main+0x2d0>)
 800045c:	f004 fc89 	bl	8004d72 <tmc2209_readInt>
 8000460:	4603      	mov	r3, r0
 8000462:	f003 030f 	and.w	r3, r3, #15
 8000466:	677b      	str	r3, [r7, #116]	; 0x74
	  		  printf("toff_before : %ld\r\n", toff_value);
 8000468:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800046a:	4871      	ldr	r0, [pc, #452]	; (8000630 <main+0x2dc>)
 800046c:	f004 fe4e 	bl	800510c <iprintf>
	  		  toff_value = 3;
 8000470:	2303      	movs	r3, #3
 8000472:	677b      	str	r3, [r7, #116]	; 0x74
	  		  TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT,toff_value);
 8000474:	216c      	movs	r1, #108	; 0x6c
 8000476:	486b      	ldr	r0, [pc, #428]	; (8000624 <main+0x2d0>)
 8000478:	f004 fc7b 	bl	8004d72 <tmc2209_readInt>
 800047c:	4603      	mov	r3, r0
 800047e:	f023 020f 	bic.w	r2, r3, #15
 8000482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000484:	f003 030f 	and.w	r3, r3, #15
 8000488:	4313      	orrs	r3, r2
 800048a:	461a      	mov	r2, r3
 800048c:	216c      	movs	r1, #108	; 0x6c
 800048e:	4865      	ldr	r0, [pc, #404]	; (8000624 <main+0x2d0>)
 8000490:	f004 fc1f 	bl	8004cd2 <tmc2209_writeInt>
	  		  tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000494:	f000 fe9a 	bl	80011cc <HAL_GetTick>
 8000498:	4603      	mov	r3, r0
 800049a:	4619      	mov	r1, r3
 800049c:	4861      	ldr	r0, [pc, #388]	; (8000624 <main+0x2d0>)
 800049e:	f004 fd9e 	bl	8004fde <tmc2209_periodicJob>
	  		  toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 80004a2:	216c      	movs	r1, #108	; 0x6c
 80004a4:	485f      	ldr	r0, [pc, #380]	; (8000624 <main+0x2d0>)
 80004a6:	f004 fc64 	bl	8004d72 <tmc2209_readInt>
 80004aa:	4603      	mov	r3, r0
 80004ac:	f003 030f 	and.w	r3, r3, #15
 80004b0:	677b      	str	r3, [r7, #116]	; 0x74
	  		  printf("toff_after : %ld\r\n", toff_value);
 80004b2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80004b4:	485f      	ldr	r0, [pc, #380]	; (8000634 <main+0x2e0>)
 80004b6:	f004 fe29 	bl	800510c <iprintf>

	  		  microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);
 80004ba:	216c      	movs	r1, #108	; 0x6c
 80004bc:	4859      	ldr	r0, [pc, #356]	; (8000624 <main+0x2d0>)
 80004be:	f004 fc58 	bl	8004d72 <tmc2209_readInt>
 80004c2:	4603      	mov	r3, r0
 80004c4:	161b      	asrs	r3, r3, #24
 80004c6:	f003 030f 	and.w	r3, r3, #15
 80004ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004ce:	fa42 f303 	asr.w	r3, r2, r3
 80004d2:	673b      	str	r3, [r7, #112]	; 0x70
	  		  printf("microstep_before : %ld\r\n", microstep_value);
 80004d4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80004d6:	4858      	ldr	r0, [pc, #352]	; (8000638 <main+0x2e4>)
 80004d8:	f004 fe18 	bl	800510c <iprintf>
	  		  microstep_value = 4;
 80004dc:	2304      	movs	r3, #4
 80004de:	673b      	str	r3, [r7, #112]	; 0x70
	  		  TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT,microstep_value);
 80004e0:	216c      	movs	r1, #108	; 0x6c
 80004e2:	4850      	ldr	r0, [pc, #320]	; (8000624 <main+0x2d0>)
 80004e4:	f004 fc45 	bl	8004d72 <tmc2209_readInt>
 80004e8:	4603      	mov	r3, r0
 80004ea:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80004ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80004f0:	061b      	lsls	r3, r3, #24
 80004f2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80004f6:	4313      	orrs	r3, r2
 80004f8:	461a      	mov	r2, r3
 80004fa:	216c      	movs	r1, #108	; 0x6c
 80004fc:	4849      	ldr	r0, [pc, #292]	; (8000624 <main+0x2d0>)
 80004fe:	f004 fbe8 	bl	8004cd2 <tmc2209_writeInt>
	  		  tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000502:	f000 fe63 	bl	80011cc <HAL_GetTick>
 8000506:	4603      	mov	r3, r0
 8000508:	4619      	mov	r1, r3
 800050a:	4846      	ldr	r0, [pc, #280]	; (8000624 <main+0x2d0>)
 800050c:	f004 fd67 	bl	8004fde <tmc2209_periodicJob>
	  		  microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);
 8000510:	216c      	movs	r1, #108	; 0x6c
 8000512:	4844      	ldr	r0, [pc, #272]	; (8000624 <main+0x2d0>)
 8000514:	f004 fc2d 	bl	8004d72 <tmc2209_readInt>
 8000518:	4603      	mov	r3, r0
 800051a:	161b      	asrs	r3, r3, #24
 800051c:	f003 030f 	and.w	r3, r3, #15
 8000520:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000524:	fa42 f303 	asr.w	r3, r2, r3
 8000528:	673b      	str	r3, [r7, #112]	; 0x70
	  		  printf("microstep_after : %ld\r\n", microstep_value);
 800052a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800052c:	4843      	ldr	r0, [pc, #268]	; (800063c <main+0x2e8>)
 800052e:	f004 fded 	bl	800510c <iprintf>


	  		  HAL_UART_Transmit(&huart2,(uint8_t *)start, sizeof(start),3000);
 8000532:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000536:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800053a:	2211      	movs	r2, #17
 800053c:	4838      	ldr	r0, [pc, #224]	; (8000620 <main+0x2cc>)
 800053e:	f003 f9d5 	bl	80038ec <HAL_UART_Transmit>
	  		  //tmc2209_writeInt(motorToIC(motor), TMC2209_TPWMTHRS, *value);
	  		  if(rxbuf[0] == '1'){
 8000542:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000546:	2b31      	cmp	r3, #49	; 0x31
 8000548:	d12c      	bne.n	80005a4 <main+0x250>
	  			//tmc2209_writeInt(&TMC2209, TMC2209_ENN_MASK, 1);
	  			//tmc2209_writeInt(&TMC2209, TMC2209_ENN_SHIFT, 1);
	  			//TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK, TMC2209_EN_SPREADCYCLE_SHIFT, 0);
	  			HAL_UART_Transmit(&huart2,(uint8_t *)back, sizeof(back),3000);
 800054a:	f107 0118 	add.w	r1, r7, #24
 800054e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000552:	220c      	movs	r2, #12
 8000554:	4832      	ldr	r0, [pc, #200]	; (8000620 <main+0x2cc>)
 8000556:	f003 f9c9 	bl	80038ec <HAL_UART_Transmit>
	  		  	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,SET);
 800055a:	2201      	movs	r2, #1
 800055c:	2110      	movs	r1, #16
 800055e:	4838      	ldr	r0, [pc, #224]	; (8000640 <main+0x2ec>)
 8000560:	f001 f95e 	bl	8001820 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	4835      	ldr	r0, [pc, #212]	; (8000640 <main+0x2ec>)
 800056a:	f001 f959 	bl	8001820 <HAL_GPIO_WritePin>
	  		  	for(i=0;i<=1600;i++){
 800056e:	2300      	movs	r3, #0
 8000570:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000572:	e00f      	b.n	8000594 <main+0x240>
	  		  		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,SET);
 8000574:	2201      	movs	r2, #1
 8000576:	2120      	movs	r1, #32
 8000578:	4831      	ldr	r0, [pc, #196]	; (8000640 <main+0x2ec>)
 800057a:	f001 f951 	bl	8001820 <HAL_GPIO_WritePin>
	  		  		HAL_Delay(1);
 800057e:	2001      	movs	r0, #1
 8000580:	f000 fe30 	bl	80011e4 <HAL_Delay>
	  		  		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2120      	movs	r1, #32
 8000588:	482d      	ldr	r0, [pc, #180]	; (8000640 <main+0x2ec>)
 800058a:	f001 f949 	bl	8001820 <HAL_GPIO_WritePin>
	  		  	for(i=0;i<=1600;i++){
 800058e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000590:	3301      	adds	r3, #1
 8000592:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000594:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000596:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800059a:	ddeb      	ble.n	8000574 <main+0x220>
	  		  	}
	  		  	  rxbuf[0]=0;
 800059c:	2300      	movs	r3, #0
 800059e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 80005a2:	e74a      	b.n	800043a <main+0xe6>
	  		  }
	  		  else if(rxbuf[0] == '2'){
 80005a4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80005a8:	2b32      	cmp	r3, #50	; 0x32
 80005aa:	d14b      	bne.n	8000644 <main+0x2f0>
		  		  //tmc2209_writeInt(&TMC2209, TMC2209_ENN_MASK, 0);
		  		  //tmc2209_writeInt(&TMC2209, TMC2209_ENN_SHIFT, 0);
	  			  //tmc2209_writeInt(&TMC2209, TMC2209_ENN_SHIFT, 0);
	  			  HAL_UART_Transmit(&huart2,(uint8_t *)back, sizeof(back),3000);
 80005ac:	f107 0118 	add.w	r1, r7, #24
 80005b0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005b4:	220c      	movs	r2, #12
 80005b6:	481a      	ldr	r0, [pc, #104]	; (8000620 <main+0x2cc>)
 80005b8:	f003 f998 	bl	80038ec <HAL_UART_Transmit>
	  			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2110      	movs	r1, #16
 80005c0:	481f      	ldr	r0, [pc, #124]	; (8000640 <main+0x2ec>)
 80005c2:	f001 f92d 	bl	8001820 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2140      	movs	r1, #64	; 0x40
 80005ca:	481d      	ldr	r0, [pc, #116]	; (8000640 <main+0x2ec>)
 80005cc:	f001 f928 	bl	8001820 <HAL_GPIO_WritePin>
	  			  for(i=0;i<=1600;i++){
 80005d0:	2300      	movs	r3, #0
 80005d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80005d4:	e00f      	b.n	80005f6 <main+0x2a2>
	  				  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	2120      	movs	r1, #32
 80005da:	4819      	ldr	r0, [pc, #100]	; (8000640 <main+0x2ec>)
 80005dc:	f001 f920 	bl	8001820 <HAL_GPIO_WritePin>
	  				  HAL_Delay(1);
 80005e0:	2001      	movs	r0, #1
 80005e2:	f000 fdff 	bl	80011e4 <HAL_Delay>
	  				  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2120      	movs	r1, #32
 80005ea:	4815      	ldr	r0, [pc, #84]	; (8000640 <main+0x2ec>)
 80005ec:	f001 f918 	bl	8001820 <HAL_GPIO_WritePin>
	  			  for(i=0;i<=1600;i++){
 80005f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005f2:	3301      	adds	r3, #1
 80005f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80005f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80005fc:	ddeb      	ble.n	80005d6 <main+0x282>
	  			  }
	  			  	  //HAL_Delay(100);

	  			  	  rxbuf[0]=0;
 80005fe:	2300      	movs	r3, #0
 8000600:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8000604:	e719      	b.n	800043a <main+0xe6>
 8000606:	bf00      	nop
 8000608:	2000000c 	.word	0x2000000c
 800060c:	080062d8 	.word	0x080062d8
 8000610:	080063d0 	.word	0x080063d0
 8000614:	080063e4 	.word	0x080063e4
 8000618:	080063f4 	.word	0x080063f4
 800061c:	08006400 	.word	0x08006400
 8000620:	2000015c 	.word	0x2000015c
 8000624:	200001e0 	.word	0x200001e0
 8000628:	080062e0 	.word	0x080062e0
 800062c:	080062f8 	.word	0x080062f8
 8000630:	0800630c 	.word	0x0800630c
 8000634:	08006320 	.word	0x08006320
 8000638:	08006334 	.word	0x08006334
 800063c:	08006350 	.word	0x08006350
 8000640:	48000400 	.word	0x48000400
	  		  }
	  		  else if(rxbuf[0] == '3'){
 8000644:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000648:	2b33      	cmp	r3, #51	; 0x33
 800064a:	f040 80a6 	bne.w	800079a <main+0x446>
	  			  //tmc2209_writeInt(&TMC2209, TMC2209_ENN_MASK, 1);
	  			  //tmc2209_writeInt(&TMC2209, TMC2209_ENN_SHIFT, 1);
	  			  //HAL_UART_Transmit(&huart2,(uint8_t *)front, sizeof(front),3000);
	  			  //HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,SET);
	  			  int32_t value = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	; 0x54
	  			  //int32_t read_value = 0;
	  			  int32_t stanby_value = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	653b      	str	r3, [r7, #80]	; 0x50
	  			  int32_t toff_value = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	64fb      	str	r3, [r7, #76]	; 0x4c
	  			  //value = tmc2209_readInt(&TMC2209, TMC2209_CHOPCONF);
	  			  //value = tmc2209_readInt(&TMC2209, TMC2209_CHOPCONF);
	  			  //tmc2209_periodicJob(&TMC2209, HAL_GetTick());
	  			  //tmc2209_writeInt(&TMC2209, TMC2209_CHOPCONF, 0x00);

				  toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 800065a:	216c      	movs	r1, #108	; 0x6c
 800065c:	48c6      	ldr	r0, [pc, #792]	; (8000978 <main+0x624>)
 800065e:	f004 fb88 	bl	8004d72 <tmc2209_readInt>
 8000662:	4603      	mov	r3, r0
 8000664:	f003 030f 	and.w	r3, r3, #15
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
				  printf("toff_before : %ld\r\n", toff_value);
 800066a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800066c:	48c3      	ldr	r0, [pc, #780]	; (800097c <main+0x628>)
 800066e:	f004 fd4d 	bl	800510c <iprintf>
				  toff_value = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	64fb      	str	r3, [r7, #76]	; 0x4c
				  TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT,toff_value);
 8000676:	216c      	movs	r1, #108	; 0x6c
 8000678:	48bf      	ldr	r0, [pc, #764]	; (8000978 <main+0x624>)
 800067a:	f004 fb7a 	bl	8004d72 <tmc2209_readInt>
 800067e:	4603      	mov	r3, r0
 8000680:	f023 020f 	bic.w	r2, r3, #15
 8000684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000686:	f003 030f 	and.w	r3, r3, #15
 800068a:	4313      	orrs	r3, r2
 800068c:	461a      	mov	r2, r3
 800068e:	216c      	movs	r1, #108	; 0x6c
 8000690:	48b9      	ldr	r0, [pc, #740]	; (8000978 <main+0x624>)
 8000692:	f004 fb1e 	bl	8004cd2 <tmc2209_writeInt>
				  tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000696:	f000 fd99 	bl	80011cc <HAL_GetTick>
 800069a:	4603      	mov	r3, r0
 800069c:	4619      	mov	r1, r3
 800069e:	48b6      	ldr	r0, [pc, #728]	; (8000978 <main+0x624>)
 80006a0:	f004 fc9d 	bl	8004fde <tmc2209_periodicJob>
				  toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 80006a4:	216c      	movs	r1, #108	; 0x6c
 80006a6:	48b4      	ldr	r0, [pc, #720]	; (8000978 <main+0x624>)
 80006a8:	f004 fb63 	bl	8004d72 <tmc2209_readInt>
 80006ac:	4603      	mov	r3, r0
 80006ae:	f003 030f 	and.w	r3, r3, #15
 80006b2:	64fb      	str	r3, [r7, #76]	; 0x4c
				  printf("toff_after : %ld\r\n", toff_value);
 80006b4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80006b6:	48b2      	ldr	r0, [pc, #712]	; (8000980 <main+0x62c>)
 80006b8:	f004 fd28 	bl	800510c <iprintf>

				  value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 80006bc:	2110      	movs	r1, #16
 80006be:	48ae      	ldr	r0, [pc, #696]	; (8000978 <main+0x624>)
 80006c0:	f004 fb57 	bl	8004d72 <tmc2209_readInt>
 80006c4:	4603      	mov	r3, r0
 80006c6:	121b      	asrs	r3, r3, #8
 80006c8:	f003 031f 	and.w	r3, r3, #31
 80006cc:	657b      	str	r3, [r7, #84]	; 0x54
				  printf("maxumum_before: %ld\r\n", value);
 80006ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80006d0:	48ac      	ldr	r0, [pc, #688]	; (8000984 <main+0x630>)
 80006d2:	f004 fd1b 	bl	800510c <iprintf>
				  value = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	657b      	str	r3, [r7, #84]	; 0x54
				  TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT, value);
 80006da:	2110      	movs	r1, #16
 80006dc:	48a6      	ldr	r0, [pc, #664]	; (8000978 <main+0x624>)
 80006de:	f004 fb48 	bl	8004d72 <tmc2209_readInt>
 80006e2:	4603      	mov	r3, r0
 80006e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80006e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006ea:	021b      	lsls	r3, r3, #8
 80006ec:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80006f0:	4313      	orrs	r3, r2
 80006f2:	461a      	mov	r2, r3
 80006f4:	2110      	movs	r1, #16
 80006f6:	48a0      	ldr	r0, [pc, #640]	; (8000978 <main+0x624>)
 80006f8:	f004 faeb 	bl	8004cd2 <tmc2209_writeInt>
				  tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80006fc:	f000 fd66 	bl	80011cc <HAL_GetTick>
 8000700:	4603      	mov	r3, r0
 8000702:	4619      	mov	r1, r3
 8000704:	489c      	ldr	r0, [pc, #624]	; (8000978 <main+0x624>)
 8000706:	f004 fc6a 	bl	8004fde <tmc2209_periodicJob>
				  HAL_Delay(200);
 800070a:	20c8      	movs	r0, #200	; 0xc8
 800070c:	f000 fd6a 	bl	80011e4 <HAL_Delay>
				  value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 8000710:	2110      	movs	r1, #16
 8000712:	4899      	ldr	r0, [pc, #612]	; (8000978 <main+0x624>)
 8000714:	f004 fb2d 	bl	8004d72 <tmc2209_readInt>
 8000718:	4603      	mov	r3, r0
 800071a:	121b      	asrs	r3, r3, #8
 800071c:	f003 031f 	and.w	r3, r3, #31
 8000720:	657b      	str	r3, [r7, #84]	; 0x54
				  printf("maxumum_after: %ld\r\n", value);
 8000722:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000724:	4898      	ldr	r0, [pc, #608]	; (8000988 <main+0x634>)
 8000726:	f004 fcf1 	bl	800510c <iprintf>

				  stanby_value=TMC2209_FIELD_READ(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);
 800072a:	2110      	movs	r1, #16
 800072c:	4892      	ldr	r0, [pc, #584]	; (8000978 <main+0x624>)
 800072e:	f004 fb20 	bl	8004d72 <tmc2209_readInt>
 8000732:	4603      	mov	r3, r0
 8000734:	f003 031f 	and.w	r3, r3, #31
 8000738:	653b      	str	r3, [r7, #80]	; 0x50
				  printf("stanbycurrent_before: %ld\r\n", stanby_value);
 800073a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800073c:	4893      	ldr	r0, [pc, #588]	; (800098c <main+0x638>)
 800073e:	f004 fce5 	bl	800510c <iprintf>
				  stanby_value = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	653b      	str	r3, [r7, #80]	; 0x50
				  TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, stanby_value);
 8000746:	2110      	movs	r1, #16
 8000748:	488b      	ldr	r0, [pc, #556]	; (8000978 <main+0x624>)
 800074a:	f004 fb12 	bl	8004d72 <tmc2209_readInt>
 800074e:	4603      	mov	r3, r0
 8000750:	f023 021f 	bic.w	r2, r3, #31
 8000754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000756:	f003 031f 	and.w	r3, r3, #31
 800075a:	4313      	orrs	r3, r2
 800075c:	461a      	mov	r2, r3
 800075e:	2110      	movs	r1, #16
 8000760:	4885      	ldr	r0, [pc, #532]	; (8000978 <main+0x624>)
 8000762:	f004 fab6 	bl	8004cd2 <tmc2209_writeInt>
				  tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000766:	f000 fd31 	bl	80011cc <HAL_GetTick>
 800076a:	4603      	mov	r3, r0
 800076c:	4619      	mov	r1, r3
 800076e:	4882      	ldr	r0, [pc, #520]	; (8000978 <main+0x624>)
 8000770:	f004 fc35 	bl	8004fde <tmc2209_periodicJob>
				  HAL_Delay(200);
 8000774:	20c8      	movs	r0, #200	; 0xc8
 8000776:	f000 fd35 	bl	80011e4 <HAL_Delay>
				  stanby_value=TMC2209_FIELD_READ(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);
 800077a:	2110      	movs	r1, #16
 800077c:	487e      	ldr	r0, [pc, #504]	; (8000978 <main+0x624>)
 800077e:	f004 faf8 	bl	8004d72 <tmc2209_readInt>
 8000782:	4603      	mov	r3, r0
 8000784:	f003 031f 	and.w	r3, r3, #31
 8000788:	653b      	str	r3, [r7, #80]	; 0x50
				  printf("stanbycurrent_after: %ld\r\n", stanby_value);
 800078a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800078c:	4880      	ldr	r0, [pc, #512]	; (8000990 <main+0x63c>)
 800078e:	f004 fcbd 	bl	800510c <iprintf>
//	  		  	  printf("toff_after : %ld\r\n", toff_value);




	  		  		  rxbuf[0]=0;
 8000792:	2300      	movs	r3, #0
 8000794:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8000798:	e64f      	b.n	800043a <main+0xe6>
	  		  	  }
	  		  else if(rxbuf[0] == '4'){
 800079a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800079e:	2b34      	cmp	r3, #52	; 0x34
 80007a0:	d172      	bne.n	8000888 <main+0x534>
	  			  //tmc2209_writeInt(&TMC2209, TMC2209_ENN_MASK, 1);
	  			  //tmc2209_writeInt(&TMC2209, TMC2209_ENN_SHIFT, 1);
	  			  //HAL_UART_Transmit(&huart2,(uint8_t *)front, sizeof(front),3000);
	  			  //HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,SET);
	  			  int32_t value = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	65fb      	str	r3, [r7, #92]	; 0x5c
	  			  int32_t stanby_value = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	65bb      	str	r3, [r7, #88]	; 0x58
	  			  TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK, TMC2209_EN_SPREADCYCLE_SHIFT, 3);

	  			  value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK, TMC2209_EN_SPREADCYCLE_SHIFT);
	  			  printf("TMC2209_FIELD_READ_after : %ld\r\n", value);*/
	  			  //value = tmc2209_readInt(&TMC2209, TMC2209_CHOPCONF);
	  			value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 80007aa:	2110      	movs	r1, #16
 80007ac:	4872      	ldr	r0, [pc, #456]	; (8000978 <main+0x624>)
 80007ae:	f004 fae0 	bl	8004d72 <tmc2209_readInt>
 80007b2:	4603      	mov	r3, r0
 80007b4:	121b      	asrs	r3, r3, #8
 80007b6:	f003 031f 	and.w	r3, r3, #31
 80007ba:	65fb      	str	r3, [r7, #92]	; 0x5c
	  			printf("maxumum_before: %ld\r\n", value);
 80007bc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80007be:	4871      	ldr	r0, [pc, #452]	; (8000984 <main+0x630>)
 80007c0:	f004 fca4 	bl	800510c <iprintf>
	  			value = 10;
 80007c4:	230a      	movs	r3, #10
 80007c6:	65fb      	str	r3, [r7, #92]	; 0x5c
	  			TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT, value);
 80007c8:	2110      	movs	r1, #16
 80007ca:	486b      	ldr	r0, [pc, #428]	; (8000978 <main+0x624>)
 80007cc:	f004 fad1 	bl	8004d72 <tmc2209_readInt>
 80007d0:	4603      	mov	r3, r0
 80007d2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80007d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007d8:	021b      	lsls	r3, r3, #8
 80007da:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80007de:	4313      	orrs	r3, r2
 80007e0:	461a      	mov	r2, r3
 80007e2:	2110      	movs	r1, #16
 80007e4:	4864      	ldr	r0, [pc, #400]	; (8000978 <main+0x624>)
 80007e6:	f004 fa74 	bl	8004cd2 <tmc2209_writeInt>
	  			tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80007ea:	f000 fcef 	bl	80011cc <HAL_GetTick>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4619      	mov	r1, r3
 80007f2:	4861      	ldr	r0, [pc, #388]	; (8000978 <main+0x624>)
 80007f4:	f004 fbf3 	bl	8004fde <tmc2209_periodicJob>
	  			HAL_Delay(200);
 80007f8:	20c8      	movs	r0, #200	; 0xc8
 80007fa:	f000 fcf3 	bl	80011e4 <HAL_Delay>
	  			value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 80007fe:	2110      	movs	r1, #16
 8000800:	485d      	ldr	r0, [pc, #372]	; (8000978 <main+0x624>)
 8000802:	f004 fab6 	bl	8004d72 <tmc2209_readInt>
 8000806:	4603      	mov	r3, r0
 8000808:	121b      	asrs	r3, r3, #8
 800080a:	f003 031f 	and.w	r3, r3, #31
 800080e:	65fb      	str	r3, [r7, #92]	; 0x5c
	  			printf("maxumum_after: %ld\r\n", value);
 8000810:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000812:	485d      	ldr	r0, [pc, #372]	; (8000988 <main+0x634>)
 8000814:	f004 fc7a 	bl	800510c <iprintf>

	  			stanby_value=TMC2209_FIELD_READ(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);
 8000818:	2110      	movs	r1, #16
 800081a:	4857      	ldr	r0, [pc, #348]	; (8000978 <main+0x624>)
 800081c:	f004 faa9 	bl	8004d72 <tmc2209_readInt>
 8000820:	4603      	mov	r3, r0
 8000822:	f003 031f 	and.w	r3, r3, #31
 8000826:	65bb      	str	r3, [r7, #88]	; 0x58
	  			printf("stanbycurrent_before: %ld\r\n", stanby_value);
 8000828:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800082a:	4858      	ldr	r0, [pc, #352]	; (800098c <main+0x638>)
 800082c:	f004 fc6e 	bl	800510c <iprintf>
	  			stanby_value = 10;
 8000830:	230a      	movs	r3, #10
 8000832:	65bb      	str	r3, [r7, #88]	; 0x58
	  			TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, stanby_value);
 8000834:	2110      	movs	r1, #16
 8000836:	4850      	ldr	r0, [pc, #320]	; (8000978 <main+0x624>)
 8000838:	f004 fa9b 	bl	8004d72 <tmc2209_readInt>
 800083c:	4603      	mov	r3, r0
 800083e:	f023 021f 	bic.w	r2, r3, #31
 8000842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000844:	f003 031f 	and.w	r3, r3, #31
 8000848:	4313      	orrs	r3, r2
 800084a:	461a      	mov	r2, r3
 800084c:	2110      	movs	r1, #16
 800084e:	484a      	ldr	r0, [pc, #296]	; (8000978 <main+0x624>)
 8000850:	f004 fa3f 	bl	8004cd2 <tmc2209_writeInt>
	  			tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000854:	f000 fcba 	bl	80011cc <HAL_GetTick>
 8000858:	4603      	mov	r3, r0
 800085a:	4619      	mov	r1, r3
 800085c:	4846      	ldr	r0, [pc, #280]	; (8000978 <main+0x624>)
 800085e:	f004 fbbe 	bl	8004fde <tmc2209_periodicJob>
	  			HAL_Delay(200);
 8000862:	20c8      	movs	r0, #200	; 0xc8
 8000864:	f000 fcbe 	bl	80011e4 <HAL_Delay>
	  			stanby_value=TMC2209_FIELD_READ(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);
 8000868:	2110      	movs	r1, #16
 800086a:	4843      	ldr	r0, [pc, #268]	; (8000978 <main+0x624>)
 800086c:	f004 fa81 	bl	8004d72 <tmc2209_readInt>
 8000870:	4603      	mov	r3, r0
 8000872:	f003 031f 	and.w	r3, r3, #31
 8000876:	65bb      	str	r3, [r7, #88]	; 0x58
	  			printf("stanbycurrent_after: %ld\r\n", stanby_value);
 8000878:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800087a:	4845      	ldr	r0, [pc, #276]	; (8000990 <main+0x63c>)
 800087c:	f004 fc46 	bl	800510c <iprintf>

	  			 //tmc2209_writeInt(&TMC2209, TMC2209_CHOPCONF, 0x00);

	  			  //value = tmc2209_readInt(&TMC2209, TMC2209_CHOPCONF);

	  		  		  rxbuf[0]=0;
 8000880:	2300      	movs	r3, #0
 8000882:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8000886:	e5d8      	b.n	800043a <main+0xe6>
	  		  	  }
	  		  else if(rxbuf[0] == '5'){
 8000888:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800088c:	2b35      	cmp	r3, #53	; 0x35
 800088e:	f040 8081 	bne.w	8000994 <main+0x640>
	  			  //tmc2209_writeInt(&TMC2209, TMC2209_ENN_MASK, 1);
	  			  //tmc2209_writeInt(&TMC2209, TMC2209_ENN_SHIFT, 1);
	  			  //HAL_UART_Transmit(&huart2,(uint8_t *)front, sizeof(front),3000);
	  			  //HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,SET);
	  			  int32_t value = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	667b      	str	r3, [r7, #100]	; 0x64
	  			  int32_t stanby_value = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	663b      	str	r3, [r7, #96]	; 0x60

	  			  value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 800089a:	2110      	movs	r1, #16
 800089c:	4836      	ldr	r0, [pc, #216]	; (8000978 <main+0x624>)
 800089e:	f004 fa68 	bl	8004d72 <tmc2209_readInt>
 80008a2:	4603      	mov	r3, r0
 80008a4:	121b      	asrs	r3, r3, #8
 80008a6:	f003 031f 	and.w	r3, r3, #31
 80008aa:	667b      	str	r3, [r7, #100]	; 0x64
	  			  printf("maxumum_before: %ld\r\n", value);
 80008ac:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80008ae:	4835      	ldr	r0, [pc, #212]	; (8000984 <main+0x630>)
 80008b0:	f004 fc2c 	bl	800510c <iprintf>
	  			  value = 20;
 80008b4:	2314      	movs	r3, #20
 80008b6:	667b      	str	r3, [r7, #100]	; 0x64
	  			  TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT, value);
 80008b8:	2110      	movs	r1, #16
 80008ba:	482f      	ldr	r0, [pc, #188]	; (8000978 <main+0x624>)
 80008bc:	f004 fa59 	bl	8004d72 <tmc2209_readInt>
 80008c0:	4603      	mov	r3, r0
 80008c2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80008c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008c8:	021b      	lsls	r3, r3, #8
 80008ca:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80008ce:	4313      	orrs	r3, r2
 80008d0:	461a      	mov	r2, r3
 80008d2:	2110      	movs	r1, #16
 80008d4:	4828      	ldr	r0, [pc, #160]	; (8000978 <main+0x624>)
 80008d6:	f004 f9fc 	bl	8004cd2 <tmc2209_writeInt>
	  			  tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80008da:	f000 fc77 	bl	80011cc <HAL_GetTick>
 80008de:	4603      	mov	r3, r0
 80008e0:	4619      	mov	r1, r3
 80008e2:	4825      	ldr	r0, [pc, #148]	; (8000978 <main+0x624>)
 80008e4:	f004 fb7b 	bl	8004fde <tmc2209_periodicJob>
	  			  HAL_Delay(200);
 80008e8:	20c8      	movs	r0, #200	; 0xc8
 80008ea:	f000 fc7b 	bl	80011e4 <HAL_Delay>
	  			  value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 80008ee:	2110      	movs	r1, #16
 80008f0:	4821      	ldr	r0, [pc, #132]	; (8000978 <main+0x624>)
 80008f2:	f004 fa3e 	bl	8004d72 <tmc2209_readInt>
 80008f6:	4603      	mov	r3, r0
 80008f8:	121b      	asrs	r3, r3, #8
 80008fa:	f003 031f 	and.w	r3, r3, #31
 80008fe:	667b      	str	r3, [r7, #100]	; 0x64
	  			  printf("maxumum_after: %ld\r\n", value);
 8000900:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000902:	4821      	ldr	r0, [pc, #132]	; (8000988 <main+0x634>)
 8000904:	f004 fc02 	bl	800510c <iprintf>

	  			  stanby_value=TMC2209_FIELD_READ(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);
 8000908:	2110      	movs	r1, #16
 800090a:	481b      	ldr	r0, [pc, #108]	; (8000978 <main+0x624>)
 800090c:	f004 fa31 	bl	8004d72 <tmc2209_readInt>
 8000910:	4603      	mov	r3, r0
 8000912:	f003 031f 	and.w	r3, r3, #31
 8000916:	663b      	str	r3, [r7, #96]	; 0x60
	  			  printf("stanbycurrent_before: %ld\r\n", stanby_value);
 8000918:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800091a:	481c      	ldr	r0, [pc, #112]	; (800098c <main+0x638>)
 800091c:	f004 fbf6 	bl	800510c <iprintf>
	  			  stanby_value = 20;
 8000920:	2314      	movs	r3, #20
 8000922:	663b      	str	r3, [r7, #96]	; 0x60
	  			  TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, stanby_value);
 8000924:	2110      	movs	r1, #16
 8000926:	4814      	ldr	r0, [pc, #80]	; (8000978 <main+0x624>)
 8000928:	f004 fa23 	bl	8004d72 <tmc2209_readInt>
 800092c:	4603      	mov	r3, r0
 800092e:	f023 021f 	bic.w	r2, r3, #31
 8000932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000934:	f003 031f 	and.w	r3, r3, #31
 8000938:	4313      	orrs	r3, r2
 800093a:	461a      	mov	r2, r3
 800093c:	2110      	movs	r1, #16
 800093e:	480e      	ldr	r0, [pc, #56]	; (8000978 <main+0x624>)
 8000940:	f004 f9c7 	bl	8004cd2 <tmc2209_writeInt>
	  			  tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000944:	f000 fc42 	bl	80011cc <HAL_GetTick>
 8000948:	4603      	mov	r3, r0
 800094a:	4619      	mov	r1, r3
 800094c:	480a      	ldr	r0, [pc, #40]	; (8000978 <main+0x624>)
 800094e:	f004 fb46 	bl	8004fde <tmc2209_periodicJob>
	  			  HAL_Delay(200);
 8000952:	20c8      	movs	r0, #200	; 0xc8
 8000954:	f000 fc46 	bl	80011e4 <HAL_Delay>
	  			  stanby_value=TMC2209_FIELD_READ(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);
 8000958:	2110      	movs	r1, #16
 800095a:	4807      	ldr	r0, [pc, #28]	; (8000978 <main+0x624>)
 800095c:	f004 fa09 	bl	8004d72 <tmc2209_readInt>
 8000960:	4603      	mov	r3, r0
 8000962:	f003 031f 	and.w	r3, r3, #31
 8000966:	663b      	str	r3, [r7, #96]	; 0x60
	  			  printf("stanbycurrent_after: %ld\r\n", stanby_value);
 8000968:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800096a:	4809      	ldr	r0, [pc, #36]	; (8000990 <main+0x63c>)
 800096c:	f004 fbce 	bl	800510c <iprintf>
	  			  //value = tmc2209_readInt(&TMC2209, TMC2209_CHOPCONF);

//	  			  value=TMC2209_FIELD_READ(&TMC2209, TMC2209_DRVSTATUS, TMC2209_CS_ACTUAL_MASK, TMC2209_CS_ACTUAL_SHIFT);
//	  			  printf("tmc2209_current: %ld\r\n", value);
//	  			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,SET);
	  			  rxbuf[0]=0;
 8000970:	2300      	movs	r3, #0
 8000972:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8000976:	e560      	b.n	800043a <main+0xe6>
 8000978:	200001e0 	.word	0x200001e0
 800097c:	0800630c 	.word	0x0800630c
 8000980:	08006320 	.word	0x08006320
 8000984:	08006368 	.word	0x08006368
 8000988:	08006380 	.word	0x08006380
 800098c:	08006398 	.word	0x08006398
 8000990:	080063b4 	.word	0x080063b4
	  		  }
	  		  else if(rxbuf[0] == '6'){
 8000994:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000998:	2b36      	cmp	r3, #54	; 0x36
 800099a:	d172      	bne.n	8000a82 <main+0x72e>

	  			  value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK, TMC2209_EN_SPREADCYCLE_SHIFT);
	  			  printf("TMC2209_FIELD_READ_after : %ld\r\n", value);*/
	  			  //value = tmc2209_readInt(&TMC2209, TMC2209_CHOPCONF);
	  			  //value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
	  			  int32_t value = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	66fb      	str	r3, [r7, #108]	; 0x6c
	  			  int32_t stanby_value = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	66bb      	str	r3, [r7, #104]	; 0x68

	  			  value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 80009a4:	2110      	movs	r1, #16
 80009a6:	483c      	ldr	r0, [pc, #240]	; (8000a98 <main+0x744>)
 80009a8:	f004 f9e3 	bl	8004d72 <tmc2209_readInt>
 80009ac:	4603      	mov	r3, r0
 80009ae:	121b      	asrs	r3, r3, #8
 80009b0:	f003 031f 	and.w	r3, r3, #31
 80009b4:	66fb      	str	r3, [r7, #108]	; 0x6c
	  			  printf("maxumum_before: %ld\r\n", value);
 80009b6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80009b8:	4838      	ldr	r0, [pc, #224]	; (8000a9c <main+0x748>)
 80009ba:	f004 fba7 	bl	800510c <iprintf>
	  			  value = 30;
 80009be:	231e      	movs	r3, #30
 80009c0:	66fb      	str	r3, [r7, #108]	; 0x6c
	  			  TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT, value);
 80009c2:	2110      	movs	r1, #16
 80009c4:	4834      	ldr	r0, [pc, #208]	; (8000a98 <main+0x744>)
 80009c6:	f004 f9d4 	bl	8004d72 <tmc2209_readInt>
 80009ca:	4603      	mov	r3, r0
 80009cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80009d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009d2:	021b      	lsls	r3, r3, #8
 80009d4:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80009d8:	4313      	orrs	r3, r2
 80009da:	461a      	mov	r2, r3
 80009dc:	2110      	movs	r1, #16
 80009de:	482e      	ldr	r0, [pc, #184]	; (8000a98 <main+0x744>)
 80009e0:	f004 f977 	bl	8004cd2 <tmc2209_writeInt>
	  			  tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80009e4:	f000 fbf2 	bl	80011cc <HAL_GetTick>
 80009e8:	4603      	mov	r3, r0
 80009ea:	4619      	mov	r1, r3
 80009ec:	482a      	ldr	r0, [pc, #168]	; (8000a98 <main+0x744>)
 80009ee:	f004 faf6 	bl	8004fde <tmc2209_periodicJob>
	  			  HAL_Delay(200);
 80009f2:	20c8      	movs	r0, #200	; 0xc8
 80009f4:	f000 fbf6 	bl	80011e4 <HAL_Delay>
	  			  value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 80009f8:	2110      	movs	r1, #16
 80009fa:	4827      	ldr	r0, [pc, #156]	; (8000a98 <main+0x744>)
 80009fc:	f004 f9b9 	bl	8004d72 <tmc2209_readInt>
 8000a00:	4603      	mov	r3, r0
 8000a02:	121b      	asrs	r3, r3, #8
 8000a04:	f003 031f 	and.w	r3, r3, #31
 8000a08:	66fb      	str	r3, [r7, #108]	; 0x6c
	  			  printf("maxumum_after: %ld\r\n", value);
 8000a0a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000a0c:	4824      	ldr	r0, [pc, #144]	; (8000aa0 <main+0x74c>)
 8000a0e:	f004 fb7d 	bl	800510c <iprintf>

	  			  stanby_value=TMC2209_FIELD_READ(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);
 8000a12:	2110      	movs	r1, #16
 8000a14:	4820      	ldr	r0, [pc, #128]	; (8000a98 <main+0x744>)
 8000a16:	f004 f9ac 	bl	8004d72 <tmc2209_readInt>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	f003 031f 	and.w	r3, r3, #31
 8000a20:	66bb      	str	r3, [r7, #104]	; 0x68
	  			  printf("stanbycurrent_before: %ld\r\n", stanby_value);
 8000a22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000a24:	481f      	ldr	r0, [pc, #124]	; (8000aa4 <main+0x750>)
 8000a26:	f004 fb71 	bl	800510c <iprintf>
	  			  stanby_value = 30;
 8000a2a:	231e      	movs	r3, #30
 8000a2c:	66bb      	str	r3, [r7, #104]	; 0x68
	  			  TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, stanby_value);
 8000a2e:	2110      	movs	r1, #16
 8000a30:	4819      	ldr	r0, [pc, #100]	; (8000a98 <main+0x744>)
 8000a32:	f004 f99e 	bl	8004d72 <tmc2209_readInt>
 8000a36:	4603      	mov	r3, r0
 8000a38:	f023 021f 	bic.w	r2, r3, #31
 8000a3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a3e:	f003 031f 	and.w	r3, r3, #31
 8000a42:	4313      	orrs	r3, r2
 8000a44:	461a      	mov	r2, r3
 8000a46:	2110      	movs	r1, #16
 8000a48:	4813      	ldr	r0, [pc, #76]	; (8000a98 <main+0x744>)
 8000a4a:	f004 f942 	bl	8004cd2 <tmc2209_writeInt>
	  			  tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000a4e:	f000 fbbd 	bl	80011cc <HAL_GetTick>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4619      	mov	r1, r3
 8000a56:	4810      	ldr	r0, [pc, #64]	; (8000a98 <main+0x744>)
 8000a58:	f004 fac1 	bl	8004fde <tmc2209_periodicJob>
	  			  HAL_Delay(200);
 8000a5c:	20c8      	movs	r0, #200	; 0xc8
 8000a5e:	f000 fbc1 	bl	80011e4 <HAL_Delay>
	  			  stanby_value=TMC2209_FIELD_READ(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);
 8000a62:	2110      	movs	r1, #16
 8000a64:	480c      	ldr	r0, [pc, #48]	; (8000a98 <main+0x744>)
 8000a66:	f004 f984 	bl	8004d72 <tmc2209_readInt>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	f003 031f 	and.w	r3, r3, #31
 8000a70:	66bb      	str	r3, [r7, #104]	; 0x68
	  			  printf("stanbycurrent_after: %ld\r\n", stanby_value);
 8000a72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <main+0x754>)
 8000a76:	f004 fb49 	bl	800510c <iprintf>

	  		  	  rxbuf[0]=0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8000a80:	e4db      	b.n	800043a <main+0xe6>
	  		  	  }
	  		  else{
	  			  HAL_UART_Transmit(&huart2,(uint8_t *)nonans, sizeof(nonans),3000);
 8000a82:	1d39      	adds	r1, r7, #4
 8000a84:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a88:	2212      	movs	r2, #18
 8000a8a:	4808      	ldr	r0, [pc, #32]	; (8000aac <main+0x758>)
 8000a8c:	f002 ff2e 	bl	80038ec <HAL_UART_Transmit>
	  			  rxbuf[0]=0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	  HAL_UART_Receive(&huart2,(uint8_t *)rxbuf, sizeof(rxbuf), 100);
 8000a96:	e4d0      	b.n	800043a <main+0xe6>
 8000a98:	200001e0 	.word	0x200001e0
 8000a9c:	08006368 	.word	0x08006368
 8000aa0:	08006380 	.word	0x08006380
 8000aa4:	08006398 	.word	0x08006398
 8000aa8:	080063b4 	.word	0x080063b4
 8000aac:	2000015c 	.word	0x2000015c

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b096      	sub	sp, #88	; 0x58
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aba:	2228      	movs	r2, #40	; 0x28
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f004 fb1c 	bl	80050fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]
 8000ae2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aec:	2310      	movs	r3, #16
 8000aee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af0:	2302      	movs	r3, #2
 8000af2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000af4:	2300      	movs	r3, #0
 8000af6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000af8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000afc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 fea4 	bl	8001850 <HAL_RCC_OscConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000b0e:	f000 f933 	bl	8000d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b12:	230f      	movs	r3, #15
 8000b14:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b16:	2302      	movs	r3, #2
 8000b18:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 fecc 	bl	80028cc <HAL_RCC_ClockConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b3a:	f000 f91d 	bl	8000d78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f002 f8f5 	bl	8002d38 <HAL_RCCEx_PeriphCLKConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000b54:	f000 f910 	bl	8000d78 <Error_Handler>
  }
}
 8000b58:	bf00      	nop
 8000b5a:	3758      	adds	r7, #88	; 0x58
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <MX_TIM3_Init+0x94>)
 8000b80:	4a1d      	ldr	r2, [pc, #116]	; (8000bf8 <MX_TIM3_Init+0x98>)
 8000b82:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <MX_TIM3_Init+0x94>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <MX_TIM3_Init+0x94>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <MX_TIM3_Init+0x94>)
 8000b92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <MX_TIM3_Init+0x94>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_TIM3_Init+0x94>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ba4:	4813      	ldr	r0, [pc, #76]	; (8000bf4 <MX_TIM3_Init+0x94>)
 8000ba6:	f002 f9ed 	bl	8002f84 <HAL_TIM_Base_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000bb0:	f000 f8e2 	bl	8000d78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bba:	f107 0310 	add.w	r3, r7, #16
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <MX_TIM3_Init+0x94>)
 8000bc2:	f002 fb55 	bl	8003270 <HAL_TIM_ConfigClockSource>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000bcc:	f000 f8d4 	bl	8000d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_TIM3_Init+0x94>)
 8000bde:	f002 fd55 	bl	800368c <HAL_TIMEx_MasterConfigSynchronization>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000be8:	f000 f8c6 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	3720      	adds	r7, #32
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	2000008c 	.word	0x2000008c
 8000bf8:	40000400 	.word	0x40000400

08000bfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c02:	4a15      	ldr	r2, [pc, #84]	; (8000c58 <MX_USART1_UART_Init+0x5c>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c40:	f002 fdfe 	bl	8003840 <HAL_HalfDuplex_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c4a:	f000 f895 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200000d8 	.word	0x200000d8
 8000c58:	40013800 	.word	0x40013800

08000c5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c62:	4a15      	ldr	r2, [pc, #84]	; (8000cb8 <MX_USART2_UART_Init+0x5c>)
 8000c64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c82:	220c      	movs	r2, #12
 8000c84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000ca0:	f002 fd80 	bl	80037a4 <HAL_UART_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000caa:	f000 f865 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	2000015c 	.word	0x2000015c
 8000cb8:	40004400 	.word	0x40004400

08000cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <MX_GPIO_Init+0x8c>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	4a1c      	ldr	r2, [pc, #112]	; (8000d48 <MX_GPIO_Init+0x8c>)
 8000cd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cdc:	6153      	str	r3, [r2, #20]
 8000cde:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MX_GPIO_Init+0x8c>)
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <MX_GPIO_Init+0x8c>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	4a16      	ldr	r2, [pc, #88]	; (8000d48 <MX_GPIO_Init+0x8c>)
 8000cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf4:	6153      	str	r3, [r2, #20]
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_GPIO_Init+0x8c>)
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_GPIO_Init+0x8c>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <MX_GPIO_Init+0x8c>)
 8000d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d0c:	6153      	str	r3, [r2, #20]
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_GPIO_Init+0x8c>)
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2170      	movs	r1, #112	; 0x70
 8000d1e:	480b      	ldr	r0, [pc, #44]	; (8000d4c <MX_GPIO_Init+0x90>)
 8000d20:	f000 fd7e 	bl	8001820 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000d24:	2370      	movs	r3, #112	; 0x70
 8000d26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4804      	ldr	r0, [pc, #16]	; (8000d4c <MX_GPIO_Init+0x90>)
 8000d3c:	f000 fbfe 	bl	800153c <HAL_GPIO_Init>

}
 8000d40:	bf00      	nop
 8000d42:	3720      	adds	r7, #32
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	48000400 	.word	0x48000400

08000d50 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	230a      	movs	r3, #10
 8000d62:	68b9      	ldr	r1, [r7, #8]
 8000d64:	4803      	ldr	r0, [pc, #12]	; (8000d74 <_write+0x24>)
 8000d66:	f002 fdc1 	bl	80038ec <HAL_UART_Transmit>
  return len;
 8000d6a:	687b      	ldr	r3, [r7, #4]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000015c 	.word	0x2000015c

08000d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7c:	b672      	cpsid	i
}
 8000d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <Error_Handler+0x8>
	...

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6193      	str	r3, [r2, #24]
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <HAL_MspInit+0x44>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <HAL_MspInit+0x44>)
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dac:	61d3      	str	r3, [r2, #28]
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_MspInit+0x44>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40021000 	.word	0x40021000

08000dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <HAL_TIM_Base_MspInit+0x44>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d113      	bne.n	8000e06 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <HAL_TIM_Base_MspInit+0x48>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	4a0c      	ldr	r2, [pc, #48]	; (8000e14 <HAL_TIM_Base_MspInit+0x48>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	61d3      	str	r3, [r2, #28]
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_TIM_Base_MspInit+0x48>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	201d      	movs	r0, #29
 8000dfc:	f000 faf1 	bl	80013e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e00:	201d      	movs	r0, #29
 8000e02:	f000 fb0a 	bl	800141a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40000400 	.word	0x40000400
 8000e14:	40021000 	.word	0x40021000

08000e18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08c      	sub	sp, #48	; 0x30
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a34      	ldr	r2, [pc, #208]	; (8000f08 <HAL_UART_MspInit+0xf0>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d12a      	bne.n	8000e90 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e3a:	4b34      	ldr	r3, [pc, #208]	; (8000f0c <HAL_UART_MspInit+0xf4>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	4a33      	ldr	r2, [pc, #204]	; (8000f0c <HAL_UART_MspInit+0xf4>)
 8000e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e44:	6193      	str	r3, [r2, #24]
 8000e46:	4b31      	ldr	r3, [pc, #196]	; (8000f0c <HAL_UART_MspInit+0xf4>)
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4e:	61bb      	str	r3, [r7, #24]
 8000e50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	4b2e      	ldr	r3, [pc, #184]	; (8000f0c <HAL_UART_MspInit+0xf4>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	4a2d      	ldr	r2, [pc, #180]	; (8000f0c <HAL_UART_MspInit+0xf4>)
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5c:	6153      	str	r3, [r2, #20]
 8000e5e:	4b2b      	ldr	r3, [pc, #172]	; (8000f0c <HAL_UART_MspInit+0xf4>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e70:	2312      	movs	r3, #18
 8000e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e7c:	2307      	movs	r3, #7
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8a:	f000 fb57 	bl	800153c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e8e:	e036      	b.n	8000efe <HAL_UART_MspInit+0xe6>
  else if(huart->Instance==USART2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a1e      	ldr	r2, [pc, #120]	; (8000f10 <HAL_UART_MspInit+0xf8>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d131      	bne.n	8000efe <HAL_UART_MspInit+0xe6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <HAL_UART_MspInit+0xf4>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <HAL_UART_MspInit+0xf4>)
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea4:	61d3      	str	r3, [r2, #28]
 8000ea6:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <HAL_UART_MspInit+0xf4>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_UART_MspInit+0xf4>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	4a15      	ldr	r2, [pc, #84]	; (8000f0c <HAL_UART_MspInit+0xf4>)
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ebc:	6153      	str	r3, [r2, #20]
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_UART_MspInit+0xf4>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000eca:	f248 0304 	movw	r3, #32772	; 0x8004
 8000ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000edc:	2307      	movs	r3, #7
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eea:	f000 fb27 	bl	800153c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2026      	movs	r0, #38	; 0x26
 8000ef4:	f000 fa75 	bl	80013e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ef8:	2026      	movs	r0, #38	; 0x26
 8000efa:	f000 fa8e 	bl	800141a <HAL_NVIC_EnableIRQ>
}
 8000efe:	bf00      	nop
 8000f00:	3730      	adds	r7, #48	; 0x30
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40013800 	.word	0x40013800
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40004400 	.word	0x40004400

08000f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <NMI_Handler+0x4>

08000f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <HardFault_Handler+0x4>

08000f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <MemManage_Handler+0x4>

08000f26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <BusFault_Handler+0x4>

08000f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <UsageFault_Handler+0x4>

08000f32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f60:	f000 f920 	bl	80011a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <TIM3_IRQHandler+0x10>)
 8000f6e:	f002 f860 	bl	8003032 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	2000008c 	.word	0x2000008c

08000f7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <USART2_IRQHandler+0x10>)
 8000f82:	f002 fe19 	bl	8003bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000015c 	.word	0x2000015c

08000f90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	e00a      	b.n	8000fb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fa2:	f3af 8000 	nop.w
 8000fa6:	4601      	mov	r1, r0
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	1c5a      	adds	r2, r3, #1
 8000fac:	60ba      	str	r2, [r7, #8]
 8000fae:	b2ca      	uxtb	r2, r1
 8000fb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	dbf0      	blt.n	8000fa2 <_read+0x12>
	}

return len;
 8000fc0:	687b      	ldr	r3, [r7, #4]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <_close>:
	}
	return len;
}

int _close(int file)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
	return -1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ff2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <_isatty>:

int _isatty(int file)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
	return 1;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
	return 0;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800103c:	4a14      	ldr	r2, [pc, #80]	; (8001090 <_sbrk+0x5c>)
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <_sbrk+0x60>)
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001048:	4b13      	ldr	r3, [pc, #76]	; (8001098 <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d102      	bne.n	8001056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <_sbrk+0x64>)
 8001052:	4a12      	ldr	r2, [pc, #72]	; (800109c <_sbrk+0x68>)
 8001054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	429a      	cmp	r2, r3
 8001062:	d207      	bcs.n	8001074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001064:	f004 f820 	bl	80050a8 <__errno>
 8001068:	4603      	mov	r3, r0
 800106a:	220c      	movs	r2, #12
 800106c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001072:	e009      	b.n	8001088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	4a05      	ldr	r2, [pc, #20]	; (8001098 <_sbrk+0x64>)
 8001084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001086:	68fb      	ldr	r3, [r7, #12]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20003000 	.word	0x20003000
 8001094:	00000400 	.word	0x00000400
 8001098:	2000067c 	.word	0x2000067c
 800109c:	20000898 	.word	0x20000898

080010a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <SystemInit+0x20>)
 80010a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010aa:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <SystemInit+0x20>)
 80010ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ca:	490e      	ldr	r1, [pc, #56]	; (8001104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010cc:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <LoopForever+0xe>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d0:	e002      	b.n	80010d8 <LoopCopyDataInit>

080010d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d6:	3304      	adds	r3, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010dc:	d3f9      	bcc.n	80010d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010de:	4a0b      	ldr	r2, [pc, #44]	; (800110c <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e0:	4c0b      	ldr	r4, [pc, #44]	; (8001110 <LoopForever+0x16>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e4:	e001      	b.n	80010ea <LoopFillZerobss>

080010e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e8:	3204      	adds	r2, #4

080010ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ec:	d3fb      	bcc.n	80010e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010ee:	f7ff ffd7 	bl	80010a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f2:	f003 ffdf 	bl	80050b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010f6:	f7ff f92d 	bl	8000354 <main>

080010fa <LoopForever>:

LoopForever:
    b LoopForever
 80010fa:	e7fe      	b.n	80010fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010fc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001104:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001108:	0800676c 	.word	0x0800676c
  ldr r2, =_sbss
 800110c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001110:	20000898 	.word	0x20000898

08001114 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC1_2_IRQHandler>
	...

08001118 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <HAL_Init+0x28>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a07      	ldr	r2, [pc, #28]	; (8001140 <HAL_Init+0x28>)
 8001122:	f043 0310 	orr.w	r3, r3, #16
 8001126:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001128:	2003      	movs	r0, #3
 800112a:	f000 f94f 	bl	80013cc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112e:	2000      	movs	r0, #0
 8001130:	f000 f808 	bl	8001144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001134:	f7ff fe26 	bl	8000d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40022000 	.word	0x40022000

08001144 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_InitTick+0x54>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x58>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115a:	fbb3 f3f1 	udiv	r3, r3, r1
 800115e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f967 	bl	8001436 <HAL_SYSTICK_Config>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e00e      	b.n	8001190 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b0f      	cmp	r3, #15
 8001176:	d80a      	bhi.n	800118e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001178:	2200      	movs	r2, #0
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001180:	f000 f92f 	bl	80013e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <HAL_InitTick+0x5c>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	e000      	b.n	8001190 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000000 	.word	0x20000000
 800119c:	20000008 	.word	0x20000008
 80011a0:	20000004 	.word	0x20000004

080011a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_IncTick+0x20>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_IncTick+0x24>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <HAL_IncTick+0x24>)
 80011b6:	6013      	str	r3, [r2, #0]
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000008 	.word	0x20000008
 80011c8:	20000680 	.word	0x20000680

080011cc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return uwTick;  
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <HAL_GetTick+0x14>)
 80011d2:	681b      	ldr	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000680 	.word	0x20000680

080011e4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ec:	f7ff ffee 	bl	80011cc <HAL_GetTick>
 80011f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011fc:	d005      	beq.n	800120a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_Delay+0x44>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800120a:	bf00      	nop
 800120c:	f7ff ffde 	bl	80011cc <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	429a      	cmp	r2, r3
 800121a:	d8f7      	bhi.n	800120c <HAL_Delay+0x28>
  {
  }
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000008 	.word	0x20000008

0800122c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001248:	4013      	ands	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125e:	4a04      	ldr	r2, [pc, #16]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	60d3      	str	r3, [r2, #12]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <__NVIC_GetPriorityGrouping+0x18>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	f003 0307 	and.w	r3, r3, #7
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	db0b      	blt.n	80012ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	f003 021f 	and.w	r2, r3, #31
 80012a8:	4907      	ldr	r1, [pc, #28]	; (80012c8 <__NVIC_EnableIRQ+0x38>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	095b      	lsrs	r3, r3, #5
 80012b0:	2001      	movs	r0, #1
 80012b2:	fa00 f202 	lsl.w	r2, r0, r2
 80012b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000e100 	.word	0xe000e100

080012cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db0a      	blt.n	80012f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	490c      	ldr	r1, [pc, #48]	; (8001318 <__NVIC_SetPriority+0x4c>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	0112      	lsls	r2, r2, #4
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	440b      	add	r3, r1
 80012f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f4:	e00a      	b.n	800130c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4908      	ldr	r1, [pc, #32]	; (800131c <__NVIC_SetPriority+0x50>)
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	3b04      	subs	r3, #4
 8001304:	0112      	lsls	r2, r2, #4
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	440b      	add	r3, r1
 800130a:	761a      	strb	r2, [r3, #24]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000e100 	.word	0xe000e100
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f1c3 0307 	rsb	r3, r3, #7
 800133a:	2b04      	cmp	r3, #4
 800133c:	bf28      	it	cs
 800133e:	2304      	movcs	r3, #4
 8001340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3304      	adds	r3, #4
 8001346:	2b06      	cmp	r3, #6
 8001348:	d902      	bls.n	8001350 <NVIC_EncodePriority+0x30>
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3b03      	subs	r3, #3
 800134e:	e000      	b.n	8001352 <NVIC_EncodePriority+0x32>
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	401a      	ands	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001368:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	43d9      	mvns	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	4313      	orrs	r3, r2
         );
}
 800137a:	4618      	mov	r0, r3
 800137c:	3724      	adds	r7, #36	; 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001398:	d301      	bcc.n	800139e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139a:	2301      	movs	r3, #1
 800139c:	e00f      	b.n	80013be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <SysTick_Config+0x40>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a6:	210f      	movs	r1, #15
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013ac:	f7ff ff8e 	bl	80012cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <SysTick_Config+0x40>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <SysTick_Config+0x40>)
 80013b8:	2207      	movs	r2, #7
 80013ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	e000e010 	.word	0xe000e010

080013cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff29 	bl	800122c <__NVIC_SetPriorityGrouping>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f4:	f7ff ff3e 	bl	8001274 <__NVIC_GetPriorityGrouping>
 80013f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	6978      	ldr	r0, [r7, #20]
 8001400:	f7ff ff8e 	bl	8001320 <NVIC_EncodePriority>
 8001404:	4602      	mov	r2, r0
 8001406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff5d 	bl	80012cc <__NVIC_SetPriority>
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff31 	bl	8001290 <__NVIC_EnableIRQ>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ffa2 	bl	8001388 <SysTick_Config>
 8001444:	4603      	mov	r3, r0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800145c:	2b02      	cmp	r3, #2
 800145e:	d008      	beq.n	8001472 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2204      	movs	r2, #4
 8001464:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e020      	b.n	80014b4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 020e 	bic.w	r2, r2, #14
 8001480:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0201 	bic.w	r2, r2, #1
 8001490:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149a:	2101      	movs	r1, #1
 800149c:	fa01 f202 	lsl.w	r2, r1, r2
 80014a0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d005      	beq.n	80014e2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2204      	movs	r2, #4
 80014da:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	73fb      	strb	r3, [r7, #15]
 80014e0:	e027      	b.n	8001532 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 020e 	bic.w	r2, r2, #14
 80014f0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0201 	bic.w	r2, r2, #1
 8001500:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150a:	2101      	movs	r1, #1
 800150c:	fa01 f202 	lsl.w	r2, r1, r2
 8001510:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	4798      	blx	r3
    } 
  }
  return status;
 8001532:	7bfb      	ldrb	r3, [r7, #15]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800153c:	b480      	push	{r7}
 800153e:	b087      	sub	sp, #28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800154a:	e14e      	b.n	80017ea <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	2101      	movs	r1, #1
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	fa01 f303 	lsl.w	r3, r1, r3
 8001558:	4013      	ands	r3, r2
 800155a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 8140 	beq.w	80017e4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b01      	cmp	r3, #1
 800156e:	d005      	beq.n	800157c <HAL_GPIO_Init+0x40>
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d130      	bne.n	80015de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	2203      	movs	r2, #3
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68da      	ldr	r2, [r3, #12]
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b2:	2201      	movs	r2, #1
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	091b      	lsrs	r3, r3, #4
 80015c8:	f003 0201 	and.w	r2, r3, #1
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d017      	beq.n	800161a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	2203      	movs	r2, #3
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d123      	bne.n	800166e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	08da      	lsrs	r2, r3, #3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3208      	adds	r2, #8
 800162e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001632:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	220f      	movs	r2, #15
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	691a      	ldr	r2, [r3, #16]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	08da      	lsrs	r2, r3, #3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3208      	adds	r2, #8
 8001668:	6939      	ldr	r1, [r7, #16]
 800166a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	2203      	movs	r2, #3
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 0203 	and.w	r2, r3, #3
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 809a 	beq.w	80017e4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b0:	4b55      	ldr	r3, [pc, #340]	; (8001808 <HAL_GPIO_Init+0x2cc>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a54      	ldr	r2, [pc, #336]	; (8001808 <HAL_GPIO_Init+0x2cc>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b52      	ldr	r3, [pc, #328]	; (8001808 <HAL_GPIO_Init+0x2cc>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016c8:	4a50      	ldr	r2, [pc, #320]	; (800180c <HAL_GPIO_Init+0x2d0>)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	3302      	adds	r3, #2
 80016d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	220f      	movs	r2, #15
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016f2:	d013      	beq.n	800171c <HAL_GPIO_Init+0x1e0>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a46      	ldr	r2, [pc, #280]	; (8001810 <HAL_GPIO_Init+0x2d4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d00d      	beq.n	8001718 <HAL_GPIO_Init+0x1dc>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a45      	ldr	r2, [pc, #276]	; (8001814 <HAL_GPIO_Init+0x2d8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d007      	beq.n	8001714 <HAL_GPIO_Init+0x1d8>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a44      	ldr	r2, [pc, #272]	; (8001818 <HAL_GPIO_Init+0x2dc>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d101      	bne.n	8001710 <HAL_GPIO_Init+0x1d4>
 800170c:	2303      	movs	r3, #3
 800170e:	e006      	b.n	800171e <HAL_GPIO_Init+0x1e2>
 8001710:	2305      	movs	r3, #5
 8001712:	e004      	b.n	800171e <HAL_GPIO_Init+0x1e2>
 8001714:	2302      	movs	r3, #2
 8001716:	e002      	b.n	800171e <HAL_GPIO_Init+0x1e2>
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <HAL_GPIO_Init+0x1e2>
 800171c:	2300      	movs	r3, #0
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	f002 0203 	and.w	r2, r2, #3
 8001724:	0092      	lsls	r2, r2, #2
 8001726:	4093      	lsls	r3, r2
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800172e:	4937      	ldr	r1, [pc, #220]	; (800180c <HAL_GPIO_Init+0x2d0>)
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	3302      	adds	r3, #2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800173c:	4b37      	ldr	r3, [pc, #220]	; (800181c <HAL_GPIO_Init+0x2e0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	43db      	mvns	r3, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001760:	4a2e      	ldr	r2, [pc, #184]	; (800181c <HAL_GPIO_Init+0x2e0>)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001766:	4b2d      	ldr	r3, [pc, #180]	; (800181c <HAL_GPIO_Init+0x2e0>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800178a:	4a24      	ldr	r2, [pc, #144]	; (800181c <HAL_GPIO_Init+0x2e0>)
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001790:	4b22      	ldr	r3, [pc, #136]	; (800181c <HAL_GPIO_Init+0x2e0>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	43db      	mvns	r3, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017b4:	4a19      	ldr	r2, [pc, #100]	; (800181c <HAL_GPIO_Init+0x2e0>)
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <HAL_GPIO_Init+0x2e0>)
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017de:	4a0f      	ldr	r2, [pc, #60]	; (800181c <HAL_GPIO_Init+0x2e0>)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	3301      	adds	r3, #1
 80017e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	fa22 f303 	lsr.w	r3, r2, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f47f aea9 	bne.w	800154c <HAL_GPIO_Init+0x10>
  }
}
 80017fa:	bf00      	nop
 80017fc:	bf00      	nop
 80017fe:	371c      	adds	r7, #28
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	40021000 	.word	0x40021000
 800180c:	40010000 	.word	0x40010000
 8001810:	48000400 	.word	0x48000400
 8001814:	48000800 	.word	0x48000800
 8001818:	48000c00 	.word	0x48000c00
 800181c:	40010400 	.word	0x40010400

08001820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	807b      	strh	r3, [r7, #2]
 800182c:	4613      	mov	r3, r2
 800182e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001830:	787b      	ldrb	r3, [r7, #1]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001836:	887a      	ldrh	r2, [r7, #2]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800183c:	e002      	b.n	8001844 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001856:	af00      	add	r7, sp, #0
 8001858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001860:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001866:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	f001 b823 	b.w	80028bc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 817d 	beq.w	8001b86 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800188c:	4bbc      	ldr	r3, [pc, #752]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b04      	cmp	r3, #4
 8001896:	d00c      	beq.n	80018b2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001898:	4bb9      	ldr	r3, [pc, #740]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 030c 	and.w	r3, r3, #12
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d15c      	bne.n	800195e <HAL_RCC_OscConfig+0x10e>
 80018a4:	4bb6      	ldr	r3, [pc, #728]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b0:	d155      	bne.n	800195e <HAL_RCC_OscConfig+0x10e>
 80018b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018b6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80018be:	fa93 f3a3 	rbit	r3, r3
 80018c2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018c6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ca:	fab3 f383 	clz	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	095b      	lsrs	r3, r3, #5
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d102      	bne.n	80018e4 <HAL_RCC_OscConfig+0x94>
 80018de:	4ba8      	ldr	r3, [pc, #672]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	e015      	b.n	8001910 <HAL_RCC_OscConfig+0xc0>
 80018e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018e8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ec:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80018f0:	fa93 f3a3 	rbit	r3, r3
 80018f4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80018f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018fc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001900:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001904:	fa93 f3a3 	rbit	r3, r3
 8001908:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800190c:	4b9c      	ldr	r3, [pc, #624]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001914:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001918:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800191c:	fa92 f2a2 	rbit	r2, r2
 8001920:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001924:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001928:	fab2 f282 	clz	r2, r2
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	f042 0220 	orr.w	r2, r2, #32
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	f002 021f 	and.w	r2, r2, #31
 8001938:	2101      	movs	r1, #1
 800193a:	fa01 f202 	lsl.w	r2, r1, r2
 800193e:	4013      	ands	r3, r2
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 811f 	beq.w	8001b84 <HAL_RCC_OscConfig+0x334>
 8001946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	f040 8116 	bne.w	8001b84 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	f000 bfaf 	b.w	80028bc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800195e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001962:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196e:	d106      	bne.n	800197e <HAL_RCC_OscConfig+0x12e>
 8001970:	4b83      	ldr	r3, [pc, #524]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a82      	ldr	r2, [pc, #520]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 8001976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	e036      	b.n	80019ec <HAL_RCC_OscConfig+0x19c>
 800197e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001982:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x158>
 800198e:	4b7c      	ldr	r3, [pc, #496]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a7b      	ldr	r2, [pc, #492]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 8001994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	4b79      	ldr	r3, [pc, #484]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a78      	ldr	r2, [pc, #480]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 80019a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e021      	b.n	80019ec <HAL_RCC_OscConfig+0x19c>
 80019a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b8:	d10c      	bne.n	80019d4 <HAL_RCC_OscConfig+0x184>
 80019ba:	4b71      	ldr	r3, [pc, #452]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a70      	ldr	r2, [pc, #448]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 80019c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	4b6e      	ldr	r3, [pc, #440]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a6d      	ldr	r2, [pc, #436]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 80019cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e00b      	b.n	80019ec <HAL_RCC_OscConfig+0x19c>
 80019d4:	4b6a      	ldr	r3, [pc, #424]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a69      	ldr	r2, [pc, #420]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 80019da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	4b67      	ldr	r3, [pc, #412]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a66      	ldr	r2, [pc, #408]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 80019e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ea:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ec:	4b64      	ldr	r3, [pc, #400]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	f023 020f 	bic.w	r2, r3, #15
 80019f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	495f      	ldr	r1, [pc, #380]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d059      	beq.n	8001aca <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a16:	f7ff fbd9 	bl	80011cc <HAL_GetTick>
 8001a1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	e00a      	b.n	8001a36 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff fbd4 	bl	80011cc <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b64      	cmp	r3, #100	; 0x64
 8001a2e:	d902      	bls.n	8001a36 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	f000 bf43 	b.w	80028bc <HAL_RCC_OscConfig+0x106c>
 8001a36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a3a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001a4a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	095b      	lsrs	r3, r3, #5
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d102      	bne.n	8001a68 <HAL_RCC_OscConfig+0x218>
 8001a62:	4b47      	ldr	r3, [pc, #284]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	e015      	b.n	8001a94 <HAL_RCC_OscConfig+0x244>
 8001a68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a6c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001a74:	fa93 f3a3 	rbit	r3, r3
 8001a78:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001a7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a80:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001a84:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001a88:	fa93 f3a3 	rbit	r3, r3
 8001a8c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001a90:	4b3b      	ldr	r3, [pc, #236]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a98:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001a9c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001aa0:	fa92 f2a2 	rbit	r2, r2
 8001aa4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001aa8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001aac:	fab2 f282 	clz	r2, r2
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	f042 0220 	orr.w	r2, r2, #32
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	f002 021f 	and.w	r2, r2, #31
 8001abc:	2101      	movs	r1, #1
 8001abe:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0ab      	beq.n	8001a20 <HAL_RCC_OscConfig+0x1d0>
 8001ac8:	e05d      	b.n	8001b86 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aca:	f7ff fb7f 	bl	80011cc <HAL_GetTick>
 8001ace:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad2:	e00a      	b.n	8001aea <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad4:	f7ff fb7a 	bl	80011cc <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b64      	cmp	r3, #100	; 0x64
 8001ae2:	d902      	bls.n	8001aea <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	f000 bee9 	b.w	80028bc <HAL_RCC_OscConfig+0x106c>
 8001aea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aee:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001af6:	fa93 f3a3 	rbit	r3, r3
 8001afa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001afe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b02:	fab3 f383 	clz	r3, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	095b      	lsrs	r3, r3, #5
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d102      	bne.n	8001b1c <HAL_RCC_OscConfig+0x2cc>
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	e015      	b.n	8001b48 <HAL_RCC_OscConfig+0x2f8>
 8001b1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b20:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b24:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001b28:	fa93 f3a3 	rbit	r3, r3
 8001b2c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b34:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b38:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001b3c:	fa93 f3a3 	rbit	r3, r3
 8001b40:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_RCC_OscConfig+0x330>)
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b4c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001b50:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b54:	fa92 f2a2 	rbit	r2, r2
 8001b58:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001b5c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b60:	fab2 f282 	clz	r2, r2
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	f042 0220 	orr.w	r2, r2, #32
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	f002 021f 	and.w	r2, r2, #31
 8001b70:	2101      	movs	r1, #1
 8001b72:	fa01 f202 	lsl.w	r2, r1, r2
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1ab      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x284>
 8001b7c:	e003      	b.n	8001b86 <HAL_RCC_OscConfig+0x336>
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 817d 	beq.w	8001e96 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b9c:	4ba6      	ldr	r3, [pc, #664]	; (8001e38 <HAL_RCC_OscConfig+0x5e8>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00b      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ba8:	4ba3      	ldr	r3, [pc, #652]	; (8001e38 <HAL_RCC_OscConfig+0x5e8>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 030c 	and.w	r3, r3, #12
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d172      	bne.n	8001c9a <HAL_RCC_OscConfig+0x44a>
 8001bb4:	4ba0      	ldr	r3, [pc, #640]	; (8001e38 <HAL_RCC_OscConfig+0x5e8>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d16c      	bne.n	8001c9a <HAL_RCC_OscConfig+0x44a>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001bca:	fa93 f3a3 	rbit	r3, r3
 8001bce:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001bd2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd6:	fab3 f383 	clz	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	095b      	lsrs	r3, r3, #5
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d102      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x3a0>
 8001bea:	4b93      	ldr	r3, [pc, #588]	; (8001e38 <HAL_RCC_OscConfig+0x5e8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	e013      	b.n	8001c18 <HAL_RCC_OscConfig+0x3c8>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001bfa:	fa93 f3a3 	rbit	r3, r3
 8001bfe:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c02:	2302      	movs	r3, #2
 8001c04:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c08:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c0c:	fa93 f3a3 	rbit	r3, r3
 8001c10:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001c14:	4b88      	ldr	r3, [pc, #544]	; (8001e38 <HAL_RCC_OscConfig+0x5e8>)
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	2202      	movs	r2, #2
 8001c1a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001c1e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c22:	fa92 f2a2 	rbit	r2, r2
 8001c26:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001c2a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001c2e:	fab2 f282 	clz	r2, r2
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	f042 0220 	orr.w	r2, r2, #32
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	f002 021f 	and.w	r2, r2, #31
 8001c3e:	2101      	movs	r1, #1
 8001c40:	fa01 f202 	lsl.w	r2, r1, r2
 8001c44:	4013      	ands	r3, r2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00a      	beq.n	8001c60 <HAL_RCC_OscConfig+0x410>
 8001c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d002      	beq.n	8001c60 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f000 be2e 	b.w	80028bc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c60:	4b75      	ldr	r3, [pc, #468]	; (8001e38 <HAL_RCC_OscConfig+0x5e8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	21f8      	movs	r1, #248	; 0xf8
 8001c76:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001c7e:	fa91 f1a1 	rbit	r1, r1
 8001c82:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001c86:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001c8a:	fab1 f181 	clz	r1, r1
 8001c8e:	b2c9      	uxtb	r1, r1
 8001c90:	408b      	lsls	r3, r1
 8001c92:	4969      	ldr	r1, [pc, #420]	; (8001e38 <HAL_RCC_OscConfig+0x5e8>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c98:	e0fd      	b.n	8001e96 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 8088 	beq.w	8001dbc <HAL_RCC_OscConfig+0x56c>
 8001cac:	2301      	movs	r3, #1
 8001cae:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001cb6:	fa93 f3a3 	rbit	r3, r3
 8001cba:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001cbe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc2:	fab3 f383 	clz	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ccc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fa78 	bl	80011cc <HAL_GetTick>
 8001cdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce2:	f7ff fa73 	bl	80011cc <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d902      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	f000 bde2 	b.w	80028bc <HAL_RCC_OscConfig+0x106c>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001d02:	fa93 f3a3 	rbit	r3, r3
 8001d06:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001d0a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0e:	fab3 f383 	clz	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	095b      	lsrs	r3, r3, #5
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d102      	bne.n	8001d28 <HAL_RCC_OscConfig+0x4d8>
 8001d22:	4b45      	ldr	r3, [pc, #276]	; (8001e38 <HAL_RCC_OscConfig+0x5e8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	e013      	b.n	8001d50 <HAL_RCC_OscConfig+0x500>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d32:	fa93 f3a3 	rbit	r3, r3
 8001d36:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d40:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001d44:	fa93 f3a3 	rbit	r3, r3
 8001d48:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001d4c:	4b3a      	ldr	r3, [pc, #232]	; (8001e38 <HAL_RCC_OscConfig+0x5e8>)
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	2202      	movs	r2, #2
 8001d52:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001d56:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d5a:	fa92 f2a2 	rbit	r2, r2
 8001d5e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001d62:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001d66:	fab2 f282 	clz	r2, r2
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	f042 0220 	orr.w	r2, r2, #32
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	f002 021f 	and.w	r2, r2, #31
 8001d76:	2101      	movs	r1, #1
 8001d78:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0af      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d82:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <HAL_RCC_OscConfig+0x5e8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	21f8      	movs	r1, #248	; 0xf8
 8001d98:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001da0:	fa91 f1a1 	rbit	r1, r1
 8001da4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001da8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001dac:	fab1 f181 	clz	r1, r1
 8001db0:	b2c9      	uxtb	r1, r1
 8001db2:	408b      	lsls	r3, r1
 8001db4:	4920      	ldr	r1, [pc, #128]	; (8001e38 <HAL_RCC_OscConfig+0x5e8>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]
 8001dba:	e06c      	b.n	8001e96 <HAL_RCC_OscConfig+0x646>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001dce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd2:	fab3 f383 	clz	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ddc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	461a      	mov	r2, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7ff f9f0 	bl	80011cc <HAL_GetTick>
 8001dec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df0:	e00a      	b.n	8001e08 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df2:	f7ff f9eb 	bl	80011cc <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d902      	bls.n	8001e08 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	f000 bd5a 	b.w	80028bc <HAL_RCC_OscConfig+0x106c>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e12:	fa93 f3a3 	rbit	r3, r3
 8001e16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	095b      	lsrs	r3, r3, #5
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d104      	bne.n	8001e3c <HAL_RCC_OscConfig+0x5ec>
 8001e32:	4b01      	ldr	r3, [pc, #4]	; (8001e38 <HAL_RCC_OscConfig+0x5e8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	e015      	b.n	8001e64 <HAL_RCC_OscConfig+0x614>
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e4e:	2302      	movs	r3, #2
 8001e50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e58:	fa93 f3a3 	rbit	r3, r3
 8001e5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001e60:	4bc8      	ldr	r3, [pc, #800]	; (8002184 <HAL_RCC_OscConfig+0x934>)
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	2202      	movs	r2, #2
 8001e66:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001e6a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e6e:	fa92 f2a2 	rbit	r2, r2
 8001e72:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001e76:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001e7a:	fab2 f282 	clz	r2, r2
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	f042 0220 	orr.w	r2, r2, #32
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	f002 021f 	and.w	r2, r2, #31
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1ad      	bne.n	8001df2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 8110 	beq.w	80020cc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d079      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x760>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed2:	fab3 f383 	clz	r3, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4bab      	ldr	r3, [pc, #684]	; (8002188 <HAL_RCC_OscConfig+0x938>)
 8001edc:	4413      	add	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee6:	f7ff f971 	bl	80011cc <HAL_GetTick>
 8001eea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eee:	e00a      	b.n	8001f06 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef0:	f7ff f96c 	bl	80011cc <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d902      	bls.n	8001f06 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	f000 bcdb 	b.w	80028bc <HAL_RCC_OscConfig+0x106c>
 8001f06:	2302      	movs	r3, #2
 8001f08:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f10:	fa93 f3a3 	rbit	r3, r3
 8001f14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f20:	2202      	movs	r2, #2
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f28:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	fa93 f2a3 	rbit	r2, r3
 8001f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f44:	2202      	movs	r2, #2
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	fa93 f2a3 	rbit	r2, r3
 8001f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f5e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f60:	4b88      	ldr	r3, [pc, #544]	; (8002184 <HAL_RCC_OscConfig+0x934>)
 8001f62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f68:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	6019      	str	r1, [r3, #0]
 8001f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f74:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	fa93 f1a3 	rbit	r1, r3
 8001f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f82:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f86:	6019      	str	r1, [r3, #0]
  return result;
 8001f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0a0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x6a0>
 8001fae:	e08d      	b.n	80020cc <HAL_RCC_OscConfig+0x87c>
 8001fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001fb8:	2201      	movs	r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	fa93 f2a3 	rbit	r2, r3
 8001fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001fd2:	601a      	str	r2, [r3, #0]
  return result;
 8001fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001fdc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b68      	ldr	r3, [pc, #416]	; (8002188 <HAL_RCC_OscConfig+0x938>)
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	461a      	mov	r2, r3
 8001fee:	2300      	movs	r3, #0
 8001ff0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff f8eb 	bl	80011cc <HAL_GetTick>
 8001ff6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffc:	f7ff f8e6 	bl	80011cc <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d902      	bls.n	8002012 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	f000 bc55 	b.w	80028bc <HAL_RCC_OscConfig+0x106c>
 8002012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002016:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800201a:	2202      	movs	r2, #2
 800201c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002022:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	fa93 f2a3 	rbit	r2, r3
 800202c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002030:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800203e:	2202      	movs	r2, #2
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002046:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	fa93 f2a3 	rbit	r2, r3
 8002050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002054:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002062:	2202      	movs	r2, #2
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	fa93 f2a3 	rbit	r2, r3
 8002074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002078:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800207c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800207e:	4b41      	ldr	r3, [pc, #260]	; (8002184 <HAL_RCC_OscConfig+0x934>)
 8002080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002086:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800208a:	2102      	movs	r1, #2
 800208c:	6019      	str	r1, [r3, #0]
 800208e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002092:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	fa93 f1a3 	rbit	r1, r3
 800209c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020a4:	6019      	str	r1, [r3, #0]
  return result;
 80020a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020aa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	fab3 f383 	clz	r3, r3
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	2101      	movs	r1, #1
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d197      	bne.n	8001ffc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 81a1 	beq.w	8002424 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e8:	4b26      	ldr	r3, [pc, #152]	; (8002184 <HAL_RCC_OscConfig+0x934>)
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d116      	bne.n	8002122 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f4:	4b23      	ldr	r3, [pc, #140]	; (8002184 <HAL_RCC_OscConfig+0x934>)
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	4a22      	ldr	r2, [pc, #136]	; (8002184 <HAL_RCC_OscConfig+0x934>)
 80020fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fe:	61d3      	str	r3, [r2, #28]
 8002100:	4b20      	ldr	r3, [pc, #128]	; (8002184 <HAL_RCC_OscConfig+0x934>)
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800211a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800211c:	2301      	movs	r3, #1
 800211e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002122:	4b1a      	ldr	r3, [pc, #104]	; (800218c <HAL_RCC_OscConfig+0x93c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d11a      	bne.n	8002164 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800212e:	4b17      	ldr	r3, [pc, #92]	; (800218c <HAL_RCC_OscConfig+0x93c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a16      	ldr	r2, [pc, #88]	; (800218c <HAL_RCC_OscConfig+0x93c>)
 8002134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002138:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213a:	f7ff f847 	bl	80011cc <HAL_GetTick>
 800213e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002142:	e009      	b.n	8002158 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002144:	f7ff f842 	bl	80011cc <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b64      	cmp	r3, #100	; 0x64
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e3b1      	b.n	80028bc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <HAL_RCC_OscConfig+0x93c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0ef      	beq.n	8002144 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002168:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d10d      	bne.n	8002190 <HAL_RCC_OscConfig+0x940>
 8002174:	4b03      	ldr	r3, [pc, #12]	; (8002184 <HAL_RCC_OscConfig+0x934>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	4a02      	ldr	r2, [pc, #8]	; (8002184 <HAL_RCC_OscConfig+0x934>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6213      	str	r3, [r2, #32]
 8002180:	e03c      	b.n	80021fc <HAL_RCC_OscConfig+0x9ac>
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	10908120 	.word	0x10908120
 800218c:	40007000 	.word	0x40007000
 8002190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002194:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10c      	bne.n	80021ba <HAL_RCC_OscConfig+0x96a>
 80021a0:	4bc1      	ldr	r3, [pc, #772]	; (80024a8 <HAL_RCC_OscConfig+0xc58>)
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	4ac0      	ldr	r2, [pc, #768]	; (80024a8 <HAL_RCC_OscConfig+0xc58>)
 80021a6:	f023 0301 	bic.w	r3, r3, #1
 80021aa:	6213      	str	r3, [r2, #32]
 80021ac:	4bbe      	ldr	r3, [pc, #760]	; (80024a8 <HAL_RCC_OscConfig+0xc58>)
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4abd      	ldr	r2, [pc, #756]	; (80024a8 <HAL_RCC_OscConfig+0xc58>)
 80021b2:	f023 0304 	bic.w	r3, r3, #4
 80021b6:	6213      	str	r3, [r2, #32]
 80021b8:	e020      	b.n	80021fc <HAL_RCC_OscConfig+0x9ac>
 80021ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b05      	cmp	r3, #5
 80021c8:	d10c      	bne.n	80021e4 <HAL_RCC_OscConfig+0x994>
 80021ca:	4bb7      	ldr	r3, [pc, #732]	; (80024a8 <HAL_RCC_OscConfig+0xc58>)
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	4ab6      	ldr	r2, [pc, #728]	; (80024a8 <HAL_RCC_OscConfig+0xc58>)
 80021d0:	f043 0304 	orr.w	r3, r3, #4
 80021d4:	6213      	str	r3, [r2, #32]
 80021d6:	4bb4      	ldr	r3, [pc, #720]	; (80024a8 <HAL_RCC_OscConfig+0xc58>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4ab3      	ldr	r2, [pc, #716]	; (80024a8 <HAL_RCC_OscConfig+0xc58>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6213      	str	r3, [r2, #32]
 80021e2:	e00b      	b.n	80021fc <HAL_RCC_OscConfig+0x9ac>
 80021e4:	4bb0      	ldr	r3, [pc, #704]	; (80024a8 <HAL_RCC_OscConfig+0xc58>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4aaf      	ldr	r2, [pc, #700]	; (80024a8 <HAL_RCC_OscConfig+0xc58>)
 80021ea:	f023 0301 	bic.w	r3, r3, #1
 80021ee:	6213      	str	r3, [r2, #32]
 80021f0:	4bad      	ldr	r3, [pc, #692]	; (80024a8 <HAL_RCC_OscConfig+0xc58>)
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	4aac      	ldr	r2, [pc, #688]	; (80024a8 <HAL_RCC_OscConfig+0xc58>)
 80021f6:	f023 0304 	bic.w	r3, r3, #4
 80021fa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002200:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8081 	beq.w	8002310 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220e:	f7fe ffdd 	bl	80011cc <HAL_GetTick>
 8002212:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002216:	e00b      	b.n	8002230 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002218:	f7fe ffd8 	bl	80011cc <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f241 3288 	movw	r2, #5000	; 0x1388
 8002228:	4293      	cmp	r3, r2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e345      	b.n	80028bc <HAL_RCC_OscConfig+0x106c>
 8002230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002234:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002238:	2202      	movs	r2, #2
 800223a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002240:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	fa93 f2a3 	rbit	r2, r3
 800224a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002258:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800225c:	2202      	movs	r2, #2
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002264:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	fa93 f2a3 	rbit	r2, r3
 800226e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002272:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002276:	601a      	str	r2, [r3, #0]
  return result;
 8002278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002280:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	095b      	lsrs	r3, r3, #5
 800228a:	b2db      	uxtb	r3, r3
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d102      	bne.n	800229c <HAL_RCC_OscConfig+0xa4c>
 8002296:	4b84      	ldr	r3, [pc, #528]	; (80024a8 <HAL_RCC_OscConfig+0xc58>)
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	e013      	b.n	80022c4 <HAL_RCC_OscConfig+0xa74>
 800229c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80022a4:	2202      	movs	r2, #2
 80022a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ac:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	fa93 f2a3 	rbit	r2, r3
 80022b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ba:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	4b79      	ldr	r3, [pc, #484]	; (80024a8 <HAL_RCC_OscConfig+0xc58>)
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022c8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80022cc:	2102      	movs	r1, #2
 80022ce:	6011      	str	r1, [r2, #0]
 80022d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022d4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	fa92 f1a2 	rbit	r1, r2
 80022de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022e2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80022e6:	6011      	str	r1, [r2, #0]
  return result;
 80022e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022ec:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	fab2 f282 	clz	r2, r2
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	f002 021f 	and.w	r2, r2, #31
 8002302:	2101      	movs	r1, #1
 8002304:	fa01 f202 	lsl.w	r2, r1, r2
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d084      	beq.n	8002218 <HAL_RCC_OscConfig+0x9c8>
 800230e:	e07f      	b.n	8002410 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002310:	f7fe ff5c 	bl	80011cc <HAL_GetTick>
 8002314:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002318:	e00b      	b.n	8002332 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800231a:	f7fe ff57 	bl	80011cc <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f241 3288 	movw	r2, #5000	; 0x1388
 800232a:	4293      	cmp	r3, r2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e2c4      	b.n	80028bc <HAL_RCC_OscConfig+0x106c>
 8002332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002336:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800233a:	2202      	movs	r2, #2
 800233c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002342:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	fa93 f2a3 	rbit	r2, r3
 800234c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002350:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800235e:	2202      	movs	r2, #2
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002366:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	fa93 f2a3 	rbit	r2, r3
 8002370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002374:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002378:	601a      	str	r2, [r3, #0]
  return result;
 800237a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002382:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002384:	fab3 f383 	clz	r3, r3
 8002388:	b2db      	uxtb	r3, r3
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	b2db      	uxtb	r3, r3
 800238e:	f043 0302 	orr.w	r3, r3, #2
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d102      	bne.n	800239e <HAL_RCC_OscConfig+0xb4e>
 8002398:	4b43      	ldr	r3, [pc, #268]	; (80024a8 <HAL_RCC_OscConfig+0xc58>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	e013      	b.n	80023c6 <HAL_RCC_OscConfig+0xb76>
 800239e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80023a6:	2202      	movs	r2, #2
 80023a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ae:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	fa93 f2a3 	rbit	r2, r3
 80023b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023bc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <HAL_RCC_OscConfig+0xc58>)
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80023ce:	2102      	movs	r1, #2
 80023d0:	6011      	str	r1, [r2, #0]
 80023d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023d6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	fa92 f1a2 	rbit	r1, r2
 80023e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023e4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80023e8:	6011      	str	r1, [r2, #0]
  return result;
 80023ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ee:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	fab2 f282 	clz	r2, r2
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	f002 021f 	and.w	r2, r2, #31
 8002404:	2101      	movs	r1, #1
 8002406:	fa01 f202 	lsl.w	r2, r1, r2
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d184      	bne.n	800231a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002410:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002414:	2b01      	cmp	r3, #1
 8002416:	d105      	bne.n	8002424 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002418:	4b23      	ldr	r3, [pc, #140]	; (80024a8 <HAL_RCC_OscConfig+0xc58>)
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	4a22      	ldr	r2, [pc, #136]	; (80024a8 <HAL_RCC_OscConfig+0xc58>)
 800241e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002422:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002428:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 8242 	beq.w	80028ba <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002436:	4b1c      	ldr	r3, [pc, #112]	; (80024a8 <HAL_RCC_OscConfig+0xc58>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b08      	cmp	r3, #8
 8002440:	f000 8213 	beq.w	800286a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002448:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	2b02      	cmp	r3, #2
 8002452:	f040 8162 	bne.w	800271a <HAL_RCC_OscConfig+0xeca>
 8002456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800245e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002468:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	fa93 f2a3 	rbit	r2, r3
 8002472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002476:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800247a:	601a      	str	r2, [r3, #0]
  return result;
 800247c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002480:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002484:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002486:	fab3 f383 	clz	r3, r3
 800248a:	b2db      	uxtb	r3, r3
 800248c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002490:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	461a      	mov	r2, r3
 8002498:	2300      	movs	r3, #0
 800249a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7fe fe96 	bl	80011cc <HAL_GetTick>
 80024a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a4:	e00c      	b.n	80024c0 <HAL_RCC_OscConfig+0xc70>
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ac:	f7fe fe8e 	bl	80011cc <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e1fd      	b.n	80028bc <HAL_RCC_OscConfig+0x106c>
 80024c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	fa93 f2a3 	rbit	r2, r3
 80024dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024e4:	601a      	str	r2, [r3, #0]
  return result;
 80024e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ea:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f0:	fab3 f383 	clz	r3, r3
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b01      	cmp	r3, #1
 8002502:	d102      	bne.n	800250a <HAL_RCC_OscConfig+0xcba>
 8002504:	4bb0      	ldr	r3, [pc, #704]	; (80027c8 <HAL_RCC_OscConfig+0xf78>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	e027      	b.n	800255a <HAL_RCC_OscConfig+0xd0a>
 800250a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002512:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	fa93 f2a3 	rbit	r2, r3
 8002526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002534:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002538:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002542:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	fa93 f2a3 	rbit	r2, r3
 800254c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002550:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	4b9c      	ldr	r3, [pc, #624]	; (80027c8 <HAL_RCC_OscConfig+0xf78>)
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800255e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002562:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002566:	6011      	str	r1, [r2, #0]
 8002568:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800256c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	fa92 f1a2 	rbit	r1, r2
 8002576:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800257a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800257e:	6011      	str	r1, [r2, #0]
  return result;
 8002580:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002584:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	fab2 f282 	clz	r2, r2
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	f042 0220 	orr.w	r2, r2, #32
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	f002 021f 	and.w	r2, r2, #31
 800259a:	2101      	movs	r1, #1
 800259c:	fa01 f202 	lsl.w	r2, r1, r2
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d182      	bne.n	80024ac <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a6:	4b88      	ldr	r3, [pc, #544]	; (80027c8 <HAL_RCC_OscConfig+0xf78>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80025ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	430b      	orrs	r3, r1
 80025c8:	497f      	ldr	r1, [pc, #508]	; (80027c8 <HAL_RCC_OscConfig+0xf78>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	604b      	str	r3, [r1, #4]
 80025ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80025d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	fa93 f2a3 	rbit	r2, r3
 80025ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ee:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80025f2:	601a      	str	r2, [r3, #0]
  return result;
 80025f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80025fc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002608:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	461a      	mov	r2, r3
 8002610:	2301      	movs	r3, #1
 8002612:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7fe fdda 	bl	80011cc <HAL_GetTick>
 8002618:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800261c:	e009      	b.n	8002632 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261e:	f7fe fdd5 	bl	80011cc <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e144      	b.n	80028bc <HAL_RCC_OscConfig+0x106c>
 8002632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002636:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800263a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800263e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002644:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	fa93 f2a3 	rbit	r2, r3
 800264e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002652:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002656:	601a      	str	r2, [r3, #0]
  return result;
 8002658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002660:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	095b      	lsrs	r3, r3, #5
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b01      	cmp	r3, #1
 8002674:	d102      	bne.n	800267c <HAL_RCC_OscConfig+0xe2c>
 8002676:	4b54      	ldr	r3, [pc, #336]	; (80027c8 <HAL_RCC_OscConfig+0xf78>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	e027      	b.n	80026cc <HAL_RCC_OscConfig+0xe7c>
 800267c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002680:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002684:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	fa93 f2a3 	rbit	r2, r3
 8002698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80026aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	fa93 f2a3 	rbit	r2, r3
 80026be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	4b3f      	ldr	r3, [pc, #252]	; (80027c8 <HAL_RCC_OscConfig+0xf78>)
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026d0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80026d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026d8:	6011      	str	r1, [r2, #0]
 80026da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026de:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	fa92 f1a2 	rbit	r1, r2
 80026e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026ec:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80026f0:	6011      	str	r1, [r2, #0]
  return result;
 80026f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026f6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	fab2 f282 	clz	r2, r2
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	f042 0220 	orr.w	r2, r2, #32
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	f002 021f 	and.w	r2, r2, #31
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f202 	lsl.w	r2, r1, r2
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d082      	beq.n	800261e <HAL_RCC_OscConfig+0xdce>
 8002718:	e0cf      	b.n	80028ba <HAL_RCC_OscConfig+0x106a>
 800271a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002722:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002726:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	fa93 f2a3 	rbit	r2, r3
 8002736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800273e:	601a      	str	r2, [r3, #0]
  return result;
 8002740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002744:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002748:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274a:	fab3 f383 	clz	r3, r3
 800274e:	b2db      	uxtb	r3, r3
 8002750:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002754:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	461a      	mov	r2, r3
 800275c:	2300      	movs	r3, #0
 800275e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7fe fd34 	bl	80011cc <HAL_GetTick>
 8002764:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002768:	e009      	b.n	800277e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276a:	f7fe fd2f 	bl	80011cc <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e09e      	b.n	80028bc <HAL_RCC_OscConfig+0x106c>
 800277e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002782:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002786:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800278a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002790:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	fa93 f2a3 	rbit	r2, r3
 800279a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80027a2:	601a      	str	r2, [r3, #0]
  return result;
 80027a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80027ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ae:	fab3 f383 	clz	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	095b      	lsrs	r3, r3, #5
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d104      	bne.n	80027cc <HAL_RCC_OscConfig+0xf7c>
 80027c2:	4b01      	ldr	r3, [pc, #4]	; (80027c8 <HAL_RCC_OscConfig+0xf78>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	e029      	b.n	800281c <HAL_RCC_OscConfig+0xfcc>
 80027c8:	40021000 	.word	0x40021000
 80027cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027de:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	fa93 f2a3 	rbit	r2, r3
 80027e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ec:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80027fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002804:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f2a3 	rbit	r2, r3
 800280e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002812:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <HAL_RCC_OscConfig+0x1078>)
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002820:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002824:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002828:	6011      	str	r1, [r2, #0]
 800282a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800282e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	fa92 f1a2 	rbit	r1, r2
 8002838:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800283c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002840:	6011      	str	r1, [r2, #0]
  return result;
 8002842:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002846:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	fab2 f282 	clz	r2, r2
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	f042 0220 	orr.w	r2, r2, #32
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	f002 021f 	and.w	r2, r2, #31
 800285c:	2101      	movs	r1, #1
 800285e:	fa01 f202 	lsl.w	r2, r1, r2
 8002862:	4013      	ands	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d180      	bne.n	800276a <HAL_RCC_OscConfig+0xf1a>
 8002868:	e027      	b.n	80028ba <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800286a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e01e      	b.n	80028bc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_RCC_OscConfig+0x1078>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002886:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800288a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800288e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002892:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	429a      	cmp	r2, r3
 800289c:	d10b      	bne.n	80028b6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800289e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d001      	beq.n	80028ba <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000

080028cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b09e      	sub	sp, #120	; 0x78
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e162      	b.n	8002baa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e4:	4b90      	ldr	r3, [pc, #576]	; (8002b28 <HAL_RCC_ClockConfig+0x25c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d910      	bls.n	8002914 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b8d      	ldr	r3, [pc, #564]	; (8002b28 <HAL_RCC_ClockConfig+0x25c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 0207 	bic.w	r2, r3, #7
 80028fa:	498b      	ldr	r1, [pc, #556]	; (8002b28 <HAL_RCC_ClockConfig+0x25c>)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002902:	4b89      	ldr	r3, [pc, #548]	; (8002b28 <HAL_RCC_ClockConfig+0x25c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e14a      	b.n	8002baa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002920:	4b82      	ldr	r3, [pc, #520]	; (8002b2c <HAL_RCC_ClockConfig+0x260>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	497f      	ldr	r1, [pc, #508]	; (8002b2c <HAL_RCC_ClockConfig+0x260>)
 800292e:	4313      	orrs	r3, r2
 8002930:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 80dc 	beq.w	8002af8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d13c      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xf6>
 8002948:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800294c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002958:	fab3 f383 	clz	r3, r3
 800295c:	b2db      	uxtb	r3, r3
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	b2db      	uxtb	r3, r3
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b01      	cmp	r3, #1
 800296a:	d102      	bne.n	8002972 <HAL_RCC_ClockConfig+0xa6>
 800296c:	4b6f      	ldr	r3, [pc, #444]	; (8002b2c <HAL_RCC_ClockConfig+0x260>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	e00f      	b.n	8002992 <HAL_RCC_ClockConfig+0xc6>
 8002972:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002976:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	667b      	str	r3, [r7, #100]	; 0x64
 8002980:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002984:	663b      	str	r3, [r7, #96]	; 0x60
 8002986:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800298e:	4b67      	ldr	r3, [pc, #412]	; (8002b2c <HAL_RCC_ClockConfig+0x260>)
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002996:	65ba      	str	r2, [r7, #88]	; 0x58
 8002998:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800299a:	fa92 f2a2 	rbit	r2, r2
 800299e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80029a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029a2:	fab2 f282 	clz	r2, r2
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	f042 0220 	orr.w	r2, r2, #32
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	f002 021f 	and.w	r2, r2, #31
 80029b2:	2101      	movs	r1, #1
 80029b4:	fa01 f202 	lsl.w	r2, r1, r2
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d17b      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e0f3      	b.n	8002baa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d13c      	bne.n	8002a44 <HAL_RCC_ClockConfig+0x178>
 80029ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	095b      	lsrs	r3, r3, #5
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d102      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x128>
 80029ee:	4b4f      	ldr	r3, [pc, #316]	; (8002b2c <HAL_RCC_ClockConfig+0x260>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	e00f      	b.n	8002a14 <HAL_RCC_ClockConfig+0x148>
 80029f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029fc:	fa93 f3a3 	rbit	r3, r3
 8002a00:	647b      	str	r3, [r7, #68]	; 0x44
 8002a02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a06:	643b      	str	r3, [r7, #64]	; 0x40
 8002a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a10:	4b46      	ldr	r3, [pc, #280]	; (8002b2c <HAL_RCC_ClockConfig+0x260>)
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a18:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a1c:	fa92 f2a2 	rbit	r2, r2
 8002a20:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a24:	fab2 f282 	clz	r2, r2
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	f042 0220 	orr.w	r2, r2, #32
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	f002 021f 	and.w	r2, r2, #31
 8002a34:	2101      	movs	r1, #1
 8002a36:	fa01 f202 	lsl.w	r2, r1, r2
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d13a      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0b2      	b.n	8002baa <HAL_RCC_ClockConfig+0x2de>
 8002a44:	2302      	movs	r3, #2
 8002a46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a52:	fab3 f383 	clz	r3, r3
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	095b      	lsrs	r3, r3, #5
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d102      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x1a0>
 8002a66:	4b31      	ldr	r3, [pc, #196]	; (8002b2c <HAL_RCC_ClockConfig+0x260>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	e00d      	b.n	8002a88 <HAL_RCC_ClockConfig+0x1bc>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
 8002a78:	2302      	movs	r3, #2
 8002a7a:	623b      	str	r3, [r7, #32]
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	61fb      	str	r3, [r7, #28]
 8002a84:	4b29      	ldr	r3, [pc, #164]	; (8002b2c <HAL_RCC_ClockConfig+0x260>)
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	2202      	movs	r2, #2
 8002a8a:	61ba      	str	r2, [r7, #24]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	fa92 f2a2 	rbit	r2, r2
 8002a92:	617a      	str	r2, [r7, #20]
  return result;
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	fab2 f282 	clz	r2, r2
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	f042 0220 	orr.w	r2, r2, #32
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	f002 021f 	and.w	r2, r2, #31
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e079      	b.n	8002baa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ab6:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <HAL_RCC_ClockConfig+0x260>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f023 0203 	bic.w	r2, r3, #3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	491a      	ldr	r1, [pc, #104]	; (8002b2c <HAL_RCC_ClockConfig+0x260>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ac8:	f7fe fb80 	bl	80011cc <HAL_GetTick>
 8002acc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad0:	f7fe fb7c 	bl	80011cc <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e061      	b.n	8002baa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae6:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <HAL_RCC_ClockConfig+0x260>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 020c 	and.w	r2, r3, #12
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d1eb      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002af8:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <HAL_RCC_ClockConfig+0x25c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d214      	bcs.n	8002b30 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b06:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <HAL_RCC_ClockConfig+0x25c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 0207 	bic.w	r2, r3, #7
 8002b0e:	4906      	ldr	r1, [pc, #24]	; (8002b28 <HAL_RCC_ClockConfig+0x25c>)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <HAL_RCC_ClockConfig+0x25c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e040      	b.n	8002baa <HAL_RCC_ClockConfig+0x2de>
 8002b28:	40022000 	.word	0x40022000
 8002b2c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b3c:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <HAL_RCC_ClockConfig+0x2e8>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	491a      	ldr	r1, [pc, #104]	; (8002bb4 <HAL_RCC_ClockConfig+0x2e8>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d009      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b5a:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <HAL_RCC_ClockConfig+0x2e8>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4912      	ldr	r1, [pc, #72]	; (8002bb4 <HAL_RCC_ClockConfig+0x2e8>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b6e:	f000 f829 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8002b72:	4601      	mov	r1, r0
 8002b74:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <HAL_RCC_ClockConfig+0x2e8>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b7c:	22f0      	movs	r2, #240	; 0xf0
 8002b7e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	fa92 f2a2 	rbit	r2, r2
 8002b86:	60fa      	str	r2, [r7, #12]
  return result;
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	fab2 f282 	clz	r2, r2
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	40d3      	lsrs	r3, r2
 8002b92:	4a09      	ldr	r2, [pc, #36]	; (8002bb8 <HAL_RCC_ClockConfig+0x2ec>)
 8002b94:	5cd3      	ldrb	r3, [r2, r3]
 8002b96:	fa21 f303 	lsr.w	r3, r1, r3
 8002b9a:	4a08      	ldr	r2, [pc, #32]	; (8002bbc <HAL_RCC_ClockConfig+0x2f0>)
 8002b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b9e:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_RCC_ClockConfig+0x2f4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe face 	bl	8001144 <HAL_InitTick>
  
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3778      	adds	r7, #120	; 0x78
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	08006614 	.word	0x08006614
 8002bbc:	20000000 	.word	0x20000000
 8002bc0:	20000004 	.word	0x20000004

08002bc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b08b      	sub	sp, #44	; 0x2c
 8002bc8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002bde:	4b29      	ldr	r3, [pc, #164]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d002      	beq.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x30>
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d003      	beq.n	8002bfa <HAL_RCC_GetSysClockFreq+0x36>
 8002bf2:	e03c      	b.n	8002c6e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bf4:	4b24      	ldr	r3, [pc, #144]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bf6:	623b      	str	r3, [r7, #32]
      break;
 8002bf8:	e03c      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c00:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c04:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	fa92 f2a2 	rbit	r2, r2
 8002c0c:	607a      	str	r2, [r7, #4]
  return result;
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	fab2 f282 	clz	r2, r2
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	40d3      	lsrs	r3, r2
 8002c18:	4a1c      	ldr	r2, [pc, #112]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c1a:	5cd3      	ldrb	r3, [r2, r3]
 8002c1c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c1e:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	220f      	movs	r2, #15
 8002c28:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	fa92 f2a2 	rbit	r2, r2
 8002c30:	60fa      	str	r2, [r7, #12]
  return result;
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	fab2 f282 	clz	r2, r2
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	40d3      	lsrs	r3, r2
 8002c3c:	4a14      	ldr	r2, [pc, #80]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c3e:	5cd3      	ldrb	r3, [r2, r3]
 8002c40:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c4c:	4a0e      	ldr	r2, [pc, #56]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	fb02 f303 	mul.w	r3, r2, r3
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5c:	e004      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	4a0c      	ldr	r2, [pc, #48]	; (8002c94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	623b      	str	r3, [r7, #32]
      break;
 8002c6c:	e002      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c70:	623b      	str	r3, [r7, #32]
      break;
 8002c72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c74:	6a3b      	ldr	r3, [r7, #32]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	372c      	adds	r7, #44	; 0x2c
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40021000 	.word	0x40021000
 8002c88:	007a1200 	.word	0x007a1200
 8002c8c:	0800662c 	.word	0x0800662c
 8002c90:	0800663c 	.word	0x0800663c
 8002c94:	003d0900 	.word	0x003d0900

08002c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c9c:	4b03      	ldr	r3, [pc, #12]	; (8002cac <HAL_RCC_GetHCLKFreq+0x14>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000000 	.word	0x20000000

08002cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002cb6:	f7ff ffef 	bl	8002c98 <HAL_RCC_GetHCLKFreq>
 8002cba:	4601      	mov	r1, r0
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cc4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002cc8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	fa92 f2a2 	rbit	r2, r2
 8002cd0:	603a      	str	r2, [r7, #0]
  return result;
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	fab2 f282 	clz	r2, r2
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	40d3      	lsrs	r3, r2
 8002cdc:	4a04      	ldr	r2, [pc, #16]	; (8002cf0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002cde:	5cd3      	ldrb	r3, [r2, r3]
 8002ce0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	08006624 	.word	0x08006624

08002cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002cfa:	f7ff ffcd 	bl	8002c98 <HAL_RCC_GetHCLKFreq>
 8002cfe:	4601      	mov	r1, r0
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002d08:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002d0c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	fa92 f2a2 	rbit	r2, r2
 8002d14:	603a      	str	r2, [r7, #0]
  return result;
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	fab2 f282 	clz	r2, r2
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	40d3      	lsrs	r3, r2
 8002d20:	4a04      	ldr	r2, [pc, #16]	; (8002d34 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d22:	5cd3      	ldrb	r3, [r2, r3]
 8002d24:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40021000 	.word	0x40021000
 8002d34:	08006624 	.word	0x08006624

08002d38 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b092      	sub	sp, #72	; 0x48
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 80cd 	beq.w	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5c:	4b86      	ldr	r3, [pc, #536]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10e      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d68:	4b83      	ldr	r3, [pc, #524]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	4a82      	ldr	r2, [pc, #520]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d72:	61d3      	str	r3, [r2, #28]
 8002d74:	4b80      	ldr	r3, [pc, #512]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d80:	2301      	movs	r3, #1
 8002d82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d86:	4b7d      	ldr	r3, [pc, #500]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d118      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d92:	4b7a      	ldr	r3, [pc, #488]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a79      	ldr	r2, [pc, #484]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d9e:	f7fe fa15 	bl	80011cc <HAL_GetTick>
 8002da2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da4:	e008      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da6:	f7fe fa11 	bl	80011cc <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b64      	cmp	r3, #100	; 0x64
 8002db2:	d901      	bls.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0db      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db8:	4b70      	ldr	r3, [pc, #448]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dc4:	4b6c      	ldr	r3, [pc, #432]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d07d      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ddc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d076      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002de2:	4b65      	ldr	r3, [pc, #404]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002df0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dfc:	fab3 f383 	clz	r3, r3
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	4b5e      	ldr	r3, [pc, #376]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e18:	fa93 f3a3 	rbit	r3, r3
 8002e1c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e20:	fab3 f383 	clz	r3, r3
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	4b55      	ldr	r3, [pc, #340]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	461a      	mov	r2, r3
 8002e30:	2300      	movs	r3, #0
 8002e32:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e34:	4a50      	ldr	r2, [pc, #320]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e38:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d045      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e44:	f7fe f9c2 	bl	80011cc <HAL_GetTick>
 8002e48:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4c:	f7fe f9be 	bl	80011cc <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e086      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002e62:	2302      	movs	r3, #2
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6e:	2302      	movs	r3, #2
 8002e70:	623b      	str	r3, [r7, #32]
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	fa93 f3a3 	rbit	r3, r3
 8002e78:	61fb      	str	r3, [r7, #28]
  return result;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f043 0302 	orr.w	r3, r3, #2
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d102      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002e90:	4b39      	ldr	r3, [pc, #228]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	e007      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002e96:	2302      	movs	r3, #2
 8002e98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	fa93 f3a3 	rbit	r3, r3
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	4b35      	ldr	r3, [pc, #212]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	613a      	str	r2, [r7, #16]
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	fa92 f2a2 	rbit	r2, r2
 8002eb0:	60fa      	str	r2, [r7, #12]
  return result;
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	fab2 f282 	clz	r2, r2
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	f002 021f 	and.w	r2, r2, #31
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0bd      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ed0:	4b29      	ldr	r3, [pc, #164]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4926      	ldr	r1, [pc, #152]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ee2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d105      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eea:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	4a22      	ldr	r2, [pc, #136]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d008      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f02:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	f023 0203 	bic.w	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	491a      	ldr	r1, [pc, #104]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f20:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	f023 0210 	bic.w	r2, r3, #16
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4912      	ldr	r1, [pc, #72]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	490b      	ldr	r1, [pc, #44]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d008      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	4903      	ldr	r1, [pc, #12]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3748      	adds	r7, #72	; 0x48
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40007000 	.word	0x40007000
 8002f80:	10908100 	.word	0x10908100

08002f84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e049      	b.n	800302a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fd ff0e 	bl	8000dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	f000 fa50 	bl	8003468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b02      	cmp	r3, #2
 8003046:	d122      	bne.n	800308e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b02      	cmp	r3, #2
 8003054:	d11b      	bne.n	800308e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f06f 0202 	mvn.w	r2, #2
 800305e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f9d8 	bl	800342a <HAL_TIM_IC_CaptureCallback>
 800307a:	e005      	b.n	8003088 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f9ca 	bl	8003416 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f9db 	bl	800343e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b04      	cmp	r3, #4
 800309a:	d122      	bne.n	80030e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d11b      	bne.n	80030e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f06f 0204 	mvn.w	r2, #4
 80030b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f9ae 	bl	800342a <HAL_TIM_IC_CaptureCallback>
 80030ce:	e005      	b.n	80030dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f9a0 	bl	8003416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f9b1 	bl	800343e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d122      	bne.n	8003136 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d11b      	bne.n	8003136 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f06f 0208 	mvn.w	r2, #8
 8003106:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2204      	movs	r2, #4
 800310c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f984 	bl	800342a <HAL_TIM_IC_CaptureCallback>
 8003122:	e005      	b.n	8003130 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f976 	bl	8003416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f987 	bl	800343e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b10      	cmp	r3, #16
 8003142:	d122      	bne.n	800318a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	2b10      	cmp	r3, #16
 8003150:	d11b      	bne.n	800318a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f06f 0210 	mvn.w	r2, #16
 800315a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2208      	movs	r2, #8
 8003160:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f95a 	bl	800342a <HAL_TIM_IC_CaptureCallback>
 8003176:	e005      	b.n	8003184 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f94c 	bl	8003416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f95d 	bl	800343e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b01      	cmp	r3, #1
 8003196:	d10e      	bne.n	80031b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d107      	bne.n	80031b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f06f 0201 	mvn.w	r2, #1
 80031ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f926 	bl	8003402 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c0:	2b80      	cmp	r3, #128	; 0x80
 80031c2:	d10e      	bne.n	80031e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ce:	2b80      	cmp	r3, #128	; 0x80
 80031d0:	d107      	bne.n	80031e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 facd 	bl	800377c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f0:	d10e      	bne.n	8003210 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fc:	2b80      	cmp	r3, #128	; 0x80
 80031fe:	d107      	bne.n	8003210 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fac0 	bl	8003790 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321a:	2b40      	cmp	r3, #64	; 0x40
 800321c:	d10e      	bne.n	800323c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003228:	2b40      	cmp	r3, #64	; 0x40
 800322a:	d107      	bne.n	800323c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f90b 	bl	8003452 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b20      	cmp	r3, #32
 8003248:	d10e      	bne.n	8003268 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	2b20      	cmp	r3, #32
 8003256:	d107      	bne.n	8003268 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0220 	mvn.w	r2, #32
 8003260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fa80 	bl	8003768 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_TIM_ConfigClockSource+0x1c>
 8003288:	2302      	movs	r3, #2
 800328a:	e0b6      	b.n	80033fa <HAL_TIM_ConfigClockSource+0x18a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c8:	d03e      	beq.n	8003348 <HAL_TIM_ConfigClockSource+0xd8>
 80032ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ce:	f200 8087 	bhi.w	80033e0 <HAL_TIM_ConfigClockSource+0x170>
 80032d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d6:	f000 8086 	beq.w	80033e6 <HAL_TIM_ConfigClockSource+0x176>
 80032da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032de:	d87f      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x170>
 80032e0:	2b70      	cmp	r3, #112	; 0x70
 80032e2:	d01a      	beq.n	800331a <HAL_TIM_ConfigClockSource+0xaa>
 80032e4:	2b70      	cmp	r3, #112	; 0x70
 80032e6:	d87b      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x170>
 80032e8:	2b60      	cmp	r3, #96	; 0x60
 80032ea:	d050      	beq.n	800338e <HAL_TIM_ConfigClockSource+0x11e>
 80032ec:	2b60      	cmp	r3, #96	; 0x60
 80032ee:	d877      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x170>
 80032f0:	2b50      	cmp	r3, #80	; 0x50
 80032f2:	d03c      	beq.n	800336e <HAL_TIM_ConfigClockSource+0xfe>
 80032f4:	2b50      	cmp	r3, #80	; 0x50
 80032f6:	d873      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x170>
 80032f8:	2b40      	cmp	r3, #64	; 0x40
 80032fa:	d058      	beq.n	80033ae <HAL_TIM_ConfigClockSource+0x13e>
 80032fc:	2b40      	cmp	r3, #64	; 0x40
 80032fe:	d86f      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x170>
 8003300:	2b30      	cmp	r3, #48	; 0x30
 8003302:	d064      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x15e>
 8003304:	2b30      	cmp	r3, #48	; 0x30
 8003306:	d86b      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x170>
 8003308:	2b20      	cmp	r3, #32
 800330a:	d060      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x15e>
 800330c:	2b20      	cmp	r3, #32
 800330e:	d867      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x170>
 8003310:	2b00      	cmp	r3, #0
 8003312:	d05c      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x15e>
 8003314:	2b10      	cmp	r3, #16
 8003316:	d05a      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x15e>
 8003318:	e062      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	6899      	ldr	r1, [r3, #8]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f000 f98f 	bl	800364c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800333c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	609a      	str	r2, [r3, #8]
      break;
 8003346:	e04f      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	6899      	ldr	r1, [r3, #8]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f000 f978 	bl	800364c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800336a:	609a      	str	r2, [r3, #8]
      break;
 800336c:	e03c      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6818      	ldr	r0, [r3, #0]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	6859      	ldr	r1, [r3, #4]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	461a      	mov	r2, r3
 800337c:	f000 f8ec 	bl	8003558 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2150      	movs	r1, #80	; 0x50
 8003386:	4618      	mov	r0, r3
 8003388:	f000 f945 	bl	8003616 <TIM_ITRx_SetConfig>
      break;
 800338c:	e02c      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	6859      	ldr	r1, [r3, #4]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	461a      	mov	r2, r3
 800339c:	f000 f90b 	bl	80035b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2160      	movs	r1, #96	; 0x60
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f935 	bl	8003616 <TIM_ITRx_SetConfig>
      break;
 80033ac:	e01c      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6859      	ldr	r1, [r3, #4]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	461a      	mov	r2, r3
 80033bc:	f000 f8cc 	bl	8003558 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2140      	movs	r1, #64	; 0x40
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f925 	bl	8003616 <TIM_ITRx_SetConfig>
      break;
 80033cc:	e00c      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4619      	mov	r1, r3
 80033d8:	4610      	mov	r0, r2
 80033da:	f000 f91c 	bl	8003616 <TIM_ITRx_SetConfig>
      break;
 80033de:	e003      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
      break;
 80033e4:	e000      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80033e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
	...

08003468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a32      	ldr	r2, [pc, #200]	; (8003544 <TIM_Base_SetConfig+0xdc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d007      	beq.n	8003490 <TIM_Base_SetConfig+0x28>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003486:	d003      	beq.n	8003490 <TIM_Base_SetConfig+0x28>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a2f      	ldr	r2, [pc, #188]	; (8003548 <TIM_Base_SetConfig+0xe0>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d108      	bne.n	80034a2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a27      	ldr	r2, [pc, #156]	; (8003544 <TIM_Base_SetConfig+0xdc>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d013      	beq.n	80034d2 <TIM_Base_SetConfig+0x6a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b0:	d00f      	beq.n	80034d2 <TIM_Base_SetConfig+0x6a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a24      	ldr	r2, [pc, #144]	; (8003548 <TIM_Base_SetConfig+0xe0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00b      	beq.n	80034d2 <TIM_Base_SetConfig+0x6a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a23      	ldr	r2, [pc, #140]	; (800354c <TIM_Base_SetConfig+0xe4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d007      	beq.n	80034d2 <TIM_Base_SetConfig+0x6a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a22      	ldr	r2, [pc, #136]	; (8003550 <TIM_Base_SetConfig+0xe8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d003      	beq.n	80034d2 <TIM_Base_SetConfig+0x6a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a21      	ldr	r2, [pc, #132]	; (8003554 <TIM_Base_SetConfig+0xec>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d108      	bne.n	80034e4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a0e      	ldr	r2, [pc, #56]	; (8003544 <TIM_Base_SetConfig+0xdc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00b      	beq.n	8003528 <TIM_Base_SetConfig+0xc0>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a0e      	ldr	r2, [pc, #56]	; (800354c <TIM_Base_SetConfig+0xe4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d007      	beq.n	8003528 <TIM_Base_SetConfig+0xc0>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a0d      	ldr	r2, [pc, #52]	; (8003550 <TIM_Base_SetConfig+0xe8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d003      	beq.n	8003528 <TIM_Base_SetConfig+0xc0>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a0c      	ldr	r2, [pc, #48]	; (8003554 <TIM_Base_SetConfig+0xec>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d103      	bne.n	8003530 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	615a      	str	r2, [r3, #20]
}
 8003536:	bf00      	nop
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40012c00 	.word	0x40012c00
 8003548:	40000400 	.word	0x40000400
 800354c:	40014000 	.word	0x40014000
 8003550:	40014400 	.word	0x40014400
 8003554:	40014800 	.word	0x40014800

08003558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f023 0201 	bic.w	r2, r3, #1
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f023 030a 	bic.w	r3, r3, #10
 8003594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4313      	orrs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	621a      	str	r2, [r3, #32]
}
 80035aa:	bf00      	nop
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b087      	sub	sp, #28
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	f023 0210 	bic.w	r2, r3, #16
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	031b      	lsls	r3, r3, #12
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	621a      	str	r2, [r3, #32]
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003616:	b480      	push	{r7}
 8003618:	b085      	sub	sp, #20
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	f043 0307 	orr.w	r3, r3, #7
 8003638:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	609a      	str	r2, [r3, #8]
}
 8003640:	bf00      	nop
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003666:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	021a      	lsls	r2, r3, #8
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	431a      	orrs	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4313      	orrs	r3, r2
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	609a      	str	r2, [r3, #8]
}
 8003680:	bf00      	nop
 8003682:	371c      	adds	r7, #28
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e054      	b.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a24      	ldr	r2, [pc, #144]	; (800375c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d108      	bne.n	80036e0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a17      	ldr	r2, [pc, #92]	; (800375c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00e      	beq.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370c:	d009      	beq.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a13      	ldr	r2, [pc, #76]	; (8003760 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d004      	beq.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a11      	ldr	r2, [pc, #68]	; (8003764 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d10c      	bne.n	800373c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	4313      	orrs	r3, r2
 8003732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40012c00 	.word	0x40012c00
 8003760:	40000400 	.word	0x40000400
 8003764:	40014000 	.word	0x40014000

08003768 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e040      	b.n	8003838 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fd fb26 	bl	8000e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2224      	movs	r2, #36	; 0x24
 80037d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0201 	bic.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fd8a 	bl	80042fc <UART_SetConfig>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e022      	b.n	8003838 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 feb4 	bl	8004568 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800380e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800381e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 ff3b 	bl	80046ac <UART_CheckIdleState>
 8003836:	4603      	mov	r3, r0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e048      	b.n	80038e4 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003856:	2b00      	cmp	r3, #0
 8003858:	d106      	bne.n	8003868 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fd fad8 	bl	8000e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2224      	movs	r2, #36	; 0x24
 800386c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0201 	bic.w	r2, r2, #1
 800387c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fd3c 	bl	80042fc <UART_SetConfig>
 8003884:	4603      	mov	r3, r0
 8003886:	2b01      	cmp	r3, #1
 8003888:	d101      	bne.n	800388e <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e02a      	b.n	80038e4 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fe66 	bl	8004568 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80038ba:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0208 	orr.w	r2, r2, #8
 80038ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fee5 	bl	80046ac <UART_CheckIdleState>
 80038e2:	4603      	mov	r3, r0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08a      	sub	sp, #40	; 0x28
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	4613      	mov	r3, r2
 80038fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003900:	2b20      	cmp	r3, #32
 8003902:	f040 8082 	bne.w	8003a0a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_UART_Transmit+0x26>
 800390c:	88fb      	ldrh	r3, [r7, #6]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e07a      	b.n	8003a0c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_UART_Transmit+0x38>
 8003920:	2302      	movs	r3, #2
 8003922:	e073      	b.n	8003a0c <HAL_UART_Transmit+0x120>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2221      	movs	r2, #33	; 0x21
 8003938:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800393a:	f7fd fc47 	bl	80011cc <HAL_GetTick>
 800393e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	88fa      	ldrh	r2, [r7, #6]
 8003944:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	88fa      	ldrh	r2, [r7, #6]
 800394c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003958:	d108      	bne.n	800396c <HAL_UART_Transmit+0x80>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d104      	bne.n	800396c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	61bb      	str	r3, [r7, #24]
 800396a:	e003      	b.n	8003974 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003970:	2300      	movs	r3, #0
 8003972:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800397c:	e02d      	b.n	80039da <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2200      	movs	r2, #0
 8003986:	2180      	movs	r1, #128	; 0x80
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 fed8 	bl	800473e <UART_WaitOnFlagUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e039      	b.n	8003a0c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10b      	bne.n	80039b6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	881a      	ldrh	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039aa:	b292      	uxth	r2, r2
 80039ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	3302      	adds	r3, #2
 80039b2:	61bb      	str	r3, [r7, #24]
 80039b4:	e008      	b.n	80039c8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	781a      	ldrb	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	b292      	uxth	r2, r2
 80039c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	3301      	adds	r3, #1
 80039c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1cb      	bne.n	800397e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2200      	movs	r2, #0
 80039ee:	2140      	movs	r1, #64	; 0x40
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 fea4 	bl	800473e <UART_WaitOnFlagUntilTimeout>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e005      	b.n	8003a0c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2220      	movs	r2, #32
 8003a04:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	e000      	b.n	8003a0c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003a0a:	2302      	movs	r3, #2
  }
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3720      	adds	r7, #32
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	; 0x28
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	4613      	mov	r3, r2
 8003a22:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	f040 80bf 	bne.w	8003bac <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <HAL_UART_Receive+0x26>
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e0b7      	b.n	8003bae <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_UART_Receive+0x38>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e0b0      	b.n	8003bae <HAL_UART_Receive+0x19a>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2222      	movs	r2, #34	; 0x22
 8003a60:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a68:	f7fd fbb0 	bl	80011cc <HAL_GetTick>
 8003a6c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	88fa      	ldrh	r2, [r7, #6]
 8003a72:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	88fa      	ldrh	r2, [r7, #6]
 8003a7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a86:	d10e      	bne.n	8003aa6 <HAL_UART_Receive+0x92>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d105      	bne.n	8003a9c <HAL_UART_Receive+0x88>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003a96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a9a:	e02d      	b.n	8003af8 <HAL_UART_Receive+0xe4>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	22ff      	movs	r2, #255	; 0xff
 8003aa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003aa4:	e028      	b.n	8003af8 <HAL_UART_Receive+0xe4>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10d      	bne.n	8003aca <HAL_UART_Receive+0xb6>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d104      	bne.n	8003ac0 <HAL_UART_Receive+0xac>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	22ff      	movs	r2, #255	; 0xff
 8003aba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003abe:	e01b      	b.n	8003af8 <HAL_UART_Receive+0xe4>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	227f      	movs	r2, #127	; 0x7f
 8003ac4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ac8:	e016      	b.n	8003af8 <HAL_UART_Receive+0xe4>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ad2:	d10d      	bne.n	8003af0 <HAL_UART_Receive+0xdc>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d104      	bne.n	8003ae6 <HAL_UART_Receive+0xd2>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	227f      	movs	r2, #127	; 0x7f
 8003ae0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ae4:	e008      	b.n	8003af8 <HAL_UART_Receive+0xe4>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	223f      	movs	r2, #63	; 0x3f
 8003aea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003aee:	e003      	b.n	8003af8 <HAL_UART_Receive+0xe4>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003afe:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b08:	d108      	bne.n	8003b1c <HAL_UART_Receive+0x108>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d104      	bne.n	8003b1c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	61bb      	str	r3, [r7, #24]
 8003b1a:	e003      	b.n	8003b24 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003b2c:	e033      	b.n	8003b96 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2200      	movs	r2, #0
 8003b36:	2120      	movs	r1, #32
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 fe00 	bl	800473e <UART_WaitOnFlagUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e032      	b.n	8003bae <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10c      	bne.n	8003b68 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	8a7b      	ldrh	r3, [r7, #18]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	3302      	adds	r3, #2
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	e00d      	b.n	8003b84 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	8a7b      	ldrh	r3, [r7, #18]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	4013      	ands	r3, r2
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	3301      	adds	r3, #1
 8003b82:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1c5      	bne.n	8003b2e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e000      	b.n	8003bae <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003bac:	2302      	movs	r3, #2
  }
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3720      	adds	r7, #32
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b0ba      	sub	sp, #232	; 0xe8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003be2:	f640 030f 	movw	r3, #2063	; 0x80f
 8003be6:	4013      	ands	r3, r2
 8003be8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003bec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d115      	bne.n	8003c20 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00f      	beq.n	8003c20 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d009      	beq.n	8003c20 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 82a3 	beq.w	800415c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	4798      	blx	r3
      }
      return;
 8003c1e:	e29d      	b.n	800415c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 8117 	beq.w	8003e58 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003c3a:	4b85      	ldr	r3, [pc, #532]	; (8003e50 <HAL_UART_IRQHandler+0x298>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 810a 	beq.w	8003e58 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d011      	beq.n	8003c74 <HAL_UART_IRQHandler+0xbc>
 8003c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00b      	beq.n	8003c74 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2201      	movs	r2, #1
 8003c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c6a:	f043 0201 	orr.w	r2, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d011      	beq.n	8003ca4 <HAL_UART_IRQHandler+0xec>
 8003c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00b      	beq.n	8003ca4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2202      	movs	r2, #2
 8003c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c9a:	f043 0204 	orr.w	r2, r3, #4
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d011      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x11c>
 8003cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00b      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cca:	f043 0202 	orr.w	r2, r3, #2
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d017      	beq.n	8003d10 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d105      	bne.n	8003cf8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cf0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00b      	beq.n	8003d10 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d06:	f043 0208 	orr.w	r2, r3, #8
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d012      	beq.n	8003d42 <HAL_UART_IRQHandler+0x18a>
 8003d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00c      	beq.n	8003d42 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d38:	f043 0220 	orr.w	r2, r3, #32
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8209 	beq.w	8004160 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00d      	beq.n	8003d76 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d007      	beq.n	8003d76 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8a:	2b40      	cmp	r3, #64	; 0x40
 8003d8c:	d005      	beq.n	8003d9a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d04f      	beq.n	8003e3a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fd93 	bl	80048c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003daa:	2b40      	cmp	r3, #64	; 0x40
 8003dac:	d141      	bne.n	8003e32 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3308      	adds	r3, #8
 8003db4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dbc:	e853 3f00 	ldrex	r3, [r3]
 8003dc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3308      	adds	r3, #8
 8003dd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003dda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003dde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003de6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003dea:	e841 2300 	strex	r3, r2, [r1]
 8003dee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1d9      	bne.n	8003dae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d013      	beq.n	8003e2a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	4a13      	ldr	r2, [pc, #76]	; (8003e54 <HAL_UART_IRQHandler+0x29c>)
 8003e08:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fd fb56 	bl	80014c0 <HAL_DMA_Abort_IT>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d017      	beq.n	8003e4a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003e24:	4610      	mov	r0, r2
 8003e26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	e00f      	b.n	8003e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f9ac 	bl	8004188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e30:	e00b      	b.n	8003e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f9a8 	bl	8004188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e38:	e007      	b.n	8003e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f9a4 	bl	8004188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003e48:	e18a      	b.n	8004160 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e4a:	bf00      	nop
    return;
 8003e4c:	e188      	b.n	8004160 <HAL_UART_IRQHandler+0x5a8>
 8003e4e:	bf00      	nop
 8003e50:	04000120 	.word	0x04000120
 8003e54:	0800498d 	.word	0x0800498d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	f040 8143 	bne.w	80040e8 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 813c 	beq.w	80040e8 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e74:	f003 0310 	and.w	r3, r3, #16
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 8135 	beq.w	80040e8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2210      	movs	r2, #16
 8003e84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e90:	2b40      	cmp	r3, #64	; 0x40
 8003e92:	f040 80b1 	bne.w	8003ff8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ea2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 815c 	beq.w	8004164 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	f080 8154 	bcs.w	8004164 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ec2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	f000 8085 	beq.w	8003fdc <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ede:	e853 3f00 	ldrex	r3, [r3]
 8003ee2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ee6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003eea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003efc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f00:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f04:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f08:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f0c:	e841 2300 	strex	r3, r2, [r1]
 8003f10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1da      	bne.n	8003ed2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3308      	adds	r3, #8
 8003f22:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f26:	e853 3f00 	ldrex	r3, [r3]
 8003f2a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f2e:	f023 0301 	bic.w	r3, r3, #1
 8003f32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f40:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f44:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f48:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e1      	bne.n	8003f1c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3308      	adds	r3, #8
 8003f78:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f7c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f80:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f84:	e841 2300 	strex	r3, r2, [r1]
 8003f88:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e3      	bne.n	8003f58 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa4:	e853 3f00 	ldrex	r3, [r3]
 8003fa8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fac:	f023 0310 	bic.w	r3, r3, #16
 8003fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fc0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fc6:	e841 2300 	strex	r3, r2, [r1]
 8003fca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1e4      	bne.n	8003f9c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fd fa39 	bl	800144e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f8d3 	bl	800419c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ff6:	e0b5      	b.n	8004164 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004004:	b29b      	uxth	r3, r3
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004012:	b29b      	uxth	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80a7 	beq.w	8004168 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800401a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 80a2 	beq.w	8004168 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004034:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004038:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004046:	647b      	str	r3, [r7, #68]	; 0x44
 8004048:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800404c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e4      	bne.n	8004024 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3308      	adds	r3, #8
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	623b      	str	r3, [r7, #32]
   return(result);
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	f023 0301 	bic.w	r3, r3, #1
 8004070:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3308      	adds	r3, #8
 800407a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800407e:	633a      	str	r2, [r7, #48]	; 0x30
 8004080:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800408c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1e3      	bne.n	800405a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2220      	movs	r2, #32
 8004096:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f023 0310 	bic.w	r3, r3, #16
 80040b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040c6:	61fb      	str	r3, [r7, #28]
 80040c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ca:	69b9      	ldr	r1, [r7, #24]
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	e841 2300 	strex	r3, r2, [r1]
 80040d2:	617b      	str	r3, [r7, #20]
   return(result);
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e4      	bne.n	80040a4 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040de:	4619      	mov	r1, r3
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f85b 	bl	800419c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040e6:	e03f      	b.n	8004168 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00e      	beq.n	8004112 <HAL_UART_IRQHandler+0x55a>
 80040f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004108:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fc7e 	bl	8004a0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004110:	e02d      	b.n	800416e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00e      	beq.n	800413c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800411e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004126:	2b00      	cmp	r3, #0
 8004128:	d008      	beq.n	800413c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800412e:	2b00      	cmp	r3, #0
 8004130:	d01c      	beq.n	800416c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	4798      	blx	r3
    }
    return;
 800413a:	e017      	b.n	800416c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800413c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004144:	2b00      	cmp	r3, #0
 8004146:	d012      	beq.n	800416e <HAL_UART_IRQHandler+0x5b6>
 8004148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800414c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00c      	beq.n	800416e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 fc2f 	bl	80049b8 <UART_EndTransmit_IT>
    return;
 800415a:	e008      	b.n	800416e <HAL_UART_IRQHandler+0x5b6>
      return;
 800415c:	bf00      	nop
 800415e:	e006      	b.n	800416e <HAL_UART_IRQHandler+0x5b6>
    return;
 8004160:	bf00      	nop
 8004162:	e004      	b.n	800416e <HAL_UART_IRQHandler+0x5b6>
      return;
 8004164:	bf00      	nop
 8004166:	e002      	b.n	800416e <HAL_UART_IRQHandler+0x5b6>
      return;
 8004168:	bf00      	nop
 800416a:	e000      	b.n	800416e <HAL_UART_IRQHandler+0x5b6>
    return;
 800416c:	bf00      	nop
  }

}
 800416e:	37e8      	adds	r7, #232	; 0xe8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b08f      	sub	sp, #60	; 0x3c
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <HAL_HalfDuplex_EnableTransmitter+0x16>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e040      	b.n	800424c <HAL_HalfDuplex_EnableTransmitter+0x98>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2224      	movs	r2, #36	; 0x24
 80041d6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	f023 030c 	bic.w	r3, r3, #12
 80041ec:	637b      	str	r3, [r7, #52]	; 0x34
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	461a      	mov	r2, r3
 80041f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041f8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e6      	bne.n	80041d8 <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	e853 3f00 	ldrex	r3, [r3]
 8004216:	60bb      	str	r3, [r7, #8]
   return(result);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f043 0308 	orr.w	r3, r3, #8
 800421e:	633b      	str	r3, [r7, #48]	; 0x30
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	61bb      	str	r3, [r7, #24]
 800422a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422c:	6979      	ldr	r1, [r7, #20]
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	e841 2300 	strex	r3, r2, [r1]
 8004234:	613b      	str	r3, [r7, #16]
   return(result);
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1e6      	bne.n	800420a <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	373c      	adds	r7, #60	; 0x3c
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8004258:	b480      	push	{r7}
 800425a:	b08f      	sub	sp, #60	; 0x3c
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <HAL_HalfDuplex_EnableReceiver+0x16>
 800426a:	2302      	movs	r3, #2
 800426c:	e040      	b.n	80042f0 <HAL_HalfDuplex_EnableReceiver+0x98>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2224      	movs	r2, #36	; 0x24
 800427a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	61fb      	str	r3, [r7, #28]
   return(result);
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	f023 030c 	bic.w	r3, r3, #12
 8004290:	637b      	str	r3, [r7, #52]	; 0x34
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800429a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800429c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e6      	bne.n	800427c <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	e853 3f00 	ldrex	r3, [r3]
 80042ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f043 0304 	orr.w	r3, r3, #4
 80042c2:	633b      	str	r3, [r7, #48]	; 0x30
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042cc:	61bb      	str	r3, [r7, #24]
 80042ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6979      	ldr	r1, [r7, #20]
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	613b      	str	r3, [r7, #16]
   return(result);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e6      	bne.n	80042ae <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2220      	movs	r2, #32
 80042e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	373c      	adds	r7, #60	; 0x3c
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b088      	sub	sp, #32
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	431a      	orrs	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	4313      	orrs	r3, r2
 800431e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	4b8a      	ldr	r3, [pc, #552]	; (8004550 <UART_SetConfig+0x254>)
 8004328:	4013      	ands	r3, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6812      	ldr	r2, [r2, #0]
 800432e:	6979      	ldr	r1, [r7, #20]
 8004330:	430b      	orrs	r3, r1
 8004332:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	430a      	orrs	r2, r1
 800436c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a78      	ldr	r2, [pc, #480]	; (8004554 <UART_SetConfig+0x258>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d120      	bne.n	80043ba <UART_SetConfig+0xbe>
 8004378:	4b77      	ldr	r3, [pc, #476]	; (8004558 <UART_SetConfig+0x25c>)
 800437a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437c:	f003 0303 	and.w	r3, r3, #3
 8004380:	2b03      	cmp	r3, #3
 8004382:	d817      	bhi.n	80043b4 <UART_SetConfig+0xb8>
 8004384:	a201      	add	r2, pc, #4	; (adr r2, 800438c <UART_SetConfig+0x90>)
 8004386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438a:	bf00      	nop
 800438c:	0800439d 	.word	0x0800439d
 8004390:	080043a9 	.word	0x080043a9
 8004394:	080043af 	.word	0x080043af
 8004398:	080043a3 	.word	0x080043a3
 800439c:	2300      	movs	r3, #0
 800439e:	77fb      	strb	r3, [r7, #31]
 80043a0:	e01d      	b.n	80043de <UART_SetConfig+0xe2>
 80043a2:	2302      	movs	r3, #2
 80043a4:	77fb      	strb	r3, [r7, #31]
 80043a6:	e01a      	b.n	80043de <UART_SetConfig+0xe2>
 80043a8:	2304      	movs	r3, #4
 80043aa:	77fb      	strb	r3, [r7, #31]
 80043ac:	e017      	b.n	80043de <UART_SetConfig+0xe2>
 80043ae:	2308      	movs	r3, #8
 80043b0:	77fb      	strb	r3, [r7, #31]
 80043b2:	e014      	b.n	80043de <UART_SetConfig+0xe2>
 80043b4:	2310      	movs	r3, #16
 80043b6:	77fb      	strb	r3, [r7, #31]
 80043b8:	e011      	b.n	80043de <UART_SetConfig+0xe2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a67      	ldr	r2, [pc, #412]	; (800455c <UART_SetConfig+0x260>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d102      	bne.n	80043ca <UART_SetConfig+0xce>
 80043c4:	2300      	movs	r3, #0
 80043c6:	77fb      	strb	r3, [r7, #31]
 80043c8:	e009      	b.n	80043de <UART_SetConfig+0xe2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a64      	ldr	r2, [pc, #400]	; (8004560 <UART_SetConfig+0x264>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d102      	bne.n	80043da <UART_SetConfig+0xde>
 80043d4:	2300      	movs	r3, #0
 80043d6:	77fb      	strb	r3, [r7, #31]
 80043d8:	e001      	b.n	80043de <UART_SetConfig+0xe2>
 80043da:	2310      	movs	r3, #16
 80043dc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043e6:	d15b      	bne.n	80044a0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80043e8:	7ffb      	ldrb	r3, [r7, #31]
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d827      	bhi.n	800443e <UART_SetConfig+0x142>
 80043ee:	a201      	add	r2, pc, #4	; (adr r2, 80043f4 <UART_SetConfig+0xf8>)
 80043f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f4:	08004419 	.word	0x08004419
 80043f8:	08004421 	.word	0x08004421
 80043fc:	08004429 	.word	0x08004429
 8004400:	0800443f 	.word	0x0800443f
 8004404:	0800442f 	.word	0x0800442f
 8004408:	0800443f 	.word	0x0800443f
 800440c:	0800443f 	.word	0x0800443f
 8004410:	0800443f 	.word	0x0800443f
 8004414:	08004437 	.word	0x08004437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004418:	f7fe fc4a 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 800441c:	61b8      	str	r0, [r7, #24]
        break;
 800441e:	e013      	b.n	8004448 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004420:	f7fe fc68 	bl	8002cf4 <HAL_RCC_GetPCLK2Freq>
 8004424:	61b8      	str	r0, [r7, #24]
        break;
 8004426:	e00f      	b.n	8004448 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004428:	4b4e      	ldr	r3, [pc, #312]	; (8004564 <UART_SetConfig+0x268>)
 800442a:	61bb      	str	r3, [r7, #24]
        break;
 800442c:	e00c      	b.n	8004448 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800442e:	f7fe fbc9 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8004432:	61b8      	str	r0, [r7, #24]
        break;
 8004434:	e008      	b.n	8004448 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800443a:	61bb      	str	r3, [r7, #24]
        break;
 800443c:	e004      	b.n	8004448 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	77bb      	strb	r3, [r7, #30]
        break;
 8004446:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d074      	beq.n	8004538 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	005a      	lsls	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	085b      	lsrs	r3, r3, #1
 8004458:	441a      	add	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004462:	b29b      	uxth	r3, r3
 8004464:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	2b0f      	cmp	r3, #15
 800446a:	d916      	bls.n	800449a <UART_SetConfig+0x19e>
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004472:	d212      	bcs.n	800449a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	b29b      	uxth	r3, r3
 8004478:	f023 030f 	bic.w	r3, r3, #15
 800447c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	085b      	lsrs	r3, r3, #1
 8004482:	b29b      	uxth	r3, r3
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	b29a      	uxth	r2, r3
 800448a:	89fb      	ldrh	r3, [r7, #14]
 800448c:	4313      	orrs	r3, r2
 800448e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	89fa      	ldrh	r2, [r7, #14]
 8004496:	60da      	str	r2, [r3, #12]
 8004498:	e04e      	b.n	8004538 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	77bb      	strb	r3, [r7, #30]
 800449e:	e04b      	b.n	8004538 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044a0:	7ffb      	ldrb	r3, [r7, #31]
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d827      	bhi.n	80044f6 <UART_SetConfig+0x1fa>
 80044a6:	a201      	add	r2, pc, #4	; (adr r2, 80044ac <UART_SetConfig+0x1b0>)
 80044a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ac:	080044d1 	.word	0x080044d1
 80044b0:	080044d9 	.word	0x080044d9
 80044b4:	080044e1 	.word	0x080044e1
 80044b8:	080044f7 	.word	0x080044f7
 80044bc:	080044e7 	.word	0x080044e7
 80044c0:	080044f7 	.word	0x080044f7
 80044c4:	080044f7 	.word	0x080044f7
 80044c8:	080044f7 	.word	0x080044f7
 80044cc:	080044ef 	.word	0x080044ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d0:	f7fe fbee 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 80044d4:	61b8      	str	r0, [r7, #24]
        break;
 80044d6:	e013      	b.n	8004500 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044d8:	f7fe fc0c 	bl	8002cf4 <HAL_RCC_GetPCLK2Freq>
 80044dc:	61b8      	str	r0, [r7, #24]
        break;
 80044de:	e00f      	b.n	8004500 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e0:	4b20      	ldr	r3, [pc, #128]	; (8004564 <UART_SetConfig+0x268>)
 80044e2:	61bb      	str	r3, [r7, #24]
        break;
 80044e4:	e00c      	b.n	8004500 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044e6:	f7fe fb6d 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 80044ea:	61b8      	str	r0, [r7, #24]
        break;
 80044ec:	e008      	b.n	8004500 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f2:	61bb      	str	r3, [r7, #24]
        break;
 80044f4:	e004      	b.n	8004500 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	77bb      	strb	r3, [r7, #30]
        break;
 80044fe:	bf00      	nop
    }

    if (pclk != 0U)
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d018      	beq.n	8004538 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	085a      	lsrs	r2, r3, #1
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	441a      	add	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	b29b      	uxth	r3, r3
 800451a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b0f      	cmp	r3, #15
 8004520:	d908      	bls.n	8004534 <UART_SetConfig+0x238>
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004528:	d204      	bcs.n	8004534 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	e001      	b.n	8004538 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004544:	7fbb      	ldrb	r3, [r7, #30]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	efff69f3 	.word	0xefff69f3
 8004554:	40013800 	.word	0x40013800
 8004558:	40021000 	.word	0x40021000
 800455c:	40004400 	.word	0x40004400
 8004560:	40004800 	.word	0x40004800
 8004564:	007a1200 	.word	0x007a1200

08004568 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	f003 0310 	and.w	r3, r3, #16
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	f003 0320 	and.w	r3, r3, #32
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01a      	beq.n	800467e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004666:	d10a      	bne.n	800467e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	605a      	str	r2, [r3, #4]
  }
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046bc:	f7fc fd86 	bl	80011cc <HAL_GetTick>
 80046c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0308 	and.w	r3, r3, #8
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d10e      	bne.n	80046ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f82d 	bl	800473e <UART_WaitOnFlagUntilTimeout>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e023      	b.n	8004736 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d10e      	bne.n	800471a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f817 	bl	800473e <UART_WaitOnFlagUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e00d      	b.n	8004736 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2220      	movs	r2, #32
 800471e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b09c      	sub	sp, #112	; 0x70
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	603b      	str	r3, [r7, #0]
 800474a:	4613      	mov	r3, r2
 800474c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800474e:	e0a5      	b.n	800489c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004752:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004756:	f000 80a1 	beq.w	800489c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800475a:	f7fc fd37 	bl	80011cc <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004766:	429a      	cmp	r2, r3
 8004768:	d302      	bcc.n	8004770 <UART_WaitOnFlagUntilTimeout+0x32>
 800476a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800476c:	2b00      	cmp	r3, #0
 800476e:	d13e      	bne.n	80047ee <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004778:	e853 3f00 	ldrex	r3, [r3]
 800477c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800477e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004780:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004784:	667b      	str	r3, [r7, #100]	; 0x64
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800478e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004790:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004792:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004794:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004796:	e841 2300 	strex	r3, r2, [r1]
 800479a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800479c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1e6      	bne.n	8004770 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3308      	adds	r3, #8
 80047a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ac:	e853 3f00 	ldrex	r3, [r3]
 80047b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b4:	f023 0301 	bic.w	r3, r3, #1
 80047b8:	663b      	str	r3, [r7, #96]	; 0x60
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3308      	adds	r3, #8
 80047c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80047c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047ca:	e841 2300 	strex	r3, r2, [r1]
 80047ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80047d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1e5      	bne.n	80047a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2220      	movs	r2, #32
 80047da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2220      	movs	r2, #32
 80047e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e067      	b.n	80048be <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d04f      	beq.n	800489c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800480a:	d147      	bne.n	800489c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004814:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800482a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004834:	637b      	str	r3, [r7, #52]	; 0x34
 8004836:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800483a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800483c:	e841 2300 	strex	r3, r2, [r1]
 8004840:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e6      	bne.n	8004816 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3308      	adds	r3, #8
 800484e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	e853 3f00 	ldrex	r3, [r3]
 8004856:	613b      	str	r3, [r7, #16]
   return(result);
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f023 0301 	bic.w	r3, r3, #1
 800485e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3308      	adds	r3, #8
 8004866:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004868:	623a      	str	r2, [r7, #32]
 800486a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486c:	69f9      	ldr	r1, [r7, #28]
 800486e:	6a3a      	ldr	r2, [r7, #32]
 8004870:	e841 2300 	strex	r3, r2, [r1]
 8004874:	61bb      	str	r3, [r7, #24]
   return(result);
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e5      	bne.n	8004848 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2220      	movs	r2, #32
 8004880:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2220      	movs	r2, #32
 8004886:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e010      	b.n	80048be <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	69da      	ldr	r2, [r3, #28]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	4013      	ands	r3, r2
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	bf0c      	ite	eq
 80048ac:	2301      	moveq	r3, #1
 80048ae:	2300      	movne	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	461a      	mov	r2, r3
 80048b4:	79fb      	ldrb	r3, [r7, #7]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	f43f af4a 	beq.w	8004750 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3770      	adds	r7, #112	; 0x70
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b095      	sub	sp, #84	; 0x54
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ec:	643b      	str	r3, [r7, #64]	; 0x40
 80048ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e6      	bne.n	80048ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3308      	adds	r3, #8
 8004906:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	e853 3f00 	ldrex	r3, [r3]
 800490e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	64bb      	str	r3, [r7, #72]	; 0x48
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3308      	adds	r3, #8
 800491e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004920:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004922:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004924:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004928:	e841 2300 	strex	r3, r2, [r1]
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e5      	bne.n	8004900 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004938:	2b01      	cmp	r3, #1
 800493a:	d118      	bne.n	800496e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	e853 3f00 	ldrex	r3, [r3]
 8004948:	60bb      	str	r3, [r7, #8]
   return(result);
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f023 0310 	bic.w	r3, r3, #16
 8004950:	647b      	str	r3, [r7, #68]	; 0x44
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800495a:	61bb      	str	r3, [r7, #24]
 800495c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495e:	6979      	ldr	r1, [r7, #20]
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	e841 2300 	strex	r3, r2, [r1]
 8004966:	613b      	str	r3, [r7, #16]
   return(result);
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1e6      	bne.n	800493c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2220      	movs	r2, #32
 8004972:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004980:	bf00      	nop
 8004982:	3754      	adds	r7, #84	; 0x54
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f7ff fbec 	bl	8004188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049b0:	bf00      	nop
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d4:	61fb      	str	r3, [r7, #28]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	61bb      	str	r3, [r7, #24]
 80049e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	6979      	ldr	r1, [r7, #20]
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	613b      	str	r3, [r7, #16]
   return(result);
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e6      	bne.n	80049c0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2220      	movs	r2, #32
 80049f6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff fbb8 	bl	8004174 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a04:	bf00      	nop
 8004a06:	3720      	adds	r7, #32
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	71fb      	strb	r3, [r7, #7]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	71bb      	strb	r3, [r7, #6]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8004a32:	797b      	ldrb	r3, [r7, #5]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d901      	bls.n	8004a3c <tmc_fillCRC8Table+0x1c>
		return 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	e09e      	b.n	8004b7a <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 8004a3c:	797a      	ldrb	r2, [r7, #5]
 8004a3e:	4951      	ldr	r1, [pc, #324]	; (8004b84 <tmc_fillCRC8Table+0x164>)
 8004a40:	4613      	mov	r3, r2
 8004a42:	01db      	lsls	r3, r3, #7
 8004a44:	4413      	add	r3, r2
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	440b      	add	r3, r1
 8004a4a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004a4e:	79fa      	ldrb	r2, [r7, #7]
 8004a50:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 8004a52:	797a      	ldrb	r2, [r7, #5]
 8004a54:	494b      	ldr	r1, [pc, #300]	; (8004b84 <tmc_fillCRC8Table+0x164>)
 8004a56:	4613      	mov	r3, r2
 8004a58:	01db      	lsls	r3, r3, #7
 8004a5a:	4413      	add	r3, r2
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	440b      	add	r3, r1
 8004a60:	f203 1301 	addw	r3, r3, #257	; 0x101
 8004a64:	79ba      	ldrb	r2, [r7, #6]
 8004a66:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 8004a68:	797a      	ldrb	r2, [r7, #5]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	01db      	lsls	r3, r3, #7
 8004a6e:	4413      	add	r3, r2
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	4a44      	ldr	r2, [pc, #272]	; (8004b84 <tmc_fillCRC8Table+0x164>)
 8004a74:	4413      	add	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a7e:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8004a80:	4b41      	ldr	r3, [pc, #260]	; (8004b88 <tmc_fillCRC8Table+0x168>)
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	e074      	b.n	8004b70 <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 8004a86:	79bb      	ldrb	r3, [r7, #6]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d004      	beq.n	8004a96 <tmc_fillCRC8Table+0x76>
 8004a8c:	6978      	ldr	r0, [r7, #20]
 8004a8e:	f000 f8f7 	bl	8004c80 <flipBitsInBytes>
 8004a92:	4603      	mov	r3, r0
 8004a94:	e000      	b.n	8004a98 <tmc_fillCRC8Table+0x78>
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	613b      	str	r3, [r7, #16]
 8004a9e:	e035      	b.n	8004b0c <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	0fdb      	lsrs	r3, r3, #31
 8004aa4:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <tmc_fillCRC8Table+0x9a>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	e000      	b.n	8004abc <tmc_fillCRC8Table+0x9c>
 8004aba:	2300      	movs	r3, #0
 8004abc:	69fa      	ldr	r2, [r7, #28]
 8004abe:	4053      	eors	r3, r2
 8004ac0:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <tmc_fillCRC8Table+0xb2>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	021b      	lsls	r3, r3, #8
 8004ad0:	e000      	b.n	8004ad4 <tmc_fillCRC8Table+0xb4>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	69fa      	ldr	r2, [r7, #28]
 8004ad6:	4053      	eors	r3, r2
 8004ad8:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <tmc_fillCRC8Table+0xca>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	041b      	lsls	r3, r3, #16
 8004ae8:	e000      	b.n	8004aec <tmc_fillCRC8Table+0xcc>
 8004aea:	2300      	movs	r3, #0
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	4053      	eors	r3, r2
 8004af0:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 8004af2:	7afb      	ldrb	r3, [r7, #11]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <tmc_fillCRC8Table+0xde>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	061b      	lsls	r3, r3, #24
 8004afc:	e000      	b.n	8004b00 <tmc_fillCRC8Table+0xe0>
 8004afe:	2300      	movs	r3, #0
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	4053      	eors	r3, r2
 8004b04:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	613b      	str	r3, [r7, #16]
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	2b07      	cmp	r3, #7
 8004b10:	ddc6      	ble.n	8004aa0 <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 8004b12:	79bb      	ldrb	r3, [r7, #6]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d004      	beq.n	8004b22 <tmc_fillCRC8Table+0x102>
 8004b18:	69f8      	ldr	r0, [r7, #28]
 8004b1a:	f000 f8b1 	bl	8004c80 <flipBitsInBytes>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	e000      	b.n	8004b24 <tmc_fillCRC8Table+0x104>
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	61ba      	str	r2, [r7, #24]
 8004b2c:	69fa      	ldr	r2, [r7, #28]
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	0a1b      	lsrs	r3, r3, #8
 8004b36:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	61ba      	str	r2, [r7, #24]
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	b2d2      	uxtb	r2, r2
 8004b42:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	0a1b      	lsrs	r3, r3, #8
 8004b48:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	61ba      	str	r2, [r7, #24]
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	0a1b      	lsrs	r3, r3, #8
 8004b5a:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	61ba      	str	r2, [r7, #24]
 8004b62:	69fa      	ldr	r2, [r7, #28]
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	4a06      	ldr	r2, [pc, #24]	; (8004b8c <tmc_fillCRC8Table+0x16c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d186      	bne.n	8004a86 <tmc_fillCRC8Table+0x66>
	}

	return 1;
 8004b78:	2301      	movs	r3, #1
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3720      	adds	r7, #32
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20000684 	.word	0x20000684
 8004b88:	03020100 	.word	0x03020100
 8004b8c:	04030200 	.word	0x04030200

08004b90 <tmc_CRC8>:
 *     uint8_t *data: A pointer to the data that will be CRC'd.
 *     uint32_t bytes: The length of the data buffer.
 *     uint8_t index: The index of the CRC table to be used.
 */
uint8_t tmc_CRC8(uint8_t *data, uint32_t bytes, uint8_t index)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	75fb      	strb	r3, [r7, #23]
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d901      	bls.n	8004bac <tmc_CRC8+0x1c>
		return 0;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	e02c      	b.n	8004c06 <tmc_CRC8+0x76>

	table = &CRCTables[index].table[0];
 8004bac:	79fa      	ldrb	r2, [r7, #7]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	01db      	lsls	r3, r3, #7
 8004bb2:	4413      	add	r3, r2
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	4a16      	ldr	r2, [pc, #88]	; (8004c10 <tmc_CRC8+0x80>)
 8004bb8:	4413      	add	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]

	while(bytes--)
 8004bbc:	e00b      	b.n	8004bd6 <tmc_CRC8+0x46>
		result = table[result ^ *data++];
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	60fa      	str	r2, [r7, #12]
 8004bc4:	781a      	ldrb	r2, [r3, #0]
 8004bc6:	7dfb      	ldrb	r3, [r7, #23]
 8004bc8:	4053      	eors	r3, r2
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	1e5a      	subs	r2, r3, #1
 8004bda:	60ba      	str	r2, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1ee      	bne.n	8004bbe <tmc_CRC8+0x2e>

	return (CRCTables[index].isReflected)? flipByte(result) : result;
 8004be0:	79fa      	ldrb	r2, [r7, #7]
 8004be2:	490b      	ldr	r1, [pc, #44]	; (8004c10 <tmc_CRC8+0x80>)
 8004be4:	4613      	mov	r3, r2
 8004be6:	01db      	lsls	r3, r3, #7
 8004be8:	4413      	add	r3, r2
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	440b      	add	r3, r1
 8004bee:	f203 1301 	addw	r3, r3, #257	; 0x101
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <tmc_CRC8+0x74>
 8004bf8:	7dfb      	ldrb	r3, [r7, #23]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 f80a 	bl	8004c14 <flipByte>
 8004c00:	4603      	mov	r3, r0
 8004c02:	e000      	b.n	8004c06 <tmc_CRC8+0x76>
 8004c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20000684 	.word	0x20000684

08004c14 <flipByte>:
	return CRCTables[index].isReflected;
}

// Helper functions
static uint8_t flipByte(uint8_t value)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	71fb      	strb	r3, [r7, #7]
	// swap odd and even bits
	value = ((value >> 1) & 0x55) | ((value & 0x55) << 1);
 8004c1e:	79fb      	ldrb	r3, [r7, #7]
 8004c20:	085b      	lsrs	r3, r3, #1
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	b25b      	sxtb	r3, r3
 8004c26:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8004c2a:	b25a      	sxtb	r2, r3
 8004c2c:	79fb      	ldrb	r3, [r7, #7]
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	b25b      	sxtb	r3, r3
 8004c32:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8004c36:	b25b      	sxtb	r3, r3
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	b25b      	sxtb	r3, r3
 8004c3c:	71fb      	strb	r3, [r7, #7]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33) | ((value & 0x33) << 2);
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	089b      	lsrs	r3, r3, #2
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	b25b      	sxtb	r3, r3
 8004c46:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8004c4a:	b25a      	sxtb	r2, r3
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	b25b      	sxtb	r3, r3
 8004c52:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8004c56:	b25b      	sxtb	r3, r3
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	b25b      	sxtb	r3, r3
 8004c5c:	71fb      	strb	r3, [r7, #7]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F) | ((value & 0x0F) << 4);
 8004c5e:	79fb      	ldrb	r3, [r7, #7]
 8004c60:	091b      	lsrs	r3, r3, #4
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	b25a      	sxtb	r2, r3
 8004c66:	79fb      	ldrb	r3, [r7, #7]
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	b25b      	sxtb	r3, r3
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	b25b      	sxtb	r3, r3
 8004c70:	71fb      	strb	r3, [r7, #7]

	return value;
 8004c72:	79fb      	ldrb	r3, [r7, #7]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	085b      	lsrs	r3, r3, #1
 8004c8c:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	089b      	lsrs	r3, r3, #2
 8004ca0:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 8004cac:	4313      	orrs	r3, r2
 8004cae:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	091b      	lsrs	r3, r3, #4
 8004cb4:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	607b      	str	r3, [r7, #4]

	return value;
 8004cc4:	687b      	ldr	r3, [r7, #4]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <tmc2209_writeInt>:
// => CRC wrapper
extern uint8_t tmc2209_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2209_writeInt(TMC2209TypeDef *tmc2209, uint8_t address, int32_t value)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b086      	sub	sp, #24
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	607a      	str	r2, [r7, #4]
 8004cde:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8];

	data[0] = 0x05;
 8004ce0:	2305      	movs	r3, #5
 8004ce2:	743b      	strb	r3, [r7, #16]
	data[1] = tmc2209->slaveAddress;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8004cea:	747b      	strb	r3, [r7, #17]
	data[2] = address | TMC_WRITE_BIT;
 8004cec:	7afb      	ldrb	r3, [r7, #11]
 8004cee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	74bb      	strb	r3, [r7, #18]
	data[3] = (value >> 24) & 0xFF;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	0e1b      	lsrs	r3, r3, #24
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	74fb      	strb	r3, [r7, #19]
	data[4] = (value >> 16) & 0xFF;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	141b      	asrs	r3, r3, #16
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	753b      	strb	r3, [r7, #20]
	data[5] = (value >> 8 ) & 0xFF;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	121b      	asrs	r3, r3, #8
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	757b      	strb	r3, [r7, #21]
	data[6] = (value      ) & 0xFF;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	75bb      	strb	r3, [r7, #22]
	data[7] = tmc2209_CRC8(data, 7);
 8004d14:	f107 0310 	add.w	r3, r7, #16
 8004d18:	2107      	movs	r1, #7
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fb fad0 	bl	80002c0 <tmc2209_CRC8>
 8004d20:	4603      	mov	r3, r0
 8004d22:	75fb      	strb	r3, [r7, #23]

	tmc2209_readWriteArray(tmc2209->config->channel, &data[0], 8, 0);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8004d2c:	f107 0110 	add.w	r1, r7, #16
 8004d30:	2300      	movs	r3, #0
 8004d32:	2208      	movs	r2, #8
 8004d34:	f7fb fa9c 	bl	8000270 <tmc2209_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
 8004d38:	7afb      	ldrb	r3, [r7, #11]
 8004d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d3e:	72fb      	strb	r3, [r7, #11]
	tmc2209->config->shadowRegister[address] = value;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	7afb      	ldrb	r3, [r7, #11]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	605a      	str	r2, [r3, #4]
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
 8004d4e:	7afb      	ldrb	r3, [r7, #11]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	4413      	add	r3, r2
 8004d54:	f893 2204 	ldrb.w	r2, [r3, #516]	; 0x204
 8004d58:	7afb      	ldrb	r3, [r7, #11]
 8004d5a:	f042 0208 	orr.w	r2, r2, #8
 8004d5e:	b2d1      	uxtb	r1, r2
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	460a      	mov	r2, r1
 8004d66:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 8004d6a:	bf00      	nop
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <tmc2209_readInt>:

int32_t tmc2209_readInt(TMC2209TypeDef *tmc2209, uint8_t address)
{
 8004d72:	b590      	push	{r4, r7, lr}
 8004d74:	b085      	sub	sp, #20
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	70fb      	strb	r3, [r7, #3]
	uint8_t data[8] = { 0 };
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60bb      	str	r3, [r7, #8]
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]

	address = TMC_ADDRESS(address);
 8004d86:	78fb      	ldrb	r3, [r7, #3]
 8004d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d8c:	70fb      	strb	r3, [r7, #3]

	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	4413      	add	r3, r2
 8004d94:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d106      	bne.n	8004dae <tmc2209_readInt+0x3c>
		return tmc2209->config->shadowRegister[address];
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	78fb      	ldrb	r3, [r7, #3]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	e03f      	b.n	8004e2e <tmc2209_readInt+0xbc>

	data[0] = 0x05;
 8004dae:	2305      	movs	r3, #5
 8004db0:	723b      	strb	r3, [r7, #8]
	data[1] = tmc2209->slaveAddress;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8004db8:	727b      	strb	r3, [r7, #9]
	data[2] = address;
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	72bb      	strb	r3, [r7, #10]
	data[3] = tmc2209_CRC8(data, 3);
 8004dbe:	f107 0308 	add.w	r3, r7, #8
 8004dc2:	2103      	movs	r1, #3
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fb fa7b 	bl	80002c0 <tmc2209_CRC8>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	72fb      	strb	r3, [r7, #11]

	tmc2209_readWriteArray(tmc2209->config->channel, data, 4, 8);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8004dd6:	f107 0108 	add.w	r1, r7, #8
 8004dda:	2308      	movs	r3, #8
 8004ddc:	2204      	movs	r2, #4
 8004dde:	f7fb fa47 	bl	8000270 <tmc2209_readWriteArray>

	// Byte 0: Sync nibble correct?
	if (data[0] != 0x05)
 8004de2:	7a3b      	ldrb	r3, [r7, #8]
 8004de4:	2b05      	cmp	r3, #5
 8004de6:	d001      	beq.n	8004dec <tmc2209_readInt+0x7a>
		return 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	e020      	b.n	8004e2e <tmc2209_readInt+0xbc>

	// Byte 1: Master address correct?
	if (data[1] != 0xFF)
 8004dec:	7a7b      	ldrb	r3, [r7, #9]
 8004dee:	2bff      	cmp	r3, #255	; 0xff
 8004df0:	d001      	beq.n	8004df6 <tmc2209_readInt+0x84>
		return 0;
 8004df2:	2300      	movs	r3, #0
 8004df4:	e01b      	b.n	8004e2e <tmc2209_readInt+0xbc>

	// Byte 2: Address correct?
	if (data[2] != address)
 8004df6:	7abb      	ldrb	r3, [r7, #10]
 8004df8:	78fa      	ldrb	r2, [r7, #3]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d001      	beq.n	8004e02 <tmc2209_readInt+0x90>
		return 0;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e015      	b.n	8004e2e <tmc2209_readInt+0xbc>

	// Byte 7: CRC correct?
	if (data[7] != tmc2209_CRC8(data, 7))
 8004e02:	7bfc      	ldrb	r4, [r7, #15]
 8004e04:	f107 0308 	add.w	r3, r7, #8
 8004e08:	2107      	movs	r1, #7
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fb fa58 	bl	80002c0 <tmc2209_CRC8>
 8004e10:	4603      	mov	r3, r0
 8004e12:	429c      	cmp	r4, r3
 8004e14:	d001      	beq.n	8004e1a <tmc2209_readInt+0xa8>
		return 0;
 8004e16:	2300      	movs	r3, #0
 8004e18:	e009      	b.n	8004e2e <tmc2209_readInt+0xbc>

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
 8004e1a:	7afb      	ldrb	r3, [r7, #11]
 8004e1c:	061a      	lsls	r2, r3, #24
 8004e1e:	7b3b      	ldrb	r3, [r7, #12]
 8004e20:	041b      	lsls	r3, r3, #16
 8004e22:	4313      	orrs	r3, r2
 8004e24:	7b7a      	ldrb	r2, [r7, #13]
 8004e26:	0212      	lsls	r2, r2, #8
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	7bba      	ldrb	r2, [r7, #14]
 8004e2c:	4313      	orrs	r3, r2
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd90      	pop	{r4, r7, pc}
	...

08004e38 <tmc2209_init>:

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b087      	sub	sp, #28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	607b      	str	r3, [r7, #4]
 8004e42:	460b      	mov	r3, r1
 8004e44:	72fb      	strb	r3, [r7, #11]
 8004e46:	4613      	mov	r3, r2
 8004e48:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	7aba      	ldrb	r2, [r7, #10]
 8004e4e:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	7afa      	ldrb	r2, [r7, #11]
 8004e68:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2200      	movs	r2, #0
 8004e72:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	e017      	b.n	8004eb2 <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 8004e82:	4a11      	ldr	r2, [pc, #68]	; (8004ec8 <tmc2209_init+0x90>)
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	4413      	add	r3, r2
 8004e88:	7819      	ldrb	r1, [r3, #0]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004e94:	460a      	mov	r2, r1
 8004e96:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	6a3a      	ldr	r2, [r7, #32]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68f9      	ldr	r1, [r7, #12]
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	617b      	str	r3, [r7, #20]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2b7f      	cmp	r3, #127	; 0x7f
 8004eb6:	d9e4      	bls.n	8004e82 <tmc2209_init+0x4a>
	}
}
 8004eb8:	bf00      	nop
 8004eba:	bf00      	nop
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	0800664c 	.word	0x0800664c

08004ecc <writeConfiguration>:

static void writeConfiguration(TMC2209TypeDef *tmc2209)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
	uint8_t *ptr = &tmc2209->config->configIndex;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	60bb      	str	r3, [r7, #8]
	const int32_t *settings;

	if(tmc2209->config->state == CONFIG_RESTORE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d131      	bne.n	8004f4a <writeConfiguration+0x7e>
	{
		settings = tmc2209->config->shadowRegister;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	3304      	adds	r3, #4
 8004eec:	60fb      	str	r3, [r7, #12]
		// Find the next restorable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8004eee:	e005      	b.n	8004efc <writeConfiguration+0x30>
		{
			(*ptr)++;
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	b25b      	sxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	db3b      	blt.n	8004f7e <writeConfiguration+0xb2>
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0e9      	beq.n	8004ef0 <writeConfiguration+0x24>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	461a      	mov	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4413      	add	r3, r2
 8004f26:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d025      	beq.n	8004f7e <writeConfiguration+0xb2>
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	461a      	mov	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0d3      	beq.n	8004ef0 <writeConfiguration+0x24>
 8004f48:	e019      	b.n	8004f7e <writeConfiguration+0xb2>
		}
	}
	else
	{
		settings = tmc2209->registerResetState;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	60fb      	str	r3, [r7, #12]
		// Find the next resettable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 8004f50:	e005      	b.n	8004f5e <writeConfiguration+0x92>
		{
			(*ptr)++;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	3301      	adds	r3, #1
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	b25b      	sxtb	r3, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	db0a      	blt.n	8004f7e <writeConfiguration+0xb2>
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4413      	add	r3, r2
 8004f72:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004f76:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d1e9      	bne.n	8004f52 <writeConfiguration+0x86>
		}
	}

	if(*ptr < TMC2209_REGISTER_COUNT)
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	b25b      	sxtb	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	db12      	blt.n	8004fae <writeConfiguration+0xe2>
	{
		tmc2209_writeInt(tmc2209, *ptr, settings[*ptr]);
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	7819      	ldrb	r1, [r3, #0]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4413      	add	r3, r2
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff fe99 	bl	8004cd2 <tmc2209_writeInt>
		(*ptr)++;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	701a      	strb	r2, [r3, #0]
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
		}

		tmc2209->config->state = CONFIG_READY;
	}
}
 8004fac:	e013      	b.n	8004fd6 <writeConfiguration+0x10a>
		if(tmc2209->config->callback)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d009      	beq.n	8004fce <writeConfiguration+0x102>
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6812      	ldr	r2, [r2, #0]
 8004fc6:	7812      	ldrb	r2, [r2, #0]
 8004fc8:	4611      	mov	r1, r2
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	4798      	blx	r3
		tmc2209->config->state = CONFIG_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	701a      	strb	r2, [r3, #0]
}
 8004fd6:	bf00      	nop
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <tmc2209_periodicJob>:

void tmc2209_periodicJob(TMC2209TypeDef *tmc2209, uint32_t tick)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b082      	sub	sp, #8
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	6039      	str	r1, [r7, #0]
	UNUSED(tick);

	if(tmc2209->config->state != CONFIG_READY)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <tmc2209_periodicJob+0x1c>
	{
		writeConfiguration(tmc2209);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7ff ff6a 	bl	8004ecc <writeConfiguration>
		return;
 8004ff8:	bf00      	nop
	}
}
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <tmc2209_reset>:
{
	tmc2209->config->callback = (tmc_callback_config) callback;
}

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <tmc2209_reset+0x16>
		return false;
 8005012:	2300      	movs	r3, #0
 8005014:	e028      	b.n	8005068 <tmc2209_reset+0x68>

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	e019      	b.n	8005050 <tmc2209_reset+0x50>
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4413      	add	r3, r2
 8005022:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	f023 0308 	bic.w	r3, r3, #8
 800502c:	b2d9      	uxtb	r1, r3
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4413      	add	r3, r2
 8005034:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005038:	460a      	mov	r2, r1
 800503a:	701a      	strb	r2, [r3, #0]
		tmc2209->config->shadowRegister[i] = 0;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	2200      	movs	r2, #0
 8005048:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3301      	adds	r3, #1
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b7f      	cmp	r3, #127	; 0x7f
 8005054:	d9e2      	bls.n	800501c <tmc2209_reset+0x1c>
	}

	tmc2209->config->state        = CONFIG_RESET;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2201      	movs	r2, #1
 800505c:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2200      	movs	r2, #0
 8005064:	705a      	strb	r2, [r3, #1]

	return true;
 8005066:	2301      	movs	r3, #1
}
 8005068:	4618      	mov	r0, r3
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <tmc2209_restore+0x16>
		return false;
 8005086:	2300      	movs	r3, #0
 8005088:	e008      	b.n	800509c <tmc2209_restore+0x28>

	tmc2209->config->state        = CONFIG_RESTORE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2202      	movs	r2, #2
 8005090:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2200      	movs	r2, #0
 8005098:	705a      	strb	r2, [r3, #1]

	return true;
 800509a:	2301      	movs	r3, #1
}
 800509c:	4618      	mov	r0, r3
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <__errno>:
 80050a8:	4b01      	ldr	r3, [pc, #4]	; (80050b0 <__errno+0x8>)
 80050aa:	6818      	ldr	r0, [r3, #0]
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	2000000c 	.word	0x2000000c

080050b4 <__libc_init_array>:
 80050b4:	b570      	push	{r4, r5, r6, lr}
 80050b6:	4d0d      	ldr	r5, [pc, #52]	; (80050ec <__libc_init_array+0x38>)
 80050b8:	4c0d      	ldr	r4, [pc, #52]	; (80050f0 <__libc_init_array+0x3c>)
 80050ba:	1b64      	subs	r4, r4, r5
 80050bc:	10a4      	asrs	r4, r4, #2
 80050be:	2600      	movs	r6, #0
 80050c0:	42a6      	cmp	r6, r4
 80050c2:	d109      	bne.n	80050d8 <__libc_init_array+0x24>
 80050c4:	4d0b      	ldr	r5, [pc, #44]	; (80050f4 <__libc_init_array+0x40>)
 80050c6:	4c0c      	ldr	r4, [pc, #48]	; (80050f8 <__libc_init_array+0x44>)
 80050c8:	f001 f8fa 	bl	80062c0 <_init>
 80050cc:	1b64      	subs	r4, r4, r5
 80050ce:	10a4      	asrs	r4, r4, #2
 80050d0:	2600      	movs	r6, #0
 80050d2:	42a6      	cmp	r6, r4
 80050d4:	d105      	bne.n	80050e2 <__libc_init_array+0x2e>
 80050d6:	bd70      	pop	{r4, r5, r6, pc}
 80050d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050dc:	4798      	blx	r3
 80050de:	3601      	adds	r6, #1
 80050e0:	e7ee      	b.n	80050c0 <__libc_init_array+0xc>
 80050e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e6:	4798      	blx	r3
 80050e8:	3601      	adds	r6, #1
 80050ea:	e7f2      	b.n	80050d2 <__libc_init_array+0x1e>
 80050ec:	08006764 	.word	0x08006764
 80050f0:	08006764 	.word	0x08006764
 80050f4:	08006764 	.word	0x08006764
 80050f8:	08006768 	.word	0x08006768

080050fc <memset>:
 80050fc:	4402      	add	r2, r0
 80050fe:	4603      	mov	r3, r0
 8005100:	4293      	cmp	r3, r2
 8005102:	d100      	bne.n	8005106 <memset+0xa>
 8005104:	4770      	bx	lr
 8005106:	f803 1b01 	strb.w	r1, [r3], #1
 800510a:	e7f9      	b.n	8005100 <memset+0x4>

0800510c <iprintf>:
 800510c:	b40f      	push	{r0, r1, r2, r3}
 800510e:	4b0a      	ldr	r3, [pc, #40]	; (8005138 <iprintf+0x2c>)
 8005110:	b513      	push	{r0, r1, r4, lr}
 8005112:	681c      	ldr	r4, [r3, #0]
 8005114:	b124      	cbz	r4, 8005120 <iprintf+0x14>
 8005116:	69a3      	ldr	r3, [r4, #24]
 8005118:	b913      	cbnz	r3, 8005120 <iprintf+0x14>
 800511a:	4620      	mov	r0, r4
 800511c:	f000 fb2c 	bl	8005778 <__sinit>
 8005120:	ab05      	add	r3, sp, #20
 8005122:	9a04      	ldr	r2, [sp, #16]
 8005124:	68a1      	ldr	r1, [r4, #8]
 8005126:	9301      	str	r3, [sp, #4]
 8005128:	4620      	mov	r0, r4
 800512a:	f000 fd3d 	bl	8005ba8 <_vfiprintf_r>
 800512e:	b002      	add	sp, #8
 8005130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005134:	b004      	add	sp, #16
 8005136:	4770      	bx	lr
 8005138:	2000000c 	.word	0x2000000c

0800513c <_puts_r>:
 800513c:	b570      	push	{r4, r5, r6, lr}
 800513e:	460e      	mov	r6, r1
 8005140:	4605      	mov	r5, r0
 8005142:	b118      	cbz	r0, 800514c <_puts_r+0x10>
 8005144:	6983      	ldr	r3, [r0, #24]
 8005146:	b90b      	cbnz	r3, 800514c <_puts_r+0x10>
 8005148:	f000 fb16 	bl	8005778 <__sinit>
 800514c:	69ab      	ldr	r3, [r5, #24]
 800514e:	68ac      	ldr	r4, [r5, #8]
 8005150:	b913      	cbnz	r3, 8005158 <_puts_r+0x1c>
 8005152:	4628      	mov	r0, r5
 8005154:	f000 fb10 	bl	8005778 <__sinit>
 8005158:	4b2c      	ldr	r3, [pc, #176]	; (800520c <_puts_r+0xd0>)
 800515a:	429c      	cmp	r4, r3
 800515c:	d120      	bne.n	80051a0 <_puts_r+0x64>
 800515e:	686c      	ldr	r4, [r5, #4]
 8005160:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005162:	07db      	lsls	r3, r3, #31
 8005164:	d405      	bmi.n	8005172 <_puts_r+0x36>
 8005166:	89a3      	ldrh	r3, [r4, #12]
 8005168:	0598      	lsls	r0, r3, #22
 800516a:	d402      	bmi.n	8005172 <_puts_r+0x36>
 800516c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800516e:	f000 fba1 	bl	80058b4 <__retarget_lock_acquire_recursive>
 8005172:	89a3      	ldrh	r3, [r4, #12]
 8005174:	0719      	lsls	r1, r3, #28
 8005176:	d51d      	bpl.n	80051b4 <_puts_r+0x78>
 8005178:	6923      	ldr	r3, [r4, #16]
 800517a:	b1db      	cbz	r3, 80051b4 <_puts_r+0x78>
 800517c:	3e01      	subs	r6, #1
 800517e:	68a3      	ldr	r3, [r4, #8]
 8005180:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005184:	3b01      	subs	r3, #1
 8005186:	60a3      	str	r3, [r4, #8]
 8005188:	bb39      	cbnz	r1, 80051da <_puts_r+0x9e>
 800518a:	2b00      	cmp	r3, #0
 800518c:	da38      	bge.n	8005200 <_puts_r+0xc4>
 800518e:	4622      	mov	r2, r4
 8005190:	210a      	movs	r1, #10
 8005192:	4628      	mov	r0, r5
 8005194:	f000 f916 	bl	80053c4 <__swbuf_r>
 8005198:	3001      	adds	r0, #1
 800519a:	d011      	beq.n	80051c0 <_puts_r+0x84>
 800519c:	250a      	movs	r5, #10
 800519e:	e011      	b.n	80051c4 <_puts_r+0x88>
 80051a0:	4b1b      	ldr	r3, [pc, #108]	; (8005210 <_puts_r+0xd4>)
 80051a2:	429c      	cmp	r4, r3
 80051a4:	d101      	bne.n	80051aa <_puts_r+0x6e>
 80051a6:	68ac      	ldr	r4, [r5, #8]
 80051a8:	e7da      	b.n	8005160 <_puts_r+0x24>
 80051aa:	4b1a      	ldr	r3, [pc, #104]	; (8005214 <_puts_r+0xd8>)
 80051ac:	429c      	cmp	r4, r3
 80051ae:	bf08      	it	eq
 80051b0:	68ec      	ldreq	r4, [r5, #12]
 80051b2:	e7d5      	b.n	8005160 <_puts_r+0x24>
 80051b4:	4621      	mov	r1, r4
 80051b6:	4628      	mov	r0, r5
 80051b8:	f000 f956 	bl	8005468 <__swsetup_r>
 80051bc:	2800      	cmp	r0, #0
 80051be:	d0dd      	beq.n	800517c <_puts_r+0x40>
 80051c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80051c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051c6:	07da      	lsls	r2, r3, #31
 80051c8:	d405      	bmi.n	80051d6 <_puts_r+0x9a>
 80051ca:	89a3      	ldrh	r3, [r4, #12]
 80051cc:	059b      	lsls	r3, r3, #22
 80051ce:	d402      	bmi.n	80051d6 <_puts_r+0x9a>
 80051d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051d2:	f000 fb70 	bl	80058b6 <__retarget_lock_release_recursive>
 80051d6:	4628      	mov	r0, r5
 80051d8:	bd70      	pop	{r4, r5, r6, pc}
 80051da:	2b00      	cmp	r3, #0
 80051dc:	da04      	bge.n	80051e8 <_puts_r+0xac>
 80051de:	69a2      	ldr	r2, [r4, #24]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	dc06      	bgt.n	80051f2 <_puts_r+0xb6>
 80051e4:	290a      	cmp	r1, #10
 80051e6:	d004      	beq.n	80051f2 <_puts_r+0xb6>
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	6022      	str	r2, [r4, #0]
 80051ee:	7019      	strb	r1, [r3, #0]
 80051f0:	e7c5      	b.n	800517e <_puts_r+0x42>
 80051f2:	4622      	mov	r2, r4
 80051f4:	4628      	mov	r0, r5
 80051f6:	f000 f8e5 	bl	80053c4 <__swbuf_r>
 80051fa:	3001      	adds	r0, #1
 80051fc:	d1bf      	bne.n	800517e <_puts_r+0x42>
 80051fe:	e7df      	b.n	80051c0 <_puts_r+0x84>
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	250a      	movs	r5, #10
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	6022      	str	r2, [r4, #0]
 8005208:	701d      	strb	r5, [r3, #0]
 800520a:	e7db      	b.n	80051c4 <_puts_r+0x88>
 800520c:	080066f0 	.word	0x080066f0
 8005210:	08006710 	.word	0x08006710
 8005214:	080066d0 	.word	0x080066d0

08005218 <puts>:
 8005218:	4b02      	ldr	r3, [pc, #8]	; (8005224 <puts+0xc>)
 800521a:	4601      	mov	r1, r0
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	f7ff bf8d 	b.w	800513c <_puts_r>
 8005222:	bf00      	nop
 8005224:	2000000c 	.word	0x2000000c

08005228 <setbuf>:
 8005228:	2900      	cmp	r1, #0
 800522a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800522e:	bf0c      	ite	eq
 8005230:	2202      	moveq	r2, #2
 8005232:	2200      	movne	r2, #0
 8005234:	f000 b800 	b.w	8005238 <setvbuf>

08005238 <setvbuf>:
 8005238:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800523c:	461d      	mov	r5, r3
 800523e:	4b5d      	ldr	r3, [pc, #372]	; (80053b4 <setvbuf+0x17c>)
 8005240:	681f      	ldr	r7, [r3, #0]
 8005242:	4604      	mov	r4, r0
 8005244:	460e      	mov	r6, r1
 8005246:	4690      	mov	r8, r2
 8005248:	b127      	cbz	r7, 8005254 <setvbuf+0x1c>
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	b913      	cbnz	r3, 8005254 <setvbuf+0x1c>
 800524e:	4638      	mov	r0, r7
 8005250:	f000 fa92 	bl	8005778 <__sinit>
 8005254:	4b58      	ldr	r3, [pc, #352]	; (80053b8 <setvbuf+0x180>)
 8005256:	429c      	cmp	r4, r3
 8005258:	d167      	bne.n	800532a <setvbuf+0xf2>
 800525a:	687c      	ldr	r4, [r7, #4]
 800525c:	f1b8 0f02 	cmp.w	r8, #2
 8005260:	d006      	beq.n	8005270 <setvbuf+0x38>
 8005262:	f1b8 0f01 	cmp.w	r8, #1
 8005266:	f200 809f 	bhi.w	80053a8 <setvbuf+0x170>
 800526a:	2d00      	cmp	r5, #0
 800526c:	f2c0 809c 	blt.w	80053a8 <setvbuf+0x170>
 8005270:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005272:	07db      	lsls	r3, r3, #31
 8005274:	d405      	bmi.n	8005282 <setvbuf+0x4a>
 8005276:	89a3      	ldrh	r3, [r4, #12]
 8005278:	0598      	lsls	r0, r3, #22
 800527a:	d402      	bmi.n	8005282 <setvbuf+0x4a>
 800527c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800527e:	f000 fb19 	bl	80058b4 <__retarget_lock_acquire_recursive>
 8005282:	4621      	mov	r1, r4
 8005284:	4638      	mov	r0, r7
 8005286:	f000 f9e3 	bl	8005650 <_fflush_r>
 800528a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800528c:	b141      	cbz	r1, 80052a0 <setvbuf+0x68>
 800528e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005292:	4299      	cmp	r1, r3
 8005294:	d002      	beq.n	800529c <setvbuf+0x64>
 8005296:	4638      	mov	r0, r7
 8005298:	f000 fb7c 	bl	8005994 <_free_r>
 800529c:	2300      	movs	r3, #0
 800529e:	6363      	str	r3, [r4, #52]	; 0x34
 80052a0:	2300      	movs	r3, #0
 80052a2:	61a3      	str	r3, [r4, #24]
 80052a4:	6063      	str	r3, [r4, #4]
 80052a6:	89a3      	ldrh	r3, [r4, #12]
 80052a8:	0619      	lsls	r1, r3, #24
 80052aa:	d503      	bpl.n	80052b4 <setvbuf+0x7c>
 80052ac:	6921      	ldr	r1, [r4, #16]
 80052ae:	4638      	mov	r0, r7
 80052b0:	f000 fb70 	bl	8005994 <_free_r>
 80052b4:	89a3      	ldrh	r3, [r4, #12]
 80052b6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80052ba:	f023 0303 	bic.w	r3, r3, #3
 80052be:	f1b8 0f02 	cmp.w	r8, #2
 80052c2:	81a3      	strh	r3, [r4, #12]
 80052c4:	d06c      	beq.n	80053a0 <setvbuf+0x168>
 80052c6:	ab01      	add	r3, sp, #4
 80052c8:	466a      	mov	r2, sp
 80052ca:	4621      	mov	r1, r4
 80052cc:	4638      	mov	r0, r7
 80052ce:	f000 faf3 	bl	80058b8 <__swhatbuf_r>
 80052d2:	89a3      	ldrh	r3, [r4, #12]
 80052d4:	4318      	orrs	r0, r3
 80052d6:	81a0      	strh	r0, [r4, #12]
 80052d8:	2d00      	cmp	r5, #0
 80052da:	d130      	bne.n	800533e <setvbuf+0x106>
 80052dc:	9d00      	ldr	r5, [sp, #0]
 80052de:	4628      	mov	r0, r5
 80052e0:	f000 fb50 	bl	8005984 <malloc>
 80052e4:	4606      	mov	r6, r0
 80052e6:	2800      	cmp	r0, #0
 80052e8:	d155      	bne.n	8005396 <setvbuf+0x15e>
 80052ea:	f8dd 9000 	ldr.w	r9, [sp]
 80052ee:	45a9      	cmp	r9, r5
 80052f0:	d14a      	bne.n	8005388 <setvbuf+0x150>
 80052f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80052f6:	2200      	movs	r2, #0
 80052f8:	60a2      	str	r2, [r4, #8]
 80052fa:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80052fe:	6022      	str	r2, [r4, #0]
 8005300:	6122      	str	r2, [r4, #16]
 8005302:	2201      	movs	r2, #1
 8005304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005308:	6162      	str	r2, [r4, #20]
 800530a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800530c:	f043 0302 	orr.w	r3, r3, #2
 8005310:	07d2      	lsls	r2, r2, #31
 8005312:	81a3      	strh	r3, [r4, #12]
 8005314:	d405      	bmi.n	8005322 <setvbuf+0xea>
 8005316:	f413 7f00 	tst.w	r3, #512	; 0x200
 800531a:	d102      	bne.n	8005322 <setvbuf+0xea>
 800531c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800531e:	f000 faca 	bl	80058b6 <__retarget_lock_release_recursive>
 8005322:	4628      	mov	r0, r5
 8005324:	b003      	add	sp, #12
 8005326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800532a:	4b24      	ldr	r3, [pc, #144]	; (80053bc <setvbuf+0x184>)
 800532c:	429c      	cmp	r4, r3
 800532e:	d101      	bne.n	8005334 <setvbuf+0xfc>
 8005330:	68bc      	ldr	r4, [r7, #8]
 8005332:	e793      	b.n	800525c <setvbuf+0x24>
 8005334:	4b22      	ldr	r3, [pc, #136]	; (80053c0 <setvbuf+0x188>)
 8005336:	429c      	cmp	r4, r3
 8005338:	bf08      	it	eq
 800533a:	68fc      	ldreq	r4, [r7, #12]
 800533c:	e78e      	b.n	800525c <setvbuf+0x24>
 800533e:	2e00      	cmp	r6, #0
 8005340:	d0cd      	beq.n	80052de <setvbuf+0xa6>
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	b913      	cbnz	r3, 800534c <setvbuf+0x114>
 8005346:	4638      	mov	r0, r7
 8005348:	f000 fa16 	bl	8005778 <__sinit>
 800534c:	f1b8 0f01 	cmp.w	r8, #1
 8005350:	bf08      	it	eq
 8005352:	89a3      	ldrheq	r3, [r4, #12]
 8005354:	6026      	str	r6, [r4, #0]
 8005356:	bf04      	itt	eq
 8005358:	f043 0301 	orreq.w	r3, r3, #1
 800535c:	81a3      	strheq	r3, [r4, #12]
 800535e:	89a2      	ldrh	r2, [r4, #12]
 8005360:	f012 0308 	ands.w	r3, r2, #8
 8005364:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005368:	d01c      	beq.n	80053a4 <setvbuf+0x16c>
 800536a:	07d3      	lsls	r3, r2, #31
 800536c:	bf41      	itttt	mi
 800536e:	2300      	movmi	r3, #0
 8005370:	426d      	negmi	r5, r5
 8005372:	60a3      	strmi	r3, [r4, #8]
 8005374:	61a5      	strmi	r5, [r4, #24]
 8005376:	bf58      	it	pl
 8005378:	60a5      	strpl	r5, [r4, #8]
 800537a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800537c:	f015 0501 	ands.w	r5, r5, #1
 8005380:	d115      	bne.n	80053ae <setvbuf+0x176>
 8005382:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005386:	e7c8      	b.n	800531a <setvbuf+0xe2>
 8005388:	4648      	mov	r0, r9
 800538a:	f000 fafb 	bl	8005984 <malloc>
 800538e:	4606      	mov	r6, r0
 8005390:	2800      	cmp	r0, #0
 8005392:	d0ae      	beq.n	80052f2 <setvbuf+0xba>
 8005394:	464d      	mov	r5, r9
 8005396:	89a3      	ldrh	r3, [r4, #12]
 8005398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539c:	81a3      	strh	r3, [r4, #12]
 800539e:	e7d0      	b.n	8005342 <setvbuf+0x10a>
 80053a0:	2500      	movs	r5, #0
 80053a2:	e7a8      	b.n	80052f6 <setvbuf+0xbe>
 80053a4:	60a3      	str	r3, [r4, #8]
 80053a6:	e7e8      	b.n	800537a <setvbuf+0x142>
 80053a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80053ac:	e7b9      	b.n	8005322 <setvbuf+0xea>
 80053ae:	2500      	movs	r5, #0
 80053b0:	e7b7      	b.n	8005322 <setvbuf+0xea>
 80053b2:	bf00      	nop
 80053b4:	2000000c 	.word	0x2000000c
 80053b8:	080066f0 	.word	0x080066f0
 80053bc:	08006710 	.word	0x08006710
 80053c0:	080066d0 	.word	0x080066d0

080053c4 <__swbuf_r>:
 80053c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c6:	460e      	mov	r6, r1
 80053c8:	4614      	mov	r4, r2
 80053ca:	4605      	mov	r5, r0
 80053cc:	b118      	cbz	r0, 80053d6 <__swbuf_r+0x12>
 80053ce:	6983      	ldr	r3, [r0, #24]
 80053d0:	b90b      	cbnz	r3, 80053d6 <__swbuf_r+0x12>
 80053d2:	f000 f9d1 	bl	8005778 <__sinit>
 80053d6:	4b21      	ldr	r3, [pc, #132]	; (800545c <__swbuf_r+0x98>)
 80053d8:	429c      	cmp	r4, r3
 80053da:	d12b      	bne.n	8005434 <__swbuf_r+0x70>
 80053dc:	686c      	ldr	r4, [r5, #4]
 80053de:	69a3      	ldr	r3, [r4, #24]
 80053e0:	60a3      	str	r3, [r4, #8]
 80053e2:	89a3      	ldrh	r3, [r4, #12]
 80053e4:	071a      	lsls	r2, r3, #28
 80053e6:	d52f      	bpl.n	8005448 <__swbuf_r+0x84>
 80053e8:	6923      	ldr	r3, [r4, #16]
 80053ea:	b36b      	cbz	r3, 8005448 <__swbuf_r+0x84>
 80053ec:	6923      	ldr	r3, [r4, #16]
 80053ee:	6820      	ldr	r0, [r4, #0]
 80053f0:	1ac0      	subs	r0, r0, r3
 80053f2:	6963      	ldr	r3, [r4, #20]
 80053f4:	b2f6      	uxtb	r6, r6
 80053f6:	4283      	cmp	r3, r0
 80053f8:	4637      	mov	r7, r6
 80053fa:	dc04      	bgt.n	8005406 <__swbuf_r+0x42>
 80053fc:	4621      	mov	r1, r4
 80053fe:	4628      	mov	r0, r5
 8005400:	f000 f926 	bl	8005650 <_fflush_r>
 8005404:	bb30      	cbnz	r0, 8005454 <__swbuf_r+0x90>
 8005406:	68a3      	ldr	r3, [r4, #8]
 8005408:	3b01      	subs	r3, #1
 800540a:	60a3      	str	r3, [r4, #8]
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	6022      	str	r2, [r4, #0]
 8005412:	701e      	strb	r6, [r3, #0]
 8005414:	6963      	ldr	r3, [r4, #20]
 8005416:	3001      	adds	r0, #1
 8005418:	4283      	cmp	r3, r0
 800541a:	d004      	beq.n	8005426 <__swbuf_r+0x62>
 800541c:	89a3      	ldrh	r3, [r4, #12]
 800541e:	07db      	lsls	r3, r3, #31
 8005420:	d506      	bpl.n	8005430 <__swbuf_r+0x6c>
 8005422:	2e0a      	cmp	r6, #10
 8005424:	d104      	bne.n	8005430 <__swbuf_r+0x6c>
 8005426:	4621      	mov	r1, r4
 8005428:	4628      	mov	r0, r5
 800542a:	f000 f911 	bl	8005650 <_fflush_r>
 800542e:	b988      	cbnz	r0, 8005454 <__swbuf_r+0x90>
 8005430:	4638      	mov	r0, r7
 8005432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005434:	4b0a      	ldr	r3, [pc, #40]	; (8005460 <__swbuf_r+0x9c>)
 8005436:	429c      	cmp	r4, r3
 8005438:	d101      	bne.n	800543e <__swbuf_r+0x7a>
 800543a:	68ac      	ldr	r4, [r5, #8]
 800543c:	e7cf      	b.n	80053de <__swbuf_r+0x1a>
 800543e:	4b09      	ldr	r3, [pc, #36]	; (8005464 <__swbuf_r+0xa0>)
 8005440:	429c      	cmp	r4, r3
 8005442:	bf08      	it	eq
 8005444:	68ec      	ldreq	r4, [r5, #12]
 8005446:	e7ca      	b.n	80053de <__swbuf_r+0x1a>
 8005448:	4621      	mov	r1, r4
 800544a:	4628      	mov	r0, r5
 800544c:	f000 f80c 	bl	8005468 <__swsetup_r>
 8005450:	2800      	cmp	r0, #0
 8005452:	d0cb      	beq.n	80053ec <__swbuf_r+0x28>
 8005454:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005458:	e7ea      	b.n	8005430 <__swbuf_r+0x6c>
 800545a:	bf00      	nop
 800545c:	080066f0 	.word	0x080066f0
 8005460:	08006710 	.word	0x08006710
 8005464:	080066d0 	.word	0x080066d0

08005468 <__swsetup_r>:
 8005468:	4b32      	ldr	r3, [pc, #200]	; (8005534 <__swsetup_r+0xcc>)
 800546a:	b570      	push	{r4, r5, r6, lr}
 800546c:	681d      	ldr	r5, [r3, #0]
 800546e:	4606      	mov	r6, r0
 8005470:	460c      	mov	r4, r1
 8005472:	b125      	cbz	r5, 800547e <__swsetup_r+0x16>
 8005474:	69ab      	ldr	r3, [r5, #24]
 8005476:	b913      	cbnz	r3, 800547e <__swsetup_r+0x16>
 8005478:	4628      	mov	r0, r5
 800547a:	f000 f97d 	bl	8005778 <__sinit>
 800547e:	4b2e      	ldr	r3, [pc, #184]	; (8005538 <__swsetup_r+0xd0>)
 8005480:	429c      	cmp	r4, r3
 8005482:	d10f      	bne.n	80054a4 <__swsetup_r+0x3c>
 8005484:	686c      	ldr	r4, [r5, #4]
 8005486:	89a3      	ldrh	r3, [r4, #12]
 8005488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800548c:	0719      	lsls	r1, r3, #28
 800548e:	d42c      	bmi.n	80054ea <__swsetup_r+0x82>
 8005490:	06dd      	lsls	r5, r3, #27
 8005492:	d411      	bmi.n	80054b8 <__swsetup_r+0x50>
 8005494:	2309      	movs	r3, #9
 8005496:	6033      	str	r3, [r6, #0]
 8005498:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800549c:	81a3      	strh	r3, [r4, #12]
 800549e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054a2:	e03e      	b.n	8005522 <__swsetup_r+0xba>
 80054a4:	4b25      	ldr	r3, [pc, #148]	; (800553c <__swsetup_r+0xd4>)
 80054a6:	429c      	cmp	r4, r3
 80054a8:	d101      	bne.n	80054ae <__swsetup_r+0x46>
 80054aa:	68ac      	ldr	r4, [r5, #8]
 80054ac:	e7eb      	b.n	8005486 <__swsetup_r+0x1e>
 80054ae:	4b24      	ldr	r3, [pc, #144]	; (8005540 <__swsetup_r+0xd8>)
 80054b0:	429c      	cmp	r4, r3
 80054b2:	bf08      	it	eq
 80054b4:	68ec      	ldreq	r4, [r5, #12]
 80054b6:	e7e6      	b.n	8005486 <__swsetup_r+0x1e>
 80054b8:	0758      	lsls	r0, r3, #29
 80054ba:	d512      	bpl.n	80054e2 <__swsetup_r+0x7a>
 80054bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054be:	b141      	cbz	r1, 80054d2 <__swsetup_r+0x6a>
 80054c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054c4:	4299      	cmp	r1, r3
 80054c6:	d002      	beq.n	80054ce <__swsetup_r+0x66>
 80054c8:	4630      	mov	r0, r6
 80054ca:	f000 fa63 	bl	8005994 <_free_r>
 80054ce:	2300      	movs	r3, #0
 80054d0:	6363      	str	r3, [r4, #52]	; 0x34
 80054d2:	89a3      	ldrh	r3, [r4, #12]
 80054d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054d8:	81a3      	strh	r3, [r4, #12]
 80054da:	2300      	movs	r3, #0
 80054dc:	6063      	str	r3, [r4, #4]
 80054de:	6923      	ldr	r3, [r4, #16]
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	89a3      	ldrh	r3, [r4, #12]
 80054e4:	f043 0308 	orr.w	r3, r3, #8
 80054e8:	81a3      	strh	r3, [r4, #12]
 80054ea:	6923      	ldr	r3, [r4, #16]
 80054ec:	b94b      	cbnz	r3, 8005502 <__swsetup_r+0x9a>
 80054ee:	89a3      	ldrh	r3, [r4, #12]
 80054f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f8:	d003      	beq.n	8005502 <__swsetup_r+0x9a>
 80054fa:	4621      	mov	r1, r4
 80054fc:	4630      	mov	r0, r6
 80054fe:	f000 fa01 	bl	8005904 <__smakebuf_r>
 8005502:	89a0      	ldrh	r0, [r4, #12]
 8005504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005508:	f010 0301 	ands.w	r3, r0, #1
 800550c:	d00a      	beq.n	8005524 <__swsetup_r+0xbc>
 800550e:	2300      	movs	r3, #0
 8005510:	60a3      	str	r3, [r4, #8]
 8005512:	6963      	ldr	r3, [r4, #20]
 8005514:	425b      	negs	r3, r3
 8005516:	61a3      	str	r3, [r4, #24]
 8005518:	6923      	ldr	r3, [r4, #16]
 800551a:	b943      	cbnz	r3, 800552e <__swsetup_r+0xc6>
 800551c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005520:	d1ba      	bne.n	8005498 <__swsetup_r+0x30>
 8005522:	bd70      	pop	{r4, r5, r6, pc}
 8005524:	0781      	lsls	r1, r0, #30
 8005526:	bf58      	it	pl
 8005528:	6963      	ldrpl	r3, [r4, #20]
 800552a:	60a3      	str	r3, [r4, #8]
 800552c:	e7f4      	b.n	8005518 <__swsetup_r+0xb0>
 800552e:	2000      	movs	r0, #0
 8005530:	e7f7      	b.n	8005522 <__swsetup_r+0xba>
 8005532:	bf00      	nop
 8005534:	2000000c 	.word	0x2000000c
 8005538:	080066f0 	.word	0x080066f0
 800553c:	08006710 	.word	0x08006710
 8005540:	080066d0 	.word	0x080066d0

08005544 <__sflush_r>:
 8005544:	898a      	ldrh	r2, [r1, #12]
 8005546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800554a:	4605      	mov	r5, r0
 800554c:	0710      	lsls	r0, r2, #28
 800554e:	460c      	mov	r4, r1
 8005550:	d458      	bmi.n	8005604 <__sflush_r+0xc0>
 8005552:	684b      	ldr	r3, [r1, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	dc05      	bgt.n	8005564 <__sflush_r+0x20>
 8005558:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800555a:	2b00      	cmp	r3, #0
 800555c:	dc02      	bgt.n	8005564 <__sflush_r+0x20>
 800555e:	2000      	movs	r0, #0
 8005560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005564:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005566:	2e00      	cmp	r6, #0
 8005568:	d0f9      	beq.n	800555e <__sflush_r+0x1a>
 800556a:	2300      	movs	r3, #0
 800556c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005570:	682f      	ldr	r7, [r5, #0]
 8005572:	602b      	str	r3, [r5, #0]
 8005574:	d032      	beq.n	80055dc <__sflush_r+0x98>
 8005576:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005578:	89a3      	ldrh	r3, [r4, #12]
 800557a:	075a      	lsls	r2, r3, #29
 800557c:	d505      	bpl.n	800558a <__sflush_r+0x46>
 800557e:	6863      	ldr	r3, [r4, #4]
 8005580:	1ac0      	subs	r0, r0, r3
 8005582:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005584:	b10b      	cbz	r3, 800558a <__sflush_r+0x46>
 8005586:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005588:	1ac0      	subs	r0, r0, r3
 800558a:	2300      	movs	r3, #0
 800558c:	4602      	mov	r2, r0
 800558e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005590:	6a21      	ldr	r1, [r4, #32]
 8005592:	4628      	mov	r0, r5
 8005594:	47b0      	blx	r6
 8005596:	1c43      	adds	r3, r0, #1
 8005598:	89a3      	ldrh	r3, [r4, #12]
 800559a:	d106      	bne.n	80055aa <__sflush_r+0x66>
 800559c:	6829      	ldr	r1, [r5, #0]
 800559e:	291d      	cmp	r1, #29
 80055a0:	d82c      	bhi.n	80055fc <__sflush_r+0xb8>
 80055a2:	4a2a      	ldr	r2, [pc, #168]	; (800564c <__sflush_r+0x108>)
 80055a4:	40ca      	lsrs	r2, r1
 80055a6:	07d6      	lsls	r6, r2, #31
 80055a8:	d528      	bpl.n	80055fc <__sflush_r+0xb8>
 80055aa:	2200      	movs	r2, #0
 80055ac:	6062      	str	r2, [r4, #4]
 80055ae:	04d9      	lsls	r1, r3, #19
 80055b0:	6922      	ldr	r2, [r4, #16]
 80055b2:	6022      	str	r2, [r4, #0]
 80055b4:	d504      	bpl.n	80055c0 <__sflush_r+0x7c>
 80055b6:	1c42      	adds	r2, r0, #1
 80055b8:	d101      	bne.n	80055be <__sflush_r+0x7a>
 80055ba:	682b      	ldr	r3, [r5, #0]
 80055bc:	b903      	cbnz	r3, 80055c0 <__sflush_r+0x7c>
 80055be:	6560      	str	r0, [r4, #84]	; 0x54
 80055c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055c2:	602f      	str	r7, [r5, #0]
 80055c4:	2900      	cmp	r1, #0
 80055c6:	d0ca      	beq.n	800555e <__sflush_r+0x1a>
 80055c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055cc:	4299      	cmp	r1, r3
 80055ce:	d002      	beq.n	80055d6 <__sflush_r+0x92>
 80055d0:	4628      	mov	r0, r5
 80055d2:	f000 f9df 	bl	8005994 <_free_r>
 80055d6:	2000      	movs	r0, #0
 80055d8:	6360      	str	r0, [r4, #52]	; 0x34
 80055da:	e7c1      	b.n	8005560 <__sflush_r+0x1c>
 80055dc:	6a21      	ldr	r1, [r4, #32]
 80055de:	2301      	movs	r3, #1
 80055e0:	4628      	mov	r0, r5
 80055e2:	47b0      	blx	r6
 80055e4:	1c41      	adds	r1, r0, #1
 80055e6:	d1c7      	bne.n	8005578 <__sflush_r+0x34>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0c4      	beq.n	8005578 <__sflush_r+0x34>
 80055ee:	2b1d      	cmp	r3, #29
 80055f0:	d001      	beq.n	80055f6 <__sflush_r+0xb2>
 80055f2:	2b16      	cmp	r3, #22
 80055f4:	d101      	bne.n	80055fa <__sflush_r+0xb6>
 80055f6:	602f      	str	r7, [r5, #0]
 80055f8:	e7b1      	b.n	800555e <__sflush_r+0x1a>
 80055fa:	89a3      	ldrh	r3, [r4, #12]
 80055fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005600:	81a3      	strh	r3, [r4, #12]
 8005602:	e7ad      	b.n	8005560 <__sflush_r+0x1c>
 8005604:	690f      	ldr	r7, [r1, #16]
 8005606:	2f00      	cmp	r7, #0
 8005608:	d0a9      	beq.n	800555e <__sflush_r+0x1a>
 800560a:	0793      	lsls	r3, r2, #30
 800560c:	680e      	ldr	r6, [r1, #0]
 800560e:	bf08      	it	eq
 8005610:	694b      	ldreq	r3, [r1, #20]
 8005612:	600f      	str	r7, [r1, #0]
 8005614:	bf18      	it	ne
 8005616:	2300      	movne	r3, #0
 8005618:	eba6 0807 	sub.w	r8, r6, r7
 800561c:	608b      	str	r3, [r1, #8]
 800561e:	f1b8 0f00 	cmp.w	r8, #0
 8005622:	dd9c      	ble.n	800555e <__sflush_r+0x1a>
 8005624:	6a21      	ldr	r1, [r4, #32]
 8005626:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005628:	4643      	mov	r3, r8
 800562a:	463a      	mov	r2, r7
 800562c:	4628      	mov	r0, r5
 800562e:	47b0      	blx	r6
 8005630:	2800      	cmp	r0, #0
 8005632:	dc06      	bgt.n	8005642 <__sflush_r+0xfe>
 8005634:	89a3      	ldrh	r3, [r4, #12]
 8005636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800563a:	81a3      	strh	r3, [r4, #12]
 800563c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005640:	e78e      	b.n	8005560 <__sflush_r+0x1c>
 8005642:	4407      	add	r7, r0
 8005644:	eba8 0800 	sub.w	r8, r8, r0
 8005648:	e7e9      	b.n	800561e <__sflush_r+0xda>
 800564a:	bf00      	nop
 800564c:	20400001 	.word	0x20400001

08005650 <_fflush_r>:
 8005650:	b538      	push	{r3, r4, r5, lr}
 8005652:	690b      	ldr	r3, [r1, #16]
 8005654:	4605      	mov	r5, r0
 8005656:	460c      	mov	r4, r1
 8005658:	b913      	cbnz	r3, 8005660 <_fflush_r+0x10>
 800565a:	2500      	movs	r5, #0
 800565c:	4628      	mov	r0, r5
 800565e:	bd38      	pop	{r3, r4, r5, pc}
 8005660:	b118      	cbz	r0, 800566a <_fflush_r+0x1a>
 8005662:	6983      	ldr	r3, [r0, #24]
 8005664:	b90b      	cbnz	r3, 800566a <_fflush_r+0x1a>
 8005666:	f000 f887 	bl	8005778 <__sinit>
 800566a:	4b14      	ldr	r3, [pc, #80]	; (80056bc <_fflush_r+0x6c>)
 800566c:	429c      	cmp	r4, r3
 800566e:	d11b      	bne.n	80056a8 <_fflush_r+0x58>
 8005670:	686c      	ldr	r4, [r5, #4]
 8005672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0ef      	beq.n	800565a <_fflush_r+0xa>
 800567a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800567c:	07d0      	lsls	r0, r2, #31
 800567e:	d404      	bmi.n	800568a <_fflush_r+0x3a>
 8005680:	0599      	lsls	r1, r3, #22
 8005682:	d402      	bmi.n	800568a <_fflush_r+0x3a>
 8005684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005686:	f000 f915 	bl	80058b4 <__retarget_lock_acquire_recursive>
 800568a:	4628      	mov	r0, r5
 800568c:	4621      	mov	r1, r4
 800568e:	f7ff ff59 	bl	8005544 <__sflush_r>
 8005692:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005694:	07da      	lsls	r2, r3, #31
 8005696:	4605      	mov	r5, r0
 8005698:	d4e0      	bmi.n	800565c <_fflush_r+0xc>
 800569a:	89a3      	ldrh	r3, [r4, #12]
 800569c:	059b      	lsls	r3, r3, #22
 800569e:	d4dd      	bmi.n	800565c <_fflush_r+0xc>
 80056a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056a2:	f000 f908 	bl	80058b6 <__retarget_lock_release_recursive>
 80056a6:	e7d9      	b.n	800565c <_fflush_r+0xc>
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <_fflush_r+0x70>)
 80056aa:	429c      	cmp	r4, r3
 80056ac:	d101      	bne.n	80056b2 <_fflush_r+0x62>
 80056ae:	68ac      	ldr	r4, [r5, #8]
 80056b0:	e7df      	b.n	8005672 <_fflush_r+0x22>
 80056b2:	4b04      	ldr	r3, [pc, #16]	; (80056c4 <_fflush_r+0x74>)
 80056b4:	429c      	cmp	r4, r3
 80056b6:	bf08      	it	eq
 80056b8:	68ec      	ldreq	r4, [r5, #12]
 80056ba:	e7da      	b.n	8005672 <_fflush_r+0x22>
 80056bc:	080066f0 	.word	0x080066f0
 80056c0:	08006710 	.word	0x08006710
 80056c4:	080066d0 	.word	0x080066d0

080056c8 <std>:
 80056c8:	2300      	movs	r3, #0
 80056ca:	b510      	push	{r4, lr}
 80056cc:	4604      	mov	r4, r0
 80056ce:	e9c0 3300 	strd	r3, r3, [r0]
 80056d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056d6:	6083      	str	r3, [r0, #8]
 80056d8:	8181      	strh	r1, [r0, #12]
 80056da:	6643      	str	r3, [r0, #100]	; 0x64
 80056dc:	81c2      	strh	r2, [r0, #14]
 80056de:	6183      	str	r3, [r0, #24]
 80056e0:	4619      	mov	r1, r3
 80056e2:	2208      	movs	r2, #8
 80056e4:	305c      	adds	r0, #92	; 0x5c
 80056e6:	f7ff fd09 	bl	80050fc <memset>
 80056ea:	4b05      	ldr	r3, [pc, #20]	; (8005700 <std+0x38>)
 80056ec:	6263      	str	r3, [r4, #36]	; 0x24
 80056ee:	4b05      	ldr	r3, [pc, #20]	; (8005704 <std+0x3c>)
 80056f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80056f2:	4b05      	ldr	r3, [pc, #20]	; (8005708 <std+0x40>)
 80056f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056f6:	4b05      	ldr	r3, [pc, #20]	; (800570c <std+0x44>)
 80056f8:	6224      	str	r4, [r4, #32]
 80056fa:	6323      	str	r3, [r4, #48]	; 0x30
 80056fc:	bd10      	pop	{r4, pc}
 80056fe:	bf00      	nop
 8005700:	08006151 	.word	0x08006151
 8005704:	08006173 	.word	0x08006173
 8005708:	080061ab 	.word	0x080061ab
 800570c:	080061cf 	.word	0x080061cf

08005710 <_cleanup_r>:
 8005710:	4901      	ldr	r1, [pc, #4]	; (8005718 <_cleanup_r+0x8>)
 8005712:	f000 b8af 	b.w	8005874 <_fwalk_reent>
 8005716:	bf00      	nop
 8005718:	08005651 	.word	0x08005651

0800571c <__sfmoreglue>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	2268      	movs	r2, #104	; 0x68
 8005720:	1e4d      	subs	r5, r1, #1
 8005722:	4355      	muls	r5, r2
 8005724:	460e      	mov	r6, r1
 8005726:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800572a:	f000 f99f 	bl	8005a6c <_malloc_r>
 800572e:	4604      	mov	r4, r0
 8005730:	b140      	cbz	r0, 8005744 <__sfmoreglue+0x28>
 8005732:	2100      	movs	r1, #0
 8005734:	e9c0 1600 	strd	r1, r6, [r0]
 8005738:	300c      	adds	r0, #12
 800573a:	60a0      	str	r0, [r4, #8]
 800573c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005740:	f7ff fcdc 	bl	80050fc <memset>
 8005744:	4620      	mov	r0, r4
 8005746:	bd70      	pop	{r4, r5, r6, pc}

08005748 <__sfp_lock_acquire>:
 8005748:	4801      	ldr	r0, [pc, #4]	; (8005750 <__sfp_lock_acquire+0x8>)
 800574a:	f000 b8b3 	b.w	80058b4 <__retarget_lock_acquire_recursive>
 800574e:	bf00      	nop
 8005750:	20000889 	.word	0x20000889

08005754 <__sfp_lock_release>:
 8005754:	4801      	ldr	r0, [pc, #4]	; (800575c <__sfp_lock_release+0x8>)
 8005756:	f000 b8ae 	b.w	80058b6 <__retarget_lock_release_recursive>
 800575a:	bf00      	nop
 800575c:	20000889 	.word	0x20000889

08005760 <__sinit_lock_acquire>:
 8005760:	4801      	ldr	r0, [pc, #4]	; (8005768 <__sinit_lock_acquire+0x8>)
 8005762:	f000 b8a7 	b.w	80058b4 <__retarget_lock_acquire_recursive>
 8005766:	bf00      	nop
 8005768:	2000088a 	.word	0x2000088a

0800576c <__sinit_lock_release>:
 800576c:	4801      	ldr	r0, [pc, #4]	; (8005774 <__sinit_lock_release+0x8>)
 800576e:	f000 b8a2 	b.w	80058b6 <__retarget_lock_release_recursive>
 8005772:	bf00      	nop
 8005774:	2000088a 	.word	0x2000088a

08005778 <__sinit>:
 8005778:	b510      	push	{r4, lr}
 800577a:	4604      	mov	r4, r0
 800577c:	f7ff fff0 	bl	8005760 <__sinit_lock_acquire>
 8005780:	69a3      	ldr	r3, [r4, #24]
 8005782:	b11b      	cbz	r3, 800578c <__sinit+0x14>
 8005784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005788:	f7ff bff0 	b.w	800576c <__sinit_lock_release>
 800578c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005790:	6523      	str	r3, [r4, #80]	; 0x50
 8005792:	4b13      	ldr	r3, [pc, #76]	; (80057e0 <__sinit+0x68>)
 8005794:	4a13      	ldr	r2, [pc, #76]	; (80057e4 <__sinit+0x6c>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	62a2      	str	r2, [r4, #40]	; 0x28
 800579a:	42a3      	cmp	r3, r4
 800579c:	bf04      	itt	eq
 800579e:	2301      	moveq	r3, #1
 80057a0:	61a3      	streq	r3, [r4, #24]
 80057a2:	4620      	mov	r0, r4
 80057a4:	f000 f820 	bl	80057e8 <__sfp>
 80057a8:	6060      	str	r0, [r4, #4]
 80057aa:	4620      	mov	r0, r4
 80057ac:	f000 f81c 	bl	80057e8 <__sfp>
 80057b0:	60a0      	str	r0, [r4, #8]
 80057b2:	4620      	mov	r0, r4
 80057b4:	f000 f818 	bl	80057e8 <__sfp>
 80057b8:	2200      	movs	r2, #0
 80057ba:	60e0      	str	r0, [r4, #12]
 80057bc:	2104      	movs	r1, #4
 80057be:	6860      	ldr	r0, [r4, #4]
 80057c0:	f7ff ff82 	bl	80056c8 <std>
 80057c4:	68a0      	ldr	r0, [r4, #8]
 80057c6:	2201      	movs	r2, #1
 80057c8:	2109      	movs	r1, #9
 80057ca:	f7ff ff7d 	bl	80056c8 <std>
 80057ce:	68e0      	ldr	r0, [r4, #12]
 80057d0:	2202      	movs	r2, #2
 80057d2:	2112      	movs	r1, #18
 80057d4:	f7ff ff78 	bl	80056c8 <std>
 80057d8:	2301      	movs	r3, #1
 80057da:	61a3      	str	r3, [r4, #24]
 80057dc:	e7d2      	b.n	8005784 <__sinit+0xc>
 80057de:	bf00      	nop
 80057e0:	080066cc 	.word	0x080066cc
 80057e4:	08005711 	.word	0x08005711

080057e8 <__sfp>:
 80057e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ea:	4607      	mov	r7, r0
 80057ec:	f7ff ffac 	bl	8005748 <__sfp_lock_acquire>
 80057f0:	4b1e      	ldr	r3, [pc, #120]	; (800586c <__sfp+0x84>)
 80057f2:	681e      	ldr	r6, [r3, #0]
 80057f4:	69b3      	ldr	r3, [r6, #24]
 80057f6:	b913      	cbnz	r3, 80057fe <__sfp+0x16>
 80057f8:	4630      	mov	r0, r6
 80057fa:	f7ff ffbd 	bl	8005778 <__sinit>
 80057fe:	3648      	adds	r6, #72	; 0x48
 8005800:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005804:	3b01      	subs	r3, #1
 8005806:	d503      	bpl.n	8005810 <__sfp+0x28>
 8005808:	6833      	ldr	r3, [r6, #0]
 800580a:	b30b      	cbz	r3, 8005850 <__sfp+0x68>
 800580c:	6836      	ldr	r6, [r6, #0]
 800580e:	e7f7      	b.n	8005800 <__sfp+0x18>
 8005810:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005814:	b9d5      	cbnz	r5, 800584c <__sfp+0x64>
 8005816:	4b16      	ldr	r3, [pc, #88]	; (8005870 <__sfp+0x88>)
 8005818:	60e3      	str	r3, [r4, #12]
 800581a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800581e:	6665      	str	r5, [r4, #100]	; 0x64
 8005820:	f000 f847 	bl	80058b2 <__retarget_lock_init_recursive>
 8005824:	f7ff ff96 	bl	8005754 <__sfp_lock_release>
 8005828:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800582c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005830:	6025      	str	r5, [r4, #0]
 8005832:	61a5      	str	r5, [r4, #24]
 8005834:	2208      	movs	r2, #8
 8005836:	4629      	mov	r1, r5
 8005838:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800583c:	f7ff fc5e 	bl	80050fc <memset>
 8005840:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005844:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005848:	4620      	mov	r0, r4
 800584a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800584c:	3468      	adds	r4, #104	; 0x68
 800584e:	e7d9      	b.n	8005804 <__sfp+0x1c>
 8005850:	2104      	movs	r1, #4
 8005852:	4638      	mov	r0, r7
 8005854:	f7ff ff62 	bl	800571c <__sfmoreglue>
 8005858:	4604      	mov	r4, r0
 800585a:	6030      	str	r0, [r6, #0]
 800585c:	2800      	cmp	r0, #0
 800585e:	d1d5      	bne.n	800580c <__sfp+0x24>
 8005860:	f7ff ff78 	bl	8005754 <__sfp_lock_release>
 8005864:	230c      	movs	r3, #12
 8005866:	603b      	str	r3, [r7, #0]
 8005868:	e7ee      	b.n	8005848 <__sfp+0x60>
 800586a:	bf00      	nop
 800586c:	080066cc 	.word	0x080066cc
 8005870:	ffff0001 	.word	0xffff0001

08005874 <_fwalk_reent>:
 8005874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005878:	4606      	mov	r6, r0
 800587a:	4688      	mov	r8, r1
 800587c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005880:	2700      	movs	r7, #0
 8005882:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005886:	f1b9 0901 	subs.w	r9, r9, #1
 800588a:	d505      	bpl.n	8005898 <_fwalk_reent+0x24>
 800588c:	6824      	ldr	r4, [r4, #0]
 800588e:	2c00      	cmp	r4, #0
 8005890:	d1f7      	bne.n	8005882 <_fwalk_reent+0xe>
 8005892:	4638      	mov	r0, r7
 8005894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005898:	89ab      	ldrh	r3, [r5, #12]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d907      	bls.n	80058ae <_fwalk_reent+0x3a>
 800589e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058a2:	3301      	adds	r3, #1
 80058a4:	d003      	beq.n	80058ae <_fwalk_reent+0x3a>
 80058a6:	4629      	mov	r1, r5
 80058a8:	4630      	mov	r0, r6
 80058aa:	47c0      	blx	r8
 80058ac:	4307      	orrs	r7, r0
 80058ae:	3568      	adds	r5, #104	; 0x68
 80058b0:	e7e9      	b.n	8005886 <_fwalk_reent+0x12>

080058b2 <__retarget_lock_init_recursive>:
 80058b2:	4770      	bx	lr

080058b4 <__retarget_lock_acquire_recursive>:
 80058b4:	4770      	bx	lr

080058b6 <__retarget_lock_release_recursive>:
 80058b6:	4770      	bx	lr

080058b8 <__swhatbuf_r>:
 80058b8:	b570      	push	{r4, r5, r6, lr}
 80058ba:	460e      	mov	r6, r1
 80058bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c0:	2900      	cmp	r1, #0
 80058c2:	b096      	sub	sp, #88	; 0x58
 80058c4:	4614      	mov	r4, r2
 80058c6:	461d      	mov	r5, r3
 80058c8:	da08      	bge.n	80058dc <__swhatbuf_r+0x24>
 80058ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	602a      	str	r2, [r5, #0]
 80058d2:	061a      	lsls	r2, r3, #24
 80058d4:	d410      	bmi.n	80058f8 <__swhatbuf_r+0x40>
 80058d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058da:	e00e      	b.n	80058fa <__swhatbuf_r+0x42>
 80058dc:	466a      	mov	r2, sp
 80058de:	f000 fc9d 	bl	800621c <_fstat_r>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	dbf1      	blt.n	80058ca <__swhatbuf_r+0x12>
 80058e6:	9a01      	ldr	r2, [sp, #4]
 80058e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80058ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80058f0:	425a      	negs	r2, r3
 80058f2:	415a      	adcs	r2, r3
 80058f4:	602a      	str	r2, [r5, #0]
 80058f6:	e7ee      	b.n	80058d6 <__swhatbuf_r+0x1e>
 80058f8:	2340      	movs	r3, #64	; 0x40
 80058fa:	2000      	movs	r0, #0
 80058fc:	6023      	str	r3, [r4, #0]
 80058fe:	b016      	add	sp, #88	; 0x58
 8005900:	bd70      	pop	{r4, r5, r6, pc}
	...

08005904 <__smakebuf_r>:
 8005904:	898b      	ldrh	r3, [r1, #12]
 8005906:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005908:	079d      	lsls	r5, r3, #30
 800590a:	4606      	mov	r6, r0
 800590c:	460c      	mov	r4, r1
 800590e:	d507      	bpl.n	8005920 <__smakebuf_r+0x1c>
 8005910:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005914:	6023      	str	r3, [r4, #0]
 8005916:	6123      	str	r3, [r4, #16]
 8005918:	2301      	movs	r3, #1
 800591a:	6163      	str	r3, [r4, #20]
 800591c:	b002      	add	sp, #8
 800591e:	bd70      	pop	{r4, r5, r6, pc}
 8005920:	ab01      	add	r3, sp, #4
 8005922:	466a      	mov	r2, sp
 8005924:	f7ff ffc8 	bl	80058b8 <__swhatbuf_r>
 8005928:	9900      	ldr	r1, [sp, #0]
 800592a:	4605      	mov	r5, r0
 800592c:	4630      	mov	r0, r6
 800592e:	f000 f89d 	bl	8005a6c <_malloc_r>
 8005932:	b948      	cbnz	r0, 8005948 <__smakebuf_r+0x44>
 8005934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005938:	059a      	lsls	r2, r3, #22
 800593a:	d4ef      	bmi.n	800591c <__smakebuf_r+0x18>
 800593c:	f023 0303 	bic.w	r3, r3, #3
 8005940:	f043 0302 	orr.w	r3, r3, #2
 8005944:	81a3      	strh	r3, [r4, #12]
 8005946:	e7e3      	b.n	8005910 <__smakebuf_r+0xc>
 8005948:	4b0d      	ldr	r3, [pc, #52]	; (8005980 <__smakebuf_r+0x7c>)
 800594a:	62b3      	str	r3, [r6, #40]	; 0x28
 800594c:	89a3      	ldrh	r3, [r4, #12]
 800594e:	6020      	str	r0, [r4, #0]
 8005950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005954:	81a3      	strh	r3, [r4, #12]
 8005956:	9b00      	ldr	r3, [sp, #0]
 8005958:	6163      	str	r3, [r4, #20]
 800595a:	9b01      	ldr	r3, [sp, #4]
 800595c:	6120      	str	r0, [r4, #16]
 800595e:	b15b      	cbz	r3, 8005978 <__smakebuf_r+0x74>
 8005960:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005964:	4630      	mov	r0, r6
 8005966:	f000 fc6b 	bl	8006240 <_isatty_r>
 800596a:	b128      	cbz	r0, 8005978 <__smakebuf_r+0x74>
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	f023 0303 	bic.w	r3, r3, #3
 8005972:	f043 0301 	orr.w	r3, r3, #1
 8005976:	81a3      	strh	r3, [r4, #12]
 8005978:	89a0      	ldrh	r0, [r4, #12]
 800597a:	4305      	orrs	r5, r0
 800597c:	81a5      	strh	r5, [r4, #12]
 800597e:	e7cd      	b.n	800591c <__smakebuf_r+0x18>
 8005980:	08005711 	.word	0x08005711

08005984 <malloc>:
 8005984:	4b02      	ldr	r3, [pc, #8]	; (8005990 <malloc+0xc>)
 8005986:	4601      	mov	r1, r0
 8005988:	6818      	ldr	r0, [r3, #0]
 800598a:	f000 b86f 	b.w	8005a6c <_malloc_r>
 800598e:	bf00      	nop
 8005990:	2000000c 	.word	0x2000000c

08005994 <_free_r>:
 8005994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005996:	2900      	cmp	r1, #0
 8005998:	d044      	beq.n	8005a24 <_free_r+0x90>
 800599a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800599e:	9001      	str	r0, [sp, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f1a1 0404 	sub.w	r4, r1, #4
 80059a6:	bfb8      	it	lt
 80059a8:	18e4      	addlt	r4, r4, r3
 80059aa:	f000 fc6b 	bl	8006284 <__malloc_lock>
 80059ae:	4a1e      	ldr	r2, [pc, #120]	; (8005a28 <_free_r+0x94>)
 80059b0:	9801      	ldr	r0, [sp, #4]
 80059b2:	6813      	ldr	r3, [r2, #0]
 80059b4:	b933      	cbnz	r3, 80059c4 <_free_r+0x30>
 80059b6:	6063      	str	r3, [r4, #4]
 80059b8:	6014      	str	r4, [r2, #0]
 80059ba:	b003      	add	sp, #12
 80059bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059c0:	f000 bc66 	b.w	8006290 <__malloc_unlock>
 80059c4:	42a3      	cmp	r3, r4
 80059c6:	d908      	bls.n	80059da <_free_r+0x46>
 80059c8:	6825      	ldr	r5, [r4, #0]
 80059ca:	1961      	adds	r1, r4, r5
 80059cc:	428b      	cmp	r3, r1
 80059ce:	bf01      	itttt	eq
 80059d0:	6819      	ldreq	r1, [r3, #0]
 80059d2:	685b      	ldreq	r3, [r3, #4]
 80059d4:	1949      	addeq	r1, r1, r5
 80059d6:	6021      	streq	r1, [r4, #0]
 80059d8:	e7ed      	b.n	80059b6 <_free_r+0x22>
 80059da:	461a      	mov	r2, r3
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	b10b      	cbz	r3, 80059e4 <_free_r+0x50>
 80059e0:	42a3      	cmp	r3, r4
 80059e2:	d9fa      	bls.n	80059da <_free_r+0x46>
 80059e4:	6811      	ldr	r1, [r2, #0]
 80059e6:	1855      	adds	r5, r2, r1
 80059e8:	42a5      	cmp	r5, r4
 80059ea:	d10b      	bne.n	8005a04 <_free_r+0x70>
 80059ec:	6824      	ldr	r4, [r4, #0]
 80059ee:	4421      	add	r1, r4
 80059f0:	1854      	adds	r4, r2, r1
 80059f2:	42a3      	cmp	r3, r4
 80059f4:	6011      	str	r1, [r2, #0]
 80059f6:	d1e0      	bne.n	80059ba <_free_r+0x26>
 80059f8:	681c      	ldr	r4, [r3, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	6053      	str	r3, [r2, #4]
 80059fe:	4421      	add	r1, r4
 8005a00:	6011      	str	r1, [r2, #0]
 8005a02:	e7da      	b.n	80059ba <_free_r+0x26>
 8005a04:	d902      	bls.n	8005a0c <_free_r+0x78>
 8005a06:	230c      	movs	r3, #12
 8005a08:	6003      	str	r3, [r0, #0]
 8005a0a:	e7d6      	b.n	80059ba <_free_r+0x26>
 8005a0c:	6825      	ldr	r5, [r4, #0]
 8005a0e:	1961      	adds	r1, r4, r5
 8005a10:	428b      	cmp	r3, r1
 8005a12:	bf04      	itt	eq
 8005a14:	6819      	ldreq	r1, [r3, #0]
 8005a16:	685b      	ldreq	r3, [r3, #4]
 8005a18:	6063      	str	r3, [r4, #4]
 8005a1a:	bf04      	itt	eq
 8005a1c:	1949      	addeq	r1, r1, r5
 8005a1e:	6021      	streq	r1, [r4, #0]
 8005a20:	6054      	str	r4, [r2, #4]
 8005a22:	e7ca      	b.n	80059ba <_free_r+0x26>
 8005a24:	b003      	add	sp, #12
 8005a26:	bd30      	pop	{r4, r5, pc}
 8005a28:	2000088c 	.word	0x2000088c

08005a2c <sbrk_aligned>:
 8005a2c:	b570      	push	{r4, r5, r6, lr}
 8005a2e:	4e0e      	ldr	r6, [pc, #56]	; (8005a68 <sbrk_aligned+0x3c>)
 8005a30:	460c      	mov	r4, r1
 8005a32:	6831      	ldr	r1, [r6, #0]
 8005a34:	4605      	mov	r5, r0
 8005a36:	b911      	cbnz	r1, 8005a3e <sbrk_aligned+0x12>
 8005a38:	f000 fb7a 	bl	8006130 <_sbrk_r>
 8005a3c:	6030      	str	r0, [r6, #0]
 8005a3e:	4621      	mov	r1, r4
 8005a40:	4628      	mov	r0, r5
 8005a42:	f000 fb75 	bl	8006130 <_sbrk_r>
 8005a46:	1c43      	adds	r3, r0, #1
 8005a48:	d00a      	beq.n	8005a60 <sbrk_aligned+0x34>
 8005a4a:	1cc4      	adds	r4, r0, #3
 8005a4c:	f024 0403 	bic.w	r4, r4, #3
 8005a50:	42a0      	cmp	r0, r4
 8005a52:	d007      	beq.n	8005a64 <sbrk_aligned+0x38>
 8005a54:	1a21      	subs	r1, r4, r0
 8005a56:	4628      	mov	r0, r5
 8005a58:	f000 fb6a 	bl	8006130 <_sbrk_r>
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	d101      	bne.n	8005a64 <sbrk_aligned+0x38>
 8005a60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005a64:	4620      	mov	r0, r4
 8005a66:	bd70      	pop	{r4, r5, r6, pc}
 8005a68:	20000890 	.word	0x20000890

08005a6c <_malloc_r>:
 8005a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a70:	1ccd      	adds	r5, r1, #3
 8005a72:	f025 0503 	bic.w	r5, r5, #3
 8005a76:	3508      	adds	r5, #8
 8005a78:	2d0c      	cmp	r5, #12
 8005a7a:	bf38      	it	cc
 8005a7c:	250c      	movcc	r5, #12
 8005a7e:	2d00      	cmp	r5, #0
 8005a80:	4607      	mov	r7, r0
 8005a82:	db01      	blt.n	8005a88 <_malloc_r+0x1c>
 8005a84:	42a9      	cmp	r1, r5
 8005a86:	d905      	bls.n	8005a94 <_malloc_r+0x28>
 8005a88:	230c      	movs	r3, #12
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	2600      	movs	r6, #0
 8005a8e:	4630      	mov	r0, r6
 8005a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a94:	4e2e      	ldr	r6, [pc, #184]	; (8005b50 <_malloc_r+0xe4>)
 8005a96:	f000 fbf5 	bl	8006284 <__malloc_lock>
 8005a9a:	6833      	ldr	r3, [r6, #0]
 8005a9c:	461c      	mov	r4, r3
 8005a9e:	bb34      	cbnz	r4, 8005aee <_malloc_r+0x82>
 8005aa0:	4629      	mov	r1, r5
 8005aa2:	4638      	mov	r0, r7
 8005aa4:	f7ff ffc2 	bl	8005a2c <sbrk_aligned>
 8005aa8:	1c43      	adds	r3, r0, #1
 8005aaa:	4604      	mov	r4, r0
 8005aac:	d14d      	bne.n	8005b4a <_malloc_r+0xde>
 8005aae:	6834      	ldr	r4, [r6, #0]
 8005ab0:	4626      	mov	r6, r4
 8005ab2:	2e00      	cmp	r6, #0
 8005ab4:	d140      	bne.n	8005b38 <_malloc_r+0xcc>
 8005ab6:	6823      	ldr	r3, [r4, #0]
 8005ab8:	4631      	mov	r1, r6
 8005aba:	4638      	mov	r0, r7
 8005abc:	eb04 0803 	add.w	r8, r4, r3
 8005ac0:	f000 fb36 	bl	8006130 <_sbrk_r>
 8005ac4:	4580      	cmp	r8, r0
 8005ac6:	d13a      	bne.n	8005b3e <_malloc_r+0xd2>
 8005ac8:	6821      	ldr	r1, [r4, #0]
 8005aca:	3503      	adds	r5, #3
 8005acc:	1a6d      	subs	r5, r5, r1
 8005ace:	f025 0503 	bic.w	r5, r5, #3
 8005ad2:	3508      	adds	r5, #8
 8005ad4:	2d0c      	cmp	r5, #12
 8005ad6:	bf38      	it	cc
 8005ad8:	250c      	movcc	r5, #12
 8005ada:	4629      	mov	r1, r5
 8005adc:	4638      	mov	r0, r7
 8005ade:	f7ff ffa5 	bl	8005a2c <sbrk_aligned>
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	d02b      	beq.n	8005b3e <_malloc_r+0xd2>
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	442b      	add	r3, r5
 8005aea:	6023      	str	r3, [r4, #0]
 8005aec:	e00e      	b.n	8005b0c <_malloc_r+0xa0>
 8005aee:	6822      	ldr	r2, [r4, #0]
 8005af0:	1b52      	subs	r2, r2, r5
 8005af2:	d41e      	bmi.n	8005b32 <_malloc_r+0xc6>
 8005af4:	2a0b      	cmp	r2, #11
 8005af6:	d916      	bls.n	8005b26 <_malloc_r+0xba>
 8005af8:	1961      	adds	r1, r4, r5
 8005afa:	42a3      	cmp	r3, r4
 8005afc:	6025      	str	r5, [r4, #0]
 8005afe:	bf18      	it	ne
 8005b00:	6059      	strne	r1, [r3, #4]
 8005b02:	6863      	ldr	r3, [r4, #4]
 8005b04:	bf08      	it	eq
 8005b06:	6031      	streq	r1, [r6, #0]
 8005b08:	5162      	str	r2, [r4, r5]
 8005b0a:	604b      	str	r3, [r1, #4]
 8005b0c:	4638      	mov	r0, r7
 8005b0e:	f104 060b 	add.w	r6, r4, #11
 8005b12:	f000 fbbd 	bl	8006290 <__malloc_unlock>
 8005b16:	f026 0607 	bic.w	r6, r6, #7
 8005b1a:	1d23      	adds	r3, r4, #4
 8005b1c:	1af2      	subs	r2, r6, r3
 8005b1e:	d0b6      	beq.n	8005a8e <_malloc_r+0x22>
 8005b20:	1b9b      	subs	r3, r3, r6
 8005b22:	50a3      	str	r3, [r4, r2]
 8005b24:	e7b3      	b.n	8005a8e <_malloc_r+0x22>
 8005b26:	6862      	ldr	r2, [r4, #4]
 8005b28:	42a3      	cmp	r3, r4
 8005b2a:	bf0c      	ite	eq
 8005b2c:	6032      	streq	r2, [r6, #0]
 8005b2e:	605a      	strne	r2, [r3, #4]
 8005b30:	e7ec      	b.n	8005b0c <_malloc_r+0xa0>
 8005b32:	4623      	mov	r3, r4
 8005b34:	6864      	ldr	r4, [r4, #4]
 8005b36:	e7b2      	b.n	8005a9e <_malloc_r+0x32>
 8005b38:	4634      	mov	r4, r6
 8005b3a:	6876      	ldr	r6, [r6, #4]
 8005b3c:	e7b9      	b.n	8005ab2 <_malloc_r+0x46>
 8005b3e:	230c      	movs	r3, #12
 8005b40:	603b      	str	r3, [r7, #0]
 8005b42:	4638      	mov	r0, r7
 8005b44:	f000 fba4 	bl	8006290 <__malloc_unlock>
 8005b48:	e7a1      	b.n	8005a8e <_malloc_r+0x22>
 8005b4a:	6025      	str	r5, [r4, #0]
 8005b4c:	e7de      	b.n	8005b0c <_malloc_r+0xa0>
 8005b4e:	bf00      	nop
 8005b50:	2000088c 	.word	0x2000088c

08005b54 <__sfputc_r>:
 8005b54:	6893      	ldr	r3, [r2, #8]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	b410      	push	{r4}
 8005b5c:	6093      	str	r3, [r2, #8]
 8005b5e:	da08      	bge.n	8005b72 <__sfputc_r+0x1e>
 8005b60:	6994      	ldr	r4, [r2, #24]
 8005b62:	42a3      	cmp	r3, r4
 8005b64:	db01      	blt.n	8005b6a <__sfputc_r+0x16>
 8005b66:	290a      	cmp	r1, #10
 8005b68:	d103      	bne.n	8005b72 <__sfputc_r+0x1e>
 8005b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b6e:	f7ff bc29 	b.w	80053c4 <__swbuf_r>
 8005b72:	6813      	ldr	r3, [r2, #0]
 8005b74:	1c58      	adds	r0, r3, #1
 8005b76:	6010      	str	r0, [r2, #0]
 8005b78:	7019      	strb	r1, [r3, #0]
 8005b7a:	4608      	mov	r0, r1
 8005b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <__sfputs_r>:
 8005b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b84:	4606      	mov	r6, r0
 8005b86:	460f      	mov	r7, r1
 8005b88:	4614      	mov	r4, r2
 8005b8a:	18d5      	adds	r5, r2, r3
 8005b8c:	42ac      	cmp	r4, r5
 8005b8e:	d101      	bne.n	8005b94 <__sfputs_r+0x12>
 8005b90:	2000      	movs	r0, #0
 8005b92:	e007      	b.n	8005ba4 <__sfputs_r+0x22>
 8005b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b98:	463a      	mov	r2, r7
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	f7ff ffda 	bl	8005b54 <__sfputc_r>
 8005ba0:	1c43      	adds	r3, r0, #1
 8005ba2:	d1f3      	bne.n	8005b8c <__sfputs_r+0xa>
 8005ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ba8 <_vfiprintf_r>:
 8005ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bac:	460d      	mov	r5, r1
 8005bae:	b09d      	sub	sp, #116	; 0x74
 8005bb0:	4614      	mov	r4, r2
 8005bb2:	4698      	mov	r8, r3
 8005bb4:	4606      	mov	r6, r0
 8005bb6:	b118      	cbz	r0, 8005bc0 <_vfiprintf_r+0x18>
 8005bb8:	6983      	ldr	r3, [r0, #24]
 8005bba:	b90b      	cbnz	r3, 8005bc0 <_vfiprintf_r+0x18>
 8005bbc:	f7ff fddc 	bl	8005778 <__sinit>
 8005bc0:	4b89      	ldr	r3, [pc, #548]	; (8005de8 <_vfiprintf_r+0x240>)
 8005bc2:	429d      	cmp	r5, r3
 8005bc4:	d11b      	bne.n	8005bfe <_vfiprintf_r+0x56>
 8005bc6:	6875      	ldr	r5, [r6, #4]
 8005bc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bca:	07d9      	lsls	r1, r3, #31
 8005bcc:	d405      	bmi.n	8005bda <_vfiprintf_r+0x32>
 8005bce:	89ab      	ldrh	r3, [r5, #12]
 8005bd0:	059a      	lsls	r2, r3, #22
 8005bd2:	d402      	bmi.n	8005bda <_vfiprintf_r+0x32>
 8005bd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bd6:	f7ff fe6d 	bl	80058b4 <__retarget_lock_acquire_recursive>
 8005bda:	89ab      	ldrh	r3, [r5, #12]
 8005bdc:	071b      	lsls	r3, r3, #28
 8005bde:	d501      	bpl.n	8005be4 <_vfiprintf_r+0x3c>
 8005be0:	692b      	ldr	r3, [r5, #16]
 8005be2:	b9eb      	cbnz	r3, 8005c20 <_vfiprintf_r+0x78>
 8005be4:	4629      	mov	r1, r5
 8005be6:	4630      	mov	r0, r6
 8005be8:	f7ff fc3e 	bl	8005468 <__swsetup_r>
 8005bec:	b1c0      	cbz	r0, 8005c20 <_vfiprintf_r+0x78>
 8005bee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bf0:	07dc      	lsls	r4, r3, #31
 8005bf2:	d50e      	bpl.n	8005c12 <_vfiprintf_r+0x6a>
 8005bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bf8:	b01d      	add	sp, #116	; 0x74
 8005bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bfe:	4b7b      	ldr	r3, [pc, #492]	; (8005dec <_vfiprintf_r+0x244>)
 8005c00:	429d      	cmp	r5, r3
 8005c02:	d101      	bne.n	8005c08 <_vfiprintf_r+0x60>
 8005c04:	68b5      	ldr	r5, [r6, #8]
 8005c06:	e7df      	b.n	8005bc8 <_vfiprintf_r+0x20>
 8005c08:	4b79      	ldr	r3, [pc, #484]	; (8005df0 <_vfiprintf_r+0x248>)
 8005c0a:	429d      	cmp	r5, r3
 8005c0c:	bf08      	it	eq
 8005c0e:	68f5      	ldreq	r5, [r6, #12]
 8005c10:	e7da      	b.n	8005bc8 <_vfiprintf_r+0x20>
 8005c12:	89ab      	ldrh	r3, [r5, #12]
 8005c14:	0598      	lsls	r0, r3, #22
 8005c16:	d4ed      	bmi.n	8005bf4 <_vfiprintf_r+0x4c>
 8005c18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c1a:	f7ff fe4c 	bl	80058b6 <__retarget_lock_release_recursive>
 8005c1e:	e7e9      	b.n	8005bf4 <_vfiprintf_r+0x4c>
 8005c20:	2300      	movs	r3, #0
 8005c22:	9309      	str	r3, [sp, #36]	; 0x24
 8005c24:	2320      	movs	r3, #32
 8005c26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c2e:	2330      	movs	r3, #48	; 0x30
 8005c30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005df4 <_vfiprintf_r+0x24c>
 8005c34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c38:	f04f 0901 	mov.w	r9, #1
 8005c3c:	4623      	mov	r3, r4
 8005c3e:	469a      	mov	sl, r3
 8005c40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c44:	b10a      	cbz	r2, 8005c4a <_vfiprintf_r+0xa2>
 8005c46:	2a25      	cmp	r2, #37	; 0x25
 8005c48:	d1f9      	bne.n	8005c3e <_vfiprintf_r+0x96>
 8005c4a:	ebba 0b04 	subs.w	fp, sl, r4
 8005c4e:	d00b      	beq.n	8005c68 <_vfiprintf_r+0xc0>
 8005c50:	465b      	mov	r3, fp
 8005c52:	4622      	mov	r2, r4
 8005c54:	4629      	mov	r1, r5
 8005c56:	4630      	mov	r0, r6
 8005c58:	f7ff ff93 	bl	8005b82 <__sfputs_r>
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	f000 80aa 	beq.w	8005db6 <_vfiprintf_r+0x20e>
 8005c62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c64:	445a      	add	r2, fp
 8005c66:	9209      	str	r2, [sp, #36]	; 0x24
 8005c68:	f89a 3000 	ldrb.w	r3, [sl]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 80a2 	beq.w	8005db6 <_vfiprintf_r+0x20e>
 8005c72:	2300      	movs	r3, #0
 8005c74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c7c:	f10a 0a01 	add.w	sl, sl, #1
 8005c80:	9304      	str	r3, [sp, #16]
 8005c82:	9307      	str	r3, [sp, #28]
 8005c84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c88:	931a      	str	r3, [sp, #104]	; 0x68
 8005c8a:	4654      	mov	r4, sl
 8005c8c:	2205      	movs	r2, #5
 8005c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c92:	4858      	ldr	r0, [pc, #352]	; (8005df4 <_vfiprintf_r+0x24c>)
 8005c94:	f7fa fa9c 	bl	80001d0 <memchr>
 8005c98:	9a04      	ldr	r2, [sp, #16]
 8005c9a:	b9d8      	cbnz	r0, 8005cd4 <_vfiprintf_r+0x12c>
 8005c9c:	06d1      	lsls	r1, r2, #27
 8005c9e:	bf44      	itt	mi
 8005ca0:	2320      	movmi	r3, #32
 8005ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ca6:	0713      	lsls	r3, r2, #28
 8005ca8:	bf44      	itt	mi
 8005caa:	232b      	movmi	r3, #43	; 0x2b
 8005cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8005cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8005cb6:	d015      	beq.n	8005ce4 <_vfiprintf_r+0x13c>
 8005cb8:	9a07      	ldr	r2, [sp, #28]
 8005cba:	4654      	mov	r4, sl
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	f04f 0c0a 	mov.w	ip, #10
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cc8:	3b30      	subs	r3, #48	; 0x30
 8005cca:	2b09      	cmp	r3, #9
 8005ccc:	d94e      	bls.n	8005d6c <_vfiprintf_r+0x1c4>
 8005cce:	b1b0      	cbz	r0, 8005cfe <_vfiprintf_r+0x156>
 8005cd0:	9207      	str	r2, [sp, #28]
 8005cd2:	e014      	b.n	8005cfe <_vfiprintf_r+0x156>
 8005cd4:	eba0 0308 	sub.w	r3, r0, r8
 8005cd8:	fa09 f303 	lsl.w	r3, r9, r3
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	9304      	str	r3, [sp, #16]
 8005ce0:	46a2      	mov	sl, r4
 8005ce2:	e7d2      	b.n	8005c8a <_vfiprintf_r+0xe2>
 8005ce4:	9b03      	ldr	r3, [sp, #12]
 8005ce6:	1d19      	adds	r1, r3, #4
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	9103      	str	r1, [sp, #12]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	bfbb      	ittet	lt
 8005cf0:	425b      	neglt	r3, r3
 8005cf2:	f042 0202 	orrlt.w	r2, r2, #2
 8005cf6:	9307      	strge	r3, [sp, #28]
 8005cf8:	9307      	strlt	r3, [sp, #28]
 8005cfa:	bfb8      	it	lt
 8005cfc:	9204      	strlt	r2, [sp, #16]
 8005cfe:	7823      	ldrb	r3, [r4, #0]
 8005d00:	2b2e      	cmp	r3, #46	; 0x2e
 8005d02:	d10c      	bne.n	8005d1e <_vfiprintf_r+0x176>
 8005d04:	7863      	ldrb	r3, [r4, #1]
 8005d06:	2b2a      	cmp	r3, #42	; 0x2a
 8005d08:	d135      	bne.n	8005d76 <_vfiprintf_r+0x1ce>
 8005d0a:	9b03      	ldr	r3, [sp, #12]
 8005d0c:	1d1a      	adds	r2, r3, #4
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	9203      	str	r2, [sp, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	bfb8      	it	lt
 8005d16:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005d1a:	3402      	adds	r4, #2
 8005d1c:	9305      	str	r3, [sp, #20]
 8005d1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005e04 <_vfiprintf_r+0x25c>
 8005d22:	7821      	ldrb	r1, [r4, #0]
 8005d24:	2203      	movs	r2, #3
 8005d26:	4650      	mov	r0, sl
 8005d28:	f7fa fa52 	bl	80001d0 <memchr>
 8005d2c:	b140      	cbz	r0, 8005d40 <_vfiprintf_r+0x198>
 8005d2e:	2340      	movs	r3, #64	; 0x40
 8005d30:	eba0 000a 	sub.w	r0, r0, sl
 8005d34:	fa03 f000 	lsl.w	r0, r3, r0
 8005d38:	9b04      	ldr	r3, [sp, #16]
 8005d3a:	4303      	orrs	r3, r0
 8005d3c:	3401      	adds	r4, #1
 8005d3e:	9304      	str	r3, [sp, #16]
 8005d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d44:	482c      	ldr	r0, [pc, #176]	; (8005df8 <_vfiprintf_r+0x250>)
 8005d46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d4a:	2206      	movs	r2, #6
 8005d4c:	f7fa fa40 	bl	80001d0 <memchr>
 8005d50:	2800      	cmp	r0, #0
 8005d52:	d03f      	beq.n	8005dd4 <_vfiprintf_r+0x22c>
 8005d54:	4b29      	ldr	r3, [pc, #164]	; (8005dfc <_vfiprintf_r+0x254>)
 8005d56:	bb1b      	cbnz	r3, 8005da0 <_vfiprintf_r+0x1f8>
 8005d58:	9b03      	ldr	r3, [sp, #12]
 8005d5a:	3307      	adds	r3, #7
 8005d5c:	f023 0307 	bic.w	r3, r3, #7
 8005d60:	3308      	adds	r3, #8
 8005d62:	9303      	str	r3, [sp, #12]
 8005d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d66:	443b      	add	r3, r7
 8005d68:	9309      	str	r3, [sp, #36]	; 0x24
 8005d6a:	e767      	b.n	8005c3c <_vfiprintf_r+0x94>
 8005d6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d70:	460c      	mov	r4, r1
 8005d72:	2001      	movs	r0, #1
 8005d74:	e7a5      	b.n	8005cc2 <_vfiprintf_r+0x11a>
 8005d76:	2300      	movs	r3, #0
 8005d78:	3401      	adds	r4, #1
 8005d7a:	9305      	str	r3, [sp, #20]
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	f04f 0c0a 	mov.w	ip, #10
 8005d82:	4620      	mov	r0, r4
 8005d84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d88:	3a30      	subs	r2, #48	; 0x30
 8005d8a:	2a09      	cmp	r2, #9
 8005d8c:	d903      	bls.n	8005d96 <_vfiprintf_r+0x1ee>
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0c5      	beq.n	8005d1e <_vfiprintf_r+0x176>
 8005d92:	9105      	str	r1, [sp, #20]
 8005d94:	e7c3      	b.n	8005d1e <_vfiprintf_r+0x176>
 8005d96:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d9a:	4604      	mov	r4, r0
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e7f0      	b.n	8005d82 <_vfiprintf_r+0x1da>
 8005da0:	ab03      	add	r3, sp, #12
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	462a      	mov	r2, r5
 8005da6:	4b16      	ldr	r3, [pc, #88]	; (8005e00 <_vfiprintf_r+0x258>)
 8005da8:	a904      	add	r1, sp, #16
 8005daa:	4630      	mov	r0, r6
 8005dac:	f3af 8000 	nop.w
 8005db0:	4607      	mov	r7, r0
 8005db2:	1c78      	adds	r0, r7, #1
 8005db4:	d1d6      	bne.n	8005d64 <_vfiprintf_r+0x1bc>
 8005db6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005db8:	07d9      	lsls	r1, r3, #31
 8005dba:	d405      	bmi.n	8005dc8 <_vfiprintf_r+0x220>
 8005dbc:	89ab      	ldrh	r3, [r5, #12]
 8005dbe:	059a      	lsls	r2, r3, #22
 8005dc0:	d402      	bmi.n	8005dc8 <_vfiprintf_r+0x220>
 8005dc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dc4:	f7ff fd77 	bl	80058b6 <__retarget_lock_release_recursive>
 8005dc8:	89ab      	ldrh	r3, [r5, #12]
 8005dca:	065b      	lsls	r3, r3, #25
 8005dcc:	f53f af12 	bmi.w	8005bf4 <_vfiprintf_r+0x4c>
 8005dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dd2:	e711      	b.n	8005bf8 <_vfiprintf_r+0x50>
 8005dd4:	ab03      	add	r3, sp, #12
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	462a      	mov	r2, r5
 8005dda:	4b09      	ldr	r3, [pc, #36]	; (8005e00 <_vfiprintf_r+0x258>)
 8005ddc:	a904      	add	r1, sp, #16
 8005dde:	4630      	mov	r0, r6
 8005de0:	f000 f880 	bl	8005ee4 <_printf_i>
 8005de4:	e7e4      	b.n	8005db0 <_vfiprintf_r+0x208>
 8005de6:	bf00      	nop
 8005de8:	080066f0 	.word	0x080066f0
 8005dec:	08006710 	.word	0x08006710
 8005df0:	080066d0 	.word	0x080066d0
 8005df4:	08006730 	.word	0x08006730
 8005df8:	0800673a 	.word	0x0800673a
 8005dfc:	00000000 	.word	0x00000000
 8005e00:	08005b83 	.word	0x08005b83
 8005e04:	08006736 	.word	0x08006736

08005e08 <_printf_common>:
 8005e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e0c:	4616      	mov	r6, r2
 8005e0e:	4699      	mov	r9, r3
 8005e10:	688a      	ldr	r2, [r1, #8]
 8005e12:	690b      	ldr	r3, [r1, #16]
 8005e14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	bfb8      	it	lt
 8005e1c:	4613      	movlt	r3, r2
 8005e1e:	6033      	str	r3, [r6, #0]
 8005e20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e24:	4607      	mov	r7, r0
 8005e26:	460c      	mov	r4, r1
 8005e28:	b10a      	cbz	r2, 8005e2e <_printf_common+0x26>
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	6033      	str	r3, [r6, #0]
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	0699      	lsls	r1, r3, #26
 8005e32:	bf42      	ittt	mi
 8005e34:	6833      	ldrmi	r3, [r6, #0]
 8005e36:	3302      	addmi	r3, #2
 8005e38:	6033      	strmi	r3, [r6, #0]
 8005e3a:	6825      	ldr	r5, [r4, #0]
 8005e3c:	f015 0506 	ands.w	r5, r5, #6
 8005e40:	d106      	bne.n	8005e50 <_printf_common+0x48>
 8005e42:	f104 0a19 	add.w	sl, r4, #25
 8005e46:	68e3      	ldr	r3, [r4, #12]
 8005e48:	6832      	ldr	r2, [r6, #0]
 8005e4a:	1a9b      	subs	r3, r3, r2
 8005e4c:	42ab      	cmp	r3, r5
 8005e4e:	dc26      	bgt.n	8005e9e <_printf_common+0x96>
 8005e50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e54:	1e13      	subs	r3, r2, #0
 8005e56:	6822      	ldr	r2, [r4, #0]
 8005e58:	bf18      	it	ne
 8005e5a:	2301      	movne	r3, #1
 8005e5c:	0692      	lsls	r2, r2, #26
 8005e5e:	d42b      	bmi.n	8005eb8 <_printf_common+0xb0>
 8005e60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e64:	4649      	mov	r1, r9
 8005e66:	4638      	mov	r0, r7
 8005e68:	47c0      	blx	r8
 8005e6a:	3001      	adds	r0, #1
 8005e6c:	d01e      	beq.n	8005eac <_printf_common+0xa4>
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	68e5      	ldr	r5, [r4, #12]
 8005e72:	6832      	ldr	r2, [r6, #0]
 8005e74:	f003 0306 	and.w	r3, r3, #6
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	bf08      	it	eq
 8005e7c:	1aad      	subeq	r5, r5, r2
 8005e7e:	68a3      	ldr	r3, [r4, #8]
 8005e80:	6922      	ldr	r2, [r4, #16]
 8005e82:	bf0c      	ite	eq
 8005e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e88:	2500      	movne	r5, #0
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	bfc4      	itt	gt
 8005e8e:	1a9b      	subgt	r3, r3, r2
 8005e90:	18ed      	addgt	r5, r5, r3
 8005e92:	2600      	movs	r6, #0
 8005e94:	341a      	adds	r4, #26
 8005e96:	42b5      	cmp	r5, r6
 8005e98:	d11a      	bne.n	8005ed0 <_printf_common+0xc8>
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	e008      	b.n	8005eb0 <_printf_common+0xa8>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	4652      	mov	r2, sl
 8005ea2:	4649      	mov	r1, r9
 8005ea4:	4638      	mov	r0, r7
 8005ea6:	47c0      	blx	r8
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	d103      	bne.n	8005eb4 <_printf_common+0xac>
 8005eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb4:	3501      	adds	r5, #1
 8005eb6:	e7c6      	b.n	8005e46 <_printf_common+0x3e>
 8005eb8:	18e1      	adds	r1, r4, r3
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	2030      	movs	r0, #48	; 0x30
 8005ebe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ec2:	4422      	add	r2, r4
 8005ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ec8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ecc:	3302      	adds	r3, #2
 8005ece:	e7c7      	b.n	8005e60 <_printf_common+0x58>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	4622      	mov	r2, r4
 8005ed4:	4649      	mov	r1, r9
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	47c0      	blx	r8
 8005eda:	3001      	adds	r0, #1
 8005edc:	d0e6      	beq.n	8005eac <_printf_common+0xa4>
 8005ede:	3601      	adds	r6, #1
 8005ee0:	e7d9      	b.n	8005e96 <_printf_common+0x8e>
	...

08005ee4 <_printf_i>:
 8005ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee8:	7e0f      	ldrb	r7, [r1, #24]
 8005eea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005eec:	2f78      	cmp	r7, #120	; 0x78
 8005eee:	4691      	mov	r9, r2
 8005ef0:	4680      	mov	r8, r0
 8005ef2:	460c      	mov	r4, r1
 8005ef4:	469a      	mov	sl, r3
 8005ef6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005efa:	d807      	bhi.n	8005f0c <_printf_i+0x28>
 8005efc:	2f62      	cmp	r7, #98	; 0x62
 8005efe:	d80a      	bhi.n	8005f16 <_printf_i+0x32>
 8005f00:	2f00      	cmp	r7, #0
 8005f02:	f000 80d8 	beq.w	80060b6 <_printf_i+0x1d2>
 8005f06:	2f58      	cmp	r7, #88	; 0x58
 8005f08:	f000 80a3 	beq.w	8006052 <_printf_i+0x16e>
 8005f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f14:	e03a      	b.n	8005f8c <_printf_i+0xa8>
 8005f16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f1a:	2b15      	cmp	r3, #21
 8005f1c:	d8f6      	bhi.n	8005f0c <_printf_i+0x28>
 8005f1e:	a101      	add	r1, pc, #4	; (adr r1, 8005f24 <_printf_i+0x40>)
 8005f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f24:	08005f7d 	.word	0x08005f7d
 8005f28:	08005f91 	.word	0x08005f91
 8005f2c:	08005f0d 	.word	0x08005f0d
 8005f30:	08005f0d 	.word	0x08005f0d
 8005f34:	08005f0d 	.word	0x08005f0d
 8005f38:	08005f0d 	.word	0x08005f0d
 8005f3c:	08005f91 	.word	0x08005f91
 8005f40:	08005f0d 	.word	0x08005f0d
 8005f44:	08005f0d 	.word	0x08005f0d
 8005f48:	08005f0d 	.word	0x08005f0d
 8005f4c:	08005f0d 	.word	0x08005f0d
 8005f50:	0800609d 	.word	0x0800609d
 8005f54:	08005fc1 	.word	0x08005fc1
 8005f58:	0800607f 	.word	0x0800607f
 8005f5c:	08005f0d 	.word	0x08005f0d
 8005f60:	08005f0d 	.word	0x08005f0d
 8005f64:	080060bf 	.word	0x080060bf
 8005f68:	08005f0d 	.word	0x08005f0d
 8005f6c:	08005fc1 	.word	0x08005fc1
 8005f70:	08005f0d 	.word	0x08005f0d
 8005f74:	08005f0d 	.word	0x08005f0d
 8005f78:	08006087 	.word	0x08006087
 8005f7c:	682b      	ldr	r3, [r5, #0]
 8005f7e:	1d1a      	adds	r2, r3, #4
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	602a      	str	r2, [r5, #0]
 8005f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e0a3      	b.n	80060d8 <_printf_i+0x1f4>
 8005f90:	6820      	ldr	r0, [r4, #0]
 8005f92:	6829      	ldr	r1, [r5, #0]
 8005f94:	0606      	lsls	r6, r0, #24
 8005f96:	f101 0304 	add.w	r3, r1, #4
 8005f9a:	d50a      	bpl.n	8005fb2 <_printf_i+0xce>
 8005f9c:	680e      	ldr	r6, [r1, #0]
 8005f9e:	602b      	str	r3, [r5, #0]
 8005fa0:	2e00      	cmp	r6, #0
 8005fa2:	da03      	bge.n	8005fac <_printf_i+0xc8>
 8005fa4:	232d      	movs	r3, #45	; 0x2d
 8005fa6:	4276      	negs	r6, r6
 8005fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fac:	485e      	ldr	r0, [pc, #376]	; (8006128 <_printf_i+0x244>)
 8005fae:	230a      	movs	r3, #10
 8005fb0:	e019      	b.n	8005fe6 <_printf_i+0x102>
 8005fb2:	680e      	ldr	r6, [r1, #0]
 8005fb4:	602b      	str	r3, [r5, #0]
 8005fb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005fba:	bf18      	it	ne
 8005fbc:	b236      	sxthne	r6, r6
 8005fbe:	e7ef      	b.n	8005fa0 <_printf_i+0xbc>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	6820      	ldr	r0, [r4, #0]
 8005fc4:	1d19      	adds	r1, r3, #4
 8005fc6:	6029      	str	r1, [r5, #0]
 8005fc8:	0601      	lsls	r1, r0, #24
 8005fca:	d501      	bpl.n	8005fd0 <_printf_i+0xec>
 8005fcc:	681e      	ldr	r6, [r3, #0]
 8005fce:	e002      	b.n	8005fd6 <_printf_i+0xf2>
 8005fd0:	0646      	lsls	r6, r0, #25
 8005fd2:	d5fb      	bpl.n	8005fcc <_printf_i+0xe8>
 8005fd4:	881e      	ldrh	r6, [r3, #0]
 8005fd6:	4854      	ldr	r0, [pc, #336]	; (8006128 <_printf_i+0x244>)
 8005fd8:	2f6f      	cmp	r7, #111	; 0x6f
 8005fda:	bf0c      	ite	eq
 8005fdc:	2308      	moveq	r3, #8
 8005fde:	230a      	movne	r3, #10
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fe6:	6865      	ldr	r5, [r4, #4]
 8005fe8:	60a5      	str	r5, [r4, #8]
 8005fea:	2d00      	cmp	r5, #0
 8005fec:	bfa2      	ittt	ge
 8005fee:	6821      	ldrge	r1, [r4, #0]
 8005ff0:	f021 0104 	bicge.w	r1, r1, #4
 8005ff4:	6021      	strge	r1, [r4, #0]
 8005ff6:	b90e      	cbnz	r6, 8005ffc <_printf_i+0x118>
 8005ff8:	2d00      	cmp	r5, #0
 8005ffa:	d04d      	beq.n	8006098 <_printf_i+0x1b4>
 8005ffc:	4615      	mov	r5, r2
 8005ffe:	fbb6 f1f3 	udiv	r1, r6, r3
 8006002:	fb03 6711 	mls	r7, r3, r1, r6
 8006006:	5dc7      	ldrb	r7, [r0, r7]
 8006008:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800600c:	4637      	mov	r7, r6
 800600e:	42bb      	cmp	r3, r7
 8006010:	460e      	mov	r6, r1
 8006012:	d9f4      	bls.n	8005ffe <_printf_i+0x11a>
 8006014:	2b08      	cmp	r3, #8
 8006016:	d10b      	bne.n	8006030 <_printf_i+0x14c>
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	07de      	lsls	r6, r3, #31
 800601c:	d508      	bpl.n	8006030 <_printf_i+0x14c>
 800601e:	6923      	ldr	r3, [r4, #16]
 8006020:	6861      	ldr	r1, [r4, #4]
 8006022:	4299      	cmp	r1, r3
 8006024:	bfde      	ittt	le
 8006026:	2330      	movle	r3, #48	; 0x30
 8006028:	f805 3c01 	strble.w	r3, [r5, #-1]
 800602c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006030:	1b52      	subs	r2, r2, r5
 8006032:	6122      	str	r2, [r4, #16]
 8006034:	f8cd a000 	str.w	sl, [sp]
 8006038:	464b      	mov	r3, r9
 800603a:	aa03      	add	r2, sp, #12
 800603c:	4621      	mov	r1, r4
 800603e:	4640      	mov	r0, r8
 8006040:	f7ff fee2 	bl	8005e08 <_printf_common>
 8006044:	3001      	adds	r0, #1
 8006046:	d14c      	bne.n	80060e2 <_printf_i+0x1fe>
 8006048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800604c:	b004      	add	sp, #16
 800604e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006052:	4835      	ldr	r0, [pc, #212]	; (8006128 <_printf_i+0x244>)
 8006054:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006058:	6829      	ldr	r1, [r5, #0]
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006060:	6029      	str	r1, [r5, #0]
 8006062:	061d      	lsls	r5, r3, #24
 8006064:	d514      	bpl.n	8006090 <_printf_i+0x1ac>
 8006066:	07df      	lsls	r7, r3, #31
 8006068:	bf44      	itt	mi
 800606a:	f043 0320 	orrmi.w	r3, r3, #32
 800606e:	6023      	strmi	r3, [r4, #0]
 8006070:	b91e      	cbnz	r6, 800607a <_printf_i+0x196>
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	f023 0320 	bic.w	r3, r3, #32
 8006078:	6023      	str	r3, [r4, #0]
 800607a:	2310      	movs	r3, #16
 800607c:	e7b0      	b.n	8005fe0 <_printf_i+0xfc>
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	f043 0320 	orr.w	r3, r3, #32
 8006084:	6023      	str	r3, [r4, #0]
 8006086:	2378      	movs	r3, #120	; 0x78
 8006088:	4828      	ldr	r0, [pc, #160]	; (800612c <_printf_i+0x248>)
 800608a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800608e:	e7e3      	b.n	8006058 <_printf_i+0x174>
 8006090:	0659      	lsls	r1, r3, #25
 8006092:	bf48      	it	mi
 8006094:	b2b6      	uxthmi	r6, r6
 8006096:	e7e6      	b.n	8006066 <_printf_i+0x182>
 8006098:	4615      	mov	r5, r2
 800609a:	e7bb      	b.n	8006014 <_printf_i+0x130>
 800609c:	682b      	ldr	r3, [r5, #0]
 800609e:	6826      	ldr	r6, [r4, #0]
 80060a0:	6961      	ldr	r1, [r4, #20]
 80060a2:	1d18      	adds	r0, r3, #4
 80060a4:	6028      	str	r0, [r5, #0]
 80060a6:	0635      	lsls	r5, r6, #24
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	d501      	bpl.n	80060b0 <_printf_i+0x1cc>
 80060ac:	6019      	str	r1, [r3, #0]
 80060ae:	e002      	b.n	80060b6 <_printf_i+0x1d2>
 80060b0:	0670      	lsls	r0, r6, #25
 80060b2:	d5fb      	bpl.n	80060ac <_printf_i+0x1c8>
 80060b4:	8019      	strh	r1, [r3, #0]
 80060b6:	2300      	movs	r3, #0
 80060b8:	6123      	str	r3, [r4, #16]
 80060ba:	4615      	mov	r5, r2
 80060bc:	e7ba      	b.n	8006034 <_printf_i+0x150>
 80060be:	682b      	ldr	r3, [r5, #0]
 80060c0:	1d1a      	adds	r2, r3, #4
 80060c2:	602a      	str	r2, [r5, #0]
 80060c4:	681d      	ldr	r5, [r3, #0]
 80060c6:	6862      	ldr	r2, [r4, #4]
 80060c8:	2100      	movs	r1, #0
 80060ca:	4628      	mov	r0, r5
 80060cc:	f7fa f880 	bl	80001d0 <memchr>
 80060d0:	b108      	cbz	r0, 80060d6 <_printf_i+0x1f2>
 80060d2:	1b40      	subs	r0, r0, r5
 80060d4:	6060      	str	r0, [r4, #4]
 80060d6:	6863      	ldr	r3, [r4, #4]
 80060d8:	6123      	str	r3, [r4, #16]
 80060da:	2300      	movs	r3, #0
 80060dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060e0:	e7a8      	b.n	8006034 <_printf_i+0x150>
 80060e2:	6923      	ldr	r3, [r4, #16]
 80060e4:	462a      	mov	r2, r5
 80060e6:	4649      	mov	r1, r9
 80060e8:	4640      	mov	r0, r8
 80060ea:	47d0      	blx	sl
 80060ec:	3001      	adds	r0, #1
 80060ee:	d0ab      	beq.n	8006048 <_printf_i+0x164>
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	079b      	lsls	r3, r3, #30
 80060f4:	d413      	bmi.n	800611e <_printf_i+0x23a>
 80060f6:	68e0      	ldr	r0, [r4, #12]
 80060f8:	9b03      	ldr	r3, [sp, #12]
 80060fa:	4298      	cmp	r0, r3
 80060fc:	bfb8      	it	lt
 80060fe:	4618      	movlt	r0, r3
 8006100:	e7a4      	b.n	800604c <_printf_i+0x168>
 8006102:	2301      	movs	r3, #1
 8006104:	4632      	mov	r2, r6
 8006106:	4649      	mov	r1, r9
 8006108:	4640      	mov	r0, r8
 800610a:	47d0      	blx	sl
 800610c:	3001      	adds	r0, #1
 800610e:	d09b      	beq.n	8006048 <_printf_i+0x164>
 8006110:	3501      	adds	r5, #1
 8006112:	68e3      	ldr	r3, [r4, #12]
 8006114:	9903      	ldr	r1, [sp, #12]
 8006116:	1a5b      	subs	r3, r3, r1
 8006118:	42ab      	cmp	r3, r5
 800611a:	dcf2      	bgt.n	8006102 <_printf_i+0x21e>
 800611c:	e7eb      	b.n	80060f6 <_printf_i+0x212>
 800611e:	2500      	movs	r5, #0
 8006120:	f104 0619 	add.w	r6, r4, #25
 8006124:	e7f5      	b.n	8006112 <_printf_i+0x22e>
 8006126:	bf00      	nop
 8006128:	08006741 	.word	0x08006741
 800612c:	08006752 	.word	0x08006752

08006130 <_sbrk_r>:
 8006130:	b538      	push	{r3, r4, r5, lr}
 8006132:	4d06      	ldr	r5, [pc, #24]	; (800614c <_sbrk_r+0x1c>)
 8006134:	2300      	movs	r3, #0
 8006136:	4604      	mov	r4, r0
 8006138:	4608      	mov	r0, r1
 800613a:	602b      	str	r3, [r5, #0]
 800613c:	f7fa ff7a 	bl	8001034 <_sbrk>
 8006140:	1c43      	adds	r3, r0, #1
 8006142:	d102      	bne.n	800614a <_sbrk_r+0x1a>
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	b103      	cbz	r3, 800614a <_sbrk_r+0x1a>
 8006148:	6023      	str	r3, [r4, #0]
 800614a:	bd38      	pop	{r3, r4, r5, pc}
 800614c:	20000894 	.word	0x20000894

08006150 <__sread>:
 8006150:	b510      	push	{r4, lr}
 8006152:	460c      	mov	r4, r1
 8006154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006158:	f000 f8a0 	bl	800629c <_read_r>
 800615c:	2800      	cmp	r0, #0
 800615e:	bfab      	itete	ge
 8006160:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006162:	89a3      	ldrhlt	r3, [r4, #12]
 8006164:	181b      	addge	r3, r3, r0
 8006166:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800616a:	bfac      	ite	ge
 800616c:	6563      	strge	r3, [r4, #84]	; 0x54
 800616e:	81a3      	strhlt	r3, [r4, #12]
 8006170:	bd10      	pop	{r4, pc}

08006172 <__swrite>:
 8006172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006176:	461f      	mov	r7, r3
 8006178:	898b      	ldrh	r3, [r1, #12]
 800617a:	05db      	lsls	r3, r3, #23
 800617c:	4605      	mov	r5, r0
 800617e:	460c      	mov	r4, r1
 8006180:	4616      	mov	r6, r2
 8006182:	d505      	bpl.n	8006190 <__swrite+0x1e>
 8006184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006188:	2302      	movs	r3, #2
 800618a:	2200      	movs	r2, #0
 800618c:	f000 f868 	bl	8006260 <_lseek_r>
 8006190:	89a3      	ldrh	r3, [r4, #12]
 8006192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006196:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800619a:	81a3      	strh	r3, [r4, #12]
 800619c:	4632      	mov	r2, r6
 800619e:	463b      	mov	r3, r7
 80061a0:	4628      	mov	r0, r5
 80061a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061a6:	f000 b817 	b.w	80061d8 <_write_r>

080061aa <__sseek>:
 80061aa:	b510      	push	{r4, lr}
 80061ac:	460c      	mov	r4, r1
 80061ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061b2:	f000 f855 	bl	8006260 <_lseek_r>
 80061b6:	1c43      	adds	r3, r0, #1
 80061b8:	89a3      	ldrh	r3, [r4, #12]
 80061ba:	bf15      	itete	ne
 80061bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80061be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061c6:	81a3      	strheq	r3, [r4, #12]
 80061c8:	bf18      	it	ne
 80061ca:	81a3      	strhne	r3, [r4, #12]
 80061cc:	bd10      	pop	{r4, pc}

080061ce <__sclose>:
 80061ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061d2:	f000 b813 	b.w	80061fc <_close_r>
	...

080061d8 <_write_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	4d07      	ldr	r5, [pc, #28]	; (80061f8 <_write_r+0x20>)
 80061dc:	4604      	mov	r4, r0
 80061de:	4608      	mov	r0, r1
 80061e0:	4611      	mov	r1, r2
 80061e2:	2200      	movs	r2, #0
 80061e4:	602a      	str	r2, [r5, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	f7fa fdb2 	bl	8000d50 <_write>
 80061ec:	1c43      	adds	r3, r0, #1
 80061ee:	d102      	bne.n	80061f6 <_write_r+0x1e>
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	b103      	cbz	r3, 80061f6 <_write_r+0x1e>
 80061f4:	6023      	str	r3, [r4, #0]
 80061f6:	bd38      	pop	{r3, r4, r5, pc}
 80061f8:	20000894 	.word	0x20000894

080061fc <_close_r>:
 80061fc:	b538      	push	{r3, r4, r5, lr}
 80061fe:	4d06      	ldr	r5, [pc, #24]	; (8006218 <_close_r+0x1c>)
 8006200:	2300      	movs	r3, #0
 8006202:	4604      	mov	r4, r0
 8006204:	4608      	mov	r0, r1
 8006206:	602b      	str	r3, [r5, #0]
 8006208:	f7fa fedf 	bl	8000fca <_close>
 800620c:	1c43      	adds	r3, r0, #1
 800620e:	d102      	bne.n	8006216 <_close_r+0x1a>
 8006210:	682b      	ldr	r3, [r5, #0]
 8006212:	b103      	cbz	r3, 8006216 <_close_r+0x1a>
 8006214:	6023      	str	r3, [r4, #0]
 8006216:	bd38      	pop	{r3, r4, r5, pc}
 8006218:	20000894 	.word	0x20000894

0800621c <_fstat_r>:
 800621c:	b538      	push	{r3, r4, r5, lr}
 800621e:	4d07      	ldr	r5, [pc, #28]	; (800623c <_fstat_r+0x20>)
 8006220:	2300      	movs	r3, #0
 8006222:	4604      	mov	r4, r0
 8006224:	4608      	mov	r0, r1
 8006226:	4611      	mov	r1, r2
 8006228:	602b      	str	r3, [r5, #0]
 800622a:	f7fa feda 	bl	8000fe2 <_fstat>
 800622e:	1c43      	adds	r3, r0, #1
 8006230:	d102      	bne.n	8006238 <_fstat_r+0x1c>
 8006232:	682b      	ldr	r3, [r5, #0]
 8006234:	b103      	cbz	r3, 8006238 <_fstat_r+0x1c>
 8006236:	6023      	str	r3, [r4, #0]
 8006238:	bd38      	pop	{r3, r4, r5, pc}
 800623a:	bf00      	nop
 800623c:	20000894 	.word	0x20000894

08006240 <_isatty_r>:
 8006240:	b538      	push	{r3, r4, r5, lr}
 8006242:	4d06      	ldr	r5, [pc, #24]	; (800625c <_isatty_r+0x1c>)
 8006244:	2300      	movs	r3, #0
 8006246:	4604      	mov	r4, r0
 8006248:	4608      	mov	r0, r1
 800624a:	602b      	str	r3, [r5, #0]
 800624c:	f7fa fed9 	bl	8001002 <_isatty>
 8006250:	1c43      	adds	r3, r0, #1
 8006252:	d102      	bne.n	800625a <_isatty_r+0x1a>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	b103      	cbz	r3, 800625a <_isatty_r+0x1a>
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	bd38      	pop	{r3, r4, r5, pc}
 800625c:	20000894 	.word	0x20000894

08006260 <_lseek_r>:
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	4d07      	ldr	r5, [pc, #28]	; (8006280 <_lseek_r+0x20>)
 8006264:	4604      	mov	r4, r0
 8006266:	4608      	mov	r0, r1
 8006268:	4611      	mov	r1, r2
 800626a:	2200      	movs	r2, #0
 800626c:	602a      	str	r2, [r5, #0]
 800626e:	461a      	mov	r2, r3
 8006270:	f7fa fed2 	bl	8001018 <_lseek>
 8006274:	1c43      	adds	r3, r0, #1
 8006276:	d102      	bne.n	800627e <_lseek_r+0x1e>
 8006278:	682b      	ldr	r3, [r5, #0]
 800627a:	b103      	cbz	r3, 800627e <_lseek_r+0x1e>
 800627c:	6023      	str	r3, [r4, #0]
 800627e:	bd38      	pop	{r3, r4, r5, pc}
 8006280:	20000894 	.word	0x20000894

08006284 <__malloc_lock>:
 8006284:	4801      	ldr	r0, [pc, #4]	; (800628c <__malloc_lock+0x8>)
 8006286:	f7ff bb15 	b.w	80058b4 <__retarget_lock_acquire_recursive>
 800628a:	bf00      	nop
 800628c:	20000888 	.word	0x20000888

08006290 <__malloc_unlock>:
 8006290:	4801      	ldr	r0, [pc, #4]	; (8006298 <__malloc_unlock+0x8>)
 8006292:	f7ff bb10 	b.w	80058b6 <__retarget_lock_release_recursive>
 8006296:	bf00      	nop
 8006298:	20000888 	.word	0x20000888

0800629c <_read_r>:
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	4d07      	ldr	r5, [pc, #28]	; (80062bc <_read_r+0x20>)
 80062a0:	4604      	mov	r4, r0
 80062a2:	4608      	mov	r0, r1
 80062a4:	4611      	mov	r1, r2
 80062a6:	2200      	movs	r2, #0
 80062a8:	602a      	str	r2, [r5, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	f7fa fe70 	bl	8000f90 <_read>
 80062b0:	1c43      	adds	r3, r0, #1
 80062b2:	d102      	bne.n	80062ba <_read_r+0x1e>
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	b103      	cbz	r3, 80062ba <_read_r+0x1e>
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	20000894 	.word	0x20000894

080062c0 <_init>:
 80062c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c2:	bf00      	nop
 80062c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062c6:	bc08      	pop	{r3}
 80062c8:	469e      	mov	lr, r3
 80062ca:	4770      	bx	lr

080062cc <_fini>:
 80062cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ce:	bf00      	nop
 80062d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062d2:	bc08      	pop	{r3}
 80062d4:	469e      	mov	lr, r3
 80062d6:	4770      	bx	lr
