
STM32F303_TMC2209_StallGuard_threshold.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  08007630  08007630  00017630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b18  08007b18  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08007b18  08007b18  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b18  08007b18  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b18  08007b18  00017b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b1c  08007b1c  00017b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000008c8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000938  20000938  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011bc8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002672  00000000  00000000  00031c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  000342e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dd8  00000000  00000000  000351b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d1bb  00000000  00000000  00035f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000122b8  00000000  00000000  00053143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a9922  00000000  00000000  000653fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010ed1d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004600  00000000  00000000  0010ed70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007618 	.word	0x08007618

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007618 	.word	0x08007618

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <tmc2209_readWriteArray>:
    if (htim == &htim3){ //htim3に設定したタイマー割り込みの時間で発火する
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);//ピンの出力を切り替え
    }
}*/
void tmc2209_readWriteArray(uint8_t channel, uint8_t *data, size_t writeLength, size_t readLength)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	60b9      	str	r1, [r7, #8]
 8000278:	607a      	str	r2, [r7, #4]
 800027a:	603b      	str	r3, [r7, #0]
 800027c:	4603      	mov	r3, r0
 800027e:	73fb      	strb	r3, [r7, #15]
	//set your uart read write
	//UART_readWrite(channelToUART(channel), data, writeLength, readLength);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8000280:	480d      	ldr	r0, [pc, #52]	; (80002b8 <tmc2209_readWriteArray+0x48>)
 8000282:	f004 fe7d 	bl	8004f80 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart1, data, writeLength,100);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	b29a      	uxth	r2, r3
 800028a:	2364      	movs	r3, #100	; 0x64
 800028c:	68b9      	ldr	r1, [r7, #8]
 800028e:	480a      	ldr	r0, [pc, #40]	; (80002b8 <tmc2209_readWriteArray+0x48>)
 8000290:	f004 f956 	bl	8004540 <HAL_UART_Transmit>

	if(readLength > 0){
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d009      	beq.n	80002ae <tmc2209_readWriteArray+0x3e>
		HAL_HalfDuplex_EnableReceiver(&huart1);
 800029a:	4807      	ldr	r0, [pc, #28]	; (80002b8 <tmc2209_readWriteArray+0x48>)
 800029c:	f004 fec2 	bl	8005024 <HAL_HalfDuplex_EnableReceiver>
		HAL_UART_Receive(&huart1, data, readLength, 100);
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	2364      	movs	r3, #100	; 0x64
 80002a6:	68b9      	ldr	r1, [r7, #8]
 80002a8:	4803      	ldr	r0, [pc, #12]	; (80002b8 <tmc2209_readWriteArray+0x48>)
 80002aa:	f004 f9dd 	bl	8004668 <HAL_UART_Receive>
	}
}
 80002ae:	bf00      	nop
 80002b0:	3710      	adds	r7, #16
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	20000124 	.word	0x20000124

080002bc <tmc2209_CRC8>:

uint8_t tmc2209_CRC8(uint8_t *data, size_t length)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	6039      	str	r1, [r7, #0]
	return TMC2209_CRC(data, length);
 80002c6:	2201      	movs	r2, #1
 80002c8:	6839      	ldr	r1, [r7, #0]
 80002ca:	6878      	ldr	r0, [r7, #4]
 80002cc:	f005 fe0c 	bl	8005ee8 <tmc_CRC8>
 80002d0:	4603      	mov	r3, r0
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <reset>:

static uint8_t reset()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	//StepDir_init(STEPDIR_PRECISION);
	//StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.DIAG);

	return tmc2209_reset(&TMC2209);
 80002e0:	4802      	ldr	r0, [pc, #8]	; (80002ec <reset+0x10>)
 80002e2:	f006 f839 	bl	8006358 <tmc2209_reset>
 80002e6:	4603      	mov	r3, r0
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	2000022c 	.word	0x2000022c

080002f0 <restore>:

static uint8_t restore()
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	return tmc2209_restore(&TMC2209);
 80002f4:	4802      	ldr	r0, [pc, #8]	; (8000300 <restore+0x10>)
 80002f6:	f006 f869 	bl	80063cc <tmc2209_restore>
 80002fa:	4603      	mov	r3, r0
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	2000022c 	.word	0x2000022c

08000304 <TMC2209_INIT>:


void TMC2209_INIT()
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 800030a:	2201      	movs	r2, #1
 800030c:	2101      	movs	r1, #1
 800030e:	2007      	movs	r0, #7
 8000310:	f005 fd32 	bl	8005d78 <tmc_fillCRC8Table>

	TMC2209_config.reset = reset;
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <TMC2209_INIT+0x38>)
 8000316:	4a0a      	ldr	r2, [pc, #40]	; (8000340 <TMC2209_INIT+0x3c>)
 8000318:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	TMC2209_config.restore = restore;
 800031c:	4b07      	ldr	r3, [pc, #28]	; (800033c <TMC2209_INIT+0x38>)
 800031e:	4a09      	ldr	r2, [pc, #36]	; (8000344 <TMC2209_INIT+0x40>)
 8000320:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	tmc2209_init(&TMC2209, 0, 0, &TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 8000324:	4b08      	ldr	r3, [pc, #32]	; (8000348 <TMC2209_INIT+0x44>)
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	4b04      	ldr	r3, [pc, #16]	; (800033c <TMC2209_INIT+0x38>)
 800032a:	2200      	movs	r2, #0
 800032c:	2100      	movs	r1, #0
 800032e:	4807      	ldr	r0, [pc, #28]	; (800034c <TMC2209_INIT+0x48>)
 8000330:	f005 ff2e 	bl	8006190 <tmc2209_init>


	//restore();
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	200004b4 	.word	0x200004b4
 8000340:	080002dd 	.word	0x080002dd
 8000344:	080002f1 	.word	0x080002f1
 8000348:	080077c8 	.word	0x080077c8
 800034c:	2000022c 	.word	0x2000022c

08000350 <currentcheck>:

	return &TMC2209;
}
uint8_t currentchekflag=0;
uint8_t currentcompareflag=0;
void currentcheck(){
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 65500);
	int32_t current_value = 0;
 8000356:	2300      	movs	r3, #0
 8000358:	60fb      	str	r3, [r7, #12]
		int32_t DIAG_value = 0;
 800035a:	2300      	movs	r3, #0
 800035c:	60bb      	str	r3, [r7, #8]
		int32_t tstep_value = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	607b      	str	r3, [r7, #4]
		int32_t SGTHRS_value = 0;
 8000362:	2300      	movs	r3, #0
 8000364:	603b      	str	r3, [r7, #0]
	//
		tstep_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_TSTEP, TMC2209_TSTEP_MASK, TMC2209_TSTEP_SHIFT);
 8000366:	2112      	movs	r1, #18
 8000368:	480f      	ldr	r0, [pc, #60]	; (80003a8 <currentcheck+0x58>)
 800036a:	f005 feae 	bl	80060ca <tmc2209_readInt>
 800036e:	4603      	mov	r3, r0
 8000370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000374:	607b      	str	r3, [r7, #4]
		printf("tstep: %ld\r\n", tstep_value);
 8000376:	6879      	ldr	r1, [r7, #4]
 8000378:	480c      	ldr	r0, [pc, #48]	; (80003ac <currentcheck+0x5c>)
 800037a:	f006 f873 	bl	8006464 <iprintf>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800037e:	f001 f853 	bl	8001428 <HAL_GetTick>
 8000382:	4603      	mov	r3, r0
 8000384:	4619      	mov	r1, r3
 8000386:	4808      	ldr	r0, [pc, #32]	; (80003a8 <currentcheck+0x58>)
 8000388:	f005 ffd5 	bl	8006336 <tmc2209_periodicJob>

//		SGTHRS_value = tmc2209_readInt(&TMC2209, TMC2209_SGTHRS);
//		printf("SGTHRS: %d\r\n", SGTHRS_value);

		current_value=tmc2209_readInt(&TMC2209, TMC2209_SG_RESULT);	//保持トルクの設定
 800038c:	2141      	movs	r1, #65	; 0x41
 800038e:	4806      	ldr	r0, [pc, #24]	; (80003a8 <currentcheck+0x58>)
 8000390:	f005 fe9b 	bl	80060ca <tmc2209_readInt>
 8000394:	60f8      	str	r0, [r7, #12]
		printf("SG_RESULT : %ld\r\n", current_value);
 8000396:	68f9      	ldr	r1, [r7, #12]
 8000398:	4805      	ldr	r0, [pc, #20]	; (80003b0 <currentcheck+0x60>)
 800039a:	f006 f863 	bl	8006464 <iprintf>
	//	DIAG_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_DIAG_MASK, TMC2209_DIAG_SHIFT);
	//	printf("DIAG : %ld\r\n", DIAG_value);
	//	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
		//currentcompareflag=1;

}
 800039e:	bf00      	nop
 80003a0:	3710      	adds	r7, #16
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	2000022c 	.word	0x2000022c
 80003ac:	08007630 	.word	0x08007630
 80003b0:	08007640 	.word	0x08007640

080003b4 <Step0>:
//				current_stall = 1;
//			}
//		}
//}

void Step0(){                                       //step pin
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	//pull+

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2120      	movs	r1, #32
 80003bc:	4804      	ldr	r0, [pc, #16]	; (80003d0 <Step0+0x1c>)
 80003be:	f001 fb5d 	bl	8001a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80003c2:	2201      	movs	r2, #1
 80003c4:	2120      	movs	r1, #32
 80003c6:	4802      	ldr	r0, [pc, #8]	; (80003d0 <Step0+0x1c>)
 80003c8:	f001 fb58 	bl	8001a7c <HAL_GPIO_WritePin>
}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	48000400 	.word	0x48000400

080003d4 <Dir0>:

void Dir0(int dir){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dir); //Dir0関数にdirピンを指定して格納
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	461a      	mov	r2, r3
 80003e2:	2110      	movs	r1, #16
 80003e4:	4803      	ldr	r0, [pc, #12]	; (80003f4 <Dir0+0x20>)
 80003e6:	f001 fb49 	bl	8001a7c <HAL_GPIO_WritePin>
}
 80003ea:	bf00      	nop
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	48000400 	.word	0x48000400

080003f8 <motorrotate>:

uint8_t remainingstepperFlag = 0;
uint8_t stopflag = 0;
void motorrotate(int absolute_steps){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	volatile stepperInfo* si = &stepper[0];	//stepper[0]のアドレスをstepperInfo* si に代入
 8000400:	4b1d      	ldr	r3, [pc, #116]	; (8000478 <motorrotate+0x80>)
 8000402:	60fb      	str	r3, [r7, #12]
	int steps = absolute_steps - si->stepPosition;
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	1ad3      	subs	r3, r2, r3
 800040c:	60bb      	str	r3, [r7, #8]
//	printf("steps:%d\r\n",steps);
	if(steps == 0){
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d02c      	beq.n	800046e <motorrotate+0x76>
					return;
				}
	si->dirFunc( steps < 0 ? 1 : 0);	//Dir0のプラスマイナスの判定して0より小さいなら1、大きいなら0をHAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dir)のdirにいれる
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	689b      	ldr	r3, [r3, #8]
 8000418:	68ba      	ldr	r2, [r7, #8]
 800041a:	0fd2      	lsrs	r2, r2, #31
 800041c:	4610      	mov	r0, r2
 800041e:	4798      	blx	r3
	si->dir = steps > 0 ? 1:-1;			//stepsが0より大きければ1、小さければ２をdirにいれる
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	2b00      	cmp	r3, #0
 8000424:	dd01      	ble.n	800042a <motorrotate+0x32>
 8000426:	2201      	movs	r2, #1
 8000428:	e001      	b.n	800042e <motorrotate+0x36>
 800042a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	61da      	str	r2, [r3, #28]
	si->totalSteps = abs(steps);	//stepsの値をアブソリュートでtotalstepsに格納
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	2b00      	cmp	r3, #0
 8000436:	bfb8      	it	lt
 8000438:	425b      	neglt	r3, r3
 800043a:	461a      	mov	r2, r3
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	631a      	str	r2, [r3, #48]	; 0x30
	si->di = si->acceleration;      //変数*siがメンバc0にアクセス.した値に変数*siがメンバaccelerationにアクセス.した値を代入する
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	edd3 7a00 	vldr	s15, [r3]
 8000446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800044a:	ee17 2a90 	vmov	r2, s15
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	645a      	str	r2, [r3, #68]	; 0x44
	si->stepCount = 0;
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	2200      	movs	r2, #0
 8000456:	649a      	str	r2, [r3, #72]	; 0x48
	si->n = 0;
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	2200      	movs	r2, #0
 800045c:	63da      	str	r2, [r3, #60]	; 0x3c
//	printf("steps:%d\r\n",steps);
	remainingstepperFlag |= 1;
 800045e:	4b07      	ldr	r3, [pc, #28]	; (800047c <motorrotate+0x84>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	f043 0301 	orr.w	r3, r3, #1
 8000466:	b2da      	uxtb	r2, r3
 8000468:	4b04      	ldr	r3, [pc, #16]	; (800047c <motorrotate+0x84>)
 800046a:	701a      	strb	r2, [r3, #0]
 800046c:	e000      	b.n	8000470 <motorrotate+0x78>
					return;
 800046e:	bf00      	nop
}
 8000470:	3710      	adds	r7, #16
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	200006c8 	.word	0x200006c8
 800047c:	20000719 	.word	0x20000719

08000480 <setNextInterruptInterval>:
volatile uint8_t nextStepperFlag = 0;
void setNextInterruptInterval(){
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
	unsigned int mind = 999999;
 8000486:	4b1a      	ldr	r3, [pc, #104]	; (80004f0 <setNextInterruptInterval+0x70>)
 8000488:	607b      	str	r3, [r7, #4]
	if( (remainingstepperFlag) && stepper[0].di < mind ){
 800048a:	4b1a      	ldr	r3, [pc, #104]	; (80004f4 <setNextInterruptInterval+0x74>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d007      	beq.n	80004a2 <setNextInterruptInterval+0x22>
 8000492:	4b19      	ldr	r3, [pc, #100]	; (80004f8 <setNextInterruptInterval+0x78>)
 8000494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	429a      	cmp	r2, r3
 800049a:	d902      	bls.n	80004a2 <setNextInterruptInterval+0x22>
		mind = stepper[0].di;		//diに格納されているの(acceleration)を読み込む
 800049c:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <setNextInterruptInterval+0x78>)
 800049e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004a0:	607b      	str	r3, [r7, #4]
	}
	nextStepperFlag = 0;
 80004a2:	4b16      	ldr	r3, [pc, #88]	; (80004fc <setNextInterruptInterval+0x7c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	701a      	strb	r2, [r3, #0]
	if( 1 && stepper[0].di == mind ){
 80004a8:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <setNextInterruptInterval+0x78>)
 80004aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	429a      	cmp	r2, r3
 80004b0:	d107      	bne.n	80004c2 <setNextInterruptInterval+0x42>
		nextStepperFlag |= 1;
 80004b2:	4b12      	ldr	r3, [pc, #72]	; (80004fc <setNextInterruptInterval+0x7c>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	b2da      	uxtb	r2, r3
 80004be:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <setNextInterruptInterval+0x7c>)
 80004c0:	701a      	strb	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);		//mindにコンペアを設定
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <setNextInterruptInterval+0x80>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	635a      	str	r2, [r3, #52]	; 0x34
	if (remainingstepperFlag == 0){
 80004ca:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <setNextInterruptInterval+0x74>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d104      	bne.n	80004dc <setNextInterruptInterval+0x5c>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <setNextInterruptInterval+0x80>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80004da:	635a      	str	r2, [r3, #52]	; 0x34
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <setNextInterruptInterval+0x80>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	635a      	str	r2, [r3, #52]	; 0x34
	//printf("nownompare:%d\r\n",mind);


}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	000f423f 	.word	0x000f423f
 80004f4:	20000719 	.word	0x20000719
 80004f8:	200006c8 	.word	0x200006c8
 80004fc:	2000071a 	.word	0x2000071a
 8000500:	200000d8 	.word	0x200000d8

08000504 <rotationalprocess>:
void rotationalprocess(){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);
 800050a:	4b23      	ldr	r3, [pc, #140]	; (8000598 <rotationalprocess+0x94>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8000512:	635a      	str	r2, [r3, #52]	; 0x34
//	int32_t current_value = 0;
//	current_value=tmc2209_readInt(&TMC2209, TMC2209_SG_RESULT);	//保持トルクの設定
//	printf("SG_RESULT : %ld\r\n", current_value);
	volatile stepperInfo* s = &stepper[0];
 8000514:	4b21      	ldr	r3, [pc, #132]	; (800059c <rotationalprocess+0x98>)
 8000516:	607b      	str	r3, [r7, #4]
		if( (s->stepCount) < (s->totalSteps)&& !(current_stall) ){		//1周ごとにカウントしたstepCountがabs(steps)より小さかったら==動作が終了するまで
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000520:	429a      	cmp	r2, r3
 8000522:	d21f      	bcs.n	8000564 <rotationalprocess+0x60>
 8000524:	4b1e      	ldr	r3, [pc, #120]	; (80005a0 <rotationalprocess+0x9c>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d11b      	bne.n	8000564 <rotationalprocess+0x60>
				s->stepFunc();							//stepをOFF ONとする
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	4798      	blx	r3
				s->stepCount++;							//カウント
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000536:	1c5a      	adds	r2, r3, #1
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	649a      	str	r2, [r3, #72]	; 0x48
				s->stepPosition += s->dir;		//dir(+もしくはー(dirの向き）を加算してstepPositionに格納
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	69da      	ldr	r2, [r3, #28]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	441a      	add	r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	619a      	str	r2, [r3, #24]
				if ( (s->stepCount) >= (s->totalSteps) ){	//stepCountがtotalStepsを超えたとき、remainingstepperFlagを
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	429a      	cmp	r2, r3
 8000554:	d306      	bcc.n	8000564 <rotationalprocess+0x60>
					remainingstepperFlag &= ~1;
 8000556:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <rotationalprocess+0xa0>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	f023 0301 	bic.w	r3, r3, #1
 800055e:	b2da      	uxtb	r2, r3
 8000560:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <rotationalprocess+0xa0>)
 8000562:	701a      	strb	r2, [r3, #0]
				}
		}
	volatile checkerInfo* t = &currentget[0];
 8000564:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <rotationalprocess+0xa4>)
 8000566:	603b      	str	r3, [r7, #0]
	t->checkcount++;
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	1c5a      	adds	r2, r3, #1
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	601a      	str	r2, [r3, #0]
	if(t->checkcount==2500&&remainingstepperFlag==1){
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800057a:	4293      	cmp	r3, r2
 800057c:	d108      	bne.n	8000590 <rotationalprocess+0x8c>
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <rotationalprocess+0xa0>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d104      	bne.n	8000590 <rotationalprocess+0x8c>
		currentcheck();
 8000586:	f7ff fee3 	bl	8000350 <currentcheck>
		t->checkcount=0;
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
	}

}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	200000d8 	.word	0x200000d8
 800059c:	200006c8 	.word	0x200006c8
 80005a0:	20000718 	.word	0x20000718
 80005a4:	20000719 	.word	0x20000719
 80005a8:	20000714 	.word	0x20000714

080005ac <HAL_TIM_OC_DelayElapsedCallback>:
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){      //指定したコンペアを超えた時発火
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	//HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
	if(htim==&htim3){
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d107      	bne.n	80005cc <HAL_TIM_OC_DelayElapsedCallback+0x20>
		rotationalprocess();
 80005bc:	f7ff ffa2 	bl	8000504 <rotationalprocess>
		setNextInterruptInterval();
 80005c0:	f7ff ff5e 	bl	8000480 <setNextInterruptInterval>
		__HAL_TIM_SET_COUNTER(&htim3, 0);			//カウンター0
 80005c4:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2200      	movs	r2, #0
 80005ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000d8 	.word	0x200000d8

080005d8 <runAndWait>:

void runAndWait(){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	setNextInterruptInterval();
 80005dc:	f7ff ff50 	bl	8000480 <setNextInterruptInterval>
//	currentcheck();
	while(remainingstepperFlag);
 80005e0:	bf00      	nop
 80005e2:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <runAndWait+0x18>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1fb      	bne.n	80005e2 <runAndWait+0xa>
}
 80005ea:	bf00      	nop
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000719 	.word	0x20000719

080005f4 <TMCsetup>:
//{
//    if (htim == &htim2){
//		currentcheck();
//    }
//}
void TMCsetup(){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b090      	sub	sp, #64	; 0x40
 80005f8:	af00      	add	r7, sp, #0
	int32_t mstep_value = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t toff_value = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t microstep_value = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t IRUN_value = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t IHOLD_value = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t IHOLDDELAY_value= 0;
 800060e:	2300      	movs	r3, #0
 8000610:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t buffer = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t stallgard_setup_value=0;
 8000616:	2300      	movs	r3, #0
 8000618:	623b      	str	r3, [r7, #32]
	int32_t TCOOLTHRS_value=0;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]
	int32_t buffer_TPWMTHRS=0;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
	int32_t TPWMTHRS_value=0;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
	int32_t SEMIN_value=0;
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
	int32_t SEMAX_value=0;
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
	int32_t SEIMIN_scale_value=0;
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
	int32_t RSENSE_value=0;
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
	int32_t SEDN_value=0;
 8000636:	2300      	movs	r3, #0
 8000638:	603b      	str	r3, [r7, #0]
//	FCLKTRIM_scale_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_FACTORY_CONF, TMC2209_FCLKTRIM_MASK, TMC2209_FCLKTRIM_SHIFT);
//	FCLKTRIM_scale_value=31;
//	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_FACTORY_CONF, TMC2209_FCLKTRIM_MASK, TMC2209_FCLKTRIM_SHIFT, FCLKTRIM_scale_value);
//	printf("FCLKTRIM: %ld\r\n", FCLKTRIM_scale_value);

	IRUN_value = 18;
 800063a:	2312      	movs	r3, #18
 800063c:	633b      	str	r3, [r7, #48]	; 0x30
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT, IRUN_value);	//実行電流
 800063e:	2110      	movs	r1, #16
 8000640:	48c8      	ldr	r0, [pc, #800]	; (8000964 <TMCsetup+0x370>)
 8000642:	f005 fd42 	bl	80060ca <tmc2209_readInt>
 8000646:	4603      	mov	r3, r0
 8000648:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800064c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800064e:	021b      	lsls	r3, r3, #8
 8000650:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8000654:	4313      	orrs	r3, r2
 8000656:	461a      	mov	r2, r3
 8000658:	2110      	movs	r1, #16
 800065a:	48c2      	ldr	r0, [pc, #776]	; (8000964 <TMCsetup+0x370>)
 800065c:	f005 fce5 	bl	800602a <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000660:	f000 fee2 	bl	8001428 <HAL_GetTick>
 8000664:	4603      	mov	r3, r0
 8000666:	4619      	mov	r1, r3
 8000668:	48be      	ldr	r0, [pc, #760]	; (8000964 <TMCsetup+0x370>)
 800066a:	f005 fe64 	bl	8006336 <tmc2209_periodicJob>
	HAL_Delay(100);
 800066e:	2064      	movs	r0, #100	; 0x64
 8000670:	f000 fee6 	bl	8001440 <HAL_Delay>
	IHOLD_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 8000674:	2110      	movs	r1, #16
 8000676:	48bb      	ldr	r0, [pc, #748]	; (8000964 <TMCsetup+0x370>)
 8000678:	f005 fd27 	bl	80060ca <tmc2209_readInt>
 800067c:	4603      	mov	r3, r0
 800067e:	121b      	asrs	r3, r3, #8
 8000680:	f003 031f 	and.w	r3, r3, #31
 8000684:	62fb      	str	r3, [r7, #44]	; 0x2c
	printf("IRUN: %ld\r\n", IRUN_value);
 8000686:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000688:	48b7      	ldr	r0, [pc, #732]	; (8000968 <TMCsetup+0x374>)
 800068a:	f005 feeb 	bl	8006464 <iprintf>

	IHOLD_value=5;																							//モーター待機時の電流の設定
 800068e:	2305      	movs	r3, #5
 8000690:	62fb      	str	r3, [r7, #44]	; 0x2c
	TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, IHOLD_value);
 8000692:	2110      	movs	r1, #16
 8000694:	48b3      	ldr	r0, [pc, #716]	; (8000964 <TMCsetup+0x370>)
 8000696:	f005 fd18 	bl	80060ca <tmc2209_readInt>
 800069a:	4603      	mov	r3, r0
 800069c:	f023 021f 	bic.w	r2, r3, #31
 80006a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a2:	f003 031f 	and.w	r3, r3, #31
 80006a6:	4313      	orrs	r3, r2
 80006a8:	461a      	mov	r2, r3
 80006aa:	2110      	movs	r1, #16
 80006ac:	48ad      	ldr	r0, [pc, #692]	; (8000964 <TMCsetup+0x370>)
 80006ae:	f005 fcbc 	bl	800602a <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80006b2:	f000 feb9 	bl	8001428 <HAL_GetTick>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4619      	mov	r1, r3
 80006ba:	48aa      	ldr	r0, [pc, #680]	; (8000964 <TMCsetup+0x370>)
 80006bc:	f005 fe3b 	bl	8006336 <tmc2209_periodicJob>
	HAL_Delay(100);
 80006c0:	2064      	movs	r0, #100	; 0x64
 80006c2:	f000 febd 	bl	8001440 <HAL_Delay>
	IHOLD_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);	//保持電流
 80006c6:	2110      	movs	r1, #16
 80006c8:	48a6      	ldr	r0, [pc, #664]	; (8000964 <TMCsetup+0x370>)
 80006ca:	f005 fcfe 	bl	80060ca <tmc2209_readInt>
 80006ce:	4603      	mov	r3, r0
 80006d0:	f003 031f 	and.w	r3, r3, #31
 80006d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	printf("IHOLD: %ld\r\n", IHOLD_value);
 80006d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80006d8:	48a4      	ldr	r0, [pc, #656]	; (800096c <TMCsetup+0x378>)
 80006da:	f005 fec3 	bl	8006464 <iprintf>

	mstep_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK,TMC2209_MSTEP_REG_SELECT_SHIFT);	//uartでのmicrostepの有効化
 80006de:	2100      	movs	r1, #0
 80006e0:	48a0      	ldr	r0, [pc, #640]	; (8000964 <TMCsetup+0x370>)
 80006e2:	f005 fcf2 	bl	80060ca <tmc2209_readInt>
 80006e6:	4603      	mov	r3, r0
 80006e8:	11db      	asrs	r3, r3, #7
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	printf("mstep_before : %ld\r\n", mstep_value);
 80006f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80006f2:	489f      	ldr	r0, [pc, #636]	; (8000970 <TMCsetup+0x37c>)
 80006f4:	f005 feb6 	bl	8006464 <iprintf>
	mstep_value = 1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT,mstep_value);
 80006fc:	2100      	movs	r1, #0
 80006fe:	4899      	ldr	r0, [pc, #612]	; (8000964 <TMCsetup+0x370>)
 8000700:	f005 fce3 	bl	80060ca <tmc2209_readInt>
 8000704:	4603      	mov	r3, r0
 8000706:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800070a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800070c:	01db      	lsls	r3, r3, #7
 800070e:	b2db      	uxtb	r3, r3
 8000710:	4313      	orrs	r3, r2
 8000712:	461a      	mov	r2, r3
 8000714:	2100      	movs	r1, #0
 8000716:	4893      	ldr	r0, [pc, #588]	; (8000964 <TMCsetup+0x370>)
 8000718:	f005 fc87 	bl	800602a <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800071c:	f000 fe84 	bl	8001428 <HAL_GetTick>
 8000720:	4603      	mov	r3, r0
 8000722:	4619      	mov	r1, r3
 8000724:	488f      	ldr	r0, [pc, #572]	; (8000964 <TMCsetup+0x370>)
 8000726:	f005 fe06 	bl	8006336 <tmc2209_periodicJob>
	mstep_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT);
 800072a:	2100      	movs	r1, #0
 800072c:	488d      	ldr	r0, [pc, #564]	; (8000964 <TMCsetup+0x370>)
 800072e:	f005 fccc 	bl	80060ca <tmc2209_readInt>
 8000732:	4603      	mov	r3, r0
 8000734:	11db      	asrs	r3, r3, #7
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
	printf("mstep_after : %ld\r\n", mstep_value);
 800073c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800073e:	488d      	ldr	r0, [pc, #564]	; (8000974 <TMCsetup+0x380>)
 8000740:	f005 fe90 	bl	8006464 <iprintf>

	toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);	//保持トルクの設定
 8000744:	216c      	movs	r1, #108	; 0x6c
 8000746:	4887      	ldr	r0, [pc, #540]	; (8000964 <TMCsetup+0x370>)
 8000748:	f005 fcbf 	bl	80060ca <tmc2209_readInt>
 800074c:	4603      	mov	r3, r0
 800074e:	f003 030f 	and.w	r3, r3, #15
 8000752:	63bb      	str	r3, [r7, #56]	; 0x38
	printf("toff_before : %ld\r\n", toff_value);
 8000754:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000756:	4888      	ldr	r0, [pc, #544]	; (8000978 <TMCsetup+0x384>)
 8000758:	f005 fe84 	bl	8006464 <iprintf>
	toff_value = 4;
 800075c:	2304      	movs	r3, #4
 800075e:	63bb      	str	r3, [r7, #56]	; 0x38
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT,toff_value);
 8000760:	216c      	movs	r1, #108	; 0x6c
 8000762:	4880      	ldr	r0, [pc, #512]	; (8000964 <TMCsetup+0x370>)
 8000764:	f005 fcb1 	bl	80060ca <tmc2209_readInt>
 8000768:	4603      	mov	r3, r0
 800076a:	f023 020f 	bic.w	r2, r3, #15
 800076e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000770:	f003 030f 	and.w	r3, r3, #15
 8000774:	4313      	orrs	r3, r2
 8000776:	461a      	mov	r2, r3
 8000778:	216c      	movs	r1, #108	; 0x6c
 800077a:	487a      	ldr	r0, [pc, #488]	; (8000964 <TMCsetup+0x370>)
 800077c:	f005 fc55 	bl	800602a <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000780:	f000 fe52 	bl	8001428 <HAL_GetTick>
 8000784:	4603      	mov	r3, r0
 8000786:	4619      	mov	r1, r3
 8000788:	4876      	ldr	r0, [pc, #472]	; (8000964 <TMCsetup+0x370>)
 800078a:	f005 fdd4 	bl	8006336 <tmc2209_periodicJob>
	toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 800078e:	216c      	movs	r1, #108	; 0x6c
 8000790:	4874      	ldr	r0, [pc, #464]	; (8000964 <TMCsetup+0x370>)
 8000792:	f005 fc9a 	bl	80060ca <tmc2209_readInt>
 8000796:	4603      	mov	r3, r0
 8000798:	f003 030f 	and.w	r3, r3, #15
 800079c:	63bb      	str	r3, [r7, #56]	; 0x38
	printf("toff_after : %ld\r\n", toff_value);
 800079e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80007a0:	4876      	ldr	r0, [pc, #472]	; (800097c <TMCsetup+0x388>)
 80007a2:	f005 fe5f 	bl	8006464 <iprintf>

	microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);	//microstepの設定
 80007a6:	216c      	movs	r1, #108	; 0x6c
 80007a8:	486e      	ldr	r0, [pc, #440]	; (8000964 <TMCsetup+0x370>)
 80007aa:	f005 fc8e 	bl	80060ca <tmc2209_readInt>
 80007ae:	4603      	mov	r3, r0
 80007b0:	161b      	asrs	r3, r3, #24
 80007b2:	f003 030f 	and.w	r3, r3, #15
 80007b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007ba:	fa42 f303 	asr.w	r3, r2, r3
 80007be:	637b      	str	r3, [r7, #52]	; 0x34
	printf("microstep_before : %ld\r\n", microstep_value);
 80007c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80007c2:	486f      	ldr	r0, [pc, #444]	; (8000980 <TMCsetup+0x38c>)
 80007c4:	f005 fe4e 	bl	8006464 <iprintf>
	microstep_value = 4;
 80007c8:	2304      	movs	r3, #4
 80007ca:	637b      	str	r3, [r7, #52]	; 0x34
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT,microstep_value);
 80007cc:	216c      	movs	r1, #108	; 0x6c
 80007ce:	4865      	ldr	r0, [pc, #404]	; (8000964 <TMCsetup+0x370>)
 80007d0:	f005 fc7b 	bl	80060ca <tmc2209_readInt>
 80007d4:	4603      	mov	r3, r0
 80007d6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80007da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007dc:	061b      	lsls	r3, r3, #24
 80007de:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80007e2:	4313      	orrs	r3, r2
 80007e4:	461a      	mov	r2, r3
 80007e6:	216c      	movs	r1, #108	; 0x6c
 80007e8:	485e      	ldr	r0, [pc, #376]	; (8000964 <TMCsetup+0x370>)
 80007ea:	f005 fc1e 	bl	800602a <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80007ee:	f000 fe1b 	bl	8001428 <HAL_GetTick>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4619      	mov	r1, r3
 80007f6:	485b      	ldr	r0, [pc, #364]	; (8000964 <TMCsetup+0x370>)
 80007f8:	f005 fd9d 	bl	8006336 <tmc2209_periodicJob>
	microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);
 80007fc:	216c      	movs	r1, #108	; 0x6c
 80007fe:	4859      	ldr	r0, [pc, #356]	; (8000964 <TMCsetup+0x370>)
 8000800:	f005 fc63 	bl	80060ca <tmc2209_readInt>
 8000804:	4603      	mov	r3, r0
 8000806:	161b      	asrs	r3, r3, #24
 8000808:	f003 030f 	and.w	r3, r3, #15
 800080c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000810:	fa42 f303 	asr.w	r3, r2, r3
 8000814:	637b      	str	r3, [r7, #52]	; 0x34
	printf("microstep_after : %ld\r\n", microstep_value);
 8000816:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000818:	485a      	ldr	r0, [pc, #360]	; (8000984 <TMCsetup+0x390>)
 800081a:	f005 fe23 	bl	8006464 <iprintf>

	IHOLDDELAY_value=4;
 800081e:	2304      	movs	r3, #4
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT, IHOLDDELAY_value);
 8000822:	2110      	movs	r1, #16
 8000824:	484f      	ldr	r0, [pc, #316]	; (8000964 <TMCsetup+0x370>)
 8000826:	f005 fc50 	bl	80060ca <tmc2209_readInt>
 800082a:	4603      	mov	r3, r0
 800082c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8000830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000832:	041b      	lsls	r3, r3, #16
 8000834:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000838:	4313      	orrs	r3, r2
 800083a:	461a      	mov	r2, r3
 800083c:	2110      	movs	r1, #16
 800083e:	4849      	ldr	r0, [pc, #292]	; (8000964 <TMCsetup+0x370>)
 8000840:	f005 fbf3 	bl	800602a <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000844:	f000 fdf0 	bl	8001428 <HAL_GetTick>
 8000848:	4603      	mov	r3, r0
 800084a:	4619      	mov	r1, r3
 800084c:	4845      	ldr	r0, [pc, #276]	; (8000964 <TMCsetup+0x370>)
 800084e:	f005 fd72 	bl	8006336 <tmc2209_periodicJob>
	IHOLDDELAY_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT);
 8000852:	2110      	movs	r1, #16
 8000854:	4843      	ldr	r0, [pc, #268]	; (8000964 <TMCsetup+0x370>)
 8000856:	f005 fc38 	bl	80060ca <tmc2209_readInt>
 800085a:	4603      	mov	r3, r0
 800085c:	141b      	asrs	r3, r3, #16
 800085e:	f003 030f 	and.w	r3, r3, #15
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
	printf("IHOLDDELAY: %ld\r\n", IHOLDDELAY_value);
 8000864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000866:	4848      	ldr	r0, [pc, #288]	; (8000988 <TMCsetup+0x394>)
 8000868:	f005 fdfc 	bl	8006464 <iprintf>

	stallgard_setup_value=20;											//SG_RESULTと比較して、
 800086c:	2314      	movs	r3, #20
 800086e:	623b      	str	r3, [r7, #32]
	tmc2209_writeInt(&TMC2209, TMC2209_SGTHRS, stallgard_setup_value);
 8000870:	6a3a      	ldr	r2, [r7, #32]
 8000872:	2140      	movs	r1, #64	; 0x40
 8000874:	483b      	ldr	r0, [pc, #236]	; (8000964 <TMCsetup+0x370>)
 8000876:	f005 fbd8 	bl	800602a <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800087a:	f000 fdd5 	bl	8001428 <HAL_GetTick>
 800087e:	4603      	mov	r3, r0
 8000880:	4619      	mov	r1, r3
 8000882:	4838      	ldr	r0, [pc, #224]	; (8000964 <TMCsetup+0x370>)
 8000884:	f005 fd57 	bl	8006336 <tmc2209_periodicJob>
	stallgard_setup_value = tmc2209_readInt(&TMC2209, TMC2209_SGTHRS);
 8000888:	2140      	movs	r1, #64	; 0x40
 800088a:	4836      	ldr	r0, [pc, #216]	; (8000964 <TMCsetup+0x370>)
 800088c:	f005 fc1d 	bl	80060ca <tmc2209_readInt>
 8000890:	6238      	str	r0, [r7, #32]
	printf("SGTHRS: %ld\r\n", stallgard_setup_value);
 8000892:	6a39      	ldr	r1, [r7, #32]
 8000894:	483d      	ldr	r0, [pc, #244]	; (800098c <TMCsetup+0x398>)
 8000896:	f005 fde5 	bl	8006464 <iprintf>

//	buffer = tmc2209_readInt(&TMC2209, TMC2209_TCOOLTHRS);
	TCOOLTHRS_value=1000;
 800089a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089e:	61fb      	str	r3, [r7, #28]
////				}
////				else
////				{
////					TCOOLTHRS_value = 0x000FFFFF;
////				}
	tmc2209_writeInt(&TMC2209, TMC2209_TCOOLTHRS, TCOOLTHRS_value);
 80008a0:	69fa      	ldr	r2, [r7, #28]
 80008a2:	2114      	movs	r1, #20
 80008a4:	482f      	ldr	r0, [pc, #188]	; (8000964 <TMCsetup+0x370>)
 80008a6:	f005 fbc0 	bl	800602a <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80008aa:	f000 fdbd 	bl	8001428 <HAL_GetTick>
 80008ae:	4603      	mov	r3, r0
 80008b0:	4619      	mov	r1, r3
 80008b2:	482c      	ldr	r0, [pc, #176]	; (8000964 <TMCsetup+0x370>)
 80008b4:	f005 fd3f 	bl	8006336 <tmc2209_periodicJob>
	printf("TCOOLTHRS: %ld\r\n", TCOOLTHRS_value);
 80008b8:	69f9      	ldr	r1, [r7, #28]
 80008ba:	4835      	ldr	r0, [pc, #212]	; (8000990 <TMCsetup+0x39c>)
 80008bc:	f005 fdd2 	bl	8006464 <iprintf>
//	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
//	printf("TPWMTHRS: %ld\r\n", TPWMTHRS_value);

	//SEMIN_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT);

	SEMIN_value=5;
 80008c0:	2305      	movs	r3, #5
 80008c2:	613b      	str	r3, [r7, #16]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT, SEMIN_value);
 80008c4:	2142      	movs	r1, #66	; 0x42
 80008c6:	4827      	ldr	r0, [pc, #156]	; (8000964 <TMCsetup+0x370>)
 80008c8:	f005 fbff 	bl	80060ca <tmc2209_readInt>
 80008cc:	4603      	mov	r3, r0
 80008ce:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	03db      	lsls	r3, r3, #15
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	4313      	orrs	r3, r2
 80008da:	461a      	mov	r2, r3
 80008dc:	2142      	movs	r1, #66	; 0x42
 80008de:	4821      	ldr	r0, [pc, #132]	; (8000964 <TMCsetup+0x370>)
 80008e0:	f005 fba3 	bl	800602a <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80008e4:	f000 fda0 	bl	8001428 <HAL_GetTick>
 80008e8:	4603      	mov	r3, r0
 80008ea:	4619      	mov	r1, r3
 80008ec:	481d      	ldr	r0, [pc, #116]	; (8000964 <TMCsetup+0x370>)
 80008ee:	f005 fd22 	bl	8006336 <tmc2209_periodicJob>
	printf("SEMIN: %ld\r\n", SEMIN_value);
 80008f2:	6939      	ldr	r1, [r7, #16]
 80008f4:	4827      	ldr	r0, [pc, #156]	; (8000994 <TMCsetup+0x3a0>)
 80008f6:	f005 fdb5 	bl	8006464 <iprintf>
//
//	//SEMAX_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_COOLCONF, TMC2209_SEMAX_MASK, TMC2209_SEMAX_SHIFT);
	SEMAX_value = 2;
 80008fa:	2302      	movs	r3, #2
 80008fc:	60fb      	str	r3, [r7, #12]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT, SEMIN_value);
 80008fe:	2142      	movs	r1, #66	; 0x42
 8000900:	4818      	ldr	r0, [pc, #96]	; (8000964 <TMCsetup+0x370>)
 8000902:	f005 fbe2 	bl	80060ca <tmc2209_readInt>
 8000906:	4603      	mov	r3, r0
 8000908:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	03db      	lsls	r3, r3, #15
 8000910:	b29b      	uxth	r3, r3
 8000912:	4313      	orrs	r3, r2
 8000914:	461a      	mov	r2, r3
 8000916:	2142      	movs	r1, #66	; 0x42
 8000918:	4812      	ldr	r0, [pc, #72]	; (8000964 <TMCsetup+0x370>)
 800091a:	f005 fb86 	bl	800602a <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800091e:	f000 fd83 	bl	8001428 <HAL_GetTick>
 8000922:	4603      	mov	r3, r0
 8000924:	4619      	mov	r1, r3
 8000926:	480f      	ldr	r0, [pc, #60]	; (8000964 <TMCsetup+0x370>)
 8000928:	f005 fd05 	bl	8006336 <tmc2209_periodicJob>
	printf("SEMAX: %ld\r\n", SEMAX_value);
 800092c:	68f9      	ldr	r1, [r7, #12]
 800092e:	481a      	ldr	r0, [pc, #104]	; (8000998 <TMCsetup+0x3a4>)
 8000930:	f005 fd98 	bl	8006464 <iprintf>

//	SEIMIN_scale_value=1;		//IRUNのスケールを1/4
//	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT, SEIMIN_scale_value);
//	printf("SEIMIN_scal: %ld\r\n", SEIMIN_scale_value);

	SEDN_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_COOLCONF, TMC2209_SEDN_MASK, TMC2209_SEDN_SHIFT);
 8000934:	2142      	movs	r1, #66	; 0x42
 8000936:	480b      	ldr	r0, [pc, #44]	; (8000964 <TMCsetup+0x370>)
 8000938:	f005 fbc7 	bl	80060ca <tmc2209_readInt>
 800093c:	4603      	mov	r3, r0
 800093e:	135b      	asrs	r3, r3, #13
 8000940:	f003 0303 	and.w	r3, r3, #3
 8000944:	603b      	str	r3, [r7, #0]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000946:	f000 fd6f 	bl	8001428 <HAL_GetTick>
 800094a:	4603      	mov	r3, r0
 800094c:	4619      	mov	r1, r3
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <TMCsetup+0x370>)
 8000950:	f005 fcf1 	bl	8006336 <tmc2209_periodicJob>
	printf("SEDN: %ld\r\n", SEDN_value);
 8000954:	6839      	ldr	r1, [r7, #0]
 8000956:	4811      	ldr	r0, [pc, #68]	; (800099c <TMCsetup+0x3a8>)
 8000958:	f005 fd84 	bl	8006464 <iprintf>

}
 800095c:	bf00      	nop
 800095e:	3740      	adds	r7, #64	; 0x40
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2000022c 	.word	0x2000022c
 8000968:	08007654 	.word	0x08007654
 800096c:	08007660 	.word	0x08007660
 8000970:	08007670 	.word	0x08007670
 8000974:	08007688 	.word	0x08007688
 8000978:	0800769c 	.word	0x0800769c
 800097c:	080076b0 	.word	0x080076b0
 8000980:	080076c4 	.word	0x080076c4
 8000984:	080076e0 	.word	0x080076e0
 8000988:	080076f8 	.word	0x080076f8
 800098c:	0800770c 	.word	0x0800770c
 8000990:	0800771c 	.word	0x0800771c
 8000994:	08007730 	.word	0x08007730
 8000998:	08007740 	.word	0x08007740
 800099c:	08007750 	.word	0x08007750

080009a0 <HAL_UART_RxCpltCallback>:

uint8_t uartflag1=0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	uartflag1 = 1;
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <HAL_UART_RxCpltCallback+0x1c>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
	printf("uart_timer\r\n");
 80009ae:	4804      	ldr	r0, [pc, #16]	; (80009c0 <HAL_UART_RxCpltCallback+0x20>)
 80009b0:	f005 fdde 	bl	8006570 <puts>
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	2000071b 	.word	0x2000071b
 80009c0:	0800775c 	.word	0x0800775c

080009c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c4:	b5b0      	push	{r4, r5, r7, lr}
 80009c6:	b092      	sub	sp, #72	; 0x48
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 80009ca:	4b51      	ldr	r3, [pc, #324]	; (8000b10 <main+0x14c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f005 fdd4 	bl	8006580 <setbuf>
	//uint8_t buffer[256];
	//char rxbuf[1];
	char start[] ="1:front,2:back\r\n";
 80009d8:	4b4e      	ldr	r3, [pc, #312]	; (8000b14 <main+0x150>)
 80009da:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80009de:	461d      	mov	r5, r3
 80009e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e4:	682b      	ldr	r3, [r5, #0]
 80009e6:	7023      	strb	r3, [r4, #0]
	char front[] ="front turn\r\n";
 80009e8:	4b4b      	ldr	r3, [pc, #300]	; (8000b18 <main+0x154>)
 80009ea:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80009ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009f0:	c407      	stmia	r4!, {r0, r1, r2}
 80009f2:	7023      	strb	r3, [r4, #0]
	char back[] ="back turn\r\n";
 80009f4:	4a49      	ldr	r2, [pc, #292]	; (8000b1c <main+0x158>)
 80009f6:	f107 0318 	add.w	r3, r7, #24
 80009fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80009fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char nonans[] ="Not Understand \r\n";
 8000a00:	4b47      	ldr	r3, [pc, #284]	; (8000b20 <main+0x15c>)
 8000a02:	1d3c      	adds	r4, r7, #4
 8000a04:	461d      	mov	r5, r3
 8000a06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a0a:	682b      	ldr	r3, [r5, #0]
 8000a0c:	8023      	strh	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0e:	f000 fcb1 	bl	8001374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a12:	f000 f89b 	bl	8000b4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a16:	f000 fa3b 	bl	8000e90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a1a:	f000 fa09 	bl	8000e30 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000a1e:	f000 f9d7 	bl	8000dd0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000a22:	f000 f95f 	bl	8000ce4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000a26:	f000 f8e9 	bl	8000bfc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //int getserial=0;
  TMC2209_INIT();
 8000a2a:	f7ff fc6b 	bl	8000304 <TMC2209_INIT>
  printf("Hello\r\n");
 8000a2e:	483d      	ldr	r0, [pc, #244]	; (8000b24 <main+0x160>)
 8000a30:	f005 fd9e 	bl	8006570 <puts>
  HAL_UART_Transmit(&huart2,(uint8_t *)start,sizeof(start),3000);
 8000a34:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000a38:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a3c:	2211      	movs	r2, #17
 8000a3e:	483a      	ldr	r0, [pc, #232]	; (8000b28 <main+0x164>)
 8000a40:	f003 fd7e 	bl	8004540 <HAL_UART_Transmit>
  //HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000a44:	2100      	movs	r1, #0
 8000a46:	4839      	ldr	r0, [pc, #228]	; (8000b2c <main+0x168>)
 8000a48:	f002 fca6 	bl	8003398 <HAL_TIM_OC_Start_IT>
  //HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);

  stepper[0].dirFunc = Dir0;
 8000a4c:	4b38      	ldr	r3, [pc, #224]	; (8000b30 <main+0x16c>)
 8000a4e:	4a39      	ldr	r2, [pc, #228]	; (8000b34 <main+0x170>)
 8000a50:	609a      	str	r2, [r3, #8]
  stepper[0].stepFunc = Step0;
 8000a52:	4b37      	ldr	r3, [pc, #220]	; (8000b30 <main+0x16c>)
 8000a54:	4a38      	ldr	r2, [pc, #224]	; (8000b38 <main+0x174>)
 8000a56:	60da      	str	r2, [r3, #12]
  stepper[0].acceleration = 100-1;
 8000a58:	4b35      	ldr	r3, [pc, #212]	; (8000b30 <main+0x16c>)
 8000a5a:	4a38      	ldr	r2, [pc, #224]	; (8000b3c <main+0x178>)
 8000a5c:	601a      	str	r2, [r3, #0]
  stepper[0].minStepInterval = 100;
 8000a5e:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <main+0x16c>)
 8000a60:	2264      	movs	r2, #100	; 0x64
 8000a62:	605a      	str	r2, [r3, #4]
  stepper[0].homing = 0;
 8000a64:	4b32      	ldr	r3, [pc, #200]	; (8000b30 <main+0x16c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	741a      	strb	r2, [r3, #16]
  stepper[0].dir_inv = 1;
 8000a6a:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <main+0x16c>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	621a      	str	r2, [r3, #32]
  stepper[0].seeking_vel = 100;
 8000a70:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <main+0x16c>)
 8000a72:	2264      	movs	r2, #100	; 0x64
 8000a74:	629a      	str	r2, [r3, #40]	; 0x28
  stepper[0].homing_vel = 200;
 8000a76:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <main+0x16c>)
 8000a78:	22c8      	movs	r2, #200	; 0xc8
 8000a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  stepper[0].pull_off = 100;
 8000a7c:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <main+0x16c>)
 8000a7e:	2264      	movs	r2, #100	; 0x64
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
  rxbuf[0]=0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	703b      	strb	r3, [r7, #0]
  uartflag1=0;
 8000a86:	4b2e      	ldr	r3, [pc, #184]	; (8000b40 <main+0x17c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //example read register value
	  //int32_t value = 0;
	  HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4619      	mov	r1, r3
 8000a92:	4825      	ldr	r0, [pc, #148]	; (8000b28 <main+0x164>)
 8000a94:	f003 ff28 	bl	80048e8 <HAL_UART_Receive_IT>
//	  while(uartflag1==0){
//		  ;
//	  }
	  HAL_UART_Transmit(&huart2,(uint8_t *)rxbuf,sizeof(rxbuf),3000);
 8000a98:	4639      	mov	r1, r7
 8000a9a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4821      	ldr	r0, [pc, #132]	; (8000b28 <main+0x164>)
 8000aa2:	f003 fd4d 	bl	8004540 <HAL_UART_Transmit>
	  if(uartflag1==1){
 8000aa6:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <main+0x17c>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d1ee      	bne.n	8000a8c <main+0xc8>
		  if (rxbuf[0] != 0){
 8000aae:	783b      	ldrb	r3, [r7, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d0eb      	beq.n	8000a8c <main+0xc8>
			  if(rxbuf[0] == '1'){
 8000ab4:	783b      	ldrb	r3, [r7, #0]
 8000ab6:	2b31      	cmp	r3, #49	; 0x31
 8000ab8:	d115      	bne.n	8000ae6 <main+0x122>
				  //HAL_UART_Transmit_IT(&huart2,(uint8_t *)front, sizeof(front));
				  printf("1:start\r\n");
 8000aba:	4822      	ldr	r0, [pc, #136]	; (8000b44 <main+0x180>)
 8000abc:	f005 fd58 	bl	8006570 <puts>
//				  currentcheck();
				  motorrotate(10000);
 8000ac0:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ac4:	f7ff fc98 	bl	80003f8 <motorrotate>
				  //currentcheck();
				  runAndWait();
 8000ac8:	f7ff fd86 	bl	80005d8 <runAndWait>
				  motorrotate(0);
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff fc93 	bl	80003f8 <motorrotate>
				  runAndWait();
 8000ad2:	f7ff fd81 	bl	80005d8 <runAndWait>
				  HAL_Delay(100);
 8000ad6:	2064      	movs	r0, #100	; 0x64
 8000ad8:	f000 fcb2 	bl	8001440 <HAL_Delay>
				  printf("1:end\r\n");
 8000adc:	481a      	ldr	r0, [pc, #104]	; (8000b48 <main+0x184>)
 8000ade:	f005 fd47 	bl	8006570 <puts>
				  rxbuf[0]=0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	703b      	strb	r3, [r7, #0]

			  }
			  if(rxbuf[0] == '2'){
 8000ae6:	783b      	ldrb	r3, [r7, #0]
 8000ae8:	2b32      	cmp	r3, #50	; 0x32
 8000aea:	d104      	bne.n	8000af6 <main+0x132>
				  TMCsetup();
 8000aec:	f7ff fd82 	bl	80005f4 <TMCsetup>
				  rxbuf[0]=0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	703b      	strb	r3, [r7, #0]
 8000af4:	e007      	b.n	8000b06 <main+0x142>

			  }
			  else{
				  HAL_UART_Transmit_IT(&huart2,(uint8_t *)nonans, sizeof(nonans));
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2212      	movs	r2, #18
 8000afa:	4619      	mov	r1, r3
 8000afc:	480a      	ldr	r0, [pc, #40]	; (8000b28 <main+0x164>)
 8000afe:	f003 fe85 	bl	800480c <HAL_UART_Transmit_IT>
				  rxbuf[0]=0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	703b      	strb	r3, [r7, #0]
			  }
			  uartflag1=0;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <main+0x17c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);
 8000b0c:	e7be      	b.n	8000a8c <main+0xc8>
 8000b0e:	bf00      	nop
 8000b10:	2000000c 	.word	0x2000000c
 8000b14:	08007784 	.word	0x08007784
 8000b18:	08007798 	.word	0x08007798
 8000b1c:	080077a8 	.word	0x080077a8
 8000b20:	080077b4 	.word	0x080077b4
 8000b24:	08007768 	.word	0x08007768
 8000b28:	200001a8 	.word	0x200001a8
 8000b2c:	200000d8 	.word	0x200000d8
 8000b30:	200006c8 	.word	0x200006c8
 8000b34:	080003d5 	.word	0x080003d5
 8000b38:	080003b5 	.word	0x080003b5
 8000b3c:	42c60000 	.word	0x42c60000
 8000b40:	2000071b 	.word	0x2000071b
 8000b44:	08007770 	.word	0x08007770
 8000b48:	0800777c 	.word	0x0800777c

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b096      	sub	sp, #88	; 0x58
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b56:	2228      	movs	r2, #40	; 0x28
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f005 fc7a 	bl	8006454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]
 8000b7e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b80:	2302      	movs	r3, #2
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b84:	2301      	movs	r3, #1
 8000b86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b88:	2310      	movs	r3, #16
 8000b8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b90:	2300      	movs	r3, #0
 8000b92:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b94:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b98:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 ffa8 	bl	8001af4 <HAL_RCC_OscConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000baa:	f000 f9e5 	bl	8000f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bae:	230f      	movs	r3, #15
 8000bb0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	2102      	movs	r1, #2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f001 ffd0 	bl	8002b70 <HAL_RCC_ClockConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000bd6:	f000 f9cf 	bl	8000f78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4618      	mov	r0, r3
 8000be6:	f002 f9f9 	bl	8002fdc <HAL_RCCEx_PeriphCLKConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000bf0:	f000 f9c2 	bl	8000f78 <Error_Handler>
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	3758      	adds	r7, #88	; 0x58
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08e      	sub	sp, #56	; 0x38
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]
 8000c2a:	615a      	str	r2, [r3, #20]
 8000c2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ce0 <MX_TIM2_Init+0xe4>)
 8000c30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12800-1;
 8000c36:	4b2a      	ldr	r3, [pc, #168]	; (8000ce0 <MX_TIM2_Init+0xe4>)
 8000c38:	f243 12ff 	movw	r2, #12799	; 0x31ff
 8000c3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3e:	4b28      	ldr	r3, [pc, #160]	; (8000ce0 <MX_TIM2_Init+0xe4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c44:	4b26      	ldr	r3, [pc, #152]	; (8000ce0 <MX_TIM2_Init+0xe4>)
 8000c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4c:	4b24      	ldr	r3, [pc, #144]	; (8000ce0 <MX_TIM2_Init+0xe4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c52:	4b23      	ldr	r3, [pc, #140]	; (8000ce0 <MX_TIM2_Init+0xe4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c58:	4821      	ldr	r0, [pc, #132]	; (8000ce0 <MX_TIM2_Init+0xe4>)
 8000c5a:	f002 fae5 	bl	8003228 <HAL_TIM_Base_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000c64:	f000 f988 	bl	8000f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c72:	4619      	mov	r1, r3
 8000c74:	481a      	ldr	r0, [pc, #104]	; (8000ce0 <MX_TIM2_Init+0xe4>)
 8000c76:	f002 fe63 	bl	8003940 <HAL_TIM_ConfigClockSource>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000c80:	f000 f97a 	bl	8000f78 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000c84:	4816      	ldr	r0, [pc, #88]	; (8000ce0 <MX_TIM2_Init+0xe4>)
 8000c86:	f002 fb26 	bl	80032d6 <HAL_TIM_OC_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000c90:	f000 f972 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480f      	ldr	r0, [pc, #60]	; (8000ce0 <MX_TIM2_Init+0xe4>)
 8000ca4:	f003 fb1c 	bl	80042e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000cae:	f000 f963 	bl	8000f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_TIM2_Init+0xe4>)
 8000cca:	f002 fdbf 	bl	800384c <HAL_TIM_OC_ConfigChannel>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000cd4:	f000 f950 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	3738      	adds	r7, #56	; 0x38
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	2000008c 	.word	0x2000008c

08000ce4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08e      	sub	sp, #56	; 0x38
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d04:	463b      	mov	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]
 8000d12:	615a      	str	r2, [r3, #20]
 8000d14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d16:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <MX_TIM3_Init+0xe4>)
 8000d18:	4a2c      	ldr	r2, [pc, #176]	; (8000dcc <MX_TIM3_Init+0xe8>)
 8000d1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 640-1;
 8000d1c:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <MX_TIM3_Init+0xe4>)
 8000d1e:	f240 227f 	movw	r2, #639	; 0x27f
 8000d22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d24:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <MX_TIM3_Init+0xe4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d2a:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <MX_TIM3_Init+0xe4>)
 8000d2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d32:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <MX_TIM3_Init+0xe4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d38:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <MX_TIM3_Init+0xe4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d3e:	4822      	ldr	r0, [pc, #136]	; (8000dc8 <MX_TIM3_Init+0xe4>)
 8000d40:	f002 fa72 	bl	8003228 <HAL_TIM_Base_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000d4a:	f000 f915 	bl	8000f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	481b      	ldr	r0, [pc, #108]	; (8000dc8 <MX_TIM3_Init+0xe4>)
 8000d5c:	f002 fdf0 	bl	8003940 <HAL_TIM_ConfigClockSource>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000d66:	f000 f907 	bl	8000f78 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000d6a:	4817      	ldr	r0, [pc, #92]	; (8000dc8 <MX_TIM3_Init+0xe4>)
 8000d6c:	f002 fab3 	bl	80032d6 <HAL_TIM_OC_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000d76:	f000 f8ff 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	480f      	ldr	r0, [pc, #60]	; (8000dc8 <MX_TIM3_Init+0xe4>)
 8000d8a:	f003 faa9 	bl	80042e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000d94:	f000 f8f0 	bl	8000f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000da8:	463b      	mov	r3, r7
 8000daa:	2200      	movs	r2, #0
 8000dac:	4619      	mov	r1, r3
 8000dae:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <MX_TIM3_Init+0xe4>)
 8000db0:	f002 fd4c 	bl	800384c <HAL_TIM_OC_ConfigChannel>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000dba:	f000 f8dd 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	3738      	adds	r7, #56	; 0x38
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200000d8 	.word	0x200000d8
 8000dcc:	40000400 	.word	0x40000400

08000dd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <MX_USART1_UART_Init+0x54>)
 8000dd6:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <MX_USART1_UART_Init+0x58>)
 8000dd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <MX_USART1_UART_Init+0x54>)
 8000ddc:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <MX_USART1_UART_Init+0x5c>)
 8000dde:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000de0:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <MX_USART1_UART_Init+0x54>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <MX_USART1_UART_Init+0x54>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dec:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <MX_USART1_UART_Init+0x54>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_USART1_UART_Init+0x54>)
 8000df4:	220c      	movs	r2, #12
 8000df6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df8:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <MX_USART1_UART_Init+0x54>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_USART1_UART_Init+0x54>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <MX_USART1_UART_Init+0x54>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_USART1_UART_Init+0x54>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000e10:	4804      	ldr	r0, [pc, #16]	; (8000e24 <MX_USART1_UART_Init+0x54>)
 8000e12:	f003 fb3f 	bl	8004494 <HAL_HalfDuplex_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8000e1c:	f000 f8ac 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000124 	.word	0x20000124
 8000e28:	40013800 	.word	0x40013800
 8000e2c:	0007a120 	.word	0x0007a120

08000e30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e36:	4a15      	ldr	r2, [pc, #84]	; (8000e8c <MX_USART2_UART_Init+0x5c>)
 8000e38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e74:	f003 fac0 	bl	80043f8 <HAL_UART_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e7e:	f000 f87b 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200001a8 	.word	0x200001a8
 8000e8c:	40004400 	.word	0x40004400

08000e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ea6:	4b28      	ldr	r3, [pc, #160]	; (8000f48 <MX_GPIO_Init+0xb8>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	4a27      	ldr	r2, [pc, #156]	; (8000f48 <MX_GPIO_Init+0xb8>)
 8000eac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eb0:	6153      	str	r3, [r2, #20]
 8000eb2:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <MX_GPIO_Init+0xb8>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <MX_GPIO_Init+0xb8>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	4a21      	ldr	r2, [pc, #132]	; (8000f48 <MX_GPIO_Init+0xb8>)
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec8:	6153      	str	r3, [r2, #20]
 8000eca:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <MX_GPIO_Init+0xb8>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <MX_GPIO_Init+0xb8>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	4a1b      	ldr	r2, [pc, #108]	; (8000f48 <MX_GPIO_Init+0xb8>)
 8000edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee0:	6153      	str	r3, [r2, #20]
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <MX_GPIO_Init+0xb8>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2130      	movs	r1, #48	; 0x30
 8000ef2:	4816      	ldr	r0, [pc, #88]	; (8000f4c <MX_GPIO_Init+0xbc>)
 8000ef4:	f000 fdc2 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ef8:	2330      	movs	r3, #48	; 0x30
 8000efa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	480f      	ldr	r0, [pc, #60]	; (8000f4c <MX_GPIO_Init+0xbc>)
 8000f10:	f000 fc42 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f14:	23c0      	movs	r3, #192	; 0xc0
 8000f16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f18:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	4619      	mov	r1, r3
 8000f28:	4808      	ldr	r0, [pc, #32]	; (8000f4c <MX_GPIO_Init+0xbc>)
 8000f2a:	f000 fc35 	bl	8001798 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2101      	movs	r1, #1
 8000f32:	2017      	movs	r0, #23
 8000f34:	f000 fb83 	bl	800163e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f38:	2017      	movs	r0, #23
 8000f3a:	f000 fb9c 	bl	8001676 <HAL_NVIC_EnableIRQ>

}
 8000f3e:	bf00      	nop
 8000f40:	3720      	adds	r7, #32
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	48000400 	.word	0x48000400

08000f50 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	230a      	movs	r3, #10
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	4803      	ldr	r0, [pc, #12]	; (8000f74 <_write+0x24>)
 8000f66:	f003 faeb 	bl	8004540 <HAL_UART_Transmit>
  return len;
 8000f6a:	687b      	ldr	r3, [r7, #4]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200001a8 	.word	0x200001a8

08000f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7c:	b672      	cpsid	i
}
 8000f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <Error_Handler+0x8>
	...

08000f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <HAL_MspInit+0x44>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <HAL_MspInit+0x44>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6193      	str	r3, [r2, #24]
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <HAL_MspInit+0x44>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <HAL_MspInit+0x44>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <HAL_MspInit+0x44>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fac:	61d3      	str	r3, [r2, #28]
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_MspInit+0x44>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000

08000fcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fdc:	d114      	bne.n	8001008 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <HAL_TIM_Base_MspInit+0x78>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4a18      	ldr	r2, [pc, #96]	; (8001044 <HAL_TIM_Base_MspInit+0x78>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	61d3      	str	r3, [r2, #28]
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <HAL_TIM_Base_MspInit+0x78>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	201c      	movs	r0, #28
 8000ffc:	f000 fb1f 	bl	800163e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001000:	201c      	movs	r0, #28
 8001002:	f000 fb38 	bl	8001676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001006:	e018      	b.n	800103a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <HAL_TIM_Base_MspInit+0x7c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d113      	bne.n	800103a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <HAL_TIM_Base_MspInit+0x78>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <HAL_TIM_Base_MspInit+0x78>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	61d3      	str	r3, [r2, #28]
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <HAL_TIM_Base_MspInit+0x78>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2102      	movs	r1, #2
 800102e:	201d      	movs	r0, #29
 8001030:	f000 fb05 	bl	800163e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001034:	201d      	movs	r0, #29
 8001036:	f000 fb1e 	bl	8001676 <HAL_NVIC_EnableIRQ>
}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40021000 	.word	0x40021000
 8001048:	40000400 	.word	0x40000400

0800104c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08c      	sub	sp, #48	; 0x30
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a34      	ldr	r2, [pc, #208]	; (800113c <HAL_UART_MspInit+0xf0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d12a      	bne.n	80010c4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800106e:	4b34      	ldr	r3, [pc, #208]	; (8001140 <HAL_UART_MspInit+0xf4>)
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	4a33      	ldr	r2, [pc, #204]	; (8001140 <HAL_UART_MspInit+0xf4>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6193      	str	r3, [r2, #24]
 800107a:	4b31      	ldr	r3, [pc, #196]	; (8001140 <HAL_UART_MspInit+0xf4>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	61bb      	str	r3, [r7, #24]
 8001084:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b2e      	ldr	r3, [pc, #184]	; (8001140 <HAL_UART_MspInit+0xf4>)
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	4a2d      	ldr	r2, [pc, #180]	; (8001140 <HAL_UART_MspInit+0xf4>)
 800108c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001090:	6153      	str	r3, [r2, #20]
 8001092:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <HAL_UART_MspInit+0xf4>)
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800109e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a4:	2312      	movs	r3, #18
 80010a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010b0:	2307      	movs	r3, #7
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	4619      	mov	r1, r3
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010be:	f000 fb6b 	bl	8001798 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010c2:	e036      	b.n	8001132 <HAL_UART_MspInit+0xe6>
  else if(huart->Instance==USART2)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a1e      	ldr	r2, [pc, #120]	; (8001144 <HAL_UART_MspInit+0xf8>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d131      	bne.n	8001132 <HAL_UART_MspInit+0xe6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <HAL_UART_MspInit+0xf4>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	4a1b      	ldr	r2, [pc, #108]	; (8001140 <HAL_UART_MspInit+0xf4>)
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d8:	61d3      	str	r3, [r2, #28]
 80010da:	4b19      	ldr	r3, [pc, #100]	; (8001140 <HAL_UART_MspInit+0xf4>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	4b16      	ldr	r3, [pc, #88]	; (8001140 <HAL_UART_MspInit+0xf4>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4a15      	ldr	r2, [pc, #84]	; (8001140 <HAL_UART_MspInit+0xf4>)
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <HAL_UART_MspInit+0xf4>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80010fe:	f248 0304 	movw	r3, #32772	; 0x8004
 8001102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001110:	2307      	movs	r3, #7
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111e:	f000 fb3b 	bl	8001798 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	2026      	movs	r0, #38	; 0x26
 8001128:	f000 fa89 	bl	800163e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800112c:	2026      	movs	r0, #38	; 0x26
 800112e:	f000 faa2 	bl	8001676 <HAL_NVIC_EnableIRQ>
}
 8001132:	bf00      	nop
 8001134:	3730      	adds	r7, #48	; 0x30
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40013800 	.word	0x40013800
 8001140:	40021000 	.word	0x40021000
 8001144:	40004400 	.word	0x40004400

08001148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800114c:	e7fe      	b.n	800114c <NMI_Handler+0x4>

0800114e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001152:	e7fe      	b.n	8001152 <HardFault_Handler+0x4>

08001154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <MemManage_Handler+0x4>

0800115a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115e:	e7fe      	b.n	800115e <BusFault_Handler+0x4>

08001160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <UsageFault_Handler+0x4>

08001166 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001194:	f000 f934 	bl	8001400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}

0800119c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80011a0:	2040      	movs	r0, #64	; 0x40
 80011a2:	f000 fc83 	bl	8001aac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80011a6:	2080      	movs	r0, #128	; 0x80
 80011a8:	f000 fc80 	bl	8001aac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <TIM2_IRQHandler+0x10>)
 80011b6:	f002 fa29 	bl	800360c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	2000008c 	.word	0x2000008c

080011c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <TIM3_IRQHandler+0x10>)
 80011ca:	f002 fa1f 	bl	800360c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200000d8 	.word	0x200000d8

080011d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <USART2_IRQHandler+0x10>)
 80011de:	f003 fbd1 	bl	8004984 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200001a8 	.word	0x200001a8

080011ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	e00a      	b.n	8001214 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011fe:	f3af 8000 	nop.w
 8001202:	4601      	mov	r1, r0
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	60ba      	str	r2, [r7, #8]
 800120a:	b2ca      	uxtb	r2, r1
 800120c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	3301      	adds	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	429a      	cmp	r2, r3
 800121a:	dbf0      	blt.n	80011fe <_read+0x12>
	}

return len;
 800121c:	687b      	ldr	r3, [r7, #4]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
	return -1;
 800122e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800124e:	605a      	str	r2, [r3, #4]
	return 0;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <_isatty>:

int _isatty(int file)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
	return 1;
 8001266:	2301      	movs	r3, #1
}
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
	return 0;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001298:	4a14      	ldr	r2, [pc, #80]	; (80012ec <_sbrk+0x5c>)
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <_sbrk+0x60>)
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <_sbrk+0x64>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <_sbrk+0x68>)
 80012b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d207      	bcs.n	80012d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c0:	f005 f89e 	bl	8006400 <__errno>
 80012c4:	4603      	mov	r3, r0
 80012c6:	220c      	movs	r2, #12
 80012c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ce:	e009      	b.n	80012e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <_sbrk+0x64>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <_sbrk+0x64>)
 80012e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012e2:	68fb      	ldr	r3, [r7, #12]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20003000 	.word	0x20003000
 80012f0:	00000400 	.word	0x00000400
 80012f4:	2000071c 	.word	0x2000071c
 80012f8:	20000938 	.word	0x20000938

080012fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <SystemInit+0x20>)
 8001302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001306:	4a05      	ldr	r2, [pc, #20]	; (800131c <SystemInit+0x20>)
 8001308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800130c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001320:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001358 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001324:	480d      	ldr	r0, [pc, #52]	; (800135c <LoopForever+0x6>)
  ldr r1, =_edata
 8001326:	490e      	ldr	r1, [pc, #56]	; (8001360 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001328:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <LoopForever+0xe>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800132c:	e002      	b.n	8001334 <LoopCopyDataInit>

0800132e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001332:	3304      	adds	r3, #4

08001334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001338:	d3f9      	bcc.n	800132e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133a:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <LoopForever+0x12>)
  ldr r4, =_ebss
 800133c:	4c0b      	ldr	r4, [pc, #44]	; (800136c <LoopForever+0x16>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001340:	e001      	b.n	8001346 <LoopFillZerobss>

08001342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001344:	3204      	adds	r2, #4

08001346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001348:	d3fb      	bcc.n	8001342 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800134a:	f7ff ffd7 	bl	80012fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800134e:	f005 f85d 	bl	800640c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001352:	f7ff fb37 	bl	80009c4 <main>

08001356 <LoopForever>:

LoopForever:
    b LoopForever
 8001356:	e7fe      	b.n	8001356 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001358:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800135c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001360:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001364:	08007b20 	.word	0x08007b20
  ldr r2, =_sbss
 8001368:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800136c:	20000938 	.word	0x20000938

08001370 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001370:	e7fe      	b.n	8001370 <ADC1_2_IRQHandler>
	...

08001374 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <HAL_Init+0x28>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a07      	ldr	r2, [pc, #28]	; (800139c <HAL_Init+0x28>)
 800137e:	f043 0310 	orr.w	r3, r3, #16
 8001382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001384:	2003      	movs	r0, #3
 8001386:	f000 f94f 	bl	8001628 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800138a:	2000      	movs	r0, #0
 800138c:	f000 f808 	bl	80013a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001390:	f7ff fdf8 	bl	8000f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40022000 	.word	0x40022000

080013a0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_InitTick+0x54>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_InitTick+0x58>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f967 	bl	8001692 <HAL_SYSTICK_Config>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00e      	b.n	80013ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b0f      	cmp	r3, #15
 80013d2:	d80a      	bhi.n	80013ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d4:	2200      	movs	r2, #0
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013dc:	f000 f92f 	bl	800163e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e0:	4a06      	ldr	r2, [pc, #24]	; (80013fc <HAL_InitTick+0x5c>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e000      	b.n	80013ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000000 	.word	0x20000000
 80013f8:	20000008 	.word	0x20000008
 80013fc:	20000004 	.word	0x20000004

08001400 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_IncTick+0x20>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_IncTick+0x24>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4413      	add	r3, r2
 8001410:	4a04      	ldr	r2, [pc, #16]	; (8001424 <HAL_IncTick+0x24>)
 8001412:	6013      	str	r3, [r2, #0]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000008 	.word	0x20000008
 8001424:	20000720 	.word	0x20000720

08001428 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return uwTick;  
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <HAL_GetTick+0x14>)
 800142e:	681b      	ldr	r3, [r3, #0]
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000720 	.word	0x20000720

08001440 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001448:	f7ff ffee 	bl	8001428 <HAL_GetTick>
 800144c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001458:	d005      	beq.n	8001466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_Delay+0x44>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4413      	add	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001466:	bf00      	nop
 8001468:	f7ff ffde 	bl	8001428 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	429a      	cmp	r2, r3
 8001476:	d8f7      	bhi.n	8001468 <HAL_Delay+0x28>
  {
  }
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000008 	.word	0x20000008

08001488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a4:	4013      	ands	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	60d3      	str	r3, [r2, #12]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <__NVIC_GetPriorityGrouping+0x18>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	f003 0307 	and.w	r3, r3, #7
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	db0b      	blt.n	8001516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	f003 021f 	and.w	r2, r3, #31
 8001504:	4907      	ldr	r1, [pc, #28]	; (8001524 <__NVIC_EnableIRQ+0x38>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	095b      	lsrs	r3, r3, #5
 800150c:	2001      	movs	r0, #1
 800150e:	fa00 f202 	lsl.w	r2, r0, r2
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000e100 	.word	0xe000e100

08001528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	2b00      	cmp	r3, #0
 800153a:	db0a      	blt.n	8001552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	b2da      	uxtb	r2, r3
 8001540:	490c      	ldr	r1, [pc, #48]	; (8001574 <__NVIC_SetPriority+0x4c>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	0112      	lsls	r2, r2, #4
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	440b      	add	r3, r1
 800154c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001550:	e00a      	b.n	8001568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4908      	ldr	r1, [pc, #32]	; (8001578 <__NVIC_SetPriority+0x50>)
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	3b04      	subs	r3, #4
 8001560:	0112      	lsls	r2, r2, #4
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	440b      	add	r3, r1
 8001566:	761a      	strb	r2, [r3, #24]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000e100 	.word	0xe000e100
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157c:	b480      	push	{r7}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f1c3 0307 	rsb	r3, r3, #7
 8001596:	2b04      	cmp	r3, #4
 8001598:	bf28      	it	cs
 800159a:	2304      	movcs	r3, #4
 800159c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3304      	adds	r3, #4
 80015a2:	2b06      	cmp	r3, #6
 80015a4:	d902      	bls.n	80015ac <NVIC_EncodePriority+0x30>
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3b03      	subs	r3, #3
 80015aa:	e000      	b.n	80015ae <NVIC_EncodePriority+0x32>
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43da      	mvns	r2, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43d9      	mvns	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	4313      	orrs	r3, r2
         );
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3724      	adds	r7, #36	; 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f4:	d301      	bcc.n	80015fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00f      	b.n	800161a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <SysTick_Config+0x40>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001602:	210f      	movs	r1, #15
 8001604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001608:	f7ff ff8e 	bl	8001528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <SysTick_Config+0x40>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <SysTick_Config+0x40>)
 8001614:	2207      	movs	r2, #7
 8001616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	e000e010 	.word	0xe000e010

08001628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ff29 	bl	8001488 <__NVIC_SetPriorityGrouping>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001650:	f7ff ff3e 	bl	80014d0 <__NVIC_GetPriorityGrouping>
 8001654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	68b9      	ldr	r1, [r7, #8]
 800165a:	6978      	ldr	r0, [r7, #20]
 800165c:	f7ff ff8e 	bl	800157c <NVIC_EncodePriority>
 8001660:	4602      	mov	r2, r0
 8001662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff5d 	bl	8001528 <__NVIC_SetPriority>
}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff31 	bl	80014ec <__NVIC_EnableIRQ>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ffa2 	bl	80015e4 <SysTick_Config>
 80016a0:	4603      	mov	r3, r0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d008      	beq.n	80016ce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2204      	movs	r2, #4
 80016c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e020      	b.n	8001710 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 020e 	bic.w	r2, r2, #14
 80016dc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0201 	bic.w	r2, r2, #1
 80016ec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f6:	2101      	movs	r1, #1
 80016f8:	fa01 f202 	lsl.w	r2, r1, r2
 80016fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800172e:	2b02      	cmp	r3, #2
 8001730:	d005      	beq.n	800173e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2204      	movs	r2, #4
 8001736:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
 800173c:	e027      	b.n	800178e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 020e 	bic.w	r2, r2, #14
 800174c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0201 	bic.w	r2, r2, #1
 800175c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001766:	2101      	movs	r1, #1
 8001768:	fa01 f202 	lsl.w	r2, r1, r2
 800176c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	4798      	blx	r3
    } 
  }
  return status;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a6:	e14e      	b.n	8001a46 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2101      	movs	r1, #1
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
 80017b4:	4013      	ands	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8140 	beq.w	8001a40 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d005      	beq.n	80017d8 <HAL_GPIO_Init+0x40>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d130      	bne.n	800183a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800180e:	2201      	movs	r2, #1
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	091b      	lsrs	r3, r3, #4
 8001824:	f003 0201 	and.w	r2, r3, #1
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	2b03      	cmp	r3, #3
 8001844:	d017      	beq.n	8001876 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d123      	bne.n	80018ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	08da      	lsrs	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3208      	adds	r2, #8
 800188a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	220f      	movs	r2, #15
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	691a      	ldr	r2, [r3, #16]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	08da      	lsrs	r2, r3, #3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3208      	adds	r2, #8
 80018c4:	6939      	ldr	r1, [r7, #16]
 80018c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0203 	and.w	r2, r3, #3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 809a 	beq.w	8001a40 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190c:	4b55      	ldr	r3, [pc, #340]	; (8001a64 <HAL_GPIO_Init+0x2cc>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a54      	ldr	r2, [pc, #336]	; (8001a64 <HAL_GPIO_Init+0x2cc>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b52      	ldr	r3, [pc, #328]	; (8001a64 <HAL_GPIO_Init+0x2cc>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001924:	4a50      	ldr	r2, [pc, #320]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	089b      	lsrs	r3, r3, #2
 800192a:	3302      	adds	r3, #2
 800192c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	220f      	movs	r2, #15
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800194e:	d013      	beq.n	8001978 <HAL_GPIO_Init+0x1e0>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a46      	ldr	r2, [pc, #280]	; (8001a6c <HAL_GPIO_Init+0x2d4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d00d      	beq.n	8001974 <HAL_GPIO_Init+0x1dc>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a45      	ldr	r2, [pc, #276]	; (8001a70 <HAL_GPIO_Init+0x2d8>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d007      	beq.n	8001970 <HAL_GPIO_Init+0x1d8>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a44      	ldr	r2, [pc, #272]	; (8001a74 <HAL_GPIO_Init+0x2dc>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d101      	bne.n	800196c <HAL_GPIO_Init+0x1d4>
 8001968:	2303      	movs	r3, #3
 800196a:	e006      	b.n	800197a <HAL_GPIO_Init+0x1e2>
 800196c:	2305      	movs	r3, #5
 800196e:	e004      	b.n	800197a <HAL_GPIO_Init+0x1e2>
 8001970:	2302      	movs	r3, #2
 8001972:	e002      	b.n	800197a <HAL_GPIO_Init+0x1e2>
 8001974:	2301      	movs	r3, #1
 8001976:	e000      	b.n	800197a <HAL_GPIO_Init+0x1e2>
 8001978:	2300      	movs	r3, #0
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	f002 0203 	and.w	r2, r2, #3
 8001980:	0092      	lsls	r2, r2, #2
 8001982:	4093      	lsls	r3, r2
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800198a:	4937      	ldr	r1, [pc, #220]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	089b      	lsrs	r3, r3, #2
 8001990:	3302      	adds	r3, #2
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001998:	4b37      	ldr	r3, [pc, #220]	; (8001a78 <HAL_GPIO_Init+0x2e0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019bc:	4a2e      	ldr	r2, [pc, #184]	; (8001a78 <HAL_GPIO_Init+0x2e0>)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019c2:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <HAL_GPIO_Init+0x2e0>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4013      	ands	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019e6:	4a24      	ldr	r2, [pc, #144]	; (8001a78 <HAL_GPIO_Init+0x2e0>)
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ec:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <HAL_GPIO_Init+0x2e0>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a10:	4a19      	ldr	r2, [pc, #100]	; (8001a78 <HAL_GPIO_Init+0x2e0>)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_GPIO_Init+0x2e0>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a3a:	4a0f      	ldr	r2, [pc, #60]	; (8001a78 <HAL_GPIO_Init+0x2e0>)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	3301      	adds	r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f47f aea9 	bne.w	80017a8 <HAL_GPIO_Init+0x10>
  }
}
 8001a56:	bf00      	nop
 8001a58:	bf00      	nop
 8001a5a:	371c      	adds	r7, #28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40010000 	.word	0x40010000
 8001a6c:	48000400 	.word	0x48000400
 8001a70:	48000800 	.word	0x48000800
 8001a74:	48000c00 	.word	0x48000c00
 8001a78:	40010400 	.word	0x40010400

08001a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a8c:	787b      	ldrb	r3, [r7, #1]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a98:	e002      	b.n	8001aa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a9a:	887a      	ldrh	r2, [r7, #2]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ab6:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ab8:	695a      	ldr	r2, [r3, #20]
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	4013      	ands	r3, r2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d006      	beq.n	8001ad0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ac2:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ac4:	88fb      	ldrh	r3, [r7, #6]
 8001ac6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f806 	bl	8001adc <HAL_GPIO_EXTI_Callback>
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40010400 	.word	0x40010400

08001adc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b04:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d102      	bne.n	8001b1a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	f001 b823 	b.w	8002b60 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 817d 	beq.w	8001e2a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b30:	4bbc      	ldr	r3, [pc, #752]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d00c      	beq.n	8001b56 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b3c:	4bb9      	ldr	r3, [pc, #740]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 030c 	and.w	r3, r3, #12
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d15c      	bne.n	8001c02 <HAL_RCC_OscConfig+0x10e>
 8001b48:	4bb6      	ldr	r3, [pc, #728]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b54:	d155      	bne.n	8001c02 <HAL_RCC_OscConfig+0x10e>
 8001b56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b5a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b6a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6e:	fab3 f383 	clz	r3, r3
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	095b      	lsrs	r3, r3, #5
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d102      	bne.n	8001b88 <HAL_RCC_OscConfig+0x94>
 8001b82:	4ba8      	ldr	r3, [pc, #672]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	e015      	b.n	8001bb4 <HAL_RCC_OscConfig+0xc0>
 8001b88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b8c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b90:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001b94:	fa93 f3a3 	rbit	r3, r3
 8001b98:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ba0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001ba4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ba8:	fa93 f3a3 	rbit	r3, r3
 8001bac:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001bb0:	4b9c      	ldr	r3, [pc, #624]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bb8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001bbc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001bc0:	fa92 f2a2 	rbit	r2, r2
 8001bc4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001bc8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001bcc:	fab2 f282 	clz	r2, r2
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	f042 0220 	orr.w	r2, r2, #32
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	f002 021f 	and.w	r2, r2, #31
 8001bdc:	2101      	movs	r1, #1
 8001bde:	fa01 f202 	lsl.w	r2, r1, r2
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 811f 	beq.w	8001e28 <HAL_RCC_OscConfig+0x334>
 8001bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f040 8116 	bne.w	8001e28 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	f000 bfaf 	b.w	8002b60 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c12:	d106      	bne.n	8001c22 <HAL_RCC_OscConfig+0x12e>
 8001c14:	4b83      	ldr	r3, [pc, #524]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a82      	ldr	r2, [pc, #520]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	e036      	b.n	8001c90 <HAL_RCC_OscConfig+0x19c>
 8001c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x158>
 8001c32:	4b7c      	ldr	r3, [pc, #496]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a7b      	ldr	r2, [pc, #492]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b79      	ldr	r3, [pc, #484]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a78      	ldr	r2, [pc, #480]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001c44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e021      	b.n	8001c90 <HAL_RCC_OscConfig+0x19c>
 8001c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x184>
 8001c5e:	4b71      	ldr	r3, [pc, #452]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a70      	ldr	r2, [pc, #448]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b6e      	ldr	r3, [pc, #440]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a6d      	ldr	r2, [pc, #436]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e00b      	b.n	8001c90 <HAL_RCC_OscConfig+0x19c>
 8001c78:	4b6a      	ldr	r3, [pc, #424]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a69      	ldr	r2, [pc, #420]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b67      	ldr	r3, [pc, #412]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a66      	ldr	r2, [pc, #408]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c90:	4b64      	ldr	r3, [pc, #400]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c94:	f023 020f 	bic.w	r2, r3, #15
 8001c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	495f      	ldr	r1, [pc, #380]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d059      	beq.n	8001d6e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7ff fbb5 	bl	8001428 <HAL_GetTick>
 8001cbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	e00a      	b.n	8001cda <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff fbb0 	bl	8001428 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b64      	cmp	r3, #100	; 0x64
 8001cd2:	d902      	bls.n	8001cda <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	f000 bf43 	b.w	8002b60 <HAL_RCC_OscConfig+0x106c>
 8001cda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cde:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001cee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	095b      	lsrs	r3, r3, #5
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d102      	bne.n	8001d0c <HAL_RCC_OscConfig+0x218>
 8001d06:	4b47      	ldr	r3, [pc, #284]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	e015      	b.n	8001d38 <HAL_RCC_OscConfig+0x244>
 8001d0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d10:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d24:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d28:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001d2c:	fa93 f3a3 	rbit	r3, r3
 8001d30:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001d34:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d3c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001d40:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d44:	fa92 f2a2 	rbit	r2, r2
 8001d48:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001d4c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001d50:	fab2 f282 	clz	r2, r2
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	f042 0220 	orr.w	r2, r2, #32
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	f002 021f 	and.w	r2, r2, #31
 8001d60:	2101      	movs	r1, #1
 8001d62:	fa01 f202 	lsl.w	r2, r1, r2
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0ab      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x1d0>
 8001d6c:	e05d      	b.n	8001e2a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7ff fb5b 	bl	8001428 <HAL_GetTick>
 8001d72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d76:	e00a      	b.n	8001d8e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d78:	f7ff fb56 	bl	8001428 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b64      	cmp	r3, #100	; 0x64
 8001d86:	d902      	bls.n	8001d8e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	f000 bee9 	b.w	8002b60 <HAL_RCC_OscConfig+0x106c>
 8001d8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d92:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001d9a:	fa93 f3a3 	rbit	r3, r3
 8001d9e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001da2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da6:	fab3 f383 	clz	r3, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	095b      	lsrs	r3, r3, #5
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d102      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x2cc>
 8001dba:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	e015      	b.n	8001dec <HAL_RCC_OscConfig+0x2f8>
 8001dc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dc4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001dcc:	fa93 f3a3 	rbit	r3, r3
 8001dd0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001dd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001ddc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001de0:	fa93 f3a3 	rbit	r3, r3
 8001de4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001de8:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001df0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001df4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001df8:	fa92 f2a2 	rbit	r2, r2
 8001dfc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001e00:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001e04:	fab2 f282 	clz	r2, r2
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	f042 0220 	orr.w	r2, r2, #32
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	f002 021f 	and.w	r2, r2, #31
 8001e14:	2101      	movs	r1, #1
 8001e16:	fa01 f202 	lsl.w	r2, r1, r2
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1ab      	bne.n	8001d78 <HAL_RCC_OscConfig+0x284>
 8001e20:	e003      	b.n	8001e2a <HAL_RCC_OscConfig+0x336>
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 817d 	beq.w	800213a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e40:	4ba6      	ldr	r3, [pc, #664]	; (80020dc <HAL_RCC_OscConfig+0x5e8>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00b      	beq.n	8001e64 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e4c:	4ba3      	ldr	r3, [pc, #652]	; (80020dc <HAL_RCC_OscConfig+0x5e8>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d172      	bne.n	8001f3e <HAL_RCC_OscConfig+0x44a>
 8001e58:	4ba0      	ldr	r3, [pc, #640]	; (80020dc <HAL_RCC_OscConfig+0x5e8>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d16c      	bne.n	8001f3e <HAL_RCC_OscConfig+0x44a>
 8001e64:	2302      	movs	r3, #2
 8001e66:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001e76:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7a:	fab3 f383 	clz	r3, r3
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	095b      	lsrs	r3, r3, #5
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d102      	bne.n	8001e94 <HAL_RCC_OscConfig+0x3a0>
 8001e8e:	4b93      	ldr	r3, [pc, #588]	; (80020dc <HAL_RCC_OscConfig+0x5e8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	e013      	b.n	8001ebc <HAL_RCC_OscConfig+0x3c8>
 8001e94:	2302      	movs	r3, #2
 8001e96:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001eac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001eb0:	fa93 f3a3 	rbit	r3, r3
 8001eb4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001eb8:	4b88      	ldr	r3, [pc, #544]	; (80020dc <HAL_RCC_OscConfig+0x5e8>)
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001ec2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001ec6:	fa92 f2a2 	rbit	r2, r2
 8001eca:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001ece:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001ed2:	fab2 f282 	clz	r2, r2
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	f042 0220 	orr.w	r2, r2, #32
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	f002 021f 	and.w	r2, r2, #31
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00a      	beq.n	8001f04 <HAL_RCC_OscConfig+0x410>
 8001eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d002      	beq.n	8001f04 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	f000 be2e 	b.w	8002b60 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f04:	4b75      	ldr	r3, [pc, #468]	; (80020dc <HAL_RCC_OscConfig+0x5e8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	21f8      	movs	r1, #248	; 0xf8
 8001f1a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f22:	fa91 f1a1 	rbit	r1, r1
 8001f26:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001f2a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001f2e:	fab1 f181 	clz	r1, r1
 8001f32:	b2c9      	uxtb	r1, r1
 8001f34:	408b      	lsls	r3, r1
 8001f36:	4969      	ldr	r1, [pc, #420]	; (80020dc <HAL_RCC_OscConfig+0x5e8>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3c:	e0fd      	b.n	800213a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 8088 	beq.w	8002060 <HAL_RCC_OscConfig+0x56c>
 8001f50:	2301      	movs	r3, #1
 8001f52:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001f5a:	fa93 f3a3 	rbit	r3, r3
 8001f5e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001f62:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	461a      	mov	r2, r3
 8001f78:	2301      	movs	r3, #1
 8001f7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff fa54 	bl	8001428 <HAL_GetTick>
 8001f80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f84:	e00a      	b.n	8001f9c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f86:	f7ff fa4f 	bl	8001428 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d902      	bls.n	8001f9c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	f000 bde2 	b.w	8002b60 <HAL_RCC_OscConfig+0x106c>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001fae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb2:	fab3 f383 	clz	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	095b      	lsrs	r3, r3, #5
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d102      	bne.n	8001fcc <HAL_RCC_OscConfig+0x4d8>
 8001fc6:	4b45      	ldr	r3, [pc, #276]	; (80020dc <HAL_RCC_OscConfig+0x5e8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	e013      	b.n	8001ff4 <HAL_RCC_OscConfig+0x500>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001fde:	2302      	movs	r3, #2
 8001fe0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001fe4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001fe8:	fa93 f3a3 	rbit	r3, r3
 8001fec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001ff0:	4b3a      	ldr	r3, [pc, #232]	; (80020dc <HAL_RCC_OscConfig+0x5e8>)
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001ffa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001ffe:	fa92 f2a2 	rbit	r2, r2
 8002002:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002006:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800200a:	fab2 f282 	clz	r2, r2
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	f042 0220 	orr.w	r2, r2, #32
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	f002 021f 	and.w	r2, r2, #31
 800201a:	2101      	movs	r1, #1
 800201c:	fa01 f202 	lsl.w	r2, r1, r2
 8002020:	4013      	ands	r3, r2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0af      	beq.n	8001f86 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002026:	4b2d      	ldr	r3, [pc, #180]	; (80020dc <HAL_RCC_OscConfig+0x5e8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800202e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002032:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	21f8      	movs	r1, #248	; 0xf8
 800203c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002044:	fa91 f1a1 	rbit	r1, r1
 8002048:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800204c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002050:	fab1 f181 	clz	r1, r1
 8002054:	b2c9      	uxtb	r1, r1
 8002056:	408b      	lsls	r3, r1
 8002058:	4920      	ldr	r1, [pc, #128]	; (80020dc <HAL_RCC_OscConfig+0x5e8>)
 800205a:	4313      	orrs	r3, r2
 800205c:	600b      	str	r3, [r1, #0]
 800205e:	e06c      	b.n	800213a <HAL_RCC_OscConfig+0x646>
 8002060:	2301      	movs	r3, #1
 8002062:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800206a:	fa93 f3a3 	rbit	r3, r3
 800206e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002072:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002080:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	461a      	mov	r2, r3
 8002088:	2300      	movs	r3, #0
 800208a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7ff f9cc 	bl	8001428 <HAL_GetTick>
 8002090:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002094:	e00a      	b.n	80020ac <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002096:	f7ff f9c7 	bl	8001428 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d902      	bls.n	80020ac <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	f000 bd5a 	b.w	8002b60 <HAL_RCC_OscConfig+0x106c>
 80020ac:	2302      	movs	r3, #2
 80020ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80020be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	095b      	lsrs	r3, r3, #5
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d104      	bne.n	80020e0 <HAL_RCC_OscConfig+0x5ec>
 80020d6:	4b01      	ldr	r3, [pc, #4]	; (80020dc <HAL_RCC_OscConfig+0x5e8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	e015      	b.n	8002108 <HAL_RCC_OscConfig+0x614>
 80020dc:	40021000 	.word	0x40021000
 80020e0:	2302      	movs	r3, #2
 80020e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80020f2:	2302      	movs	r3, #2
 80020f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80020f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002104:	4bc8      	ldr	r3, [pc, #800]	; (8002428 <HAL_RCC_OscConfig+0x934>)
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	2202      	movs	r2, #2
 800210a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800210e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002112:	fa92 f2a2 	rbit	r2, r2
 8002116:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800211a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800211e:	fab2 f282 	clz	r2, r2
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	f042 0220 	orr.w	r2, r2, #32
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	f002 021f 	and.w	r2, r2, #31
 800212e:	2101      	movs	r1, #1
 8002130:	fa01 f202 	lsl.w	r2, r1, r2
 8002134:	4013      	ands	r3, r2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1ad      	bne.n	8002096 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 8110 	beq.w	8002370 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002154:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d079      	beq.n	8002254 <HAL_RCC_OscConfig+0x760>
 8002160:	2301      	movs	r3, #1
 8002162:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002172:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	461a      	mov	r2, r3
 800217e:	4bab      	ldr	r3, [pc, #684]	; (800242c <HAL_RCC_OscConfig+0x938>)
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	461a      	mov	r2, r3
 8002186:	2301      	movs	r3, #1
 8002188:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218a:	f7ff f94d 	bl	8001428 <HAL_GetTick>
 800218e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002192:	e00a      	b.n	80021aa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002194:	f7ff f948 	bl	8001428 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d902      	bls.n	80021aa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	f000 bcdb 	b.w	8002b60 <HAL_RCC_OscConfig+0x106c>
 80021aa:	2302      	movs	r3, #2
 80021ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80021bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80021c4:	2202      	movs	r2, #2
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	fa93 f2a3 	rbit	r2, r3
 80021d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80021e8:	2202      	movs	r2, #2
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	fa93 f2a3 	rbit	r2, r3
 80021fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002202:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002204:	4b88      	ldr	r3, [pc, #544]	; (8002428 <HAL_RCC_OscConfig+0x934>)
 8002206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002210:	2102      	movs	r1, #2
 8002212:	6019      	str	r1, [r3, #0]
 8002214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002218:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	fa93 f1a3 	rbit	r1, r3
 8002222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002226:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800222a:	6019      	str	r1, [r3, #0]
  return result;
 800222c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002230:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	fab3 f383 	clz	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f003 031f 	and.w	r3, r3, #31
 8002246:	2101      	movs	r1, #1
 8002248:	fa01 f303 	lsl.w	r3, r1, r3
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0a0      	beq.n	8002194 <HAL_RCC_OscConfig+0x6a0>
 8002252:	e08d      	b.n	8002370 <HAL_RCC_OscConfig+0x87c>
 8002254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002258:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800225c:	2201      	movs	r2, #1
 800225e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002264:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	fa93 f2a3 	rbit	r2, r3
 800226e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002272:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002276:	601a      	str	r2, [r3, #0]
  return result;
 8002278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002280:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	461a      	mov	r2, r3
 800228a:	4b68      	ldr	r3, [pc, #416]	; (800242c <HAL_RCC_OscConfig+0x938>)
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	461a      	mov	r2, r3
 8002292:	2300      	movs	r3, #0
 8002294:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002296:	f7ff f8c7 	bl	8001428 <HAL_GetTick>
 800229a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800229e:	e00a      	b.n	80022b6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022a0:	f7ff f8c2 	bl	8001428 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d902      	bls.n	80022b6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	f000 bc55 	b.w	8002b60 <HAL_RCC_OscConfig+0x106c>
 80022b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022be:	2202      	movs	r2, #2
 80022c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	fa93 f2a3 	rbit	r2, r3
 80022d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022e2:	2202      	movs	r2, #2
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	fa93 f2a3 	rbit	r2, r3
 80022f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002302:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002306:	2202      	movs	r2, #2
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	fa93 f2a3 	rbit	r2, r3
 8002318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002320:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002322:	4b41      	ldr	r3, [pc, #260]	; (8002428 <HAL_RCC_OscConfig+0x934>)
 8002324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800232e:	2102      	movs	r1, #2
 8002330:	6019      	str	r1, [r3, #0]
 8002332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002336:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	fa93 f1a3 	rbit	r1, r3
 8002340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002344:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002348:	6019      	str	r1, [r3, #0]
  return result;
 800234a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	fab3 f383 	clz	r3, r3
 8002358:	b2db      	uxtb	r3, r3
 800235a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	2101      	movs	r1, #1
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	4013      	ands	r3, r2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d197      	bne.n	80022a0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002374:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 81a1 	beq.w	80026c8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002386:	2300      	movs	r3, #0
 8002388:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238c:	4b26      	ldr	r3, [pc, #152]	; (8002428 <HAL_RCC_OscConfig+0x934>)
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d116      	bne.n	80023c6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002398:	4b23      	ldr	r3, [pc, #140]	; (8002428 <HAL_RCC_OscConfig+0x934>)
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	4a22      	ldr	r2, [pc, #136]	; (8002428 <HAL_RCC_OscConfig+0x934>)
 800239e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a2:	61d3      	str	r3, [r2, #28]
 80023a4:	4b20      	ldr	r3, [pc, #128]	; (8002428 <HAL_RCC_OscConfig+0x934>)
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80023ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ba:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80023be:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80023c0:	2301      	movs	r3, #1
 80023c2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c6:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <HAL_RCC_OscConfig+0x93c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d11a      	bne.n	8002408 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d2:	4b17      	ldr	r3, [pc, #92]	; (8002430 <HAL_RCC_OscConfig+0x93c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a16      	ldr	r2, [pc, #88]	; (8002430 <HAL_RCC_OscConfig+0x93c>)
 80023d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023de:	f7ff f823 	bl	8001428 <HAL_GetTick>
 80023e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e6:	e009      	b.n	80023fc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e8:	f7ff f81e 	bl	8001428 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b64      	cmp	r3, #100	; 0x64
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e3b1      	b.n	8002b60 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <HAL_RCC_OscConfig+0x93c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0ef      	beq.n	80023e8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d10d      	bne.n	8002434 <HAL_RCC_OscConfig+0x940>
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <HAL_RCC_OscConfig+0x934>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4a02      	ldr	r2, [pc, #8]	; (8002428 <HAL_RCC_OscConfig+0x934>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6213      	str	r3, [r2, #32]
 8002424:	e03c      	b.n	80024a0 <HAL_RCC_OscConfig+0x9ac>
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	10908120 	.word	0x10908120
 8002430:	40007000 	.word	0x40007000
 8002434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002438:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10c      	bne.n	800245e <HAL_RCC_OscConfig+0x96a>
 8002444:	4bc1      	ldr	r3, [pc, #772]	; (800274c <HAL_RCC_OscConfig+0xc58>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4ac0      	ldr	r2, [pc, #768]	; (800274c <HAL_RCC_OscConfig+0xc58>)
 800244a:	f023 0301 	bic.w	r3, r3, #1
 800244e:	6213      	str	r3, [r2, #32]
 8002450:	4bbe      	ldr	r3, [pc, #760]	; (800274c <HAL_RCC_OscConfig+0xc58>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	4abd      	ldr	r2, [pc, #756]	; (800274c <HAL_RCC_OscConfig+0xc58>)
 8002456:	f023 0304 	bic.w	r3, r3, #4
 800245a:	6213      	str	r3, [r2, #32]
 800245c:	e020      	b.n	80024a0 <HAL_RCC_OscConfig+0x9ac>
 800245e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002462:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2b05      	cmp	r3, #5
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x994>
 800246e:	4bb7      	ldr	r3, [pc, #732]	; (800274c <HAL_RCC_OscConfig+0xc58>)
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	4ab6      	ldr	r2, [pc, #728]	; (800274c <HAL_RCC_OscConfig+0xc58>)
 8002474:	f043 0304 	orr.w	r3, r3, #4
 8002478:	6213      	str	r3, [r2, #32]
 800247a:	4bb4      	ldr	r3, [pc, #720]	; (800274c <HAL_RCC_OscConfig+0xc58>)
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	4ab3      	ldr	r2, [pc, #716]	; (800274c <HAL_RCC_OscConfig+0xc58>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6213      	str	r3, [r2, #32]
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_OscConfig+0x9ac>
 8002488:	4bb0      	ldr	r3, [pc, #704]	; (800274c <HAL_RCC_OscConfig+0xc58>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4aaf      	ldr	r2, [pc, #700]	; (800274c <HAL_RCC_OscConfig+0xc58>)
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	6213      	str	r3, [r2, #32]
 8002494:	4bad      	ldr	r3, [pc, #692]	; (800274c <HAL_RCC_OscConfig+0xc58>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	4aac      	ldr	r2, [pc, #688]	; (800274c <HAL_RCC_OscConfig+0xc58>)
 800249a:	f023 0304 	bic.w	r3, r3, #4
 800249e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 8081 	beq.w	80025b4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b2:	f7fe ffb9 	bl	8001428 <HAL_GetTick>
 80024b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ba:	e00b      	b.n	80024d4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024bc:	f7fe ffb4 	bl	8001428 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e345      	b.n	8002b60 <HAL_RCC_OscConfig+0x106c>
 80024d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80024dc:	2202      	movs	r2, #2
 80024de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	fa93 f2a3 	rbit	r2, r3
 80024ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002500:	2202      	movs	r2, #2
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002508:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	fa93 f2a3 	rbit	r2, r3
 8002512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002516:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800251a:	601a      	str	r2, [r3, #0]
  return result;
 800251c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002520:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002524:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	095b      	lsrs	r3, r3, #5
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f043 0302 	orr.w	r3, r3, #2
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d102      	bne.n	8002540 <HAL_RCC_OscConfig+0xa4c>
 800253a:	4b84      	ldr	r3, [pc, #528]	; (800274c <HAL_RCC_OscConfig+0xc58>)
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	e013      	b.n	8002568 <HAL_RCC_OscConfig+0xa74>
 8002540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002544:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002548:	2202      	movs	r2, #2
 800254a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002550:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	fa93 f2a3 	rbit	r2, r3
 800255a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	4b79      	ldr	r3, [pc, #484]	; (800274c <HAL_RCC_OscConfig+0xc58>)
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800256c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002570:	2102      	movs	r1, #2
 8002572:	6011      	str	r1, [r2, #0]
 8002574:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002578:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	fa92 f1a2 	rbit	r1, r2
 8002582:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002586:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800258a:	6011      	str	r1, [r2, #0]
  return result;
 800258c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002590:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002594:	6812      	ldr	r2, [r2, #0]
 8002596:	fab2 f282 	clz	r2, r2
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	f002 021f 	and.w	r2, r2, #31
 80025a6:	2101      	movs	r1, #1
 80025a8:	fa01 f202 	lsl.w	r2, r1, r2
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d084      	beq.n	80024bc <HAL_RCC_OscConfig+0x9c8>
 80025b2:	e07f      	b.n	80026b4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b4:	f7fe ff38 	bl	8001428 <HAL_GetTick>
 80025b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025bc:	e00b      	b.n	80025d6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025be:	f7fe ff33 	bl	8001428 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e2c4      	b.n	8002b60 <HAL_RCC_OscConfig+0x106c>
 80025d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025da:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80025de:	2202      	movs	r2, #2
 80025e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	fa93 f2a3 	rbit	r2, r3
 80025f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002602:	2202      	movs	r2, #2
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	fa93 f2a3 	rbit	r2, r3
 8002614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002618:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800261c:	601a      	str	r2, [r3, #0]
  return result;
 800261e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002622:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002626:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002628:	fab3 f383 	clz	r3, r3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f043 0302 	orr.w	r3, r3, #2
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d102      	bne.n	8002642 <HAL_RCC_OscConfig+0xb4e>
 800263c:	4b43      	ldr	r3, [pc, #268]	; (800274c <HAL_RCC_OscConfig+0xc58>)
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	e013      	b.n	800266a <HAL_RCC_OscConfig+0xb76>
 8002642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002646:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800264a:	2202      	movs	r2, #2
 800264c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002652:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	fa93 f2a3 	rbit	r2, r3
 800265c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002660:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	4b39      	ldr	r3, [pc, #228]	; (800274c <HAL_RCC_OscConfig+0xc58>)
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800266e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002672:	2102      	movs	r1, #2
 8002674:	6011      	str	r1, [r2, #0]
 8002676:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800267a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	fa92 f1a2 	rbit	r1, r2
 8002684:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002688:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800268c:	6011      	str	r1, [r2, #0]
  return result;
 800268e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002692:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	fab2 f282 	clz	r2, r2
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	f002 021f 	and.w	r2, r2, #31
 80026a8:	2101      	movs	r1, #1
 80026aa:	fa01 f202 	lsl.w	r2, r1, r2
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d184      	bne.n	80025be <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026b4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d105      	bne.n	80026c8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026bc:	4b23      	ldr	r3, [pc, #140]	; (800274c <HAL_RCC_OscConfig+0xc58>)
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	4a22      	ldr	r2, [pc, #136]	; (800274c <HAL_RCC_OscConfig+0xc58>)
 80026c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 8242 	beq.w	8002b5e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026da:	4b1c      	ldr	r3, [pc, #112]	; (800274c <HAL_RCC_OscConfig+0xc58>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	f000 8213 	beq.w	8002b0e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	f040 8162 	bne.w	80029be <HAL_RCC_OscConfig+0xeca>
 80026fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002702:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002706:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	fa93 f2a3 	rbit	r2, r3
 8002716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800271e:	601a      	str	r2, [r3, #0]
  return result;
 8002720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002724:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002728:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002734:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	461a      	mov	r2, r3
 800273c:	2300      	movs	r3, #0
 800273e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7fe fe72 	bl	8001428 <HAL_GetTick>
 8002744:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002748:	e00c      	b.n	8002764 <HAL_RCC_OscConfig+0xc70>
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002750:	f7fe fe6a 	bl	8001428 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e1fd      	b.n	8002b60 <HAL_RCC_OscConfig+0x106c>
 8002764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002768:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800276c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002770:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002776:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	fa93 f2a3 	rbit	r2, r3
 8002780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002784:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002788:	601a      	str	r2, [r3, #0]
  return result;
 800278a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002792:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	b2db      	uxtb	r3, r3
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d102      	bne.n	80027ae <HAL_RCC_OscConfig+0xcba>
 80027a8:	4bb0      	ldr	r3, [pc, #704]	; (8002a6c <HAL_RCC_OscConfig+0xf78>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	e027      	b.n	80027fe <HAL_RCC_OscConfig+0xd0a>
 80027ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80027b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	fa93 f2a3 	rbit	r2, r3
 80027ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80027dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	fa93 f2a3 	rbit	r2, r3
 80027f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	4b9c      	ldr	r3, [pc, #624]	; (8002a6c <HAL_RCC_OscConfig+0xf78>)
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002802:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002806:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800280a:	6011      	str	r1, [r2, #0]
 800280c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002810:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	fa92 f1a2 	rbit	r1, r2
 800281a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800281e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002822:	6011      	str	r1, [r2, #0]
  return result;
 8002824:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002828:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	fab2 f282 	clz	r2, r2
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	f042 0220 	orr.w	r2, r2, #32
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	f002 021f 	and.w	r2, r2, #31
 800283e:	2101      	movs	r1, #1
 8002840:	fa01 f202 	lsl.w	r2, r1, r2
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d182      	bne.n	8002750 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800284a:	4b88      	ldr	r3, [pc, #544]	; (8002a6c <HAL_RCC_OscConfig+0xf78>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002856:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800285e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	430b      	orrs	r3, r1
 800286c:	497f      	ldr	r1, [pc, #508]	; (8002a6c <HAL_RCC_OscConfig+0xf78>)
 800286e:	4313      	orrs	r3, r2
 8002870:	604b      	str	r3, [r1, #4]
 8002872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002876:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800287a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800287e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002884:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	fa93 f2a3 	rbit	r2, r3
 800288e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002892:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002896:	601a      	str	r2, [r3, #0]
  return result;
 8002898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80028a0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	461a      	mov	r2, r3
 80028b4:	2301      	movs	r3, #1
 80028b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7fe fdb6 	bl	8001428 <HAL_GetTick>
 80028bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028c0:	e009      	b.n	80028d6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c2:	f7fe fdb1 	bl	8001428 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e144      	b.n	8002b60 <HAL_RCC_OscConfig+0x106c>
 80028d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028da:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80028de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	fa93 f2a3 	rbit	r2, r3
 80028f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80028fa:	601a      	str	r2, [r3, #0]
  return result;
 80028fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002900:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002904:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002906:	fab3 f383 	clz	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	095b      	lsrs	r3, r3, #5
 800290e:	b2db      	uxtb	r3, r3
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b01      	cmp	r3, #1
 8002918:	d102      	bne.n	8002920 <HAL_RCC_OscConfig+0xe2c>
 800291a:	4b54      	ldr	r3, [pc, #336]	; (8002a6c <HAL_RCC_OscConfig+0xf78>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	e027      	b.n	8002970 <HAL_RCC_OscConfig+0xe7c>
 8002920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002924:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002928:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800292c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002932:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	fa93 f2a3 	rbit	r2, r3
 800293c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002940:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800294e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002958:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	fa93 f2a3 	rbit	r2, r3
 8002962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002966:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	4b3f      	ldr	r3, [pc, #252]	; (8002a6c <HAL_RCC_OscConfig+0xf78>)
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002974:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002978:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800297c:	6011      	str	r1, [r2, #0]
 800297e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002982:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	fa92 f1a2 	rbit	r1, r2
 800298c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002990:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002994:	6011      	str	r1, [r2, #0]
  return result;
 8002996:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800299a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	fab2 f282 	clz	r2, r2
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	f042 0220 	orr.w	r2, r2, #32
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	f002 021f 	and.w	r2, r2, #31
 80029b0:	2101      	movs	r1, #1
 80029b2:	fa01 f202 	lsl.w	r2, r1, r2
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d082      	beq.n	80028c2 <HAL_RCC_OscConfig+0xdce>
 80029bc:	e0cf      	b.n	8002b5e <HAL_RCC_OscConfig+0x106a>
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80029c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	fa93 f2a3 	rbit	r2, r3
 80029da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029de:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80029e2:	601a      	str	r2, [r3, #0]
  return result;
 80029e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80029ec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ee:	fab3 f383 	clz	r3, r3
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	461a      	mov	r2, r3
 8002a00:	2300      	movs	r3, #0
 8002a02:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7fe fd10 	bl	8001428 <HAL_GetTick>
 8002a08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a0c:	e009      	b.n	8002a22 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7fe fd0b 	bl	8001428 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e09e      	b.n	8002b60 <HAL_RCC_OscConfig+0x106c>
 8002a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a26:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a34:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	fa93 f2a3 	rbit	r2, r3
 8002a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a42:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a46:	601a      	str	r2, [r3, #0]
  return result;
 8002a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a52:	fab3 f383 	clz	r3, r3
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	095b      	lsrs	r3, r3, #5
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d104      	bne.n	8002a70 <HAL_RCC_OscConfig+0xf7c>
 8002a66:	4b01      	ldr	r3, [pc, #4]	; (8002a6c <HAL_RCC_OscConfig+0xf78>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	e029      	b.n	8002ac0 <HAL_RCC_OscConfig+0xfcc>
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a74:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a82:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	fa93 f2a3 	rbit	r2, r3
 8002a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a90:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	fa93 f2a3 	rbit	r2, r3
 8002ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	4b2b      	ldr	r3, [pc, #172]	; (8002b6c <HAL_RCC_OscConfig+0x1078>)
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ac4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002ac8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002acc:	6011      	str	r1, [r2, #0]
 8002ace:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ad2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	fa92 f1a2 	rbit	r1, r2
 8002adc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ae0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ae4:	6011      	str	r1, [r2, #0]
  return result;
 8002ae6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aea:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	fab2 f282 	clz	r2, r2
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	f042 0220 	orr.w	r2, r2, #32
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	f002 021f 	and.w	r2, r2, #31
 8002b00:	2101      	movs	r1, #1
 8002b02:	fa01 f202 	lsl.w	r2, r1, r2
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d180      	bne.n	8002a0e <HAL_RCC_OscConfig+0xf1a>
 8002b0c:	e027      	b.n	8002b5e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e01e      	b.n	8002b60 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b22:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <HAL_RCC_OscConfig+0x1078>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b2e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d10b      	bne.n	8002b5a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d001      	beq.n	8002b5e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000

08002b70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b09e      	sub	sp, #120	; 0x78
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e162      	b.n	8002e4e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b88:	4b90      	ldr	r3, [pc, #576]	; (8002dcc <HAL_RCC_ClockConfig+0x25c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d910      	bls.n	8002bb8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b96:	4b8d      	ldr	r3, [pc, #564]	; (8002dcc <HAL_RCC_ClockConfig+0x25c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 0207 	bic.w	r2, r3, #7
 8002b9e:	498b      	ldr	r1, [pc, #556]	; (8002dcc <HAL_RCC_ClockConfig+0x25c>)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba6:	4b89      	ldr	r3, [pc, #548]	; (8002dcc <HAL_RCC_ClockConfig+0x25c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e14a      	b.n	8002e4e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc4:	4b82      	ldr	r3, [pc, #520]	; (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	497f      	ldr	r1, [pc, #508]	; (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 80dc 	beq.w	8002d9c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d13c      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xf6>
 8002bec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bf0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bf4:	fa93 f3a3 	rbit	r3, r3
 8002bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfc:	fab3 f383 	clz	r3, r3
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d102      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xa6>
 8002c10:	4b6f      	ldr	r3, [pc, #444]	; (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	e00f      	b.n	8002c36 <HAL_RCC_ClockConfig+0xc6>
 8002c16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	667b      	str	r3, [r7, #100]	; 0x64
 8002c24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c28:	663b      	str	r3, [r7, #96]	; 0x60
 8002c2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c2c:	fa93 f3a3 	rbit	r3, r3
 8002c30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c32:	4b67      	ldr	r3, [pc, #412]	; (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c3e:	fa92 f2a2 	rbit	r2, r2
 8002c42:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002c44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c46:	fab2 f282 	clz	r2, r2
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	f042 0220 	orr.w	r2, r2, #32
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	f002 021f 	and.w	r2, r2, #31
 8002c56:	2101      	movs	r1, #1
 8002c58:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d17b      	bne.n	8002d5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e0f3      	b.n	8002e4e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d13c      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x178>
 8002c6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d102      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x128>
 8002c92:	4b4f      	ldr	r3, [pc, #316]	; (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	e00f      	b.n	8002cb8 <HAL_RCC_ClockConfig+0x148>
 8002c98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ca0:	fa93 f3a3 	rbit	r3, r3
 8002ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ca6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002caa:	643b      	str	r3, [r7, #64]	; 0x40
 8002cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cb4:	4b46      	ldr	r3, [pc, #280]	; (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cbc:	63ba      	str	r2, [r7, #56]	; 0x38
 8002cbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cc0:	fa92 f2a2 	rbit	r2, r2
 8002cc4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cc8:	fab2 f282 	clz	r2, r2
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	f042 0220 	orr.w	r2, r2, #32
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	f002 021f 	and.w	r2, r2, #31
 8002cd8:	2101      	movs	r1, #1
 8002cda:	fa01 f202 	lsl.w	r2, r1, r2
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d13a      	bne.n	8002d5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0b2      	b.n	8002e4e <HAL_RCC_ClockConfig+0x2de>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	095b      	lsrs	r3, r3, #5
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d102      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x1a0>
 8002d0a:	4b31      	ldr	r3, [pc, #196]	; (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	e00d      	b.n	8002d2c <HAL_RCC_ClockConfig+0x1bc>
 8002d10:	2302      	movs	r3, #2
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	623b      	str	r3, [r7, #32]
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	61fb      	str	r3, [r7, #28]
 8002d28:	4b29      	ldr	r3, [pc, #164]	; (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	61ba      	str	r2, [r7, #24]
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	fa92 f2a2 	rbit	r2, r2
 8002d36:	617a      	str	r2, [r7, #20]
  return result;
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	fab2 f282 	clz	r2, r2
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	f042 0220 	orr.w	r2, r2, #32
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	f002 021f 	and.w	r2, r2, #31
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e079      	b.n	8002e4e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d5a:	4b1d      	ldr	r3, [pc, #116]	; (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f023 0203 	bic.w	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	491a      	ldr	r1, [pc, #104]	; (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d6c:	f7fe fb5c 	bl	8001428 <HAL_GetTick>
 8002d70:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	e00a      	b.n	8002d8a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d74:	f7fe fb58 	bl	8001428 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e061      	b.n	8002e4e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	4b11      	ldr	r3, [pc, #68]	; (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 020c 	and.w	r2, r3, #12
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d1eb      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_RCC_ClockConfig+0x25c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d214      	bcs.n	8002dd4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <HAL_RCC_ClockConfig+0x25c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 0207 	bic.w	r2, r3, #7
 8002db2:	4906      	ldr	r1, [pc, #24]	; (8002dcc <HAL_RCC_ClockConfig+0x25c>)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dba:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <HAL_RCC_ClockConfig+0x25c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d005      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e040      	b.n	8002e4e <HAL_RCC_ClockConfig+0x2de>
 8002dcc:	40022000 	.word	0x40022000
 8002dd0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de0:	4b1d      	ldr	r3, [pc, #116]	; (8002e58 <HAL_RCC_ClockConfig+0x2e8>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	491a      	ldr	r1, [pc, #104]	; (8002e58 <HAL_RCC_ClockConfig+0x2e8>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d009      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dfe:	4b16      	ldr	r3, [pc, #88]	; (8002e58 <HAL_RCC_ClockConfig+0x2e8>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4912      	ldr	r1, [pc, #72]	; (8002e58 <HAL_RCC_ClockConfig+0x2e8>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e12:	f000 f829 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8002e16:	4601      	mov	r1, r0
 8002e18:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <HAL_RCC_ClockConfig+0x2e8>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e20:	22f0      	movs	r2, #240	; 0xf0
 8002e22:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	fa92 f2a2 	rbit	r2, r2
 8002e2a:	60fa      	str	r2, [r7, #12]
  return result;
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	fab2 f282 	clz	r2, r2
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	40d3      	lsrs	r3, r2
 8002e36:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <HAL_RCC_ClockConfig+0x2ec>)
 8002e38:	5cd3      	ldrb	r3, [r2, r3]
 8002e3a:	fa21 f303 	lsr.w	r3, r1, r3
 8002e3e:	4a08      	ldr	r2, [pc, #32]	; (8002e60 <HAL_RCC_ClockConfig+0x2f0>)
 8002e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <HAL_RCC_ClockConfig+0x2f4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe faaa 	bl	80013a0 <HAL_InitTick>
  
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3778      	adds	r7, #120	; 0x78
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	080079c8 	.word	0x080079c8
 8002e60:	20000000 	.word	0x20000000
 8002e64:	20000004 	.word	0x20000004

08002e68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b08b      	sub	sp, #44	; 0x2c
 8002e6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	2300      	movs	r3, #0
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002e82:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d002      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x30>
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d003      	beq.n	8002e9e <HAL_RCC_GetSysClockFreq+0x36>
 8002e96:	e03c      	b.n	8002f12 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e98:	4b24      	ldr	r3, [pc, #144]	; (8002f2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e9a:	623b      	str	r3, [r7, #32]
      break;
 8002e9c:	e03c      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ea4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002ea8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	fa92 f2a2 	rbit	r2, r2
 8002eb0:	607a      	str	r2, [r7, #4]
  return result;
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	fab2 f282 	clz	r2, r2
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	40d3      	lsrs	r3, r2
 8002ebc:	4a1c      	ldr	r2, [pc, #112]	; (8002f30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ebe:	5cd3      	ldrb	r3, [r2, r3]
 8002ec0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002ec2:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	220f      	movs	r2, #15
 8002ecc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	fa92 f2a2 	rbit	r2, r2
 8002ed4:	60fa      	str	r2, [r7, #12]
  return result;
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	fab2 f282 	clz	r2, r2
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	40d3      	lsrs	r3, r2
 8002ee0:	4a14      	ldr	r2, [pc, #80]	; (8002f34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ee2:	5cd3      	ldrb	r3, [r2, r3]
 8002ee4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ef0:	4a0e      	ldr	r2, [pc, #56]	; (8002f2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	fb02 f303 	mul.w	r3, r2, r3
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
 8002f00:	e004      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	4a0c      	ldr	r2, [pc, #48]	; (8002f38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f06:	fb02 f303 	mul.w	r3, r2, r3
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	623b      	str	r3, [r7, #32]
      break;
 8002f10:	e002      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f12:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f14:	623b      	str	r3, [r7, #32]
      break;
 8002f16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f18:	6a3b      	ldr	r3, [r7, #32]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	372c      	adds	r7, #44	; 0x2c
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	007a1200 	.word	0x007a1200
 8002f30:	080079e0 	.word	0x080079e0
 8002f34:	080079f0 	.word	0x080079f0
 8002f38:	003d0900 	.word	0x003d0900

08002f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f42:	681b      	ldr	r3, [r3, #0]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	20000000 	.word	0x20000000

08002f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f5a:	f7ff ffef 	bl	8002f3c <HAL_RCC_GetHCLKFreq>
 8002f5e:	4601      	mov	r1, r0
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f68:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	fa92 f2a2 	rbit	r2, r2
 8002f74:	603a      	str	r2, [r7, #0]
  return result;
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	fab2 f282 	clz	r2, r2
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	40d3      	lsrs	r3, r2
 8002f80:	4a04      	ldr	r2, [pc, #16]	; (8002f94 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f82:	5cd3      	ldrb	r3, [r2, r3]
 8002f84:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40021000 	.word	0x40021000
 8002f94:	080079d8 	.word	0x080079d8

08002f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f9e:	f7ff ffcd 	bl	8002f3c <HAL_RCC_GetHCLKFreq>
 8002fa2:	4601      	mov	r1, r0
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002fac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002fb0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	fa92 f2a2 	rbit	r2, r2
 8002fb8:	603a      	str	r2, [r7, #0]
  return result;
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	fab2 f282 	clz	r2, r2
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	40d3      	lsrs	r3, r2
 8002fc4:	4a04      	ldr	r2, [pc, #16]	; (8002fd8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002fc6:	5cd3      	ldrb	r3, [r2, r3]
 8002fc8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	080079d8 	.word	0x080079d8

08002fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b092      	sub	sp, #72	; 0x48
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002fec:	2300      	movs	r3, #0
 8002fee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 80cd 	beq.w	800319a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003000:	4b86      	ldr	r3, [pc, #536]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10e      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800300c:	4b83      	ldr	r3, [pc, #524]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	4a82      	ldr	r2, [pc, #520]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003016:	61d3      	str	r3, [r2, #28]
 8003018:	4b80      	ldr	r3, [pc, #512]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003024:	2301      	movs	r3, #1
 8003026:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302a:	4b7d      	ldr	r3, [pc, #500]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003032:	2b00      	cmp	r3, #0
 8003034:	d118      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003036:	4b7a      	ldr	r3, [pc, #488]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a79      	ldr	r2, [pc, #484]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800303c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003040:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003042:	f7fe f9f1 	bl	8001428 <HAL_GetTick>
 8003046:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003048:	e008      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800304a:	f7fe f9ed 	bl	8001428 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b64      	cmp	r3, #100	; 0x64
 8003056:	d901      	bls.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e0db      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305c:	4b70      	ldr	r3, [pc, #448]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0f0      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003068:	4b6c      	ldr	r3, [pc, #432]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003070:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003074:	2b00      	cmp	r3, #0
 8003076:	d07d      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003080:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003082:	429a      	cmp	r2, r3
 8003084:	d076      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003086:	4b65      	ldr	r3, [pc, #404]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003090:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003094:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003098:	fa93 f3a3 	rbit	r3, r3
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800309e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030a0:	fab3 f383 	clz	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	461a      	mov	r2, r3
 80030a8:	4b5e      	ldr	r3, [pc, #376]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	461a      	mov	r2, r3
 80030b0:	2301      	movs	r3, #1
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80030c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030c4:	fab3 f383 	clz	r3, r3
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	4b55      	ldr	r3, [pc, #340]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	461a      	mov	r2, r3
 80030d4:	2300      	movs	r3, #0
 80030d6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030d8:	4a50      	ldr	r2, [pc, #320]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030dc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d045      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7fe f99e 	bl	8001428 <HAL_GetTick>
 80030ec:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ee:	e00a      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f0:	f7fe f99a 	bl	8001428 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e086      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003106:	2302      	movs	r3, #2
 8003108:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310c:	fa93 f3a3 	rbit	r3, r3
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
 8003112:	2302      	movs	r3, #2
 8003114:	623b      	str	r3, [r7, #32]
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	61fb      	str	r3, [r7, #28]
  return result;
 800311e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003120:	fab3 f383 	clz	r3, r3
 8003124:	b2db      	uxtb	r3, r3
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f043 0302 	orr.w	r3, r3, #2
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d102      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003134:	4b39      	ldr	r3, [pc, #228]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	e007      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800313a:	2302      	movs	r3, #2
 800313c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	4b35      	ldr	r3, [pc, #212]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	2202      	movs	r2, #2
 800314c:	613a      	str	r2, [r7, #16]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	fa92 f2a2 	rbit	r2, r2
 8003154:	60fa      	str	r2, [r7, #12]
  return result;
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	fab2 f282 	clz	r2, r2
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	f002 021f 	and.w	r2, r2, #31
 8003168:	2101      	movs	r1, #1
 800316a:	fa01 f202 	lsl.w	r2, r1, r2
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0bd      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003174:	4b29      	ldr	r3, [pc, #164]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	4926      	ldr	r1, [pc, #152]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003182:	4313      	orrs	r3, r2
 8003184:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003186:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800318a:	2b01      	cmp	r3, #1
 800318c:	d105      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800318e:	4b23      	ldr	r3, [pc, #140]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	4a22      	ldr	r2, [pc, #136]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003198:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d008      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031a6:	4b1d      	ldr	r3, [pc, #116]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	f023 0203 	bic.w	r2, r3, #3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	491a      	ldr	r1, [pc, #104]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031c4:	4b15      	ldr	r3, [pc, #84]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	f023 0210 	bic.w	r2, r3, #16
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4912      	ldr	r1, [pc, #72]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d008      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80031e2:	4b0e      	ldr	r3, [pc, #56]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	490b      	ldr	r1, [pc, #44]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003200:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003204:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	4903      	ldr	r1, [pc, #12]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800320e:	4313      	orrs	r3, r2
 8003210:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3748      	adds	r7, #72	; 0x48
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40021000 	.word	0x40021000
 8003220:	40007000 	.word	0x40007000
 8003224:	10908100 	.word	0x10908100

08003228 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e049      	b.n	80032ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d106      	bne.n	8003254 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7fd febc 	bl	8000fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3304      	adds	r3, #4
 8003264:	4619      	mov	r1, r3
 8003266:	4610      	mov	r0, r2
 8003268:	f000 fc5c 	bl	8003b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e049      	b.n	800337c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d106      	bne.n	8003302 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f841 	bl	8003384 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2202      	movs	r2, #2
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3304      	adds	r3, #4
 8003312:	4619      	mov	r1, r3
 8003314:	4610      	mov	r0, r2
 8003316:	f000 fc05 	bl	8003b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d109      	bne.n	80033c0 <HAL_TIM_OC_Start_IT+0x28>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	bf14      	ite	ne
 80033b8:	2301      	movne	r3, #1
 80033ba:	2300      	moveq	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	e03c      	b.n	800343a <HAL_TIM_OC_Start_IT+0xa2>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d109      	bne.n	80033da <HAL_TIM_OC_Start_IT+0x42>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	bf14      	ite	ne
 80033d2:	2301      	movne	r3, #1
 80033d4:	2300      	moveq	r3, #0
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	e02f      	b.n	800343a <HAL_TIM_OC_Start_IT+0xa2>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d109      	bne.n	80033f4 <HAL_TIM_OC_Start_IT+0x5c>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	bf14      	ite	ne
 80033ec:	2301      	movne	r3, #1
 80033ee:	2300      	moveq	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	e022      	b.n	800343a <HAL_TIM_OC_Start_IT+0xa2>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2b0c      	cmp	r3, #12
 80033f8:	d109      	bne.n	800340e <HAL_TIM_OC_Start_IT+0x76>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b01      	cmp	r3, #1
 8003404:	bf14      	ite	ne
 8003406:	2301      	movne	r3, #1
 8003408:	2300      	moveq	r3, #0
 800340a:	b2db      	uxtb	r3, r3
 800340c:	e015      	b.n	800343a <HAL_TIM_OC_Start_IT+0xa2>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b10      	cmp	r3, #16
 8003412:	d109      	bne.n	8003428 <HAL_TIM_OC_Start_IT+0x90>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b01      	cmp	r3, #1
 800341e:	bf14      	ite	ne
 8003420:	2301      	movne	r3, #1
 8003422:	2300      	moveq	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	e008      	b.n	800343a <HAL_TIM_OC_Start_IT+0xa2>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b01      	cmp	r3, #1
 8003432:	bf14      	ite	ne
 8003434:	2301      	movne	r3, #1
 8003436:	2300      	moveq	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e0d3      	b.n	80035ea <HAL_TIM_OC_Start_IT+0x252>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d104      	bne.n	8003452 <HAL_TIM_OC_Start_IT+0xba>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003450:	e023      	b.n	800349a <HAL_TIM_OC_Start_IT+0x102>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b04      	cmp	r3, #4
 8003456:	d104      	bne.n	8003462 <HAL_TIM_OC_Start_IT+0xca>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003460:	e01b      	b.n	800349a <HAL_TIM_OC_Start_IT+0x102>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b08      	cmp	r3, #8
 8003466:	d104      	bne.n	8003472 <HAL_TIM_OC_Start_IT+0xda>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003470:	e013      	b.n	800349a <HAL_TIM_OC_Start_IT+0x102>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b0c      	cmp	r3, #12
 8003476:	d104      	bne.n	8003482 <HAL_TIM_OC_Start_IT+0xea>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003480:	e00b      	b.n	800349a <HAL_TIM_OC_Start_IT+0x102>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b10      	cmp	r3, #16
 8003486:	d104      	bne.n	8003492 <HAL_TIM_OC_Start_IT+0xfa>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003490:	e003      	b.n	800349a <HAL_TIM_OC_Start_IT+0x102>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2202      	movs	r2, #2
 8003496:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b0c      	cmp	r3, #12
 800349e:	d841      	bhi.n	8003524 <HAL_TIM_OC_Start_IT+0x18c>
 80034a0:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <HAL_TIM_OC_Start_IT+0x110>)
 80034a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a6:	bf00      	nop
 80034a8:	080034dd 	.word	0x080034dd
 80034ac:	08003525 	.word	0x08003525
 80034b0:	08003525 	.word	0x08003525
 80034b4:	08003525 	.word	0x08003525
 80034b8:	080034ef 	.word	0x080034ef
 80034bc:	08003525 	.word	0x08003525
 80034c0:	08003525 	.word	0x08003525
 80034c4:	08003525 	.word	0x08003525
 80034c8:	08003501 	.word	0x08003501
 80034cc:	08003525 	.word	0x08003525
 80034d0:	08003525 	.word	0x08003525
 80034d4:	08003525 	.word	0x08003525
 80034d8:	08003513 	.word	0x08003513
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0202 	orr.w	r2, r2, #2
 80034ea:	60da      	str	r2, [r3, #12]
      break;
 80034ec:	e01d      	b.n	800352a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 0204 	orr.w	r2, r2, #4
 80034fc:	60da      	str	r2, [r3, #12]
      break;
 80034fe:	e014      	b.n	800352a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0208 	orr.w	r2, r2, #8
 800350e:	60da      	str	r2, [r3, #12]
      break;
 8003510:	e00b      	b.n	800352a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0210 	orr.w	r2, r2, #16
 8003520:	60da      	str	r2, [r3, #12]
      break;
 8003522:	e002      	b.n	800352a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	73fb      	strb	r3, [r7, #15]
      break;
 8003528:	bf00      	nop
  }

  if (status == HAL_OK)
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d15b      	bne.n	80035e8 <HAL_TIM_OC_Start_IT+0x250>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2201      	movs	r2, #1
 8003536:	6839      	ldr	r1, [r7, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f000 feab 	bl	8004294 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a2c      	ldr	r2, [pc, #176]	; (80035f4 <HAL_TIM_OC_Start_IT+0x25c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d00e      	beq.n	8003566 <HAL_TIM_OC_Start_IT+0x1ce>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a2a      	ldr	r2, [pc, #168]	; (80035f8 <HAL_TIM_OC_Start_IT+0x260>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d009      	beq.n	8003566 <HAL_TIM_OC_Start_IT+0x1ce>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a29      	ldr	r2, [pc, #164]	; (80035fc <HAL_TIM_OC_Start_IT+0x264>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d004      	beq.n	8003566 <HAL_TIM_OC_Start_IT+0x1ce>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a27      	ldr	r2, [pc, #156]	; (8003600 <HAL_TIM_OC_Start_IT+0x268>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d101      	bne.n	800356a <HAL_TIM_OC_Start_IT+0x1d2>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <HAL_TIM_OC_Start_IT+0x1d4>
 800356a:	2300      	movs	r3, #0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d007      	beq.n	8003580 <HAL_TIM_OC_Start_IT+0x1e8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800357e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a1b      	ldr	r2, [pc, #108]	; (80035f4 <HAL_TIM_OC_Start_IT+0x25c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00e      	beq.n	80035a8 <HAL_TIM_OC_Start_IT+0x210>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003592:	d009      	beq.n	80035a8 <HAL_TIM_OC_Start_IT+0x210>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a1a      	ldr	r2, [pc, #104]	; (8003604 <HAL_TIM_OC_Start_IT+0x26c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d004      	beq.n	80035a8 <HAL_TIM_OC_Start_IT+0x210>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a15      	ldr	r2, [pc, #84]	; (80035f8 <HAL_TIM_OC_Start_IT+0x260>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d115      	bne.n	80035d4 <HAL_TIM_OC_Start_IT+0x23c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	4b16      	ldr	r3, [pc, #88]	; (8003608 <HAL_TIM_OC_Start_IT+0x270>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b06      	cmp	r3, #6
 80035b8:	d015      	beq.n	80035e6 <HAL_TIM_OC_Start_IT+0x24e>
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c0:	d011      	beq.n	80035e6 <HAL_TIM_OC_Start_IT+0x24e>
      {
        __HAL_TIM_ENABLE(htim);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0201 	orr.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d2:	e008      	b.n	80035e6 <HAL_TIM_OC_Start_IT+0x24e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	e000      	b.n	80035e8 <HAL_TIM_OC_Start_IT+0x250>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40012c00 	.word	0x40012c00
 80035f8:	40014000 	.word	0x40014000
 80035fc:	40014400 	.word	0x40014400
 8003600:	40014800 	.word	0x40014800
 8003604:	40000400 	.word	0x40000400
 8003608:	00010007 	.word	0x00010007

0800360c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b02      	cmp	r3, #2
 8003620:	d122      	bne.n	8003668 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b02      	cmp	r3, #2
 800362e:	d11b      	bne.n	8003668 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0202 	mvn.w	r2, #2
 8003638:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fa49 	bl	8003ae6 <HAL_TIM_IC_CaptureCallback>
 8003654:	e005      	b.n	8003662 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7fc ffa8 	bl	80005ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fa4c 	bl	8003afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b04      	cmp	r3, #4
 8003674:	d122      	bne.n	80036bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b04      	cmp	r3, #4
 8003682:	d11b      	bne.n	80036bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f06f 0204 	mvn.w	r2, #4
 800368c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2202      	movs	r2, #2
 8003692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fa1f 	bl	8003ae6 <HAL_TIM_IC_CaptureCallback>
 80036a8:	e005      	b.n	80036b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fc ff7e 	bl	80005ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fa22 	bl	8003afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d122      	bne.n	8003710 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d11b      	bne.n	8003710 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0208 	mvn.w	r2, #8
 80036e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2204      	movs	r2, #4
 80036e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f9f5 	bl	8003ae6 <HAL_TIM_IC_CaptureCallback>
 80036fc:	e005      	b.n	800370a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7fc ff54 	bl	80005ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f9f8 	bl	8003afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	2b10      	cmp	r3, #16
 800371c:	d122      	bne.n	8003764 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	2b10      	cmp	r3, #16
 800372a:	d11b      	bne.n	8003764 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0210 	mvn.w	r2, #16
 8003734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2208      	movs	r2, #8
 800373a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f9cb 	bl	8003ae6 <HAL_TIM_IC_CaptureCallback>
 8003750:	e005      	b.n	800375e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fc ff2a 	bl	80005ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f9ce 	bl	8003afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b01      	cmp	r3, #1
 8003770:	d10e      	bne.n	8003790 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b01      	cmp	r3, #1
 800377e:	d107      	bne.n	8003790 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f06f 0201 	mvn.w	r2, #1
 8003788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f9a1 	bl	8003ad2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379a:	2b80      	cmp	r3, #128	; 0x80
 800379c:	d10e      	bne.n	80037bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a8:	2b80      	cmp	r3, #128	; 0x80
 80037aa:	d107      	bne.n	80037bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 fe0a 	bl	80043d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ca:	d10e      	bne.n	80037ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d6:	2b80      	cmp	r3, #128	; 0x80
 80037d8:	d107      	bne.n	80037ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 fdfd 	bl	80043e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f4:	2b40      	cmp	r3, #64	; 0x40
 80037f6:	d10e      	bne.n	8003816 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003802:	2b40      	cmp	r3, #64	; 0x40
 8003804:	d107      	bne.n	8003816 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800380e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f97c 	bl	8003b0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b20      	cmp	r3, #32
 8003822:	d10e      	bne.n	8003842 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b20      	cmp	r3, #32
 8003830:	d107      	bne.n	8003842 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f06f 0220 	mvn.w	r2, #32
 800383a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 fdbd 	bl	80043bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_TIM_OC_ConfigChannel+0x1e>
 8003866:	2302      	movs	r3, #2
 8003868:	e066      	b.n	8003938 <HAL_TIM_OC_ConfigChannel+0xec>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b14      	cmp	r3, #20
 8003876:	d857      	bhi.n	8003928 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003878:	a201      	add	r2, pc, #4	; (adr r2, 8003880 <HAL_TIM_OC_ConfigChannel+0x34>)
 800387a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387e:	bf00      	nop
 8003880:	080038d5 	.word	0x080038d5
 8003884:	08003929 	.word	0x08003929
 8003888:	08003929 	.word	0x08003929
 800388c:	08003929 	.word	0x08003929
 8003890:	080038e3 	.word	0x080038e3
 8003894:	08003929 	.word	0x08003929
 8003898:	08003929 	.word	0x08003929
 800389c:	08003929 	.word	0x08003929
 80038a0:	080038f1 	.word	0x080038f1
 80038a4:	08003929 	.word	0x08003929
 80038a8:	08003929 	.word	0x08003929
 80038ac:	08003929 	.word	0x08003929
 80038b0:	080038ff 	.word	0x080038ff
 80038b4:	08003929 	.word	0x08003929
 80038b8:	08003929 	.word	0x08003929
 80038bc:	08003929 	.word	0x08003929
 80038c0:	0800390d 	.word	0x0800390d
 80038c4:	08003929 	.word	0x08003929
 80038c8:	08003929 	.word	0x08003929
 80038cc:	08003929 	.word	0x08003929
 80038d0:	0800391b 	.word	0x0800391b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 f99a 	bl	8003c14 <TIM_OC1_SetConfig>
      break;
 80038e0:	e025      	b.n	800392e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68b9      	ldr	r1, [r7, #8]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 fa19 	bl	8003d20 <TIM_OC2_SetConfig>
      break;
 80038ee:	e01e      	b.n	800392e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 fa92 	bl	8003e20 <TIM_OC3_SetConfig>
      break;
 80038fc:	e017      	b.n	800392e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68b9      	ldr	r1, [r7, #8]
 8003904:	4618      	mov	r0, r3
 8003906:	f000 fb09 	bl	8003f1c <TIM_OC4_SetConfig>
      break;
 800390a:	e010      	b.n	800392e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68b9      	ldr	r1, [r7, #8]
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fb66 	bl	8003fe4 <TIM_OC5_SetConfig>
      break;
 8003918:	e009      	b.n	800392e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68b9      	ldr	r1, [r7, #8]
 8003920:	4618      	mov	r0, r3
 8003922:	f000 fbbd 	bl	80040a0 <TIM_OC6_SetConfig>
      break;
 8003926:	e002      	b.n	800392e <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	75fb      	strb	r3, [r7, #23]
      break;
 800392c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003936:	7dfb      	ldrb	r3, [r7, #23]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_TIM_ConfigClockSource+0x1c>
 8003958:	2302      	movs	r3, #2
 800395a:	e0b6      	b.n	8003aca <HAL_TIM_ConfigClockSource+0x18a>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800397a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800397e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003986:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003998:	d03e      	beq.n	8003a18 <HAL_TIM_ConfigClockSource+0xd8>
 800399a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399e:	f200 8087 	bhi.w	8003ab0 <HAL_TIM_ConfigClockSource+0x170>
 80039a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a6:	f000 8086 	beq.w	8003ab6 <HAL_TIM_ConfigClockSource+0x176>
 80039aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ae:	d87f      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x170>
 80039b0:	2b70      	cmp	r3, #112	; 0x70
 80039b2:	d01a      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0xaa>
 80039b4:	2b70      	cmp	r3, #112	; 0x70
 80039b6:	d87b      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x170>
 80039b8:	2b60      	cmp	r3, #96	; 0x60
 80039ba:	d050      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x11e>
 80039bc:	2b60      	cmp	r3, #96	; 0x60
 80039be:	d877      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x170>
 80039c0:	2b50      	cmp	r3, #80	; 0x50
 80039c2:	d03c      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0xfe>
 80039c4:	2b50      	cmp	r3, #80	; 0x50
 80039c6:	d873      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x170>
 80039c8:	2b40      	cmp	r3, #64	; 0x40
 80039ca:	d058      	beq.n	8003a7e <HAL_TIM_ConfigClockSource+0x13e>
 80039cc:	2b40      	cmp	r3, #64	; 0x40
 80039ce:	d86f      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x170>
 80039d0:	2b30      	cmp	r3, #48	; 0x30
 80039d2:	d064      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x15e>
 80039d4:	2b30      	cmp	r3, #48	; 0x30
 80039d6:	d86b      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x170>
 80039d8:	2b20      	cmp	r3, #32
 80039da:	d060      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x15e>
 80039dc:	2b20      	cmp	r3, #32
 80039de:	d867      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x170>
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d05c      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x15e>
 80039e4:	2b10      	cmp	r3, #16
 80039e6:	d05a      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x15e>
 80039e8:	e062      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	6899      	ldr	r1, [r3, #8]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f000 fc2b 	bl	8004254 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	609a      	str	r2, [r3, #8]
      break;
 8003a16:	e04f      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6818      	ldr	r0, [r3, #0]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	6899      	ldr	r1, [r3, #8]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f000 fc14 	bl	8004254 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a3a:	609a      	str	r2, [r3, #8]
      break;
 8003a3c:	e03c      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	6859      	ldr	r1, [r3, #4]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f000 fb88 	bl	8004160 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2150      	movs	r1, #80	; 0x50
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 fbe1 	bl	800421e <TIM_ITRx_SetConfig>
      break;
 8003a5c:	e02c      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	6859      	ldr	r1, [r3, #4]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f000 fba7 	bl	80041be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2160      	movs	r1, #96	; 0x60
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fbd1 	bl	800421e <TIM_ITRx_SetConfig>
      break;
 8003a7c:	e01c      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	6859      	ldr	r1, [r3, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f000 fb68 	bl	8004160 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2140      	movs	r1, #64	; 0x40
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fbc1 	bl	800421e <TIM_ITRx_SetConfig>
      break;
 8003a9c:	e00c      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	f000 fbb8 	bl	800421e <TIM_ITRx_SetConfig>
      break;
 8003aae:	e003      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab4:	e000      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003ab6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
	...

08003b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a32      	ldr	r2, [pc, #200]	; (8003c00 <TIM_Base_SetConfig+0xdc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d007      	beq.n	8003b4c <TIM_Base_SetConfig+0x28>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b42:	d003      	beq.n	8003b4c <TIM_Base_SetConfig+0x28>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a2f      	ldr	r2, [pc, #188]	; (8003c04 <TIM_Base_SetConfig+0xe0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d108      	bne.n	8003b5e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a27      	ldr	r2, [pc, #156]	; (8003c00 <TIM_Base_SetConfig+0xdc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d013      	beq.n	8003b8e <TIM_Base_SetConfig+0x6a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6c:	d00f      	beq.n	8003b8e <TIM_Base_SetConfig+0x6a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a24      	ldr	r2, [pc, #144]	; (8003c04 <TIM_Base_SetConfig+0xe0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00b      	beq.n	8003b8e <TIM_Base_SetConfig+0x6a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a23      	ldr	r2, [pc, #140]	; (8003c08 <TIM_Base_SetConfig+0xe4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d007      	beq.n	8003b8e <TIM_Base_SetConfig+0x6a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a22      	ldr	r2, [pc, #136]	; (8003c0c <TIM_Base_SetConfig+0xe8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d003      	beq.n	8003b8e <TIM_Base_SetConfig+0x6a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a21      	ldr	r2, [pc, #132]	; (8003c10 <TIM_Base_SetConfig+0xec>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d108      	bne.n	8003ba0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a0e      	ldr	r2, [pc, #56]	; (8003c00 <TIM_Base_SetConfig+0xdc>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00b      	beq.n	8003be4 <TIM_Base_SetConfig+0xc0>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a0e      	ldr	r2, [pc, #56]	; (8003c08 <TIM_Base_SetConfig+0xe4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d007      	beq.n	8003be4 <TIM_Base_SetConfig+0xc0>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a0d      	ldr	r2, [pc, #52]	; (8003c0c <TIM_Base_SetConfig+0xe8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d003      	beq.n	8003be4 <TIM_Base_SetConfig+0xc0>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a0c      	ldr	r2, [pc, #48]	; (8003c10 <TIM_Base_SetConfig+0xec>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d103      	bne.n	8003bec <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	615a      	str	r2, [r3, #20]
}
 8003bf2:	bf00      	nop
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40012c00 	.word	0x40012c00
 8003c04:	40000400 	.word	0x40000400
 8003c08:	40014000 	.word	0x40014000
 8003c0c:	40014400 	.word	0x40014400
 8003c10:	40014800 	.word	0x40014800

08003c14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	f023 0201 	bic.w	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0303 	bic.w	r3, r3, #3
 8003c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f023 0302 	bic.w	r3, r3, #2
 8003c60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a28      	ldr	r2, [pc, #160]	; (8003d10 <TIM_OC1_SetConfig+0xfc>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00b      	beq.n	8003c8c <TIM_OC1_SetConfig+0x78>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a27      	ldr	r2, [pc, #156]	; (8003d14 <TIM_OC1_SetConfig+0x100>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d007      	beq.n	8003c8c <TIM_OC1_SetConfig+0x78>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a26      	ldr	r2, [pc, #152]	; (8003d18 <TIM_OC1_SetConfig+0x104>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d003      	beq.n	8003c8c <TIM_OC1_SetConfig+0x78>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a25      	ldr	r2, [pc, #148]	; (8003d1c <TIM_OC1_SetConfig+0x108>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d10c      	bne.n	8003ca6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f023 0308 	bic.w	r3, r3, #8
 8003c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f023 0304 	bic.w	r3, r3, #4
 8003ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a19      	ldr	r2, [pc, #100]	; (8003d10 <TIM_OC1_SetConfig+0xfc>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d00b      	beq.n	8003cc6 <TIM_OC1_SetConfig+0xb2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a18      	ldr	r2, [pc, #96]	; (8003d14 <TIM_OC1_SetConfig+0x100>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d007      	beq.n	8003cc6 <TIM_OC1_SetConfig+0xb2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a17      	ldr	r2, [pc, #92]	; (8003d18 <TIM_OC1_SetConfig+0x104>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d003      	beq.n	8003cc6 <TIM_OC1_SetConfig+0xb2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a16      	ldr	r2, [pc, #88]	; (8003d1c <TIM_OC1_SetConfig+0x108>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d111      	bne.n	8003cea <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	621a      	str	r2, [r3, #32]
}
 8003d04:	bf00      	nop
 8003d06:	371c      	adds	r7, #28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	40012c00 	.word	0x40012c00
 8003d14:	40014000 	.word	0x40014000
 8003d18:	40014400 	.word	0x40014400
 8003d1c:	40014800 	.word	0x40014800

08003d20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	f023 0210 	bic.w	r2, r3, #16
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f023 0320 	bic.w	r3, r3, #32
 8003d6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a24      	ldr	r2, [pc, #144]	; (8003e10 <TIM_OC2_SetConfig+0xf0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d10d      	bne.n	8003da0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a1b      	ldr	r2, [pc, #108]	; (8003e10 <TIM_OC2_SetConfig+0xf0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00b      	beq.n	8003dc0 <TIM_OC2_SetConfig+0xa0>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a1a      	ldr	r2, [pc, #104]	; (8003e14 <TIM_OC2_SetConfig+0xf4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d007      	beq.n	8003dc0 <TIM_OC2_SetConfig+0xa0>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a19      	ldr	r2, [pc, #100]	; (8003e18 <TIM_OC2_SetConfig+0xf8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d003      	beq.n	8003dc0 <TIM_OC2_SetConfig+0xa0>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a18      	ldr	r2, [pc, #96]	; (8003e1c <TIM_OC2_SetConfig+0xfc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d113      	bne.n	8003de8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dc6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dce:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	621a      	str	r2, [r3, #32]
}
 8003e02:	bf00      	nop
 8003e04:	371c      	adds	r7, #28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40012c00 	.word	0x40012c00
 8003e14:	40014000 	.word	0x40014000
 8003e18:	40014400 	.word	0x40014400
 8003e1c:	40014800 	.word	0x40014800

08003e20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 0303 	bic.w	r3, r3, #3
 8003e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a23      	ldr	r2, [pc, #140]	; (8003f0c <TIM_OC3_SetConfig+0xec>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d10d      	bne.n	8003e9e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	021b      	lsls	r3, r3, #8
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e9c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a1a      	ldr	r2, [pc, #104]	; (8003f0c <TIM_OC3_SetConfig+0xec>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00b      	beq.n	8003ebe <TIM_OC3_SetConfig+0x9e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a19      	ldr	r2, [pc, #100]	; (8003f10 <TIM_OC3_SetConfig+0xf0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d007      	beq.n	8003ebe <TIM_OC3_SetConfig+0x9e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a18      	ldr	r2, [pc, #96]	; (8003f14 <TIM_OC3_SetConfig+0xf4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d003      	beq.n	8003ebe <TIM_OC3_SetConfig+0x9e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a17      	ldr	r2, [pc, #92]	; (8003f18 <TIM_OC3_SetConfig+0xf8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d113      	bne.n	8003ee6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	621a      	str	r2, [r3, #32]
}
 8003f00:	bf00      	nop
 8003f02:	371c      	adds	r7, #28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	40012c00 	.word	0x40012c00
 8003f10:	40014000 	.word	0x40014000
 8003f14:	40014400 	.word	0x40014400
 8003f18:	40014800 	.word	0x40014800

08003f1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	021b      	lsls	r3, r3, #8
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	031b      	lsls	r3, r3, #12
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a16      	ldr	r2, [pc, #88]	; (8003fd4 <TIM_OC4_SetConfig+0xb8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00b      	beq.n	8003f98 <TIM_OC4_SetConfig+0x7c>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a15      	ldr	r2, [pc, #84]	; (8003fd8 <TIM_OC4_SetConfig+0xbc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d007      	beq.n	8003f98 <TIM_OC4_SetConfig+0x7c>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a14      	ldr	r2, [pc, #80]	; (8003fdc <TIM_OC4_SetConfig+0xc0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d003      	beq.n	8003f98 <TIM_OC4_SetConfig+0x7c>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a13      	ldr	r2, [pc, #76]	; (8003fe0 <TIM_OC4_SetConfig+0xc4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d109      	bne.n	8003fac <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	019b      	lsls	r3, r3, #6
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	621a      	str	r2, [r3, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40012c00 	.word	0x40012c00
 8003fd8:	40014000 	.word	0x40014000
 8003fdc:	40014400 	.word	0x40014400
 8003fe0:	40014800 	.word	0x40014800

08003fe4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004028:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	041b      	lsls	r3, r3, #16
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a15      	ldr	r2, [pc, #84]	; (8004090 <TIM_OC5_SetConfig+0xac>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00b      	beq.n	8004056 <TIM_OC5_SetConfig+0x72>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a14      	ldr	r2, [pc, #80]	; (8004094 <TIM_OC5_SetConfig+0xb0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d007      	beq.n	8004056 <TIM_OC5_SetConfig+0x72>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a13      	ldr	r2, [pc, #76]	; (8004098 <TIM_OC5_SetConfig+0xb4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d003      	beq.n	8004056 <TIM_OC5_SetConfig+0x72>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a12      	ldr	r2, [pc, #72]	; (800409c <TIM_OC5_SetConfig+0xb8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d109      	bne.n	800406a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	021b      	lsls	r3, r3, #8
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	621a      	str	r2, [r3, #32]
}
 8004084:	bf00      	nop
 8004086:	371c      	adds	r7, #28
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	40012c00 	.word	0x40012c00
 8004094:	40014000 	.word	0x40014000
 8004098:	40014400 	.word	0x40014400
 800409c:	40014800 	.word	0x40014800

080040a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	051b      	lsls	r3, r3, #20
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a16      	ldr	r2, [pc, #88]	; (8004150 <TIM_OC6_SetConfig+0xb0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00b      	beq.n	8004114 <TIM_OC6_SetConfig+0x74>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a15      	ldr	r2, [pc, #84]	; (8004154 <TIM_OC6_SetConfig+0xb4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d007      	beq.n	8004114 <TIM_OC6_SetConfig+0x74>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a14      	ldr	r2, [pc, #80]	; (8004158 <TIM_OC6_SetConfig+0xb8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <TIM_OC6_SetConfig+0x74>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a13      	ldr	r2, [pc, #76]	; (800415c <TIM_OC6_SetConfig+0xbc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d109      	bne.n	8004128 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800411a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	029b      	lsls	r3, r3, #10
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	621a      	str	r2, [r3, #32]
}
 8004142:	bf00      	nop
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40012c00 	.word	0x40012c00
 8004154:	40014000 	.word	0x40014000
 8004158:	40014400 	.word	0x40014400
 800415c:	40014800 	.word	0x40014800

08004160 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	f023 0201 	bic.w	r2, r3, #1
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800418a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f023 030a 	bic.w	r3, r3, #10
 800419c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	621a      	str	r2, [r3, #32]
}
 80041b2:	bf00      	nop
 80041b4:	371c      	adds	r7, #28
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041be:	b480      	push	{r7}
 80041c0:	b087      	sub	sp, #28
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f023 0210 	bic.w	r2, r3, #16
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	031b      	lsls	r3, r3, #12
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	621a      	str	r2, [r3, #32]
}
 8004212:	bf00      	nop
 8004214:	371c      	adds	r7, #28
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800421e:	b480      	push	{r7}
 8004220:	b085      	sub	sp, #20
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004234:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	f043 0307 	orr.w	r3, r3, #7
 8004240:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	609a      	str	r2, [r3, #8]
}
 8004248:	bf00      	nop
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800426e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	021a      	lsls	r2, r3, #8
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	431a      	orrs	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	4313      	orrs	r3, r2
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	4313      	orrs	r3, r2
 8004280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	609a      	str	r2, [r3, #8]
}
 8004288:	bf00      	nop
 800428a:	371c      	adds	r7, #28
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f003 031f 	and.w	r3, r3, #31
 80042a6:	2201      	movs	r2, #1
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a1a      	ldr	r2, [r3, #32]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	43db      	mvns	r3, r3
 80042b6:	401a      	ands	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a1a      	ldr	r2, [r3, #32]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	fa01 f303 	lsl.w	r3, r1, r3
 80042cc:	431a      	orrs	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	621a      	str	r2, [r3, #32]
}
 80042d2:	bf00      	nop
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
	...

080042e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e054      	b.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a24      	ldr	r2, [pc, #144]	; (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d108      	bne.n	8004334 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004328:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4313      	orrs	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a17      	ldr	r2, [pc, #92]	; (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d00e      	beq.n	8004376 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004360:	d009      	beq.n	8004376 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a13      	ldr	r2, [pc, #76]	; (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d004      	beq.n	8004376 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a11      	ldr	r2, [pc, #68]	; (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d10c      	bne.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800437c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	4313      	orrs	r3, r2
 8004386:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40012c00 	.word	0x40012c00
 80043b4:	40000400 	.word	0x40000400
 80043b8:	40014000 	.word	0x40014000

080043bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e040      	b.n	800448c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fc fe16 	bl	800104c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2224      	movs	r2, #36	; 0x24
 8004424:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0201 	bic.w	r2, r2, #1
 8004434:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fe46 	bl	80050c8 <UART_SetConfig>
 800443c:	4603      	mov	r3, r0
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e022      	b.n	800448c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 ff70 	bl	8005334 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004462:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004472:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 fff7 	bl	8005478 <UART_CheckIdleState>
 800448a:	4603      	mov	r3, r0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e048      	b.n	8004538 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d106      	bne.n	80044bc <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fc fdc8 	bl	800104c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2224      	movs	r2, #36	; 0x24
 80044c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0201 	bic.w	r2, r2, #1
 80044d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 fdf8 	bl	80050c8 <UART_SetConfig>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e02a      	b.n	8004538 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 ff22 	bl	8005334 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800450e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0208 	orr.w	r2, r2, #8
 800451e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 ffa1 	bl	8005478 <UART_CheckIdleState>
 8004536:	4603      	mov	r3, r0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b08a      	sub	sp, #40	; 0x28
 8004544:	af02      	add	r7, sp, #8
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	4613      	mov	r3, r2
 800454e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004554:	2b20      	cmp	r3, #32
 8004556:	f040 8082 	bne.w	800465e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <HAL_UART_Transmit+0x26>
 8004560:	88fb      	ldrh	r3, [r7, #6]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e07a      	b.n	8004660 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_UART_Transmit+0x38>
 8004574:	2302      	movs	r3, #2
 8004576:	e073      	b.n	8004660 <HAL_UART_Transmit+0x120>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2221      	movs	r2, #33	; 0x21
 800458c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800458e:	f7fc ff4b 	bl	8001428 <HAL_GetTick>
 8004592:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	88fa      	ldrh	r2, [r7, #6]
 8004598:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	88fa      	ldrh	r2, [r7, #6]
 80045a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ac:	d108      	bne.n	80045c0 <HAL_UART_Transmit+0x80>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d104      	bne.n	80045c0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	e003      	b.n	80045c8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045c4:	2300      	movs	r3, #0
 80045c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80045d0:	e02d      	b.n	800462e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2200      	movs	r2, #0
 80045da:	2180      	movs	r1, #128	; 0x80
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 ff94 	bl	800550a <UART_WaitOnFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e039      	b.n	8004660 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10b      	bne.n	800460a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	881a      	ldrh	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045fe:	b292      	uxth	r2, r2
 8004600:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	3302      	adds	r3, #2
 8004606:	61bb      	str	r3, [r7, #24]
 8004608:	e008      	b.n	800461c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	781a      	ldrb	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	b292      	uxth	r2, r2
 8004614:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	3301      	adds	r3, #1
 800461a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004622:	b29b      	uxth	r3, r3
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1cb      	bne.n	80045d2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2200      	movs	r2, #0
 8004642:	2140      	movs	r1, #64	; 0x40
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 ff60 	bl	800550a <UART_WaitOnFlagUntilTimeout>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e005      	b.n	8004660 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2220      	movs	r2, #32
 8004658:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	e000      	b.n	8004660 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800465e:	2302      	movs	r3, #2
  }
}
 8004660:	4618      	mov	r0, r3
 8004662:	3720      	adds	r7, #32
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08a      	sub	sp, #40	; 0x28
 800466c:	af02      	add	r7, sp, #8
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	4613      	mov	r3, r2
 8004676:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800467c:	2b20      	cmp	r3, #32
 800467e:	f040 80bf 	bne.w	8004800 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <HAL_UART_Receive+0x26>
 8004688:	88fb      	ldrh	r3, [r7, #6]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e0b7      	b.n	8004802 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_UART_Receive+0x38>
 800469c:	2302      	movs	r3, #2
 800469e:	e0b0      	b.n	8004802 <HAL_UART_Receive+0x19a>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2222      	movs	r2, #34	; 0x22
 80046b4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046bc:	f7fc feb4 	bl	8001428 <HAL_GetTick>
 80046c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	88fa      	ldrh	r2, [r7, #6]
 80046c6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	88fa      	ldrh	r2, [r7, #6]
 80046ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046da:	d10e      	bne.n	80046fa <HAL_UART_Receive+0x92>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d105      	bne.n	80046f0 <HAL_UART_Receive+0x88>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80046ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046ee:	e02d      	b.n	800474c <HAL_UART_Receive+0xe4>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	22ff      	movs	r2, #255	; 0xff
 80046f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046f8:	e028      	b.n	800474c <HAL_UART_Receive+0xe4>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10d      	bne.n	800471e <HAL_UART_Receive+0xb6>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d104      	bne.n	8004714 <HAL_UART_Receive+0xac>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	22ff      	movs	r2, #255	; 0xff
 800470e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004712:	e01b      	b.n	800474c <HAL_UART_Receive+0xe4>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	227f      	movs	r2, #127	; 0x7f
 8004718:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800471c:	e016      	b.n	800474c <HAL_UART_Receive+0xe4>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004726:	d10d      	bne.n	8004744 <HAL_UART_Receive+0xdc>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d104      	bne.n	800473a <HAL_UART_Receive+0xd2>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	227f      	movs	r2, #127	; 0x7f
 8004734:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004738:	e008      	b.n	800474c <HAL_UART_Receive+0xe4>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	223f      	movs	r2, #63	; 0x3f
 800473e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004742:	e003      	b.n	800474c <HAL_UART_Receive+0xe4>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004752:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475c:	d108      	bne.n	8004770 <HAL_UART_Receive+0x108>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d104      	bne.n	8004770 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004766:	2300      	movs	r3, #0
 8004768:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	61bb      	str	r3, [r7, #24]
 800476e:	e003      	b.n	8004778 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004774:	2300      	movs	r3, #0
 8004776:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004780:	e033      	b.n	80047ea <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2200      	movs	r2, #0
 800478a:	2120      	movs	r1, #32
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 febc 	bl	800550a <UART_WaitOnFlagUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e032      	b.n	8004802 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10c      	bne.n	80047bc <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	8a7b      	ldrh	r3, [r7, #18]
 80047ac:	4013      	ands	r3, r2
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	3302      	adds	r3, #2
 80047b8:	61bb      	str	r3, [r7, #24]
 80047ba:	e00d      	b.n	80047d8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	8a7b      	ldrh	r3, [r7, #18]
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	4013      	ands	r3, r2
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	3301      	adds	r3, #1
 80047d6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1c5      	bne.n	8004782 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2220      	movs	r2, #32
 80047fa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	e000      	b.n	8004802 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004800:	2302      	movs	r3, #2
  }
}
 8004802:	4618      	mov	r0, r3
 8004804:	3720      	adds	r7, #32
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800480c:	b480      	push	{r7}
 800480e:	b08b      	sub	sp, #44	; 0x2c
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	4613      	mov	r3, r2
 8004818:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800481e:	2b20      	cmp	r3, #32
 8004820:	d156      	bne.n	80048d0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <HAL_UART_Transmit_IT+0x22>
 8004828:	88fb      	ldrh	r3, [r7, #6]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e04f      	b.n	80048d2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_UART_Transmit_IT+0x34>
 800483c:	2302      	movs	r3, #2
 800483e:	e048      	b.n	80048d2 <HAL_UART_Transmit_IT+0xc6>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	88fa      	ldrh	r2, [r7, #6]
 8004852:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	88fa      	ldrh	r2, [r7, #6]
 800485a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2221      	movs	r2, #33	; 0x21
 8004870:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800487a:	d107      	bne.n	800488c <HAL_UART_Transmit_IT+0x80>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d103      	bne.n	800488c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4a16      	ldr	r2, [pc, #88]	; (80048e0 <HAL_UART_Transmit_IT+0xd4>)
 8004888:	669a      	str	r2, [r3, #104]	; 0x68
 800488a:	e002      	b.n	8004892 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4a15      	ldr	r2, [pc, #84]	; (80048e4 <HAL_UART_Transmit_IT+0xd8>)
 8004890:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	613b      	str	r3, [r7, #16]
   return(result);
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	623b      	str	r3, [r7, #32]
 80048ba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	69f9      	ldr	r1, [r7, #28]
 80048be:	6a3a      	ldr	r2, [r7, #32]
 80048c0:	e841 2300 	strex	r3, r2, [r1]
 80048c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e6      	bne.n	800489a <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	e000      	b.n	80048d2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80048d0:	2302      	movs	r3, #2
  }
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	372c      	adds	r7, #44	; 0x2c
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	08005997 	.word	0x08005997
 80048e4:	080058df 	.word	0x080058df

080048e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08a      	sub	sp, #40	; 0x28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	4613      	mov	r3, r2
 80048f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048fa:	2b20      	cmp	r3, #32
 80048fc:	d13d      	bne.n	800497a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <HAL_UART_Receive_IT+0x22>
 8004904:	88fb      	ldrh	r3, [r7, #6]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e036      	b.n	800497c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_UART_Receive_IT+0x34>
 8004918:	2302      	movs	r3, #2
 800491a:	e02f      	b.n	800497c <HAL_UART_Receive_IT+0x94>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d018      	beq.n	800496a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	613b      	str	r3, [r7, #16]
   return(result);
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800494c:	627b      	str	r3, [r7, #36]	; 0x24
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	623b      	str	r3, [r7, #32]
 8004958:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	69f9      	ldr	r1, [r7, #28]
 800495c:	6a3a      	ldr	r2, [r7, #32]
 800495e:	e841 2300 	strex	r3, r2, [r1]
 8004962:	61bb      	str	r3, [r7, #24]
   return(result);
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1e6      	bne.n	8004938 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800496a:	88fb      	ldrh	r3, [r7, #6]
 800496c:	461a      	mov	r2, r3
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 fe8f 	bl	8005694 <UART_Start_Receive_IT>
 8004976:	4603      	mov	r3, r0
 8004978:	e000      	b.n	800497c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800497a:	2302      	movs	r3, #2
  }
}
 800497c:	4618      	mov	r0, r3
 800497e:	3728      	adds	r7, #40	; 0x28
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b0ba      	sub	sp, #232	; 0xe8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80049ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80049b2:	4013      	ands	r3, r2
 80049b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80049b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d115      	bne.n	80049ec <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80049c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c4:	f003 0320 	and.w	r3, r3, #32
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00f      	beq.n	80049ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d009      	beq.n	80049ec <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 82a3 	beq.w	8004f28 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	4798      	blx	r3
      }
      return;
 80049ea:	e29d      	b.n	8004f28 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80049ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 8117 	beq.w	8004c24 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80049f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004a06:	4b85      	ldr	r3, [pc, #532]	; (8004c1c <HAL_UART_IRQHandler+0x298>)
 8004a08:	4013      	ands	r3, r2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 810a 	beq.w	8004c24 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d011      	beq.n	8004a40 <HAL_UART_IRQHandler+0xbc>
 8004a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00b      	beq.n	8004a40 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a36:	f043 0201 	orr.w	r2, r3, #1
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d011      	beq.n	8004a70 <HAL_UART_IRQHandler+0xec>
 8004a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00b      	beq.n	8004a70 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a66:	f043 0204 	orr.w	r2, r3, #4
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d011      	beq.n	8004aa0 <HAL_UART_IRQHandler+0x11c>
 8004a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00b      	beq.n	8004aa0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2204      	movs	r2, #4
 8004a8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a96:	f043 0202 	orr.w	r2, r3, #2
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa4:	f003 0308 	and.w	r3, r3, #8
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d017      	beq.n	8004adc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab0:	f003 0320 	and.w	r3, r3, #32
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d105      	bne.n	8004ac4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004abc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00b      	beq.n	8004adc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2208      	movs	r2, #8
 8004aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ad2:	f043 0208 	orr.w	r2, r3, #8
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d012      	beq.n	8004b0e <HAL_UART_IRQHandler+0x18a>
 8004ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00c      	beq.n	8004b0e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004afc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b04:	f043 0220 	orr.w	r2, r3, #32
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8209 	beq.w	8004f2c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00d      	beq.n	8004b42 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b2a:	f003 0320 	and.w	r3, r3, #32
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d007      	beq.n	8004b42 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b56:	2b40      	cmp	r3, #64	; 0x40
 8004b58:	d005      	beq.n	8004b66 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d04f      	beq.n	8004c06 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fe40 	bl	80057ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b76:	2b40      	cmp	r3, #64	; 0x40
 8004b78:	d141      	bne.n	8004bfe <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3308      	adds	r3, #8
 8004b80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3308      	adds	r3, #8
 8004ba2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ba6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004baa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bb6:	e841 2300 	strex	r3, r2, [r1]
 8004bba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1d9      	bne.n	8004b7a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d013      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd2:	4a13      	ldr	r2, [pc, #76]	; (8004c20 <HAL_UART_IRQHandler+0x29c>)
 8004bd4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fc fd9e 	bl	800171c <HAL_DMA_Abort_IT>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d017      	beq.n	8004c16 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf4:	e00f      	b.n	8004c16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f9ac 	bl	8004f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bfc:	e00b      	b.n	8004c16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f9a8 	bl	8004f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c04:	e007      	b.n	8004c16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f9a4 	bl	8004f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004c14:	e18a      	b.n	8004f2c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c16:	bf00      	nop
    return;
 8004c18:	e188      	b.n	8004f2c <HAL_UART_IRQHandler+0x5a8>
 8004c1a:	bf00      	nop
 8004c1c:	04000120 	.word	0x04000120
 8004c20:	080058b3 	.word	0x080058b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	f040 8143 	bne.w	8004eb4 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c32:	f003 0310 	and.w	r3, r3, #16
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 813c 	beq.w	8004eb4 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c40:	f003 0310 	and.w	r3, r3, #16
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 8135 	beq.w	8004eb4 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2210      	movs	r2, #16
 8004c50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5c:	2b40      	cmp	r3, #64	; 0x40
 8004c5e:	f040 80b1 	bne.w	8004dc4 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c6e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 815c 	beq.w	8004f30 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c82:	429a      	cmp	r2, r3
 8004c84:	f080 8154 	bcs.w	8004f30 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	2b20      	cmp	r3, #32
 8004c9a:	f000 8085 	beq.w	8004da8 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004caa:	e853 3f00 	ldrex	r3, [r3]
 8004cae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cc8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ccc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004cd4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cd8:	e841 2300 	strex	r3, r2, [r1]
 8004cdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ce0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1da      	bne.n	8004c9e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3308      	adds	r3, #8
 8004cee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cf2:	e853 3f00 	ldrex	r3, [r3]
 8004cf6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004cf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cfa:	f023 0301 	bic.w	r3, r3, #1
 8004cfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3308      	adds	r3, #8
 8004d08:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d0c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d10:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d12:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d14:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d18:	e841 2300 	strex	r3, r2, [r1]
 8004d1c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1e1      	bne.n	8004ce8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3308      	adds	r3, #8
 8004d2a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d2e:	e853 3f00 	ldrex	r3, [r3]
 8004d32:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	3308      	adds	r3, #8
 8004d44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d48:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d4e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d50:	e841 2300 	strex	r3, r2, [r1]
 8004d54:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1e3      	bne.n	8004d24 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d78:	f023 0310 	bic.w	r3, r3, #16
 8004d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d8c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e4      	bne.n	8004d68 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fc fc81 	bl	80016aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f8d3 	bl	8004f68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dc2:	e0b5      	b.n	8004f30 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 80a7 	beq.w	8004f34 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004de6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 80a2 	beq.w	8004f34 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e12:	647b      	str	r3, [r7, #68]	; 0x44
 8004e14:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e4      	bne.n	8004df0 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	e853 3f00 	ldrex	r3, [r3]
 8004e34:	623b      	str	r3, [r7, #32]
   return(result);
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	f023 0301 	bic.w	r3, r3, #1
 8004e3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3308      	adds	r3, #8
 8004e46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e4a:	633a      	str	r2, [r7, #48]	; 0x30
 8004e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e52:	e841 2300 	strex	r3, r2, [r1]
 8004e56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1e3      	bne.n	8004e26 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2220      	movs	r2, #32
 8004e62:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f023 0310 	bic.w	r3, r3, #16
 8004e84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e92:	61fb      	str	r3, [r7, #28]
 8004e94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	69b9      	ldr	r1, [r7, #24]
 8004e98:	69fa      	ldr	r2, [r7, #28]
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	617b      	str	r3, [r7, #20]
   return(result);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e4      	bne.n	8004e70 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ea6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004eaa:	4619      	mov	r1, r3
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f85b 	bl	8004f68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004eb2:	e03f      	b.n	8004f34 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00e      	beq.n	8004ede <HAL_UART_IRQHandler+0x55a>
 8004ec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ec4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d008      	beq.n	8004ede <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ed4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 ff43 	bl	8005d62 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004edc:	e02d      	b.n	8004f3a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00e      	beq.n	8004f08 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d008      	beq.n	8004f08 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d01c      	beq.n	8004f38 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	4798      	blx	r3
    }
    return;
 8004f06:	e017      	b.n	8004f38 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d012      	beq.n	8004f3a <HAL_UART_IRQHandler+0x5b6>
 8004f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00c      	beq.n	8004f3a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fd98 	bl	8005a56 <UART_EndTransmit_IT>
    return;
 8004f26:	e008      	b.n	8004f3a <HAL_UART_IRQHandler+0x5b6>
      return;
 8004f28:	bf00      	nop
 8004f2a:	e006      	b.n	8004f3a <HAL_UART_IRQHandler+0x5b6>
    return;
 8004f2c:	bf00      	nop
 8004f2e:	e004      	b.n	8004f3a <HAL_UART_IRQHandler+0x5b6>
      return;
 8004f30:	bf00      	nop
 8004f32:	e002      	b.n	8004f3a <HAL_UART_IRQHandler+0x5b6>
      return;
 8004f34:	bf00      	nop
 8004f36:	e000      	b.n	8004f3a <HAL_UART_IRQHandler+0x5b6>
    return;
 8004f38:	bf00      	nop
  }

}
 8004f3a:	37e8      	adds	r7, #232	; 0xe8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b08f      	sub	sp, #60	; 0x3c
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d101      	bne.n	8004f96 <HAL_HalfDuplex_EnableTransmitter+0x16>
 8004f92:	2302      	movs	r3, #2
 8004f94:	e040      	b.n	8005018 <HAL_HalfDuplex_EnableTransmitter+0x98>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2224      	movs	r2, #36	; 0x24
 8004fa2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	e853 3f00 	ldrex	r3, [r3]
 8004fb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	f023 030c 	bic.w	r3, r3, #12
 8004fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fc4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fca:	e841 2300 	strex	r3, r2, [r1]
 8004fce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1e6      	bne.n	8004fa4 <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	e853 3f00 	ldrex	r3, [r3]
 8004fe2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f043 0308 	orr.w	r3, r3, #8
 8004fea:	633b      	str	r3, [r7, #48]	; 0x30
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	6979      	ldr	r1, [r7, #20]
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	613b      	str	r3, [r7, #16]
   return(result);
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e6      	bne.n	8004fd6 <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	373c      	adds	r7, #60	; 0x3c
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8005024:	b480      	push	{r7}
 8005026:	b08f      	sub	sp, #60	; 0x3c
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <HAL_HalfDuplex_EnableReceiver+0x16>
 8005036:	2302      	movs	r3, #2
 8005038:	e040      	b.n	80050bc <HAL_HalfDuplex_EnableReceiver+0x98>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2224      	movs	r2, #36	; 0x24
 8005046:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	61fb      	str	r3, [r7, #28]
   return(result);
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	f023 030c 	bic.w	r3, r3, #12
 800505c:	637b      	str	r3, [r7, #52]	; 0x34
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005068:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800506c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e6      	bne.n	8005048 <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	e853 3f00 	ldrex	r3, [r3]
 8005086:	60bb      	str	r3, [r7, #8]
   return(result);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f043 0304 	orr.w	r3, r3, #4
 800508e:	633b      	str	r3, [r7, #48]	; 0x30
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	61bb      	str	r3, [r7, #24]
 800509a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509c:	6979      	ldr	r1, [r7, #20]
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	e841 2300 	strex	r3, r2, [r1]
 80050a4:	613b      	str	r3, [r7, #16]
   return(result);
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1e6      	bne.n	800507a <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2220      	movs	r2, #32
 80050b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	373c      	adds	r7, #60	; 0x3c
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b088      	sub	sp, #32
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b8a      	ldr	r3, [pc, #552]	; (800531c <UART_SetConfig+0x254>)
 80050f4:	4013      	ands	r3, r2
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	6812      	ldr	r2, [r2, #0]
 80050fa:	6979      	ldr	r1, [r7, #20]
 80050fc:	430b      	orrs	r3, r1
 80050fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	430a      	orrs	r2, r1
 8005138:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a78      	ldr	r2, [pc, #480]	; (8005320 <UART_SetConfig+0x258>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d120      	bne.n	8005186 <UART_SetConfig+0xbe>
 8005144:	4b77      	ldr	r3, [pc, #476]	; (8005324 <UART_SetConfig+0x25c>)
 8005146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005148:	f003 0303 	and.w	r3, r3, #3
 800514c:	2b03      	cmp	r3, #3
 800514e:	d817      	bhi.n	8005180 <UART_SetConfig+0xb8>
 8005150:	a201      	add	r2, pc, #4	; (adr r2, 8005158 <UART_SetConfig+0x90>)
 8005152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005156:	bf00      	nop
 8005158:	08005169 	.word	0x08005169
 800515c:	08005175 	.word	0x08005175
 8005160:	0800517b 	.word	0x0800517b
 8005164:	0800516f 	.word	0x0800516f
 8005168:	2300      	movs	r3, #0
 800516a:	77fb      	strb	r3, [r7, #31]
 800516c:	e01d      	b.n	80051aa <UART_SetConfig+0xe2>
 800516e:	2302      	movs	r3, #2
 8005170:	77fb      	strb	r3, [r7, #31]
 8005172:	e01a      	b.n	80051aa <UART_SetConfig+0xe2>
 8005174:	2304      	movs	r3, #4
 8005176:	77fb      	strb	r3, [r7, #31]
 8005178:	e017      	b.n	80051aa <UART_SetConfig+0xe2>
 800517a:	2308      	movs	r3, #8
 800517c:	77fb      	strb	r3, [r7, #31]
 800517e:	e014      	b.n	80051aa <UART_SetConfig+0xe2>
 8005180:	2310      	movs	r3, #16
 8005182:	77fb      	strb	r3, [r7, #31]
 8005184:	e011      	b.n	80051aa <UART_SetConfig+0xe2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a67      	ldr	r2, [pc, #412]	; (8005328 <UART_SetConfig+0x260>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d102      	bne.n	8005196 <UART_SetConfig+0xce>
 8005190:	2300      	movs	r3, #0
 8005192:	77fb      	strb	r3, [r7, #31]
 8005194:	e009      	b.n	80051aa <UART_SetConfig+0xe2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a64      	ldr	r2, [pc, #400]	; (800532c <UART_SetConfig+0x264>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d102      	bne.n	80051a6 <UART_SetConfig+0xde>
 80051a0:	2300      	movs	r3, #0
 80051a2:	77fb      	strb	r3, [r7, #31]
 80051a4:	e001      	b.n	80051aa <UART_SetConfig+0xe2>
 80051a6:	2310      	movs	r3, #16
 80051a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051b2:	d15b      	bne.n	800526c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80051b4:	7ffb      	ldrb	r3, [r7, #31]
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d827      	bhi.n	800520a <UART_SetConfig+0x142>
 80051ba:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <UART_SetConfig+0xf8>)
 80051bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c0:	080051e5 	.word	0x080051e5
 80051c4:	080051ed 	.word	0x080051ed
 80051c8:	080051f5 	.word	0x080051f5
 80051cc:	0800520b 	.word	0x0800520b
 80051d0:	080051fb 	.word	0x080051fb
 80051d4:	0800520b 	.word	0x0800520b
 80051d8:	0800520b 	.word	0x0800520b
 80051dc:	0800520b 	.word	0x0800520b
 80051e0:	08005203 	.word	0x08005203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051e4:	f7fd feb6 	bl	8002f54 <HAL_RCC_GetPCLK1Freq>
 80051e8:	61b8      	str	r0, [r7, #24]
        break;
 80051ea:	e013      	b.n	8005214 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051ec:	f7fd fed4 	bl	8002f98 <HAL_RCC_GetPCLK2Freq>
 80051f0:	61b8      	str	r0, [r7, #24]
        break;
 80051f2:	e00f      	b.n	8005214 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051f4:	4b4e      	ldr	r3, [pc, #312]	; (8005330 <UART_SetConfig+0x268>)
 80051f6:	61bb      	str	r3, [r7, #24]
        break;
 80051f8:	e00c      	b.n	8005214 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051fa:	f7fd fe35 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 80051fe:	61b8      	str	r0, [r7, #24]
        break;
 8005200:	e008      	b.n	8005214 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005206:	61bb      	str	r3, [r7, #24]
        break;
 8005208:	e004      	b.n	8005214 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800520a:	2300      	movs	r3, #0
 800520c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	77bb      	strb	r3, [r7, #30]
        break;
 8005212:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d074      	beq.n	8005304 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	005a      	lsls	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	085b      	lsrs	r3, r3, #1
 8005224:	441a      	add	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	fbb2 f3f3 	udiv	r3, r2, r3
 800522e:	b29b      	uxth	r3, r3
 8005230:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	2b0f      	cmp	r3, #15
 8005236:	d916      	bls.n	8005266 <UART_SetConfig+0x19e>
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800523e:	d212      	bcs.n	8005266 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	b29b      	uxth	r3, r3
 8005244:	f023 030f 	bic.w	r3, r3, #15
 8005248:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	085b      	lsrs	r3, r3, #1
 800524e:	b29b      	uxth	r3, r3
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	b29a      	uxth	r2, r3
 8005256:	89fb      	ldrh	r3, [r7, #14]
 8005258:	4313      	orrs	r3, r2
 800525a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	89fa      	ldrh	r2, [r7, #14]
 8005262:	60da      	str	r2, [r3, #12]
 8005264:	e04e      	b.n	8005304 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	77bb      	strb	r3, [r7, #30]
 800526a:	e04b      	b.n	8005304 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800526c:	7ffb      	ldrb	r3, [r7, #31]
 800526e:	2b08      	cmp	r3, #8
 8005270:	d827      	bhi.n	80052c2 <UART_SetConfig+0x1fa>
 8005272:	a201      	add	r2, pc, #4	; (adr r2, 8005278 <UART_SetConfig+0x1b0>)
 8005274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005278:	0800529d 	.word	0x0800529d
 800527c:	080052a5 	.word	0x080052a5
 8005280:	080052ad 	.word	0x080052ad
 8005284:	080052c3 	.word	0x080052c3
 8005288:	080052b3 	.word	0x080052b3
 800528c:	080052c3 	.word	0x080052c3
 8005290:	080052c3 	.word	0x080052c3
 8005294:	080052c3 	.word	0x080052c3
 8005298:	080052bb 	.word	0x080052bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800529c:	f7fd fe5a 	bl	8002f54 <HAL_RCC_GetPCLK1Freq>
 80052a0:	61b8      	str	r0, [r7, #24]
        break;
 80052a2:	e013      	b.n	80052cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052a4:	f7fd fe78 	bl	8002f98 <HAL_RCC_GetPCLK2Freq>
 80052a8:	61b8      	str	r0, [r7, #24]
        break;
 80052aa:	e00f      	b.n	80052cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052ac:	4b20      	ldr	r3, [pc, #128]	; (8005330 <UART_SetConfig+0x268>)
 80052ae:	61bb      	str	r3, [r7, #24]
        break;
 80052b0:	e00c      	b.n	80052cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052b2:	f7fd fdd9 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 80052b6:	61b8      	str	r0, [r7, #24]
        break;
 80052b8:	e008      	b.n	80052cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052be:	61bb      	str	r3, [r7, #24]
        break;
 80052c0:	e004      	b.n	80052cc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	77bb      	strb	r3, [r7, #30]
        break;
 80052ca:	bf00      	nop
    }

    if (pclk != 0U)
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d018      	beq.n	8005304 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	085a      	lsrs	r2, r3, #1
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	441a      	add	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	2b0f      	cmp	r3, #15
 80052ec:	d908      	bls.n	8005300 <UART_SetConfig+0x238>
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f4:	d204      	bcs.n	8005300 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	60da      	str	r2, [r3, #12]
 80052fe:	e001      	b.n	8005304 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005310:	7fbb      	ldrb	r3, [r7, #30]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3720      	adds	r7, #32
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	efff69f3 	.word	0xefff69f3
 8005320:	40013800 	.word	0x40013800
 8005324:	40021000 	.word	0x40021000
 8005328:	40004400 	.word	0x40004400
 800532c:	40004800 	.word	0x40004800
 8005330:	007a1200 	.word	0x007a1200

08005334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	f003 0310 	and.w	r3, r3, #16
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01a      	beq.n	800544a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005432:	d10a      	bne.n	800544a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	605a      	str	r2, [r3, #4]
  }
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af02      	add	r7, sp, #8
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005488:	f7fb ffce 	bl	8001428 <HAL_GetTick>
 800548c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b08      	cmp	r3, #8
 800549a:	d10e      	bne.n	80054ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800549c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f82d 	bl	800550a <UART_WaitOnFlagUntilTimeout>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e023      	b.n	8005502 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d10e      	bne.n	80054e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f817 	bl	800550a <UART_WaitOnFlagUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e00d      	b.n	8005502 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b09c      	sub	sp, #112	; 0x70
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	603b      	str	r3, [r7, #0]
 8005516:	4613      	mov	r3, r2
 8005518:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800551a:	e0a5      	b.n	8005668 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800551c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800551e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005522:	f000 80a1 	beq.w	8005668 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005526:	f7fb ff7f 	bl	8001428 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005532:	429a      	cmp	r2, r3
 8005534:	d302      	bcc.n	800553c <UART_WaitOnFlagUntilTimeout+0x32>
 8005536:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005538:	2b00      	cmp	r3, #0
 800553a:	d13e      	bne.n	80055ba <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800554a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800554c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005550:	667b      	str	r3, [r7, #100]	; 0x64
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800555a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800555c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005560:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005562:	e841 2300 	strex	r3, r2, [r1]
 8005566:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1e6      	bne.n	800553c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3308      	adds	r3, #8
 8005574:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	f023 0301 	bic.w	r3, r3, #1
 8005584:	663b      	str	r3, [r7, #96]	; 0x60
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3308      	adds	r3, #8
 800558c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800558e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005590:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800559c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e5      	bne.n	800556e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2220      	movs	r2, #32
 80055a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2220      	movs	r2, #32
 80055ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e067      	b.n	800568a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d04f      	beq.n	8005668 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d6:	d147      	bne.n	8005668 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	e853 3f00 	ldrex	r3, [r3]
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	461a      	mov	r2, r3
 80055fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005600:	637b      	str	r3, [r7, #52]	; 0x34
 8005602:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e6      	bne.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3308      	adds	r3, #8
 800561a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	613b      	str	r3, [r7, #16]
   return(result);
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f023 0301 	bic.w	r3, r3, #1
 800562a:	66bb      	str	r3, [r7, #104]	; 0x68
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3308      	adds	r3, #8
 8005632:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005634:	623a      	str	r2, [r7, #32]
 8005636:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	69f9      	ldr	r1, [r7, #28]
 800563a:	6a3a      	ldr	r2, [r7, #32]
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	61bb      	str	r3, [r7, #24]
   return(result);
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e5      	bne.n	8005614 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2220      	movs	r2, #32
 800564c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2220      	movs	r2, #32
 8005652:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e010      	b.n	800568a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	69da      	ldr	r2, [r3, #28]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	4013      	ands	r3, r2
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	429a      	cmp	r2, r3
 8005676:	bf0c      	ite	eq
 8005678:	2301      	moveq	r3, #1
 800567a:	2300      	movne	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	461a      	mov	r2, r3
 8005680:	79fb      	ldrb	r3, [r7, #7]
 8005682:	429a      	cmp	r2, r3
 8005684:	f43f af4a 	beq.w	800551c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3770      	adds	r7, #112	; 0x70
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005694:	b480      	push	{r7}
 8005696:	b091      	sub	sp, #68	; 0x44
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	4613      	mov	r3, r2
 80056a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	88fa      	ldrh	r2, [r7, #6]
 80056ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	88fa      	ldrh	r2, [r7, #6]
 80056b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c6:	d10e      	bne.n	80056e6 <UART_Start_Receive_IT+0x52>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d105      	bne.n	80056dc <UART_Start_Receive_IT+0x48>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80056d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056da:	e02d      	b.n	8005738 <UART_Start_Receive_IT+0xa4>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	22ff      	movs	r2, #255	; 0xff
 80056e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056e4:	e028      	b.n	8005738 <UART_Start_Receive_IT+0xa4>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10d      	bne.n	800570a <UART_Start_Receive_IT+0x76>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d104      	bne.n	8005700 <UART_Start_Receive_IT+0x6c>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	22ff      	movs	r2, #255	; 0xff
 80056fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056fe:	e01b      	b.n	8005738 <UART_Start_Receive_IT+0xa4>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	227f      	movs	r2, #127	; 0x7f
 8005704:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005708:	e016      	b.n	8005738 <UART_Start_Receive_IT+0xa4>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005712:	d10d      	bne.n	8005730 <UART_Start_Receive_IT+0x9c>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d104      	bne.n	8005726 <UART_Start_Receive_IT+0x92>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	227f      	movs	r2, #127	; 0x7f
 8005720:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005724:	e008      	b.n	8005738 <UART_Start_Receive_IT+0xa4>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	223f      	movs	r2, #63	; 0x3f
 800572a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800572e:	e003      	b.n	8005738 <UART_Start_Receive_IT+0xa4>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2222      	movs	r2, #34	; 0x22
 8005744:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3308      	adds	r3, #8
 800574c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	e853 3f00 	ldrex	r3, [r3]
 8005754:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	f043 0301 	orr.w	r3, r3, #1
 800575c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3308      	adds	r3, #8
 8005764:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005766:	637a      	str	r2, [r7, #52]	; 0x34
 8005768:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800576c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800576e:	e841 2300 	strex	r3, r2, [r1]
 8005772:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1e5      	bne.n	8005746 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005782:	d107      	bne.n	8005794 <UART_Start_Receive_IT+0x100>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d103      	bne.n	8005794 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4a15      	ldr	r2, [pc, #84]	; (80057e4 <UART_Start_Receive_IT+0x150>)
 8005790:	665a      	str	r2, [r3, #100]	; 0x64
 8005792:	e002      	b.n	800579a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4a14      	ldr	r2, [pc, #80]	; (80057e8 <UART_Start_Receive_IT+0x154>)
 8005798:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	e853 3f00 	ldrex	r3, [r3]
 80057ae:	613b      	str	r3, [r7, #16]
   return(result);
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80057b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	461a      	mov	r2, r3
 80057be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c0:	623b      	str	r3, [r7, #32]
 80057c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c4:	69f9      	ldr	r1, [r7, #28]
 80057c6:	6a3a      	ldr	r2, [r7, #32]
 80057c8:	e841 2300 	strex	r3, r2, [r1]
 80057cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1e6      	bne.n	80057a2 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3744      	adds	r7, #68	; 0x44
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	08005c07 	.word	0x08005c07
 80057e8:	08005aab 	.word	0x08005aab

080057ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b095      	sub	sp, #84	; 0x54
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fc:	e853 3f00 	ldrex	r3, [r3]
 8005800:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005804:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005808:	64fb      	str	r3, [r7, #76]	; 0x4c
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	461a      	mov	r2, r3
 8005810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005812:	643b      	str	r3, [r7, #64]	; 0x40
 8005814:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005816:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005818:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800581a:	e841 2300 	strex	r3, r2, [r1]
 800581e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1e6      	bne.n	80057f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3308      	adds	r3, #8
 800582c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	61fb      	str	r3, [r7, #28]
   return(result);
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	f023 0301 	bic.w	r3, r3, #1
 800583c:	64bb      	str	r3, [r7, #72]	; 0x48
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3308      	adds	r3, #8
 8005844:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005846:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005848:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800584c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e5      	bne.n	8005826 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800585e:	2b01      	cmp	r3, #1
 8005860:	d118      	bne.n	8005894 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	e853 3f00 	ldrex	r3, [r3]
 800586e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f023 0310 	bic.w	r3, r3, #16
 8005876:	647b      	str	r3, [r7, #68]	; 0x44
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	461a      	mov	r2, r3
 800587e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005880:	61bb      	str	r3, [r7, #24]
 8005882:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005884:	6979      	ldr	r1, [r7, #20]
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	e841 2300 	strex	r3, r2, [r1]
 800588c:	613b      	str	r3, [r7, #16]
   return(result);
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e6      	bne.n	8005862 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2220      	movs	r2, #32
 8005898:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80058a6:	bf00      	nop
 80058a8:	3754      	adds	r7, #84	; 0x54
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b084      	sub	sp, #16
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f7ff fb3f 	bl	8004f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058d6:	bf00      	nop
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80058de:	b480      	push	{r7}
 80058e0:	b08f      	sub	sp, #60	; 0x3c
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058ea:	2b21      	cmp	r3, #33	; 0x21
 80058ec:	d14d      	bne.n	800598a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d132      	bne.n	8005960 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	e853 3f00 	ldrex	r3, [r3]
 8005906:	61fb      	str	r3, [r7, #28]
   return(result);
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800590e:	637b      	str	r3, [r7, #52]	; 0x34
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	461a      	mov	r2, r3
 8005916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800591a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800591e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005920:	e841 2300 	strex	r3, r2, [r1]
 8005924:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e6      	bne.n	80058fa <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	60bb      	str	r3, [r7, #8]
   return(result);
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005940:	633b      	str	r3, [r7, #48]	; 0x30
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	461a      	mov	r2, r3
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	61bb      	str	r3, [r7, #24]
 800594c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	6979      	ldr	r1, [r7, #20]
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	e841 2300 	strex	r3, r2, [r1]
 8005956:	613b      	str	r3, [r7, #16]
   return(result);
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1e6      	bne.n	800592c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800595e:	e014      	b.n	800598a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005964:	781a      	ldrb	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	b292      	uxth	r2, r2
 800596c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800597e:	b29b      	uxth	r3, r3
 8005980:	3b01      	subs	r3, #1
 8005982:	b29a      	uxth	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800598a:	bf00      	nop
 800598c:	373c      	adds	r7, #60	; 0x3c
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005996:	b480      	push	{r7}
 8005998:	b091      	sub	sp, #68	; 0x44
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059a2:	2b21      	cmp	r3, #33	; 0x21
 80059a4:	d151      	bne.n	8005a4a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d132      	bne.n	8005a18 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	e853 3f00 	ldrex	r3, [r3]
 80059be:	623b      	str	r3, [r7, #32]
   return(result);
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	461a      	mov	r2, r3
 80059ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d0:	633b      	str	r3, [r7, #48]	; 0x30
 80059d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059d8:	e841 2300 	strex	r3, r2, [r1]
 80059dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1e6      	bne.n	80059b2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	e853 3f00 	ldrex	r3, [r3]
 80059f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059f8:	637b      	str	r3, [r7, #52]	; 0x34
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a02:	61fb      	str	r3, [r7, #28]
 8005a04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a06:	69b9      	ldr	r1, [r7, #24]
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	e841 2300 	strex	r3, r2, [r1]
 8005a0e:	617b      	str	r3, [r7, #20]
   return(result);
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1e6      	bne.n	80059e4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005a16:	e018      	b.n	8005a4a <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a20:	881a      	ldrh	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a2a:	b292      	uxth	r2, r2
 8005a2c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a32:	1c9a      	adds	r2, r3, #2
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005a4a:	bf00      	nop
 8005a4c:	3744      	adds	r7, #68	; 0x44
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b088      	sub	sp, #32
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	e853 3f00 	ldrex	r3, [r3]
 8005a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a72:	61fb      	str	r3, [r7, #28]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	61bb      	str	r3, [r7, #24]
 8005a7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	6979      	ldr	r1, [r7, #20]
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	e841 2300 	strex	r3, r2, [r1]
 8005a88:	613b      	str	r3, [r7, #16]
   return(result);
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e6      	bne.n	8005a5e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2220      	movs	r2, #32
 8005a94:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff fa4f 	bl	8004f40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aa2:	bf00      	nop
 8005aa4:	3720      	adds	r7, #32
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b096      	sub	sp, #88	; 0x58
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ab8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ac0:	2b22      	cmp	r3, #34	; 0x22
 8005ac2:	f040 8094 	bne.w	8005bee <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005acc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005ad0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005ad4:	b2d9      	uxtb	r1, r3
 8005ad6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae0:	400a      	ands	r2, r1
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	3b01      	subs	r3, #1
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d177      	bne.n	8005bfe <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	e853 3f00 	ldrex	r3, [r3]
 8005b1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b22:	653b      	str	r3, [r7, #80]	; 0x50
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b34:	e841 2300 	strex	r3, r2, [r1]
 8005b38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1e6      	bne.n	8005b0e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3308      	adds	r3, #8
 8005b46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	e853 3f00 	ldrex	r3, [r3]
 8005b4e:	623b      	str	r3, [r7, #32]
   return(result);
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	f023 0301 	bic.w	r3, r3, #1
 8005b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b60:	633a      	str	r2, [r7, #48]	; 0x30
 8005b62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b68:	e841 2300 	strex	r3, r2, [r1]
 8005b6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e5      	bne.n	8005b40 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d12e      	bne.n	8005be6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	e853 3f00 	ldrex	r3, [r3]
 8005b9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f023 0310 	bic.w	r3, r3, #16
 8005ba2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	461a      	mov	r2, r3
 8005baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bac:	61fb      	str	r3, [r7, #28]
 8005bae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	69b9      	ldr	r1, [r7, #24]
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e6      	bne.n	8005b8e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f003 0310 	and.w	r3, r3, #16
 8005bca:	2b10      	cmp	r3, #16
 8005bcc:	d103      	bne.n	8005bd6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2210      	movs	r2, #16
 8005bd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff f9c2 	bl	8004f68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005be4:	e00b      	b.n	8005bfe <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7fa feda 	bl	80009a0 <HAL_UART_RxCpltCallback>
}
 8005bec:	e007      	b.n	8005bfe <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	699a      	ldr	r2, [r3, #24]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0208 	orr.w	r2, r2, #8
 8005bfc:	619a      	str	r2, [r3, #24]
}
 8005bfe:	bf00      	nop
 8005c00:	3758      	adds	r7, #88	; 0x58
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b096      	sub	sp, #88	; 0x58
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c14:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c1c:	2b22      	cmp	r3, #34	; 0x22
 8005c1e:	f040 8094 	bne.w	8005d4a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005c28:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c30:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005c32:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005c36:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c40:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c46:	1c9a      	adds	r2, r3, #2
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	3b01      	subs	r3, #1
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d177      	bne.n	8005d5a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c72:	e853 3f00 	ldrex	r3, [r3]
 8005c76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	461a      	mov	r2, r3
 8005c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c88:	643b      	str	r3, [r7, #64]	; 0x40
 8005c8a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c90:	e841 2300 	strex	r3, r2, [r1]
 8005c94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1e6      	bne.n	8005c6a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3308      	adds	r3, #8
 8005ca2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	e853 3f00 	ldrex	r3, [r3]
 8005caa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	f023 0301 	bic.w	r3, r3, #1
 8005cb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3308      	adds	r3, #8
 8005cba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cc4:	e841 2300 	strex	r3, r2, [r1]
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e5      	bne.n	8005c9c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d12e      	bne.n	8005d42 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f023 0310 	bic.w	r3, r3, #16
 8005cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d08:	61bb      	str	r3, [r7, #24]
 8005d0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	6979      	ldr	r1, [r7, #20]
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	613b      	str	r3, [r7, #16]
   return(result);
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e6      	bne.n	8005cea <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	f003 0310 	and.w	r3, r3, #16
 8005d26:	2b10      	cmp	r3, #16
 8005d28:	d103      	bne.n	8005d32 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2210      	movs	r2, #16
 8005d30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d38:	4619      	mov	r1, r3
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7ff f914 	bl	8004f68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d40:	e00b      	b.n	8005d5a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7fa fe2c 	bl	80009a0 <HAL_UART_RxCpltCallback>
}
 8005d48:	e007      	b.n	8005d5a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	699a      	ldr	r2, [r3, #24]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f042 0208 	orr.w	r2, r2, #8
 8005d58:	619a      	str	r2, [r3, #24]
}
 8005d5a:	bf00      	nop
 8005d5c:	3758      	adds	r7, #88	; 0x58
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
	...

08005d78 <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	71fb      	strb	r3, [r7, #7]
 8005d82:	460b      	mov	r3, r1
 8005d84:	71bb      	strb	r3, [r7, #6]
 8005d86:	4613      	mov	r3, r2
 8005d88:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8005d8a:	797b      	ldrb	r3, [r7, #5]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d901      	bls.n	8005d94 <tmc_fillCRC8Table+0x1c>
		return 0;
 8005d90:	2300      	movs	r3, #0
 8005d92:	e09e      	b.n	8005ed2 <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 8005d94:	797a      	ldrb	r2, [r7, #5]
 8005d96:	4951      	ldr	r1, [pc, #324]	; (8005edc <tmc_fillCRC8Table+0x164>)
 8005d98:	4613      	mov	r3, r2
 8005d9a:	01db      	lsls	r3, r3, #7
 8005d9c:	4413      	add	r3, r2
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	440b      	add	r3, r1
 8005da2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005da6:	79fa      	ldrb	r2, [r7, #7]
 8005da8:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 8005daa:	797a      	ldrb	r2, [r7, #5]
 8005dac:	494b      	ldr	r1, [pc, #300]	; (8005edc <tmc_fillCRC8Table+0x164>)
 8005dae:	4613      	mov	r3, r2
 8005db0:	01db      	lsls	r3, r3, #7
 8005db2:	4413      	add	r3, r2
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	440b      	add	r3, r1
 8005db8:	f203 1301 	addw	r3, r3, #257	; 0x101
 8005dbc:	79ba      	ldrb	r2, [r7, #6]
 8005dbe:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 8005dc0:	797a      	ldrb	r2, [r7, #5]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	01db      	lsls	r3, r3, #7
 8005dc6:	4413      	add	r3, r2
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	4a44      	ldr	r2, [pc, #272]	; (8005edc <tmc_fillCRC8Table+0x164>)
 8005dcc:	4413      	add	r3, r2
 8005dce:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 8005dd0:	79fb      	ldrb	r3, [r7, #7]
 8005dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dd6:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8005dd8:	4b41      	ldr	r3, [pc, #260]	; (8005ee0 <tmc_fillCRC8Table+0x168>)
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	e074      	b.n	8005ec8 <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 8005dde:	79bb      	ldrb	r3, [r7, #6]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d004      	beq.n	8005dee <tmc_fillCRC8Table+0x76>
 8005de4:	6978      	ldr	r0, [r7, #20]
 8005de6:	f000 f8f7 	bl	8005fd8 <flipBitsInBytes>
 8005dea:	4603      	mov	r3, r0
 8005dec:	e000      	b.n	8005df0 <tmc_fillCRC8Table+0x78>
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 8005df2:	2300      	movs	r3, #0
 8005df4:	613b      	str	r3, [r7, #16]
 8005df6:	e035      	b.n	8005e64 <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	0fdb      	lsrs	r3, r3, #31
 8005dfc:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <tmc_fillCRC8Table+0x9a>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	e000      	b.n	8005e14 <tmc_fillCRC8Table+0x9c>
 8005e12:	2300      	movs	r3, #0
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	4053      	eors	r3, r2
 8005e18:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <tmc_fillCRC8Table+0xb2>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	021b      	lsls	r3, r3, #8
 8005e28:	e000      	b.n	8005e2c <tmc_fillCRC8Table+0xb4>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	4053      	eors	r3, r2
 8005e30:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <tmc_fillCRC8Table+0xca>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	041b      	lsls	r3, r3, #16
 8005e40:	e000      	b.n	8005e44 <tmc_fillCRC8Table+0xcc>
 8005e42:	2300      	movs	r3, #0
 8005e44:	69fa      	ldr	r2, [r7, #28]
 8005e46:	4053      	eors	r3, r2
 8005e48:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 8005e4a:	7afb      	ldrb	r3, [r7, #11]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <tmc_fillCRC8Table+0xde>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	061b      	lsls	r3, r3, #24
 8005e54:	e000      	b.n	8005e58 <tmc_fillCRC8Table+0xe0>
 8005e56:	2300      	movs	r3, #0
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	4053      	eors	r3, r2
 8005e5c:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	3301      	adds	r3, #1
 8005e62:	613b      	str	r3, [r7, #16]
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	2b07      	cmp	r3, #7
 8005e68:	ddc6      	ble.n	8005df8 <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 8005e6a:	79bb      	ldrb	r3, [r7, #6]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d004      	beq.n	8005e7a <tmc_fillCRC8Table+0x102>
 8005e70:	69f8      	ldr	r0, [r7, #28]
 8005e72:	f000 f8b1 	bl	8005fd8 <flipBitsInBytes>
 8005e76:	4603      	mov	r3, r0
 8005e78:	e000      	b.n	8005e7c <tmc_fillCRC8Table+0x104>
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	61ba      	str	r2, [r7, #24]
 8005e84:	69fa      	ldr	r2, [r7, #28]
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	0a1b      	lsrs	r3, r3, #8
 8005e8e:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	61ba      	str	r2, [r7, #24]
 8005e96:	69fa      	ldr	r2, [r7, #28]
 8005e98:	b2d2      	uxtb	r2, r2
 8005e9a:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	0a1b      	lsrs	r3, r3, #8
 8005ea0:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	61ba      	str	r2, [r7, #24]
 8005ea8:	69fa      	ldr	r2, [r7, #28]
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	0a1b      	lsrs	r3, r3, #8
 8005eb2:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	61ba      	str	r2, [r7, #24]
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	4a06      	ldr	r2, [pc, #24]	; (8005ee4 <tmc_fillCRC8Table+0x16c>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d186      	bne.n	8005dde <tmc_fillCRC8Table+0x66>
	}

	return 1;
 8005ed0:	2301      	movs	r3, #1
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3720      	adds	r7, #32
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20000724 	.word	0x20000724
 8005ee0:	03020100 	.word	0x03020100
 8005ee4:	04030200 	.word	0x04030200

08005ee8 <tmc_CRC8>:
 *     uint8_t *data: A pointer to the data that will be CRC'd.
 *     uint32_t bytes: The length of the data buffer.
 *     uint8_t index: The index of the CRC table to be used.
 */
uint8_t tmc_CRC8(uint8_t *data, uint32_t bytes, uint8_t index)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	75fb      	strb	r3, [r7, #23]
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8005efa:	79fb      	ldrb	r3, [r7, #7]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d901      	bls.n	8005f04 <tmc_CRC8+0x1c>
		return 0;
 8005f00:	2300      	movs	r3, #0
 8005f02:	e02c      	b.n	8005f5e <tmc_CRC8+0x76>

	table = &CRCTables[index].table[0];
 8005f04:	79fa      	ldrb	r2, [r7, #7]
 8005f06:	4613      	mov	r3, r2
 8005f08:	01db      	lsls	r3, r3, #7
 8005f0a:	4413      	add	r3, r2
 8005f0c:	005b      	lsls	r3, r3, #1
 8005f0e:	4a16      	ldr	r2, [pc, #88]	; (8005f68 <tmc_CRC8+0x80>)
 8005f10:	4413      	add	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]

	while(bytes--)
 8005f14:	e00b      	b.n	8005f2e <tmc_CRC8+0x46>
		result = table[result ^ *data++];
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	60fa      	str	r2, [r7, #12]
 8005f1c:	781a      	ldrb	r2, [r3, #0]
 8005f1e:	7dfb      	ldrb	r3, [r7, #23]
 8005f20:	4053      	eors	r3, r2
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	461a      	mov	r2, r3
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	4413      	add	r3, r2
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	1e5a      	subs	r2, r3, #1
 8005f32:	60ba      	str	r2, [r7, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1ee      	bne.n	8005f16 <tmc_CRC8+0x2e>

	return (CRCTables[index].isReflected)? flipByte(result) : result;
 8005f38:	79fa      	ldrb	r2, [r7, #7]
 8005f3a:	490b      	ldr	r1, [pc, #44]	; (8005f68 <tmc_CRC8+0x80>)
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	01db      	lsls	r3, r3, #7
 8005f40:	4413      	add	r3, r2
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	440b      	add	r3, r1
 8005f46:	f203 1301 	addw	r3, r3, #257	; 0x101
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d005      	beq.n	8005f5c <tmc_CRC8+0x74>
 8005f50:	7dfb      	ldrb	r3, [r7, #23]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 f80a 	bl	8005f6c <flipByte>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	e000      	b.n	8005f5e <tmc_CRC8+0x76>
 8005f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20000724 	.word	0x20000724

08005f6c <flipByte>:
	return CRCTables[index].isReflected;
}

// Helper functions
static uint8_t flipByte(uint8_t value)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	71fb      	strb	r3, [r7, #7]
	// swap odd and even bits
	value = ((value >> 1) & 0x55) | ((value & 0x55) << 1);
 8005f76:	79fb      	ldrb	r3, [r7, #7]
 8005f78:	085b      	lsrs	r3, r3, #1
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	b25b      	sxtb	r3, r3
 8005f7e:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8005f82:	b25a      	sxtb	r2, r3
 8005f84:	79fb      	ldrb	r3, [r7, #7]
 8005f86:	005b      	lsls	r3, r3, #1
 8005f88:	b25b      	sxtb	r3, r3
 8005f8a:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8005f8e:	b25b      	sxtb	r3, r3
 8005f90:	4313      	orrs	r3, r2
 8005f92:	b25b      	sxtb	r3, r3
 8005f94:	71fb      	strb	r3, [r7, #7]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33) | ((value & 0x33) << 2);
 8005f96:	79fb      	ldrb	r3, [r7, #7]
 8005f98:	089b      	lsrs	r3, r3, #2
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	b25b      	sxtb	r3, r3
 8005f9e:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8005fa2:	b25a      	sxtb	r2, r3
 8005fa4:	79fb      	ldrb	r3, [r7, #7]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	b25b      	sxtb	r3, r3
 8005faa:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8005fae:	b25b      	sxtb	r3, r3
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	b25b      	sxtb	r3, r3
 8005fb4:	71fb      	strb	r3, [r7, #7]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F) | ((value & 0x0F) << 4);
 8005fb6:	79fb      	ldrb	r3, [r7, #7]
 8005fb8:	091b      	lsrs	r3, r3, #4
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	b25a      	sxtb	r2, r3
 8005fbe:	79fb      	ldrb	r3, [r7, #7]
 8005fc0:	011b      	lsls	r3, r3, #4
 8005fc2:	b25b      	sxtb	r3, r3
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	b25b      	sxtb	r3, r3
 8005fc8:	71fb      	strb	r3, [r7, #7]

	return value;
 8005fca:	79fb      	ldrb	r3, [r7, #7]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	085b      	lsrs	r3, r3, #1
 8005fe4:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	005b      	lsls	r3, r3, #1
 8005fec:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	089b      	lsrs	r3, r3, #2
 8005ff8:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 8006004:	4313      	orrs	r3, r2
 8006006:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	091b      	lsrs	r3, r3, #4
 800600c:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8006018:	4313      	orrs	r3, r2
 800601a:	607b      	str	r3, [r7, #4]

	return value;
 800601c:	687b      	ldr	r3, [r7, #4]
}
 800601e:	4618      	mov	r0, r3
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <tmc2209_writeInt>:
// => CRC wrapper
extern uint8_t tmc2209_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2209_writeInt(TMC2209TypeDef *tmc2209, uint8_t address, int32_t value)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b086      	sub	sp, #24
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	460b      	mov	r3, r1
 8006034:	607a      	str	r2, [r7, #4]
 8006036:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8];

	data[0] = 0x05;
 8006038:	2305      	movs	r3, #5
 800603a:	743b      	strb	r3, [r7, #16]
	data[1] = tmc2209->slaveAddress;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8006042:	747b      	strb	r3, [r7, #17]
	data[2] = address | TMC_WRITE_BIT;
 8006044:	7afb      	ldrb	r3, [r7, #11]
 8006046:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800604a:	b2db      	uxtb	r3, r3
 800604c:	74bb      	strb	r3, [r7, #18]
	data[3] = (value >> 24) & 0xFF;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	0e1b      	lsrs	r3, r3, #24
 8006052:	b2db      	uxtb	r3, r3
 8006054:	74fb      	strb	r3, [r7, #19]
	data[4] = (value >> 16) & 0xFF;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	141b      	asrs	r3, r3, #16
 800605a:	b2db      	uxtb	r3, r3
 800605c:	753b      	strb	r3, [r7, #20]
	data[5] = (value >> 8 ) & 0xFF;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	121b      	asrs	r3, r3, #8
 8006062:	b2db      	uxtb	r3, r3
 8006064:	757b      	strb	r3, [r7, #21]
	data[6] = (value      ) & 0xFF;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	b2db      	uxtb	r3, r3
 800606a:	75bb      	strb	r3, [r7, #22]
	data[7] = tmc2209_CRC8(data, 7);
 800606c:	f107 0310 	add.w	r3, r7, #16
 8006070:	2107      	movs	r1, #7
 8006072:	4618      	mov	r0, r3
 8006074:	f7fa f922 	bl	80002bc <tmc2209_CRC8>
 8006078:	4603      	mov	r3, r0
 800607a:	75fb      	strb	r3, [r7, #23]

	tmc2209_readWriteArray(tmc2209->config->channel, &data[0], 8, 0);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8006084:	f107 0110 	add.w	r1, r7, #16
 8006088:	2300      	movs	r3, #0
 800608a:	2208      	movs	r2, #8
 800608c:	f7fa f8f0 	bl	8000270 <tmc2209_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
 8006090:	7afb      	ldrb	r3, [r7, #11]
 8006092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006096:	72fb      	strb	r3, [r7, #11]
	tmc2209->config->shadowRegister[address] = value;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	7afb      	ldrb	r3, [r7, #11]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	605a      	str	r2, [r3, #4]
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
 80060a6:	7afb      	ldrb	r3, [r7, #11]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4413      	add	r3, r2
 80060ac:	f893 2204 	ldrb.w	r2, [r3, #516]	; 0x204
 80060b0:	7afb      	ldrb	r3, [r7, #11]
 80060b2:	f042 0208 	orr.w	r2, r2, #8
 80060b6:	b2d1      	uxtb	r1, r2
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	460a      	mov	r2, r1
 80060be:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 80060c2:	bf00      	nop
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <tmc2209_readInt>:

int32_t tmc2209_readInt(TMC2209TypeDef *tmc2209, uint8_t address)
{
 80060ca:	b590      	push	{r4, r7, lr}
 80060cc:	b085      	sub	sp, #20
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
 80060d2:	460b      	mov	r3, r1
 80060d4:	70fb      	strb	r3, [r7, #3]
	uint8_t data[8] = { 0 };
 80060d6:	2300      	movs	r3, #0
 80060d8:	60bb      	str	r3, [r7, #8]
 80060da:	2300      	movs	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]

	address = TMC_ADDRESS(address);
 80060de:	78fb      	ldrb	r3, [r7, #3]
 80060e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060e4:	70fb      	strb	r3, [r7, #3]

	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
 80060e6:	78fb      	ldrb	r3, [r7, #3]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	4413      	add	r3, r2
 80060ec:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d106      	bne.n	8006106 <tmc2209_readInt+0x3c>
		return tmc2209->config->shadowRegister[address];
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	e03f      	b.n	8006186 <tmc2209_readInt+0xbc>

	data[0] = 0x05;
 8006106:	2305      	movs	r3, #5
 8006108:	723b      	strb	r3, [r7, #8]
	data[1] = tmc2209->slaveAddress;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8006110:	727b      	strb	r3, [r7, #9]
	data[2] = address;
 8006112:	78fb      	ldrb	r3, [r7, #3]
 8006114:	72bb      	strb	r3, [r7, #10]
	data[3] = tmc2209_CRC8(data, 3);
 8006116:	f107 0308 	add.w	r3, r7, #8
 800611a:	2103      	movs	r1, #3
 800611c:	4618      	mov	r0, r3
 800611e:	f7fa f8cd 	bl	80002bc <tmc2209_CRC8>
 8006122:	4603      	mov	r3, r0
 8006124:	72fb      	strb	r3, [r7, #11]

	tmc2209_readWriteArray(tmc2209->config->channel, data, 4, 8);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 800612e:	f107 0108 	add.w	r1, r7, #8
 8006132:	2308      	movs	r3, #8
 8006134:	2204      	movs	r2, #4
 8006136:	f7fa f89b 	bl	8000270 <tmc2209_readWriteArray>

	// Byte 0: Sync nibble correct?
	if (data[0] != 0x05)
 800613a:	7a3b      	ldrb	r3, [r7, #8]
 800613c:	2b05      	cmp	r3, #5
 800613e:	d001      	beq.n	8006144 <tmc2209_readInt+0x7a>
		return 0;
 8006140:	2300      	movs	r3, #0
 8006142:	e020      	b.n	8006186 <tmc2209_readInt+0xbc>

	// Byte 1: Master address correct?
	if (data[1] != 0xFF)
 8006144:	7a7b      	ldrb	r3, [r7, #9]
 8006146:	2bff      	cmp	r3, #255	; 0xff
 8006148:	d001      	beq.n	800614e <tmc2209_readInt+0x84>
		return 0;
 800614a:	2300      	movs	r3, #0
 800614c:	e01b      	b.n	8006186 <tmc2209_readInt+0xbc>

	// Byte 2: Address correct?
	if (data[2] != address)
 800614e:	7abb      	ldrb	r3, [r7, #10]
 8006150:	78fa      	ldrb	r2, [r7, #3]
 8006152:	429a      	cmp	r2, r3
 8006154:	d001      	beq.n	800615a <tmc2209_readInt+0x90>
		return 0;
 8006156:	2300      	movs	r3, #0
 8006158:	e015      	b.n	8006186 <tmc2209_readInt+0xbc>

	// Byte 7: CRC correct?
	if (data[7] != tmc2209_CRC8(data, 7))
 800615a:	7bfc      	ldrb	r4, [r7, #15]
 800615c:	f107 0308 	add.w	r3, r7, #8
 8006160:	2107      	movs	r1, #7
 8006162:	4618      	mov	r0, r3
 8006164:	f7fa f8aa 	bl	80002bc <tmc2209_CRC8>
 8006168:	4603      	mov	r3, r0
 800616a:	429c      	cmp	r4, r3
 800616c:	d001      	beq.n	8006172 <tmc2209_readInt+0xa8>
		return 0;
 800616e:	2300      	movs	r3, #0
 8006170:	e009      	b.n	8006186 <tmc2209_readInt+0xbc>

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
 8006172:	7afb      	ldrb	r3, [r7, #11]
 8006174:	061a      	lsls	r2, r3, #24
 8006176:	7b3b      	ldrb	r3, [r7, #12]
 8006178:	041b      	lsls	r3, r3, #16
 800617a:	4313      	orrs	r3, r2
 800617c:	7b7a      	ldrb	r2, [r7, #13]
 800617e:	0212      	lsls	r2, r2, #8
 8006180:	4313      	orrs	r3, r2
 8006182:	7bba      	ldrb	r2, [r7, #14]
 8006184:	4313      	orrs	r3, r2
}
 8006186:	4618      	mov	r0, r3
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	bd90      	pop	{r4, r7, pc}
	...

08006190 <tmc2209_init>:

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	607b      	str	r3, [r7, #4]
 800619a:	460b      	mov	r3, r1
 800619c:	72fb      	strb	r3, [r7, #11]
 800619e:	4613      	mov	r3, r2
 80061a0:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	7aba      	ldrb	r2, [r7, #10]
 80061a6:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	7afa      	ldrb	r2, [r7, #11]
 80061c0:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2200      	movs	r2, #0
 80061ca:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2200      	movs	r2, #0
 80061d2:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80061d4:	2300      	movs	r3, #0
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	e017      	b.n	800620a <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 80061da:	4a11      	ldr	r2, [pc, #68]	; (8006220 <tmc2209_init+0x90>)
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	4413      	add	r3, r2
 80061e0:	7819      	ldrb	r1, [r3, #0]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80061ec:	460a      	mov	r2, r1
 80061ee:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	6a3a      	ldr	r2, [r7, #32]
 80061f6:	4413      	add	r3, r2
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68f9      	ldr	r1, [r7, #12]
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	440b      	add	r3, r1
 8006202:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	3301      	adds	r3, #1
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2b7f      	cmp	r3, #127	; 0x7f
 800620e:	d9e4      	bls.n	80061da <tmc2209_init+0x4a>
	}
}
 8006210:	bf00      	nop
 8006212:	bf00      	nop
 8006214:	371c      	adds	r7, #28
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	08007a00 	.word	0x08007a00

08006224 <writeConfiguration>:

static void writeConfiguration(TMC2209TypeDef *tmc2209)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
	uint8_t *ptr = &tmc2209->config->configIndex;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3301      	adds	r3, #1
 8006232:	60bb      	str	r3, [r7, #8]
	const int32_t *settings;

	if(tmc2209->config->state == CONFIG_RESTORE)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	2b02      	cmp	r3, #2
 800623c:	d131      	bne.n	80062a2 <writeConfiguration+0x7e>
	{
		settings = tmc2209->config->shadowRegister;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3304      	adds	r3, #4
 8006244:	60fb      	str	r3, [r7, #12]
		// Find the next restorable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8006246:	e005      	b.n	8006254 <writeConfiguration+0x30>
		{
			(*ptr)++;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	3301      	adds	r3, #1
 800624e:	b2da      	uxtb	r2, r3
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	b25b      	sxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	db3b      	blt.n	80062d6 <writeConfiguration+0xb2>
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4413      	add	r3, r2
 8006268:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0e9      	beq.n	8006248 <writeConfiguration+0x24>
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	461a      	mov	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4413      	add	r3, r2
 800627e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006286:	2b00      	cmp	r3, #0
 8006288:	d025      	beq.n	80062d6 <writeConfiguration+0xb2>
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	461a      	mov	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4413      	add	r3, r2
 8006294:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b00      	cmp	r3, #0
 800629e:	d0d3      	beq.n	8006248 <writeConfiguration+0x24>
 80062a0:	e019      	b.n	80062d6 <writeConfiguration+0xb2>
		}
	}
	else
	{
		settings = tmc2209->registerResetState;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	3304      	adds	r3, #4
 80062a6:	60fb      	str	r3, [r7, #12]
		// Find the next resettable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 80062a8:	e005      	b.n	80062b6 <writeConfiguration+0x92>
		{
			(*ptr)++;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	3301      	adds	r3, #1
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	b25b      	sxtb	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	db0a      	blt.n	80062d6 <writeConfiguration+0xb2>
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	461a      	mov	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4413      	add	r3, r2
 80062ca:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80062ce:	f003 0342 	and.w	r3, r3, #66	; 0x42
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d1e9      	bne.n	80062aa <writeConfiguration+0x86>
		}
	}

	if(*ptr < TMC2209_REGISTER_COUNT)
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	b25b      	sxtb	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	db12      	blt.n	8006306 <writeConfiguration+0xe2>
	{
		tmc2209_writeInt(tmc2209, *ptr, settings[*ptr]);
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	7819      	ldrb	r1, [r3, #0]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	4413      	add	r3, r2
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	461a      	mov	r2, r3
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7ff fe99 	bl	800602a <tmc2209_writeInt>
		(*ptr)++;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	3301      	adds	r3, #1
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	701a      	strb	r2, [r3, #0]
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
		}

		tmc2209->config->state = CONFIG_READY;
	}
}
 8006304:	e013      	b.n	800632e <writeConfiguration+0x10a>
		if(tmc2209->config->callback)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800630e:	2b00      	cmp	r3, #0
 8006310:	d009      	beq.n	8006326 <writeConfiguration+0x102>
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	6812      	ldr	r2, [r2, #0]
 800631e:	7812      	ldrb	r2, [r2, #0]
 8006320:	4611      	mov	r1, r2
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	4798      	blx	r3
		tmc2209->config->state = CONFIG_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2200      	movs	r2, #0
 800632c:	701a      	strb	r2, [r3, #0]
}
 800632e:	bf00      	nop
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <tmc2209_periodicJob>:

void tmc2209_periodicJob(TMC2209TypeDef *tmc2209, uint32_t tick)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b082      	sub	sp, #8
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	6039      	str	r1, [r7, #0]
	UNUSED(tick);

	if(tmc2209->config->state != CONFIG_READY)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <tmc2209_periodicJob+0x1c>
	{
		writeConfiguration(tmc2209);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7ff ff6a 	bl	8006224 <writeConfiguration>
		return;
 8006350:	bf00      	nop
	}
}
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <tmc2209_reset>:
{
	tmc2209->config->callback = (tmc_callback_config) callback;
}

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <tmc2209_reset+0x16>
		return false;
 800636a:	2300      	movs	r3, #0
 800636c:	e028      	b.n	80063c0 <tmc2209_reset+0x68>

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	e019      	b.n	80063a8 <tmc2209_reset+0x50>
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	4413      	add	r3, r2
 800637a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	f023 0308 	bic.w	r3, r3, #8
 8006384:	b2d9      	uxtb	r1, r3
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4413      	add	r3, r2
 800638c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006390:	460a      	mov	r2, r1
 8006392:	701a      	strb	r2, [r3, #0]
		tmc2209->config->shadowRegister[i] = 0;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	2200      	movs	r2, #0
 80063a0:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	3301      	adds	r3, #1
 80063a6:	60fb      	str	r3, [r7, #12]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b7f      	cmp	r3, #127	; 0x7f
 80063ac:	d9e2      	bls.n	8006374 <tmc2209_reset+0x1c>
	}

	tmc2209->config->state        = CONFIG_RESET;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2201      	movs	r2, #1
 80063b4:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2200      	movs	r2, #0
 80063bc:	705a      	strb	r2, [r3, #1]

	return true;
 80063be:	2301      	movs	r3, #1
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <tmc2209_restore+0x16>
		return false;
 80063de:	2300      	movs	r3, #0
 80063e0:	e008      	b.n	80063f4 <tmc2209_restore+0x28>

	tmc2209->config->state        = CONFIG_RESTORE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2202      	movs	r2, #2
 80063e8:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2200      	movs	r2, #0
 80063f0:	705a      	strb	r2, [r3, #1]

	return true;
 80063f2:	2301      	movs	r3, #1
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <__errno>:
 8006400:	4b01      	ldr	r3, [pc, #4]	; (8006408 <__errno+0x8>)
 8006402:	6818      	ldr	r0, [r3, #0]
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	2000000c 	.word	0x2000000c

0800640c <__libc_init_array>:
 800640c:	b570      	push	{r4, r5, r6, lr}
 800640e:	4d0d      	ldr	r5, [pc, #52]	; (8006444 <__libc_init_array+0x38>)
 8006410:	4c0d      	ldr	r4, [pc, #52]	; (8006448 <__libc_init_array+0x3c>)
 8006412:	1b64      	subs	r4, r4, r5
 8006414:	10a4      	asrs	r4, r4, #2
 8006416:	2600      	movs	r6, #0
 8006418:	42a6      	cmp	r6, r4
 800641a:	d109      	bne.n	8006430 <__libc_init_array+0x24>
 800641c:	4d0b      	ldr	r5, [pc, #44]	; (800644c <__libc_init_array+0x40>)
 800641e:	4c0c      	ldr	r4, [pc, #48]	; (8006450 <__libc_init_array+0x44>)
 8006420:	f001 f8fa 	bl	8007618 <_init>
 8006424:	1b64      	subs	r4, r4, r5
 8006426:	10a4      	asrs	r4, r4, #2
 8006428:	2600      	movs	r6, #0
 800642a:	42a6      	cmp	r6, r4
 800642c:	d105      	bne.n	800643a <__libc_init_array+0x2e>
 800642e:	bd70      	pop	{r4, r5, r6, pc}
 8006430:	f855 3b04 	ldr.w	r3, [r5], #4
 8006434:	4798      	blx	r3
 8006436:	3601      	adds	r6, #1
 8006438:	e7ee      	b.n	8006418 <__libc_init_array+0xc>
 800643a:	f855 3b04 	ldr.w	r3, [r5], #4
 800643e:	4798      	blx	r3
 8006440:	3601      	adds	r6, #1
 8006442:	e7f2      	b.n	800642a <__libc_init_array+0x1e>
 8006444:	08007b18 	.word	0x08007b18
 8006448:	08007b18 	.word	0x08007b18
 800644c:	08007b18 	.word	0x08007b18
 8006450:	08007b1c 	.word	0x08007b1c

08006454 <memset>:
 8006454:	4402      	add	r2, r0
 8006456:	4603      	mov	r3, r0
 8006458:	4293      	cmp	r3, r2
 800645a:	d100      	bne.n	800645e <memset+0xa>
 800645c:	4770      	bx	lr
 800645e:	f803 1b01 	strb.w	r1, [r3], #1
 8006462:	e7f9      	b.n	8006458 <memset+0x4>

08006464 <iprintf>:
 8006464:	b40f      	push	{r0, r1, r2, r3}
 8006466:	4b0a      	ldr	r3, [pc, #40]	; (8006490 <iprintf+0x2c>)
 8006468:	b513      	push	{r0, r1, r4, lr}
 800646a:	681c      	ldr	r4, [r3, #0]
 800646c:	b124      	cbz	r4, 8006478 <iprintf+0x14>
 800646e:	69a3      	ldr	r3, [r4, #24]
 8006470:	b913      	cbnz	r3, 8006478 <iprintf+0x14>
 8006472:	4620      	mov	r0, r4
 8006474:	f000 fb2c 	bl	8006ad0 <__sinit>
 8006478:	ab05      	add	r3, sp, #20
 800647a:	9a04      	ldr	r2, [sp, #16]
 800647c:	68a1      	ldr	r1, [r4, #8]
 800647e:	9301      	str	r3, [sp, #4]
 8006480:	4620      	mov	r0, r4
 8006482:	f000 fd3d 	bl	8006f00 <_vfiprintf_r>
 8006486:	b002      	add	sp, #8
 8006488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800648c:	b004      	add	sp, #16
 800648e:	4770      	bx	lr
 8006490:	2000000c 	.word	0x2000000c

08006494 <_puts_r>:
 8006494:	b570      	push	{r4, r5, r6, lr}
 8006496:	460e      	mov	r6, r1
 8006498:	4605      	mov	r5, r0
 800649a:	b118      	cbz	r0, 80064a4 <_puts_r+0x10>
 800649c:	6983      	ldr	r3, [r0, #24]
 800649e:	b90b      	cbnz	r3, 80064a4 <_puts_r+0x10>
 80064a0:	f000 fb16 	bl	8006ad0 <__sinit>
 80064a4:	69ab      	ldr	r3, [r5, #24]
 80064a6:	68ac      	ldr	r4, [r5, #8]
 80064a8:	b913      	cbnz	r3, 80064b0 <_puts_r+0x1c>
 80064aa:	4628      	mov	r0, r5
 80064ac:	f000 fb10 	bl	8006ad0 <__sinit>
 80064b0:	4b2c      	ldr	r3, [pc, #176]	; (8006564 <_puts_r+0xd0>)
 80064b2:	429c      	cmp	r4, r3
 80064b4:	d120      	bne.n	80064f8 <_puts_r+0x64>
 80064b6:	686c      	ldr	r4, [r5, #4]
 80064b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064ba:	07db      	lsls	r3, r3, #31
 80064bc:	d405      	bmi.n	80064ca <_puts_r+0x36>
 80064be:	89a3      	ldrh	r3, [r4, #12]
 80064c0:	0598      	lsls	r0, r3, #22
 80064c2:	d402      	bmi.n	80064ca <_puts_r+0x36>
 80064c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064c6:	f000 fba1 	bl	8006c0c <__retarget_lock_acquire_recursive>
 80064ca:	89a3      	ldrh	r3, [r4, #12]
 80064cc:	0719      	lsls	r1, r3, #28
 80064ce:	d51d      	bpl.n	800650c <_puts_r+0x78>
 80064d0:	6923      	ldr	r3, [r4, #16]
 80064d2:	b1db      	cbz	r3, 800650c <_puts_r+0x78>
 80064d4:	3e01      	subs	r6, #1
 80064d6:	68a3      	ldr	r3, [r4, #8]
 80064d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80064dc:	3b01      	subs	r3, #1
 80064de:	60a3      	str	r3, [r4, #8]
 80064e0:	bb39      	cbnz	r1, 8006532 <_puts_r+0x9e>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	da38      	bge.n	8006558 <_puts_r+0xc4>
 80064e6:	4622      	mov	r2, r4
 80064e8:	210a      	movs	r1, #10
 80064ea:	4628      	mov	r0, r5
 80064ec:	f000 f916 	bl	800671c <__swbuf_r>
 80064f0:	3001      	adds	r0, #1
 80064f2:	d011      	beq.n	8006518 <_puts_r+0x84>
 80064f4:	250a      	movs	r5, #10
 80064f6:	e011      	b.n	800651c <_puts_r+0x88>
 80064f8:	4b1b      	ldr	r3, [pc, #108]	; (8006568 <_puts_r+0xd4>)
 80064fa:	429c      	cmp	r4, r3
 80064fc:	d101      	bne.n	8006502 <_puts_r+0x6e>
 80064fe:	68ac      	ldr	r4, [r5, #8]
 8006500:	e7da      	b.n	80064b8 <_puts_r+0x24>
 8006502:	4b1a      	ldr	r3, [pc, #104]	; (800656c <_puts_r+0xd8>)
 8006504:	429c      	cmp	r4, r3
 8006506:	bf08      	it	eq
 8006508:	68ec      	ldreq	r4, [r5, #12]
 800650a:	e7d5      	b.n	80064b8 <_puts_r+0x24>
 800650c:	4621      	mov	r1, r4
 800650e:	4628      	mov	r0, r5
 8006510:	f000 f956 	bl	80067c0 <__swsetup_r>
 8006514:	2800      	cmp	r0, #0
 8006516:	d0dd      	beq.n	80064d4 <_puts_r+0x40>
 8006518:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800651c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800651e:	07da      	lsls	r2, r3, #31
 8006520:	d405      	bmi.n	800652e <_puts_r+0x9a>
 8006522:	89a3      	ldrh	r3, [r4, #12]
 8006524:	059b      	lsls	r3, r3, #22
 8006526:	d402      	bmi.n	800652e <_puts_r+0x9a>
 8006528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800652a:	f000 fb70 	bl	8006c0e <__retarget_lock_release_recursive>
 800652e:	4628      	mov	r0, r5
 8006530:	bd70      	pop	{r4, r5, r6, pc}
 8006532:	2b00      	cmp	r3, #0
 8006534:	da04      	bge.n	8006540 <_puts_r+0xac>
 8006536:	69a2      	ldr	r2, [r4, #24]
 8006538:	429a      	cmp	r2, r3
 800653a:	dc06      	bgt.n	800654a <_puts_r+0xb6>
 800653c:	290a      	cmp	r1, #10
 800653e:	d004      	beq.n	800654a <_puts_r+0xb6>
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	6022      	str	r2, [r4, #0]
 8006546:	7019      	strb	r1, [r3, #0]
 8006548:	e7c5      	b.n	80064d6 <_puts_r+0x42>
 800654a:	4622      	mov	r2, r4
 800654c:	4628      	mov	r0, r5
 800654e:	f000 f8e5 	bl	800671c <__swbuf_r>
 8006552:	3001      	adds	r0, #1
 8006554:	d1bf      	bne.n	80064d6 <_puts_r+0x42>
 8006556:	e7df      	b.n	8006518 <_puts_r+0x84>
 8006558:	6823      	ldr	r3, [r4, #0]
 800655a:	250a      	movs	r5, #10
 800655c:	1c5a      	adds	r2, r3, #1
 800655e:	6022      	str	r2, [r4, #0]
 8006560:	701d      	strb	r5, [r3, #0]
 8006562:	e7db      	b.n	800651c <_puts_r+0x88>
 8006564:	08007aa4 	.word	0x08007aa4
 8006568:	08007ac4 	.word	0x08007ac4
 800656c:	08007a84 	.word	0x08007a84

08006570 <puts>:
 8006570:	4b02      	ldr	r3, [pc, #8]	; (800657c <puts+0xc>)
 8006572:	4601      	mov	r1, r0
 8006574:	6818      	ldr	r0, [r3, #0]
 8006576:	f7ff bf8d 	b.w	8006494 <_puts_r>
 800657a:	bf00      	nop
 800657c:	2000000c 	.word	0x2000000c

08006580 <setbuf>:
 8006580:	2900      	cmp	r1, #0
 8006582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006586:	bf0c      	ite	eq
 8006588:	2202      	moveq	r2, #2
 800658a:	2200      	movne	r2, #0
 800658c:	f000 b800 	b.w	8006590 <setvbuf>

08006590 <setvbuf>:
 8006590:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006594:	461d      	mov	r5, r3
 8006596:	4b5d      	ldr	r3, [pc, #372]	; (800670c <setvbuf+0x17c>)
 8006598:	681f      	ldr	r7, [r3, #0]
 800659a:	4604      	mov	r4, r0
 800659c:	460e      	mov	r6, r1
 800659e:	4690      	mov	r8, r2
 80065a0:	b127      	cbz	r7, 80065ac <setvbuf+0x1c>
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	b913      	cbnz	r3, 80065ac <setvbuf+0x1c>
 80065a6:	4638      	mov	r0, r7
 80065a8:	f000 fa92 	bl	8006ad0 <__sinit>
 80065ac:	4b58      	ldr	r3, [pc, #352]	; (8006710 <setvbuf+0x180>)
 80065ae:	429c      	cmp	r4, r3
 80065b0:	d167      	bne.n	8006682 <setvbuf+0xf2>
 80065b2:	687c      	ldr	r4, [r7, #4]
 80065b4:	f1b8 0f02 	cmp.w	r8, #2
 80065b8:	d006      	beq.n	80065c8 <setvbuf+0x38>
 80065ba:	f1b8 0f01 	cmp.w	r8, #1
 80065be:	f200 809f 	bhi.w	8006700 <setvbuf+0x170>
 80065c2:	2d00      	cmp	r5, #0
 80065c4:	f2c0 809c 	blt.w	8006700 <setvbuf+0x170>
 80065c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065ca:	07db      	lsls	r3, r3, #31
 80065cc:	d405      	bmi.n	80065da <setvbuf+0x4a>
 80065ce:	89a3      	ldrh	r3, [r4, #12]
 80065d0:	0598      	lsls	r0, r3, #22
 80065d2:	d402      	bmi.n	80065da <setvbuf+0x4a>
 80065d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065d6:	f000 fb19 	bl	8006c0c <__retarget_lock_acquire_recursive>
 80065da:	4621      	mov	r1, r4
 80065dc:	4638      	mov	r0, r7
 80065de:	f000 f9e3 	bl	80069a8 <_fflush_r>
 80065e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065e4:	b141      	cbz	r1, 80065f8 <setvbuf+0x68>
 80065e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065ea:	4299      	cmp	r1, r3
 80065ec:	d002      	beq.n	80065f4 <setvbuf+0x64>
 80065ee:	4638      	mov	r0, r7
 80065f0:	f000 fb7c 	bl	8006cec <_free_r>
 80065f4:	2300      	movs	r3, #0
 80065f6:	6363      	str	r3, [r4, #52]	; 0x34
 80065f8:	2300      	movs	r3, #0
 80065fa:	61a3      	str	r3, [r4, #24]
 80065fc:	6063      	str	r3, [r4, #4]
 80065fe:	89a3      	ldrh	r3, [r4, #12]
 8006600:	0619      	lsls	r1, r3, #24
 8006602:	d503      	bpl.n	800660c <setvbuf+0x7c>
 8006604:	6921      	ldr	r1, [r4, #16]
 8006606:	4638      	mov	r0, r7
 8006608:	f000 fb70 	bl	8006cec <_free_r>
 800660c:	89a3      	ldrh	r3, [r4, #12]
 800660e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006612:	f023 0303 	bic.w	r3, r3, #3
 8006616:	f1b8 0f02 	cmp.w	r8, #2
 800661a:	81a3      	strh	r3, [r4, #12]
 800661c:	d06c      	beq.n	80066f8 <setvbuf+0x168>
 800661e:	ab01      	add	r3, sp, #4
 8006620:	466a      	mov	r2, sp
 8006622:	4621      	mov	r1, r4
 8006624:	4638      	mov	r0, r7
 8006626:	f000 faf3 	bl	8006c10 <__swhatbuf_r>
 800662a:	89a3      	ldrh	r3, [r4, #12]
 800662c:	4318      	orrs	r0, r3
 800662e:	81a0      	strh	r0, [r4, #12]
 8006630:	2d00      	cmp	r5, #0
 8006632:	d130      	bne.n	8006696 <setvbuf+0x106>
 8006634:	9d00      	ldr	r5, [sp, #0]
 8006636:	4628      	mov	r0, r5
 8006638:	f000 fb50 	bl	8006cdc <malloc>
 800663c:	4606      	mov	r6, r0
 800663e:	2800      	cmp	r0, #0
 8006640:	d155      	bne.n	80066ee <setvbuf+0x15e>
 8006642:	f8dd 9000 	ldr.w	r9, [sp]
 8006646:	45a9      	cmp	r9, r5
 8006648:	d14a      	bne.n	80066e0 <setvbuf+0x150>
 800664a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800664e:	2200      	movs	r2, #0
 8006650:	60a2      	str	r2, [r4, #8]
 8006652:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006656:	6022      	str	r2, [r4, #0]
 8006658:	6122      	str	r2, [r4, #16]
 800665a:	2201      	movs	r2, #1
 800665c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006660:	6162      	str	r2, [r4, #20]
 8006662:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006664:	f043 0302 	orr.w	r3, r3, #2
 8006668:	07d2      	lsls	r2, r2, #31
 800666a:	81a3      	strh	r3, [r4, #12]
 800666c:	d405      	bmi.n	800667a <setvbuf+0xea>
 800666e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006672:	d102      	bne.n	800667a <setvbuf+0xea>
 8006674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006676:	f000 faca 	bl	8006c0e <__retarget_lock_release_recursive>
 800667a:	4628      	mov	r0, r5
 800667c:	b003      	add	sp, #12
 800667e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006682:	4b24      	ldr	r3, [pc, #144]	; (8006714 <setvbuf+0x184>)
 8006684:	429c      	cmp	r4, r3
 8006686:	d101      	bne.n	800668c <setvbuf+0xfc>
 8006688:	68bc      	ldr	r4, [r7, #8]
 800668a:	e793      	b.n	80065b4 <setvbuf+0x24>
 800668c:	4b22      	ldr	r3, [pc, #136]	; (8006718 <setvbuf+0x188>)
 800668e:	429c      	cmp	r4, r3
 8006690:	bf08      	it	eq
 8006692:	68fc      	ldreq	r4, [r7, #12]
 8006694:	e78e      	b.n	80065b4 <setvbuf+0x24>
 8006696:	2e00      	cmp	r6, #0
 8006698:	d0cd      	beq.n	8006636 <setvbuf+0xa6>
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	b913      	cbnz	r3, 80066a4 <setvbuf+0x114>
 800669e:	4638      	mov	r0, r7
 80066a0:	f000 fa16 	bl	8006ad0 <__sinit>
 80066a4:	f1b8 0f01 	cmp.w	r8, #1
 80066a8:	bf08      	it	eq
 80066aa:	89a3      	ldrheq	r3, [r4, #12]
 80066ac:	6026      	str	r6, [r4, #0]
 80066ae:	bf04      	itt	eq
 80066b0:	f043 0301 	orreq.w	r3, r3, #1
 80066b4:	81a3      	strheq	r3, [r4, #12]
 80066b6:	89a2      	ldrh	r2, [r4, #12]
 80066b8:	f012 0308 	ands.w	r3, r2, #8
 80066bc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80066c0:	d01c      	beq.n	80066fc <setvbuf+0x16c>
 80066c2:	07d3      	lsls	r3, r2, #31
 80066c4:	bf41      	itttt	mi
 80066c6:	2300      	movmi	r3, #0
 80066c8:	426d      	negmi	r5, r5
 80066ca:	60a3      	strmi	r3, [r4, #8]
 80066cc:	61a5      	strmi	r5, [r4, #24]
 80066ce:	bf58      	it	pl
 80066d0:	60a5      	strpl	r5, [r4, #8]
 80066d2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80066d4:	f015 0501 	ands.w	r5, r5, #1
 80066d8:	d115      	bne.n	8006706 <setvbuf+0x176>
 80066da:	f412 7f00 	tst.w	r2, #512	; 0x200
 80066de:	e7c8      	b.n	8006672 <setvbuf+0xe2>
 80066e0:	4648      	mov	r0, r9
 80066e2:	f000 fafb 	bl	8006cdc <malloc>
 80066e6:	4606      	mov	r6, r0
 80066e8:	2800      	cmp	r0, #0
 80066ea:	d0ae      	beq.n	800664a <setvbuf+0xba>
 80066ec:	464d      	mov	r5, r9
 80066ee:	89a3      	ldrh	r3, [r4, #12]
 80066f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f4:	81a3      	strh	r3, [r4, #12]
 80066f6:	e7d0      	b.n	800669a <setvbuf+0x10a>
 80066f8:	2500      	movs	r5, #0
 80066fa:	e7a8      	b.n	800664e <setvbuf+0xbe>
 80066fc:	60a3      	str	r3, [r4, #8]
 80066fe:	e7e8      	b.n	80066d2 <setvbuf+0x142>
 8006700:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006704:	e7b9      	b.n	800667a <setvbuf+0xea>
 8006706:	2500      	movs	r5, #0
 8006708:	e7b7      	b.n	800667a <setvbuf+0xea>
 800670a:	bf00      	nop
 800670c:	2000000c 	.word	0x2000000c
 8006710:	08007aa4 	.word	0x08007aa4
 8006714:	08007ac4 	.word	0x08007ac4
 8006718:	08007a84 	.word	0x08007a84

0800671c <__swbuf_r>:
 800671c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671e:	460e      	mov	r6, r1
 8006720:	4614      	mov	r4, r2
 8006722:	4605      	mov	r5, r0
 8006724:	b118      	cbz	r0, 800672e <__swbuf_r+0x12>
 8006726:	6983      	ldr	r3, [r0, #24]
 8006728:	b90b      	cbnz	r3, 800672e <__swbuf_r+0x12>
 800672a:	f000 f9d1 	bl	8006ad0 <__sinit>
 800672e:	4b21      	ldr	r3, [pc, #132]	; (80067b4 <__swbuf_r+0x98>)
 8006730:	429c      	cmp	r4, r3
 8006732:	d12b      	bne.n	800678c <__swbuf_r+0x70>
 8006734:	686c      	ldr	r4, [r5, #4]
 8006736:	69a3      	ldr	r3, [r4, #24]
 8006738:	60a3      	str	r3, [r4, #8]
 800673a:	89a3      	ldrh	r3, [r4, #12]
 800673c:	071a      	lsls	r2, r3, #28
 800673e:	d52f      	bpl.n	80067a0 <__swbuf_r+0x84>
 8006740:	6923      	ldr	r3, [r4, #16]
 8006742:	b36b      	cbz	r3, 80067a0 <__swbuf_r+0x84>
 8006744:	6923      	ldr	r3, [r4, #16]
 8006746:	6820      	ldr	r0, [r4, #0]
 8006748:	1ac0      	subs	r0, r0, r3
 800674a:	6963      	ldr	r3, [r4, #20]
 800674c:	b2f6      	uxtb	r6, r6
 800674e:	4283      	cmp	r3, r0
 8006750:	4637      	mov	r7, r6
 8006752:	dc04      	bgt.n	800675e <__swbuf_r+0x42>
 8006754:	4621      	mov	r1, r4
 8006756:	4628      	mov	r0, r5
 8006758:	f000 f926 	bl	80069a8 <_fflush_r>
 800675c:	bb30      	cbnz	r0, 80067ac <__swbuf_r+0x90>
 800675e:	68a3      	ldr	r3, [r4, #8]
 8006760:	3b01      	subs	r3, #1
 8006762:	60a3      	str	r3, [r4, #8]
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	6022      	str	r2, [r4, #0]
 800676a:	701e      	strb	r6, [r3, #0]
 800676c:	6963      	ldr	r3, [r4, #20]
 800676e:	3001      	adds	r0, #1
 8006770:	4283      	cmp	r3, r0
 8006772:	d004      	beq.n	800677e <__swbuf_r+0x62>
 8006774:	89a3      	ldrh	r3, [r4, #12]
 8006776:	07db      	lsls	r3, r3, #31
 8006778:	d506      	bpl.n	8006788 <__swbuf_r+0x6c>
 800677a:	2e0a      	cmp	r6, #10
 800677c:	d104      	bne.n	8006788 <__swbuf_r+0x6c>
 800677e:	4621      	mov	r1, r4
 8006780:	4628      	mov	r0, r5
 8006782:	f000 f911 	bl	80069a8 <_fflush_r>
 8006786:	b988      	cbnz	r0, 80067ac <__swbuf_r+0x90>
 8006788:	4638      	mov	r0, r7
 800678a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800678c:	4b0a      	ldr	r3, [pc, #40]	; (80067b8 <__swbuf_r+0x9c>)
 800678e:	429c      	cmp	r4, r3
 8006790:	d101      	bne.n	8006796 <__swbuf_r+0x7a>
 8006792:	68ac      	ldr	r4, [r5, #8]
 8006794:	e7cf      	b.n	8006736 <__swbuf_r+0x1a>
 8006796:	4b09      	ldr	r3, [pc, #36]	; (80067bc <__swbuf_r+0xa0>)
 8006798:	429c      	cmp	r4, r3
 800679a:	bf08      	it	eq
 800679c:	68ec      	ldreq	r4, [r5, #12]
 800679e:	e7ca      	b.n	8006736 <__swbuf_r+0x1a>
 80067a0:	4621      	mov	r1, r4
 80067a2:	4628      	mov	r0, r5
 80067a4:	f000 f80c 	bl	80067c0 <__swsetup_r>
 80067a8:	2800      	cmp	r0, #0
 80067aa:	d0cb      	beq.n	8006744 <__swbuf_r+0x28>
 80067ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80067b0:	e7ea      	b.n	8006788 <__swbuf_r+0x6c>
 80067b2:	bf00      	nop
 80067b4:	08007aa4 	.word	0x08007aa4
 80067b8:	08007ac4 	.word	0x08007ac4
 80067bc:	08007a84 	.word	0x08007a84

080067c0 <__swsetup_r>:
 80067c0:	4b32      	ldr	r3, [pc, #200]	; (800688c <__swsetup_r+0xcc>)
 80067c2:	b570      	push	{r4, r5, r6, lr}
 80067c4:	681d      	ldr	r5, [r3, #0]
 80067c6:	4606      	mov	r6, r0
 80067c8:	460c      	mov	r4, r1
 80067ca:	b125      	cbz	r5, 80067d6 <__swsetup_r+0x16>
 80067cc:	69ab      	ldr	r3, [r5, #24]
 80067ce:	b913      	cbnz	r3, 80067d6 <__swsetup_r+0x16>
 80067d0:	4628      	mov	r0, r5
 80067d2:	f000 f97d 	bl	8006ad0 <__sinit>
 80067d6:	4b2e      	ldr	r3, [pc, #184]	; (8006890 <__swsetup_r+0xd0>)
 80067d8:	429c      	cmp	r4, r3
 80067da:	d10f      	bne.n	80067fc <__swsetup_r+0x3c>
 80067dc:	686c      	ldr	r4, [r5, #4]
 80067de:	89a3      	ldrh	r3, [r4, #12]
 80067e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067e4:	0719      	lsls	r1, r3, #28
 80067e6:	d42c      	bmi.n	8006842 <__swsetup_r+0x82>
 80067e8:	06dd      	lsls	r5, r3, #27
 80067ea:	d411      	bmi.n	8006810 <__swsetup_r+0x50>
 80067ec:	2309      	movs	r3, #9
 80067ee:	6033      	str	r3, [r6, #0]
 80067f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067f4:	81a3      	strh	r3, [r4, #12]
 80067f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067fa:	e03e      	b.n	800687a <__swsetup_r+0xba>
 80067fc:	4b25      	ldr	r3, [pc, #148]	; (8006894 <__swsetup_r+0xd4>)
 80067fe:	429c      	cmp	r4, r3
 8006800:	d101      	bne.n	8006806 <__swsetup_r+0x46>
 8006802:	68ac      	ldr	r4, [r5, #8]
 8006804:	e7eb      	b.n	80067de <__swsetup_r+0x1e>
 8006806:	4b24      	ldr	r3, [pc, #144]	; (8006898 <__swsetup_r+0xd8>)
 8006808:	429c      	cmp	r4, r3
 800680a:	bf08      	it	eq
 800680c:	68ec      	ldreq	r4, [r5, #12]
 800680e:	e7e6      	b.n	80067de <__swsetup_r+0x1e>
 8006810:	0758      	lsls	r0, r3, #29
 8006812:	d512      	bpl.n	800683a <__swsetup_r+0x7a>
 8006814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006816:	b141      	cbz	r1, 800682a <__swsetup_r+0x6a>
 8006818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800681c:	4299      	cmp	r1, r3
 800681e:	d002      	beq.n	8006826 <__swsetup_r+0x66>
 8006820:	4630      	mov	r0, r6
 8006822:	f000 fa63 	bl	8006cec <_free_r>
 8006826:	2300      	movs	r3, #0
 8006828:	6363      	str	r3, [r4, #52]	; 0x34
 800682a:	89a3      	ldrh	r3, [r4, #12]
 800682c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006830:	81a3      	strh	r3, [r4, #12]
 8006832:	2300      	movs	r3, #0
 8006834:	6063      	str	r3, [r4, #4]
 8006836:	6923      	ldr	r3, [r4, #16]
 8006838:	6023      	str	r3, [r4, #0]
 800683a:	89a3      	ldrh	r3, [r4, #12]
 800683c:	f043 0308 	orr.w	r3, r3, #8
 8006840:	81a3      	strh	r3, [r4, #12]
 8006842:	6923      	ldr	r3, [r4, #16]
 8006844:	b94b      	cbnz	r3, 800685a <__swsetup_r+0x9a>
 8006846:	89a3      	ldrh	r3, [r4, #12]
 8006848:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800684c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006850:	d003      	beq.n	800685a <__swsetup_r+0x9a>
 8006852:	4621      	mov	r1, r4
 8006854:	4630      	mov	r0, r6
 8006856:	f000 fa01 	bl	8006c5c <__smakebuf_r>
 800685a:	89a0      	ldrh	r0, [r4, #12]
 800685c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006860:	f010 0301 	ands.w	r3, r0, #1
 8006864:	d00a      	beq.n	800687c <__swsetup_r+0xbc>
 8006866:	2300      	movs	r3, #0
 8006868:	60a3      	str	r3, [r4, #8]
 800686a:	6963      	ldr	r3, [r4, #20]
 800686c:	425b      	negs	r3, r3
 800686e:	61a3      	str	r3, [r4, #24]
 8006870:	6923      	ldr	r3, [r4, #16]
 8006872:	b943      	cbnz	r3, 8006886 <__swsetup_r+0xc6>
 8006874:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006878:	d1ba      	bne.n	80067f0 <__swsetup_r+0x30>
 800687a:	bd70      	pop	{r4, r5, r6, pc}
 800687c:	0781      	lsls	r1, r0, #30
 800687e:	bf58      	it	pl
 8006880:	6963      	ldrpl	r3, [r4, #20]
 8006882:	60a3      	str	r3, [r4, #8]
 8006884:	e7f4      	b.n	8006870 <__swsetup_r+0xb0>
 8006886:	2000      	movs	r0, #0
 8006888:	e7f7      	b.n	800687a <__swsetup_r+0xba>
 800688a:	bf00      	nop
 800688c:	2000000c 	.word	0x2000000c
 8006890:	08007aa4 	.word	0x08007aa4
 8006894:	08007ac4 	.word	0x08007ac4
 8006898:	08007a84 	.word	0x08007a84

0800689c <__sflush_r>:
 800689c:	898a      	ldrh	r2, [r1, #12]
 800689e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068a2:	4605      	mov	r5, r0
 80068a4:	0710      	lsls	r0, r2, #28
 80068a6:	460c      	mov	r4, r1
 80068a8:	d458      	bmi.n	800695c <__sflush_r+0xc0>
 80068aa:	684b      	ldr	r3, [r1, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	dc05      	bgt.n	80068bc <__sflush_r+0x20>
 80068b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	dc02      	bgt.n	80068bc <__sflush_r+0x20>
 80068b6:	2000      	movs	r0, #0
 80068b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068be:	2e00      	cmp	r6, #0
 80068c0:	d0f9      	beq.n	80068b6 <__sflush_r+0x1a>
 80068c2:	2300      	movs	r3, #0
 80068c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068c8:	682f      	ldr	r7, [r5, #0]
 80068ca:	602b      	str	r3, [r5, #0]
 80068cc:	d032      	beq.n	8006934 <__sflush_r+0x98>
 80068ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068d0:	89a3      	ldrh	r3, [r4, #12]
 80068d2:	075a      	lsls	r2, r3, #29
 80068d4:	d505      	bpl.n	80068e2 <__sflush_r+0x46>
 80068d6:	6863      	ldr	r3, [r4, #4]
 80068d8:	1ac0      	subs	r0, r0, r3
 80068da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068dc:	b10b      	cbz	r3, 80068e2 <__sflush_r+0x46>
 80068de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068e0:	1ac0      	subs	r0, r0, r3
 80068e2:	2300      	movs	r3, #0
 80068e4:	4602      	mov	r2, r0
 80068e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068e8:	6a21      	ldr	r1, [r4, #32]
 80068ea:	4628      	mov	r0, r5
 80068ec:	47b0      	blx	r6
 80068ee:	1c43      	adds	r3, r0, #1
 80068f0:	89a3      	ldrh	r3, [r4, #12]
 80068f2:	d106      	bne.n	8006902 <__sflush_r+0x66>
 80068f4:	6829      	ldr	r1, [r5, #0]
 80068f6:	291d      	cmp	r1, #29
 80068f8:	d82c      	bhi.n	8006954 <__sflush_r+0xb8>
 80068fa:	4a2a      	ldr	r2, [pc, #168]	; (80069a4 <__sflush_r+0x108>)
 80068fc:	40ca      	lsrs	r2, r1
 80068fe:	07d6      	lsls	r6, r2, #31
 8006900:	d528      	bpl.n	8006954 <__sflush_r+0xb8>
 8006902:	2200      	movs	r2, #0
 8006904:	6062      	str	r2, [r4, #4]
 8006906:	04d9      	lsls	r1, r3, #19
 8006908:	6922      	ldr	r2, [r4, #16]
 800690a:	6022      	str	r2, [r4, #0]
 800690c:	d504      	bpl.n	8006918 <__sflush_r+0x7c>
 800690e:	1c42      	adds	r2, r0, #1
 8006910:	d101      	bne.n	8006916 <__sflush_r+0x7a>
 8006912:	682b      	ldr	r3, [r5, #0]
 8006914:	b903      	cbnz	r3, 8006918 <__sflush_r+0x7c>
 8006916:	6560      	str	r0, [r4, #84]	; 0x54
 8006918:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800691a:	602f      	str	r7, [r5, #0]
 800691c:	2900      	cmp	r1, #0
 800691e:	d0ca      	beq.n	80068b6 <__sflush_r+0x1a>
 8006920:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006924:	4299      	cmp	r1, r3
 8006926:	d002      	beq.n	800692e <__sflush_r+0x92>
 8006928:	4628      	mov	r0, r5
 800692a:	f000 f9df 	bl	8006cec <_free_r>
 800692e:	2000      	movs	r0, #0
 8006930:	6360      	str	r0, [r4, #52]	; 0x34
 8006932:	e7c1      	b.n	80068b8 <__sflush_r+0x1c>
 8006934:	6a21      	ldr	r1, [r4, #32]
 8006936:	2301      	movs	r3, #1
 8006938:	4628      	mov	r0, r5
 800693a:	47b0      	blx	r6
 800693c:	1c41      	adds	r1, r0, #1
 800693e:	d1c7      	bne.n	80068d0 <__sflush_r+0x34>
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0c4      	beq.n	80068d0 <__sflush_r+0x34>
 8006946:	2b1d      	cmp	r3, #29
 8006948:	d001      	beq.n	800694e <__sflush_r+0xb2>
 800694a:	2b16      	cmp	r3, #22
 800694c:	d101      	bne.n	8006952 <__sflush_r+0xb6>
 800694e:	602f      	str	r7, [r5, #0]
 8006950:	e7b1      	b.n	80068b6 <__sflush_r+0x1a>
 8006952:	89a3      	ldrh	r3, [r4, #12]
 8006954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006958:	81a3      	strh	r3, [r4, #12]
 800695a:	e7ad      	b.n	80068b8 <__sflush_r+0x1c>
 800695c:	690f      	ldr	r7, [r1, #16]
 800695e:	2f00      	cmp	r7, #0
 8006960:	d0a9      	beq.n	80068b6 <__sflush_r+0x1a>
 8006962:	0793      	lsls	r3, r2, #30
 8006964:	680e      	ldr	r6, [r1, #0]
 8006966:	bf08      	it	eq
 8006968:	694b      	ldreq	r3, [r1, #20]
 800696a:	600f      	str	r7, [r1, #0]
 800696c:	bf18      	it	ne
 800696e:	2300      	movne	r3, #0
 8006970:	eba6 0807 	sub.w	r8, r6, r7
 8006974:	608b      	str	r3, [r1, #8]
 8006976:	f1b8 0f00 	cmp.w	r8, #0
 800697a:	dd9c      	ble.n	80068b6 <__sflush_r+0x1a>
 800697c:	6a21      	ldr	r1, [r4, #32]
 800697e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006980:	4643      	mov	r3, r8
 8006982:	463a      	mov	r2, r7
 8006984:	4628      	mov	r0, r5
 8006986:	47b0      	blx	r6
 8006988:	2800      	cmp	r0, #0
 800698a:	dc06      	bgt.n	800699a <__sflush_r+0xfe>
 800698c:	89a3      	ldrh	r3, [r4, #12]
 800698e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006992:	81a3      	strh	r3, [r4, #12]
 8006994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006998:	e78e      	b.n	80068b8 <__sflush_r+0x1c>
 800699a:	4407      	add	r7, r0
 800699c:	eba8 0800 	sub.w	r8, r8, r0
 80069a0:	e7e9      	b.n	8006976 <__sflush_r+0xda>
 80069a2:	bf00      	nop
 80069a4:	20400001 	.word	0x20400001

080069a8 <_fflush_r>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	690b      	ldr	r3, [r1, #16]
 80069ac:	4605      	mov	r5, r0
 80069ae:	460c      	mov	r4, r1
 80069b0:	b913      	cbnz	r3, 80069b8 <_fflush_r+0x10>
 80069b2:	2500      	movs	r5, #0
 80069b4:	4628      	mov	r0, r5
 80069b6:	bd38      	pop	{r3, r4, r5, pc}
 80069b8:	b118      	cbz	r0, 80069c2 <_fflush_r+0x1a>
 80069ba:	6983      	ldr	r3, [r0, #24]
 80069bc:	b90b      	cbnz	r3, 80069c2 <_fflush_r+0x1a>
 80069be:	f000 f887 	bl	8006ad0 <__sinit>
 80069c2:	4b14      	ldr	r3, [pc, #80]	; (8006a14 <_fflush_r+0x6c>)
 80069c4:	429c      	cmp	r4, r3
 80069c6:	d11b      	bne.n	8006a00 <_fflush_r+0x58>
 80069c8:	686c      	ldr	r4, [r5, #4]
 80069ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d0ef      	beq.n	80069b2 <_fflush_r+0xa>
 80069d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80069d4:	07d0      	lsls	r0, r2, #31
 80069d6:	d404      	bmi.n	80069e2 <_fflush_r+0x3a>
 80069d8:	0599      	lsls	r1, r3, #22
 80069da:	d402      	bmi.n	80069e2 <_fflush_r+0x3a>
 80069dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069de:	f000 f915 	bl	8006c0c <__retarget_lock_acquire_recursive>
 80069e2:	4628      	mov	r0, r5
 80069e4:	4621      	mov	r1, r4
 80069e6:	f7ff ff59 	bl	800689c <__sflush_r>
 80069ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069ec:	07da      	lsls	r2, r3, #31
 80069ee:	4605      	mov	r5, r0
 80069f0:	d4e0      	bmi.n	80069b4 <_fflush_r+0xc>
 80069f2:	89a3      	ldrh	r3, [r4, #12]
 80069f4:	059b      	lsls	r3, r3, #22
 80069f6:	d4dd      	bmi.n	80069b4 <_fflush_r+0xc>
 80069f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069fa:	f000 f908 	bl	8006c0e <__retarget_lock_release_recursive>
 80069fe:	e7d9      	b.n	80069b4 <_fflush_r+0xc>
 8006a00:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <_fflush_r+0x70>)
 8006a02:	429c      	cmp	r4, r3
 8006a04:	d101      	bne.n	8006a0a <_fflush_r+0x62>
 8006a06:	68ac      	ldr	r4, [r5, #8]
 8006a08:	e7df      	b.n	80069ca <_fflush_r+0x22>
 8006a0a:	4b04      	ldr	r3, [pc, #16]	; (8006a1c <_fflush_r+0x74>)
 8006a0c:	429c      	cmp	r4, r3
 8006a0e:	bf08      	it	eq
 8006a10:	68ec      	ldreq	r4, [r5, #12]
 8006a12:	e7da      	b.n	80069ca <_fflush_r+0x22>
 8006a14:	08007aa4 	.word	0x08007aa4
 8006a18:	08007ac4 	.word	0x08007ac4
 8006a1c:	08007a84 	.word	0x08007a84

08006a20 <std>:
 8006a20:	2300      	movs	r3, #0
 8006a22:	b510      	push	{r4, lr}
 8006a24:	4604      	mov	r4, r0
 8006a26:	e9c0 3300 	strd	r3, r3, [r0]
 8006a2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a2e:	6083      	str	r3, [r0, #8]
 8006a30:	8181      	strh	r1, [r0, #12]
 8006a32:	6643      	str	r3, [r0, #100]	; 0x64
 8006a34:	81c2      	strh	r2, [r0, #14]
 8006a36:	6183      	str	r3, [r0, #24]
 8006a38:	4619      	mov	r1, r3
 8006a3a:	2208      	movs	r2, #8
 8006a3c:	305c      	adds	r0, #92	; 0x5c
 8006a3e:	f7ff fd09 	bl	8006454 <memset>
 8006a42:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <std+0x38>)
 8006a44:	6263      	str	r3, [r4, #36]	; 0x24
 8006a46:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <std+0x3c>)
 8006a48:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a4a:	4b05      	ldr	r3, [pc, #20]	; (8006a60 <std+0x40>)
 8006a4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a4e:	4b05      	ldr	r3, [pc, #20]	; (8006a64 <std+0x44>)
 8006a50:	6224      	str	r4, [r4, #32]
 8006a52:	6323      	str	r3, [r4, #48]	; 0x30
 8006a54:	bd10      	pop	{r4, pc}
 8006a56:	bf00      	nop
 8006a58:	080074a9 	.word	0x080074a9
 8006a5c:	080074cb 	.word	0x080074cb
 8006a60:	08007503 	.word	0x08007503
 8006a64:	08007527 	.word	0x08007527

08006a68 <_cleanup_r>:
 8006a68:	4901      	ldr	r1, [pc, #4]	; (8006a70 <_cleanup_r+0x8>)
 8006a6a:	f000 b8af 	b.w	8006bcc <_fwalk_reent>
 8006a6e:	bf00      	nop
 8006a70:	080069a9 	.word	0x080069a9

08006a74 <__sfmoreglue>:
 8006a74:	b570      	push	{r4, r5, r6, lr}
 8006a76:	2268      	movs	r2, #104	; 0x68
 8006a78:	1e4d      	subs	r5, r1, #1
 8006a7a:	4355      	muls	r5, r2
 8006a7c:	460e      	mov	r6, r1
 8006a7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a82:	f000 f99f 	bl	8006dc4 <_malloc_r>
 8006a86:	4604      	mov	r4, r0
 8006a88:	b140      	cbz	r0, 8006a9c <__sfmoreglue+0x28>
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	e9c0 1600 	strd	r1, r6, [r0]
 8006a90:	300c      	adds	r0, #12
 8006a92:	60a0      	str	r0, [r4, #8]
 8006a94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a98:	f7ff fcdc 	bl	8006454 <memset>
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}

08006aa0 <__sfp_lock_acquire>:
 8006aa0:	4801      	ldr	r0, [pc, #4]	; (8006aa8 <__sfp_lock_acquire+0x8>)
 8006aa2:	f000 b8b3 	b.w	8006c0c <__retarget_lock_acquire_recursive>
 8006aa6:	bf00      	nop
 8006aa8:	20000929 	.word	0x20000929

08006aac <__sfp_lock_release>:
 8006aac:	4801      	ldr	r0, [pc, #4]	; (8006ab4 <__sfp_lock_release+0x8>)
 8006aae:	f000 b8ae 	b.w	8006c0e <__retarget_lock_release_recursive>
 8006ab2:	bf00      	nop
 8006ab4:	20000929 	.word	0x20000929

08006ab8 <__sinit_lock_acquire>:
 8006ab8:	4801      	ldr	r0, [pc, #4]	; (8006ac0 <__sinit_lock_acquire+0x8>)
 8006aba:	f000 b8a7 	b.w	8006c0c <__retarget_lock_acquire_recursive>
 8006abe:	bf00      	nop
 8006ac0:	2000092a 	.word	0x2000092a

08006ac4 <__sinit_lock_release>:
 8006ac4:	4801      	ldr	r0, [pc, #4]	; (8006acc <__sinit_lock_release+0x8>)
 8006ac6:	f000 b8a2 	b.w	8006c0e <__retarget_lock_release_recursive>
 8006aca:	bf00      	nop
 8006acc:	2000092a 	.word	0x2000092a

08006ad0 <__sinit>:
 8006ad0:	b510      	push	{r4, lr}
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	f7ff fff0 	bl	8006ab8 <__sinit_lock_acquire>
 8006ad8:	69a3      	ldr	r3, [r4, #24]
 8006ada:	b11b      	cbz	r3, 8006ae4 <__sinit+0x14>
 8006adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ae0:	f7ff bff0 	b.w	8006ac4 <__sinit_lock_release>
 8006ae4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ae8:	6523      	str	r3, [r4, #80]	; 0x50
 8006aea:	4b13      	ldr	r3, [pc, #76]	; (8006b38 <__sinit+0x68>)
 8006aec:	4a13      	ldr	r2, [pc, #76]	; (8006b3c <__sinit+0x6c>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006af2:	42a3      	cmp	r3, r4
 8006af4:	bf04      	itt	eq
 8006af6:	2301      	moveq	r3, #1
 8006af8:	61a3      	streq	r3, [r4, #24]
 8006afa:	4620      	mov	r0, r4
 8006afc:	f000 f820 	bl	8006b40 <__sfp>
 8006b00:	6060      	str	r0, [r4, #4]
 8006b02:	4620      	mov	r0, r4
 8006b04:	f000 f81c 	bl	8006b40 <__sfp>
 8006b08:	60a0      	str	r0, [r4, #8]
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f000 f818 	bl	8006b40 <__sfp>
 8006b10:	2200      	movs	r2, #0
 8006b12:	60e0      	str	r0, [r4, #12]
 8006b14:	2104      	movs	r1, #4
 8006b16:	6860      	ldr	r0, [r4, #4]
 8006b18:	f7ff ff82 	bl	8006a20 <std>
 8006b1c:	68a0      	ldr	r0, [r4, #8]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	2109      	movs	r1, #9
 8006b22:	f7ff ff7d 	bl	8006a20 <std>
 8006b26:	68e0      	ldr	r0, [r4, #12]
 8006b28:	2202      	movs	r2, #2
 8006b2a:	2112      	movs	r1, #18
 8006b2c:	f7ff ff78 	bl	8006a20 <std>
 8006b30:	2301      	movs	r3, #1
 8006b32:	61a3      	str	r3, [r4, #24]
 8006b34:	e7d2      	b.n	8006adc <__sinit+0xc>
 8006b36:	bf00      	nop
 8006b38:	08007a80 	.word	0x08007a80
 8006b3c:	08006a69 	.word	0x08006a69

08006b40 <__sfp>:
 8006b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b42:	4607      	mov	r7, r0
 8006b44:	f7ff ffac 	bl	8006aa0 <__sfp_lock_acquire>
 8006b48:	4b1e      	ldr	r3, [pc, #120]	; (8006bc4 <__sfp+0x84>)
 8006b4a:	681e      	ldr	r6, [r3, #0]
 8006b4c:	69b3      	ldr	r3, [r6, #24]
 8006b4e:	b913      	cbnz	r3, 8006b56 <__sfp+0x16>
 8006b50:	4630      	mov	r0, r6
 8006b52:	f7ff ffbd 	bl	8006ad0 <__sinit>
 8006b56:	3648      	adds	r6, #72	; 0x48
 8006b58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	d503      	bpl.n	8006b68 <__sfp+0x28>
 8006b60:	6833      	ldr	r3, [r6, #0]
 8006b62:	b30b      	cbz	r3, 8006ba8 <__sfp+0x68>
 8006b64:	6836      	ldr	r6, [r6, #0]
 8006b66:	e7f7      	b.n	8006b58 <__sfp+0x18>
 8006b68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b6c:	b9d5      	cbnz	r5, 8006ba4 <__sfp+0x64>
 8006b6e:	4b16      	ldr	r3, [pc, #88]	; (8006bc8 <__sfp+0x88>)
 8006b70:	60e3      	str	r3, [r4, #12]
 8006b72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b76:	6665      	str	r5, [r4, #100]	; 0x64
 8006b78:	f000 f847 	bl	8006c0a <__retarget_lock_init_recursive>
 8006b7c:	f7ff ff96 	bl	8006aac <__sfp_lock_release>
 8006b80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006b84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b88:	6025      	str	r5, [r4, #0]
 8006b8a:	61a5      	str	r5, [r4, #24]
 8006b8c:	2208      	movs	r2, #8
 8006b8e:	4629      	mov	r1, r5
 8006b90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b94:	f7ff fc5e 	bl	8006454 <memset>
 8006b98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ba4:	3468      	adds	r4, #104	; 0x68
 8006ba6:	e7d9      	b.n	8006b5c <__sfp+0x1c>
 8006ba8:	2104      	movs	r1, #4
 8006baa:	4638      	mov	r0, r7
 8006bac:	f7ff ff62 	bl	8006a74 <__sfmoreglue>
 8006bb0:	4604      	mov	r4, r0
 8006bb2:	6030      	str	r0, [r6, #0]
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	d1d5      	bne.n	8006b64 <__sfp+0x24>
 8006bb8:	f7ff ff78 	bl	8006aac <__sfp_lock_release>
 8006bbc:	230c      	movs	r3, #12
 8006bbe:	603b      	str	r3, [r7, #0]
 8006bc0:	e7ee      	b.n	8006ba0 <__sfp+0x60>
 8006bc2:	bf00      	nop
 8006bc4:	08007a80 	.word	0x08007a80
 8006bc8:	ffff0001 	.word	0xffff0001

08006bcc <_fwalk_reent>:
 8006bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bd0:	4606      	mov	r6, r0
 8006bd2:	4688      	mov	r8, r1
 8006bd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006bd8:	2700      	movs	r7, #0
 8006bda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006bde:	f1b9 0901 	subs.w	r9, r9, #1
 8006be2:	d505      	bpl.n	8006bf0 <_fwalk_reent+0x24>
 8006be4:	6824      	ldr	r4, [r4, #0]
 8006be6:	2c00      	cmp	r4, #0
 8006be8:	d1f7      	bne.n	8006bda <_fwalk_reent+0xe>
 8006bea:	4638      	mov	r0, r7
 8006bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bf0:	89ab      	ldrh	r3, [r5, #12]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d907      	bls.n	8006c06 <_fwalk_reent+0x3a>
 8006bf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	d003      	beq.n	8006c06 <_fwalk_reent+0x3a>
 8006bfe:	4629      	mov	r1, r5
 8006c00:	4630      	mov	r0, r6
 8006c02:	47c0      	blx	r8
 8006c04:	4307      	orrs	r7, r0
 8006c06:	3568      	adds	r5, #104	; 0x68
 8006c08:	e7e9      	b.n	8006bde <_fwalk_reent+0x12>

08006c0a <__retarget_lock_init_recursive>:
 8006c0a:	4770      	bx	lr

08006c0c <__retarget_lock_acquire_recursive>:
 8006c0c:	4770      	bx	lr

08006c0e <__retarget_lock_release_recursive>:
 8006c0e:	4770      	bx	lr

08006c10 <__swhatbuf_r>:
 8006c10:	b570      	push	{r4, r5, r6, lr}
 8006c12:	460e      	mov	r6, r1
 8006c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c18:	2900      	cmp	r1, #0
 8006c1a:	b096      	sub	sp, #88	; 0x58
 8006c1c:	4614      	mov	r4, r2
 8006c1e:	461d      	mov	r5, r3
 8006c20:	da08      	bge.n	8006c34 <__swhatbuf_r+0x24>
 8006c22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	602a      	str	r2, [r5, #0]
 8006c2a:	061a      	lsls	r2, r3, #24
 8006c2c:	d410      	bmi.n	8006c50 <__swhatbuf_r+0x40>
 8006c2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c32:	e00e      	b.n	8006c52 <__swhatbuf_r+0x42>
 8006c34:	466a      	mov	r2, sp
 8006c36:	f000 fc9d 	bl	8007574 <_fstat_r>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	dbf1      	blt.n	8006c22 <__swhatbuf_r+0x12>
 8006c3e:	9a01      	ldr	r2, [sp, #4]
 8006c40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c48:	425a      	negs	r2, r3
 8006c4a:	415a      	adcs	r2, r3
 8006c4c:	602a      	str	r2, [r5, #0]
 8006c4e:	e7ee      	b.n	8006c2e <__swhatbuf_r+0x1e>
 8006c50:	2340      	movs	r3, #64	; 0x40
 8006c52:	2000      	movs	r0, #0
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	b016      	add	sp, #88	; 0x58
 8006c58:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c5c <__smakebuf_r>:
 8006c5c:	898b      	ldrh	r3, [r1, #12]
 8006c5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c60:	079d      	lsls	r5, r3, #30
 8006c62:	4606      	mov	r6, r0
 8006c64:	460c      	mov	r4, r1
 8006c66:	d507      	bpl.n	8006c78 <__smakebuf_r+0x1c>
 8006c68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c6c:	6023      	str	r3, [r4, #0]
 8006c6e:	6123      	str	r3, [r4, #16]
 8006c70:	2301      	movs	r3, #1
 8006c72:	6163      	str	r3, [r4, #20]
 8006c74:	b002      	add	sp, #8
 8006c76:	bd70      	pop	{r4, r5, r6, pc}
 8006c78:	ab01      	add	r3, sp, #4
 8006c7a:	466a      	mov	r2, sp
 8006c7c:	f7ff ffc8 	bl	8006c10 <__swhatbuf_r>
 8006c80:	9900      	ldr	r1, [sp, #0]
 8006c82:	4605      	mov	r5, r0
 8006c84:	4630      	mov	r0, r6
 8006c86:	f000 f89d 	bl	8006dc4 <_malloc_r>
 8006c8a:	b948      	cbnz	r0, 8006ca0 <__smakebuf_r+0x44>
 8006c8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c90:	059a      	lsls	r2, r3, #22
 8006c92:	d4ef      	bmi.n	8006c74 <__smakebuf_r+0x18>
 8006c94:	f023 0303 	bic.w	r3, r3, #3
 8006c98:	f043 0302 	orr.w	r3, r3, #2
 8006c9c:	81a3      	strh	r3, [r4, #12]
 8006c9e:	e7e3      	b.n	8006c68 <__smakebuf_r+0xc>
 8006ca0:	4b0d      	ldr	r3, [pc, #52]	; (8006cd8 <__smakebuf_r+0x7c>)
 8006ca2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ca4:	89a3      	ldrh	r3, [r4, #12]
 8006ca6:	6020      	str	r0, [r4, #0]
 8006ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cac:	81a3      	strh	r3, [r4, #12]
 8006cae:	9b00      	ldr	r3, [sp, #0]
 8006cb0:	6163      	str	r3, [r4, #20]
 8006cb2:	9b01      	ldr	r3, [sp, #4]
 8006cb4:	6120      	str	r0, [r4, #16]
 8006cb6:	b15b      	cbz	r3, 8006cd0 <__smakebuf_r+0x74>
 8006cb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cbc:	4630      	mov	r0, r6
 8006cbe:	f000 fc6b 	bl	8007598 <_isatty_r>
 8006cc2:	b128      	cbz	r0, 8006cd0 <__smakebuf_r+0x74>
 8006cc4:	89a3      	ldrh	r3, [r4, #12]
 8006cc6:	f023 0303 	bic.w	r3, r3, #3
 8006cca:	f043 0301 	orr.w	r3, r3, #1
 8006cce:	81a3      	strh	r3, [r4, #12]
 8006cd0:	89a0      	ldrh	r0, [r4, #12]
 8006cd2:	4305      	orrs	r5, r0
 8006cd4:	81a5      	strh	r5, [r4, #12]
 8006cd6:	e7cd      	b.n	8006c74 <__smakebuf_r+0x18>
 8006cd8:	08006a69 	.word	0x08006a69

08006cdc <malloc>:
 8006cdc:	4b02      	ldr	r3, [pc, #8]	; (8006ce8 <malloc+0xc>)
 8006cde:	4601      	mov	r1, r0
 8006ce0:	6818      	ldr	r0, [r3, #0]
 8006ce2:	f000 b86f 	b.w	8006dc4 <_malloc_r>
 8006ce6:	bf00      	nop
 8006ce8:	2000000c 	.word	0x2000000c

08006cec <_free_r>:
 8006cec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cee:	2900      	cmp	r1, #0
 8006cf0:	d044      	beq.n	8006d7c <_free_r+0x90>
 8006cf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cf6:	9001      	str	r0, [sp, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f1a1 0404 	sub.w	r4, r1, #4
 8006cfe:	bfb8      	it	lt
 8006d00:	18e4      	addlt	r4, r4, r3
 8006d02:	f000 fc6b 	bl	80075dc <__malloc_lock>
 8006d06:	4a1e      	ldr	r2, [pc, #120]	; (8006d80 <_free_r+0x94>)
 8006d08:	9801      	ldr	r0, [sp, #4]
 8006d0a:	6813      	ldr	r3, [r2, #0]
 8006d0c:	b933      	cbnz	r3, 8006d1c <_free_r+0x30>
 8006d0e:	6063      	str	r3, [r4, #4]
 8006d10:	6014      	str	r4, [r2, #0]
 8006d12:	b003      	add	sp, #12
 8006d14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d18:	f000 bc66 	b.w	80075e8 <__malloc_unlock>
 8006d1c:	42a3      	cmp	r3, r4
 8006d1e:	d908      	bls.n	8006d32 <_free_r+0x46>
 8006d20:	6825      	ldr	r5, [r4, #0]
 8006d22:	1961      	adds	r1, r4, r5
 8006d24:	428b      	cmp	r3, r1
 8006d26:	bf01      	itttt	eq
 8006d28:	6819      	ldreq	r1, [r3, #0]
 8006d2a:	685b      	ldreq	r3, [r3, #4]
 8006d2c:	1949      	addeq	r1, r1, r5
 8006d2e:	6021      	streq	r1, [r4, #0]
 8006d30:	e7ed      	b.n	8006d0e <_free_r+0x22>
 8006d32:	461a      	mov	r2, r3
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	b10b      	cbz	r3, 8006d3c <_free_r+0x50>
 8006d38:	42a3      	cmp	r3, r4
 8006d3a:	d9fa      	bls.n	8006d32 <_free_r+0x46>
 8006d3c:	6811      	ldr	r1, [r2, #0]
 8006d3e:	1855      	adds	r5, r2, r1
 8006d40:	42a5      	cmp	r5, r4
 8006d42:	d10b      	bne.n	8006d5c <_free_r+0x70>
 8006d44:	6824      	ldr	r4, [r4, #0]
 8006d46:	4421      	add	r1, r4
 8006d48:	1854      	adds	r4, r2, r1
 8006d4a:	42a3      	cmp	r3, r4
 8006d4c:	6011      	str	r1, [r2, #0]
 8006d4e:	d1e0      	bne.n	8006d12 <_free_r+0x26>
 8006d50:	681c      	ldr	r4, [r3, #0]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	6053      	str	r3, [r2, #4]
 8006d56:	4421      	add	r1, r4
 8006d58:	6011      	str	r1, [r2, #0]
 8006d5a:	e7da      	b.n	8006d12 <_free_r+0x26>
 8006d5c:	d902      	bls.n	8006d64 <_free_r+0x78>
 8006d5e:	230c      	movs	r3, #12
 8006d60:	6003      	str	r3, [r0, #0]
 8006d62:	e7d6      	b.n	8006d12 <_free_r+0x26>
 8006d64:	6825      	ldr	r5, [r4, #0]
 8006d66:	1961      	adds	r1, r4, r5
 8006d68:	428b      	cmp	r3, r1
 8006d6a:	bf04      	itt	eq
 8006d6c:	6819      	ldreq	r1, [r3, #0]
 8006d6e:	685b      	ldreq	r3, [r3, #4]
 8006d70:	6063      	str	r3, [r4, #4]
 8006d72:	bf04      	itt	eq
 8006d74:	1949      	addeq	r1, r1, r5
 8006d76:	6021      	streq	r1, [r4, #0]
 8006d78:	6054      	str	r4, [r2, #4]
 8006d7a:	e7ca      	b.n	8006d12 <_free_r+0x26>
 8006d7c:	b003      	add	sp, #12
 8006d7e:	bd30      	pop	{r4, r5, pc}
 8006d80:	2000092c 	.word	0x2000092c

08006d84 <sbrk_aligned>:
 8006d84:	b570      	push	{r4, r5, r6, lr}
 8006d86:	4e0e      	ldr	r6, [pc, #56]	; (8006dc0 <sbrk_aligned+0x3c>)
 8006d88:	460c      	mov	r4, r1
 8006d8a:	6831      	ldr	r1, [r6, #0]
 8006d8c:	4605      	mov	r5, r0
 8006d8e:	b911      	cbnz	r1, 8006d96 <sbrk_aligned+0x12>
 8006d90:	f000 fb7a 	bl	8007488 <_sbrk_r>
 8006d94:	6030      	str	r0, [r6, #0]
 8006d96:	4621      	mov	r1, r4
 8006d98:	4628      	mov	r0, r5
 8006d9a:	f000 fb75 	bl	8007488 <_sbrk_r>
 8006d9e:	1c43      	adds	r3, r0, #1
 8006da0:	d00a      	beq.n	8006db8 <sbrk_aligned+0x34>
 8006da2:	1cc4      	adds	r4, r0, #3
 8006da4:	f024 0403 	bic.w	r4, r4, #3
 8006da8:	42a0      	cmp	r0, r4
 8006daa:	d007      	beq.n	8006dbc <sbrk_aligned+0x38>
 8006dac:	1a21      	subs	r1, r4, r0
 8006dae:	4628      	mov	r0, r5
 8006db0:	f000 fb6a 	bl	8007488 <_sbrk_r>
 8006db4:	3001      	adds	r0, #1
 8006db6:	d101      	bne.n	8006dbc <sbrk_aligned+0x38>
 8006db8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	bd70      	pop	{r4, r5, r6, pc}
 8006dc0:	20000930 	.word	0x20000930

08006dc4 <_malloc_r>:
 8006dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc8:	1ccd      	adds	r5, r1, #3
 8006dca:	f025 0503 	bic.w	r5, r5, #3
 8006dce:	3508      	adds	r5, #8
 8006dd0:	2d0c      	cmp	r5, #12
 8006dd2:	bf38      	it	cc
 8006dd4:	250c      	movcc	r5, #12
 8006dd6:	2d00      	cmp	r5, #0
 8006dd8:	4607      	mov	r7, r0
 8006dda:	db01      	blt.n	8006de0 <_malloc_r+0x1c>
 8006ddc:	42a9      	cmp	r1, r5
 8006dde:	d905      	bls.n	8006dec <_malloc_r+0x28>
 8006de0:	230c      	movs	r3, #12
 8006de2:	603b      	str	r3, [r7, #0]
 8006de4:	2600      	movs	r6, #0
 8006de6:	4630      	mov	r0, r6
 8006de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dec:	4e2e      	ldr	r6, [pc, #184]	; (8006ea8 <_malloc_r+0xe4>)
 8006dee:	f000 fbf5 	bl	80075dc <__malloc_lock>
 8006df2:	6833      	ldr	r3, [r6, #0]
 8006df4:	461c      	mov	r4, r3
 8006df6:	bb34      	cbnz	r4, 8006e46 <_malloc_r+0x82>
 8006df8:	4629      	mov	r1, r5
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	f7ff ffc2 	bl	8006d84 <sbrk_aligned>
 8006e00:	1c43      	adds	r3, r0, #1
 8006e02:	4604      	mov	r4, r0
 8006e04:	d14d      	bne.n	8006ea2 <_malloc_r+0xde>
 8006e06:	6834      	ldr	r4, [r6, #0]
 8006e08:	4626      	mov	r6, r4
 8006e0a:	2e00      	cmp	r6, #0
 8006e0c:	d140      	bne.n	8006e90 <_malloc_r+0xcc>
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	4631      	mov	r1, r6
 8006e12:	4638      	mov	r0, r7
 8006e14:	eb04 0803 	add.w	r8, r4, r3
 8006e18:	f000 fb36 	bl	8007488 <_sbrk_r>
 8006e1c:	4580      	cmp	r8, r0
 8006e1e:	d13a      	bne.n	8006e96 <_malloc_r+0xd2>
 8006e20:	6821      	ldr	r1, [r4, #0]
 8006e22:	3503      	adds	r5, #3
 8006e24:	1a6d      	subs	r5, r5, r1
 8006e26:	f025 0503 	bic.w	r5, r5, #3
 8006e2a:	3508      	adds	r5, #8
 8006e2c:	2d0c      	cmp	r5, #12
 8006e2e:	bf38      	it	cc
 8006e30:	250c      	movcc	r5, #12
 8006e32:	4629      	mov	r1, r5
 8006e34:	4638      	mov	r0, r7
 8006e36:	f7ff ffa5 	bl	8006d84 <sbrk_aligned>
 8006e3a:	3001      	adds	r0, #1
 8006e3c:	d02b      	beq.n	8006e96 <_malloc_r+0xd2>
 8006e3e:	6823      	ldr	r3, [r4, #0]
 8006e40:	442b      	add	r3, r5
 8006e42:	6023      	str	r3, [r4, #0]
 8006e44:	e00e      	b.n	8006e64 <_malloc_r+0xa0>
 8006e46:	6822      	ldr	r2, [r4, #0]
 8006e48:	1b52      	subs	r2, r2, r5
 8006e4a:	d41e      	bmi.n	8006e8a <_malloc_r+0xc6>
 8006e4c:	2a0b      	cmp	r2, #11
 8006e4e:	d916      	bls.n	8006e7e <_malloc_r+0xba>
 8006e50:	1961      	adds	r1, r4, r5
 8006e52:	42a3      	cmp	r3, r4
 8006e54:	6025      	str	r5, [r4, #0]
 8006e56:	bf18      	it	ne
 8006e58:	6059      	strne	r1, [r3, #4]
 8006e5a:	6863      	ldr	r3, [r4, #4]
 8006e5c:	bf08      	it	eq
 8006e5e:	6031      	streq	r1, [r6, #0]
 8006e60:	5162      	str	r2, [r4, r5]
 8006e62:	604b      	str	r3, [r1, #4]
 8006e64:	4638      	mov	r0, r7
 8006e66:	f104 060b 	add.w	r6, r4, #11
 8006e6a:	f000 fbbd 	bl	80075e8 <__malloc_unlock>
 8006e6e:	f026 0607 	bic.w	r6, r6, #7
 8006e72:	1d23      	adds	r3, r4, #4
 8006e74:	1af2      	subs	r2, r6, r3
 8006e76:	d0b6      	beq.n	8006de6 <_malloc_r+0x22>
 8006e78:	1b9b      	subs	r3, r3, r6
 8006e7a:	50a3      	str	r3, [r4, r2]
 8006e7c:	e7b3      	b.n	8006de6 <_malloc_r+0x22>
 8006e7e:	6862      	ldr	r2, [r4, #4]
 8006e80:	42a3      	cmp	r3, r4
 8006e82:	bf0c      	ite	eq
 8006e84:	6032      	streq	r2, [r6, #0]
 8006e86:	605a      	strne	r2, [r3, #4]
 8006e88:	e7ec      	b.n	8006e64 <_malloc_r+0xa0>
 8006e8a:	4623      	mov	r3, r4
 8006e8c:	6864      	ldr	r4, [r4, #4]
 8006e8e:	e7b2      	b.n	8006df6 <_malloc_r+0x32>
 8006e90:	4634      	mov	r4, r6
 8006e92:	6876      	ldr	r6, [r6, #4]
 8006e94:	e7b9      	b.n	8006e0a <_malloc_r+0x46>
 8006e96:	230c      	movs	r3, #12
 8006e98:	603b      	str	r3, [r7, #0]
 8006e9a:	4638      	mov	r0, r7
 8006e9c:	f000 fba4 	bl	80075e8 <__malloc_unlock>
 8006ea0:	e7a1      	b.n	8006de6 <_malloc_r+0x22>
 8006ea2:	6025      	str	r5, [r4, #0]
 8006ea4:	e7de      	b.n	8006e64 <_malloc_r+0xa0>
 8006ea6:	bf00      	nop
 8006ea8:	2000092c 	.word	0x2000092c

08006eac <__sfputc_r>:
 8006eac:	6893      	ldr	r3, [r2, #8]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	b410      	push	{r4}
 8006eb4:	6093      	str	r3, [r2, #8]
 8006eb6:	da08      	bge.n	8006eca <__sfputc_r+0x1e>
 8006eb8:	6994      	ldr	r4, [r2, #24]
 8006eba:	42a3      	cmp	r3, r4
 8006ebc:	db01      	blt.n	8006ec2 <__sfputc_r+0x16>
 8006ebe:	290a      	cmp	r1, #10
 8006ec0:	d103      	bne.n	8006eca <__sfputc_r+0x1e>
 8006ec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ec6:	f7ff bc29 	b.w	800671c <__swbuf_r>
 8006eca:	6813      	ldr	r3, [r2, #0]
 8006ecc:	1c58      	adds	r0, r3, #1
 8006ece:	6010      	str	r0, [r2, #0]
 8006ed0:	7019      	strb	r1, [r3, #0]
 8006ed2:	4608      	mov	r0, r1
 8006ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <__sfputs_r>:
 8006eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006edc:	4606      	mov	r6, r0
 8006ede:	460f      	mov	r7, r1
 8006ee0:	4614      	mov	r4, r2
 8006ee2:	18d5      	adds	r5, r2, r3
 8006ee4:	42ac      	cmp	r4, r5
 8006ee6:	d101      	bne.n	8006eec <__sfputs_r+0x12>
 8006ee8:	2000      	movs	r0, #0
 8006eea:	e007      	b.n	8006efc <__sfputs_r+0x22>
 8006eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ef0:	463a      	mov	r2, r7
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f7ff ffda 	bl	8006eac <__sfputc_r>
 8006ef8:	1c43      	adds	r3, r0, #1
 8006efa:	d1f3      	bne.n	8006ee4 <__sfputs_r+0xa>
 8006efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f00 <_vfiprintf_r>:
 8006f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f04:	460d      	mov	r5, r1
 8006f06:	b09d      	sub	sp, #116	; 0x74
 8006f08:	4614      	mov	r4, r2
 8006f0a:	4698      	mov	r8, r3
 8006f0c:	4606      	mov	r6, r0
 8006f0e:	b118      	cbz	r0, 8006f18 <_vfiprintf_r+0x18>
 8006f10:	6983      	ldr	r3, [r0, #24]
 8006f12:	b90b      	cbnz	r3, 8006f18 <_vfiprintf_r+0x18>
 8006f14:	f7ff fddc 	bl	8006ad0 <__sinit>
 8006f18:	4b89      	ldr	r3, [pc, #548]	; (8007140 <_vfiprintf_r+0x240>)
 8006f1a:	429d      	cmp	r5, r3
 8006f1c:	d11b      	bne.n	8006f56 <_vfiprintf_r+0x56>
 8006f1e:	6875      	ldr	r5, [r6, #4]
 8006f20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f22:	07d9      	lsls	r1, r3, #31
 8006f24:	d405      	bmi.n	8006f32 <_vfiprintf_r+0x32>
 8006f26:	89ab      	ldrh	r3, [r5, #12]
 8006f28:	059a      	lsls	r2, r3, #22
 8006f2a:	d402      	bmi.n	8006f32 <_vfiprintf_r+0x32>
 8006f2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f2e:	f7ff fe6d 	bl	8006c0c <__retarget_lock_acquire_recursive>
 8006f32:	89ab      	ldrh	r3, [r5, #12]
 8006f34:	071b      	lsls	r3, r3, #28
 8006f36:	d501      	bpl.n	8006f3c <_vfiprintf_r+0x3c>
 8006f38:	692b      	ldr	r3, [r5, #16]
 8006f3a:	b9eb      	cbnz	r3, 8006f78 <_vfiprintf_r+0x78>
 8006f3c:	4629      	mov	r1, r5
 8006f3e:	4630      	mov	r0, r6
 8006f40:	f7ff fc3e 	bl	80067c0 <__swsetup_r>
 8006f44:	b1c0      	cbz	r0, 8006f78 <_vfiprintf_r+0x78>
 8006f46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f48:	07dc      	lsls	r4, r3, #31
 8006f4a:	d50e      	bpl.n	8006f6a <_vfiprintf_r+0x6a>
 8006f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f50:	b01d      	add	sp, #116	; 0x74
 8006f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f56:	4b7b      	ldr	r3, [pc, #492]	; (8007144 <_vfiprintf_r+0x244>)
 8006f58:	429d      	cmp	r5, r3
 8006f5a:	d101      	bne.n	8006f60 <_vfiprintf_r+0x60>
 8006f5c:	68b5      	ldr	r5, [r6, #8]
 8006f5e:	e7df      	b.n	8006f20 <_vfiprintf_r+0x20>
 8006f60:	4b79      	ldr	r3, [pc, #484]	; (8007148 <_vfiprintf_r+0x248>)
 8006f62:	429d      	cmp	r5, r3
 8006f64:	bf08      	it	eq
 8006f66:	68f5      	ldreq	r5, [r6, #12]
 8006f68:	e7da      	b.n	8006f20 <_vfiprintf_r+0x20>
 8006f6a:	89ab      	ldrh	r3, [r5, #12]
 8006f6c:	0598      	lsls	r0, r3, #22
 8006f6e:	d4ed      	bmi.n	8006f4c <_vfiprintf_r+0x4c>
 8006f70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f72:	f7ff fe4c 	bl	8006c0e <__retarget_lock_release_recursive>
 8006f76:	e7e9      	b.n	8006f4c <_vfiprintf_r+0x4c>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f7c:	2320      	movs	r3, #32
 8006f7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f82:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f86:	2330      	movs	r3, #48	; 0x30
 8006f88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800714c <_vfiprintf_r+0x24c>
 8006f8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f90:	f04f 0901 	mov.w	r9, #1
 8006f94:	4623      	mov	r3, r4
 8006f96:	469a      	mov	sl, r3
 8006f98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f9c:	b10a      	cbz	r2, 8006fa2 <_vfiprintf_r+0xa2>
 8006f9e:	2a25      	cmp	r2, #37	; 0x25
 8006fa0:	d1f9      	bne.n	8006f96 <_vfiprintf_r+0x96>
 8006fa2:	ebba 0b04 	subs.w	fp, sl, r4
 8006fa6:	d00b      	beq.n	8006fc0 <_vfiprintf_r+0xc0>
 8006fa8:	465b      	mov	r3, fp
 8006faa:	4622      	mov	r2, r4
 8006fac:	4629      	mov	r1, r5
 8006fae:	4630      	mov	r0, r6
 8006fb0:	f7ff ff93 	bl	8006eda <__sfputs_r>
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	f000 80aa 	beq.w	800710e <_vfiprintf_r+0x20e>
 8006fba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fbc:	445a      	add	r2, fp
 8006fbe:	9209      	str	r2, [sp, #36]	; 0x24
 8006fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 80a2 	beq.w	800710e <_vfiprintf_r+0x20e>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fd4:	f10a 0a01 	add.w	sl, sl, #1
 8006fd8:	9304      	str	r3, [sp, #16]
 8006fda:	9307      	str	r3, [sp, #28]
 8006fdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fe0:	931a      	str	r3, [sp, #104]	; 0x68
 8006fe2:	4654      	mov	r4, sl
 8006fe4:	2205      	movs	r2, #5
 8006fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fea:	4858      	ldr	r0, [pc, #352]	; (800714c <_vfiprintf_r+0x24c>)
 8006fec:	f7f9 f8f0 	bl	80001d0 <memchr>
 8006ff0:	9a04      	ldr	r2, [sp, #16]
 8006ff2:	b9d8      	cbnz	r0, 800702c <_vfiprintf_r+0x12c>
 8006ff4:	06d1      	lsls	r1, r2, #27
 8006ff6:	bf44      	itt	mi
 8006ff8:	2320      	movmi	r3, #32
 8006ffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ffe:	0713      	lsls	r3, r2, #28
 8007000:	bf44      	itt	mi
 8007002:	232b      	movmi	r3, #43	; 0x2b
 8007004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007008:	f89a 3000 	ldrb.w	r3, [sl]
 800700c:	2b2a      	cmp	r3, #42	; 0x2a
 800700e:	d015      	beq.n	800703c <_vfiprintf_r+0x13c>
 8007010:	9a07      	ldr	r2, [sp, #28]
 8007012:	4654      	mov	r4, sl
 8007014:	2000      	movs	r0, #0
 8007016:	f04f 0c0a 	mov.w	ip, #10
 800701a:	4621      	mov	r1, r4
 800701c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007020:	3b30      	subs	r3, #48	; 0x30
 8007022:	2b09      	cmp	r3, #9
 8007024:	d94e      	bls.n	80070c4 <_vfiprintf_r+0x1c4>
 8007026:	b1b0      	cbz	r0, 8007056 <_vfiprintf_r+0x156>
 8007028:	9207      	str	r2, [sp, #28]
 800702a:	e014      	b.n	8007056 <_vfiprintf_r+0x156>
 800702c:	eba0 0308 	sub.w	r3, r0, r8
 8007030:	fa09 f303 	lsl.w	r3, r9, r3
 8007034:	4313      	orrs	r3, r2
 8007036:	9304      	str	r3, [sp, #16]
 8007038:	46a2      	mov	sl, r4
 800703a:	e7d2      	b.n	8006fe2 <_vfiprintf_r+0xe2>
 800703c:	9b03      	ldr	r3, [sp, #12]
 800703e:	1d19      	adds	r1, r3, #4
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	9103      	str	r1, [sp, #12]
 8007044:	2b00      	cmp	r3, #0
 8007046:	bfbb      	ittet	lt
 8007048:	425b      	neglt	r3, r3
 800704a:	f042 0202 	orrlt.w	r2, r2, #2
 800704e:	9307      	strge	r3, [sp, #28]
 8007050:	9307      	strlt	r3, [sp, #28]
 8007052:	bfb8      	it	lt
 8007054:	9204      	strlt	r2, [sp, #16]
 8007056:	7823      	ldrb	r3, [r4, #0]
 8007058:	2b2e      	cmp	r3, #46	; 0x2e
 800705a:	d10c      	bne.n	8007076 <_vfiprintf_r+0x176>
 800705c:	7863      	ldrb	r3, [r4, #1]
 800705e:	2b2a      	cmp	r3, #42	; 0x2a
 8007060:	d135      	bne.n	80070ce <_vfiprintf_r+0x1ce>
 8007062:	9b03      	ldr	r3, [sp, #12]
 8007064:	1d1a      	adds	r2, r3, #4
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	9203      	str	r2, [sp, #12]
 800706a:	2b00      	cmp	r3, #0
 800706c:	bfb8      	it	lt
 800706e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007072:	3402      	adds	r4, #2
 8007074:	9305      	str	r3, [sp, #20]
 8007076:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800715c <_vfiprintf_r+0x25c>
 800707a:	7821      	ldrb	r1, [r4, #0]
 800707c:	2203      	movs	r2, #3
 800707e:	4650      	mov	r0, sl
 8007080:	f7f9 f8a6 	bl	80001d0 <memchr>
 8007084:	b140      	cbz	r0, 8007098 <_vfiprintf_r+0x198>
 8007086:	2340      	movs	r3, #64	; 0x40
 8007088:	eba0 000a 	sub.w	r0, r0, sl
 800708c:	fa03 f000 	lsl.w	r0, r3, r0
 8007090:	9b04      	ldr	r3, [sp, #16]
 8007092:	4303      	orrs	r3, r0
 8007094:	3401      	adds	r4, #1
 8007096:	9304      	str	r3, [sp, #16]
 8007098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800709c:	482c      	ldr	r0, [pc, #176]	; (8007150 <_vfiprintf_r+0x250>)
 800709e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070a2:	2206      	movs	r2, #6
 80070a4:	f7f9 f894 	bl	80001d0 <memchr>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	d03f      	beq.n	800712c <_vfiprintf_r+0x22c>
 80070ac:	4b29      	ldr	r3, [pc, #164]	; (8007154 <_vfiprintf_r+0x254>)
 80070ae:	bb1b      	cbnz	r3, 80070f8 <_vfiprintf_r+0x1f8>
 80070b0:	9b03      	ldr	r3, [sp, #12]
 80070b2:	3307      	adds	r3, #7
 80070b4:	f023 0307 	bic.w	r3, r3, #7
 80070b8:	3308      	adds	r3, #8
 80070ba:	9303      	str	r3, [sp, #12]
 80070bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070be:	443b      	add	r3, r7
 80070c0:	9309      	str	r3, [sp, #36]	; 0x24
 80070c2:	e767      	b.n	8006f94 <_vfiprintf_r+0x94>
 80070c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80070c8:	460c      	mov	r4, r1
 80070ca:	2001      	movs	r0, #1
 80070cc:	e7a5      	b.n	800701a <_vfiprintf_r+0x11a>
 80070ce:	2300      	movs	r3, #0
 80070d0:	3401      	adds	r4, #1
 80070d2:	9305      	str	r3, [sp, #20]
 80070d4:	4619      	mov	r1, r3
 80070d6:	f04f 0c0a 	mov.w	ip, #10
 80070da:	4620      	mov	r0, r4
 80070dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070e0:	3a30      	subs	r2, #48	; 0x30
 80070e2:	2a09      	cmp	r2, #9
 80070e4:	d903      	bls.n	80070ee <_vfiprintf_r+0x1ee>
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d0c5      	beq.n	8007076 <_vfiprintf_r+0x176>
 80070ea:	9105      	str	r1, [sp, #20]
 80070ec:	e7c3      	b.n	8007076 <_vfiprintf_r+0x176>
 80070ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80070f2:	4604      	mov	r4, r0
 80070f4:	2301      	movs	r3, #1
 80070f6:	e7f0      	b.n	80070da <_vfiprintf_r+0x1da>
 80070f8:	ab03      	add	r3, sp, #12
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	462a      	mov	r2, r5
 80070fe:	4b16      	ldr	r3, [pc, #88]	; (8007158 <_vfiprintf_r+0x258>)
 8007100:	a904      	add	r1, sp, #16
 8007102:	4630      	mov	r0, r6
 8007104:	f3af 8000 	nop.w
 8007108:	4607      	mov	r7, r0
 800710a:	1c78      	adds	r0, r7, #1
 800710c:	d1d6      	bne.n	80070bc <_vfiprintf_r+0x1bc>
 800710e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007110:	07d9      	lsls	r1, r3, #31
 8007112:	d405      	bmi.n	8007120 <_vfiprintf_r+0x220>
 8007114:	89ab      	ldrh	r3, [r5, #12]
 8007116:	059a      	lsls	r2, r3, #22
 8007118:	d402      	bmi.n	8007120 <_vfiprintf_r+0x220>
 800711a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800711c:	f7ff fd77 	bl	8006c0e <__retarget_lock_release_recursive>
 8007120:	89ab      	ldrh	r3, [r5, #12]
 8007122:	065b      	lsls	r3, r3, #25
 8007124:	f53f af12 	bmi.w	8006f4c <_vfiprintf_r+0x4c>
 8007128:	9809      	ldr	r0, [sp, #36]	; 0x24
 800712a:	e711      	b.n	8006f50 <_vfiprintf_r+0x50>
 800712c:	ab03      	add	r3, sp, #12
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	462a      	mov	r2, r5
 8007132:	4b09      	ldr	r3, [pc, #36]	; (8007158 <_vfiprintf_r+0x258>)
 8007134:	a904      	add	r1, sp, #16
 8007136:	4630      	mov	r0, r6
 8007138:	f000 f880 	bl	800723c <_printf_i>
 800713c:	e7e4      	b.n	8007108 <_vfiprintf_r+0x208>
 800713e:	bf00      	nop
 8007140:	08007aa4 	.word	0x08007aa4
 8007144:	08007ac4 	.word	0x08007ac4
 8007148:	08007a84 	.word	0x08007a84
 800714c:	08007ae4 	.word	0x08007ae4
 8007150:	08007aee 	.word	0x08007aee
 8007154:	00000000 	.word	0x00000000
 8007158:	08006edb 	.word	0x08006edb
 800715c:	08007aea 	.word	0x08007aea

08007160 <_printf_common>:
 8007160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007164:	4616      	mov	r6, r2
 8007166:	4699      	mov	r9, r3
 8007168:	688a      	ldr	r2, [r1, #8]
 800716a:	690b      	ldr	r3, [r1, #16]
 800716c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007170:	4293      	cmp	r3, r2
 8007172:	bfb8      	it	lt
 8007174:	4613      	movlt	r3, r2
 8007176:	6033      	str	r3, [r6, #0]
 8007178:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800717c:	4607      	mov	r7, r0
 800717e:	460c      	mov	r4, r1
 8007180:	b10a      	cbz	r2, 8007186 <_printf_common+0x26>
 8007182:	3301      	adds	r3, #1
 8007184:	6033      	str	r3, [r6, #0]
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	0699      	lsls	r1, r3, #26
 800718a:	bf42      	ittt	mi
 800718c:	6833      	ldrmi	r3, [r6, #0]
 800718e:	3302      	addmi	r3, #2
 8007190:	6033      	strmi	r3, [r6, #0]
 8007192:	6825      	ldr	r5, [r4, #0]
 8007194:	f015 0506 	ands.w	r5, r5, #6
 8007198:	d106      	bne.n	80071a8 <_printf_common+0x48>
 800719a:	f104 0a19 	add.w	sl, r4, #25
 800719e:	68e3      	ldr	r3, [r4, #12]
 80071a0:	6832      	ldr	r2, [r6, #0]
 80071a2:	1a9b      	subs	r3, r3, r2
 80071a4:	42ab      	cmp	r3, r5
 80071a6:	dc26      	bgt.n	80071f6 <_printf_common+0x96>
 80071a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071ac:	1e13      	subs	r3, r2, #0
 80071ae:	6822      	ldr	r2, [r4, #0]
 80071b0:	bf18      	it	ne
 80071b2:	2301      	movne	r3, #1
 80071b4:	0692      	lsls	r2, r2, #26
 80071b6:	d42b      	bmi.n	8007210 <_printf_common+0xb0>
 80071b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071bc:	4649      	mov	r1, r9
 80071be:	4638      	mov	r0, r7
 80071c0:	47c0      	blx	r8
 80071c2:	3001      	adds	r0, #1
 80071c4:	d01e      	beq.n	8007204 <_printf_common+0xa4>
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	68e5      	ldr	r5, [r4, #12]
 80071ca:	6832      	ldr	r2, [r6, #0]
 80071cc:	f003 0306 	and.w	r3, r3, #6
 80071d0:	2b04      	cmp	r3, #4
 80071d2:	bf08      	it	eq
 80071d4:	1aad      	subeq	r5, r5, r2
 80071d6:	68a3      	ldr	r3, [r4, #8]
 80071d8:	6922      	ldr	r2, [r4, #16]
 80071da:	bf0c      	ite	eq
 80071dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071e0:	2500      	movne	r5, #0
 80071e2:	4293      	cmp	r3, r2
 80071e4:	bfc4      	itt	gt
 80071e6:	1a9b      	subgt	r3, r3, r2
 80071e8:	18ed      	addgt	r5, r5, r3
 80071ea:	2600      	movs	r6, #0
 80071ec:	341a      	adds	r4, #26
 80071ee:	42b5      	cmp	r5, r6
 80071f0:	d11a      	bne.n	8007228 <_printf_common+0xc8>
 80071f2:	2000      	movs	r0, #0
 80071f4:	e008      	b.n	8007208 <_printf_common+0xa8>
 80071f6:	2301      	movs	r3, #1
 80071f8:	4652      	mov	r2, sl
 80071fa:	4649      	mov	r1, r9
 80071fc:	4638      	mov	r0, r7
 80071fe:	47c0      	blx	r8
 8007200:	3001      	adds	r0, #1
 8007202:	d103      	bne.n	800720c <_printf_common+0xac>
 8007204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800720c:	3501      	adds	r5, #1
 800720e:	e7c6      	b.n	800719e <_printf_common+0x3e>
 8007210:	18e1      	adds	r1, r4, r3
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	2030      	movs	r0, #48	; 0x30
 8007216:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800721a:	4422      	add	r2, r4
 800721c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007220:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007224:	3302      	adds	r3, #2
 8007226:	e7c7      	b.n	80071b8 <_printf_common+0x58>
 8007228:	2301      	movs	r3, #1
 800722a:	4622      	mov	r2, r4
 800722c:	4649      	mov	r1, r9
 800722e:	4638      	mov	r0, r7
 8007230:	47c0      	blx	r8
 8007232:	3001      	adds	r0, #1
 8007234:	d0e6      	beq.n	8007204 <_printf_common+0xa4>
 8007236:	3601      	adds	r6, #1
 8007238:	e7d9      	b.n	80071ee <_printf_common+0x8e>
	...

0800723c <_printf_i>:
 800723c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007240:	7e0f      	ldrb	r7, [r1, #24]
 8007242:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007244:	2f78      	cmp	r7, #120	; 0x78
 8007246:	4691      	mov	r9, r2
 8007248:	4680      	mov	r8, r0
 800724a:	460c      	mov	r4, r1
 800724c:	469a      	mov	sl, r3
 800724e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007252:	d807      	bhi.n	8007264 <_printf_i+0x28>
 8007254:	2f62      	cmp	r7, #98	; 0x62
 8007256:	d80a      	bhi.n	800726e <_printf_i+0x32>
 8007258:	2f00      	cmp	r7, #0
 800725a:	f000 80d8 	beq.w	800740e <_printf_i+0x1d2>
 800725e:	2f58      	cmp	r7, #88	; 0x58
 8007260:	f000 80a3 	beq.w	80073aa <_printf_i+0x16e>
 8007264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007268:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800726c:	e03a      	b.n	80072e4 <_printf_i+0xa8>
 800726e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007272:	2b15      	cmp	r3, #21
 8007274:	d8f6      	bhi.n	8007264 <_printf_i+0x28>
 8007276:	a101      	add	r1, pc, #4	; (adr r1, 800727c <_printf_i+0x40>)
 8007278:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800727c:	080072d5 	.word	0x080072d5
 8007280:	080072e9 	.word	0x080072e9
 8007284:	08007265 	.word	0x08007265
 8007288:	08007265 	.word	0x08007265
 800728c:	08007265 	.word	0x08007265
 8007290:	08007265 	.word	0x08007265
 8007294:	080072e9 	.word	0x080072e9
 8007298:	08007265 	.word	0x08007265
 800729c:	08007265 	.word	0x08007265
 80072a0:	08007265 	.word	0x08007265
 80072a4:	08007265 	.word	0x08007265
 80072a8:	080073f5 	.word	0x080073f5
 80072ac:	08007319 	.word	0x08007319
 80072b0:	080073d7 	.word	0x080073d7
 80072b4:	08007265 	.word	0x08007265
 80072b8:	08007265 	.word	0x08007265
 80072bc:	08007417 	.word	0x08007417
 80072c0:	08007265 	.word	0x08007265
 80072c4:	08007319 	.word	0x08007319
 80072c8:	08007265 	.word	0x08007265
 80072cc:	08007265 	.word	0x08007265
 80072d0:	080073df 	.word	0x080073df
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	1d1a      	adds	r2, r3, #4
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	602a      	str	r2, [r5, #0]
 80072dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072e4:	2301      	movs	r3, #1
 80072e6:	e0a3      	b.n	8007430 <_printf_i+0x1f4>
 80072e8:	6820      	ldr	r0, [r4, #0]
 80072ea:	6829      	ldr	r1, [r5, #0]
 80072ec:	0606      	lsls	r6, r0, #24
 80072ee:	f101 0304 	add.w	r3, r1, #4
 80072f2:	d50a      	bpl.n	800730a <_printf_i+0xce>
 80072f4:	680e      	ldr	r6, [r1, #0]
 80072f6:	602b      	str	r3, [r5, #0]
 80072f8:	2e00      	cmp	r6, #0
 80072fa:	da03      	bge.n	8007304 <_printf_i+0xc8>
 80072fc:	232d      	movs	r3, #45	; 0x2d
 80072fe:	4276      	negs	r6, r6
 8007300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007304:	485e      	ldr	r0, [pc, #376]	; (8007480 <_printf_i+0x244>)
 8007306:	230a      	movs	r3, #10
 8007308:	e019      	b.n	800733e <_printf_i+0x102>
 800730a:	680e      	ldr	r6, [r1, #0]
 800730c:	602b      	str	r3, [r5, #0]
 800730e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007312:	bf18      	it	ne
 8007314:	b236      	sxthne	r6, r6
 8007316:	e7ef      	b.n	80072f8 <_printf_i+0xbc>
 8007318:	682b      	ldr	r3, [r5, #0]
 800731a:	6820      	ldr	r0, [r4, #0]
 800731c:	1d19      	adds	r1, r3, #4
 800731e:	6029      	str	r1, [r5, #0]
 8007320:	0601      	lsls	r1, r0, #24
 8007322:	d501      	bpl.n	8007328 <_printf_i+0xec>
 8007324:	681e      	ldr	r6, [r3, #0]
 8007326:	e002      	b.n	800732e <_printf_i+0xf2>
 8007328:	0646      	lsls	r6, r0, #25
 800732a:	d5fb      	bpl.n	8007324 <_printf_i+0xe8>
 800732c:	881e      	ldrh	r6, [r3, #0]
 800732e:	4854      	ldr	r0, [pc, #336]	; (8007480 <_printf_i+0x244>)
 8007330:	2f6f      	cmp	r7, #111	; 0x6f
 8007332:	bf0c      	ite	eq
 8007334:	2308      	moveq	r3, #8
 8007336:	230a      	movne	r3, #10
 8007338:	2100      	movs	r1, #0
 800733a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800733e:	6865      	ldr	r5, [r4, #4]
 8007340:	60a5      	str	r5, [r4, #8]
 8007342:	2d00      	cmp	r5, #0
 8007344:	bfa2      	ittt	ge
 8007346:	6821      	ldrge	r1, [r4, #0]
 8007348:	f021 0104 	bicge.w	r1, r1, #4
 800734c:	6021      	strge	r1, [r4, #0]
 800734e:	b90e      	cbnz	r6, 8007354 <_printf_i+0x118>
 8007350:	2d00      	cmp	r5, #0
 8007352:	d04d      	beq.n	80073f0 <_printf_i+0x1b4>
 8007354:	4615      	mov	r5, r2
 8007356:	fbb6 f1f3 	udiv	r1, r6, r3
 800735a:	fb03 6711 	mls	r7, r3, r1, r6
 800735e:	5dc7      	ldrb	r7, [r0, r7]
 8007360:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007364:	4637      	mov	r7, r6
 8007366:	42bb      	cmp	r3, r7
 8007368:	460e      	mov	r6, r1
 800736a:	d9f4      	bls.n	8007356 <_printf_i+0x11a>
 800736c:	2b08      	cmp	r3, #8
 800736e:	d10b      	bne.n	8007388 <_printf_i+0x14c>
 8007370:	6823      	ldr	r3, [r4, #0]
 8007372:	07de      	lsls	r6, r3, #31
 8007374:	d508      	bpl.n	8007388 <_printf_i+0x14c>
 8007376:	6923      	ldr	r3, [r4, #16]
 8007378:	6861      	ldr	r1, [r4, #4]
 800737a:	4299      	cmp	r1, r3
 800737c:	bfde      	ittt	le
 800737e:	2330      	movle	r3, #48	; 0x30
 8007380:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007384:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007388:	1b52      	subs	r2, r2, r5
 800738a:	6122      	str	r2, [r4, #16]
 800738c:	f8cd a000 	str.w	sl, [sp]
 8007390:	464b      	mov	r3, r9
 8007392:	aa03      	add	r2, sp, #12
 8007394:	4621      	mov	r1, r4
 8007396:	4640      	mov	r0, r8
 8007398:	f7ff fee2 	bl	8007160 <_printf_common>
 800739c:	3001      	adds	r0, #1
 800739e:	d14c      	bne.n	800743a <_printf_i+0x1fe>
 80073a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073a4:	b004      	add	sp, #16
 80073a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073aa:	4835      	ldr	r0, [pc, #212]	; (8007480 <_printf_i+0x244>)
 80073ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80073b0:	6829      	ldr	r1, [r5, #0]
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80073b8:	6029      	str	r1, [r5, #0]
 80073ba:	061d      	lsls	r5, r3, #24
 80073bc:	d514      	bpl.n	80073e8 <_printf_i+0x1ac>
 80073be:	07df      	lsls	r7, r3, #31
 80073c0:	bf44      	itt	mi
 80073c2:	f043 0320 	orrmi.w	r3, r3, #32
 80073c6:	6023      	strmi	r3, [r4, #0]
 80073c8:	b91e      	cbnz	r6, 80073d2 <_printf_i+0x196>
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	f023 0320 	bic.w	r3, r3, #32
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	2310      	movs	r3, #16
 80073d4:	e7b0      	b.n	8007338 <_printf_i+0xfc>
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	f043 0320 	orr.w	r3, r3, #32
 80073dc:	6023      	str	r3, [r4, #0]
 80073de:	2378      	movs	r3, #120	; 0x78
 80073e0:	4828      	ldr	r0, [pc, #160]	; (8007484 <_printf_i+0x248>)
 80073e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073e6:	e7e3      	b.n	80073b0 <_printf_i+0x174>
 80073e8:	0659      	lsls	r1, r3, #25
 80073ea:	bf48      	it	mi
 80073ec:	b2b6      	uxthmi	r6, r6
 80073ee:	e7e6      	b.n	80073be <_printf_i+0x182>
 80073f0:	4615      	mov	r5, r2
 80073f2:	e7bb      	b.n	800736c <_printf_i+0x130>
 80073f4:	682b      	ldr	r3, [r5, #0]
 80073f6:	6826      	ldr	r6, [r4, #0]
 80073f8:	6961      	ldr	r1, [r4, #20]
 80073fa:	1d18      	adds	r0, r3, #4
 80073fc:	6028      	str	r0, [r5, #0]
 80073fe:	0635      	lsls	r5, r6, #24
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	d501      	bpl.n	8007408 <_printf_i+0x1cc>
 8007404:	6019      	str	r1, [r3, #0]
 8007406:	e002      	b.n	800740e <_printf_i+0x1d2>
 8007408:	0670      	lsls	r0, r6, #25
 800740a:	d5fb      	bpl.n	8007404 <_printf_i+0x1c8>
 800740c:	8019      	strh	r1, [r3, #0]
 800740e:	2300      	movs	r3, #0
 8007410:	6123      	str	r3, [r4, #16]
 8007412:	4615      	mov	r5, r2
 8007414:	e7ba      	b.n	800738c <_printf_i+0x150>
 8007416:	682b      	ldr	r3, [r5, #0]
 8007418:	1d1a      	adds	r2, r3, #4
 800741a:	602a      	str	r2, [r5, #0]
 800741c:	681d      	ldr	r5, [r3, #0]
 800741e:	6862      	ldr	r2, [r4, #4]
 8007420:	2100      	movs	r1, #0
 8007422:	4628      	mov	r0, r5
 8007424:	f7f8 fed4 	bl	80001d0 <memchr>
 8007428:	b108      	cbz	r0, 800742e <_printf_i+0x1f2>
 800742a:	1b40      	subs	r0, r0, r5
 800742c:	6060      	str	r0, [r4, #4]
 800742e:	6863      	ldr	r3, [r4, #4]
 8007430:	6123      	str	r3, [r4, #16]
 8007432:	2300      	movs	r3, #0
 8007434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007438:	e7a8      	b.n	800738c <_printf_i+0x150>
 800743a:	6923      	ldr	r3, [r4, #16]
 800743c:	462a      	mov	r2, r5
 800743e:	4649      	mov	r1, r9
 8007440:	4640      	mov	r0, r8
 8007442:	47d0      	blx	sl
 8007444:	3001      	adds	r0, #1
 8007446:	d0ab      	beq.n	80073a0 <_printf_i+0x164>
 8007448:	6823      	ldr	r3, [r4, #0]
 800744a:	079b      	lsls	r3, r3, #30
 800744c:	d413      	bmi.n	8007476 <_printf_i+0x23a>
 800744e:	68e0      	ldr	r0, [r4, #12]
 8007450:	9b03      	ldr	r3, [sp, #12]
 8007452:	4298      	cmp	r0, r3
 8007454:	bfb8      	it	lt
 8007456:	4618      	movlt	r0, r3
 8007458:	e7a4      	b.n	80073a4 <_printf_i+0x168>
 800745a:	2301      	movs	r3, #1
 800745c:	4632      	mov	r2, r6
 800745e:	4649      	mov	r1, r9
 8007460:	4640      	mov	r0, r8
 8007462:	47d0      	blx	sl
 8007464:	3001      	adds	r0, #1
 8007466:	d09b      	beq.n	80073a0 <_printf_i+0x164>
 8007468:	3501      	adds	r5, #1
 800746a:	68e3      	ldr	r3, [r4, #12]
 800746c:	9903      	ldr	r1, [sp, #12]
 800746e:	1a5b      	subs	r3, r3, r1
 8007470:	42ab      	cmp	r3, r5
 8007472:	dcf2      	bgt.n	800745a <_printf_i+0x21e>
 8007474:	e7eb      	b.n	800744e <_printf_i+0x212>
 8007476:	2500      	movs	r5, #0
 8007478:	f104 0619 	add.w	r6, r4, #25
 800747c:	e7f5      	b.n	800746a <_printf_i+0x22e>
 800747e:	bf00      	nop
 8007480:	08007af5 	.word	0x08007af5
 8007484:	08007b06 	.word	0x08007b06

08007488 <_sbrk_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	4d06      	ldr	r5, [pc, #24]	; (80074a4 <_sbrk_r+0x1c>)
 800748c:	2300      	movs	r3, #0
 800748e:	4604      	mov	r4, r0
 8007490:	4608      	mov	r0, r1
 8007492:	602b      	str	r3, [r5, #0]
 8007494:	f7f9 fefc 	bl	8001290 <_sbrk>
 8007498:	1c43      	adds	r3, r0, #1
 800749a:	d102      	bne.n	80074a2 <_sbrk_r+0x1a>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	b103      	cbz	r3, 80074a2 <_sbrk_r+0x1a>
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	bd38      	pop	{r3, r4, r5, pc}
 80074a4:	20000934 	.word	0x20000934

080074a8 <__sread>:
 80074a8:	b510      	push	{r4, lr}
 80074aa:	460c      	mov	r4, r1
 80074ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b0:	f000 f8a0 	bl	80075f4 <_read_r>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	bfab      	itete	ge
 80074b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074ba:	89a3      	ldrhlt	r3, [r4, #12]
 80074bc:	181b      	addge	r3, r3, r0
 80074be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074c2:	bfac      	ite	ge
 80074c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80074c6:	81a3      	strhlt	r3, [r4, #12]
 80074c8:	bd10      	pop	{r4, pc}

080074ca <__swrite>:
 80074ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ce:	461f      	mov	r7, r3
 80074d0:	898b      	ldrh	r3, [r1, #12]
 80074d2:	05db      	lsls	r3, r3, #23
 80074d4:	4605      	mov	r5, r0
 80074d6:	460c      	mov	r4, r1
 80074d8:	4616      	mov	r6, r2
 80074da:	d505      	bpl.n	80074e8 <__swrite+0x1e>
 80074dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074e0:	2302      	movs	r3, #2
 80074e2:	2200      	movs	r2, #0
 80074e4:	f000 f868 	bl	80075b8 <_lseek_r>
 80074e8:	89a3      	ldrh	r3, [r4, #12]
 80074ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074f2:	81a3      	strh	r3, [r4, #12]
 80074f4:	4632      	mov	r2, r6
 80074f6:	463b      	mov	r3, r7
 80074f8:	4628      	mov	r0, r5
 80074fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074fe:	f000 b817 	b.w	8007530 <_write_r>

08007502 <__sseek>:
 8007502:	b510      	push	{r4, lr}
 8007504:	460c      	mov	r4, r1
 8007506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800750a:	f000 f855 	bl	80075b8 <_lseek_r>
 800750e:	1c43      	adds	r3, r0, #1
 8007510:	89a3      	ldrh	r3, [r4, #12]
 8007512:	bf15      	itete	ne
 8007514:	6560      	strne	r0, [r4, #84]	; 0x54
 8007516:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800751a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800751e:	81a3      	strheq	r3, [r4, #12]
 8007520:	bf18      	it	ne
 8007522:	81a3      	strhne	r3, [r4, #12]
 8007524:	bd10      	pop	{r4, pc}

08007526 <__sclose>:
 8007526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800752a:	f000 b813 	b.w	8007554 <_close_r>
	...

08007530 <_write_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	4d07      	ldr	r5, [pc, #28]	; (8007550 <_write_r+0x20>)
 8007534:	4604      	mov	r4, r0
 8007536:	4608      	mov	r0, r1
 8007538:	4611      	mov	r1, r2
 800753a:	2200      	movs	r2, #0
 800753c:	602a      	str	r2, [r5, #0]
 800753e:	461a      	mov	r2, r3
 8007540:	f7f9 fd06 	bl	8000f50 <_write>
 8007544:	1c43      	adds	r3, r0, #1
 8007546:	d102      	bne.n	800754e <_write_r+0x1e>
 8007548:	682b      	ldr	r3, [r5, #0]
 800754a:	b103      	cbz	r3, 800754e <_write_r+0x1e>
 800754c:	6023      	str	r3, [r4, #0]
 800754e:	bd38      	pop	{r3, r4, r5, pc}
 8007550:	20000934 	.word	0x20000934

08007554 <_close_r>:
 8007554:	b538      	push	{r3, r4, r5, lr}
 8007556:	4d06      	ldr	r5, [pc, #24]	; (8007570 <_close_r+0x1c>)
 8007558:	2300      	movs	r3, #0
 800755a:	4604      	mov	r4, r0
 800755c:	4608      	mov	r0, r1
 800755e:	602b      	str	r3, [r5, #0]
 8007560:	f7f9 fe61 	bl	8001226 <_close>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	d102      	bne.n	800756e <_close_r+0x1a>
 8007568:	682b      	ldr	r3, [r5, #0]
 800756a:	b103      	cbz	r3, 800756e <_close_r+0x1a>
 800756c:	6023      	str	r3, [r4, #0]
 800756e:	bd38      	pop	{r3, r4, r5, pc}
 8007570:	20000934 	.word	0x20000934

08007574 <_fstat_r>:
 8007574:	b538      	push	{r3, r4, r5, lr}
 8007576:	4d07      	ldr	r5, [pc, #28]	; (8007594 <_fstat_r+0x20>)
 8007578:	2300      	movs	r3, #0
 800757a:	4604      	mov	r4, r0
 800757c:	4608      	mov	r0, r1
 800757e:	4611      	mov	r1, r2
 8007580:	602b      	str	r3, [r5, #0]
 8007582:	f7f9 fe5c 	bl	800123e <_fstat>
 8007586:	1c43      	adds	r3, r0, #1
 8007588:	d102      	bne.n	8007590 <_fstat_r+0x1c>
 800758a:	682b      	ldr	r3, [r5, #0]
 800758c:	b103      	cbz	r3, 8007590 <_fstat_r+0x1c>
 800758e:	6023      	str	r3, [r4, #0]
 8007590:	bd38      	pop	{r3, r4, r5, pc}
 8007592:	bf00      	nop
 8007594:	20000934 	.word	0x20000934

08007598 <_isatty_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	4d06      	ldr	r5, [pc, #24]	; (80075b4 <_isatty_r+0x1c>)
 800759c:	2300      	movs	r3, #0
 800759e:	4604      	mov	r4, r0
 80075a0:	4608      	mov	r0, r1
 80075a2:	602b      	str	r3, [r5, #0]
 80075a4:	f7f9 fe5b 	bl	800125e <_isatty>
 80075a8:	1c43      	adds	r3, r0, #1
 80075aa:	d102      	bne.n	80075b2 <_isatty_r+0x1a>
 80075ac:	682b      	ldr	r3, [r5, #0]
 80075ae:	b103      	cbz	r3, 80075b2 <_isatty_r+0x1a>
 80075b0:	6023      	str	r3, [r4, #0]
 80075b2:	bd38      	pop	{r3, r4, r5, pc}
 80075b4:	20000934 	.word	0x20000934

080075b8 <_lseek_r>:
 80075b8:	b538      	push	{r3, r4, r5, lr}
 80075ba:	4d07      	ldr	r5, [pc, #28]	; (80075d8 <_lseek_r+0x20>)
 80075bc:	4604      	mov	r4, r0
 80075be:	4608      	mov	r0, r1
 80075c0:	4611      	mov	r1, r2
 80075c2:	2200      	movs	r2, #0
 80075c4:	602a      	str	r2, [r5, #0]
 80075c6:	461a      	mov	r2, r3
 80075c8:	f7f9 fe54 	bl	8001274 <_lseek>
 80075cc:	1c43      	adds	r3, r0, #1
 80075ce:	d102      	bne.n	80075d6 <_lseek_r+0x1e>
 80075d0:	682b      	ldr	r3, [r5, #0]
 80075d2:	b103      	cbz	r3, 80075d6 <_lseek_r+0x1e>
 80075d4:	6023      	str	r3, [r4, #0]
 80075d6:	bd38      	pop	{r3, r4, r5, pc}
 80075d8:	20000934 	.word	0x20000934

080075dc <__malloc_lock>:
 80075dc:	4801      	ldr	r0, [pc, #4]	; (80075e4 <__malloc_lock+0x8>)
 80075de:	f7ff bb15 	b.w	8006c0c <__retarget_lock_acquire_recursive>
 80075e2:	bf00      	nop
 80075e4:	20000928 	.word	0x20000928

080075e8 <__malloc_unlock>:
 80075e8:	4801      	ldr	r0, [pc, #4]	; (80075f0 <__malloc_unlock+0x8>)
 80075ea:	f7ff bb10 	b.w	8006c0e <__retarget_lock_release_recursive>
 80075ee:	bf00      	nop
 80075f0:	20000928 	.word	0x20000928

080075f4 <_read_r>:
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	4d07      	ldr	r5, [pc, #28]	; (8007614 <_read_r+0x20>)
 80075f8:	4604      	mov	r4, r0
 80075fa:	4608      	mov	r0, r1
 80075fc:	4611      	mov	r1, r2
 80075fe:	2200      	movs	r2, #0
 8007600:	602a      	str	r2, [r5, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	f7f9 fdf2 	bl	80011ec <_read>
 8007608:	1c43      	adds	r3, r0, #1
 800760a:	d102      	bne.n	8007612 <_read_r+0x1e>
 800760c:	682b      	ldr	r3, [r5, #0]
 800760e:	b103      	cbz	r3, 8007612 <_read_r+0x1e>
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	bd38      	pop	{r3, r4, r5, pc}
 8007614:	20000934 	.word	0x20000934

08007618 <_init>:
 8007618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761a:	bf00      	nop
 800761c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800761e:	bc08      	pop	{r3}
 8007620:	469e      	mov	lr, r3
 8007622:	4770      	bx	lr

08007624 <_fini>:
 8007624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007626:	bf00      	nop
 8007628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800762a:	bc08      	pop	{r3}
 800762c:	469e      	mov	lr, r3
 800762e:	4770      	bx	lr
