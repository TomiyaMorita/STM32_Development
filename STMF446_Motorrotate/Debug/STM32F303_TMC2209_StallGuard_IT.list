
STM32F303_TMC2209_StallGuard_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007314  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  080074a4  080074a4  000174a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079a0  080079a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080079a0  080079a0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080079a0  080079a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079a0  080079a0  000179a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079a4  080079a4  000179a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080079a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000878  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008e8  200008e8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a94  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002661  00000000  00000000  00031b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  00034198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dd0  00000000  00000000  00035060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d1bb  00000000  00000000  00035e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000121e3  00000000  00000000  00052feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a989f  00000000  00000000  000651ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010ea6d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045dc  00000000  00000000  0010eac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800748c 	.word	0x0800748c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800748c 	.word	0x0800748c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <tmc2209_readWriteArray>:
    if (htim == &htim3){ //htim3に設定したタイマー割り込みの時間で発火する
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);//ピンの出力を切り替え
    }
}*/
void tmc2209_readWriteArray(uint8_t channel, uint8_t *data, size_t writeLength, size_t readLength)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	60b9      	str	r1, [r7, #8]
 8000278:	607a      	str	r2, [r7, #4]
 800027a:	603b      	str	r3, [r7, #0]
 800027c:	4603      	mov	r3, r0
 800027e:	73fb      	strb	r3, [r7, #15]
	//set your uart read write
	//UART_readWrite(channelToUART(channel), data, writeLength, readLength);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8000280:	480e      	ldr	r0, [pc, #56]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000282:	f004 fdb7 	bl	8004df4 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart1, data, writeLength,3000);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	b29a      	uxth	r2, r3
 800028a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800028e:	68b9      	ldr	r1, [r7, #8]
 8000290:	480a      	ldr	r0, [pc, #40]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000292:	f004 f88f 	bl	80043b4 <HAL_UART_Transmit>
//	HAL_UART_Transmit_IT(&huart1, data, writeLength);


	if(readLength > 0){
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d00a      	beq.n	80002b2 <tmc2209_readWriteArray+0x42>
		HAL_HalfDuplex_EnableReceiver(&huart1);
 800029c:	4807      	ldr	r0, [pc, #28]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 800029e:	f004 fdfb 	bl	8004e98 <HAL_HalfDuplex_EnableReceiver>
		HAL_UART_Receive(&huart1, data, readLength,3000);
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002aa:	68b9      	ldr	r1, [r7, #8]
 80002ac:	4803      	ldr	r0, [pc, #12]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 80002ae:	f004 f915 	bl	80044dc <HAL_UART_Receive>
//		HAL_UART_Receive_IT(&huart1, data, readLength);
	}
}
 80002b2:	bf00      	nop
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	200000d8 	.word	0x200000d8

080002c0 <tmc2209_CRC8>:

uint8_t tmc2209_CRC8(uint8_t *data, size_t length)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
	return TMC2209_CRC(data, length);
 80002ca:	2201      	movs	r2, #1
 80002cc:	6839      	ldr	r1, [r7, #0]
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f005 fd44 	bl	8005d5c <tmc_CRC8>
 80002d4:	4603      	mov	r3, r0
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <reset>:

static uint8_t reset()
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	//StepDir_init(STEPDIR_PRECISION);
	//StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.DIAG);

	return tmc2209_reset(&TMC2209);
 80002e4:	4802      	ldr	r0, [pc, #8]	; (80002f0 <reset+0x10>)
 80002e6:	f005 ff71 	bl	80061cc <tmc2209_reset>
 80002ea:	4603      	mov	r3, r0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	200001e0 	.word	0x200001e0

080002f4 <restore>:

static uint8_t restore()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	return tmc2209_restore(&TMC2209);
 80002f8:	4802      	ldr	r0, [pc, #8]	; (8000304 <restore+0x10>)
 80002fa:	f005 ffa1 	bl	8006240 <tmc2209_restore>
 80002fe:	4603      	mov	r3, r0
}
 8000300:	4618      	mov	r0, r3
 8000302:	bd80      	pop	{r7, pc}
 8000304:	200001e0 	.word	0x200001e0

08000308 <TMC2209_INIT>:


void TMC2209_INIT()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 800030e:	2201      	movs	r2, #1
 8000310:	2101      	movs	r1, #1
 8000312:	2007      	movs	r0, #7
 8000314:	f005 fc6a 	bl	8005bec <tmc_fillCRC8Table>

	TMC2209_config.reset = reset;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <TMC2209_INIT+0x38>)
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <TMC2209_INIT+0x3c>)
 800031c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	TMC2209_config.restore = restore;
 8000320:	4b07      	ldr	r3, [pc, #28]	; (8000340 <TMC2209_INIT+0x38>)
 8000322:	4a09      	ldr	r2, [pc, #36]	; (8000348 <TMC2209_INIT+0x40>)
 8000324:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	tmc2209_init(&TMC2209, 0, 0, &TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <TMC2209_INIT+0x44>)
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <TMC2209_INIT+0x38>)
 800032e:	2200      	movs	r2, #0
 8000330:	2100      	movs	r1, #0
 8000332:	4807      	ldr	r0, [pc, #28]	; (8000350 <TMC2209_INIT+0x48>)
 8000334:	f005 fe66 	bl	8006004 <tmc2209_init>


	//restore();
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000468 	.word	0x20000468
 8000344:	080002e1 	.word	0x080002e1
 8000348:	080002f5 	.word	0x080002f5
 800034c:	08007650 	.word	0x08007650
 8000350:	200001e0 	.word	0x200001e0

08000354 <currentcheck>:
	UNUSED(motor);

	return &TMC2209;
}

void currentcheck(){
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
	int32_t current_value = 0;
 800035a:	2300      	movs	r3, #0
 800035c:	60fb      	str	r3, [r7, #12]
		int32_t DIAG_value = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	60bb      	str	r3, [r7, #8]
		int32_t tstep_value = 0;
 8000362:	2300      	movs	r3, #0
 8000364:	607b      	str	r3, [r7, #4]
		int32_t SGTHRS_value = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	603b      	str	r3, [r7, #0]

	//
		tstep_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_TSTEP, TMC2209_TSTEP_MASK, TMC2209_TSTEP_SHIFT);
 800036a:	2112      	movs	r1, #18
 800036c:	480f      	ldr	r0, [pc, #60]	; (80003ac <currentcheck+0x58>)
 800036e:	f005 fde6 	bl	8005f3e <tmc2209_readInt>
 8000372:	4603      	mov	r3, r0
 8000374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000378:	607b      	str	r3, [r7, #4]
		printf("tstep: %ld\r\n", tstep_value);
 800037a:	6879      	ldr	r1, [r7, #4]
 800037c:	480c      	ldr	r0, [pc, #48]	; (80003b0 <currentcheck+0x5c>)
 800037e:	f005 ffab 	bl	80062d8 <iprintf>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000382:	f000 ff8b 	bl	800129c <HAL_GetTick>
 8000386:	4603      	mov	r3, r0
 8000388:	4619      	mov	r1, r3
 800038a:	4808      	ldr	r0, [pc, #32]	; (80003ac <currentcheck+0x58>)
 800038c:	f005 ff0d 	bl	80061aa <tmc2209_periodicJob>

		SGTHRS_value = tmc2209_readInt(&TMC2209, TMC2209_SGTHRS);
 8000390:	2140      	movs	r1, #64	; 0x40
 8000392:	4806      	ldr	r0, [pc, #24]	; (80003ac <currentcheck+0x58>)
 8000394:	f005 fdd3 	bl	8005f3e <tmc2209_readInt>
 8000398:	6038      	str	r0, [r7, #0]
		printf("SGTHRS: %d\r\n", SGTHRS_value);
 800039a:	6839      	ldr	r1, [r7, #0]
 800039c:	4805      	ldr	r0, [pc, #20]	; (80003b4 <currentcheck+0x60>)
 800039e:	f005 ff9b 	bl	80062d8 <iprintf>

	//	DIAG_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_DIAG_MASK, TMC2209_DIAG_SHIFT);
	//	printf("DIAG : %ld\r\n", DIAG_value);
	//	tmc2209_periodicJob(&TMC2209, HAL_GetTick());

}
 80003a2:	bf00      	nop
 80003a4:	3710      	adds	r7, #16
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	200001e0 	.word	0x200001e0
 80003b0:	080074a4 	.word	0x080074a4
 80003b4:	080074b4 	.word	0x080074b4

080003b8 <Step0>:
void Step0(){                                       //step pin
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	//pull+

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	2120      	movs	r1, #32
 80003c0:	4804      	ldr	r0, [pc, #16]	; (80003d4 <Step0+0x1c>)
 80003c2:	f001 fa95 	bl	80018f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80003c6:	2201      	movs	r2, #1
 80003c8:	2120      	movs	r1, #32
 80003ca:	4802      	ldr	r0, [pc, #8]	; (80003d4 <Step0+0x1c>)
 80003cc:	f001 fa90 	bl	80018f0 <HAL_GPIO_WritePin>
}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	48000400 	.word	0x48000400

080003d8 <Dir0>:

void Dir0(int dir){
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dir); //Dir0関数にdirピンを指定して格納
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	461a      	mov	r2, r3
 80003e6:	2110      	movs	r1, #16
 80003e8:	4803      	ldr	r0, [pc, #12]	; (80003f8 <Dir0+0x20>)
 80003ea:	f001 fa81 	bl	80018f0 <HAL_GPIO_WritePin>
}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	48000400 	.word	0x48000400

080003fc <motorrotate>:

uint8_t remainingstepperFlag = 0;
uint8_t stopflag = 0;
void motorrotate(int absolute_steps){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	volatile stepperInfo* si = &stepper[0];	//stepper[0]のアドレスをstepperInfo* si に代入
 8000404:	4b1d      	ldr	r3, [pc, #116]	; (800047c <motorrotate+0x80>)
 8000406:	60fb      	str	r3, [r7, #12]
	int steps = absolute_steps - si->stepPosition;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	1ad3      	subs	r3, r2, r3
 8000410:	60bb      	str	r3, [r7, #8]
//	printf("steps:%d\r\n",steps);
	if(steps == 0){
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d02c      	beq.n	8000472 <motorrotate+0x76>
					return;
				}
	si->dirFunc( steps < 0 ? 1 : 0);	//Dir0のプラスマイナスの判定して0より小さいなら1、大きいなら0をHAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dir)のdirにいれる
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	68ba      	ldr	r2, [r7, #8]
 800041e:	0fd2      	lsrs	r2, r2, #31
 8000420:	4610      	mov	r0, r2
 8000422:	4798      	blx	r3
	si->dir = steps > 0 ? 1:-1;			//stepsが0より大きければ1、小さければ２をdirにいれる
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	2b00      	cmp	r3, #0
 8000428:	dd01      	ble.n	800042e <motorrotate+0x32>
 800042a:	2201      	movs	r2, #1
 800042c:	e001      	b.n	8000432 <motorrotate+0x36>
 800042e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	61da      	str	r2, [r3, #28]
	si->totalSteps = abs(steps);	//stepsの値をアブソリュートでtotalstepsに格納
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	2b00      	cmp	r3, #0
 800043a:	bfb8      	it	lt
 800043c:	425b      	neglt	r3, r3
 800043e:	461a      	mov	r2, r3
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	631a      	str	r2, [r3, #48]	; 0x30
	si->di = si->acceleration;      //変数*siがメンバc0にアクセス.した値に変数*siがメンバaccelerationにアクセス.した値を代入する
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	edd3 7a00 	vldr	s15, [r3]
 800044a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800044e:	ee17 2a90 	vmov	r2, s15
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	645a      	str	r2, [r3, #68]	; 0x44
	si->stepCount = 0;
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	2200      	movs	r2, #0
 800045a:	649a      	str	r2, [r3, #72]	; 0x48
	si->n = 0;
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	2200      	movs	r2, #0
 8000460:	63da      	str	r2, [r3, #60]	; 0x3c
//	printf("steps:%d\r\n",steps);
	remainingstepperFlag |= 1;
 8000462:	4b07      	ldr	r3, [pc, #28]	; (8000480 <motorrotate+0x84>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	f043 0301 	orr.w	r3, r3, #1
 800046a:	b2da      	uxtb	r2, r3
 800046c:	4b04      	ldr	r3, [pc, #16]	; (8000480 <motorrotate+0x84>)
 800046e:	701a      	strb	r2, [r3, #0]
 8000470:	e000      	b.n	8000474 <motorrotate+0x78>
					return;
 8000472:	bf00      	nop
}
 8000474:	3710      	adds	r7, #16
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	2000067c 	.word	0x2000067c
 8000480:	200006c8 	.word	0x200006c8

08000484 <setNextInterruptInterval>:
volatile uint8_t nextStepperFlag = 0;
void setNextInterruptInterval(){
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
	unsigned int mind = 999999;
 800048a:	4b1a      	ldr	r3, [pc, #104]	; (80004f4 <setNextInterruptInterval+0x70>)
 800048c:	607b      	str	r3, [r7, #4]
	if( (remainingstepperFlag) && stepper[0].di < mind ){
 800048e:	4b1a      	ldr	r3, [pc, #104]	; (80004f8 <setNextInterruptInterval+0x74>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d007      	beq.n	80004a6 <setNextInterruptInterval+0x22>
 8000496:	4b19      	ldr	r3, [pc, #100]	; (80004fc <setNextInterruptInterval+0x78>)
 8000498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	429a      	cmp	r2, r3
 800049e:	d902      	bls.n	80004a6 <setNextInterruptInterval+0x22>
		mind = stepper[0].di;		//diに格納されているの(acceleration)を読み込む
 80004a0:	4b16      	ldr	r3, [pc, #88]	; (80004fc <setNextInterruptInterval+0x78>)
 80004a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004a4:	607b      	str	r3, [r7, #4]
	}
	nextStepperFlag = 0;
 80004a6:	4b16      	ldr	r3, [pc, #88]	; (8000500 <setNextInterruptInterval+0x7c>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]
	if( 1 && stepper[0].di == mind ){
 80004ac:	4b13      	ldr	r3, [pc, #76]	; (80004fc <setNextInterruptInterval+0x78>)
 80004ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	429a      	cmp	r2, r3
 80004b4:	d107      	bne.n	80004c6 <setNextInterruptInterval+0x42>
		nextStepperFlag |= 1;
 80004b6:	4b12      	ldr	r3, [pc, #72]	; (8000500 <setNextInterruptInterval+0x7c>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	b2da      	uxtb	r2, r3
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <setNextInterruptInterval+0x7c>)
 80004c4:	701a      	strb	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);		//mindにコンペアを設定
 80004c6:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <setNextInterruptInterval+0x80>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	635a      	str	r2, [r3, #52]	; 0x34
	if (remainingstepperFlag == 0){
 80004ce:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <setNextInterruptInterval+0x74>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d104      	bne.n	80004e0 <setNextInterruptInterval+0x5c>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <setNextInterruptInterval+0x80>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80004de:	635a      	str	r2, [r3, #52]	; 0x34
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <setNextInterruptInterval+0x80>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	635a      	str	r2, [r3, #52]	; 0x34
	//printf("nownompare:%d\r\n",mind);
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	000f423f 	.word	0x000f423f
 80004f8:	200006c8 	.word	0x200006c8
 80004fc:	2000067c 	.word	0x2000067c
 8000500:	200006c9 	.word	0x200006c9
 8000504:	2000008c 	.word	0x2000008c

08000508 <rotationalprocess>:
void rotationalprocess(){
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);
 800050e:	4b16      	ldr	r3, [pc, #88]	; (8000568 <rotationalprocess+0x60>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8000516:	635a      	str	r2, [r3, #52]	; 0x34
//	int32_t current_value = 0;
//	current_value=tmc2209_readInt(&TMC2209, TMC2209_SG_RESULT);	//保持トルクの設定
//	printf("SG_RESULT : %ld\r\n", current_value);
	volatile stepperInfo* s = &stepper[0];
 8000518:	4b14      	ldr	r3, [pc, #80]	; (800056c <rotationalprocess+0x64>)
 800051a:	607b      	str	r3, [r7, #4]
		if( (s->stepCount) < (s->totalSteps) ){		//1周ごとにカウントしたstepCountがabs(steps)より小さかったら==動作が終了するまで
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000524:	429a      	cmp	r2, r3
 8000526:	d21b      	bcs.n	8000560 <rotationalprocess+0x58>
				s->stepFunc();							//stepをOFF ONとする
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	68db      	ldr	r3, [r3, #12]
 800052c:	4798      	blx	r3
				s->stepCount++;							//カウント
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000532:	1c5a      	adds	r2, r3, #1
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	649a      	str	r2, [r3, #72]	; 0x48
				s->stepPosition += s->dir;		//dir(+もしくはー(dirの向き）を加算してstepPositionに格納
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	69da      	ldr	r2, [r3, #28]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	441a      	add	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	619a      	str	r2, [r3, #24]
				if ( (s->stepCount) >= (s->totalSteps) ){	//stepCountがtotalStepsを超えたとき、remainingstepperFlagを
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	429a      	cmp	r2, r3
 8000550:	d306      	bcc.n	8000560 <rotationalprocess+0x58>
					remainingstepperFlag &= ~1;
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <rotationalprocess+0x68>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	f023 0301 	bic.w	r3, r3, #1
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <rotationalprocess+0x68>)
 800055e:	701a      	strb	r2, [r3, #0]
				}
		}
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	2000008c 	.word	0x2000008c
 800056c:	2000067c 	.word	0x2000067c
 8000570:	200006c8 	.word	0x200006c8

08000574 <HAL_TIM_OC_DelayElapsedCallback>:
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){      //指定したコンペアを超えた時発火
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	//HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
		rotationalprocess();
 800057c:	f7ff ffc4 	bl	8000508 <rotationalprocess>
		setNextInterruptInterval();
 8000580:	f7ff ff80 	bl	8000484 <setNextInterruptInterval>
		__HAL_TIM_SET_COUNTER(&htim3, 0);			//カウンター0
 8000584:	4b03      	ldr	r3, [pc, #12]	; (8000594 <HAL_TIM_OC_DelayElapsedCallback+0x20>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2200      	movs	r2, #0
 800058a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	2000008c 	.word	0x2000008c

08000598 <runAndWait>:

void runAndWait(){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	setNextInterruptInterval();
 800059c:	f7ff ff72 	bl	8000484 <setNextInterruptInterval>
	while(remainingstepperFlag);
 80005a0:	bf00      	nop
 80005a2:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <runAndWait+0x18>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d1fb      	bne.n	80005a2 <runAndWait+0xa>
}
 80005aa:	bf00      	nop
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200006c8 	.word	0x200006c8

080005b4 <TMCsetup>:
//{
//    if (htim == &htim2){
//		currentcheck();
//    }
//}
void TMCsetup(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08e      	sub	sp, #56	; 0x38
 80005b8:	af00      	add	r7, sp, #0
	int32_t mstep_value = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t toff_value = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t microstep_value = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t IRUN_value = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t IHOLD_value = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t IHOLDDELAY_value= 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	623b      	str	r3, [r7, #32]
	int32_t buffer = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
	int32_t stallgard_setup_value=0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
	int32_t TCOOLTHRS_value=0;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
	int32_t buffer_TPWMTHRS=0;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
	int32_t TPWMTHRS_value=0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
	int32_t SEMIN_value=0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
	int32_t SEMAX_value=0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
	int32_t SEIMIN_scale_value=0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	603b      	str	r3, [r7, #0]
//	FCLKTRIM_scale_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_FACTORY_CONF, TMC2209_FCLKTRIM_MASK, TMC2209_FCLKTRIM_SHIFT);
//	FCLKTRIM_scale_value=31;
//	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_FACTORY_CONF, TMC2209_FCLKTRIM_MASK, TMC2209_FCLKTRIM_SHIFT, FCLKTRIM_scale_value);
//	printf("FCLKTRIM: %ld\r\n", FCLKTRIM_scale_value);

	mstep_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK,TMC2209_MSTEP_REG_SELECT_SHIFT);	//uartでのmicrostepの有効化
 80005f2:	2100      	movs	r1, #0
 80005f4:	48be      	ldr	r0, [pc, #760]	; (80008f0 <TMCsetup+0x33c>)
 80005f6:	f005 fca2 	bl	8005f3e <tmc2209_readInt>
 80005fa:	4603      	mov	r3, r0
 80005fc:	11db      	asrs	r3, r3, #7
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	637b      	str	r3, [r7, #52]	; 0x34
	printf("mstep_before : %ld\r\n", mstep_value);
 8000604:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000606:	48bb      	ldr	r0, [pc, #748]	; (80008f4 <TMCsetup+0x340>)
 8000608:	f005 fe66 	bl	80062d8 <iprintf>
	mstep_value = 1;
 800060c:	2301      	movs	r3, #1
 800060e:	637b      	str	r3, [r7, #52]	; 0x34
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT,mstep_value);
 8000610:	2100      	movs	r1, #0
 8000612:	48b7      	ldr	r0, [pc, #732]	; (80008f0 <TMCsetup+0x33c>)
 8000614:	f005 fc93 	bl	8005f3e <tmc2209_readInt>
 8000618:	4603      	mov	r3, r0
 800061a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800061e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000620:	01db      	lsls	r3, r3, #7
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4313      	orrs	r3, r2
 8000626:	461a      	mov	r2, r3
 8000628:	2100      	movs	r1, #0
 800062a:	48b1      	ldr	r0, [pc, #708]	; (80008f0 <TMCsetup+0x33c>)
 800062c:	f005 fc37 	bl	8005e9e <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000630:	f000 fe34 	bl	800129c <HAL_GetTick>
 8000634:	4603      	mov	r3, r0
 8000636:	4619      	mov	r1, r3
 8000638:	48ad      	ldr	r0, [pc, #692]	; (80008f0 <TMCsetup+0x33c>)
 800063a:	f005 fdb6 	bl	80061aa <tmc2209_periodicJob>
	mstep_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT);
 800063e:	2100      	movs	r1, #0
 8000640:	48ab      	ldr	r0, [pc, #684]	; (80008f0 <TMCsetup+0x33c>)
 8000642:	f005 fc7c 	bl	8005f3e <tmc2209_readInt>
 8000646:	4603      	mov	r3, r0
 8000648:	11db      	asrs	r3, r3, #7
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	637b      	str	r3, [r7, #52]	; 0x34
	printf("mstep_after : %ld\r\n", mstep_value);
 8000650:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000652:	48a9      	ldr	r0, [pc, #676]	; (80008f8 <TMCsetup+0x344>)
 8000654:	f005 fe40 	bl	80062d8 <iprintf>

	toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);	//保持トルクの設定
 8000658:	216c      	movs	r1, #108	; 0x6c
 800065a:	48a5      	ldr	r0, [pc, #660]	; (80008f0 <TMCsetup+0x33c>)
 800065c:	f005 fc6f 	bl	8005f3e <tmc2209_readInt>
 8000660:	4603      	mov	r3, r0
 8000662:	f003 030f 	and.w	r3, r3, #15
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
	printf("toff_before : %ld\r\n", toff_value);
 8000668:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800066a:	48a4      	ldr	r0, [pc, #656]	; (80008fc <TMCsetup+0x348>)
 800066c:	f005 fe34 	bl	80062d8 <iprintf>
	toff_value = 4;
 8000670:	2304      	movs	r3, #4
 8000672:	633b      	str	r3, [r7, #48]	; 0x30
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT,toff_value);
 8000674:	216c      	movs	r1, #108	; 0x6c
 8000676:	489e      	ldr	r0, [pc, #632]	; (80008f0 <TMCsetup+0x33c>)
 8000678:	f005 fc61 	bl	8005f3e <tmc2209_readInt>
 800067c:	4603      	mov	r3, r0
 800067e:	f023 020f 	bic.w	r2, r3, #15
 8000682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000684:	f003 030f 	and.w	r3, r3, #15
 8000688:	4313      	orrs	r3, r2
 800068a:	461a      	mov	r2, r3
 800068c:	216c      	movs	r1, #108	; 0x6c
 800068e:	4898      	ldr	r0, [pc, #608]	; (80008f0 <TMCsetup+0x33c>)
 8000690:	f005 fc05 	bl	8005e9e <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000694:	f000 fe02 	bl	800129c <HAL_GetTick>
 8000698:	4603      	mov	r3, r0
 800069a:	4619      	mov	r1, r3
 800069c:	4894      	ldr	r0, [pc, #592]	; (80008f0 <TMCsetup+0x33c>)
 800069e:	f005 fd84 	bl	80061aa <tmc2209_periodicJob>
	toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 80006a2:	216c      	movs	r1, #108	; 0x6c
 80006a4:	4892      	ldr	r0, [pc, #584]	; (80008f0 <TMCsetup+0x33c>)
 80006a6:	f005 fc4a 	bl	8005f3e <tmc2209_readInt>
 80006aa:	4603      	mov	r3, r0
 80006ac:	f003 030f 	and.w	r3, r3, #15
 80006b0:	633b      	str	r3, [r7, #48]	; 0x30
	printf("toff_after : %ld\r\n", toff_value);
 80006b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80006b4:	4892      	ldr	r0, [pc, #584]	; (8000900 <TMCsetup+0x34c>)
 80006b6:	f005 fe0f 	bl	80062d8 <iprintf>

	microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);	//microstepの設定
 80006ba:	216c      	movs	r1, #108	; 0x6c
 80006bc:	488c      	ldr	r0, [pc, #560]	; (80008f0 <TMCsetup+0x33c>)
 80006be:	f005 fc3e 	bl	8005f3e <tmc2209_readInt>
 80006c2:	4603      	mov	r3, r0
 80006c4:	161b      	asrs	r3, r3, #24
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ce:	fa42 f303 	asr.w	r3, r2, r3
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	printf("microstep_before : %ld\r\n", microstep_value);
 80006d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80006d6:	488b      	ldr	r0, [pc, #556]	; (8000904 <TMCsetup+0x350>)
 80006d8:	f005 fdfe 	bl	80062d8 <iprintf>
	microstep_value = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT,microstep_value);
 80006e0:	216c      	movs	r1, #108	; 0x6c
 80006e2:	4883      	ldr	r0, [pc, #524]	; (80008f0 <TMCsetup+0x33c>)
 80006e4:	f005 fc2b 	bl	8005f3e <tmc2209_readInt>
 80006e8:	4603      	mov	r3, r0
 80006ea:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80006ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006f0:	061b      	lsls	r3, r3, #24
 80006f2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80006f6:	4313      	orrs	r3, r2
 80006f8:	461a      	mov	r2, r3
 80006fa:	216c      	movs	r1, #108	; 0x6c
 80006fc:	487c      	ldr	r0, [pc, #496]	; (80008f0 <TMCsetup+0x33c>)
 80006fe:	f005 fbce 	bl	8005e9e <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000702:	f000 fdcb 	bl	800129c <HAL_GetTick>
 8000706:	4603      	mov	r3, r0
 8000708:	4619      	mov	r1, r3
 800070a:	4879      	ldr	r0, [pc, #484]	; (80008f0 <TMCsetup+0x33c>)
 800070c:	f005 fd4d 	bl	80061aa <tmc2209_periodicJob>
	microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);
 8000710:	216c      	movs	r1, #108	; 0x6c
 8000712:	4877      	ldr	r0, [pc, #476]	; (80008f0 <TMCsetup+0x33c>)
 8000714:	f005 fc13 	bl	8005f3e <tmc2209_readInt>
 8000718:	4603      	mov	r3, r0
 800071a:	161b      	asrs	r3, r3, #24
 800071c:	f003 030f 	and.w	r3, r3, #15
 8000720:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000724:	fa42 f303 	asr.w	r3, r2, r3
 8000728:	62fb      	str	r3, [r7, #44]	; 0x2c
	printf("microstep_after : %ld\r\n", microstep_value);
 800072a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800072c:	4876      	ldr	r0, [pc, #472]	; (8000908 <TMCsetup+0x354>)
 800072e:	f005 fdd3 	bl	80062d8 <iprintf>

	IHOLD_value=3;																							//モーター待機時の電流の設定
 8000732:	2303      	movs	r3, #3
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
	TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, IHOLD_value);
 8000736:	2110      	movs	r1, #16
 8000738:	486d      	ldr	r0, [pc, #436]	; (80008f0 <TMCsetup+0x33c>)
 800073a:	f005 fc00 	bl	8005f3e <tmc2209_readInt>
 800073e:	4603      	mov	r3, r0
 8000740:	f023 021f 	bic.w	r2, r3, #31
 8000744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000746:	f003 031f 	and.w	r3, r3, #31
 800074a:	4313      	orrs	r3, r2
 800074c:	461a      	mov	r2, r3
 800074e:	2110      	movs	r1, #16
 8000750:	4867      	ldr	r0, [pc, #412]	; (80008f0 <TMCsetup+0x33c>)
 8000752:	f005 fba4 	bl	8005e9e <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000756:	f000 fda1 	bl	800129c <HAL_GetTick>
 800075a:	4603      	mov	r3, r0
 800075c:	4619      	mov	r1, r3
 800075e:	4864      	ldr	r0, [pc, #400]	; (80008f0 <TMCsetup+0x33c>)
 8000760:	f005 fd23 	bl	80061aa <tmc2209_periodicJob>
	HAL_Delay(100);
 8000764:	2064      	movs	r0, #100	; 0x64
 8000766:	f000 fda5 	bl	80012b4 <HAL_Delay>
	IHOLD_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);	//保持電流
 800076a:	2110      	movs	r1, #16
 800076c:	4860      	ldr	r0, [pc, #384]	; (80008f0 <TMCsetup+0x33c>)
 800076e:	f005 fbe6 	bl	8005f3e <tmc2209_readInt>
 8000772:	4603      	mov	r3, r0
 8000774:	f003 031f 	and.w	r3, r3, #31
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
	printf("IHOLD: %ld\r\n", IHOLD_value);
 800077a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800077c:	4863      	ldr	r0, [pc, #396]	; (800090c <TMCsetup+0x358>)
 800077e:	f005 fdab 	bl	80062d8 <iprintf>

	IRUN_value = 18;
 8000782:	2312      	movs	r3, #18
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT, IRUN_value);	//実行電流
 8000786:	2110      	movs	r1, #16
 8000788:	4859      	ldr	r0, [pc, #356]	; (80008f0 <TMCsetup+0x33c>)
 800078a:	f005 fbd8 	bl	8005f3e <tmc2209_readInt>
 800078e:	4603      	mov	r3, r0
 8000790:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800079c:	4313      	orrs	r3, r2
 800079e:	461a      	mov	r2, r3
 80007a0:	2110      	movs	r1, #16
 80007a2:	4853      	ldr	r0, [pc, #332]	; (80008f0 <TMCsetup+0x33c>)
 80007a4:	f005 fb7b 	bl	8005e9e <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80007a8:	f000 fd78 	bl	800129c <HAL_GetTick>
 80007ac:	4603      	mov	r3, r0
 80007ae:	4619      	mov	r1, r3
 80007b0:	484f      	ldr	r0, [pc, #316]	; (80008f0 <TMCsetup+0x33c>)
 80007b2:	f005 fcfa 	bl	80061aa <tmc2209_periodicJob>
	HAL_Delay(100);
 80007b6:	2064      	movs	r0, #100	; 0x64
 80007b8:	f000 fd7c 	bl	80012b4 <HAL_Delay>
	IHOLD_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 80007bc:	2110      	movs	r1, #16
 80007be:	484c      	ldr	r0, [pc, #304]	; (80008f0 <TMCsetup+0x33c>)
 80007c0:	f005 fbbd 	bl	8005f3e <tmc2209_readInt>
 80007c4:	4603      	mov	r3, r0
 80007c6:	121b      	asrs	r3, r3, #8
 80007c8:	f003 031f 	and.w	r3, r3, #31
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
	printf("IRUN: %ld\r\n", IRUN_value);
 80007ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80007d0:	484f      	ldr	r0, [pc, #316]	; (8000910 <TMCsetup+0x35c>)
 80007d2:	f005 fd81 	bl	80062d8 <iprintf>

	IHOLDDELAY_value=4;
 80007d6:	2304      	movs	r3, #4
 80007d8:	623b      	str	r3, [r7, #32]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT, IHOLDDELAY_value);
 80007da:	2110      	movs	r1, #16
 80007dc:	4844      	ldr	r0, [pc, #272]	; (80008f0 <TMCsetup+0x33c>)
 80007de:	f005 fbae 	bl	8005f3e <tmc2209_readInt>
 80007e2:	4603      	mov	r3, r0
 80007e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80007e8:	6a3b      	ldr	r3, [r7, #32]
 80007ea:	041b      	lsls	r3, r3, #16
 80007ec:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80007f0:	4313      	orrs	r3, r2
 80007f2:	461a      	mov	r2, r3
 80007f4:	2110      	movs	r1, #16
 80007f6:	483e      	ldr	r0, [pc, #248]	; (80008f0 <TMCsetup+0x33c>)
 80007f8:	f005 fb51 	bl	8005e9e <tmc2209_writeInt>
	IHOLDDELAY_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT);
 80007fc:	2110      	movs	r1, #16
 80007fe:	483c      	ldr	r0, [pc, #240]	; (80008f0 <TMCsetup+0x33c>)
 8000800:	f005 fb9d 	bl	8005f3e <tmc2209_readInt>
 8000804:	4603      	mov	r3, r0
 8000806:	141b      	asrs	r3, r3, #16
 8000808:	f003 030f 	and.w	r3, r3, #15
 800080c:	623b      	str	r3, [r7, #32]
	printf("IHOLDDELAY: %ld\r\n", IHOLDDELAY_value);
 800080e:	6a39      	ldr	r1, [r7, #32]
 8000810:	4840      	ldr	r0, [pc, #256]	; (8000914 <TMCsetup+0x360>)
 8000812:	f005 fd61 	bl	80062d8 <iprintf>

	stallgard_setup_value=15;											//SG_RESULTと比較して、
 8000816:	230f      	movs	r3, #15
 8000818:	61bb      	str	r3, [r7, #24]
	tmc2209_writeInt(&TMC2209, TMC2209_SGTHRS, stallgard_setup_value);
 800081a:	69ba      	ldr	r2, [r7, #24]
 800081c:	2140      	movs	r1, #64	; 0x40
 800081e:	4834      	ldr	r0, [pc, #208]	; (80008f0 <TMCsetup+0x33c>)
 8000820:	f005 fb3d 	bl	8005e9e <tmc2209_writeInt>
	stallgard_setup_value = tmc2209_readInt(&TMC2209, TMC2209_SGTHRS);
 8000824:	2140      	movs	r1, #64	; 0x40
 8000826:	4832      	ldr	r0, [pc, #200]	; (80008f0 <TMCsetup+0x33c>)
 8000828:	f005 fb89 	bl	8005f3e <tmc2209_readInt>
 800082c:	61b8      	str	r0, [r7, #24]
	printf("SGTHRS: %ld\r\n", stallgard_setup_value);
 800082e:	69b9      	ldr	r1, [r7, #24]
 8000830:	4839      	ldr	r0, [pc, #228]	; (8000918 <TMCsetup+0x364>)
 8000832:	f005 fd51 	bl	80062d8 <iprintf>


//	buffer = tmc2209_readInt(&TMC2209, TMC2209_TCOOLTHRS);
	TCOOLTHRS_value=1300;
 8000836:	f240 5314 	movw	r3, #1300	; 0x514
 800083a:	617b      	str	r3, [r7, #20]
////				}
////				else
////				{
////					TCOOLTHRS_value = 0x000FFFFF;
////				}
	tmc2209_writeInt(&TMC2209, TMC2209_TCOOLTHRS, TCOOLTHRS_value);
 800083c:	697a      	ldr	r2, [r7, #20]
 800083e:	2114      	movs	r1, #20
 8000840:	482b      	ldr	r0, [pc, #172]	; (80008f0 <TMCsetup+0x33c>)
 8000842:	f005 fb2c 	bl	8005e9e <tmc2209_writeInt>
	printf("TCOOLTHRS: %ld\r\n", TCOOLTHRS_value);
 8000846:	6979      	ldr	r1, [r7, #20]
 8000848:	4834      	ldr	r0, [pc, #208]	; (800091c <TMCsetup+0x368>)
 800084a:	f005 fd45 	bl	80062d8 <iprintf>
//	buffer_TPWMTHRS = tmc2209_readInt(&TMC2209, TMC2209_TPWMTHRS);
//	TPWMTHRS_value = MIN(0xFFFFF, (1<<24) / ((buffer_TPWMTHRS) ? buffer_TPWMTHRS : 1));
//
//	TPWMTHRS_value = MIN(0xFFFFF, (1<<24) / ((TPWMTHRS_value) ? TPWMTHRS_value : 1));

	TPWMTHRS_value=200;
 800084e:	23c8      	movs	r3, #200	; 0xc8
 8000850:	60fb      	str	r3, [r7, #12]
	tmc2209_writeInt(&TMC2209, TMC2209_TPWMTHRS, TPWMTHRS_value);
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	2113      	movs	r1, #19
 8000856:	4826      	ldr	r0, [pc, #152]	; (80008f0 <TMCsetup+0x33c>)
 8000858:	f005 fb21 	bl	8005e9e <tmc2209_writeInt>
	printf("TPWMTHRS: %ld\r\n", TPWMTHRS_value);
 800085c:	68f9      	ldr	r1, [r7, #12]
 800085e:	4830      	ldr	r0, [pc, #192]	; (8000920 <TMCsetup+0x36c>)
 8000860:	f005 fd3a 	bl	80062d8 <iprintf>

	//SEMIN_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT);

	SEMIN_value=0;	//IRUNのスケールを1/4
 8000864:	2300      	movs	r3, #0
 8000866:	60bb      	str	r3, [r7, #8]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT, SEMIN_value);
 8000868:	2142      	movs	r1, #66	; 0x42
 800086a:	4821      	ldr	r0, [pc, #132]	; (80008f0 <TMCsetup+0x33c>)
 800086c:	f005 fb67 	bl	8005f3e <tmc2209_readInt>
 8000870:	4603      	mov	r3, r0
 8000872:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	03db      	lsls	r3, r3, #15
 800087a:	b29b      	uxth	r3, r3
 800087c:	4313      	orrs	r3, r2
 800087e:	461a      	mov	r2, r3
 8000880:	2142      	movs	r1, #66	; 0x42
 8000882:	481b      	ldr	r0, [pc, #108]	; (80008f0 <TMCsetup+0x33c>)
 8000884:	f005 fb0b 	bl	8005e9e <tmc2209_writeInt>
	printf("SEMIN: %ld\r\n", SEMIN_value);
 8000888:	68b9      	ldr	r1, [r7, #8]
 800088a:	4826      	ldr	r0, [pc, #152]	; (8000924 <TMCsetup+0x370>)
 800088c:	f005 fd24 	bl	80062d8 <iprintf>
//
//	//SEMAX_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_COOLCONF, TMC2209_SEMAX_MASK, TMC2209_SEMAX_SHIFT);
	SEMAX_value = 10;
 8000890:	230a      	movs	r3, #10
 8000892:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT, SEMIN_value);
 8000894:	2142      	movs	r1, #66	; 0x42
 8000896:	4816      	ldr	r0, [pc, #88]	; (80008f0 <TMCsetup+0x33c>)
 8000898:	f005 fb51 	bl	8005f3e <tmc2209_readInt>
 800089c:	4603      	mov	r3, r0
 800089e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	03db      	lsls	r3, r3, #15
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	4313      	orrs	r3, r2
 80008aa:	461a      	mov	r2, r3
 80008ac:	2142      	movs	r1, #66	; 0x42
 80008ae:	4810      	ldr	r0, [pc, #64]	; (80008f0 <TMCsetup+0x33c>)
 80008b0:	f005 faf5 	bl	8005e9e <tmc2209_writeInt>
	printf("SEMAX: %ld\r\n", SEMAX_value);
 80008b4:	6879      	ldr	r1, [r7, #4]
 80008b6:	481c      	ldr	r0, [pc, #112]	; (8000928 <TMCsetup+0x374>)
 80008b8:	f005 fd0e 	bl	80062d8 <iprintf>

	SEIMIN_scale_value=1;
 80008bc:	2301      	movs	r3, #1
 80008be:	603b      	str	r3, [r7, #0]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT, SEIMIN_scale_value);
 80008c0:	2142      	movs	r1, #66	; 0x42
 80008c2:	480b      	ldr	r0, [pc, #44]	; (80008f0 <TMCsetup+0x33c>)
 80008c4:	f005 fb3b 	bl	8005f3e <tmc2209_readInt>
 80008c8:	4603      	mov	r3, r0
 80008ca:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	03db      	lsls	r3, r3, #15
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	4313      	orrs	r3, r2
 80008d6:	461a      	mov	r2, r3
 80008d8:	2142      	movs	r1, #66	; 0x42
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <TMCsetup+0x33c>)
 80008dc:	f005 fadf 	bl	8005e9e <tmc2209_writeInt>
	printf("SEIMIN_scal: %ld\r\n", SEIMIN_scale_value);
 80008e0:	6839      	ldr	r1, [r7, #0]
 80008e2:	4812      	ldr	r0, [pc, #72]	; (800092c <TMCsetup+0x378>)
 80008e4:	f005 fcf8 	bl	80062d8 <iprintf>
}
 80008e8:	bf00      	nop
 80008ea:	3738      	adds	r7, #56	; 0x38
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200001e0 	.word	0x200001e0
 80008f4:	080074c4 	.word	0x080074c4
 80008f8:	080074dc 	.word	0x080074dc
 80008fc:	080074f0 	.word	0x080074f0
 8000900:	08007504 	.word	0x08007504
 8000904:	08007518 	.word	0x08007518
 8000908:	08007534 	.word	0x08007534
 800090c:	0800754c 	.word	0x0800754c
 8000910:	0800755c 	.word	0x0800755c
 8000914:	08007568 	.word	0x08007568
 8000918:	0800757c 	.word	0x0800757c
 800091c:	0800758c 	.word	0x0800758c
 8000920:	080075a0 	.word	0x080075a0
 8000924:	080075b0 	.word	0x080075b0
 8000928:	080075c0 	.word	0x080075c0
 800092c:	080075d0 	.word	0x080075d0

08000930 <HAL_UART_RxCpltCallback>:

uint8_t uartflag1=0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	//int32_t SGTHRS_value = 0;
	uartflag1 = 1;
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <HAL_UART_RxCpltCallback+0x1c>)
 800093a:	2201      	movs	r2, #1
 800093c:	701a      	strb	r2, [r3, #0]
	printf("uart_timer\r\n");
 800093e:	4804      	ldr	r0, [pc, #16]	; (8000950 <HAL_UART_RxCpltCallback+0x20>)
 8000940:	f005 fd50 	bl	80063e4 <puts>
	//HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);
	//SGTHRS_value = tmc2209_readInt(&TMC2209, TMC2209_SGTHRS);
	//currentdata();
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200006ca 	.word	0x200006ca
 8000950:	080075e4 	.word	0x080075e4

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b5b0      	push	{r4, r5, r7, lr}
 8000956:	b092      	sub	sp, #72	; 0x48
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 800095a:	4b4e      	ldr	r3, [pc, #312]	; (8000a94 <main+0x140>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f005 fd46 	bl	80063f4 <setbuf>
	//uint8_t buffer[256];
	//char rxbuf[1];
	char start[] ="1:front,2:back\r\n";
 8000968:	4b4b      	ldr	r3, [pc, #300]	; (8000a98 <main+0x144>)
 800096a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800096e:	461d      	mov	r5, r3
 8000970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000974:	682b      	ldr	r3, [r5, #0]
 8000976:	7023      	strb	r3, [r4, #0]
	char front[] ="front turn\r\n";
 8000978:	4b48      	ldr	r3, [pc, #288]	; (8000a9c <main+0x148>)
 800097a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800097e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000980:	c407      	stmia	r4!, {r0, r1, r2}
 8000982:	7023      	strb	r3, [r4, #0]
	char back[] ="back turn\r\n";
 8000984:	4a46      	ldr	r2, [pc, #280]	; (8000aa0 <main+0x14c>)
 8000986:	f107 0318 	add.w	r3, r7, #24
 800098a:	ca07      	ldmia	r2, {r0, r1, r2}
 800098c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char nonans[] ="Not Understand \r\n";
 8000990:	4b44      	ldr	r3, [pc, #272]	; (8000aa4 <main+0x150>)
 8000992:	1d3c      	adds	r4, r7, #4
 8000994:	461d      	mov	r5, r3
 8000996:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800099a:	682b      	ldr	r3, [r5, #0]
 800099c:	8023      	strh	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099e:	f000 fc23 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a2:	f000 f895 	bl	8000ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a6:	f000 f9c1 	bl	8000d2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009aa:	f000 f98f 	bl	8000ccc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80009ae:	f000 f95d 	bl	8000c6c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80009b2:	f000 f8e5 	bl	8000b80 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //int getserial=0;
  TMC2209_INIT();
 80009b6:	f7ff fca7 	bl	8000308 <TMC2209_INIT>
  TMCsetup();
 80009ba:	f7ff fdfb 	bl	80005b4 <TMCsetup>
  printf("Hello\r\n");
 80009be:	483a      	ldr	r0, [pc, #232]	; (8000aa8 <main+0x154>)
 80009c0:	f005 fd10 	bl	80063e4 <puts>
  HAL_UART_Transmit(&huart2,(uint8_t *)start,sizeof(start),3000);
 80009c4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80009c8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009cc:	2211      	movs	r2, #17
 80009ce:	4837      	ldr	r0, [pc, #220]	; (8000aac <main+0x158>)
 80009d0:	f003 fcf0 	bl	80043b4 <HAL_UART_Transmit>
  //HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80009d4:	2100      	movs	r1, #0
 80009d6:	4836      	ldr	r0, [pc, #216]	; (8000ab0 <main+0x15c>)
 80009d8:	f002 fc18 	bl	800320c <HAL_TIM_OC_Start_IT>


  stepper[0].dirFunc = Dir0;
 80009dc:	4b35      	ldr	r3, [pc, #212]	; (8000ab4 <main+0x160>)
 80009de:	4a36      	ldr	r2, [pc, #216]	; (8000ab8 <main+0x164>)
 80009e0:	609a      	str	r2, [r3, #8]
  stepper[0].stepFunc = Step0;
 80009e2:	4b34      	ldr	r3, [pc, #208]	; (8000ab4 <main+0x160>)
 80009e4:	4a35      	ldr	r2, [pc, #212]	; (8000abc <main+0x168>)
 80009e6:	60da      	str	r2, [r3, #12]
  stepper[0].acceleration = 100-1;
 80009e8:	4b32      	ldr	r3, [pc, #200]	; (8000ab4 <main+0x160>)
 80009ea:	4a35      	ldr	r2, [pc, #212]	; (8000ac0 <main+0x16c>)
 80009ec:	601a      	str	r2, [r3, #0]
  stepper[0].minStepInterval = 100;
 80009ee:	4b31      	ldr	r3, [pc, #196]	; (8000ab4 <main+0x160>)
 80009f0:	2264      	movs	r2, #100	; 0x64
 80009f2:	605a      	str	r2, [r3, #4]
  stepper[0].homing = 0;
 80009f4:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <main+0x160>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	741a      	strb	r2, [r3, #16]
  stepper[0].dir_inv = 1;
 80009fa:	4b2e      	ldr	r3, [pc, #184]	; (8000ab4 <main+0x160>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	621a      	str	r2, [r3, #32]
  stepper[0].seeking_vel = 100;
 8000a00:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <main+0x160>)
 8000a02:	2264      	movs	r2, #100	; 0x64
 8000a04:	629a      	str	r2, [r3, #40]	; 0x28
  stepper[0].homing_vel = 200;
 8000a06:	4b2b      	ldr	r3, [pc, #172]	; (8000ab4 <main+0x160>)
 8000a08:	22c8      	movs	r2, #200	; 0xc8
 8000a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  stepper[0].pull_off = 100;
 8000a0c:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <main+0x160>)
 8000a0e:	2264      	movs	r2, #100	; 0x64
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
  rxbuf[0]=0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	703b      	strb	r3, [r7, #0]
  uartflag1=0;
 8000a16:	4b2b      	ldr	r3, [pc, #172]	; (8000ac4 <main+0x170>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //example read register value
	  //int32_t value = 0;
	  HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4822      	ldr	r0, [pc, #136]	; (8000aac <main+0x158>)
 8000a24:	f003 fe9a 	bl	800475c <HAL_UART_Receive_IT>
//	  while(uartflag1==0){
//		  ;
//	  }
	  HAL_UART_Transmit_IT(&huart2,(uint8_t *)rxbuf,sizeof(rxbuf));
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	481f      	ldr	r0, [pc, #124]	; (8000aac <main+0x158>)
 8000a30:	f003 fe26 	bl	8004680 <HAL_UART_Transmit_IT>
	  if(uartflag1==1){
 8000a34:	4b23      	ldr	r3, [pc, #140]	; (8000ac4 <main+0x170>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d1ef      	bne.n	8000a1c <main+0xc8>
		  if (rxbuf[0] != 0){
 8000a3c:	783b      	ldrb	r3, [r7, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d0ec      	beq.n	8000a1c <main+0xc8>
			  if(rxbuf[0] == '1'){
 8000a42:	783b      	ldrb	r3, [r7, #0]
 8000a44:	2b31      	cmp	r3, #49	; 0x31
 8000a46:	d118      	bne.n	8000a7a <main+0x126>
				  //HAL_UART_Transmit_IT(&huart2,(uint8_t *)front, sizeof(front));
				  printf("1:start\r\n");
 8000a48:	481f      	ldr	r0, [pc, #124]	; (8000ac8 <main+0x174>)
 8000a4a:	f005 fccb 	bl	80063e4 <puts>
				  motorrotate(5000);
 8000a4e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a52:	f7ff fcd3 	bl	80003fc <motorrotate>
				  currentcheck();
 8000a56:	f7ff fc7d 	bl	8000354 <currentcheck>
				  runAndWait();
 8000a5a:	f7ff fd9d 	bl	8000598 <runAndWait>
				  motorrotate(0);
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f7ff fccc 	bl	80003fc <motorrotate>
				  runAndWait();
 8000a64:	f7ff fd98 	bl	8000598 <runAndWait>
				  HAL_Delay(100);
 8000a68:	2064      	movs	r0, #100	; 0x64
 8000a6a:	f000 fc23 	bl	80012b4 <HAL_Delay>
				  printf("1:end\r\n");
 8000a6e:	4817      	ldr	r0, [pc, #92]	; (8000acc <main+0x178>)
 8000a70:	f005 fcb8 	bl	80063e4 <puts>
				  rxbuf[0]=0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	703b      	strb	r3, [r7, #0]
 8000a78:	e007      	b.n	8000a8a <main+0x136>

			  }
			  else{
				  HAL_UART_Transmit_IT(&huart2,(uint8_t *)nonans, sizeof(nonans));
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2212      	movs	r2, #18
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480a      	ldr	r0, [pc, #40]	; (8000aac <main+0x158>)
 8000a82:	f003 fdfd 	bl	8004680 <HAL_UART_Transmit_IT>
				  rxbuf[0]=0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	703b      	strb	r3, [r7, #0]
			  }
			  uartflag1=0;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <main+0x170>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);
 8000a90:	e7c4      	b.n	8000a1c <main+0xc8>
 8000a92:	bf00      	nop
 8000a94:	2000000c 	.word	0x2000000c
 8000a98:	0800760c 	.word	0x0800760c
 8000a9c:	08007620 	.word	0x08007620
 8000aa0:	08007630 	.word	0x08007630
 8000aa4:	0800763c 	.word	0x0800763c
 8000aa8:	080075f0 	.word	0x080075f0
 8000aac:	2000015c 	.word	0x2000015c
 8000ab0:	2000008c 	.word	0x2000008c
 8000ab4:	2000067c 	.word	0x2000067c
 8000ab8:	080003d9 	.word	0x080003d9
 8000abc:	080003b9 	.word	0x080003b9
 8000ac0:	42c60000 	.word	0x42c60000
 8000ac4:	200006ca 	.word	0x200006ca
 8000ac8:	080075f8 	.word	0x080075f8
 8000acc:	08007604 	.word	0x08007604

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b096      	sub	sp, #88	; 0x58
 8000ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ada:	2228      	movs	r2, #40	; 0x28
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f005 fbf2 	bl	80062c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
 8000b02:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b04:	2302      	movs	r3, #2
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b0c:	2310      	movs	r3, #16
 8000b0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b10:	2302      	movs	r3, #2
 8000b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b14:	2300      	movs	r3, #0
 8000b16:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b18:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b1c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 ff20 	bl	8001968 <HAL_RCC_OscConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000b2e:	f000 f971 	bl	8000e14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b32:	230f      	movs	r3, #15
 8000b34:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b36:	2302      	movs	r3, #2
 8000b38:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 ff48 	bl	80029e4 <HAL_RCC_ClockConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b5a:	f000 f95b 	bl	8000e14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 f971 	bl	8002e50 <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000b74:	f000 f94e 	bl	8000e14 <Error_Handler>
  }
}
 8000b78:	bf00      	nop
 8000b7a:	3758      	adds	r7, #88	; 0x58
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08e      	sub	sp, #56	; 0x38
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]
 8000bae:	615a      	str	r2, [r3, #20]
 8000bb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bb2:	4b2c      	ldr	r3, [pc, #176]	; (8000c64 <MX_TIM3_Init+0xe4>)
 8000bb4:	4a2c      	ldr	r2, [pc, #176]	; (8000c68 <MX_TIM3_Init+0xe8>)
 8000bb6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 640-1;
 8000bb8:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <MX_TIM3_Init+0xe4>)
 8000bba:	f240 227f 	movw	r2, #639	; 0x27f
 8000bbe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc0:	4b28      	ldr	r3, [pc, #160]	; (8000c64 <MX_TIM3_Init+0xe4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bc6:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <MX_TIM3_Init+0xe4>)
 8000bc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bcc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bce:	4b25      	ldr	r3, [pc, #148]	; (8000c64 <MX_TIM3_Init+0xe4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd4:	4b23      	ldr	r3, [pc, #140]	; (8000c64 <MX_TIM3_Init+0xe4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bda:	4822      	ldr	r0, [pc, #136]	; (8000c64 <MX_TIM3_Init+0xe4>)
 8000bdc:	f002 fa5e 	bl	800309c <HAL_TIM_Base_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000be6:	f000 f915 	bl	8000e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	481b      	ldr	r0, [pc, #108]	; (8000c64 <MX_TIM3_Init+0xe4>)
 8000bf8:	f002 fddc 	bl	80037b4 <HAL_TIM_ConfigClockSource>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000c02:	f000 f907 	bl	8000e14 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000c06:	4817      	ldr	r0, [pc, #92]	; (8000c64 <MX_TIM3_Init+0xe4>)
 8000c08:	f002 fa9f 	bl	800314a <HAL_TIM_OC_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000c12:	f000 f8ff 	bl	8000e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	480f      	ldr	r0, [pc, #60]	; (8000c64 <MX_TIM3_Init+0xe4>)
 8000c26:	f003 fa95 	bl	8004154 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000c30:	f000 f8f0 	bl	8000e14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000c34:	2300      	movs	r3, #0
 8000c36:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c44:	463b      	mov	r3, r7
 8000c46:	2200      	movs	r2, #0
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4806      	ldr	r0, [pc, #24]	; (8000c64 <MX_TIM3_Init+0xe4>)
 8000c4c:	f002 fd38 	bl	80036c0 <HAL_TIM_OC_ConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000c56:	f000 f8dd 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	3738      	adds	r7, #56	; 0x38
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	2000008c 	.word	0x2000008c
 8000c68:	40000400 	.word	0x40000400

08000c6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <MX_USART1_UART_Init+0x54>)
 8000c72:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <MX_USART1_UART_Init+0x58>)
 8000c74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_USART1_UART_Init+0x54>)
 8000c78:	4a13      	ldr	r2, [pc, #76]	; (8000cc8 <MX_USART1_UART_Init+0x5c>)
 8000c7a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <MX_USART1_UART_Init+0x54>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_USART1_UART_Init+0x54>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <MX_USART1_UART_Init+0x54>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_USART1_UART_Init+0x54>)
 8000c90:	220c      	movs	r2, #12
 8000c92:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <MX_USART1_UART_Init+0x54>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_USART1_UART_Init+0x54>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <MX_USART1_UART_Init+0x54>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_USART1_UART_Init+0x54>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000cac:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <MX_USART1_UART_Init+0x54>)
 8000cae:	f003 fb2b 	bl	8004308 <HAL_HalfDuplex_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8000cb8:	f000 f8ac 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200000d8 	.word	0x200000d8
 8000cc4:	40013800 	.word	0x40013800
 8000cc8:	0007a120 	.word	0x0007a120

08000ccc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000cd2:	4a15      	ldr	r2, [pc, #84]	; (8000d28 <MX_USART2_UART_Init+0x5c>)
 8000cd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000cd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000d10:	f003 faac 	bl	800426c <HAL_UART_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d1a:	f000 f87b 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	2000015c 	.word	0x2000015c
 8000d28:	40004400 	.word	0x40004400

08000d2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d42:	4b28      	ldr	r3, [pc, #160]	; (8000de4 <MX_GPIO_Init+0xb8>)
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	4a27      	ldr	r2, [pc, #156]	; (8000de4 <MX_GPIO_Init+0xb8>)
 8000d48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d4c:	6153      	str	r3, [r2, #20]
 8000d4e:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <MX_GPIO_Init+0xb8>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <MX_GPIO_Init+0xb8>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	4a21      	ldr	r2, [pc, #132]	; (8000de4 <MX_GPIO_Init+0xb8>)
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	6153      	str	r3, [r2, #20]
 8000d66:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <MX_GPIO_Init+0xb8>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <MX_GPIO_Init+0xb8>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	4a1b      	ldr	r2, [pc, #108]	; (8000de4 <MX_GPIO_Init+0xb8>)
 8000d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d7c:	6153      	str	r3, [r2, #20]
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <MX_GPIO_Init+0xb8>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2130      	movs	r1, #48	; 0x30
 8000d8e:	4816      	ldr	r0, [pc, #88]	; (8000de8 <MX_GPIO_Init+0xbc>)
 8000d90:	f000 fdae 	bl	80018f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d94:	2330      	movs	r3, #48	; 0x30
 8000d96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	4619      	mov	r1, r3
 8000daa:	480f      	ldr	r0, [pc, #60]	; (8000de8 <MX_GPIO_Init+0xbc>)
 8000dac:	f000 fc2e 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000db0:	2340      	movs	r3, #64	; 0x40
 8000db2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000db4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000db8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4808      	ldr	r0, [pc, #32]	; (8000de8 <MX_GPIO_Init+0xbc>)
 8000dc6:	f000 fc21 	bl	800160c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2101      	movs	r1, #1
 8000dce:	2017      	movs	r0, #23
 8000dd0:	f000 fb6f 	bl	80014b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000dd4:	2017      	movs	r0, #23
 8000dd6:	f000 fb88 	bl	80014ea <HAL_NVIC_EnableIRQ>

}
 8000dda:	bf00      	nop
 8000ddc:	3720      	adds	r7, #32
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000
 8000de8:	48000400 	.word	0x48000400

08000dec <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	230a      	movs	r3, #10
 8000dfe:	68b9      	ldr	r1, [r7, #8]
 8000e00:	4803      	ldr	r0, [pc, #12]	; (8000e10 <_write+0x24>)
 8000e02:	f003 fad7 	bl	80043b4 <HAL_UART_Transmit>
//  HAL_UART_Transmit_IT(&huart2,(uint8_t *)ptr,len);

  return len;
 8000e06:	687b      	ldr	r3, [r7, #4]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	2000015c 	.word	0x2000015c

08000e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e18:	b672      	cpsid	i
}
 8000e1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <Error_Handler+0x8>
	...

08000e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <HAL_MspInit+0x44>)
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <HAL_MspInit+0x44>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6193      	str	r3, [r2, #24]
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <HAL_MspInit+0x44>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <HAL_MspInit+0x44>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <HAL_MspInit+0x44>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	61d3      	str	r3, [r2, #28]
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_MspInit+0x44>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40021000 	.word	0x40021000

08000e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <HAL_TIM_Base_MspInit+0x44>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d113      	bne.n	8000ea2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <HAL_TIM_Base_MspInit+0x48>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	4a0c      	ldr	r2, [pc, #48]	; (8000eb0 <HAL_TIM_Base_MspInit+0x48>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	61d3      	str	r3, [r2, #28]
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_TIM_Base_MspInit+0x48>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2102      	movs	r1, #2
 8000e96:	201d      	movs	r0, #29
 8000e98:	f000 fb0b 	bl	80014b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e9c:	201d      	movs	r0, #29
 8000e9e:	f000 fb24 	bl	80014ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40000400 	.word	0x40000400
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08c      	sub	sp, #48	; 0x30
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a38      	ldr	r2, [pc, #224]	; (8000fb4 <HAL_UART_MspInit+0x100>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d132      	bne.n	8000f3c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ed6:	4b38      	ldr	r3, [pc, #224]	; (8000fb8 <HAL_UART_MspInit+0x104>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	4a37      	ldr	r2, [pc, #220]	; (8000fb8 <HAL_UART_MspInit+0x104>)
 8000edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee0:	6193      	str	r3, [r2, #24]
 8000ee2:	4b35      	ldr	r3, [pc, #212]	; (8000fb8 <HAL_UART_MspInit+0x104>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eea:	61bb      	str	r3, [r7, #24]
 8000eec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	4b32      	ldr	r3, [pc, #200]	; (8000fb8 <HAL_UART_MspInit+0x104>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	4a31      	ldr	r2, [pc, #196]	; (8000fb8 <HAL_UART_MspInit+0x104>)
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef8:	6153      	str	r3, [r2, #20]
 8000efa:	4b2f      	ldr	r3, [pc, #188]	; (8000fb8 <HAL_UART_MspInit+0x104>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f0c:	2312      	movs	r3, #18
 8000f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f14:	2303      	movs	r3, #3
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f18:	2307      	movs	r3, #7
 8000f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	4619      	mov	r1, r3
 8000f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f26:	f000 fb71 	bl	800160c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	2025      	movs	r0, #37	; 0x25
 8000f30:	f000 fabf 	bl	80014b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f34:	2025      	movs	r0, #37	; 0x25
 8000f36:	f000 fad8 	bl	80014ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f3a:	e036      	b.n	8000faa <HAL_UART_MspInit+0xf6>
  else if(huart->Instance==USART2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a1e      	ldr	r2, [pc, #120]	; (8000fbc <HAL_UART_MspInit+0x108>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d131      	bne.n	8000faa <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <HAL_UART_MspInit+0x104>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <HAL_UART_MspInit+0x104>)
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	61d3      	str	r3, [r2, #28]
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <HAL_UART_MspInit+0x104>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <HAL_UART_MspInit+0x104>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	4a15      	ldr	r2, [pc, #84]	; (8000fb8 <HAL_UART_MspInit+0x104>)
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	6153      	str	r3, [r2, #20]
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <HAL_UART_MspInit+0x104>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000f76:	f248 0304 	movw	r3, #32772	; 0x8004
 8000f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f84:	2303      	movs	r3, #3
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f88:	2307      	movs	r3, #7
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f96:	f000 fb39 	bl	800160c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2026      	movs	r0, #38	; 0x26
 8000fa0:	f000 fa87 	bl	80014b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fa4:	2026      	movs	r0, #38	; 0x26
 8000fa6:	f000 faa0 	bl	80014ea <HAL_NVIC_EnableIRQ>
}
 8000faa:	bf00      	nop
 8000fac:	3730      	adds	r7, #48	; 0x30
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40013800 	.word	0x40013800
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40004400 	.word	0x40004400

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100c:	f000 f932 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001018:	2040      	movs	r0, #64	; 0x40
 800101a:	f000 fc81 	bl	8001920 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <TIM3_IRQHandler+0x10>)
 800102a:	f002 fa29 	bl	8003480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000008c 	.word	0x2000008c

08001038 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <USART1_IRQHandler+0x10>)
 800103e:	f003 fbdb 	bl	80047f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200000d8 	.word	0x200000d8

0800104c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <USART2_IRQHandler+0x10>)
 8001052:	f003 fbd1 	bl	80047f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000015c 	.word	0x2000015c

08001060 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	e00a      	b.n	8001088 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001072:	f3af 8000 	nop.w
 8001076:	4601      	mov	r1, r0
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	60ba      	str	r2, [r7, #8]
 800107e:	b2ca      	uxtb	r2, r1
 8001080:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3301      	adds	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	429a      	cmp	r2, r3
 800108e:	dbf0      	blt.n	8001072 <_read+0x12>
	}

return len;
 8001090:	687b      	ldr	r3, [r7, #4]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <_close>:
	}
	return len;
}

int _close(int file)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
	return -1;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010c2:	605a      	str	r2, [r3, #4]
	return 0;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <_isatty>:

int _isatty(int file)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
	return 1;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
	return 0;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800110c:	4a14      	ldr	r2, [pc, #80]	; (8001160 <_sbrk+0x5c>)
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <_sbrk+0x60>)
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d102      	bne.n	8001126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <_sbrk+0x64>)
 8001122:	4a12      	ldr	r2, [pc, #72]	; (800116c <_sbrk+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	429a      	cmp	r2, r3
 8001132:	d207      	bcs.n	8001144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001134:	f005 f89e 	bl	8006274 <__errno>
 8001138:	4603      	mov	r3, r0
 800113a:	220c      	movs	r2, #12
 800113c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001142:	e009      	b.n	8001158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	4a05      	ldr	r2, [pc, #20]	; (8001168 <_sbrk+0x64>)
 8001154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001156:	68fb      	ldr	r3, [r7, #12]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20003000 	.word	0x20003000
 8001164:	00000400 	.word	0x00000400
 8001168:	200006cc 	.word	0x200006cc
 800116c:	200008e8 	.word	0x200008e8

08001170 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <SystemInit+0x20>)
 8001176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800117a:	4a05      	ldr	r2, [pc, #20]	; (8001190 <SystemInit+0x20>)
 800117c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001180:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011cc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001198:	480d      	ldr	r0, [pc, #52]	; (80011d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800119a:	490e      	ldr	r1, [pc, #56]	; (80011d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800119c:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <LoopForever+0xe>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a0:	e002      	b.n	80011a8 <LoopCopyDataInit>

080011a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a6:	3304      	adds	r3, #4

080011a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ac:	d3f9      	bcc.n	80011a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80011b0:	4c0b      	ldr	r4, [pc, #44]	; (80011e0 <LoopForever+0x16>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b4:	e001      	b.n	80011ba <LoopFillZerobss>

080011b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b8:	3204      	adds	r2, #4

080011ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011bc:	d3fb      	bcc.n	80011b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011be:	f7ff ffd7 	bl	8001170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011c2:	f005 f85d 	bl	8006280 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011c6:	f7ff fbc5 	bl	8000954 <main>

080011ca <LoopForever>:

LoopForever:
    b LoopForever
 80011ca:	e7fe      	b.n	80011ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011cc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011d8:	080079a8 	.word	0x080079a8
  ldr r2, =_sbss
 80011dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011e0:	200008e8 	.word	0x200008e8

080011e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC1_2_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_Init+0x28>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a07      	ldr	r2, [pc, #28]	; (8001210 <HAL_Init+0x28>)
 80011f2:	f043 0310 	orr.w	r3, r3, #16
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 f94f 	bl	800149c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fe:	2000      	movs	r0, #0
 8001200:	f000 f808 	bl	8001214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001204:	f7ff fe0c 	bl	8000e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40022000 	.word	0x40022000

08001214 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_InitTick+0x54>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_InitTick+0x58>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f967 	bl	8001506 <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e00e      	b.n	8001260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d80a      	bhi.n	800125e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001250:	f000 f92f 	bl	80014b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001254:	4a06      	ldr	r2, [pc, #24]	; (8001270 <HAL_InitTick+0x5c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000000 	.word	0x20000000
 800126c:	20000008 	.word	0x20000008
 8001270:	20000004 	.word	0x20000004

08001274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_IncTick+0x20>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_IncTick+0x24>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a04      	ldr	r2, [pc, #16]	; (8001298 <HAL_IncTick+0x24>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008
 8001298:	200006d0 	.word	0x200006d0

0800129c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;  
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <HAL_GetTick+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	200006d0 	.word	0x200006d0

080012b4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012bc:	f7ff ffee 	bl	800129c <HAL_GetTick>
 80012c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012cc:	d005      	beq.n	80012da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_Delay+0x44>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4413      	add	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012da:	bf00      	nop
 80012dc:	f7ff ffde 	bl	800129c <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d8f7      	bhi.n	80012dc <HAL_Delay+0x28>
  {
  }
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000008 	.word	0x20000008

080012fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001318:	4013      	ands	r3, r2
 800131a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132e:	4a04      	ldr	r2, [pc, #16]	; (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	60d3      	str	r3, [r2, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <__NVIC_GetPriorityGrouping+0x18>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	f003 0307 	and.w	r3, r3, #7
}
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	2b00      	cmp	r3, #0
 8001370:	db0b      	blt.n	800138a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	f003 021f 	and.w	r2, r3, #31
 8001378:	4907      	ldr	r1, [pc, #28]	; (8001398 <__NVIC_EnableIRQ+0x38>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	2001      	movs	r0, #1
 8001382:	fa00 f202 	lsl.w	r2, r0, r2
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000e100 	.word	0xe000e100

0800139c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db0a      	blt.n	80013c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	490c      	ldr	r1, [pc, #48]	; (80013e8 <__NVIC_SetPriority+0x4c>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	0112      	lsls	r2, r2, #4
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	440b      	add	r3, r1
 80013c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c4:	e00a      	b.n	80013dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4908      	ldr	r1, [pc, #32]	; (80013ec <__NVIC_SetPriority+0x50>)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	3b04      	subs	r3, #4
 80013d4:	0112      	lsls	r2, r2, #4
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	440b      	add	r3, r1
 80013da:	761a      	strb	r2, [r3, #24]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000e100 	.word	0xe000e100
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	; 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f1c3 0307 	rsb	r3, r3, #7
 800140a:	2b04      	cmp	r3, #4
 800140c:	bf28      	it	cs
 800140e:	2304      	movcs	r3, #4
 8001410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3304      	adds	r3, #4
 8001416:	2b06      	cmp	r3, #6
 8001418:	d902      	bls.n	8001420 <NVIC_EncodePriority+0x30>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3b03      	subs	r3, #3
 800141e:	e000      	b.n	8001422 <NVIC_EncodePriority+0x32>
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	401a      	ands	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001438:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	43d9      	mvns	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	4313      	orrs	r3, r2
         );
}
 800144a:	4618      	mov	r0, r3
 800144c:	3724      	adds	r7, #36	; 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001468:	d301      	bcc.n	800146e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146a:	2301      	movs	r3, #1
 800146c:	e00f      	b.n	800148e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <SysTick_Config+0x40>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001476:	210f      	movs	r1, #15
 8001478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800147c:	f7ff ff8e 	bl	800139c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <SysTick_Config+0x40>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001486:	4b04      	ldr	r3, [pc, #16]	; (8001498 <SysTick_Config+0x40>)
 8001488:	2207      	movs	r2, #7
 800148a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	e000e010 	.word	0xe000e010

0800149c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff29 	bl	80012fc <__NVIC_SetPriorityGrouping>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c4:	f7ff ff3e 	bl	8001344 <__NVIC_GetPriorityGrouping>
 80014c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	6978      	ldr	r0, [r7, #20]
 80014d0:	f7ff ff8e 	bl	80013f0 <NVIC_EncodePriority>
 80014d4:	4602      	mov	r2, r0
 80014d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff5d 	bl	800139c <__NVIC_SetPriority>
}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff31 	bl	8001360 <__NVIC_EnableIRQ>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ffa2 	bl	8001458 <SysTick_Config>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800152c:	2b02      	cmp	r3, #2
 800152e:	d008      	beq.n	8001542 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2204      	movs	r2, #4
 8001534:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e020      	b.n	8001584 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 020e 	bic.w	r2, r2, #14
 8001550:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0201 	bic.w	r2, r2, #1
 8001560:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800156a:	2101      	movs	r1, #1
 800156c:	fa01 f202 	lsl.w	r2, r1, r2
 8001570:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d005      	beq.n	80015b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2204      	movs	r2, #4
 80015aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	e027      	b.n	8001602 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 020e 	bic.w	r2, r2, #14
 80015c0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0201 	bic.w	r2, r2, #1
 80015d0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015da:	2101      	movs	r1, #1
 80015dc:	fa01 f202 	lsl.w	r2, r1, r2
 80015e0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	4798      	blx	r3
    } 
  }
  return status;
 8001602:	7bfb      	ldrb	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800160c:	b480      	push	{r7}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161a:	e14e      	b.n	80018ba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	2101      	movs	r1, #1
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	4013      	ands	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 8140 	beq.w	80018b4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	2b01      	cmp	r3, #1
 800163e:	d005      	beq.n	800164c <HAL_GPIO_Init+0x40>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d130      	bne.n	80016ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001682:	2201      	movs	r2, #1
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	091b      	lsrs	r3, r3, #4
 8001698:	f003 0201 	and.w	r2, r3, #1
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d017      	beq.n	80016ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	2203      	movs	r2, #3
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d123      	bne.n	800173e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	08da      	lsrs	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3208      	adds	r2, #8
 80016fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001702:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	220f      	movs	r2, #15
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	691a      	ldr	r2, [r3, #16]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	08da      	lsrs	r2, r3, #3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3208      	adds	r2, #8
 8001738:	6939      	ldr	r1, [r7, #16]
 800173a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	2203      	movs	r2, #3
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0203 	and.w	r2, r3, #3
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 809a 	beq.w	80018b4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001780:	4b55      	ldr	r3, [pc, #340]	; (80018d8 <HAL_GPIO_Init+0x2cc>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a54      	ldr	r2, [pc, #336]	; (80018d8 <HAL_GPIO_Init+0x2cc>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b52      	ldr	r3, [pc, #328]	; (80018d8 <HAL_GPIO_Init+0x2cc>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001798:	4a50      	ldr	r2, [pc, #320]	; (80018dc <HAL_GPIO_Init+0x2d0>)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	089b      	lsrs	r3, r3, #2
 800179e:	3302      	adds	r3, #2
 80017a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	220f      	movs	r2, #15
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017c2:	d013      	beq.n	80017ec <HAL_GPIO_Init+0x1e0>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a46      	ldr	r2, [pc, #280]	; (80018e0 <HAL_GPIO_Init+0x2d4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d00d      	beq.n	80017e8 <HAL_GPIO_Init+0x1dc>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a45      	ldr	r2, [pc, #276]	; (80018e4 <HAL_GPIO_Init+0x2d8>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d007      	beq.n	80017e4 <HAL_GPIO_Init+0x1d8>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a44      	ldr	r2, [pc, #272]	; (80018e8 <HAL_GPIO_Init+0x2dc>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d101      	bne.n	80017e0 <HAL_GPIO_Init+0x1d4>
 80017dc:	2303      	movs	r3, #3
 80017de:	e006      	b.n	80017ee <HAL_GPIO_Init+0x1e2>
 80017e0:	2305      	movs	r3, #5
 80017e2:	e004      	b.n	80017ee <HAL_GPIO_Init+0x1e2>
 80017e4:	2302      	movs	r3, #2
 80017e6:	e002      	b.n	80017ee <HAL_GPIO_Init+0x1e2>
 80017e8:	2301      	movs	r3, #1
 80017ea:	e000      	b.n	80017ee <HAL_GPIO_Init+0x1e2>
 80017ec:	2300      	movs	r3, #0
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	f002 0203 	and.w	r2, r2, #3
 80017f4:	0092      	lsls	r2, r2, #2
 80017f6:	4093      	lsls	r3, r2
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017fe:	4937      	ldr	r1, [pc, #220]	; (80018dc <HAL_GPIO_Init+0x2d0>)
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	089b      	lsrs	r3, r3, #2
 8001804:	3302      	adds	r3, #2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800180c:	4b37      	ldr	r3, [pc, #220]	; (80018ec <HAL_GPIO_Init+0x2e0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001830:	4a2e      	ldr	r2, [pc, #184]	; (80018ec <HAL_GPIO_Init+0x2e0>)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001836:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <HAL_GPIO_Init+0x2e0>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800185a:	4a24      	ldr	r2, [pc, #144]	; (80018ec <HAL_GPIO_Init+0x2e0>)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001860:	4b22      	ldr	r3, [pc, #136]	; (80018ec <HAL_GPIO_Init+0x2e0>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001884:	4a19      	ldr	r2, [pc, #100]	; (80018ec <HAL_GPIO_Init+0x2e0>)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_GPIO_Init+0x2e0>)
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	43db      	mvns	r3, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018ae:	4a0f      	ldr	r2, [pc, #60]	; (80018ec <HAL_GPIO_Init+0x2e0>)
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3301      	adds	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	fa22 f303 	lsr.w	r3, r2, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f47f aea9 	bne.w	800161c <HAL_GPIO_Init+0x10>
  }
}
 80018ca:	bf00      	nop
 80018cc:	bf00      	nop
 80018ce:	371c      	adds	r7, #28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40010000 	.word	0x40010000
 80018e0:	48000400 	.word	0x48000400
 80018e4:	48000800 	.word	0x48000800
 80018e8:	48000c00 	.word	0x48000c00
 80018ec:	40010400 	.word	0x40010400

080018f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	807b      	strh	r3, [r7, #2]
 80018fc:	4613      	mov	r3, r2
 80018fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001900:	787b      	ldrb	r3, [r7, #1]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001906:	887a      	ldrh	r2, [r7, #2]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800190c:	e002      	b.n	8001914 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800190e:	887a      	ldrh	r2, [r7, #2]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800192c:	695a      	ldr	r2, [r3, #20]
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	4013      	ands	r3, r2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d006      	beq.n	8001944 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001936:	4a05      	ldr	r2, [pc, #20]	; (800194c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	4618      	mov	r0, r3
 8001940:	f000 f806 	bl	8001950 <HAL_GPIO_EXTI_Callback>
  }
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40010400 	.word	0x40010400

08001950 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800196e:	af00      	add	r7, sp, #0
 8001970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001974:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001978:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800197a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	f001 b823 	b.w	80029d4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800198e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001992:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 817d 	beq.w	8001c9e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019a4:	4bbc      	ldr	r3, [pc, #752]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d00c      	beq.n	80019ca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019b0:	4bb9      	ldr	r3, [pc, #740]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 030c 	and.w	r3, r3, #12
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d15c      	bne.n	8001a76 <HAL_RCC_OscConfig+0x10e>
 80019bc:	4bb6      	ldr	r3, [pc, #728]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c8:	d155      	bne.n	8001a76 <HAL_RCC_OscConfig+0x10e>
 80019ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ce:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80019d6:	fa93 f3a3 	rbit	r3, r3
 80019da:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019de:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e2:	fab3 f383 	clz	r3, r3
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	095b      	lsrs	r3, r3, #5
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d102      	bne.n	80019fc <HAL_RCC_OscConfig+0x94>
 80019f6:	4ba8      	ldr	r3, [pc, #672]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	e015      	b.n	8001a28 <HAL_RCC_OscConfig+0xc0>
 80019fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a00:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a04:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a08:	fa93 f3a3 	rbit	r3, r3
 8001a0c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001a10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a14:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a18:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001a24:	4b9c      	ldr	r3, [pc, #624]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a2c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001a30:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001a34:	fa92 f2a2 	rbit	r2, r2
 8001a38:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001a3c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001a40:	fab2 f282 	clz	r2, r2
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	f042 0220 	orr.w	r2, r2, #32
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	f002 021f 	and.w	r2, r2, #31
 8001a50:	2101      	movs	r1, #1
 8001a52:	fa01 f202 	lsl.w	r2, r1, r2
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 811f 	beq.w	8001c9c <HAL_RCC_OscConfig+0x334>
 8001a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f040 8116 	bne.w	8001c9c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	f000 bfaf 	b.w	80029d4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a86:	d106      	bne.n	8001a96 <HAL_RCC_OscConfig+0x12e>
 8001a88:	4b83      	ldr	r3, [pc, #524]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a82      	ldr	r2, [pc, #520]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 8001a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	e036      	b.n	8001b04 <HAL_RCC_OscConfig+0x19c>
 8001a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x158>
 8001aa6:	4b7c      	ldr	r3, [pc, #496]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a7b      	ldr	r2, [pc, #492]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 8001aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	4b79      	ldr	r3, [pc, #484]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a78      	ldr	r2, [pc, #480]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 8001ab8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e021      	b.n	8001b04 <HAL_RCC_OscConfig+0x19c>
 8001ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad0:	d10c      	bne.n	8001aec <HAL_RCC_OscConfig+0x184>
 8001ad2:	4b71      	ldr	r3, [pc, #452]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a70      	ldr	r2, [pc, #448]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 8001ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	4b6e      	ldr	r3, [pc, #440]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a6d      	ldr	r2, [pc, #436]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 8001ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	e00b      	b.n	8001b04 <HAL_RCC_OscConfig+0x19c>
 8001aec:	4b6a      	ldr	r3, [pc, #424]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a69      	ldr	r2, [pc, #420]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 8001af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	4b67      	ldr	r3, [pc, #412]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a66      	ldr	r2, [pc, #408]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 8001afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b02:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b04:	4b64      	ldr	r3, [pc, #400]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	f023 020f 	bic.w	r2, r3, #15
 8001b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	495f      	ldr	r1, [pc, #380]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d059      	beq.n	8001be2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2e:	f7ff fbb5 	bl	800129c <HAL_GetTick>
 8001b32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b38:	f7ff fbb0 	bl	800129c <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b64      	cmp	r3, #100	; 0x64
 8001b46:	d902      	bls.n	8001b4e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	f000 bf43 	b.w	80029d4 <HAL_RCC_OscConfig+0x106c>
 8001b4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b52:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b56:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001b5a:	fa93 f3a3 	rbit	r3, r3
 8001b5e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001b62:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	fab3 f383 	clz	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	095b      	lsrs	r3, r3, #5
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d102      	bne.n	8001b80 <HAL_RCC_OscConfig+0x218>
 8001b7a:	4b47      	ldr	r3, [pc, #284]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	e015      	b.n	8001bac <HAL_RCC_OscConfig+0x244>
 8001b80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b84:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001b8c:	fa93 f3a3 	rbit	r3, r3
 8001b90:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001b94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b98:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001b9c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001ba0:	fa93 f3a3 	rbit	r3, r3
 8001ba4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001ba8:	4b3b      	ldr	r3, [pc, #236]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bb0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001bb4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001bb8:	fa92 f2a2 	rbit	r2, r2
 8001bbc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001bc0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001bc4:	fab2 f282 	clz	r2, r2
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	f042 0220 	orr.w	r2, r2, #32
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	f002 021f 	and.w	r2, r2, #31
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0ab      	beq.n	8001b38 <HAL_RCC_OscConfig+0x1d0>
 8001be0:	e05d      	b.n	8001c9e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be2:	f7ff fb5b 	bl	800129c <HAL_GetTick>
 8001be6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff fb56 	bl	800129c <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b64      	cmp	r3, #100	; 0x64
 8001bfa:	d902      	bls.n	8001c02 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	f000 bee9 	b.w	80029d4 <HAL_RCC_OscConfig+0x106c>
 8001c02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c06:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001c0e:	fa93 f3a3 	rbit	r3, r3
 8001c12:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001c16:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	095b      	lsrs	r3, r3, #5
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d102      	bne.n	8001c34 <HAL_RCC_OscConfig+0x2cc>
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	e015      	b.n	8001c60 <HAL_RCC_OscConfig+0x2f8>
 8001c34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c38:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c4c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c50:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001c54:	fa93 f3a3 	rbit	r3, r3
 8001c58:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_RCC_OscConfig+0x330>)
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c64:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001c68:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001c6c:	fa92 f2a2 	rbit	r2, r2
 8001c70:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001c74:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001c78:	fab2 f282 	clz	r2, r2
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	f042 0220 	orr.w	r2, r2, #32
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	f002 021f 	and.w	r2, r2, #31
 8001c88:	2101      	movs	r1, #1
 8001c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1ab      	bne.n	8001bec <HAL_RCC_OscConfig+0x284>
 8001c94:	e003      	b.n	8001c9e <HAL_RCC_OscConfig+0x336>
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 817d 	beq.w	8001fae <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cb4:	4ba6      	ldr	r3, [pc, #664]	; (8001f50 <HAL_RCC_OscConfig+0x5e8>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00b      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cc0:	4ba3      	ldr	r3, [pc, #652]	; (8001f50 <HAL_RCC_OscConfig+0x5e8>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d172      	bne.n	8001db2 <HAL_RCC_OscConfig+0x44a>
 8001ccc:	4ba0      	ldr	r3, [pc, #640]	; (8001f50 <HAL_RCC_OscConfig+0x5e8>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d16c      	bne.n	8001db2 <HAL_RCC_OscConfig+0x44a>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ce2:	fa93 f3a3 	rbit	r3, r3
 8001ce6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001cea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	095b      	lsrs	r3, r3, #5
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d102      	bne.n	8001d08 <HAL_RCC_OscConfig+0x3a0>
 8001d02:	4b93      	ldr	r3, [pc, #588]	; (8001f50 <HAL_RCC_OscConfig+0x5e8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	e013      	b.n	8001d30 <HAL_RCC_OscConfig+0x3c8>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001d20:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001d24:	fa93 f3a3 	rbit	r3, r3
 8001d28:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001d2c:	4b88      	ldr	r3, [pc, #544]	; (8001f50 <HAL_RCC_OscConfig+0x5e8>)
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	2202      	movs	r2, #2
 8001d32:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001d36:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001d3a:	fa92 f2a2 	rbit	r2, r2
 8001d3e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001d42:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001d46:	fab2 f282 	clz	r2, r2
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	f042 0220 	orr.w	r2, r2, #32
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	f002 021f 	and.w	r2, r2, #31
 8001d56:	2101      	movs	r1, #1
 8001d58:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00a      	beq.n	8001d78 <HAL_RCC_OscConfig+0x410>
 8001d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d002      	beq.n	8001d78 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	f000 be2e 	b.w	80029d4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d78:	4b75      	ldr	r3, [pc, #468]	; (8001f50 <HAL_RCC_OscConfig+0x5e8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	21f8      	movs	r1, #248	; 0xf8
 8001d8e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001d96:	fa91 f1a1 	rbit	r1, r1
 8001d9a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001d9e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001da2:	fab1 f181 	clz	r1, r1
 8001da6:	b2c9      	uxtb	r1, r1
 8001da8:	408b      	lsls	r3, r1
 8001daa:	4969      	ldr	r1, [pc, #420]	; (8001f50 <HAL_RCC_OscConfig+0x5e8>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db0:	e0fd      	b.n	8001fae <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 8088 	beq.w	8001ed4 <HAL_RCC_OscConfig+0x56c>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001dce:	fa93 f3a3 	rbit	r3, r3
 8001dd2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001dd6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dda:	fab3 f383 	clz	r3, r3
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001de4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	461a      	mov	r2, r3
 8001dec:	2301      	movs	r3, #1
 8001dee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff fa54 	bl	800129c <HAL_GetTick>
 8001df4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df8:	e00a      	b.n	8001e10 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfa:	f7ff fa4f 	bl	800129c <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d902      	bls.n	8001e10 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	f000 bde2 	b.w	80029d4 <HAL_RCC_OscConfig+0x106c>
 8001e10:	2302      	movs	r3, #2
 8001e12:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e16:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001e22:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e26:	fab3 f383 	clz	r3, r3
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	095b      	lsrs	r3, r3, #5
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d102      	bne.n	8001e40 <HAL_RCC_OscConfig+0x4d8>
 8001e3a:	4b45      	ldr	r3, [pc, #276]	; (8001f50 <HAL_RCC_OscConfig+0x5e8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	e013      	b.n	8001e68 <HAL_RCC_OscConfig+0x500>
 8001e40:	2302      	movs	r3, #2
 8001e42:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e52:	2302      	movs	r3, #2
 8001e54:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e58:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001e5c:	fa93 f3a3 	rbit	r3, r3
 8001e60:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e64:	4b3a      	ldr	r3, [pc, #232]	; (8001f50 <HAL_RCC_OscConfig+0x5e8>)
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	2202      	movs	r2, #2
 8001e6a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001e6e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001e72:	fa92 f2a2 	rbit	r2, r2
 8001e76:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001e7a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e7e:	fab2 f282 	clz	r2, r2
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	f042 0220 	orr.w	r2, r2, #32
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	f002 021f 	and.w	r2, r2, #31
 8001e8e:	2101      	movs	r1, #1
 8001e90:	fa01 f202 	lsl.w	r2, r1, r2
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0af      	beq.n	8001dfa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9a:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <HAL_RCC_OscConfig+0x5e8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	21f8      	movs	r1, #248	; 0xf8
 8001eb0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001eb8:	fa91 f1a1 	rbit	r1, r1
 8001ebc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001ec0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001ec4:	fab1 f181 	clz	r1, r1
 8001ec8:	b2c9      	uxtb	r1, r1
 8001eca:	408b      	lsls	r3, r1
 8001ecc:	4920      	ldr	r1, [pc, #128]	; (8001f50 <HAL_RCC_OscConfig+0x5e8>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
 8001ed2:	e06c      	b.n	8001fae <HAL_RCC_OscConfig+0x646>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001ee6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eea:	fab3 f383 	clz	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ef4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	461a      	mov	r2, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff f9cc 	bl	800129c <HAL_GetTick>
 8001f04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f08:	e00a      	b.n	8001f20 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0a:	f7ff f9c7 	bl	800129c <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d902      	bls.n	8001f20 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	f000 bd5a 	b.w	80029d4 <HAL_RCC_OscConfig+0x106c>
 8001f20:	2302      	movs	r3, #2
 8001f22:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001f32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	095b      	lsrs	r3, r3, #5
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d104      	bne.n	8001f54 <HAL_RCC_OscConfig+0x5ec>
 8001f4a:	4b01      	ldr	r3, [pc, #4]	; (8001f50 <HAL_RCC_OscConfig+0x5e8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	e015      	b.n	8001f7c <HAL_RCC_OscConfig+0x614>
 8001f50:	40021000 	.word	0x40021000
 8001f54:	2302      	movs	r3, #2
 8001f56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f66:	2302      	movs	r3, #2
 8001f68:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f70:	fa93 f3a3 	rbit	r3, r3
 8001f74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001f78:	4bc8      	ldr	r3, [pc, #800]	; (800229c <HAL_RCC_OscConfig+0x934>)
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001f82:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f86:	fa92 f2a2 	rbit	r2, r2
 8001f8a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001f8e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001f92:	fab2 f282 	clz	r2, r2
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	f042 0220 	orr.w	r2, r2, #32
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	f002 021f 	and.w	r2, r2, #31
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1ad      	bne.n	8001f0a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 8110 	beq.w	80021e4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d079      	beq.n	80020c8 <HAL_RCC_OscConfig+0x760>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fea:	fab3 f383 	clz	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4bab      	ldr	r3, [pc, #684]	; (80022a0 <HAL_RCC_OscConfig+0x938>)
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffe:	f7ff f94d 	bl	800129c <HAL_GetTick>
 8002002:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002006:	e00a      	b.n	800201e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002008:	f7ff f948 	bl	800129c <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d902      	bls.n	800201e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	f000 bcdb 	b.w	80029d4 <HAL_RCC_OscConfig+0x106c>
 800201e:	2302      	movs	r3, #2
 8002020:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002034:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002038:	2202      	movs	r2, #2
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002040:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	fa93 f2a3 	rbit	r2, r3
 800204a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002058:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800205c:	2202      	movs	r2, #2
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	fa93 f2a3 	rbit	r2, r3
 800206e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002072:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002076:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002078:	4b88      	ldr	r3, [pc, #544]	; (800229c <HAL_RCC_OscConfig+0x934>)
 800207a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800207c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002080:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002084:	2102      	movs	r1, #2
 8002086:	6019      	str	r1, [r3, #0]
 8002088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	fa93 f1a3 	rbit	r1, r3
 8002096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800209e:	6019      	str	r1, [r3, #0]
  return result;
 80020a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	fab3 f383 	clz	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	f003 031f 	and.w	r3, r3, #31
 80020ba:	2101      	movs	r1, #1
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0a0      	beq.n	8002008 <HAL_RCC_OscConfig+0x6a0>
 80020c6:	e08d      	b.n	80021e4 <HAL_RCC_OscConfig+0x87c>
 80020c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020cc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020d0:	2201      	movs	r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	fa93 f2a3 	rbit	r2, r3
 80020e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80020ea:	601a      	str	r2, [r3, #0]
  return result;
 80020ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80020f4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f6:	fab3 f383 	clz	r3, r3
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	461a      	mov	r2, r3
 80020fe:	4b68      	ldr	r3, [pc, #416]	; (80022a0 <HAL_RCC_OscConfig+0x938>)
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	461a      	mov	r2, r3
 8002106:	2300      	movs	r3, #0
 8002108:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210a:	f7ff f8c7 	bl	800129c <HAL_GetTick>
 800210e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002112:	e00a      	b.n	800212a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002114:	f7ff f8c2 	bl	800129c <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d902      	bls.n	800212a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	f000 bc55 	b.w	80029d4 <HAL_RCC_OscConfig+0x106c>
 800212a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002132:	2202      	movs	r2, #2
 8002134:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	fa93 f2a3 	rbit	r2, r3
 8002144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002148:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002152:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002156:	2202      	movs	r2, #2
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	fa93 f2a3 	rbit	r2, r3
 8002168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002176:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800217a:	2202      	movs	r2, #2
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002182:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	fa93 f2a3 	rbit	r2, r3
 800218c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002190:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002194:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002196:	4b41      	ldr	r3, [pc, #260]	; (800229c <HAL_RCC_OscConfig+0x934>)
 8002198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800219a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80021a2:	2102      	movs	r1, #2
 80021a4:	6019      	str	r1, [r3, #0]
 80021a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	fa93 f1a3 	rbit	r1, r3
 80021b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80021bc:	6019      	str	r1, [r3, #0]
  return result;
 80021be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	fab3 f383 	clz	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	2101      	movs	r1, #1
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	4013      	ands	r3, r2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d197      	bne.n	8002114 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 81a1 	beq.w	800253c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002200:	4b26      	ldr	r3, [pc, #152]	; (800229c <HAL_RCC_OscConfig+0x934>)
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d116      	bne.n	800223a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220c:	4b23      	ldr	r3, [pc, #140]	; (800229c <HAL_RCC_OscConfig+0x934>)
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	4a22      	ldr	r2, [pc, #136]	; (800229c <HAL_RCC_OscConfig+0x934>)
 8002212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002216:	61d3      	str	r3, [r2, #28]
 8002218:	4b20      	ldr	r3, [pc, #128]	; (800229c <HAL_RCC_OscConfig+0x934>)
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002224:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002232:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002234:	2301      	movs	r3, #1
 8002236:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223a:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <HAL_RCC_OscConfig+0x93c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d11a      	bne.n	800227c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002246:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <HAL_RCC_OscConfig+0x93c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a16      	ldr	r2, [pc, #88]	; (80022a4 <HAL_RCC_OscConfig+0x93c>)
 800224c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002250:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002252:	f7ff f823 	bl	800129c <HAL_GetTick>
 8002256:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225a:	e009      	b.n	8002270 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225c:	f7ff f81e 	bl	800129c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b64      	cmp	r3, #100	; 0x64
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e3b1      	b.n	80029d4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <HAL_RCC_OscConfig+0x93c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0ef      	beq.n	800225c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800227c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002280:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d10d      	bne.n	80022a8 <HAL_RCC_OscConfig+0x940>
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <HAL_RCC_OscConfig+0x934>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	4a02      	ldr	r2, [pc, #8]	; (800229c <HAL_RCC_OscConfig+0x934>)
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	6213      	str	r3, [r2, #32]
 8002298:	e03c      	b.n	8002314 <HAL_RCC_OscConfig+0x9ac>
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
 80022a0:	10908120 	.word	0x10908120
 80022a4:	40007000 	.word	0x40007000
 80022a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10c      	bne.n	80022d2 <HAL_RCC_OscConfig+0x96a>
 80022b8:	4bc1      	ldr	r3, [pc, #772]	; (80025c0 <HAL_RCC_OscConfig+0xc58>)
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	4ac0      	ldr	r2, [pc, #768]	; (80025c0 <HAL_RCC_OscConfig+0xc58>)
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	6213      	str	r3, [r2, #32]
 80022c4:	4bbe      	ldr	r3, [pc, #760]	; (80025c0 <HAL_RCC_OscConfig+0xc58>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4abd      	ldr	r2, [pc, #756]	; (80025c0 <HAL_RCC_OscConfig+0xc58>)
 80022ca:	f023 0304 	bic.w	r3, r3, #4
 80022ce:	6213      	str	r3, [r2, #32]
 80022d0:	e020      	b.n	8002314 <HAL_RCC_OscConfig+0x9ac>
 80022d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b05      	cmp	r3, #5
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x994>
 80022e2:	4bb7      	ldr	r3, [pc, #732]	; (80025c0 <HAL_RCC_OscConfig+0xc58>)
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	4ab6      	ldr	r2, [pc, #728]	; (80025c0 <HAL_RCC_OscConfig+0xc58>)
 80022e8:	f043 0304 	orr.w	r3, r3, #4
 80022ec:	6213      	str	r3, [r2, #32]
 80022ee:	4bb4      	ldr	r3, [pc, #720]	; (80025c0 <HAL_RCC_OscConfig+0xc58>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	4ab3      	ldr	r2, [pc, #716]	; (80025c0 <HAL_RCC_OscConfig+0xc58>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6213      	str	r3, [r2, #32]
 80022fa:	e00b      	b.n	8002314 <HAL_RCC_OscConfig+0x9ac>
 80022fc:	4bb0      	ldr	r3, [pc, #704]	; (80025c0 <HAL_RCC_OscConfig+0xc58>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	4aaf      	ldr	r2, [pc, #700]	; (80025c0 <HAL_RCC_OscConfig+0xc58>)
 8002302:	f023 0301 	bic.w	r3, r3, #1
 8002306:	6213      	str	r3, [r2, #32]
 8002308:	4bad      	ldr	r3, [pc, #692]	; (80025c0 <HAL_RCC_OscConfig+0xc58>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4aac      	ldr	r2, [pc, #688]	; (80025c0 <HAL_RCC_OscConfig+0xc58>)
 800230e:	f023 0304 	bic.w	r3, r3, #4
 8002312:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002318:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 8081 	beq.w	8002428 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002326:	f7fe ffb9 	bl	800129c <HAL_GetTick>
 800232a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232e:	e00b      	b.n	8002348 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002330:	f7fe ffb4 	bl	800129c <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002340:	4293      	cmp	r3, r2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e345      	b.n	80029d4 <HAL_RCC_OscConfig+0x106c>
 8002348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002350:	2202      	movs	r2, #2
 8002352:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002358:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	fa93 f2a3 	rbit	r2, r3
 8002362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002366:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002370:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002374:	2202      	movs	r2, #2
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	fa93 f2a3 	rbit	r2, r3
 8002386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800238e:	601a      	str	r2, [r3, #0]
  return result;
 8002390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002394:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002398:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f043 0302 	orr.w	r3, r3, #2
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d102      	bne.n	80023b4 <HAL_RCC_OscConfig+0xa4c>
 80023ae:	4b84      	ldr	r3, [pc, #528]	; (80025c0 <HAL_RCC_OscConfig+0xc58>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	e013      	b.n	80023dc <HAL_RCC_OscConfig+0xa74>
 80023b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80023bc:	2202      	movs	r2, #2
 80023be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	fa93 f2a3 	rbit	r2, r3
 80023ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	4b79      	ldr	r3, [pc, #484]	; (80025c0 <HAL_RCC_OscConfig+0xc58>)
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023e0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80023e4:	2102      	movs	r1, #2
 80023e6:	6011      	str	r1, [r2, #0]
 80023e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80023f0:	6812      	ldr	r2, [r2, #0]
 80023f2:	fa92 f1a2 	rbit	r1, r2
 80023f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023fa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80023fe:	6011      	str	r1, [r2, #0]
  return result;
 8002400:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002404:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002408:	6812      	ldr	r2, [r2, #0]
 800240a:	fab2 f282 	clz	r2, r2
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	f002 021f 	and.w	r2, r2, #31
 800241a:	2101      	movs	r1, #1
 800241c:	fa01 f202 	lsl.w	r2, r1, r2
 8002420:	4013      	ands	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d084      	beq.n	8002330 <HAL_RCC_OscConfig+0x9c8>
 8002426:	e07f      	b.n	8002528 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002428:	f7fe ff38 	bl	800129c <HAL_GetTick>
 800242c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002430:	e00b      	b.n	800244a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002432:	f7fe ff33 	bl	800129c <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e2c4      	b.n	80029d4 <HAL_RCC_OscConfig+0x106c>
 800244a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002452:	2202      	movs	r2, #2
 8002454:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	fa93 f2a3 	rbit	r2, r3
 8002464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002468:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002472:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002476:	2202      	movs	r2, #2
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	fa93 f2a3 	rbit	r2, r3
 8002488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002490:	601a      	str	r2, [r3, #0]
  return result;
 8002492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002496:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800249a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	f043 0302 	orr.w	r3, r3, #2
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d102      	bne.n	80024b6 <HAL_RCC_OscConfig+0xb4e>
 80024b0:	4b43      	ldr	r3, [pc, #268]	; (80025c0 <HAL_RCC_OscConfig+0xc58>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	e013      	b.n	80024de <HAL_RCC_OscConfig+0xb76>
 80024b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80024be:	2202      	movs	r2, #2
 80024c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	fa93 f2a3 	rbit	r2, r3
 80024d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	4b39      	ldr	r3, [pc, #228]	; (80025c0 <HAL_RCC_OscConfig+0xc58>)
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024e2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80024e6:	2102      	movs	r1, #2
 80024e8:	6011      	str	r1, [r2, #0]
 80024ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024ee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	fa92 f1a2 	rbit	r1, r2
 80024f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024fc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002500:	6011      	str	r1, [r2, #0]
  return result;
 8002502:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002506:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	fab2 f282 	clz	r2, r2
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	f002 021f 	and.w	r2, r2, #31
 800251c:	2101      	movs	r1, #1
 800251e:	fa01 f202 	lsl.w	r2, r1, r2
 8002522:	4013      	ands	r3, r2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d184      	bne.n	8002432 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002528:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800252c:	2b01      	cmp	r3, #1
 800252e:	d105      	bne.n	800253c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002530:	4b23      	ldr	r3, [pc, #140]	; (80025c0 <HAL_RCC_OscConfig+0xc58>)
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	4a22      	ldr	r2, [pc, #136]	; (80025c0 <HAL_RCC_OscConfig+0xc58>)
 8002536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800253a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800253c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002540:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 8242 	beq.w	80029d2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800254e:	4b1c      	ldr	r3, [pc, #112]	; (80025c0 <HAL_RCC_OscConfig+0xc58>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b08      	cmp	r3, #8
 8002558:	f000 8213 	beq.w	8002982 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800255c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002560:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b02      	cmp	r3, #2
 800256a:	f040 8162 	bne.w	8002832 <HAL_RCC_OscConfig+0xeca>
 800256e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002572:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002576:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800257a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002580:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	fa93 f2a3 	rbit	r2, r3
 800258a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002592:	601a      	str	r2, [r3, #0]
  return result;
 8002594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002598:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800259c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	461a      	mov	r2, r3
 80025b0:	2300      	movs	r3, #0
 80025b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b4:	f7fe fe72 	bl	800129c <HAL_GetTick>
 80025b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025bc:	e00c      	b.n	80025d8 <HAL_RCC_OscConfig+0xc70>
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c4:	f7fe fe6a 	bl	800129c <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e1fd      	b.n	80029d4 <HAL_RCC_OscConfig+0x106c>
 80025d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025dc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80025e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	fa93 f2a3 	rbit	r2, r3
 80025f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80025fc:	601a      	str	r2, [r3, #0]
  return result;
 80025fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002602:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002606:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002608:	fab3 f383 	clz	r3, r3
 800260c:	b2db      	uxtb	r3, r3
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	b2db      	uxtb	r3, r3
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b01      	cmp	r3, #1
 800261a:	d102      	bne.n	8002622 <HAL_RCC_OscConfig+0xcba>
 800261c:	4bb0      	ldr	r3, [pc, #704]	; (80028e0 <HAL_RCC_OscConfig+0xf78>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	e027      	b.n	8002672 <HAL_RCC_OscConfig+0xd0a>
 8002622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002626:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800262a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800262e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002634:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	fa93 f2a3 	rbit	r2, r3
 800263e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002642:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002650:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	fa93 f2a3 	rbit	r2, r3
 8002664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002668:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	4b9c      	ldr	r3, [pc, #624]	; (80028e0 <HAL_RCC_OscConfig+0xf78>)
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002676:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800267a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800267e:	6011      	str	r1, [r2, #0]
 8002680:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002684:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	fa92 f1a2 	rbit	r1, r2
 800268e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002692:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002696:	6011      	str	r1, [r2, #0]
  return result;
 8002698:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800269c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	fab2 f282 	clz	r2, r2
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	f042 0220 	orr.w	r2, r2, #32
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	f002 021f 	and.w	r2, r2, #31
 80026b2:	2101      	movs	r1, #1
 80026b4:	fa01 f202 	lsl.w	r2, r1, r2
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d182      	bne.n	80025c4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026be:	4b88      	ldr	r3, [pc, #544]	; (80028e0 <HAL_RCC_OscConfig+0xf78>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80026d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	430b      	orrs	r3, r1
 80026e0:	497f      	ldr	r1, [pc, #508]	; (80028e0 <HAL_RCC_OscConfig+0xf78>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	604b      	str	r3, [r1, #4]
 80026e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ea:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80026ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	fa93 f2a3 	rbit	r2, r3
 8002702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002706:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800270a:	601a      	str	r2, [r3, #0]
  return result;
 800270c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002710:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002714:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002716:	fab3 f383 	clz	r3, r3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002720:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	461a      	mov	r2, r3
 8002728:	2301      	movs	r3, #1
 800272a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7fe fdb6 	bl	800129c <HAL_GetTick>
 8002730:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002734:	e009      	b.n	800274a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002736:	f7fe fdb1 	bl	800129c <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e144      	b.n	80029d4 <HAL_RCC_OscConfig+0x106c>
 800274a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002752:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002756:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	fa93 f2a3 	rbit	r2, r3
 8002766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800276e:	601a      	str	r2, [r3, #0]
  return result;
 8002770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002774:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002778:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	095b      	lsrs	r3, r3, #5
 8002782:	b2db      	uxtb	r3, r3
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b01      	cmp	r3, #1
 800278c:	d102      	bne.n	8002794 <HAL_RCC_OscConfig+0xe2c>
 800278e:	4b54      	ldr	r3, [pc, #336]	; (80028e0 <HAL_RCC_OscConfig+0xf78>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	e027      	b.n	80027e4 <HAL_RCC_OscConfig+0xe7c>
 8002794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002798:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800279c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	fa93 f2a3 	rbit	r2, r3
 80027b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027be:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80027c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027cc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	fa93 f2a3 	rbit	r2, r3
 80027d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027da:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	4b3f      	ldr	r3, [pc, #252]	; (80028e0 <HAL_RCC_OscConfig+0xf78>)
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027e8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80027ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027f0:	6011      	str	r1, [r2, #0]
 80027f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027f6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	fa92 f1a2 	rbit	r1, r2
 8002800:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002804:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002808:	6011      	str	r1, [r2, #0]
  return result;
 800280a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800280e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	fab2 f282 	clz	r2, r2
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	f042 0220 	orr.w	r2, r2, #32
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	f002 021f 	and.w	r2, r2, #31
 8002824:	2101      	movs	r1, #1
 8002826:	fa01 f202 	lsl.w	r2, r1, r2
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d082      	beq.n	8002736 <HAL_RCC_OscConfig+0xdce>
 8002830:	e0cf      	b.n	80029d2 <HAL_RCC_OscConfig+0x106a>
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800283a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800283e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002844:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	fa93 f2a3 	rbit	r2, r3
 800284e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002852:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002856:	601a      	str	r2, [r3, #0]
  return result;
 8002858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002860:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800286c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	461a      	mov	r2, r3
 8002874:	2300      	movs	r3, #0
 8002876:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7fe fd10 	bl	800129c <HAL_GetTick>
 800287c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002880:	e009      	b.n	8002896 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002882:	f7fe fd0b 	bl	800129c <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e09e      	b.n	80029d4 <HAL_RCC_OscConfig+0x106c>
 8002896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800289e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	fa93 f2a3 	rbit	r2, r3
 80028b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80028ba:	601a      	str	r2, [r3, #0]
  return result;
 80028bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80028c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c6:	fab3 f383 	clz	r3, r3
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	095b      	lsrs	r3, r3, #5
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d104      	bne.n	80028e4 <HAL_RCC_OscConfig+0xf7c>
 80028da:	4b01      	ldr	r3, [pc, #4]	; (80028e0 <HAL_RCC_OscConfig+0xf78>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	e029      	b.n	8002934 <HAL_RCC_OscConfig+0xfcc>
 80028e0:	40021000 	.word	0x40021000
 80028e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80028ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	fa93 f2a3 	rbit	r2, r3
 8002900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002904:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002912:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	fa93 f2a3 	rbit	r2, r3
 8002926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	4b2b      	ldr	r3, [pc, #172]	; (80029e0 <HAL_RCC_OscConfig+0x1078>)
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002938:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800293c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002940:	6011      	str	r1, [r2, #0]
 8002942:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002946:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	fa92 f1a2 	rbit	r1, r2
 8002950:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002954:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002958:	6011      	str	r1, [r2, #0]
  return result;
 800295a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800295e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	fab2 f282 	clz	r2, r2
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	f042 0220 	orr.w	r2, r2, #32
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	f002 021f 	and.w	r2, r2, #31
 8002974:	2101      	movs	r1, #1
 8002976:	fa01 f202 	lsl.w	r2, r1, r2
 800297a:	4013      	ands	r3, r2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d180      	bne.n	8002882 <HAL_RCC_OscConfig+0xf1a>
 8002980:	e027      	b.n	80029d2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002986:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e01e      	b.n	80029d4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_RCC_OscConfig+0x1078>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800299e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80029a2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d10b      	bne.n	80029ce <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80029b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80029ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000

080029e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b09e      	sub	sp, #120	; 0x78
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e162      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029fc:	4b90      	ldr	r3, [pc, #576]	; (8002c40 <HAL_RCC_ClockConfig+0x25c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d910      	bls.n	8002a2c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b8d      	ldr	r3, [pc, #564]	; (8002c40 <HAL_RCC_ClockConfig+0x25c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 0207 	bic.w	r2, r3, #7
 8002a12:	498b      	ldr	r1, [pc, #556]	; (8002c40 <HAL_RCC_ClockConfig+0x25c>)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b89      	ldr	r3, [pc, #548]	; (8002c40 <HAL_RCC_ClockConfig+0x25c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e14a      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a38:	4b82      	ldr	r3, [pc, #520]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	497f      	ldr	r1, [pc, #508]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 80dc 	beq.w	8002c10 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d13c      	bne.n	8002ada <HAL_RCC_ClockConfig+0xf6>
 8002a60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a64:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a68:	fa93 f3a3 	rbit	r3, r3
 8002a6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d102      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xa6>
 8002a84:	4b6f      	ldr	r3, [pc, #444]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	e00f      	b.n	8002aaa <HAL_RCC_ClockConfig+0xc6>
 8002a8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	667b      	str	r3, [r7, #100]	; 0x64
 8002a98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a9c:	663b      	str	r3, [r7, #96]	; 0x60
 8002a9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aa0:	fa93 f3a3 	rbit	r3, r3
 8002aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002aa6:	4b67      	ldr	r3, [pc, #412]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aae:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ab0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ab2:	fa92 f2a2 	rbit	r2, r2
 8002ab6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002ab8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002aba:	fab2 f282 	clz	r2, r2
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	f042 0220 	orr.w	r2, r2, #32
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	f002 021f 	and.w	r2, r2, #31
 8002aca:	2101      	movs	r1, #1
 8002acc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d17b      	bne.n	8002bce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e0f3      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d13c      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x178>
 8002ae2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ae6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af2:	fab3 f383 	clz	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	095b      	lsrs	r3, r3, #5
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d102      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x128>
 8002b06:	4b4f      	ldr	r3, [pc, #316]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	e00f      	b.n	8002b2c <HAL_RCC_ClockConfig+0x148>
 8002b0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	647b      	str	r3, [r7, #68]	; 0x44
 8002b1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b1e:	643b      	str	r3, [r7, #64]	; 0x40
 8002b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b28:	4b46      	ldr	r3, [pc, #280]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b30:	63ba      	str	r2, [r7, #56]	; 0x38
 8002b32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b34:	fa92 f2a2 	rbit	r2, r2
 8002b38:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b3c:	fab2 f282 	clz	r2, r2
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	f042 0220 	orr.w	r2, r2, #32
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	f002 021f 	and.w	r2, r2, #31
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d13a      	bne.n	8002bce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0b2      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x2de>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	fa93 f3a3 	rbit	r3, r3
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	095b      	lsrs	r3, r3, #5
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d102      	bne.n	8002b84 <HAL_RCC_ClockConfig+0x1a0>
 8002b7e:	4b31      	ldr	r3, [pc, #196]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	e00d      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1bc>
 8002b84:	2302      	movs	r3, #2
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b90:	2302      	movs	r3, #2
 8002b92:	623b      	str	r3, [r7, #32]
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	61fb      	str	r3, [r7, #28]
 8002b9c:	4b29      	ldr	r3, [pc, #164]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	61ba      	str	r2, [r7, #24]
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	fa92 f2a2 	rbit	r2, r2
 8002baa:	617a      	str	r2, [r7, #20]
  return result;
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	fab2 f282 	clz	r2, r2
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	f042 0220 	orr.w	r2, r2, #32
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	f002 021f 	and.w	r2, r2, #31
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e079      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bce:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f023 0203 	bic.w	r2, r3, #3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	491a      	ldr	r1, [pc, #104]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be0:	f7fe fb5c 	bl	800129c <HAL_GetTick>
 8002be4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be6:	e00a      	b.n	8002bfe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be8:	f7fe fb58 	bl	800129c <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e061      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfe:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 020c 	and.w	r2, r3, #12
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d1eb      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <HAL_RCC_ClockConfig+0x25c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d214      	bcs.n	8002c48 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1e:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <HAL_RCC_ClockConfig+0x25c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f023 0207 	bic.w	r2, r3, #7
 8002c26:	4906      	ldr	r1, [pc, #24]	; (8002c40 <HAL_RCC_ClockConfig+0x25c>)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <HAL_RCC_ClockConfig+0x25c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d005      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e040      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x2de>
 8002c40:	40022000 	.word	0x40022000
 8002c44:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c54:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <HAL_RCC_ClockConfig+0x2e8>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	491a      	ldr	r1, [pc, #104]	; (8002ccc <HAL_RCC_ClockConfig+0x2e8>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c72:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <HAL_RCC_ClockConfig+0x2e8>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4912      	ldr	r1, [pc, #72]	; (8002ccc <HAL_RCC_ClockConfig+0x2e8>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c86:	f000 f829 	bl	8002cdc <HAL_RCC_GetSysClockFreq>
 8002c8a:	4601      	mov	r1, r0
 8002c8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <HAL_RCC_ClockConfig+0x2e8>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c94:	22f0      	movs	r2, #240	; 0xf0
 8002c96:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	fa92 f2a2 	rbit	r2, r2
 8002c9e:	60fa      	str	r2, [r7, #12]
  return result;
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	fab2 f282 	clz	r2, r2
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	40d3      	lsrs	r3, r2
 8002caa:	4a09      	ldr	r2, [pc, #36]	; (8002cd0 <HAL_RCC_ClockConfig+0x2ec>)
 8002cac:	5cd3      	ldrb	r3, [r2, r3]
 8002cae:	fa21 f303 	lsr.w	r3, r1, r3
 8002cb2:	4a08      	ldr	r2, [pc, #32]	; (8002cd4 <HAL_RCC_ClockConfig+0x2f0>)
 8002cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002cb6:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <HAL_RCC_ClockConfig+0x2f4>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe faaa 	bl	8001214 <HAL_InitTick>
  
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3778      	adds	r7, #120	; 0x78
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	08007850 	.word	0x08007850
 8002cd4:	20000000 	.word	0x20000000
 8002cd8:	20000004 	.word	0x20000004

08002cdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b08b      	sub	sp, #44	; 0x2c
 8002ce0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61bb      	str	r3, [r7, #24]
 8002cea:	2300      	movs	r3, #0
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002cf6:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d002      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x30>
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d003      	beq.n	8002d12 <HAL_RCC_GetSysClockFreq+0x36>
 8002d0a:	e03c      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d0c:	4b24      	ldr	r3, [pc, #144]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d0e:	623b      	str	r3, [r7, #32]
      break;
 8002d10:	e03c      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002d18:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002d1c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	fa92 f2a2 	rbit	r2, r2
 8002d24:	607a      	str	r2, [r7, #4]
  return result;
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	fab2 f282 	clz	r2, r2
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	40d3      	lsrs	r3, r2
 8002d30:	4a1c      	ldr	r2, [pc, #112]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d32:	5cd3      	ldrb	r3, [r2, r3]
 8002d34:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002d36:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	220f      	movs	r2, #15
 8002d40:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	fa92 f2a2 	rbit	r2, r2
 8002d48:	60fa      	str	r2, [r7, #12]
  return result;
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	fab2 f282 	clz	r2, r2
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	40d3      	lsrs	r3, r2
 8002d54:	4a14      	ldr	r2, [pc, #80]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d56:	5cd3      	ldrb	r3, [r2, r3]
 8002d58:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d64:	4a0e      	ldr	r2, [pc, #56]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fb02 f303 	mul.w	r3, r2, r3
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
 8002d74:	e004      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	4a0c      	ldr	r2, [pc, #48]	; (8002dac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d7a:	fb02 f303 	mul.w	r3, r2, r3
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	623b      	str	r3, [r7, #32]
      break;
 8002d84:	e002      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d88:	623b      	str	r3, [r7, #32]
      break;
 8002d8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	372c      	adds	r7, #44	; 0x2c
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	007a1200 	.word	0x007a1200
 8002da4:	08007868 	.word	0x08007868
 8002da8:	08007878 	.word	0x08007878
 8002dac:	003d0900 	.word	0x003d0900

08002db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db4:	4b03      	ldr	r3, [pc, #12]	; (8002dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002db6:	681b      	ldr	r3, [r3, #0]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	20000000 	.word	0x20000000

08002dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002dce:	f7ff ffef 	bl	8002db0 <HAL_RCC_GetHCLKFreq>
 8002dd2:	4601      	mov	r1, r0
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ddc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002de0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	fa92 f2a2 	rbit	r2, r2
 8002de8:	603a      	str	r2, [r7, #0]
  return result;
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	fab2 f282 	clz	r2, r2
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	40d3      	lsrs	r3, r2
 8002df4:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002df6:	5cd3      	ldrb	r3, [r2, r3]
 8002df8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40021000 	.word	0x40021000
 8002e08:	08007860 	.word	0x08007860

08002e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002e12:	f7ff ffcd 	bl	8002db0 <HAL_RCC_GetHCLKFreq>
 8002e16:	4601      	mov	r1, r0
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002e20:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002e24:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	fa92 f2a2 	rbit	r2, r2
 8002e2c:	603a      	str	r2, [r7, #0]
  return result;
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	fab2 f282 	clz	r2, r2
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	40d3      	lsrs	r3, r2
 8002e38:	4a04      	ldr	r2, [pc, #16]	; (8002e4c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002e3a:	5cd3      	ldrb	r3, [r2, r3]
 8002e3c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	08007860 	.word	0x08007860

08002e50 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b092      	sub	sp, #72	; 0x48
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002e60:	2300      	movs	r3, #0
 8002e62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 80cd 	beq.w	800300e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e74:	4b86      	ldr	r3, [pc, #536]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10e      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e80:	4b83      	ldr	r3, [pc, #524]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	4a82      	ldr	r2, [pc, #520]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	61d3      	str	r3, [r2, #28]
 8002e8c:	4b80      	ldr	r3, [pc, #512]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9e:	4b7d      	ldr	r3, [pc, #500]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d118      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eaa:	4b7a      	ldr	r3, [pc, #488]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a79      	ldr	r2, [pc, #484]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb6:	f7fe f9f1 	bl	800129c <HAL_GetTick>
 8002eba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ebe:	f7fe f9ed 	bl	800129c <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b64      	cmp	r3, #100	; 0x64
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e0db      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed0:	4b70      	ldr	r3, [pc, #448]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f0      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002edc:	4b6c      	ldr	r3, [pc, #432]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d07d      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d076      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002efa:	4b65      	ldr	r3, [pc, #404]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f08:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4b5e      	ldr	r3, [pc, #376]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	461a      	mov	r2, r3
 8002f24:	2301      	movs	r3, #1
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f30:	fa93 f3a3 	rbit	r3, r3
 8002f34:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f38:	fab3 f383 	clz	r3, r3
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	4b55      	ldr	r3, [pc, #340]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	461a      	mov	r2, r3
 8002f48:	2300      	movs	r3, #0
 8002f4a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f4c:	4a50      	ldr	r2, [pc, #320]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f50:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d045      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fe f99e 	bl	800129c <HAL_GetTick>
 8002f60:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f62:	e00a      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f64:	f7fe f99a 	bl	800129c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e086      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f80:	fa93 f3a3 	rbit	r3, r3
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
 8002f86:	2302      	movs	r3, #2
 8002f88:	623b      	str	r3, [r7, #32]
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	fa93 f3a3 	rbit	r3, r3
 8002f90:	61fb      	str	r3, [r7, #28]
  return result;
 8002f92:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f94:	fab3 f383 	clz	r3, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f043 0302 	orr.w	r3, r3, #2
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d102      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002fa8:	4b39      	ldr	r3, [pc, #228]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	e007      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	fa93 f3a3 	rbit	r3, r3
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	4b35      	ldr	r3, [pc, #212]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	613a      	str	r2, [r7, #16]
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	fa92 f2a2 	rbit	r2, r2
 8002fc8:	60fa      	str	r2, [r7, #12]
  return result;
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	fab2 f282 	clz	r2, r2
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	f002 021f 	and.w	r2, r2, #31
 8002fdc:	2101      	movs	r1, #1
 8002fde:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0bd      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002fe8:	4b29      	ldr	r3, [pc, #164]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	4926      	ldr	r1, [pc, #152]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ffa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d105      	bne.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003002:	4b23      	ldr	r3, [pc, #140]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	4a22      	ldr	r2, [pc, #136]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800300c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d008      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800301a:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f023 0203 	bic.w	r2, r3, #3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	491a      	ldr	r1, [pc, #104]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003028:	4313      	orrs	r3, r2
 800302a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003038:	4b15      	ldr	r3, [pc, #84]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800303a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303c:	f023 0210 	bic.w	r2, r3, #16
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	4912      	ldr	r1, [pc, #72]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003046:	4313      	orrs	r3, r2
 8003048:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003052:	2b00      	cmp	r3, #0
 8003054:	d008      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003056:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	490b      	ldr	r1, [pc, #44]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003064:	4313      	orrs	r3, r2
 8003066:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	4903      	ldr	r1, [pc, #12]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003082:	4313      	orrs	r3, r2
 8003084:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3748      	adds	r7, #72	; 0x48
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40021000 	.word	0x40021000
 8003094:	40007000 	.word	0x40007000
 8003098:	10908100 	.word	0x10908100

0800309c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e049      	b.n	8003142 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fd fed0 	bl	8000e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3304      	adds	r3, #4
 80030d8:	4619      	mov	r1, r3
 80030da:	4610      	mov	r0, r2
 80030dc:	f000 fc5c 	bl	8003998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e049      	b.n	80031f0 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d106      	bne.n	8003176 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f841 	bl	80031f8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2202      	movs	r2, #2
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3304      	adds	r3, #4
 8003186:	4619      	mov	r1, r3
 8003188:	4610      	mov	r0, r2
 800318a:	f000 fc05 	bl	8003998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <HAL_TIM_OC_Start_IT+0x28>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	bf14      	ite	ne
 800322c:	2301      	movne	r3, #1
 800322e:	2300      	moveq	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e03c      	b.n	80032ae <HAL_TIM_OC_Start_IT+0xa2>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2b04      	cmp	r3, #4
 8003238:	d109      	bne.n	800324e <HAL_TIM_OC_Start_IT+0x42>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	bf14      	ite	ne
 8003246:	2301      	movne	r3, #1
 8003248:	2300      	moveq	r3, #0
 800324a:	b2db      	uxtb	r3, r3
 800324c:	e02f      	b.n	80032ae <HAL_TIM_OC_Start_IT+0xa2>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d109      	bne.n	8003268 <HAL_TIM_OC_Start_IT+0x5c>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	bf14      	ite	ne
 8003260:	2301      	movne	r3, #1
 8003262:	2300      	moveq	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	e022      	b.n	80032ae <HAL_TIM_OC_Start_IT+0xa2>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b0c      	cmp	r3, #12
 800326c:	d109      	bne.n	8003282 <HAL_TIM_OC_Start_IT+0x76>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b01      	cmp	r3, #1
 8003278:	bf14      	ite	ne
 800327a:	2301      	movne	r3, #1
 800327c:	2300      	moveq	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	e015      	b.n	80032ae <HAL_TIM_OC_Start_IT+0xa2>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b10      	cmp	r3, #16
 8003286:	d109      	bne.n	800329c <HAL_TIM_OC_Start_IT+0x90>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	bf14      	ite	ne
 8003294:	2301      	movne	r3, #1
 8003296:	2300      	moveq	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	e008      	b.n	80032ae <HAL_TIM_OC_Start_IT+0xa2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	bf14      	ite	ne
 80032a8:	2301      	movne	r3, #1
 80032aa:	2300      	moveq	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e0d3      	b.n	800345e <HAL_TIM_OC_Start_IT+0x252>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d104      	bne.n	80032c6 <HAL_TIM_OC_Start_IT+0xba>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032c4:	e023      	b.n	800330e <HAL_TIM_OC_Start_IT+0x102>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d104      	bne.n	80032d6 <HAL_TIM_OC_Start_IT+0xca>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032d4:	e01b      	b.n	800330e <HAL_TIM_OC_Start_IT+0x102>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d104      	bne.n	80032e6 <HAL_TIM_OC_Start_IT+0xda>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032e4:	e013      	b.n	800330e <HAL_TIM_OC_Start_IT+0x102>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b0c      	cmp	r3, #12
 80032ea:	d104      	bne.n	80032f6 <HAL_TIM_OC_Start_IT+0xea>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032f4:	e00b      	b.n	800330e <HAL_TIM_OC_Start_IT+0x102>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b10      	cmp	r3, #16
 80032fa:	d104      	bne.n	8003306 <HAL_TIM_OC_Start_IT+0xfa>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003304:	e003      	b.n	800330e <HAL_TIM_OC_Start_IT+0x102>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2202      	movs	r2, #2
 800330a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b0c      	cmp	r3, #12
 8003312:	d841      	bhi.n	8003398 <HAL_TIM_OC_Start_IT+0x18c>
 8003314:	a201      	add	r2, pc, #4	; (adr r2, 800331c <HAL_TIM_OC_Start_IT+0x110>)
 8003316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331a:	bf00      	nop
 800331c:	08003351 	.word	0x08003351
 8003320:	08003399 	.word	0x08003399
 8003324:	08003399 	.word	0x08003399
 8003328:	08003399 	.word	0x08003399
 800332c:	08003363 	.word	0x08003363
 8003330:	08003399 	.word	0x08003399
 8003334:	08003399 	.word	0x08003399
 8003338:	08003399 	.word	0x08003399
 800333c:	08003375 	.word	0x08003375
 8003340:	08003399 	.word	0x08003399
 8003344:	08003399 	.word	0x08003399
 8003348:	08003399 	.word	0x08003399
 800334c:	08003387 	.word	0x08003387
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0202 	orr.w	r2, r2, #2
 800335e:	60da      	str	r2, [r3, #12]
      break;
 8003360:	e01d      	b.n	800339e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0204 	orr.w	r2, r2, #4
 8003370:	60da      	str	r2, [r3, #12]
      break;
 8003372:	e014      	b.n	800339e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0208 	orr.w	r2, r2, #8
 8003382:	60da      	str	r2, [r3, #12]
      break;
 8003384:	e00b      	b.n	800339e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 0210 	orr.w	r2, r2, #16
 8003394:	60da      	str	r2, [r3, #12]
      break;
 8003396:	e002      	b.n	800339e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	73fb      	strb	r3, [r7, #15]
      break;
 800339c:	bf00      	nop
  }

  if (status == HAL_OK)
 800339e:	7bfb      	ldrb	r3, [r7, #15]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d15b      	bne.n	800345c <HAL_TIM_OC_Start_IT+0x250>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2201      	movs	r2, #1
 80033aa:	6839      	ldr	r1, [r7, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 feab 	bl	8004108 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a2c      	ldr	r2, [pc, #176]	; (8003468 <HAL_TIM_OC_Start_IT+0x25c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d00e      	beq.n	80033da <HAL_TIM_OC_Start_IT+0x1ce>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a2a      	ldr	r2, [pc, #168]	; (800346c <HAL_TIM_OC_Start_IT+0x260>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d009      	beq.n	80033da <HAL_TIM_OC_Start_IT+0x1ce>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a29      	ldr	r2, [pc, #164]	; (8003470 <HAL_TIM_OC_Start_IT+0x264>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d004      	beq.n	80033da <HAL_TIM_OC_Start_IT+0x1ce>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a27      	ldr	r2, [pc, #156]	; (8003474 <HAL_TIM_OC_Start_IT+0x268>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d101      	bne.n	80033de <HAL_TIM_OC_Start_IT+0x1d2>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <HAL_TIM_OC_Start_IT+0x1d4>
 80033de:	2300      	movs	r3, #0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <HAL_TIM_OC_Start_IT+0x1e8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a1b      	ldr	r2, [pc, #108]	; (8003468 <HAL_TIM_OC_Start_IT+0x25c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00e      	beq.n	800341c <HAL_TIM_OC_Start_IT+0x210>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003406:	d009      	beq.n	800341c <HAL_TIM_OC_Start_IT+0x210>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a1a      	ldr	r2, [pc, #104]	; (8003478 <HAL_TIM_OC_Start_IT+0x26c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d004      	beq.n	800341c <HAL_TIM_OC_Start_IT+0x210>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a15      	ldr	r2, [pc, #84]	; (800346c <HAL_TIM_OC_Start_IT+0x260>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d115      	bne.n	8003448 <HAL_TIM_OC_Start_IT+0x23c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	4b16      	ldr	r3, [pc, #88]	; (800347c <HAL_TIM_OC_Start_IT+0x270>)
 8003424:	4013      	ands	r3, r2
 8003426:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b06      	cmp	r3, #6
 800342c:	d015      	beq.n	800345a <HAL_TIM_OC_Start_IT+0x24e>
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003434:	d011      	beq.n	800345a <HAL_TIM_OC_Start_IT+0x24e>
      {
        __HAL_TIM_ENABLE(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f042 0201 	orr.w	r2, r2, #1
 8003444:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003446:	e008      	b.n	800345a <HAL_TIM_OC_Start_IT+0x24e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	e000      	b.n	800345c <HAL_TIM_OC_Start_IT+0x250>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800345c:	7bfb      	ldrb	r3, [r7, #15]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40012c00 	.word	0x40012c00
 800346c:	40014000 	.word	0x40014000
 8003470:	40014400 	.word	0x40014400
 8003474:	40014800 	.word	0x40014800
 8003478:	40000400 	.word	0x40000400
 800347c:	00010007 	.word	0x00010007

08003480 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b02      	cmp	r3, #2
 8003494:	d122      	bne.n	80034dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d11b      	bne.n	80034dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0202 	mvn.w	r2, #2
 80034ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fa49 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 80034c8:	e005      	b.n	80034d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fd f852 	bl	8000574 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 fa4c 	bl	800396e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d122      	bne.n	8003530 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d11b      	bne.n	8003530 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0204 	mvn.w	r2, #4
 8003500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2202      	movs	r2, #2
 8003506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fa1f 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 800351c:	e005      	b.n	800352a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fd f828 	bl	8000574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fa22 	bl	800396e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b08      	cmp	r3, #8
 800353c:	d122      	bne.n	8003584 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b08      	cmp	r3, #8
 800354a:	d11b      	bne.n	8003584 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0208 	mvn.w	r2, #8
 8003554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2204      	movs	r2, #4
 800355a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f9f5 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 8003570:	e005      	b.n	800357e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fc fffe 	bl	8000574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f9f8 	bl	800396e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2b10      	cmp	r3, #16
 8003590:	d122      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	2b10      	cmp	r3, #16
 800359e:	d11b      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0210 	mvn.w	r2, #16
 80035a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2208      	movs	r2, #8
 80035ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f9cb 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 80035c4:	e005      	b.n	80035d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fc ffd4 	bl	8000574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f9ce 	bl	800396e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d10e      	bne.n	8003604 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d107      	bne.n	8003604 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0201 	mvn.w	r2, #1
 80035fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f9a1 	bl	8003946 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360e:	2b80      	cmp	r3, #128	; 0x80
 8003610:	d10e      	bne.n	8003630 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361c:	2b80      	cmp	r3, #128	; 0x80
 800361e:	d107      	bne.n	8003630 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fe0a 	bl	8004244 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800363e:	d10e      	bne.n	800365e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364a:	2b80      	cmp	r3, #128	; 0x80
 800364c:	d107      	bne.n	800365e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fdfd 	bl	8004258 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003668:	2b40      	cmp	r3, #64	; 0x40
 800366a:	d10e      	bne.n	800368a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003676:	2b40      	cmp	r3, #64	; 0x40
 8003678:	d107      	bne.n	800368a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f97c 	bl	8003982 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b20      	cmp	r3, #32
 8003696:	d10e      	bne.n	80036b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d107      	bne.n	80036b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f06f 0220 	mvn.w	r2, #32
 80036ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fdbd 	bl	8004230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_TIM_OC_ConfigChannel+0x1e>
 80036da:	2302      	movs	r3, #2
 80036dc:	e066      	b.n	80037ac <HAL_TIM_OC_ConfigChannel+0xec>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b14      	cmp	r3, #20
 80036ea:	d857      	bhi.n	800379c <HAL_TIM_OC_ConfigChannel+0xdc>
 80036ec:	a201      	add	r2, pc, #4	; (adr r2, 80036f4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80036ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f2:	bf00      	nop
 80036f4:	08003749 	.word	0x08003749
 80036f8:	0800379d 	.word	0x0800379d
 80036fc:	0800379d 	.word	0x0800379d
 8003700:	0800379d 	.word	0x0800379d
 8003704:	08003757 	.word	0x08003757
 8003708:	0800379d 	.word	0x0800379d
 800370c:	0800379d 	.word	0x0800379d
 8003710:	0800379d 	.word	0x0800379d
 8003714:	08003765 	.word	0x08003765
 8003718:	0800379d 	.word	0x0800379d
 800371c:	0800379d 	.word	0x0800379d
 8003720:	0800379d 	.word	0x0800379d
 8003724:	08003773 	.word	0x08003773
 8003728:	0800379d 	.word	0x0800379d
 800372c:	0800379d 	.word	0x0800379d
 8003730:	0800379d 	.word	0x0800379d
 8003734:	08003781 	.word	0x08003781
 8003738:	0800379d 	.word	0x0800379d
 800373c:	0800379d 	.word	0x0800379d
 8003740:	0800379d 	.word	0x0800379d
 8003744:	0800378f 	.word	0x0800378f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	4618      	mov	r0, r3
 8003750:	f000 f99a 	bl	8003a88 <TIM_OC1_SetConfig>
      break;
 8003754:	e025      	b.n	80037a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68b9      	ldr	r1, [r7, #8]
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fa19 	bl	8003b94 <TIM_OC2_SetConfig>
      break;
 8003762:	e01e      	b.n	80037a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68b9      	ldr	r1, [r7, #8]
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fa92 	bl	8003c94 <TIM_OC3_SetConfig>
      break;
 8003770:	e017      	b.n	80037a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fb09 	bl	8003d90 <TIM_OC4_SetConfig>
      break;
 800377e:	e010      	b.n	80037a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fb66 	bl	8003e58 <TIM_OC5_SetConfig>
      break;
 800378c:	e009      	b.n	80037a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68b9      	ldr	r1, [r7, #8]
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fbbd 	bl	8003f14 <TIM_OC6_SetConfig>
      break;
 800379a:	e002      	b.n	80037a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	75fb      	strb	r3, [r7, #23]
      break;
 80037a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_TIM_ConfigClockSource+0x1c>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e0b6      	b.n	800393e <HAL_TIM_ConfigClockSource+0x18a>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800380c:	d03e      	beq.n	800388c <HAL_TIM_ConfigClockSource+0xd8>
 800380e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003812:	f200 8087 	bhi.w	8003924 <HAL_TIM_ConfigClockSource+0x170>
 8003816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381a:	f000 8086 	beq.w	800392a <HAL_TIM_ConfigClockSource+0x176>
 800381e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003822:	d87f      	bhi.n	8003924 <HAL_TIM_ConfigClockSource+0x170>
 8003824:	2b70      	cmp	r3, #112	; 0x70
 8003826:	d01a      	beq.n	800385e <HAL_TIM_ConfigClockSource+0xaa>
 8003828:	2b70      	cmp	r3, #112	; 0x70
 800382a:	d87b      	bhi.n	8003924 <HAL_TIM_ConfigClockSource+0x170>
 800382c:	2b60      	cmp	r3, #96	; 0x60
 800382e:	d050      	beq.n	80038d2 <HAL_TIM_ConfigClockSource+0x11e>
 8003830:	2b60      	cmp	r3, #96	; 0x60
 8003832:	d877      	bhi.n	8003924 <HAL_TIM_ConfigClockSource+0x170>
 8003834:	2b50      	cmp	r3, #80	; 0x50
 8003836:	d03c      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0xfe>
 8003838:	2b50      	cmp	r3, #80	; 0x50
 800383a:	d873      	bhi.n	8003924 <HAL_TIM_ConfigClockSource+0x170>
 800383c:	2b40      	cmp	r3, #64	; 0x40
 800383e:	d058      	beq.n	80038f2 <HAL_TIM_ConfigClockSource+0x13e>
 8003840:	2b40      	cmp	r3, #64	; 0x40
 8003842:	d86f      	bhi.n	8003924 <HAL_TIM_ConfigClockSource+0x170>
 8003844:	2b30      	cmp	r3, #48	; 0x30
 8003846:	d064      	beq.n	8003912 <HAL_TIM_ConfigClockSource+0x15e>
 8003848:	2b30      	cmp	r3, #48	; 0x30
 800384a:	d86b      	bhi.n	8003924 <HAL_TIM_ConfigClockSource+0x170>
 800384c:	2b20      	cmp	r3, #32
 800384e:	d060      	beq.n	8003912 <HAL_TIM_ConfigClockSource+0x15e>
 8003850:	2b20      	cmp	r3, #32
 8003852:	d867      	bhi.n	8003924 <HAL_TIM_ConfigClockSource+0x170>
 8003854:	2b00      	cmp	r3, #0
 8003856:	d05c      	beq.n	8003912 <HAL_TIM_ConfigClockSource+0x15e>
 8003858:	2b10      	cmp	r3, #16
 800385a:	d05a      	beq.n	8003912 <HAL_TIM_ConfigClockSource+0x15e>
 800385c:	e062      	b.n	8003924 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	6899      	ldr	r1, [r3, #8]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f000 fc2b 	bl	80040c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003880:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	609a      	str	r2, [r3, #8]
      break;
 800388a:	e04f      	b.n	800392c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6818      	ldr	r0, [r3, #0]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	6899      	ldr	r1, [r3, #8]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f000 fc14 	bl	80040c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ae:	609a      	str	r2, [r3, #8]
      break;
 80038b0:	e03c      	b.n	800392c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6818      	ldr	r0, [r3, #0]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	6859      	ldr	r1, [r3, #4]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	461a      	mov	r2, r3
 80038c0:	f000 fb88 	bl	8003fd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2150      	movs	r1, #80	; 0x50
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fbe1 	bl	8004092 <TIM_ITRx_SetConfig>
      break;
 80038d0:	e02c      	b.n	800392c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	6859      	ldr	r1, [r3, #4]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	461a      	mov	r2, r3
 80038e0:	f000 fba7 	bl	8004032 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2160      	movs	r1, #96	; 0x60
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fbd1 	bl	8004092 <TIM_ITRx_SetConfig>
      break;
 80038f0:	e01c      	b.n	800392c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	6859      	ldr	r1, [r3, #4]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	461a      	mov	r2, r3
 8003900:	f000 fb68 	bl	8003fd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2140      	movs	r1, #64	; 0x40
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fbc1 	bl	8004092 <TIM_ITRx_SetConfig>
      break;
 8003910:	e00c      	b.n	800392c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4619      	mov	r1, r3
 800391c:	4610      	mov	r0, r2
 800391e:	f000 fbb8 	bl	8004092 <TIM_ITRx_SetConfig>
      break;
 8003922:	e003      	b.n	800392c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
      break;
 8003928:	e000      	b.n	800392c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800392a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800393c:	7bfb      	ldrb	r3, [r7, #15]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a32      	ldr	r2, [pc, #200]	; (8003a74 <TIM_Base_SetConfig+0xdc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d007      	beq.n	80039c0 <TIM_Base_SetConfig+0x28>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b6:	d003      	beq.n	80039c0 <TIM_Base_SetConfig+0x28>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a2f      	ldr	r2, [pc, #188]	; (8003a78 <TIM_Base_SetConfig+0xe0>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d108      	bne.n	80039d2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a27      	ldr	r2, [pc, #156]	; (8003a74 <TIM_Base_SetConfig+0xdc>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d013      	beq.n	8003a02 <TIM_Base_SetConfig+0x6a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e0:	d00f      	beq.n	8003a02 <TIM_Base_SetConfig+0x6a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a24      	ldr	r2, [pc, #144]	; (8003a78 <TIM_Base_SetConfig+0xe0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00b      	beq.n	8003a02 <TIM_Base_SetConfig+0x6a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a23      	ldr	r2, [pc, #140]	; (8003a7c <TIM_Base_SetConfig+0xe4>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d007      	beq.n	8003a02 <TIM_Base_SetConfig+0x6a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a22      	ldr	r2, [pc, #136]	; (8003a80 <TIM_Base_SetConfig+0xe8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d003      	beq.n	8003a02 <TIM_Base_SetConfig+0x6a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a21      	ldr	r2, [pc, #132]	; (8003a84 <TIM_Base_SetConfig+0xec>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d108      	bne.n	8003a14 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a0e      	ldr	r2, [pc, #56]	; (8003a74 <TIM_Base_SetConfig+0xdc>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00b      	beq.n	8003a58 <TIM_Base_SetConfig+0xc0>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a0e      	ldr	r2, [pc, #56]	; (8003a7c <TIM_Base_SetConfig+0xe4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d007      	beq.n	8003a58 <TIM_Base_SetConfig+0xc0>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a0d      	ldr	r2, [pc, #52]	; (8003a80 <TIM_Base_SetConfig+0xe8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <TIM_Base_SetConfig+0xc0>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a0c      	ldr	r2, [pc, #48]	; (8003a84 <TIM_Base_SetConfig+0xec>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d103      	bne.n	8003a60 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	615a      	str	r2, [r3, #20]
}
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40012c00 	.word	0x40012c00
 8003a78:	40000400 	.word	0x40000400
 8003a7c:	40014000 	.word	0x40014000
 8003a80:	40014400 	.word	0x40014400
 8003a84:	40014800 	.word	0x40014800

08003a88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	f023 0201 	bic.w	r2, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0303 	bic.w	r3, r3, #3
 8003ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f023 0302 	bic.w	r3, r3, #2
 8003ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a28      	ldr	r2, [pc, #160]	; (8003b84 <TIM_OC1_SetConfig+0xfc>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d00b      	beq.n	8003b00 <TIM_OC1_SetConfig+0x78>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a27      	ldr	r2, [pc, #156]	; (8003b88 <TIM_OC1_SetConfig+0x100>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d007      	beq.n	8003b00 <TIM_OC1_SetConfig+0x78>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a26      	ldr	r2, [pc, #152]	; (8003b8c <TIM_OC1_SetConfig+0x104>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d003      	beq.n	8003b00 <TIM_OC1_SetConfig+0x78>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a25      	ldr	r2, [pc, #148]	; (8003b90 <TIM_OC1_SetConfig+0x108>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d10c      	bne.n	8003b1a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f023 0308 	bic.w	r3, r3, #8
 8003b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f023 0304 	bic.w	r3, r3, #4
 8003b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a19      	ldr	r2, [pc, #100]	; (8003b84 <TIM_OC1_SetConfig+0xfc>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00b      	beq.n	8003b3a <TIM_OC1_SetConfig+0xb2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a18      	ldr	r2, [pc, #96]	; (8003b88 <TIM_OC1_SetConfig+0x100>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d007      	beq.n	8003b3a <TIM_OC1_SetConfig+0xb2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a17      	ldr	r2, [pc, #92]	; (8003b8c <TIM_OC1_SetConfig+0x104>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d003      	beq.n	8003b3a <TIM_OC1_SetConfig+0xb2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a16      	ldr	r2, [pc, #88]	; (8003b90 <TIM_OC1_SetConfig+0x108>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d111      	bne.n	8003b5e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	621a      	str	r2, [r3, #32]
}
 8003b78:	bf00      	nop
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	40012c00 	.word	0x40012c00
 8003b88:	40014000 	.word	0x40014000
 8003b8c:	40014400 	.word	0x40014400
 8003b90:	40014800 	.word	0x40014800

08003b94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	f023 0210 	bic.w	r2, r3, #16
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	021b      	lsls	r3, r3, #8
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f023 0320 	bic.w	r3, r3, #32
 8003be2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a24      	ldr	r2, [pc, #144]	; (8003c84 <TIM_OC2_SetConfig+0xf0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d10d      	bne.n	8003c14 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a1b      	ldr	r2, [pc, #108]	; (8003c84 <TIM_OC2_SetConfig+0xf0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00b      	beq.n	8003c34 <TIM_OC2_SetConfig+0xa0>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a1a      	ldr	r2, [pc, #104]	; (8003c88 <TIM_OC2_SetConfig+0xf4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d007      	beq.n	8003c34 <TIM_OC2_SetConfig+0xa0>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a19      	ldr	r2, [pc, #100]	; (8003c8c <TIM_OC2_SetConfig+0xf8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d003      	beq.n	8003c34 <TIM_OC2_SetConfig+0xa0>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a18      	ldr	r2, [pc, #96]	; (8003c90 <TIM_OC2_SetConfig+0xfc>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d113      	bne.n	8003c5c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c3a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c42:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	621a      	str	r2, [r3, #32]
}
 8003c76:	bf00      	nop
 8003c78:	371c      	adds	r7, #28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40012c00 	.word	0x40012c00
 8003c88:	40014000 	.word	0x40014000
 8003c8c:	40014400 	.word	0x40014400
 8003c90:	40014800 	.word	0x40014800

08003c94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 0303 	bic.w	r3, r3, #3
 8003cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	021b      	lsls	r3, r3, #8
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a23      	ldr	r2, [pc, #140]	; (8003d80 <TIM_OC3_SetConfig+0xec>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d10d      	bne.n	8003d12 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d10:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a1a      	ldr	r2, [pc, #104]	; (8003d80 <TIM_OC3_SetConfig+0xec>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00b      	beq.n	8003d32 <TIM_OC3_SetConfig+0x9e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a19      	ldr	r2, [pc, #100]	; (8003d84 <TIM_OC3_SetConfig+0xf0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d007      	beq.n	8003d32 <TIM_OC3_SetConfig+0x9e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a18      	ldr	r2, [pc, #96]	; (8003d88 <TIM_OC3_SetConfig+0xf4>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d003      	beq.n	8003d32 <TIM_OC3_SetConfig+0x9e>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a17      	ldr	r2, [pc, #92]	; (8003d8c <TIM_OC3_SetConfig+0xf8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d113      	bne.n	8003d5a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	621a      	str	r2, [r3, #32]
}
 8003d74:	bf00      	nop
 8003d76:	371c      	adds	r7, #28
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	40012c00 	.word	0x40012c00
 8003d84:	40014000 	.word	0x40014000
 8003d88:	40014400 	.word	0x40014400
 8003d8c:	40014800 	.word	0x40014800

08003d90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	021b      	lsls	r3, r3, #8
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	031b      	lsls	r3, r3, #12
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a16      	ldr	r2, [pc, #88]	; (8003e48 <TIM_OC4_SetConfig+0xb8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00b      	beq.n	8003e0c <TIM_OC4_SetConfig+0x7c>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a15      	ldr	r2, [pc, #84]	; (8003e4c <TIM_OC4_SetConfig+0xbc>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d007      	beq.n	8003e0c <TIM_OC4_SetConfig+0x7c>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a14      	ldr	r2, [pc, #80]	; (8003e50 <TIM_OC4_SetConfig+0xc0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d003      	beq.n	8003e0c <TIM_OC4_SetConfig+0x7c>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a13      	ldr	r2, [pc, #76]	; (8003e54 <TIM_OC4_SetConfig+0xc4>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d109      	bne.n	8003e20 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	019b      	lsls	r3, r3, #6
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	621a      	str	r2, [r3, #32]
}
 8003e3a:	bf00      	nop
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40012c00 	.word	0x40012c00
 8003e4c:	40014000 	.word	0x40014000
 8003e50:	40014400 	.word	0x40014400
 8003e54:	40014800 	.word	0x40014800

08003e58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	041b      	lsls	r3, r3, #16
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a15      	ldr	r2, [pc, #84]	; (8003f04 <TIM_OC5_SetConfig+0xac>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00b      	beq.n	8003eca <TIM_OC5_SetConfig+0x72>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a14      	ldr	r2, [pc, #80]	; (8003f08 <TIM_OC5_SetConfig+0xb0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d007      	beq.n	8003eca <TIM_OC5_SetConfig+0x72>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a13      	ldr	r2, [pc, #76]	; (8003f0c <TIM_OC5_SetConfig+0xb4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d003      	beq.n	8003eca <TIM_OC5_SetConfig+0x72>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a12      	ldr	r2, [pc, #72]	; (8003f10 <TIM_OC5_SetConfig+0xb8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d109      	bne.n	8003ede <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	621a      	str	r2, [r3, #32]
}
 8003ef8:	bf00      	nop
 8003efa:	371c      	adds	r7, #28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	40012c00 	.word	0x40012c00
 8003f08:	40014000 	.word	0x40014000
 8003f0c:	40014400 	.word	0x40014400
 8003f10:	40014800 	.word	0x40014800

08003f14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	021b      	lsls	r3, r3, #8
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	051b      	lsls	r3, r3, #20
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a16      	ldr	r2, [pc, #88]	; (8003fc4 <TIM_OC6_SetConfig+0xb0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00b      	beq.n	8003f88 <TIM_OC6_SetConfig+0x74>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a15      	ldr	r2, [pc, #84]	; (8003fc8 <TIM_OC6_SetConfig+0xb4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d007      	beq.n	8003f88 <TIM_OC6_SetConfig+0x74>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a14      	ldr	r2, [pc, #80]	; (8003fcc <TIM_OC6_SetConfig+0xb8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d003      	beq.n	8003f88 <TIM_OC6_SetConfig+0x74>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a13      	ldr	r2, [pc, #76]	; (8003fd0 <TIM_OC6_SetConfig+0xbc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d109      	bne.n	8003f9c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	029b      	lsls	r3, r3, #10
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	621a      	str	r2, [r3, #32]
}
 8003fb6:	bf00      	nop
 8003fb8:	371c      	adds	r7, #28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40012c00 	.word	0x40012c00
 8003fc8:	40014000 	.word	0x40014000
 8003fcc:	40014400 	.word	0x40014400
 8003fd0:	40014800 	.word	0x40014800

08003fd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	f023 0201 	bic.w	r2, r3, #1
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f023 030a 	bic.w	r3, r3, #10
 8004010:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	621a      	str	r2, [r3, #32]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004032:	b480      	push	{r7}
 8004034:	b087      	sub	sp, #28
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	f023 0210 	bic.w	r2, r3, #16
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800405c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	031b      	lsls	r3, r3, #12
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4313      	orrs	r3, r2
 8004066:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800406e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	621a      	str	r2, [r3, #32]
}
 8004086:	bf00      	nop
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004092:	b480      	push	{r7}
 8004094:	b085      	sub	sp, #20
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f043 0307 	orr.w	r3, r3, #7
 80040b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	609a      	str	r2, [r3, #8]
}
 80040bc:	bf00      	nop
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	021a      	lsls	r2, r3, #8
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	609a      	str	r2, [r3, #8]
}
 80040fc:	bf00      	nop
 80040fe:	371c      	adds	r7, #28
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f003 031f 	and.w	r3, r3, #31
 800411a:	2201      	movs	r2, #1
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a1a      	ldr	r2, [r3, #32]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	43db      	mvns	r3, r3
 800412a:	401a      	ands	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6a1a      	ldr	r2, [r3, #32]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f003 031f 	and.w	r3, r3, #31
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	fa01 f303 	lsl.w	r3, r1, r3
 8004140:	431a      	orrs	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	621a      	str	r2, [r3, #32]
}
 8004146:	bf00      	nop
 8004148:	371c      	adds	r7, #28
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
	...

08004154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004168:	2302      	movs	r3, #2
 800416a:	e054      	b.n	8004216 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a24      	ldr	r2, [pc, #144]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d108      	bne.n	80041a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800419c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a17      	ldr	r2, [pc, #92]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00e      	beq.n	80041ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d4:	d009      	beq.n	80041ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a13      	ldr	r2, [pc, #76]	; (8004228 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d004      	beq.n	80041ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a11      	ldr	r2, [pc, #68]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d10c      	bne.n	8004204 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40012c00 	.word	0x40012c00
 8004228:	40000400 	.word	0x40000400
 800422c:	40014000 	.word	0x40014000

08004230 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e040      	b.n	8004300 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fc fe10 	bl	8000eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2224      	movs	r2, #36	; 0x24
 8004298:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0201 	bic.w	r2, r2, #1
 80042a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fe46 	bl	8004f3c <UART_SetConfig>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d101      	bne.n	80042ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e022      	b.n	8004300 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 ff70 	bl	80051a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 fff7 	bl	80052ec <UART_CheckIdleState>
 80042fe:	4603      	mov	r3, r0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e048      	b.n	80043ac <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fc fdc2 	bl	8000eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2224      	movs	r2, #36	; 0x24
 8004334:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0201 	bic.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fdf8 	bl	8004f3c <UART_SetConfig>
 800434c:	4603      	mov	r3, r0
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e02a      	b.n	80043ac <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 ff22 	bl	80051a8 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004372:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004382:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0208 	orr.w	r2, r2, #8
 8004392:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0201 	orr.w	r2, r2, #1
 80043a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 ffa1 	bl	80052ec <UART_CheckIdleState>
 80043aa:	4603      	mov	r3, r0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08a      	sub	sp, #40	; 0x28
 80043b8:	af02      	add	r7, sp, #8
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	603b      	str	r3, [r7, #0]
 80043c0:	4613      	mov	r3, r2
 80043c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	f040 8082 	bne.w	80044d2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <HAL_UART_Transmit+0x26>
 80043d4:	88fb      	ldrh	r3, [r7, #6]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e07a      	b.n	80044d4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_UART_Transmit+0x38>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e073      	b.n	80044d4 <HAL_UART_Transmit+0x120>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2221      	movs	r2, #33	; 0x21
 8004400:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004402:	f7fc ff4b 	bl	800129c <HAL_GetTick>
 8004406:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	88fa      	ldrh	r2, [r7, #6]
 800440c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	88fa      	ldrh	r2, [r7, #6]
 8004414:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004420:	d108      	bne.n	8004434 <HAL_UART_Transmit+0x80>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d104      	bne.n	8004434 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800442a:	2300      	movs	r3, #0
 800442c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	e003      	b.n	800443c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004438:	2300      	movs	r3, #0
 800443a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004444:	e02d      	b.n	80044a2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2200      	movs	r2, #0
 800444e:	2180      	movs	r1, #128	; 0x80
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 ff94 	bl	800537e <UART_WaitOnFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e039      	b.n	80044d4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10b      	bne.n	800447e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	881a      	ldrh	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004472:	b292      	uxth	r2, r2
 8004474:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	3302      	adds	r3, #2
 800447a:	61bb      	str	r3, [r7, #24]
 800447c:	e008      	b.n	8004490 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	781a      	ldrb	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	b292      	uxth	r2, r2
 8004488:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	3301      	adds	r3, #1
 800448e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004496:	b29b      	uxth	r3, r3
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1cb      	bne.n	8004446 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2200      	movs	r2, #0
 80044b6:	2140      	movs	r1, #64	; 0x40
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 ff60 	bl	800537e <UART_WaitOnFlagUntilTimeout>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e005      	b.n	80044d4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2220      	movs	r2, #32
 80044cc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	e000      	b.n	80044d4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80044d2:	2302      	movs	r3, #2
  }
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3720      	adds	r7, #32
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08a      	sub	sp, #40	; 0x28
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	603b      	str	r3, [r7, #0]
 80044e8:	4613      	mov	r3, r2
 80044ea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	f040 80bf 	bne.w	8004674 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <HAL_UART_Receive+0x26>
 80044fc:	88fb      	ldrh	r3, [r7, #6]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e0b7      	b.n	8004676 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_UART_Receive+0x38>
 8004510:	2302      	movs	r3, #2
 8004512:	e0b0      	b.n	8004676 <HAL_UART_Receive+0x19a>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2222      	movs	r2, #34	; 0x22
 8004528:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004530:	f7fc feb4 	bl	800129c <HAL_GetTick>
 8004534:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	88fa      	ldrh	r2, [r7, #6]
 800453a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	88fa      	ldrh	r2, [r7, #6]
 8004542:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454e:	d10e      	bne.n	800456e <HAL_UART_Receive+0x92>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d105      	bne.n	8004564 <HAL_UART_Receive+0x88>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800455e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004562:	e02d      	b.n	80045c0 <HAL_UART_Receive+0xe4>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	22ff      	movs	r2, #255	; 0xff
 8004568:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800456c:	e028      	b.n	80045c0 <HAL_UART_Receive+0xe4>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10d      	bne.n	8004592 <HAL_UART_Receive+0xb6>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d104      	bne.n	8004588 <HAL_UART_Receive+0xac>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	22ff      	movs	r2, #255	; 0xff
 8004582:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004586:	e01b      	b.n	80045c0 <HAL_UART_Receive+0xe4>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	227f      	movs	r2, #127	; 0x7f
 800458c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004590:	e016      	b.n	80045c0 <HAL_UART_Receive+0xe4>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800459a:	d10d      	bne.n	80045b8 <HAL_UART_Receive+0xdc>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d104      	bne.n	80045ae <HAL_UART_Receive+0xd2>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	227f      	movs	r2, #127	; 0x7f
 80045a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045ac:	e008      	b.n	80045c0 <HAL_UART_Receive+0xe4>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	223f      	movs	r2, #63	; 0x3f
 80045b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045b6:	e003      	b.n	80045c0 <HAL_UART_Receive+0xe4>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80045c6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d0:	d108      	bne.n	80045e4 <HAL_UART_Receive+0x108>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d104      	bne.n	80045e4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	61bb      	str	r3, [r7, #24]
 80045e2:	e003      	b.n	80045ec <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80045f4:	e033      	b.n	800465e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2200      	movs	r2, #0
 80045fe:	2120      	movs	r1, #32
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 febc 	bl	800537e <UART_WaitOnFlagUntilTimeout>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e032      	b.n	8004676 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10c      	bne.n	8004630 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800461c:	b29a      	uxth	r2, r3
 800461e:	8a7b      	ldrh	r3, [r7, #18]
 8004620:	4013      	ands	r3, r2
 8004622:	b29a      	uxth	r2, r3
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	3302      	adds	r3, #2
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	e00d      	b.n	800464c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004636:	b29b      	uxth	r3, r3
 8004638:	b2da      	uxtb	r2, r3
 800463a:	8a7b      	ldrh	r3, [r7, #18]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	4013      	ands	r3, r2
 8004640:	b2da      	uxtb	r2, r3
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	3301      	adds	r3, #1
 800464a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004652:	b29b      	uxth	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1c5      	bne.n	80045f6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2220      	movs	r2, #32
 800466e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004670:	2300      	movs	r3, #0
 8004672:	e000      	b.n	8004676 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004674:	2302      	movs	r3, #2
  }
}
 8004676:	4618      	mov	r0, r3
 8004678:	3720      	adds	r7, #32
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004680:	b480      	push	{r7}
 8004682:	b08b      	sub	sp, #44	; 0x2c
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	4613      	mov	r3, r2
 800468c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004692:	2b20      	cmp	r3, #32
 8004694:	d156      	bne.n	8004744 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <HAL_UART_Transmit_IT+0x22>
 800469c:	88fb      	ldrh	r3, [r7, #6]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e04f      	b.n	8004746 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_UART_Transmit_IT+0x34>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e048      	b.n	8004746 <HAL_UART_Transmit_IT+0xc6>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	88fa      	ldrh	r2, [r7, #6]
 80046c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	88fa      	ldrh	r2, [r7, #6]
 80046ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2221      	movs	r2, #33	; 0x21
 80046e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ee:	d107      	bne.n	8004700 <HAL_UART_Transmit_IT+0x80>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d103      	bne.n	8004700 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4a16      	ldr	r2, [pc, #88]	; (8004754 <HAL_UART_Transmit_IT+0xd4>)
 80046fc:	669a      	str	r2, [r3, #104]	; 0x68
 80046fe:	e002      	b.n	8004706 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4a15      	ldr	r2, [pc, #84]	; (8004758 <HAL_UART_Transmit_IT+0xd8>)
 8004704:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	e853 3f00 	ldrex	r3, [r3]
 800471a:	613b      	str	r3, [r7, #16]
   return(result);
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004722:	627b      	str	r3, [r7, #36]	; 0x24
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	461a      	mov	r2, r3
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	623b      	str	r3, [r7, #32]
 800472e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004730:	69f9      	ldr	r1, [r7, #28]
 8004732:	6a3a      	ldr	r2, [r7, #32]
 8004734:	e841 2300 	strex	r3, r2, [r1]
 8004738:	61bb      	str	r3, [r7, #24]
   return(result);
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1e6      	bne.n	800470e <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8004740:	2300      	movs	r3, #0
 8004742:	e000      	b.n	8004746 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004744:	2302      	movs	r3, #2
  }
}
 8004746:	4618      	mov	r0, r3
 8004748:	372c      	adds	r7, #44	; 0x2c
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	0800580b 	.word	0x0800580b
 8004758:	08005753 	.word	0x08005753

0800475c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08a      	sub	sp, #40	; 0x28
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	4613      	mov	r3, r2
 8004768:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800476e:	2b20      	cmp	r3, #32
 8004770:	d13d      	bne.n	80047ee <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <HAL_UART_Receive_IT+0x22>
 8004778:	88fb      	ldrh	r3, [r7, #6]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e036      	b.n	80047f0 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_UART_Receive_IT+0x34>
 800478c:	2302      	movs	r3, #2
 800478e:	e02f      	b.n	80047f0 <HAL_UART_Receive_IT+0x94>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d018      	beq.n	80047de <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	e853 3f00 	ldrex	r3, [r3]
 80047b8:	613b      	str	r3, [r7, #16]
   return(result);
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	623b      	str	r3, [r7, #32]
 80047cc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	69f9      	ldr	r1, [r7, #28]
 80047d0:	6a3a      	ldr	r2, [r7, #32]
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1e6      	bne.n	80047ac <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047de:	88fb      	ldrh	r3, [r7, #6]
 80047e0:	461a      	mov	r2, r3
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 fe8f 	bl	8005508 <UART_Start_Receive_IT>
 80047ea:	4603      	mov	r3, r0
 80047ec:	e000      	b.n	80047f0 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047ee:	2302      	movs	r3, #2
  }
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3728      	adds	r7, #40	; 0x28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b0ba      	sub	sp, #232	; 0xe8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800481e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004822:	f640 030f 	movw	r3, #2063	; 0x80f
 8004826:	4013      	ands	r3, r2
 8004828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800482c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004830:	2b00      	cmp	r3, #0
 8004832:	d115      	bne.n	8004860 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00f      	beq.n	8004860 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b00      	cmp	r3, #0
 800484a:	d009      	beq.n	8004860 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 82a3 	beq.w	8004d9c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	4798      	blx	r3
      }
      return;
 800485e:	e29d      	b.n	8004d9c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004860:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 8117 	beq.w	8004a98 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800486a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d106      	bne.n	8004884 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004876:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800487a:	4b85      	ldr	r3, [pc, #532]	; (8004a90 <HAL_UART_IRQHandler+0x298>)
 800487c:	4013      	ands	r3, r2
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 810a 	beq.w	8004a98 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d011      	beq.n	80048b4 <HAL_UART_IRQHandler+0xbc>
 8004890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00b      	beq.n	80048b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2201      	movs	r2, #1
 80048a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048aa:	f043 0201 	orr.w	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d011      	beq.n	80048e4 <HAL_UART_IRQHandler+0xec>
 80048c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00b      	beq.n	80048e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2202      	movs	r2, #2
 80048d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048da:	f043 0204 	orr.w	r2, r3, #4
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d011      	beq.n	8004914 <HAL_UART_IRQHandler+0x11c>
 80048f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00b      	beq.n	8004914 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2204      	movs	r2, #4
 8004902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800490a:	f043 0202 	orr.w	r2, r3, #2
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b00      	cmp	r3, #0
 800491e:	d017      	beq.n	8004950 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004924:	f003 0320 	and.w	r3, r3, #32
 8004928:	2b00      	cmp	r3, #0
 800492a:	d105      	bne.n	8004938 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800492c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004930:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00b      	beq.n	8004950 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2208      	movs	r2, #8
 800493e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004946:	f043 0208 	orr.w	r2, r3, #8
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004958:	2b00      	cmp	r3, #0
 800495a:	d012      	beq.n	8004982 <HAL_UART_IRQHandler+0x18a>
 800495c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004960:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00c      	beq.n	8004982 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004970:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004978:	f043 0220 	orr.w	r2, r3, #32
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 8209 	beq.w	8004da0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800498e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00d      	beq.n	80049b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800499a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ca:	2b40      	cmp	r3, #64	; 0x40
 80049cc:	d005      	beq.n	80049da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d04f      	beq.n	8004a7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fe40 	bl	8005660 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ea:	2b40      	cmp	r3, #64	; 0x40
 80049ec:	d141      	bne.n	8004a72 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3308      	adds	r3, #8
 80049f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3308      	adds	r3, #8
 8004a16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a2a:	e841 2300 	strex	r3, r2, [r1]
 8004a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1d9      	bne.n	80049ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d013      	beq.n	8004a6a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a46:	4a13      	ldr	r2, [pc, #76]	; (8004a94 <HAL_UART_IRQHandler+0x29c>)
 8004a48:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fc fd9e 	bl	8001590 <HAL_DMA_Abort_IT>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d017      	beq.n	8004a8a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004a64:	4610      	mov	r0, r2
 8004a66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a68:	e00f      	b.n	8004a8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f9ac 	bl	8004dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a70:	e00b      	b.n	8004a8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f9a8 	bl	8004dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a78:	e007      	b.n	8004a8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f9a4 	bl	8004dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004a88:	e18a      	b.n	8004da0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a8a:	bf00      	nop
    return;
 8004a8c:	e188      	b.n	8004da0 <HAL_UART_IRQHandler+0x5a8>
 8004a8e:	bf00      	nop
 8004a90:	04000120 	.word	0x04000120
 8004a94:	08005727 	.word	0x08005727

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	f040 8143 	bne.w	8004d28 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa6:	f003 0310 	and.w	r3, r3, #16
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 813c 	beq.w	8004d28 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab4:	f003 0310 	and.w	r3, r3, #16
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 8135 	beq.w	8004d28 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2210      	movs	r2, #16
 8004ac4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad0:	2b40      	cmp	r3, #64	; 0x40
 8004ad2:	f040 80b1 	bne.w	8004c38 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ae2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 815c 	beq.w	8004da4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004af6:	429a      	cmp	r2, r3
 8004af8:	f080 8154 	bcs.w	8004da4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	f000 8085 	beq.w	8004c1c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b40:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b48:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b4c:	e841 2300 	strex	r3, r2, [r1]
 8004b50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1da      	bne.n	8004b12 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3308      	adds	r3, #8
 8004b62:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b66:	e853 3f00 	ldrex	r3, [r3]
 8004b6a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b6e:	f023 0301 	bic.w	r3, r3, #1
 8004b72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b80:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b84:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b86:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b88:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b8c:	e841 2300 	strex	r3, r2, [r1]
 8004b90:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1e1      	bne.n	8004b5c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ba2:	e853 3f00 	ldrex	r3, [r3]
 8004ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004bbc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004bc2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004bc4:	e841 2300 	strex	r3, r2, [r1]
 8004bc8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004bca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1e3      	bne.n	8004b98 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bec:	f023 0310 	bic.w	r3, r3, #16
 8004bf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bfe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c00:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e4      	bne.n	8004bdc <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fc fc81 	bl	800151e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f8d3 	bl	8004ddc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c36:	e0b5      	b.n	8004da4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80a7 	beq.w	8004da8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004c5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 80a2 	beq.w	8004da8 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6c:	e853 3f00 	ldrex	r3, [r3]
 8004c70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	461a      	mov	r2, r3
 8004c82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c86:	647b      	str	r3, [r7, #68]	; 0x44
 8004c88:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e4      	bne.n	8004c64 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3308      	adds	r3, #8
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	623b      	str	r3, [r7, #32]
   return(result);
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	f023 0301 	bic.w	r3, r3, #1
 8004cb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3308      	adds	r3, #8
 8004cba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004cbe:	633a      	str	r2, [r7, #48]	; 0x30
 8004cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cc6:	e841 2300 	strex	r3, r2, [r1]
 8004cca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1e3      	bne.n	8004c9a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	e853 3f00 	ldrex	r3, [r3]
 8004cf0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f023 0310 	bic.w	r3, r3, #16
 8004cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	461a      	mov	r2, r3
 8004d02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d06:	61fb      	str	r3, [r7, #28]
 8004d08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0a:	69b9      	ldr	r1, [r7, #24]
 8004d0c:	69fa      	ldr	r2, [r7, #28]
 8004d0e:	e841 2300 	strex	r3, r2, [r1]
 8004d12:	617b      	str	r3, [r7, #20]
   return(result);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1e4      	bne.n	8004ce4 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d1e:	4619      	mov	r1, r3
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f85b 	bl	8004ddc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d26:	e03f      	b.n	8004da8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00e      	beq.n	8004d52 <HAL_UART_IRQHandler+0x55a>
 8004d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d008      	beq.n	8004d52 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 ff43 	bl	8005bd6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d50:	e02d      	b.n	8004dae <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00e      	beq.n	8004d7c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d008      	beq.n	8004d7c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d01c      	beq.n	8004dac <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	4798      	blx	r3
    }
    return;
 8004d7a:	e017      	b.n	8004dac <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d012      	beq.n	8004dae <HAL_UART_IRQHandler+0x5b6>
 8004d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00c      	beq.n	8004dae <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 fd98 	bl	80058ca <UART_EndTransmit_IT>
    return;
 8004d9a:	e008      	b.n	8004dae <HAL_UART_IRQHandler+0x5b6>
      return;
 8004d9c:	bf00      	nop
 8004d9e:	e006      	b.n	8004dae <HAL_UART_IRQHandler+0x5b6>
    return;
 8004da0:	bf00      	nop
 8004da2:	e004      	b.n	8004dae <HAL_UART_IRQHandler+0x5b6>
      return;
 8004da4:	bf00      	nop
 8004da6:	e002      	b.n	8004dae <HAL_UART_IRQHandler+0x5b6>
      return;
 8004da8:	bf00      	nop
 8004daa:	e000      	b.n	8004dae <HAL_UART_IRQHandler+0x5b6>
    return;
 8004dac:	bf00      	nop
  }

}
 8004dae:	37e8      	adds	r7, #232	; 0xe8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b08f      	sub	sp, #60	; 0x3c
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d101      	bne.n	8004e0a <HAL_HalfDuplex_EnableTransmitter+0x16>
 8004e06:	2302      	movs	r3, #2
 8004e08:	e040      	b.n	8004e8c <HAL_HalfDuplex_EnableTransmitter+0x98>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2224      	movs	r2, #36	; 0x24
 8004e16:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	f023 030c 	bic.w	r3, r3, #12
 8004e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e38:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e6      	bne.n	8004e18 <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	e853 3f00 	ldrex	r3, [r3]
 8004e56:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f043 0308 	orr.w	r3, r3, #8
 8004e5e:	633b      	str	r3, [r7, #48]	; 0x30
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	461a      	mov	r2, r3
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	61bb      	str	r3, [r7, #24]
 8004e6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6c:	6979      	ldr	r1, [r7, #20]
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	e841 2300 	strex	r3, r2, [r1]
 8004e74:	613b      	str	r3, [r7, #16]
   return(result);
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1e6      	bne.n	8004e4a <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	373c      	adds	r7, #60	; 0x3c
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b08f      	sub	sp, #60	; 0x3c
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_HalfDuplex_EnableReceiver+0x16>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e040      	b.n	8004f30 <HAL_HalfDuplex_EnableReceiver+0x98>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2224      	movs	r2, #36	; 0x24
 8004eba:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	e853 3f00 	ldrex	r3, [r3]
 8004ec8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f023 030c 	bic.w	r3, r3, #12
 8004ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004edc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ede:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1e6      	bne.n	8004ebc <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	e853 3f00 	ldrex	r3, [r3]
 8004efa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f043 0304 	orr.w	r3, r3, #4
 8004f02:	633b      	str	r3, [r7, #48]	; 0x30
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0c:	61bb      	str	r3, [r7, #24]
 8004f0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f10:	6979      	ldr	r1, [r7, #20]
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	e841 2300 	strex	r3, r2, [r1]
 8004f18:	613b      	str	r3, [r7, #16]
   return(result);
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e6      	bne.n	8004eee <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2220      	movs	r2, #32
 8004f24:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	373c      	adds	r7, #60	; 0x3c
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b088      	sub	sp, #32
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f44:	2300      	movs	r3, #0
 8004f46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	431a      	orrs	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4b8a      	ldr	r3, [pc, #552]	; (8005190 <UART_SetConfig+0x254>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6812      	ldr	r2, [r2, #0]
 8004f6e:	6979      	ldr	r1, [r7, #20]
 8004f70:	430b      	orrs	r3, r1
 8004f72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a78      	ldr	r2, [pc, #480]	; (8005194 <UART_SetConfig+0x258>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d120      	bne.n	8004ffa <UART_SetConfig+0xbe>
 8004fb8:	4b77      	ldr	r3, [pc, #476]	; (8005198 <UART_SetConfig+0x25c>)
 8004fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbc:	f003 0303 	and.w	r3, r3, #3
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d817      	bhi.n	8004ff4 <UART_SetConfig+0xb8>
 8004fc4:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <UART_SetConfig+0x90>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	08004fdd 	.word	0x08004fdd
 8004fd0:	08004fe9 	.word	0x08004fe9
 8004fd4:	08004fef 	.word	0x08004fef
 8004fd8:	08004fe3 	.word	0x08004fe3
 8004fdc:	2300      	movs	r3, #0
 8004fde:	77fb      	strb	r3, [r7, #31]
 8004fe0:	e01d      	b.n	800501e <UART_SetConfig+0xe2>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	77fb      	strb	r3, [r7, #31]
 8004fe6:	e01a      	b.n	800501e <UART_SetConfig+0xe2>
 8004fe8:	2304      	movs	r3, #4
 8004fea:	77fb      	strb	r3, [r7, #31]
 8004fec:	e017      	b.n	800501e <UART_SetConfig+0xe2>
 8004fee:	2308      	movs	r3, #8
 8004ff0:	77fb      	strb	r3, [r7, #31]
 8004ff2:	e014      	b.n	800501e <UART_SetConfig+0xe2>
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	77fb      	strb	r3, [r7, #31]
 8004ff8:	e011      	b.n	800501e <UART_SetConfig+0xe2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a67      	ldr	r2, [pc, #412]	; (800519c <UART_SetConfig+0x260>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d102      	bne.n	800500a <UART_SetConfig+0xce>
 8005004:	2300      	movs	r3, #0
 8005006:	77fb      	strb	r3, [r7, #31]
 8005008:	e009      	b.n	800501e <UART_SetConfig+0xe2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a64      	ldr	r2, [pc, #400]	; (80051a0 <UART_SetConfig+0x264>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d102      	bne.n	800501a <UART_SetConfig+0xde>
 8005014:	2300      	movs	r3, #0
 8005016:	77fb      	strb	r3, [r7, #31]
 8005018:	e001      	b.n	800501e <UART_SetConfig+0xe2>
 800501a:	2310      	movs	r3, #16
 800501c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005026:	d15b      	bne.n	80050e0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005028:	7ffb      	ldrb	r3, [r7, #31]
 800502a:	2b08      	cmp	r3, #8
 800502c:	d827      	bhi.n	800507e <UART_SetConfig+0x142>
 800502e:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <UART_SetConfig+0xf8>)
 8005030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005034:	08005059 	.word	0x08005059
 8005038:	08005061 	.word	0x08005061
 800503c:	08005069 	.word	0x08005069
 8005040:	0800507f 	.word	0x0800507f
 8005044:	0800506f 	.word	0x0800506f
 8005048:	0800507f 	.word	0x0800507f
 800504c:	0800507f 	.word	0x0800507f
 8005050:	0800507f 	.word	0x0800507f
 8005054:	08005077 	.word	0x08005077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005058:	f7fd feb6 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>
 800505c:	61b8      	str	r0, [r7, #24]
        break;
 800505e:	e013      	b.n	8005088 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005060:	f7fd fed4 	bl	8002e0c <HAL_RCC_GetPCLK2Freq>
 8005064:	61b8      	str	r0, [r7, #24]
        break;
 8005066:	e00f      	b.n	8005088 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005068:	4b4e      	ldr	r3, [pc, #312]	; (80051a4 <UART_SetConfig+0x268>)
 800506a:	61bb      	str	r3, [r7, #24]
        break;
 800506c:	e00c      	b.n	8005088 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800506e:	f7fd fe35 	bl	8002cdc <HAL_RCC_GetSysClockFreq>
 8005072:	61b8      	str	r0, [r7, #24]
        break;
 8005074:	e008      	b.n	8005088 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800507a:	61bb      	str	r3, [r7, #24]
        break;
 800507c:	e004      	b.n	8005088 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	77bb      	strb	r3, [r7, #30]
        break;
 8005086:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d074      	beq.n	8005178 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	005a      	lsls	r2, r3, #1
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	085b      	lsrs	r3, r3, #1
 8005098:	441a      	add	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	2b0f      	cmp	r3, #15
 80050aa:	d916      	bls.n	80050da <UART_SetConfig+0x19e>
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b2:	d212      	bcs.n	80050da <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	f023 030f 	bic.w	r3, r3, #15
 80050bc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	085b      	lsrs	r3, r3, #1
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	89fb      	ldrh	r3, [r7, #14]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	89fa      	ldrh	r2, [r7, #14]
 80050d6:	60da      	str	r2, [r3, #12]
 80050d8:	e04e      	b.n	8005178 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	77bb      	strb	r3, [r7, #30]
 80050de:	e04b      	b.n	8005178 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050e0:	7ffb      	ldrb	r3, [r7, #31]
 80050e2:	2b08      	cmp	r3, #8
 80050e4:	d827      	bhi.n	8005136 <UART_SetConfig+0x1fa>
 80050e6:	a201      	add	r2, pc, #4	; (adr r2, 80050ec <UART_SetConfig+0x1b0>)
 80050e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ec:	08005111 	.word	0x08005111
 80050f0:	08005119 	.word	0x08005119
 80050f4:	08005121 	.word	0x08005121
 80050f8:	08005137 	.word	0x08005137
 80050fc:	08005127 	.word	0x08005127
 8005100:	08005137 	.word	0x08005137
 8005104:	08005137 	.word	0x08005137
 8005108:	08005137 	.word	0x08005137
 800510c:	0800512f 	.word	0x0800512f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005110:	f7fd fe5a 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>
 8005114:	61b8      	str	r0, [r7, #24]
        break;
 8005116:	e013      	b.n	8005140 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005118:	f7fd fe78 	bl	8002e0c <HAL_RCC_GetPCLK2Freq>
 800511c:	61b8      	str	r0, [r7, #24]
        break;
 800511e:	e00f      	b.n	8005140 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005120:	4b20      	ldr	r3, [pc, #128]	; (80051a4 <UART_SetConfig+0x268>)
 8005122:	61bb      	str	r3, [r7, #24]
        break;
 8005124:	e00c      	b.n	8005140 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005126:	f7fd fdd9 	bl	8002cdc <HAL_RCC_GetSysClockFreq>
 800512a:	61b8      	str	r0, [r7, #24]
        break;
 800512c:	e008      	b.n	8005140 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800512e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005132:	61bb      	str	r3, [r7, #24]
        break;
 8005134:	e004      	b.n	8005140 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	77bb      	strb	r3, [r7, #30]
        break;
 800513e:	bf00      	nop
    }

    if (pclk != 0U)
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d018      	beq.n	8005178 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	085a      	lsrs	r2, r3, #1
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	441a      	add	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	fbb2 f3f3 	udiv	r3, r2, r3
 8005158:	b29b      	uxth	r3, r3
 800515a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	2b0f      	cmp	r3, #15
 8005160:	d908      	bls.n	8005174 <UART_SetConfig+0x238>
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005168:	d204      	bcs.n	8005174 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	60da      	str	r2, [r3, #12]
 8005172:	e001      	b.n	8005178 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005184:	7fbb      	ldrb	r3, [r7, #30]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3720      	adds	r7, #32
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	efff69f3 	.word	0xefff69f3
 8005194:	40013800 	.word	0x40013800
 8005198:	40021000 	.word	0x40021000
 800519c:	40004400 	.word	0x40004400
 80051a0:	40004800 	.word	0x40004800
 80051a4:	007a1200 	.word	0x007a1200

080051a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00a      	beq.n	8005216 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	f003 0310 	and.w	r3, r3, #16
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d01a      	beq.n	80052be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052a6:	d10a      	bne.n	80052be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	605a      	str	r2, [r3, #4]
  }
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af02      	add	r7, sp, #8
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052fc:	f7fb ffce 	bl	800129c <HAL_GetTick>
 8005300:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	2b08      	cmp	r3, #8
 800530e:	d10e      	bne.n	800532e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005310:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f82d 	bl	800537e <UART_WaitOnFlagUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e023      	b.n	8005376 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b04      	cmp	r3, #4
 800533a:	d10e      	bne.n	800535a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800533c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f817 	bl	800537e <UART_WaitOnFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e00d      	b.n	8005376 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2220      	movs	r2, #32
 800535e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2220      	movs	r2, #32
 8005364:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b09c      	sub	sp, #112	; 0x70
 8005382:	af00      	add	r7, sp, #0
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	603b      	str	r3, [r7, #0]
 800538a:	4613      	mov	r3, r2
 800538c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800538e:	e0a5      	b.n	80054dc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005390:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005396:	f000 80a1 	beq.w	80054dc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800539a:	f7fb ff7f 	bl	800129c <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d302      	bcc.n	80053b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80053aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d13e      	bne.n	800542e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80053be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053c4:	667b      	str	r3, [r7, #100]	; 0x64
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053d0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053d6:	e841 2300 	strex	r3, r2, [r1]
 80053da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80053dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1e6      	bne.n	80053b0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3308      	adds	r3, #8
 80053e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ec:	e853 3f00 	ldrex	r3, [r3]
 80053f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f4:	f023 0301 	bic.w	r3, r3, #1
 80053f8:	663b      	str	r3, [r7, #96]	; 0x60
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3308      	adds	r3, #8
 8005400:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005402:	64ba      	str	r2, [r7, #72]	; 0x48
 8005404:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005406:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005408:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800540a:	e841 2300 	strex	r3, r2, [r1]
 800540e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1e5      	bne.n	80053e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2220      	movs	r2, #32
 800541a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2220      	movs	r2, #32
 8005420:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e067      	b.n	80054fe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0304 	and.w	r3, r3, #4
 8005438:	2b00      	cmp	r3, #0
 800543a:	d04f      	beq.n	80054dc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800544a:	d147      	bne.n	80054dc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005454:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	e853 3f00 	ldrex	r3, [r3]
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800546a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	461a      	mov	r2, r3
 8005472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005474:	637b      	str	r3, [r7, #52]	; 0x34
 8005476:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800547a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800547c:	e841 2300 	strex	r3, r2, [r1]
 8005480:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e6      	bne.n	8005456 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	3308      	adds	r3, #8
 800548e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	e853 3f00 	ldrex	r3, [r3]
 8005496:	613b      	str	r3, [r7, #16]
   return(result);
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f023 0301 	bic.w	r3, r3, #1
 800549e:	66bb      	str	r3, [r7, #104]	; 0x68
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3308      	adds	r3, #8
 80054a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054a8:	623a      	str	r2, [r7, #32]
 80054aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	69f9      	ldr	r1, [r7, #28]
 80054ae:	6a3a      	ldr	r2, [r7, #32]
 80054b0:	e841 2300 	strex	r3, r2, [r1]
 80054b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e5      	bne.n	8005488 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2220      	movs	r2, #32
 80054c0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2220      	movs	r2, #32
 80054c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e010      	b.n	80054fe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69da      	ldr	r2, [r3, #28]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	4013      	ands	r3, r2
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	bf0c      	ite	eq
 80054ec:	2301      	moveq	r3, #1
 80054ee:	2300      	movne	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	461a      	mov	r2, r3
 80054f4:	79fb      	ldrb	r3, [r7, #7]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	f43f af4a 	beq.w	8005390 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3770      	adds	r7, #112	; 0x70
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
	...

08005508 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005508:	b480      	push	{r7}
 800550a:	b091      	sub	sp, #68	; 0x44
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	4613      	mov	r3, r2
 8005514:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	88fa      	ldrh	r2, [r7, #6]
 8005520:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	88fa      	ldrh	r2, [r7, #6]
 8005528:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800553a:	d10e      	bne.n	800555a <UART_Start_Receive_IT+0x52>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d105      	bne.n	8005550 <UART_Start_Receive_IT+0x48>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f240 12ff 	movw	r2, #511	; 0x1ff
 800554a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800554e:	e02d      	b.n	80055ac <UART_Start_Receive_IT+0xa4>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	22ff      	movs	r2, #255	; 0xff
 8005554:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005558:	e028      	b.n	80055ac <UART_Start_Receive_IT+0xa4>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10d      	bne.n	800557e <UART_Start_Receive_IT+0x76>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d104      	bne.n	8005574 <UART_Start_Receive_IT+0x6c>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	22ff      	movs	r2, #255	; 0xff
 800556e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005572:	e01b      	b.n	80055ac <UART_Start_Receive_IT+0xa4>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	227f      	movs	r2, #127	; 0x7f
 8005578:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800557c:	e016      	b.n	80055ac <UART_Start_Receive_IT+0xa4>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005586:	d10d      	bne.n	80055a4 <UART_Start_Receive_IT+0x9c>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d104      	bne.n	800559a <UART_Start_Receive_IT+0x92>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	227f      	movs	r2, #127	; 0x7f
 8005594:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005598:	e008      	b.n	80055ac <UART_Start_Receive_IT+0xa4>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	223f      	movs	r2, #63	; 0x3f
 800559e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055a2:	e003      	b.n	80055ac <UART_Start_Receive_IT+0xa4>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2222      	movs	r2, #34	; 0x22
 80055b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3308      	adds	r3, #8
 80055c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	f043 0301 	orr.w	r3, r3, #1
 80055d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3308      	adds	r3, #8
 80055d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055da:	637a      	str	r2, [r7, #52]	; 0x34
 80055dc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055e2:	e841 2300 	strex	r3, r2, [r1]
 80055e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1e5      	bne.n	80055ba <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f6:	d107      	bne.n	8005608 <UART_Start_Receive_IT+0x100>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d103      	bne.n	8005608 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4a15      	ldr	r2, [pc, #84]	; (8005658 <UART_Start_Receive_IT+0x150>)
 8005604:	665a      	str	r2, [r3, #100]	; 0x64
 8005606:	e002      	b.n	800560e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4a14      	ldr	r2, [pc, #80]	; (800565c <UART_Start_Receive_IT+0x154>)
 800560c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	613b      	str	r3, [r7, #16]
   return(result);
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800562a:	63bb      	str	r3, [r7, #56]	; 0x38
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	461a      	mov	r2, r3
 8005632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005634:	623b      	str	r3, [r7, #32]
 8005636:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	69f9      	ldr	r1, [r7, #28]
 800563a:	6a3a      	ldr	r2, [r7, #32]
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	61bb      	str	r3, [r7, #24]
   return(result);
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e6      	bne.n	8005616 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3744      	adds	r7, #68	; 0x44
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	08005a7b 	.word	0x08005a7b
 800565c:	0800591f 	.word	0x0800591f

08005660 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005660:	b480      	push	{r7}
 8005662:	b095      	sub	sp, #84	; 0x54
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005670:	e853 3f00 	ldrex	r3, [r3]
 8005674:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800567c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005686:	643b      	str	r3, [r7, #64]	; 0x40
 8005688:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800568c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e6      	bne.n	8005668 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3308      	adds	r3, #8
 80056a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	6a3b      	ldr	r3, [r7, #32]
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	f023 0301 	bic.w	r3, r3, #1
 80056b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3308      	adds	r3, #8
 80056b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e5      	bne.n	800569a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d118      	bne.n	8005708 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	e853 3f00 	ldrex	r3, [r3]
 80056e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f023 0310 	bic.w	r3, r3, #16
 80056ea:	647b      	str	r3, [r7, #68]	; 0x44
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	461a      	mov	r2, r3
 80056f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056f4:	61bb      	str	r3, [r7, #24]
 80056f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	6979      	ldr	r1, [r7, #20]
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	613b      	str	r3, [r7, #16]
   return(result);
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e6      	bne.n	80056d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2220      	movs	r2, #32
 800570c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	665a      	str	r2, [r3, #100]	; 0x64
}
 800571a:	bf00      	nop
 800571c:	3754      	adds	r7, #84	; 0x54
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f7ff fb3f 	bl	8004dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800574a:	bf00      	nop
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005752:	b480      	push	{r7}
 8005754:	b08f      	sub	sp, #60	; 0x3c
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800575e:	2b21      	cmp	r3, #33	; 0x21
 8005760:	d14d      	bne.n	80057fe <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005768:	b29b      	uxth	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d132      	bne.n	80057d4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	e853 3f00 	ldrex	r3, [r3]
 800577a:	61fb      	str	r3, [r7, #28]
   return(result);
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005782:	637b      	str	r3, [r7, #52]	; 0x34
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	461a      	mov	r2, r3
 800578a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800578e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005790:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005794:	e841 2300 	strex	r3, r2, [r1]
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1e6      	bne.n	800576e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057b4:	633b      	str	r3, [r7, #48]	; 0x30
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	61bb      	str	r3, [r7, #24]
 80057c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	6979      	ldr	r1, [r7, #20]
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	613b      	str	r3, [r7, #16]
   return(result);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e6      	bne.n	80057a0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80057d2:	e014      	b.n	80057fe <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d8:	781a      	ldrb	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	b292      	uxth	r2, r2
 80057e0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80057fe:	bf00      	nop
 8005800:	373c      	adds	r7, #60	; 0x3c
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800580a:	b480      	push	{r7}
 800580c:	b091      	sub	sp, #68	; 0x44
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005816:	2b21      	cmp	r3, #33	; 0x21
 8005818:	d151      	bne.n	80058be <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005820:	b29b      	uxth	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d132      	bne.n	800588c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	e853 3f00 	ldrex	r3, [r3]
 8005832:	623b      	str	r3, [r7, #32]
   return(result);
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800583a:	63bb      	str	r3, [r7, #56]	; 0x38
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	461a      	mov	r2, r3
 8005842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005844:	633b      	str	r3, [r7, #48]	; 0x30
 8005846:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800584a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e6      	bne.n	8005826 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	e853 3f00 	ldrex	r3, [r3]
 8005864:	60fb      	str	r3, [r7, #12]
   return(result);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800586c:	637b      	str	r3, [r7, #52]	; 0x34
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005876:	61fb      	str	r3, [r7, #28]
 8005878:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587a:	69b9      	ldr	r1, [r7, #24]
 800587c:	69fa      	ldr	r2, [r7, #28]
 800587e:	e841 2300 	strex	r3, r2, [r1]
 8005882:	617b      	str	r3, [r7, #20]
   return(result);
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1e6      	bne.n	8005858 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800588a:	e018      	b.n	80058be <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005890:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005894:	881a      	ldrh	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800589e:	b292      	uxth	r2, r2
 80058a0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a6:	1c9a      	adds	r2, r3, #2
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	3b01      	subs	r3, #1
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80058be:	bf00      	nop
 80058c0:	3744      	adds	r7, #68	; 0x44
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b088      	sub	sp, #32
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	60bb      	str	r3, [r7, #8]
   return(result);
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e6:	61fb      	str	r3, [r7, #28]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	461a      	mov	r2, r3
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f4:	6979      	ldr	r1, [r7, #20]
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	e841 2300 	strex	r3, r2, [r1]
 80058fc:	613b      	str	r3, [r7, #16]
   return(result);
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e6      	bne.n	80058d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2220      	movs	r2, #32
 8005908:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7ff fa4f 	bl	8004db4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005916:	bf00      	nop
 8005918:	3720      	adds	r7, #32
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b096      	sub	sp, #88	; 0x58
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800592c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005934:	2b22      	cmp	r3, #34	; 0x22
 8005936:	f040 8094 	bne.w	8005a62 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005940:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005944:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005948:	b2d9      	uxtb	r1, r3
 800594a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800594e:	b2da      	uxtb	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005954:	400a      	ands	r2, r1
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800596a:	b29b      	uxth	r3, r3
 800596c:	3b01      	subs	r3, #1
 800596e:	b29a      	uxth	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800597c:	b29b      	uxth	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d177      	bne.n	8005a72 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598a:	e853 3f00 	ldrex	r3, [r3]
 800598e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005992:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005996:	653b      	str	r3, [r7, #80]	; 0x50
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	461a      	mov	r2, r3
 800599e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059a0:	647b      	str	r3, [r7, #68]	; 0x44
 80059a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059a8:	e841 2300 	strex	r3, r2, [r1]
 80059ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1e6      	bne.n	8005982 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3308      	adds	r3, #8
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	e853 3f00 	ldrex	r3, [r3]
 80059c2:	623b      	str	r3, [r7, #32]
   return(result);
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	f023 0301 	bic.w	r3, r3, #1
 80059ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3308      	adds	r3, #8
 80059d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059d4:	633a      	str	r2, [r7, #48]	; 0x30
 80059d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059dc:	e841 2300 	strex	r3, r2, [r1]
 80059e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1e5      	bne.n	80059b4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2220      	movs	r2, #32
 80059ec:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d12e      	bne.n	8005a5a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	e853 3f00 	ldrex	r3, [r3]
 8005a0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0310 	bic.w	r3, r3, #16
 8005a16:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a20:	61fb      	str	r3, [r7, #28]
 8005a22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	69b9      	ldr	r1, [r7, #24]
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	e841 2300 	strex	r3, r2, [r1]
 8005a2c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1e6      	bne.n	8005a02 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	f003 0310 	and.w	r3, r3, #16
 8005a3e:	2b10      	cmp	r3, #16
 8005a40:	d103      	bne.n	8005a4a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2210      	movs	r2, #16
 8005a48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7ff f9c2 	bl	8004ddc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a58:	e00b      	b.n	8005a72 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fa ff68 	bl	8000930 <HAL_UART_RxCpltCallback>
}
 8005a60:	e007      	b.n	8005a72 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	699a      	ldr	r2, [r3, #24]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f042 0208 	orr.w	r2, r2, #8
 8005a70:	619a      	str	r2, [r3, #24]
}
 8005a72:	bf00      	nop
 8005a74:	3758      	adds	r7, #88	; 0x58
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b096      	sub	sp, #88	; 0x58
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a88:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a90:	2b22      	cmp	r3, #34	; 0x22
 8005a92:	f040 8094 	bne.w	8005bbe <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a9c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005aa6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005aaa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005aae:	4013      	ands	r3, r2
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aba:	1c9a      	adds	r2, r3, #2
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d177      	bne.n	8005bce <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae6:	e853 3f00 	ldrex	r3, [r3]
 8005aea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	461a      	mov	r2, r3
 8005afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005afc:	643b      	str	r3, [r7, #64]	; 0x40
 8005afe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b04:	e841 2300 	strex	r3, r2, [r1]
 8005b08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1e6      	bne.n	8005ade <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3308      	adds	r3, #8
 8005b16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	e853 3f00 	ldrex	r3, [r3]
 8005b1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	f023 0301 	bic.w	r3, r3, #1
 8005b26:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3308      	adds	r3, #8
 8005b2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b38:	e841 2300 	strex	r3, r2, [r1]
 8005b3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e5      	bne.n	8005b10 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2220      	movs	r2, #32
 8005b48:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d12e      	bne.n	8005bb6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	e853 3f00 	ldrex	r3, [r3]
 8005b6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f023 0310 	bic.w	r3, r3, #16
 8005b72:	647b      	str	r3, [r7, #68]	; 0x44
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b80:	6979      	ldr	r1, [r7, #20]
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	e841 2300 	strex	r3, r2, [r1]
 8005b88:	613b      	str	r3, [r7, #16]
   return(result);
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1e6      	bne.n	8005b5e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	f003 0310 	and.w	r3, r3, #16
 8005b9a:	2b10      	cmp	r3, #16
 8005b9c:	d103      	bne.n	8005ba6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2210      	movs	r2, #16
 8005ba4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005bac:	4619      	mov	r1, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff f914 	bl	8004ddc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005bb4:	e00b      	b.n	8005bce <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7fa feba 	bl	8000930 <HAL_UART_RxCpltCallback>
}
 8005bbc:	e007      	b.n	8005bce <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	699a      	ldr	r2, [r3, #24]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0208 	orr.w	r2, r2, #8
 8005bcc:	619a      	str	r2, [r3, #24]
}
 8005bce:	bf00      	nop
 8005bd0:	3758      	adds	r7, #88	; 0x58
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
	...

08005bec <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b088      	sub	sp, #32
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	71fb      	strb	r3, [r7, #7]
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	71bb      	strb	r3, [r7, #6]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8005bfe:	797b      	ldrb	r3, [r7, #5]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d901      	bls.n	8005c08 <tmc_fillCRC8Table+0x1c>
		return 0;
 8005c04:	2300      	movs	r3, #0
 8005c06:	e09e      	b.n	8005d46 <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 8005c08:	797a      	ldrb	r2, [r7, #5]
 8005c0a:	4951      	ldr	r1, [pc, #324]	; (8005d50 <tmc_fillCRC8Table+0x164>)
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	01db      	lsls	r3, r3, #7
 8005c10:	4413      	add	r3, r2
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	440b      	add	r3, r1
 8005c16:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005c1a:	79fa      	ldrb	r2, [r7, #7]
 8005c1c:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 8005c1e:	797a      	ldrb	r2, [r7, #5]
 8005c20:	494b      	ldr	r1, [pc, #300]	; (8005d50 <tmc_fillCRC8Table+0x164>)
 8005c22:	4613      	mov	r3, r2
 8005c24:	01db      	lsls	r3, r3, #7
 8005c26:	4413      	add	r3, r2
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	440b      	add	r3, r1
 8005c2c:	f203 1301 	addw	r3, r3, #257	; 0x101
 8005c30:	79ba      	ldrb	r2, [r7, #6]
 8005c32:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 8005c34:	797a      	ldrb	r2, [r7, #5]
 8005c36:	4613      	mov	r3, r2
 8005c38:	01db      	lsls	r3, r3, #7
 8005c3a:	4413      	add	r3, r2
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	4a44      	ldr	r2, [pc, #272]	; (8005d50 <tmc_fillCRC8Table+0x164>)
 8005c40:	4413      	add	r3, r2
 8005c42:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 8005c44:	79fb      	ldrb	r3, [r7, #7]
 8005c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c4a:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8005c4c:	4b41      	ldr	r3, [pc, #260]	; (8005d54 <tmc_fillCRC8Table+0x168>)
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	e074      	b.n	8005d3c <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 8005c52:	79bb      	ldrb	r3, [r7, #6]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d004      	beq.n	8005c62 <tmc_fillCRC8Table+0x76>
 8005c58:	6978      	ldr	r0, [r7, #20]
 8005c5a:	f000 f8f7 	bl	8005e4c <flipBitsInBytes>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	e000      	b.n	8005c64 <tmc_fillCRC8Table+0x78>
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 8005c66:	2300      	movs	r3, #0
 8005c68:	613b      	str	r3, [r7, #16]
 8005c6a:	e035      	b.n	8005cd8 <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	0fdb      	lsrs	r3, r3, #31
 8005c70:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <tmc_fillCRC8Table+0x9a>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	e000      	b.n	8005c88 <tmc_fillCRC8Table+0x9c>
 8005c86:	2300      	movs	r3, #0
 8005c88:	69fa      	ldr	r2, [r7, #28]
 8005c8a:	4053      	eors	r3, r2
 8005c8c:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <tmc_fillCRC8Table+0xb2>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	021b      	lsls	r3, r3, #8
 8005c9c:	e000      	b.n	8005ca0 <tmc_fillCRC8Table+0xb4>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	69fa      	ldr	r2, [r7, #28]
 8005ca2:	4053      	eors	r3, r2
 8005ca4:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <tmc_fillCRC8Table+0xca>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	041b      	lsls	r3, r3, #16
 8005cb4:	e000      	b.n	8005cb8 <tmc_fillCRC8Table+0xcc>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	69fa      	ldr	r2, [r7, #28]
 8005cba:	4053      	eors	r3, r2
 8005cbc:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 8005cbe:	7afb      	ldrb	r3, [r7, #11]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <tmc_fillCRC8Table+0xde>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	061b      	lsls	r3, r3, #24
 8005cc8:	e000      	b.n	8005ccc <tmc_fillCRC8Table+0xe0>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	69fa      	ldr	r2, [r7, #28]
 8005cce:	4053      	eors	r3, r2
 8005cd0:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	613b      	str	r3, [r7, #16]
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	2b07      	cmp	r3, #7
 8005cdc:	ddc6      	ble.n	8005c6c <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 8005cde:	79bb      	ldrb	r3, [r7, #6]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d004      	beq.n	8005cee <tmc_fillCRC8Table+0x102>
 8005ce4:	69f8      	ldr	r0, [r7, #28]
 8005ce6:	f000 f8b1 	bl	8005e4c <flipBitsInBytes>
 8005cea:	4603      	mov	r3, r0
 8005cec:	e000      	b.n	8005cf0 <tmc_fillCRC8Table+0x104>
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	1c5a      	adds	r2, r3, #1
 8005cf6:	61ba      	str	r2, [r7, #24]
 8005cf8:	69fa      	ldr	r2, [r7, #28]
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	0a1b      	lsrs	r3, r3, #8
 8005d02:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	61ba      	str	r2, [r7, #24]
 8005d0a:	69fa      	ldr	r2, [r7, #28]
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	0a1b      	lsrs	r3, r3, #8
 8005d14:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	61ba      	str	r2, [r7, #24]
 8005d1c:	69fa      	ldr	r2, [r7, #28]
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	0a1b      	lsrs	r3, r3, #8
 8005d26:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	61ba      	str	r2, [r7, #24]
 8005d2e:	69fa      	ldr	r2, [r7, #28]
 8005d30:	b2d2      	uxtb	r2, r2
 8005d32:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	4a06      	ldr	r2, [pc, #24]	; (8005d58 <tmc_fillCRC8Table+0x16c>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d186      	bne.n	8005c52 <tmc_fillCRC8Table+0x66>
	}

	return 1;
 8005d44:	2301      	movs	r3, #1
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3720      	adds	r7, #32
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	200006d4 	.word	0x200006d4
 8005d54:	03020100 	.word	0x03020100
 8005d58:	04030200 	.word	0x04030200

08005d5c <tmc_CRC8>:
 *     uint8_t *data: A pointer to the data that will be CRC'd.
 *     uint32_t bytes: The length of the data buffer.
 *     uint8_t index: The index of the CRC table to be used.
 */
uint8_t tmc_CRC8(uint8_t *data, uint32_t bytes, uint8_t index)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	4613      	mov	r3, r2
 8005d68:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	75fb      	strb	r3, [r7, #23]
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8005d6e:	79fb      	ldrb	r3, [r7, #7]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d901      	bls.n	8005d78 <tmc_CRC8+0x1c>
		return 0;
 8005d74:	2300      	movs	r3, #0
 8005d76:	e02c      	b.n	8005dd2 <tmc_CRC8+0x76>

	table = &CRCTables[index].table[0];
 8005d78:	79fa      	ldrb	r2, [r7, #7]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	01db      	lsls	r3, r3, #7
 8005d7e:	4413      	add	r3, r2
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	4a16      	ldr	r2, [pc, #88]	; (8005ddc <tmc_CRC8+0x80>)
 8005d84:	4413      	add	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]

	while(bytes--)
 8005d88:	e00b      	b.n	8005da2 <tmc_CRC8+0x46>
		result = table[result ^ *data++];
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	60fa      	str	r2, [r7, #12]
 8005d90:	781a      	ldrb	r2, [r3, #0]
 8005d92:	7dfb      	ldrb	r3, [r7, #23]
 8005d94:	4053      	eors	r3, r2
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	461a      	mov	r2, r3
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	1e5a      	subs	r2, r3, #1
 8005da6:	60ba      	str	r2, [r7, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1ee      	bne.n	8005d8a <tmc_CRC8+0x2e>

	return (CRCTables[index].isReflected)? flipByte(result) : result;
 8005dac:	79fa      	ldrb	r2, [r7, #7]
 8005dae:	490b      	ldr	r1, [pc, #44]	; (8005ddc <tmc_CRC8+0x80>)
 8005db0:	4613      	mov	r3, r2
 8005db2:	01db      	lsls	r3, r3, #7
 8005db4:	4413      	add	r3, r2
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	440b      	add	r3, r1
 8005dba:	f203 1301 	addw	r3, r3, #257	; 0x101
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d005      	beq.n	8005dd0 <tmc_CRC8+0x74>
 8005dc4:	7dfb      	ldrb	r3, [r7, #23]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 f80a 	bl	8005de0 <flipByte>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	e000      	b.n	8005dd2 <tmc_CRC8+0x76>
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	200006d4 	.word	0x200006d4

08005de0 <flipByte>:
	return CRCTables[index].isReflected;
}

// Helper functions
static uint8_t flipByte(uint8_t value)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	71fb      	strb	r3, [r7, #7]
	// swap odd and even bits
	value = ((value >> 1) & 0x55) | ((value & 0x55) << 1);
 8005dea:	79fb      	ldrb	r3, [r7, #7]
 8005dec:	085b      	lsrs	r3, r3, #1
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	b25b      	sxtb	r3, r3
 8005df2:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8005df6:	b25a      	sxtb	r2, r3
 8005df8:	79fb      	ldrb	r3, [r7, #7]
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	b25b      	sxtb	r3, r3
 8005dfe:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8005e02:	b25b      	sxtb	r3, r3
 8005e04:	4313      	orrs	r3, r2
 8005e06:	b25b      	sxtb	r3, r3
 8005e08:	71fb      	strb	r3, [r7, #7]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33) | ((value & 0x33) << 2);
 8005e0a:	79fb      	ldrb	r3, [r7, #7]
 8005e0c:	089b      	lsrs	r3, r3, #2
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	b25b      	sxtb	r3, r3
 8005e12:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8005e16:	b25a      	sxtb	r2, r3
 8005e18:	79fb      	ldrb	r3, [r7, #7]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	b25b      	sxtb	r3, r3
 8005e1e:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8005e22:	b25b      	sxtb	r3, r3
 8005e24:	4313      	orrs	r3, r2
 8005e26:	b25b      	sxtb	r3, r3
 8005e28:	71fb      	strb	r3, [r7, #7]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F) | ((value & 0x0F) << 4);
 8005e2a:	79fb      	ldrb	r3, [r7, #7]
 8005e2c:	091b      	lsrs	r3, r3, #4
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	b25a      	sxtb	r2, r3
 8005e32:	79fb      	ldrb	r3, [r7, #7]
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	b25b      	sxtb	r3, r3
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	b25b      	sxtb	r3, r3
 8005e3c:	71fb      	strb	r3, [r7, #7]

	return value;
 8005e3e:	79fb      	ldrb	r3, [r7, #7]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	085b      	lsrs	r3, r3, #1
 8005e58:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8005e64:	4313      	orrs	r3, r2
 8005e66:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	089b      	lsrs	r3, r3, #2
 8005e6c:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	091b      	lsrs	r3, r3, #4
 8005e80:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	011b      	lsls	r3, r3, #4
 8005e88:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	607b      	str	r3, [r7, #4]

	return value;
 8005e90:	687b      	ldr	r3, [r7, #4]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <tmc2209_writeInt>:
// => CRC wrapper
extern uint8_t tmc2209_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2209_writeInt(TMC2209TypeDef *tmc2209, uint8_t address, int32_t value)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b086      	sub	sp, #24
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	60f8      	str	r0, [r7, #12]
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	607a      	str	r2, [r7, #4]
 8005eaa:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8];

	data[0] = 0x05;
 8005eac:	2305      	movs	r3, #5
 8005eae:	743b      	strb	r3, [r7, #16]
	data[1] = tmc2209->slaveAddress;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8005eb6:	747b      	strb	r3, [r7, #17]
	data[2] = address | TMC_WRITE_BIT;
 8005eb8:	7afb      	ldrb	r3, [r7, #11]
 8005eba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	74bb      	strb	r3, [r7, #18]
	data[3] = (value >> 24) & 0xFF;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	0e1b      	lsrs	r3, r3, #24
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	74fb      	strb	r3, [r7, #19]
	data[4] = (value >> 16) & 0xFF;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	141b      	asrs	r3, r3, #16
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	753b      	strb	r3, [r7, #20]
	data[5] = (value >> 8 ) & 0xFF;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	121b      	asrs	r3, r3, #8
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	757b      	strb	r3, [r7, #21]
	data[6] = (value      ) & 0xFF;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	75bb      	strb	r3, [r7, #22]
	data[7] = tmc2209_CRC8(data, 7);
 8005ee0:	f107 0310 	add.w	r3, r7, #16
 8005ee4:	2107      	movs	r1, #7
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fa f9ea 	bl	80002c0 <tmc2209_CRC8>
 8005eec:	4603      	mov	r3, r0
 8005eee:	75fb      	strb	r3, [r7, #23]

	tmc2209_readWriteArray(tmc2209->config->channel, &data[0], 8, 0);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8005ef8:	f107 0110 	add.w	r1, r7, #16
 8005efc:	2300      	movs	r3, #0
 8005efe:	2208      	movs	r2, #8
 8005f00:	f7fa f9b6 	bl	8000270 <tmc2209_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
 8005f04:	7afb      	ldrb	r3, [r7, #11]
 8005f06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f0a:	72fb      	strb	r3, [r7, #11]
	tmc2209->config->shadowRegister[address] = value;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	7afb      	ldrb	r3, [r7, #11]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	605a      	str	r2, [r3, #4]
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
 8005f1a:	7afb      	ldrb	r3, [r7, #11]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f893 2204 	ldrb.w	r2, [r3, #516]	; 0x204
 8005f24:	7afb      	ldrb	r3, [r7, #11]
 8005f26:	f042 0208 	orr.w	r2, r2, #8
 8005f2a:	b2d1      	uxtb	r1, r2
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	4413      	add	r3, r2
 8005f30:	460a      	mov	r2, r1
 8005f32:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 8005f36:	bf00      	nop
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <tmc2209_readInt>:

int32_t tmc2209_readInt(TMC2209TypeDef *tmc2209, uint8_t address)
{
 8005f3e:	b590      	push	{r4, r7, lr}
 8005f40:	b085      	sub	sp, #20
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	460b      	mov	r3, r1
 8005f48:	70fb      	strb	r3, [r7, #3]
	uint8_t data[8] = { 0 };
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60bb      	str	r3, [r7, #8]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60fb      	str	r3, [r7, #12]

	address = TMC_ADDRESS(address);
 8005f52:	78fb      	ldrb	r3, [r7, #3]
 8005f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f58:	70fb      	strb	r3, [r7, #3]

	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
 8005f5a:	78fb      	ldrb	r3, [r7, #3]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d106      	bne.n	8005f7a <tmc2209_readInt+0x3c>
		return tmc2209->config->shadowRegister[address];
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	78fb      	ldrb	r3, [r7, #3]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	e03f      	b.n	8005ffa <tmc2209_readInt+0xbc>

	data[0] = 0x05;
 8005f7a:	2305      	movs	r3, #5
 8005f7c:	723b      	strb	r3, [r7, #8]
	data[1] = tmc2209->slaveAddress;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8005f84:	727b      	strb	r3, [r7, #9]
	data[2] = address;
 8005f86:	78fb      	ldrb	r3, [r7, #3]
 8005f88:	72bb      	strb	r3, [r7, #10]
	data[3] = tmc2209_CRC8(data, 3);
 8005f8a:	f107 0308 	add.w	r3, r7, #8
 8005f8e:	2103      	movs	r1, #3
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fa f995 	bl	80002c0 <tmc2209_CRC8>
 8005f96:	4603      	mov	r3, r0
 8005f98:	72fb      	strb	r3, [r7, #11]

	tmc2209_readWriteArray(tmc2209->config->channel, data, 4, 8);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8005fa2:	f107 0108 	add.w	r1, r7, #8
 8005fa6:	2308      	movs	r3, #8
 8005fa8:	2204      	movs	r2, #4
 8005faa:	f7fa f961 	bl	8000270 <tmc2209_readWriteArray>

	// Byte 0: Sync nibble correct?
	if (data[0] != 0x05)
 8005fae:	7a3b      	ldrb	r3, [r7, #8]
 8005fb0:	2b05      	cmp	r3, #5
 8005fb2:	d001      	beq.n	8005fb8 <tmc2209_readInt+0x7a>
		return 0;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	e020      	b.n	8005ffa <tmc2209_readInt+0xbc>

	// Byte 1: Master address correct?
	if (data[1] != 0xFF)
 8005fb8:	7a7b      	ldrb	r3, [r7, #9]
 8005fba:	2bff      	cmp	r3, #255	; 0xff
 8005fbc:	d001      	beq.n	8005fc2 <tmc2209_readInt+0x84>
		return 0;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	e01b      	b.n	8005ffa <tmc2209_readInt+0xbc>

	// Byte 2: Address correct?
	if (data[2] != address)
 8005fc2:	7abb      	ldrb	r3, [r7, #10]
 8005fc4:	78fa      	ldrb	r2, [r7, #3]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d001      	beq.n	8005fce <tmc2209_readInt+0x90>
		return 0;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e015      	b.n	8005ffa <tmc2209_readInt+0xbc>

	// Byte 7: CRC correct?
	if (data[7] != tmc2209_CRC8(data, 7))
 8005fce:	7bfc      	ldrb	r4, [r7, #15]
 8005fd0:	f107 0308 	add.w	r3, r7, #8
 8005fd4:	2107      	movs	r1, #7
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fa f972 	bl	80002c0 <tmc2209_CRC8>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	429c      	cmp	r4, r3
 8005fe0:	d001      	beq.n	8005fe6 <tmc2209_readInt+0xa8>
		return 0;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e009      	b.n	8005ffa <tmc2209_readInt+0xbc>

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
 8005fe6:	7afb      	ldrb	r3, [r7, #11]
 8005fe8:	061a      	lsls	r2, r3, #24
 8005fea:	7b3b      	ldrb	r3, [r7, #12]
 8005fec:	041b      	lsls	r3, r3, #16
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	7b7a      	ldrb	r2, [r7, #13]
 8005ff2:	0212      	lsls	r2, r2, #8
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	7bba      	ldrb	r2, [r7, #14]
 8005ff8:	4313      	orrs	r3, r2
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd90      	pop	{r4, r7, pc}
	...

08006004 <tmc2209_init>:

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	607b      	str	r3, [r7, #4]
 800600e:	460b      	mov	r3, r1
 8006010:	72fb      	strb	r3, [r7, #11]
 8006012:	4613      	mov	r3, r2
 8006014:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	7aba      	ldrb	r2, [r7, #10]
 800601a:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2200      	movs	r2, #0
 800602a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	7afa      	ldrb	r2, [r7, #11]
 8006034:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2200      	movs	r2, #0
 800603e:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2200      	movs	r2, #0
 8006046:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8006048:	2300      	movs	r3, #0
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	e017      	b.n	800607e <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 800604e:	4a11      	ldr	r2, [pc, #68]	; (8006094 <tmc2209_init+0x90>)
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	4413      	add	r3, r2
 8006054:	7819      	ldrb	r1, [r3, #0]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	4413      	add	r3, r2
 800605c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006060:	460a      	mov	r2, r1
 8006062:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	6a3a      	ldr	r2, [r7, #32]
 800606a:	4413      	add	r3, r2
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68f9      	ldr	r1, [r7, #12]
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	440b      	add	r3, r1
 8006076:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	3301      	adds	r3, #1
 800607c:	617b      	str	r3, [r7, #20]
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2b7f      	cmp	r3, #127	; 0x7f
 8006082:	d9e4      	bls.n	800604e <tmc2209_init+0x4a>
	}
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	08007888 	.word	0x08007888

08006098 <writeConfiguration>:

static void writeConfiguration(TMC2209TypeDef *tmc2209)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
	uint8_t *ptr = &tmc2209->config->configIndex;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3301      	adds	r3, #1
 80060a6:	60bb      	str	r3, [r7, #8]
	const int32_t *settings;

	if(tmc2209->config->state == CONFIG_RESTORE)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d131      	bne.n	8006116 <writeConfiguration+0x7e>
	{
		settings = tmc2209->config->shadowRegister;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3304      	adds	r3, #4
 80060b8:	60fb      	str	r3, [r7, #12]
		// Find the next restorable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 80060ba:	e005      	b.n	80060c8 <writeConfiguration+0x30>
		{
			(*ptr)++;
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	3301      	adds	r3, #1
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	b25b      	sxtb	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	db3b      	blt.n	800614a <writeConfiguration+0xb2>
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	461a      	mov	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4413      	add	r3, r2
 80060dc:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d0e9      	beq.n	80060bc <writeConfiguration+0x24>
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	461a      	mov	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4413      	add	r3, r2
 80060f2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80060f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d025      	beq.n	800614a <writeConfiguration+0xb2>
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4413      	add	r3, r2
 8006108:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800610c:	f003 0308 	and.w	r3, r3, #8
 8006110:	2b00      	cmp	r3, #0
 8006112:	d0d3      	beq.n	80060bc <writeConfiguration+0x24>
 8006114:	e019      	b.n	800614a <writeConfiguration+0xb2>
		}
	}
	else
	{
		settings = tmc2209->registerResetState;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	3304      	adds	r3, #4
 800611a:	60fb      	str	r3, [r7, #12]
		// Find the next resettable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 800611c:	e005      	b.n	800612a <writeConfiguration+0x92>
		{
			(*ptr)++;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	3301      	adds	r3, #1
 8006124:	b2da      	uxtb	r2, r3
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	b25b      	sxtb	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	db0a      	blt.n	800614a <writeConfiguration+0xb2>
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	461a      	mov	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4413      	add	r3, r2
 800613e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006142:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8006146:	2b02      	cmp	r3, #2
 8006148:	d1e9      	bne.n	800611e <writeConfiguration+0x86>
		}
	}

	if(*ptr < TMC2209_REGISTER_COUNT)
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	b25b      	sxtb	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	db12      	blt.n	800617a <writeConfiguration+0xe2>
	{
		tmc2209_writeInt(tmc2209, *ptr, settings[*ptr]);
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	7819      	ldrb	r1, [r3, #0]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4413      	add	r3, r2
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	461a      	mov	r2, r3
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7ff fe99 	bl	8005e9e <tmc2209_writeInt>
		(*ptr)++;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	3301      	adds	r3, #1
 8006172:	b2da      	uxtb	r2, r3
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	701a      	strb	r2, [r3, #0]
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
		}

		tmc2209->config->state = CONFIG_READY;
	}
}
 8006178:	e013      	b.n	80061a2 <writeConfiguration+0x10a>
		if(tmc2209->config->callback)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006182:	2b00      	cmp	r3, #0
 8006184:	d009      	beq.n	800619a <writeConfiguration+0x102>
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6812      	ldr	r2, [r2, #0]
 8006192:	7812      	ldrb	r2, [r2, #0]
 8006194:	4611      	mov	r1, r2
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	4798      	blx	r3
		tmc2209->config->state = CONFIG_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2200      	movs	r2, #0
 80061a0:	701a      	strb	r2, [r3, #0]
}
 80061a2:	bf00      	nop
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <tmc2209_periodicJob>:

void tmc2209_periodicJob(TMC2209TypeDef *tmc2209, uint32_t tick)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b082      	sub	sp, #8
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
	UNUSED(tick);

	if(tmc2209->config->state != CONFIG_READY)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <tmc2209_periodicJob+0x1c>
	{
		writeConfiguration(tmc2209);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7ff ff6a 	bl	8006098 <writeConfiguration>
		return;
 80061c4:	bf00      	nop
	}
}
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <tmc2209_reset>:
{
	tmc2209->config->callback = (tmc_callback_config) callback;
}

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <tmc2209_reset+0x16>
		return false;
 80061de:	2300      	movs	r3, #0
 80061e0:	e028      	b.n	8006234 <tmc2209_reset+0x68>

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80061e2:	2300      	movs	r3, #0
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	e019      	b.n	800621c <tmc2209_reset+0x50>
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	f023 0308 	bic.w	r3, r3, #8
 80061f8:	b2d9      	uxtb	r1, r3
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006204:	460a      	mov	r2, r1
 8006206:	701a      	strb	r2, [r3, #0]
		tmc2209->config->shadowRegister[i] = 0;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	2200      	movs	r2, #0
 8006214:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	3301      	adds	r3, #1
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b7f      	cmp	r3, #127	; 0x7f
 8006220:	d9e2      	bls.n	80061e8 <tmc2209_reset+0x1c>
	}

	tmc2209->config->state        = CONFIG_RESET;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2201      	movs	r2, #1
 8006228:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2200      	movs	r2, #0
 8006230:	705a      	strb	r2, [r3, #1]

	return true;
 8006232:	2301      	movs	r3, #1
}
 8006234:	4618      	mov	r0, r3
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <tmc2209_restore+0x16>
		return false;
 8006252:	2300      	movs	r3, #0
 8006254:	e008      	b.n	8006268 <tmc2209_restore+0x28>

	tmc2209->config->state        = CONFIG_RESTORE;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2202      	movs	r2, #2
 800625c:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2200      	movs	r2, #0
 8006264:	705a      	strb	r2, [r3, #1]

	return true;
 8006266:	2301      	movs	r3, #1
}
 8006268:	4618      	mov	r0, r3
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <__errno>:
 8006274:	4b01      	ldr	r3, [pc, #4]	; (800627c <__errno+0x8>)
 8006276:	6818      	ldr	r0, [r3, #0]
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	2000000c 	.word	0x2000000c

08006280 <__libc_init_array>:
 8006280:	b570      	push	{r4, r5, r6, lr}
 8006282:	4d0d      	ldr	r5, [pc, #52]	; (80062b8 <__libc_init_array+0x38>)
 8006284:	4c0d      	ldr	r4, [pc, #52]	; (80062bc <__libc_init_array+0x3c>)
 8006286:	1b64      	subs	r4, r4, r5
 8006288:	10a4      	asrs	r4, r4, #2
 800628a:	2600      	movs	r6, #0
 800628c:	42a6      	cmp	r6, r4
 800628e:	d109      	bne.n	80062a4 <__libc_init_array+0x24>
 8006290:	4d0b      	ldr	r5, [pc, #44]	; (80062c0 <__libc_init_array+0x40>)
 8006292:	4c0c      	ldr	r4, [pc, #48]	; (80062c4 <__libc_init_array+0x44>)
 8006294:	f001 f8fa 	bl	800748c <_init>
 8006298:	1b64      	subs	r4, r4, r5
 800629a:	10a4      	asrs	r4, r4, #2
 800629c:	2600      	movs	r6, #0
 800629e:	42a6      	cmp	r6, r4
 80062a0:	d105      	bne.n	80062ae <__libc_init_array+0x2e>
 80062a2:	bd70      	pop	{r4, r5, r6, pc}
 80062a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80062a8:	4798      	blx	r3
 80062aa:	3601      	adds	r6, #1
 80062ac:	e7ee      	b.n	800628c <__libc_init_array+0xc>
 80062ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80062b2:	4798      	blx	r3
 80062b4:	3601      	adds	r6, #1
 80062b6:	e7f2      	b.n	800629e <__libc_init_array+0x1e>
 80062b8:	080079a0 	.word	0x080079a0
 80062bc:	080079a0 	.word	0x080079a0
 80062c0:	080079a0 	.word	0x080079a0
 80062c4:	080079a4 	.word	0x080079a4

080062c8 <memset>:
 80062c8:	4402      	add	r2, r0
 80062ca:	4603      	mov	r3, r0
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d100      	bne.n	80062d2 <memset+0xa>
 80062d0:	4770      	bx	lr
 80062d2:	f803 1b01 	strb.w	r1, [r3], #1
 80062d6:	e7f9      	b.n	80062cc <memset+0x4>

080062d8 <iprintf>:
 80062d8:	b40f      	push	{r0, r1, r2, r3}
 80062da:	4b0a      	ldr	r3, [pc, #40]	; (8006304 <iprintf+0x2c>)
 80062dc:	b513      	push	{r0, r1, r4, lr}
 80062de:	681c      	ldr	r4, [r3, #0]
 80062e0:	b124      	cbz	r4, 80062ec <iprintf+0x14>
 80062e2:	69a3      	ldr	r3, [r4, #24]
 80062e4:	b913      	cbnz	r3, 80062ec <iprintf+0x14>
 80062e6:	4620      	mov	r0, r4
 80062e8:	f000 fb2c 	bl	8006944 <__sinit>
 80062ec:	ab05      	add	r3, sp, #20
 80062ee:	9a04      	ldr	r2, [sp, #16]
 80062f0:	68a1      	ldr	r1, [r4, #8]
 80062f2:	9301      	str	r3, [sp, #4]
 80062f4:	4620      	mov	r0, r4
 80062f6:	f000 fd3d 	bl	8006d74 <_vfiprintf_r>
 80062fa:	b002      	add	sp, #8
 80062fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006300:	b004      	add	sp, #16
 8006302:	4770      	bx	lr
 8006304:	2000000c 	.word	0x2000000c

08006308 <_puts_r>:
 8006308:	b570      	push	{r4, r5, r6, lr}
 800630a:	460e      	mov	r6, r1
 800630c:	4605      	mov	r5, r0
 800630e:	b118      	cbz	r0, 8006318 <_puts_r+0x10>
 8006310:	6983      	ldr	r3, [r0, #24]
 8006312:	b90b      	cbnz	r3, 8006318 <_puts_r+0x10>
 8006314:	f000 fb16 	bl	8006944 <__sinit>
 8006318:	69ab      	ldr	r3, [r5, #24]
 800631a:	68ac      	ldr	r4, [r5, #8]
 800631c:	b913      	cbnz	r3, 8006324 <_puts_r+0x1c>
 800631e:	4628      	mov	r0, r5
 8006320:	f000 fb10 	bl	8006944 <__sinit>
 8006324:	4b2c      	ldr	r3, [pc, #176]	; (80063d8 <_puts_r+0xd0>)
 8006326:	429c      	cmp	r4, r3
 8006328:	d120      	bne.n	800636c <_puts_r+0x64>
 800632a:	686c      	ldr	r4, [r5, #4]
 800632c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800632e:	07db      	lsls	r3, r3, #31
 8006330:	d405      	bmi.n	800633e <_puts_r+0x36>
 8006332:	89a3      	ldrh	r3, [r4, #12]
 8006334:	0598      	lsls	r0, r3, #22
 8006336:	d402      	bmi.n	800633e <_puts_r+0x36>
 8006338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800633a:	f000 fba1 	bl	8006a80 <__retarget_lock_acquire_recursive>
 800633e:	89a3      	ldrh	r3, [r4, #12]
 8006340:	0719      	lsls	r1, r3, #28
 8006342:	d51d      	bpl.n	8006380 <_puts_r+0x78>
 8006344:	6923      	ldr	r3, [r4, #16]
 8006346:	b1db      	cbz	r3, 8006380 <_puts_r+0x78>
 8006348:	3e01      	subs	r6, #1
 800634a:	68a3      	ldr	r3, [r4, #8]
 800634c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006350:	3b01      	subs	r3, #1
 8006352:	60a3      	str	r3, [r4, #8]
 8006354:	bb39      	cbnz	r1, 80063a6 <_puts_r+0x9e>
 8006356:	2b00      	cmp	r3, #0
 8006358:	da38      	bge.n	80063cc <_puts_r+0xc4>
 800635a:	4622      	mov	r2, r4
 800635c:	210a      	movs	r1, #10
 800635e:	4628      	mov	r0, r5
 8006360:	f000 f916 	bl	8006590 <__swbuf_r>
 8006364:	3001      	adds	r0, #1
 8006366:	d011      	beq.n	800638c <_puts_r+0x84>
 8006368:	250a      	movs	r5, #10
 800636a:	e011      	b.n	8006390 <_puts_r+0x88>
 800636c:	4b1b      	ldr	r3, [pc, #108]	; (80063dc <_puts_r+0xd4>)
 800636e:	429c      	cmp	r4, r3
 8006370:	d101      	bne.n	8006376 <_puts_r+0x6e>
 8006372:	68ac      	ldr	r4, [r5, #8]
 8006374:	e7da      	b.n	800632c <_puts_r+0x24>
 8006376:	4b1a      	ldr	r3, [pc, #104]	; (80063e0 <_puts_r+0xd8>)
 8006378:	429c      	cmp	r4, r3
 800637a:	bf08      	it	eq
 800637c:	68ec      	ldreq	r4, [r5, #12]
 800637e:	e7d5      	b.n	800632c <_puts_r+0x24>
 8006380:	4621      	mov	r1, r4
 8006382:	4628      	mov	r0, r5
 8006384:	f000 f956 	bl	8006634 <__swsetup_r>
 8006388:	2800      	cmp	r0, #0
 800638a:	d0dd      	beq.n	8006348 <_puts_r+0x40>
 800638c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006390:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006392:	07da      	lsls	r2, r3, #31
 8006394:	d405      	bmi.n	80063a2 <_puts_r+0x9a>
 8006396:	89a3      	ldrh	r3, [r4, #12]
 8006398:	059b      	lsls	r3, r3, #22
 800639a:	d402      	bmi.n	80063a2 <_puts_r+0x9a>
 800639c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800639e:	f000 fb70 	bl	8006a82 <__retarget_lock_release_recursive>
 80063a2:	4628      	mov	r0, r5
 80063a4:	bd70      	pop	{r4, r5, r6, pc}
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	da04      	bge.n	80063b4 <_puts_r+0xac>
 80063aa:	69a2      	ldr	r2, [r4, #24]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	dc06      	bgt.n	80063be <_puts_r+0xb6>
 80063b0:	290a      	cmp	r1, #10
 80063b2:	d004      	beq.n	80063be <_puts_r+0xb6>
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	6022      	str	r2, [r4, #0]
 80063ba:	7019      	strb	r1, [r3, #0]
 80063bc:	e7c5      	b.n	800634a <_puts_r+0x42>
 80063be:	4622      	mov	r2, r4
 80063c0:	4628      	mov	r0, r5
 80063c2:	f000 f8e5 	bl	8006590 <__swbuf_r>
 80063c6:	3001      	adds	r0, #1
 80063c8:	d1bf      	bne.n	800634a <_puts_r+0x42>
 80063ca:	e7df      	b.n	800638c <_puts_r+0x84>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	250a      	movs	r5, #10
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	6022      	str	r2, [r4, #0]
 80063d4:	701d      	strb	r5, [r3, #0]
 80063d6:	e7db      	b.n	8006390 <_puts_r+0x88>
 80063d8:	0800792c 	.word	0x0800792c
 80063dc:	0800794c 	.word	0x0800794c
 80063e0:	0800790c 	.word	0x0800790c

080063e4 <puts>:
 80063e4:	4b02      	ldr	r3, [pc, #8]	; (80063f0 <puts+0xc>)
 80063e6:	4601      	mov	r1, r0
 80063e8:	6818      	ldr	r0, [r3, #0]
 80063ea:	f7ff bf8d 	b.w	8006308 <_puts_r>
 80063ee:	bf00      	nop
 80063f0:	2000000c 	.word	0x2000000c

080063f4 <setbuf>:
 80063f4:	2900      	cmp	r1, #0
 80063f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063fa:	bf0c      	ite	eq
 80063fc:	2202      	moveq	r2, #2
 80063fe:	2200      	movne	r2, #0
 8006400:	f000 b800 	b.w	8006404 <setvbuf>

08006404 <setvbuf>:
 8006404:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006408:	461d      	mov	r5, r3
 800640a:	4b5d      	ldr	r3, [pc, #372]	; (8006580 <setvbuf+0x17c>)
 800640c:	681f      	ldr	r7, [r3, #0]
 800640e:	4604      	mov	r4, r0
 8006410:	460e      	mov	r6, r1
 8006412:	4690      	mov	r8, r2
 8006414:	b127      	cbz	r7, 8006420 <setvbuf+0x1c>
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	b913      	cbnz	r3, 8006420 <setvbuf+0x1c>
 800641a:	4638      	mov	r0, r7
 800641c:	f000 fa92 	bl	8006944 <__sinit>
 8006420:	4b58      	ldr	r3, [pc, #352]	; (8006584 <setvbuf+0x180>)
 8006422:	429c      	cmp	r4, r3
 8006424:	d167      	bne.n	80064f6 <setvbuf+0xf2>
 8006426:	687c      	ldr	r4, [r7, #4]
 8006428:	f1b8 0f02 	cmp.w	r8, #2
 800642c:	d006      	beq.n	800643c <setvbuf+0x38>
 800642e:	f1b8 0f01 	cmp.w	r8, #1
 8006432:	f200 809f 	bhi.w	8006574 <setvbuf+0x170>
 8006436:	2d00      	cmp	r5, #0
 8006438:	f2c0 809c 	blt.w	8006574 <setvbuf+0x170>
 800643c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800643e:	07db      	lsls	r3, r3, #31
 8006440:	d405      	bmi.n	800644e <setvbuf+0x4a>
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	0598      	lsls	r0, r3, #22
 8006446:	d402      	bmi.n	800644e <setvbuf+0x4a>
 8006448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800644a:	f000 fb19 	bl	8006a80 <__retarget_lock_acquire_recursive>
 800644e:	4621      	mov	r1, r4
 8006450:	4638      	mov	r0, r7
 8006452:	f000 f9e3 	bl	800681c <_fflush_r>
 8006456:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006458:	b141      	cbz	r1, 800646c <setvbuf+0x68>
 800645a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800645e:	4299      	cmp	r1, r3
 8006460:	d002      	beq.n	8006468 <setvbuf+0x64>
 8006462:	4638      	mov	r0, r7
 8006464:	f000 fb7c 	bl	8006b60 <_free_r>
 8006468:	2300      	movs	r3, #0
 800646a:	6363      	str	r3, [r4, #52]	; 0x34
 800646c:	2300      	movs	r3, #0
 800646e:	61a3      	str	r3, [r4, #24]
 8006470:	6063      	str	r3, [r4, #4]
 8006472:	89a3      	ldrh	r3, [r4, #12]
 8006474:	0619      	lsls	r1, r3, #24
 8006476:	d503      	bpl.n	8006480 <setvbuf+0x7c>
 8006478:	6921      	ldr	r1, [r4, #16]
 800647a:	4638      	mov	r0, r7
 800647c:	f000 fb70 	bl	8006b60 <_free_r>
 8006480:	89a3      	ldrh	r3, [r4, #12]
 8006482:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006486:	f023 0303 	bic.w	r3, r3, #3
 800648a:	f1b8 0f02 	cmp.w	r8, #2
 800648e:	81a3      	strh	r3, [r4, #12]
 8006490:	d06c      	beq.n	800656c <setvbuf+0x168>
 8006492:	ab01      	add	r3, sp, #4
 8006494:	466a      	mov	r2, sp
 8006496:	4621      	mov	r1, r4
 8006498:	4638      	mov	r0, r7
 800649a:	f000 faf3 	bl	8006a84 <__swhatbuf_r>
 800649e:	89a3      	ldrh	r3, [r4, #12]
 80064a0:	4318      	orrs	r0, r3
 80064a2:	81a0      	strh	r0, [r4, #12]
 80064a4:	2d00      	cmp	r5, #0
 80064a6:	d130      	bne.n	800650a <setvbuf+0x106>
 80064a8:	9d00      	ldr	r5, [sp, #0]
 80064aa:	4628      	mov	r0, r5
 80064ac:	f000 fb50 	bl	8006b50 <malloc>
 80064b0:	4606      	mov	r6, r0
 80064b2:	2800      	cmp	r0, #0
 80064b4:	d155      	bne.n	8006562 <setvbuf+0x15e>
 80064b6:	f8dd 9000 	ldr.w	r9, [sp]
 80064ba:	45a9      	cmp	r9, r5
 80064bc:	d14a      	bne.n	8006554 <setvbuf+0x150>
 80064be:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80064c2:	2200      	movs	r2, #0
 80064c4:	60a2      	str	r2, [r4, #8]
 80064c6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80064ca:	6022      	str	r2, [r4, #0]
 80064cc:	6122      	str	r2, [r4, #16]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064d4:	6162      	str	r2, [r4, #20]
 80064d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064d8:	f043 0302 	orr.w	r3, r3, #2
 80064dc:	07d2      	lsls	r2, r2, #31
 80064de:	81a3      	strh	r3, [r4, #12]
 80064e0:	d405      	bmi.n	80064ee <setvbuf+0xea>
 80064e2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80064e6:	d102      	bne.n	80064ee <setvbuf+0xea>
 80064e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064ea:	f000 faca 	bl	8006a82 <__retarget_lock_release_recursive>
 80064ee:	4628      	mov	r0, r5
 80064f0:	b003      	add	sp, #12
 80064f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064f6:	4b24      	ldr	r3, [pc, #144]	; (8006588 <setvbuf+0x184>)
 80064f8:	429c      	cmp	r4, r3
 80064fa:	d101      	bne.n	8006500 <setvbuf+0xfc>
 80064fc:	68bc      	ldr	r4, [r7, #8]
 80064fe:	e793      	b.n	8006428 <setvbuf+0x24>
 8006500:	4b22      	ldr	r3, [pc, #136]	; (800658c <setvbuf+0x188>)
 8006502:	429c      	cmp	r4, r3
 8006504:	bf08      	it	eq
 8006506:	68fc      	ldreq	r4, [r7, #12]
 8006508:	e78e      	b.n	8006428 <setvbuf+0x24>
 800650a:	2e00      	cmp	r6, #0
 800650c:	d0cd      	beq.n	80064aa <setvbuf+0xa6>
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	b913      	cbnz	r3, 8006518 <setvbuf+0x114>
 8006512:	4638      	mov	r0, r7
 8006514:	f000 fa16 	bl	8006944 <__sinit>
 8006518:	f1b8 0f01 	cmp.w	r8, #1
 800651c:	bf08      	it	eq
 800651e:	89a3      	ldrheq	r3, [r4, #12]
 8006520:	6026      	str	r6, [r4, #0]
 8006522:	bf04      	itt	eq
 8006524:	f043 0301 	orreq.w	r3, r3, #1
 8006528:	81a3      	strheq	r3, [r4, #12]
 800652a:	89a2      	ldrh	r2, [r4, #12]
 800652c:	f012 0308 	ands.w	r3, r2, #8
 8006530:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006534:	d01c      	beq.n	8006570 <setvbuf+0x16c>
 8006536:	07d3      	lsls	r3, r2, #31
 8006538:	bf41      	itttt	mi
 800653a:	2300      	movmi	r3, #0
 800653c:	426d      	negmi	r5, r5
 800653e:	60a3      	strmi	r3, [r4, #8]
 8006540:	61a5      	strmi	r5, [r4, #24]
 8006542:	bf58      	it	pl
 8006544:	60a5      	strpl	r5, [r4, #8]
 8006546:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006548:	f015 0501 	ands.w	r5, r5, #1
 800654c:	d115      	bne.n	800657a <setvbuf+0x176>
 800654e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006552:	e7c8      	b.n	80064e6 <setvbuf+0xe2>
 8006554:	4648      	mov	r0, r9
 8006556:	f000 fafb 	bl	8006b50 <malloc>
 800655a:	4606      	mov	r6, r0
 800655c:	2800      	cmp	r0, #0
 800655e:	d0ae      	beq.n	80064be <setvbuf+0xba>
 8006560:	464d      	mov	r5, r9
 8006562:	89a3      	ldrh	r3, [r4, #12]
 8006564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006568:	81a3      	strh	r3, [r4, #12]
 800656a:	e7d0      	b.n	800650e <setvbuf+0x10a>
 800656c:	2500      	movs	r5, #0
 800656e:	e7a8      	b.n	80064c2 <setvbuf+0xbe>
 8006570:	60a3      	str	r3, [r4, #8]
 8006572:	e7e8      	b.n	8006546 <setvbuf+0x142>
 8006574:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006578:	e7b9      	b.n	80064ee <setvbuf+0xea>
 800657a:	2500      	movs	r5, #0
 800657c:	e7b7      	b.n	80064ee <setvbuf+0xea>
 800657e:	bf00      	nop
 8006580:	2000000c 	.word	0x2000000c
 8006584:	0800792c 	.word	0x0800792c
 8006588:	0800794c 	.word	0x0800794c
 800658c:	0800790c 	.word	0x0800790c

08006590 <__swbuf_r>:
 8006590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006592:	460e      	mov	r6, r1
 8006594:	4614      	mov	r4, r2
 8006596:	4605      	mov	r5, r0
 8006598:	b118      	cbz	r0, 80065a2 <__swbuf_r+0x12>
 800659a:	6983      	ldr	r3, [r0, #24]
 800659c:	b90b      	cbnz	r3, 80065a2 <__swbuf_r+0x12>
 800659e:	f000 f9d1 	bl	8006944 <__sinit>
 80065a2:	4b21      	ldr	r3, [pc, #132]	; (8006628 <__swbuf_r+0x98>)
 80065a4:	429c      	cmp	r4, r3
 80065a6:	d12b      	bne.n	8006600 <__swbuf_r+0x70>
 80065a8:	686c      	ldr	r4, [r5, #4]
 80065aa:	69a3      	ldr	r3, [r4, #24]
 80065ac:	60a3      	str	r3, [r4, #8]
 80065ae:	89a3      	ldrh	r3, [r4, #12]
 80065b0:	071a      	lsls	r2, r3, #28
 80065b2:	d52f      	bpl.n	8006614 <__swbuf_r+0x84>
 80065b4:	6923      	ldr	r3, [r4, #16]
 80065b6:	b36b      	cbz	r3, 8006614 <__swbuf_r+0x84>
 80065b8:	6923      	ldr	r3, [r4, #16]
 80065ba:	6820      	ldr	r0, [r4, #0]
 80065bc:	1ac0      	subs	r0, r0, r3
 80065be:	6963      	ldr	r3, [r4, #20]
 80065c0:	b2f6      	uxtb	r6, r6
 80065c2:	4283      	cmp	r3, r0
 80065c4:	4637      	mov	r7, r6
 80065c6:	dc04      	bgt.n	80065d2 <__swbuf_r+0x42>
 80065c8:	4621      	mov	r1, r4
 80065ca:	4628      	mov	r0, r5
 80065cc:	f000 f926 	bl	800681c <_fflush_r>
 80065d0:	bb30      	cbnz	r0, 8006620 <__swbuf_r+0x90>
 80065d2:	68a3      	ldr	r3, [r4, #8]
 80065d4:	3b01      	subs	r3, #1
 80065d6:	60a3      	str	r3, [r4, #8]
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	6022      	str	r2, [r4, #0]
 80065de:	701e      	strb	r6, [r3, #0]
 80065e0:	6963      	ldr	r3, [r4, #20]
 80065e2:	3001      	adds	r0, #1
 80065e4:	4283      	cmp	r3, r0
 80065e6:	d004      	beq.n	80065f2 <__swbuf_r+0x62>
 80065e8:	89a3      	ldrh	r3, [r4, #12]
 80065ea:	07db      	lsls	r3, r3, #31
 80065ec:	d506      	bpl.n	80065fc <__swbuf_r+0x6c>
 80065ee:	2e0a      	cmp	r6, #10
 80065f0:	d104      	bne.n	80065fc <__swbuf_r+0x6c>
 80065f2:	4621      	mov	r1, r4
 80065f4:	4628      	mov	r0, r5
 80065f6:	f000 f911 	bl	800681c <_fflush_r>
 80065fa:	b988      	cbnz	r0, 8006620 <__swbuf_r+0x90>
 80065fc:	4638      	mov	r0, r7
 80065fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006600:	4b0a      	ldr	r3, [pc, #40]	; (800662c <__swbuf_r+0x9c>)
 8006602:	429c      	cmp	r4, r3
 8006604:	d101      	bne.n	800660a <__swbuf_r+0x7a>
 8006606:	68ac      	ldr	r4, [r5, #8]
 8006608:	e7cf      	b.n	80065aa <__swbuf_r+0x1a>
 800660a:	4b09      	ldr	r3, [pc, #36]	; (8006630 <__swbuf_r+0xa0>)
 800660c:	429c      	cmp	r4, r3
 800660e:	bf08      	it	eq
 8006610:	68ec      	ldreq	r4, [r5, #12]
 8006612:	e7ca      	b.n	80065aa <__swbuf_r+0x1a>
 8006614:	4621      	mov	r1, r4
 8006616:	4628      	mov	r0, r5
 8006618:	f000 f80c 	bl	8006634 <__swsetup_r>
 800661c:	2800      	cmp	r0, #0
 800661e:	d0cb      	beq.n	80065b8 <__swbuf_r+0x28>
 8006620:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006624:	e7ea      	b.n	80065fc <__swbuf_r+0x6c>
 8006626:	bf00      	nop
 8006628:	0800792c 	.word	0x0800792c
 800662c:	0800794c 	.word	0x0800794c
 8006630:	0800790c 	.word	0x0800790c

08006634 <__swsetup_r>:
 8006634:	4b32      	ldr	r3, [pc, #200]	; (8006700 <__swsetup_r+0xcc>)
 8006636:	b570      	push	{r4, r5, r6, lr}
 8006638:	681d      	ldr	r5, [r3, #0]
 800663a:	4606      	mov	r6, r0
 800663c:	460c      	mov	r4, r1
 800663e:	b125      	cbz	r5, 800664a <__swsetup_r+0x16>
 8006640:	69ab      	ldr	r3, [r5, #24]
 8006642:	b913      	cbnz	r3, 800664a <__swsetup_r+0x16>
 8006644:	4628      	mov	r0, r5
 8006646:	f000 f97d 	bl	8006944 <__sinit>
 800664a:	4b2e      	ldr	r3, [pc, #184]	; (8006704 <__swsetup_r+0xd0>)
 800664c:	429c      	cmp	r4, r3
 800664e:	d10f      	bne.n	8006670 <__swsetup_r+0x3c>
 8006650:	686c      	ldr	r4, [r5, #4]
 8006652:	89a3      	ldrh	r3, [r4, #12]
 8006654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006658:	0719      	lsls	r1, r3, #28
 800665a:	d42c      	bmi.n	80066b6 <__swsetup_r+0x82>
 800665c:	06dd      	lsls	r5, r3, #27
 800665e:	d411      	bmi.n	8006684 <__swsetup_r+0x50>
 8006660:	2309      	movs	r3, #9
 8006662:	6033      	str	r3, [r6, #0]
 8006664:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006668:	81a3      	strh	r3, [r4, #12]
 800666a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800666e:	e03e      	b.n	80066ee <__swsetup_r+0xba>
 8006670:	4b25      	ldr	r3, [pc, #148]	; (8006708 <__swsetup_r+0xd4>)
 8006672:	429c      	cmp	r4, r3
 8006674:	d101      	bne.n	800667a <__swsetup_r+0x46>
 8006676:	68ac      	ldr	r4, [r5, #8]
 8006678:	e7eb      	b.n	8006652 <__swsetup_r+0x1e>
 800667a:	4b24      	ldr	r3, [pc, #144]	; (800670c <__swsetup_r+0xd8>)
 800667c:	429c      	cmp	r4, r3
 800667e:	bf08      	it	eq
 8006680:	68ec      	ldreq	r4, [r5, #12]
 8006682:	e7e6      	b.n	8006652 <__swsetup_r+0x1e>
 8006684:	0758      	lsls	r0, r3, #29
 8006686:	d512      	bpl.n	80066ae <__swsetup_r+0x7a>
 8006688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800668a:	b141      	cbz	r1, 800669e <__swsetup_r+0x6a>
 800668c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006690:	4299      	cmp	r1, r3
 8006692:	d002      	beq.n	800669a <__swsetup_r+0x66>
 8006694:	4630      	mov	r0, r6
 8006696:	f000 fa63 	bl	8006b60 <_free_r>
 800669a:	2300      	movs	r3, #0
 800669c:	6363      	str	r3, [r4, #52]	; 0x34
 800669e:	89a3      	ldrh	r3, [r4, #12]
 80066a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066a4:	81a3      	strh	r3, [r4, #12]
 80066a6:	2300      	movs	r3, #0
 80066a8:	6063      	str	r3, [r4, #4]
 80066aa:	6923      	ldr	r3, [r4, #16]
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	89a3      	ldrh	r3, [r4, #12]
 80066b0:	f043 0308 	orr.w	r3, r3, #8
 80066b4:	81a3      	strh	r3, [r4, #12]
 80066b6:	6923      	ldr	r3, [r4, #16]
 80066b8:	b94b      	cbnz	r3, 80066ce <__swsetup_r+0x9a>
 80066ba:	89a3      	ldrh	r3, [r4, #12]
 80066bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066c4:	d003      	beq.n	80066ce <__swsetup_r+0x9a>
 80066c6:	4621      	mov	r1, r4
 80066c8:	4630      	mov	r0, r6
 80066ca:	f000 fa01 	bl	8006ad0 <__smakebuf_r>
 80066ce:	89a0      	ldrh	r0, [r4, #12]
 80066d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066d4:	f010 0301 	ands.w	r3, r0, #1
 80066d8:	d00a      	beq.n	80066f0 <__swsetup_r+0xbc>
 80066da:	2300      	movs	r3, #0
 80066dc:	60a3      	str	r3, [r4, #8]
 80066de:	6963      	ldr	r3, [r4, #20]
 80066e0:	425b      	negs	r3, r3
 80066e2:	61a3      	str	r3, [r4, #24]
 80066e4:	6923      	ldr	r3, [r4, #16]
 80066e6:	b943      	cbnz	r3, 80066fa <__swsetup_r+0xc6>
 80066e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80066ec:	d1ba      	bne.n	8006664 <__swsetup_r+0x30>
 80066ee:	bd70      	pop	{r4, r5, r6, pc}
 80066f0:	0781      	lsls	r1, r0, #30
 80066f2:	bf58      	it	pl
 80066f4:	6963      	ldrpl	r3, [r4, #20]
 80066f6:	60a3      	str	r3, [r4, #8]
 80066f8:	e7f4      	b.n	80066e4 <__swsetup_r+0xb0>
 80066fa:	2000      	movs	r0, #0
 80066fc:	e7f7      	b.n	80066ee <__swsetup_r+0xba>
 80066fe:	bf00      	nop
 8006700:	2000000c 	.word	0x2000000c
 8006704:	0800792c 	.word	0x0800792c
 8006708:	0800794c 	.word	0x0800794c
 800670c:	0800790c 	.word	0x0800790c

08006710 <__sflush_r>:
 8006710:	898a      	ldrh	r2, [r1, #12]
 8006712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006716:	4605      	mov	r5, r0
 8006718:	0710      	lsls	r0, r2, #28
 800671a:	460c      	mov	r4, r1
 800671c:	d458      	bmi.n	80067d0 <__sflush_r+0xc0>
 800671e:	684b      	ldr	r3, [r1, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	dc05      	bgt.n	8006730 <__sflush_r+0x20>
 8006724:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006726:	2b00      	cmp	r3, #0
 8006728:	dc02      	bgt.n	8006730 <__sflush_r+0x20>
 800672a:	2000      	movs	r0, #0
 800672c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006732:	2e00      	cmp	r6, #0
 8006734:	d0f9      	beq.n	800672a <__sflush_r+0x1a>
 8006736:	2300      	movs	r3, #0
 8006738:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800673c:	682f      	ldr	r7, [r5, #0]
 800673e:	602b      	str	r3, [r5, #0]
 8006740:	d032      	beq.n	80067a8 <__sflush_r+0x98>
 8006742:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006744:	89a3      	ldrh	r3, [r4, #12]
 8006746:	075a      	lsls	r2, r3, #29
 8006748:	d505      	bpl.n	8006756 <__sflush_r+0x46>
 800674a:	6863      	ldr	r3, [r4, #4]
 800674c:	1ac0      	subs	r0, r0, r3
 800674e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006750:	b10b      	cbz	r3, 8006756 <__sflush_r+0x46>
 8006752:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006754:	1ac0      	subs	r0, r0, r3
 8006756:	2300      	movs	r3, #0
 8006758:	4602      	mov	r2, r0
 800675a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800675c:	6a21      	ldr	r1, [r4, #32]
 800675e:	4628      	mov	r0, r5
 8006760:	47b0      	blx	r6
 8006762:	1c43      	adds	r3, r0, #1
 8006764:	89a3      	ldrh	r3, [r4, #12]
 8006766:	d106      	bne.n	8006776 <__sflush_r+0x66>
 8006768:	6829      	ldr	r1, [r5, #0]
 800676a:	291d      	cmp	r1, #29
 800676c:	d82c      	bhi.n	80067c8 <__sflush_r+0xb8>
 800676e:	4a2a      	ldr	r2, [pc, #168]	; (8006818 <__sflush_r+0x108>)
 8006770:	40ca      	lsrs	r2, r1
 8006772:	07d6      	lsls	r6, r2, #31
 8006774:	d528      	bpl.n	80067c8 <__sflush_r+0xb8>
 8006776:	2200      	movs	r2, #0
 8006778:	6062      	str	r2, [r4, #4]
 800677a:	04d9      	lsls	r1, r3, #19
 800677c:	6922      	ldr	r2, [r4, #16]
 800677e:	6022      	str	r2, [r4, #0]
 8006780:	d504      	bpl.n	800678c <__sflush_r+0x7c>
 8006782:	1c42      	adds	r2, r0, #1
 8006784:	d101      	bne.n	800678a <__sflush_r+0x7a>
 8006786:	682b      	ldr	r3, [r5, #0]
 8006788:	b903      	cbnz	r3, 800678c <__sflush_r+0x7c>
 800678a:	6560      	str	r0, [r4, #84]	; 0x54
 800678c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800678e:	602f      	str	r7, [r5, #0]
 8006790:	2900      	cmp	r1, #0
 8006792:	d0ca      	beq.n	800672a <__sflush_r+0x1a>
 8006794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006798:	4299      	cmp	r1, r3
 800679a:	d002      	beq.n	80067a2 <__sflush_r+0x92>
 800679c:	4628      	mov	r0, r5
 800679e:	f000 f9df 	bl	8006b60 <_free_r>
 80067a2:	2000      	movs	r0, #0
 80067a4:	6360      	str	r0, [r4, #52]	; 0x34
 80067a6:	e7c1      	b.n	800672c <__sflush_r+0x1c>
 80067a8:	6a21      	ldr	r1, [r4, #32]
 80067aa:	2301      	movs	r3, #1
 80067ac:	4628      	mov	r0, r5
 80067ae:	47b0      	blx	r6
 80067b0:	1c41      	adds	r1, r0, #1
 80067b2:	d1c7      	bne.n	8006744 <__sflush_r+0x34>
 80067b4:	682b      	ldr	r3, [r5, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d0c4      	beq.n	8006744 <__sflush_r+0x34>
 80067ba:	2b1d      	cmp	r3, #29
 80067bc:	d001      	beq.n	80067c2 <__sflush_r+0xb2>
 80067be:	2b16      	cmp	r3, #22
 80067c0:	d101      	bne.n	80067c6 <__sflush_r+0xb6>
 80067c2:	602f      	str	r7, [r5, #0]
 80067c4:	e7b1      	b.n	800672a <__sflush_r+0x1a>
 80067c6:	89a3      	ldrh	r3, [r4, #12]
 80067c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067cc:	81a3      	strh	r3, [r4, #12]
 80067ce:	e7ad      	b.n	800672c <__sflush_r+0x1c>
 80067d0:	690f      	ldr	r7, [r1, #16]
 80067d2:	2f00      	cmp	r7, #0
 80067d4:	d0a9      	beq.n	800672a <__sflush_r+0x1a>
 80067d6:	0793      	lsls	r3, r2, #30
 80067d8:	680e      	ldr	r6, [r1, #0]
 80067da:	bf08      	it	eq
 80067dc:	694b      	ldreq	r3, [r1, #20]
 80067de:	600f      	str	r7, [r1, #0]
 80067e0:	bf18      	it	ne
 80067e2:	2300      	movne	r3, #0
 80067e4:	eba6 0807 	sub.w	r8, r6, r7
 80067e8:	608b      	str	r3, [r1, #8]
 80067ea:	f1b8 0f00 	cmp.w	r8, #0
 80067ee:	dd9c      	ble.n	800672a <__sflush_r+0x1a>
 80067f0:	6a21      	ldr	r1, [r4, #32]
 80067f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80067f4:	4643      	mov	r3, r8
 80067f6:	463a      	mov	r2, r7
 80067f8:	4628      	mov	r0, r5
 80067fa:	47b0      	blx	r6
 80067fc:	2800      	cmp	r0, #0
 80067fe:	dc06      	bgt.n	800680e <__sflush_r+0xfe>
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006806:	81a3      	strh	r3, [r4, #12]
 8006808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800680c:	e78e      	b.n	800672c <__sflush_r+0x1c>
 800680e:	4407      	add	r7, r0
 8006810:	eba8 0800 	sub.w	r8, r8, r0
 8006814:	e7e9      	b.n	80067ea <__sflush_r+0xda>
 8006816:	bf00      	nop
 8006818:	20400001 	.word	0x20400001

0800681c <_fflush_r>:
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	690b      	ldr	r3, [r1, #16]
 8006820:	4605      	mov	r5, r0
 8006822:	460c      	mov	r4, r1
 8006824:	b913      	cbnz	r3, 800682c <_fflush_r+0x10>
 8006826:	2500      	movs	r5, #0
 8006828:	4628      	mov	r0, r5
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	b118      	cbz	r0, 8006836 <_fflush_r+0x1a>
 800682e:	6983      	ldr	r3, [r0, #24]
 8006830:	b90b      	cbnz	r3, 8006836 <_fflush_r+0x1a>
 8006832:	f000 f887 	bl	8006944 <__sinit>
 8006836:	4b14      	ldr	r3, [pc, #80]	; (8006888 <_fflush_r+0x6c>)
 8006838:	429c      	cmp	r4, r3
 800683a:	d11b      	bne.n	8006874 <_fflush_r+0x58>
 800683c:	686c      	ldr	r4, [r5, #4]
 800683e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d0ef      	beq.n	8006826 <_fflush_r+0xa>
 8006846:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006848:	07d0      	lsls	r0, r2, #31
 800684a:	d404      	bmi.n	8006856 <_fflush_r+0x3a>
 800684c:	0599      	lsls	r1, r3, #22
 800684e:	d402      	bmi.n	8006856 <_fflush_r+0x3a>
 8006850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006852:	f000 f915 	bl	8006a80 <__retarget_lock_acquire_recursive>
 8006856:	4628      	mov	r0, r5
 8006858:	4621      	mov	r1, r4
 800685a:	f7ff ff59 	bl	8006710 <__sflush_r>
 800685e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006860:	07da      	lsls	r2, r3, #31
 8006862:	4605      	mov	r5, r0
 8006864:	d4e0      	bmi.n	8006828 <_fflush_r+0xc>
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	059b      	lsls	r3, r3, #22
 800686a:	d4dd      	bmi.n	8006828 <_fflush_r+0xc>
 800686c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800686e:	f000 f908 	bl	8006a82 <__retarget_lock_release_recursive>
 8006872:	e7d9      	b.n	8006828 <_fflush_r+0xc>
 8006874:	4b05      	ldr	r3, [pc, #20]	; (800688c <_fflush_r+0x70>)
 8006876:	429c      	cmp	r4, r3
 8006878:	d101      	bne.n	800687e <_fflush_r+0x62>
 800687a:	68ac      	ldr	r4, [r5, #8]
 800687c:	e7df      	b.n	800683e <_fflush_r+0x22>
 800687e:	4b04      	ldr	r3, [pc, #16]	; (8006890 <_fflush_r+0x74>)
 8006880:	429c      	cmp	r4, r3
 8006882:	bf08      	it	eq
 8006884:	68ec      	ldreq	r4, [r5, #12]
 8006886:	e7da      	b.n	800683e <_fflush_r+0x22>
 8006888:	0800792c 	.word	0x0800792c
 800688c:	0800794c 	.word	0x0800794c
 8006890:	0800790c 	.word	0x0800790c

08006894 <std>:
 8006894:	2300      	movs	r3, #0
 8006896:	b510      	push	{r4, lr}
 8006898:	4604      	mov	r4, r0
 800689a:	e9c0 3300 	strd	r3, r3, [r0]
 800689e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068a2:	6083      	str	r3, [r0, #8]
 80068a4:	8181      	strh	r1, [r0, #12]
 80068a6:	6643      	str	r3, [r0, #100]	; 0x64
 80068a8:	81c2      	strh	r2, [r0, #14]
 80068aa:	6183      	str	r3, [r0, #24]
 80068ac:	4619      	mov	r1, r3
 80068ae:	2208      	movs	r2, #8
 80068b0:	305c      	adds	r0, #92	; 0x5c
 80068b2:	f7ff fd09 	bl	80062c8 <memset>
 80068b6:	4b05      	ldr	r3, [pc, #20]	; (80068cc <std+0x38>)
 80068b8:	6263      	str	r3, [r4, #36]	; 0x24
 80068ba:	4b05      	ldr	r3, [pc, #20]	; (80068d0 <std+0x3c>)
 80068bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80068be:	4b05      	ldr	r3, [pc, #20]	; (80068d4 <std+0x40>)
 80068c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068c2:	4b05      	ldr	r3, [pc, #20]	; (80068d8 <std+0x44>)
 80068c4:	6224      	str	r4, [r4, #32]
 80068c6:	6323      	str	r3, [r4, #48]	; 0x30
 80068c8:	bd10      	pop	{r4, pc}
 80068ca:	bf00      	nop
 80068cc:	0800731d 	.word	0x0800731d
 80068d0:	0800733f 	.word	0x0800733f
 80068d4:	08007377 	.word	0x08007377
 80068d8:	0800739b 	.word	0x0800739b

080068dc <_cleanup_r>:
 80068dc:	4901      	ldr	r1, [pc, #4]	; (80068e4 <_cleanup_r+0x8>)
 80068de:	f000 b8af 	b.w	8006a40 <_fwalk_reent>
 80068e2:	bf00      	nop
 80068e4:	0800681d 	.word	0x0800681d

080068e8 <__sfmoreglue>:
 80068e8:	b570      	push	{r4, r5, r6, lr}
 80068ea:	2268      	movs	r2, #104	; 0x68
 80068ec:	1e4d      	subs	r5, r1, #1
 80068ee:	4355      	muls	r5, r2
 80068f0:	460e      	mov	r6, r1
 80068f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80068f6:	f000 f99f 	bl	8006c38 <_malloc_r>
 80068fa:	4604      	mov	r4, r0
 80068fc:	b140      	cbz	r0, 8006910 <__sfmoreglue+0x28>
 80068fe:	2100      	movs	r1, #0
 8006900:	e9c0 1600 	strd	r1, r6, [r0]
 8006904:	300c      	adds	r0, #12
 8006906:	60a0      	str	r0, [r4, #8]
 8006908:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800690c:	f7ff fcdc 	bl	80062c8 <memset>
 8006910:	4620      	mov	r0, r4
 8006912:	bd70      	pop	{r4, r5, r6, pc}

08006914 <__sfp_lock_acquire>:
 8006914:	4801      	ldr	r0, [pc, #4]	; (800691c <__sfp_lock_acquire+0x8>)
 8006916:	f000 b8b3 	b.w	8006a80 <__retarget_lock_acquire_recursive>
 800691a:	bf00      	nop
 800691c:	200008d9 	.word	0x200008d9

08006920 <__sfp_lock_release>:
 8006920:	4801      	ldr	r0, [pc, #4]	; (8006928 <__sfp_lock_release+0x8>)
 8006922:	f000 b8ae 	b.w	8006a82 <__retarget_lock_release_recursive>
 8006926:	bf00      	nop
 8006928:	200008d9 	.word	0x200008d9

0800692c <__sinit_lock_acquire>:
 800692c:	4801      	ldr	r0, [pc, #4]	; (8006934 <__sinit_lock_acquire+0x8>)
 800692e:	f000 b8a7 	b.w	8006a80 <__retarget_lock_acquire_recursive>
 8006932:	bf00      	nop
 8006934:	200008da 	.word	0x200008da

08006938 <__sinit_lock_release>:
 8006938:	4801      	ldr	r0, [pc, #4]	; (8006940 <__sinit_lock_release+0x8>)
 800693a:	f000 b8a2 	b.w	8006a82 <__retarget_lock_release_recursive>
 800693e:	bf00      	nop
 8006940:	200008da 	.word	0x200008da

08006944 <__sinit>:
 8006944:	b510      	push	{r4, lr}
 8006946:	4604      	mov	r4, r0
 8006948:	f7ff fff0 	bl	800692c <__sinit_lock_acquire>
 800694c:	69a3      	ldr	r3, [r4, #24]
 800694e:	b11b      	cbz	r3, 8006958 <__sinit+0x14>
 8006950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006954:	f7ff bff0 	b.w	8006938 <__sinit_lock_release>
 8006958:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800695c:	6523      	str	r3, [r4, #80]	; 0x50
 800695e:	4b13      	ldr	r3, [pc, #76]	; (80069ac <__sinit+0x68>)
 8006960:	4a13      	ldr	r2, [pc, #76]	; (80069b0 <__sinit+0x6c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	62a2      	str	r2, [r4, #40]	; 0x28
 8006966:	42a3      	cmp	r3, r4
 8006968:	bf04      	itt	eq
 800696a:	2301      	moveq	r3, #1
 800696c:	61a3      	streq	r3, [r4, #24]
 800696e:	4620      	mov	r0, r4
 8006970:	f000 f820 	bl	80069b4 <__sfp>
 8006974:	6060      	str	r0, [r4, #4]
 8006976:	4620      	mov	r0, r4
 8006978:	f000 f81c 	bl	80069b4 <__sfp>
 800697c:	60a0      	str	r0, [r4, #8]
 800697e:	4620      	mov	r0, r4
 8006980:	f000 f818 	bl	80069b4 <__sfp>
 8006984:	2200      	movs	r2, #0
 8006986:	60e0      	str	r0, [r4, #12]
 8006988:	2104      	movs	r1, #4
 800698a:	6860      	ldr	r0, [r4, #4]
 800698c:	f7ff ff82 	bl	8006894 <std>
 8006990:	68a0      	ldr	r0, [r4, #8]
 8006992:	2201      	movs	r2, #1
 8006994:	2109      	movs	r1, #9
 8006996:	f7ff ff7d 	bl	8006894 <std>
 800699a:	68e0      	ldr	r0, [r4, #12]
 800699c:	2202      	movs	r2, #2
 800699e:	2112      	movs	r1, #18
 80069a0:	f7ff ff78 	bl	8006894 <std>
 80069a4:	2301      	movs	r3, #1
 80069a6:	61a3      	str	r3, [r4, #24]
 80069a8:	e7d2      	b.n	8006950 <__sinit+0xc>
 80069aa:	bf00      	nop
 80069ac:	08007908 	.word	0x08007908
 80069b0:	080068dd 	.word	0x080068dd

080069b4 <__sfp>:
 80069b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b6:	4607      	mov	r7, r0
 80069b8:	f7ff ffac 	bl	8006914 <__sfp_lock_acquire>
 80069bc:	4b1e      	ldr	r3, [pc, #120]	; (8006a38 <__sfp+0x84>)
 80069be:	681e      	ldr	r6, [r3, #0]
 80069c0:	69b3      	ldr	r3, [r6, #24]
 80069c2:	b913      	cbnz	r3, 80069ca <__sfp+0x16>
 80069c4:	4630      	mov	r0, r6
 80069c6:	f7ff ffbd 	bl	8006944 <__sinit>
 80069ca:	3648      	adds	r6, #72	; 0x48
 80069cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	d503      	bpl.n	80069dc <__sfp+0x28>
 80069d4:	6833      	ldr	r3, [r6, #0]
 80069d6:	b30b      	cbz	r3, 8006a1c <__sfp+0x68>
 80069d8:	6836      	ldr	r6, [r6, #0]
 80069da:	e7f7      	b.n	80069cc <__sfp+0x18>
 80069dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80069e0:	b9d5      	cbnz	r5, 8006a18 <__sfp+0x64>
 80069e2:	4b16      	ldr	r3, [pc, #88]	; (8006a3c <__sfp+0x88>)
 80069e4:	60e3      	str	r3, [r4, #12]
 80069e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80069ea:	6665      	str	r5, [r4, #100]	; 0x64
 80069ec:	f000 f847 	bl	8006a7e <__retarget_lock_init_recursive>
 80069f0:	f7ff ff96 	bl	8006920 <__sfp_lock_release>
 80069f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80069f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80069fc:	6025      	str	r5, [r4, #0]
 80069fe:	61a5      	str	r5, [r4, #24]
 8006a00:	2208      	movs	r2, #8
 8006a02:	4629      	mov	r1, r5
 8006a04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a08:	f7ff fc5e 	bl	80062c8 <memset>
 8006a0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a14:	4620      	mov	r0, r4
 8006a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a18:	3468      	adds	r4, #104	; 0x68
 8006a1a:	e7d9      	b.n	80069d0 <__sfp+0x1c>
 8006a1c:	2104      	movs	r1, #4
 8006a1e:	4638      	mov	r0, r7
 8006a20:	f7ff ff62 	bl	80068e8 <__sfmoreglue>
 8006a24:	4604      	mov	r4, r0
 8006a26:	6030      	str	r0, [r6, #0]
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d1d5      	bne.n	80069d8 <__sfp+0x24>
 8006a2c:	f7ff ff78 	bl	8006920 <__sfp_lock_release>
 8006a30:	230c      	movs	r3, #12
 8006a32:	603b      	str	r3, [r7, #0]
 8006a34:	e7ee      	b.n	8006a14 <__sfp+0x60>
 8006a36:	bf00      	nop
 8006a38:	08007908 	.word	0x08007908
 8006a3c:	ffff0001 	.word	0xffff0001

08006a40 <_fwalk_reent>:
 8006a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a44:	4606      	mov	r6, r0
 8006a46:	4688      	mov	r8, r1
 8006a48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a4c:	2700      	movs	r7, #0
 8006a4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a52:	f1b9 0901 	subs.w	r9, r9, #1
 8006a56:	d505      	bpl.n	8006a64 <_fwalk_reent+0x24>
 8006a58:	6824      	ldr	r4, [r4, #0]
 8006a5a:	2c00      	cmp	r4, #0
 8006a5c:	d1f7      	bne.n	8006a4e <_fwalk_reent+0xe>
 8006a5e:	4638      	mov	r0, r7
 8006a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a64:	89ab      	ldrh	r3, [r5, #12]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d907      	bls.n	8006a7a <_fwalk_reent+0x3a>
 8006a6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	d003      	beq.n	8006a7a <_fwalk_reent+0x3a>
 8006a72:	4629      	mov	r1, r5
 8006a74:	4630      	mov	r0, r6
 8006a76:	47c0      	blx	r8
 8006a78:	4307      	orrs	r7, r0
 8006a7a:	3568      	adds	r5, #104	; 0x68
 8006a7c:	e7e9      	b.n	8006a52 <_fwalk_reent+0x12>

08006a7e <__retarget_lock_init_recursive>:
 8006a7e:	4770      	bx	lr

08006a80 <__retarget_lock_acquire_recursive>:
 8006a80:	4770      	bx	lr

08006a82 <__retarget_lock_release_recursive>:
 8006a82:	4770      	bx	lr

08006a84 <__swhatbuf_r>:
 8006a84:	b570      	push	{r4, r5, r6, lr}
 8006a86:	460e      	mov	r6, r1
 8006a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a8c:	2900      	cmp	r1, #0
 8006a8e:	b096      	sub	sp, #88	; 0x58
 8006a90:	4614      	mov	r4, r2
 8006a92:	461d      	mov	r5, r3
 8006a94:	da08      	bge.n	8006aa8 <__swhatbuf_r+0x24>
 8006a96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	602a      	str	r2, [r5, #0]
 8006a9e:	061a      	lsls	r2, r3, #24
 8006aa0:	d410      	bmi.n	8006ac4 <__swhatbuf_r+0x40>
 8006aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aa6:	e00e      	b.n	8006ac6 <__swhatbuf_r+0x42>
 8006aa8:	466a      	mov	r2, sp
 8006aaa:	f000 fc9d 	bl	80073e8 <_fstat_r>
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	dbf1      	blt.n	8006a96 <__swhatbuf_r+0x12>
 8006ab2:	9a01      	ldr	r2, [sp, #4]
 8006ab4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ab8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006abc:	425a      	negs	r2, r3
 8006abe:	415a      	adcs	r2, r3
 8006ac0:	602a      	str	r2, [r5, #0]
 8006ac2:	e7ee      	b.n	8006aa2 <__swhatbuf_r+0x1e>
 8006ac4:	2340      	movs	r3, #64	; 0x40
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	6023      	str	r3, [r4, #0]
 8006aca:	b016      	add	sp, #88	; 0x58
 8006acc:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ad0 <__smakebuf_r>:
 8006ad0:	898b      	ldrh	r3, [r1, #12]
 8006ad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ad4:	079d      	lsls	r5, r3, #30
 8006ad6:	4606      	mov	r6, r0
 8006ad8:	460c      	mov	r4, r1
 8006ada:	d507      	bpl.n	8006aec <__smakebuf_r+0x1c>
 8006adc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	6123      	str	r3, [r4, #16]
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	6163      	str	r3, [r4, #20]
 8006ae8:	b002      	add	sp, #8
 8006aea:	bd70      	pop	{r4, r5, r6, pc}
 8006aec:	ab01      	add	r3, sp, #4
 8006aee:	466a      	mov	r2, sp
 8006af0:	f7ff ffc8 	bl	8006a84 <__swhatbuf_r>
 8006af4:	9900      	ldr	r1, [sp, #0]
 8006af6:	4605      	mov	r5, r0
 8006af8:	4630      	mov	r0, r6
 8006afa:	f000 f89d 	bl	8006c38 <_malloc_r>
 8006afe:	b948      	cbnz	r0, 8006b14 <__smakebuf_r+0x44>
 8006b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b04:	059a      	lsls	r2, r3, #22
 8006b06:	d4ef      	bmi.n	8006ae8 <__smakebuf_r+0x18>
 8006b08:	f023 0303 	bic.w	r3, r3, #3
 8006b0c:	f043 0302 	orr.w	r3, r3, #2
 8006b10:	81a3      	strh	r3, [r4, #12]
 8006b12:	e7e3      	b.n	8006adc <__smakebuf_r+0xc>
 8006b14:	4b0d      	ldr	r3, [pc, #52]	; (8006b4c <__smakebuf_r+0x7c>)
 8006b16:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b18:	89a3      	ldrh	r3, [r4, #12]
 8006b1a:	6020      	str	r0, [r4, #0]
 8006b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b20:	81a3      	strh	r3, [r4, #12]
 8006b22:	9b00      	ldr	r3, [sp, #0]
 8006b24:	6163      	str	r3, [r4, #20]
 8006b26:	9b01      	ldr	r3, [sp, #4]
 8006b28:	6120      	str	r0, [r4, #16]
 8006b2a:	b15b      	cbz	r3, 8006b44 <__smakebuf_r+0x74>
 8006b2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b30:	4630      	mov	r0, r6
 8006b32:	f000 fc6b 	bl	800740c <_isatty_r>
 8006b36:	b128      	cbz	r0, 8006b44 <__smakebuf_r+0x74>
 8006b38:	89a3      	ldrh	r3, [r4, #12]
 8006b3a:	f023 0303 	bic.w	r3, r3, #3
 8006b3e:	f043 0301 	orr.w	r3, r3, #1
 8006b42:	81a3      	strh	r3, [r4, #12]
 8006b44:	89a0      	ldrh	r0, [r4, #12]
 8006b46:	4305      	orrs	r5, r0
 8006b48:	81a5      	strh	r5, [r4, #12]
 8006b4a:	e7cd      	b.n	8006ae8 <__smakebuf_r+0x18>
 8006b4c:	080068dd 	.word	0x080068dd

08006b50 <malloc>:
 8006b50:	4b02      	ldr	r3, [pc, #8]	; (8006b5c <malloc+0xc>)
 8006b52:	4601      	mov	r1, r0
 8006b54:	6818      	ldr	r0, [r3, #0]
 8006b56:	f000 b86f 	b.w	8006c38 <_malloc_r>
 8006b5a:	bf00      	nop
 8006b5c:	2000000c 	.word	0x2000000c

08006b60 <_free_r>:
 8006b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b62:	2900      	cmp	r1, #0
 8006b64:	d044      	beq.n	8006bf0 <_free_r+0x90>
 8006b66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b6a:	9001      	str	r0, [sp, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f1a1 0404 	sub.w	r4, r1, #4
 8006b72:	bfb8      	it	lt
 8006b74:	18e4      	addlt	r4, r4, r3
 8006b76:	f000 fc6b 	bl	8007450 <__malloc_lock>
 8006b7a:	4a1e      	ldr	r2, [pc, #120]	; (8006bf4 <_free_r+0x94>)
 8006b7c:	9801      	ldr	r0, [sp, #4]
 8006b7e:	6813      	ldr	r3, [r2, #0]
 8006b80:	b933      	cbnz	r3, 8006b90 <_free_r+0x30>
 8006b82:	6063      	str	r3, [r4, #4]
 8006b84:	6014      	str	r4, [r2, #0]
 8006b86:	b003      	add	sp, #12
 8006b88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b8c:	f000 bc66 	b.w	800745c <__malloc_unlock>
 8006b90:	42a3      	cmp	r3, r4
 8006b92:	d908      	bls.n	8006ba6 <_free_r+0x46>
 8006b94:	6825      	ldr	r5, [r4, #0]
 8006b96:	1961      	adds	r1, r4, r5
 8006b98:	428b      	cmp	r3, r1
 8006b9a:	bf01      	itttt	eq
 8006b9c:	6819      	ldreq	r1, [r3, #0]
 8006b9e:	685b      	ldreq	r3, [r3, #4]
 8006ba0:	1949      	addeq	r1, r1, r5
 8006ba2:	6021      	streq	r1, [r4, #0]
 8006ba4:	e7ed      	b.n	8006b82 <_free_r+0x22>
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	b10b      	cbz	r3, 8006bb0 <_free_r+0x50>
 8006bac:	42a3      	cmp	r3, r4
 8006bae:	d9fa      	bls.n	8006ba6 <_free_r+0x46>
 8006bb0:	6811      	ldr	r1, [r2, #0]
 8006bb2:	1855      	adds	r5, r2, r1
 8006bb4:	42a5      	cmp	r5, r4
 8006bb6:	d10b      	bne.n	8006bd0 <_free_r+0x70>
 8006bb8:	6824      	ldr	r4, [r4, #0]
 8006bba:	4421      	add	r1, r4
 8006bbc:	1854      	adds	r4, r2, r1
 8006bbe:	42a3      	cmp	r3, r4
 8006bc0:	6011      	str	r1, [r2, #0]
 8006bc2:	d1e0      	bne.n	8006b86 <_free_r+0x26>
 8006bc4:	681c      	ldr	r4, [r3, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	6053      	str	r3, [r2, #4]
 8006bca:	4421      	add	r1, r4
 8006bcc:	6011      	str	r1, [r2, #0]
 8006bce:	e7da      	b.n	8006b86 <_free_r+0x26>
 8006bd0:	d902      	bls.n	8006bd8 <_free_r+0x78>
 8006bd2:	230c      	movs	r3, #12
 8006bd4:	6003      	str	r3, [r0, #0]
 8006bd6:	e7d6      	b.n	8006b86 <_free_r+0x26>
 8006bd8:	6825      	ldr	r5, [r4, #0]
 8006bda:	1961      	adds	r1, r4, r5
 8006bdc:	428b      	cmp	r3, r1
 8006bde:	bf04      	itt	eq
 8006be0:	6819      	ldreq	r1, [r3, #0]
 8006be2:	685b      	ldreq	r3, [r3, #4]
 8006be4:	6063      	str	r3, [r4, #4]
 8006be6:	bf04      	itt	eq
 8006be8:	1949      	addeq	r1, r1, r5
 8006bea:	6021      	streq	r1, [r4, #0]
 8006bec:	6054      	str	r4, [r2, #4]
 8006bee:	e7ca      	b.n	8006b86 <_free_r+0x26>
 8006bf0:	b003      	add	sp, #12
 8006bf2:	bd30      	pop	{r4, r5, pc}
 8006bf4:	200008dc 	.word	0x200008dc

08006bf8 <sbrk_aligned>:
 8006bf8:	b570      	push	{r4, r5, r6, lr}
 8006bfa:	4e0e      	ldr	r6, [pc, #56]	; (8006c34 <sbrk_aligned+0x3c>)
 8006bfc:	460c      	mov	r4, r1
 8006bfe:	6831      	ldr	r1, [r6, #0]
 8006c00:	4605      	mov	r5, r0
 8006c02:	b911      	cbnz	r1, 8006c0a <sbrk_aligned+0x12>
 8006c04:	f000 fb7a 	bl	80072fc <_sbrk_r>
 8006c08:	6030      	str	r0, [r6, #0]
 8006c0a:	4621      	mov	r1, r4
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	f000 fb75 	bl	80072fc <_sbrk_r>
 8006c12:	1c43      	adds	r3, r0, #1
 8006c14:	d00a      	beq.n	8006c2c <sbrk_aligned+0x34>
 8006c16:	1cc4      	adds	r4, r0, #3
 8006c18:	f024 0403 	bic.w	r4, r4, #3
 8006c1c:	42a0      	cmp	r0, r4
 8006c1e:	d007      	beq.n	8006c30 <sbrk_aligned+0x38>
 8006c20:	1a21      	subs	r1, r4, r0
 8006c22:	4628      	mov	r0, r5
 8006c24:	f000 fb6a 	bl	80072fc <_sbrk_r>
 8006c28:	3001      	adds	r0, #1
 8006c2a:	d101      	bne.n	8006c30 <sbrk_aligned+0x38>
 8006c2c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006c30:	4620      	mov	r0, r4
 8006c32:	bd70      	pop	{r4, r5, r6, pc}
 8006c34:	200008e0 	.word	0x200008e0

08006c38 <_malloc_r>:
 8006c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c3c:	1ccd      	adds	r5, r1, #3
 8006c3e:	f025 0503 	bic.w	r5, r5, #3
 8006c42:	3508      	adds	r5, #8
 8006c44:	2d0c      	cmp	r5, #12
 8006c46:	bf38      	it	cc
 8006c48:	250c      	movcc	r5, #12
 8006c4a:	2d00      	cmp	r5, #0
 8006c4c:	4607      	mov	r7, r0
 8006c4e:	db01      	blt.n	8006c54 <_malloc_r+0x1c>
 8006c50:	42a9      	cmp	r1, r5
 8006c52:	d905      	bls.n	8006c60 <_malloc_r+0x28>
 8006c54:	230c      	movs	r3, #12
 8006c56:	603b      	str	r3, [r7, #0]
 8006c58:	2600      	movs	r6, #0
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c60:	4e2e      	ldr	r6, [pc, #184]	; (8006d1c <_malloc_r+0xe4>)
 8006c62:	f000 fbf5 	bl	8007450 <__malloc_lock>
 8006c66:	6833      	ldr	r3, [r6, #0]
 8006c68:	461c      	mov	r4, r3
 8006c6a:	bb34      	cbnz	r4, 8006cba <_malloc_r+0x82>
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	4638      	mov	r0, r7
 8006c70:	f7ff ffc2 	bl	8006bf8 <sbrk_aligned>
 8006c74:	1c43      	adds	r3, r0, #1
 8006c76:	4604      	mov	r4, r0
 8006c78:	d14d      	bne.n	8006d16 <_malloc_r+0xde>
 8006c7a:	6834      	ldr	r4, [r6, #0]
 8006c7c:	4626      	mov	r6, r4
 8006c7e:	2e00      	cmp	r6, #0
 8006c80:	d140      	bne.n	8006d04 <_malloc_r+0xcc>
 8006c82:	6823      	ldr	r3, [r4, #0]
 8006c84:	4631      	mov	r1, r6
 8006c86:	4638      	mov	r0, r7
 8006c88:	eb04 0803 	add.w	r8, r4, r3
 8006c8c:	f000 fb36 	bl	80072fc <_sbrk_r>
 8006c90:	4580      	cmp	r8, r0
 8006c92:	d13a      	bne.n	8006d0a <_malloc_r+0xd2>
 8006c94:	6821      	ldr	r1, [r4, #0]
 8006c96:	3503      	adds	r5, #3
 8006c98:	1a6d      	subs	r5, r5, r1
 8006c9a:	f025 0503 	bic.w	r5, r5, #3
 8006c9e:	3508      	adds	r5, #8
 8006ca0:	2d0c      	cmp	r5, #12
 8006ca2:	bf38      	it	cc
 8006ca4:	250c      	movcc	r5, #12
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	4638      	mov	r0, r7
 8006caa:	f7ff ffa5 	bl	8006bf8 <sbrk_aligned>
 8006cae:	3001      	adds	r0, #1
 8006cb0:	d02b      	beq.n	8006d0a <_malloc_r+0xd2>
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	442b      	add	r3, r5
 8006cb6:	6023      	str	r3, [r4, #0]
 8006cb8:	e00e      	b.n	8006cd8 <_malloc_r+0xa0>
 8006cba:	6822      	ldr	r2, [r4, #0]
 8006cbc:	1b52      	subs	r2, r2, r5
 8006cbe:	d41e      	bmi.n	8006cfe <_malloc_r+0xc6>
 8006cc0:	2a0b      	cmp	r2, #11
 8006cc2:	d916      	bls.n	8006cf2 <_malloc_r+0xba>
 8006cc4:	1961      	adds	r1, r4, r5
 8006cc6:	42a3      	cmp	r3, r4
 8006cc8:	6025      	str	r5, [r4, #0]
 8006cca:	bf18      	it	ne
 8006ccc:	6059      	strne	r1, [r3, #4]
 8006cce:	6863      	ldr	r3, [r4, #4]
 8006cd0:	bf08      	it	eq
 8006cd2:	6031      	streq	r1, [r6, #0]
 8006cd4:	5162      	str	r2, [r4, r5]
 8006cd6:	604b      	str	r3, [r1, #4]
 8006cd8:	4638      	mov	r0, r7
 8006cda:	f104 060b 	add.w	r6, r4, #11
 8006cde:	f000 fbbd 	bl	800745c <__malloc_unlock>
 8006ce2:	f026 0607 	bic.w	r6, r6, #7
 8006ce6:	1d23      	adds	r3, r4, #4
 8006ce8:	1af2      	subs	r2, r6, r3
 8006cea:	d0b6      	beq.n	8006c5a <_malloc_r+0x22>
 8006cec:	1b9b      	subs	r3, r3, r6
 8006cee:	50a3      	str	r3, [r4, r2]
 8006cf0:	e7b3      	b.n	8006c5a <_malloc_r+0x22>
 8006cf2:	6862      	ldr	r2, [r4, #4]
 8006cf4:	42a3      	cmp	r3, r4
 8006cf6:	bf0c      	ite	eq
 8006cf8:	6032      	streq	r2, [r6, #0]
 8006cfa:	605a      	strne	r2, [r3, #4]
 8006cfc:	e7ec      	b.n	8006cd8 <_malloc_r+0xa0>
 8006cfe:	4623      	mov	r3, r4
 8006d00:	6864      	ldr	r4, [r4, #4]
 8006d02:	e7b2      	b.n	8006c6a <_malloc_r+0x32>
 8006d04:	4634      	mov	r4, r6
 8006d06:	6876      	ldr	r6, [r6, #4]
 8006d08:	e7b9      	b.n	8006c7e <_malloc_r+0x46>
 8006d0a:	230c      	movs	r3, #12
 8006d0c:	603b      	str	r3, [r7, #0]
 8006d0e:	4638      	mov	r0, r7
 8006d10:	f000 fba4 	bl	800745c <__malloc_unlock>
 8006d14:	e7a1      	b.n	8006c5a <_malloc_r+0x22>
 8006d16:	6025      	str	r5, [r4, #0]
 8006d18:	e7de      	b.n	8006cd8 <_malloc_r+0xa0>
 8006d1a:	bf00      	nop
 8006d1c:	200008dc 	.word	0x200008dc

08006d20 <__sfputc_r>:
 8006d20:	6893      	ldr	r3, [r2, #8]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	b410      	push	{r4}
 8006d28:	6093      	str	r3, [r2, #8]
 8006d2a:	da08      	bge.n	8006d3e <__sfputc_r+0x1e>
 8006d2c:	6994      	ldr	r4, [r2, #24]
 8006d2e:	42a3      	cmp	r3, r4
 8006d30:	db01      	blt.n	8006d36 <__sfputc_r+0x16>
 8006d32:	290a      	cmp	r1, #10
 8006d34:	d103      	bne.n	8006d3e <__sfputc_r+0x1e>
 8006d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d3a:	f7ff bc29 	b.w	8006590 <__swbuf_r>
 8006d3e:	6813      	ldr	r3, [r2, #0]
 8006d40:	1c58      	adds	r0, r3, #1
 8006d42:	6010      	str	r0, [r2, #0]
 8006d44:	7019      	strb	r1, [r3, #0]
 8006d46:	4608      	mov	r0, r1
 8006d48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <__sfputs_r>:
 8006d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d50:	4606      	mov	r6, r0
 8006d52:	460f      	mov	r7, r1
 8006d54:	4614      	mov	r4, r2
 8006d56:	18d5      	adds	r5, r2, r3
 8006d58:	42ac      	cmp	r4, r5
 8006d5a:	d101      	bne.n	8006d60 <__sfputs_r+0x12>
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	e007      	b.n	8006d70 <__sfputs_r+0x22>
 8006d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d64:	463a      	mov	r2, r7
 8006d66:	4630      	mov	r0, r6
 8006d68:	f7ff ffda 	bl	8006d20 <__sfputc_r>
 8006d6c:	1c43      	adds	r3, r0, #1
 8006d6e:	d1f3      	bne.n	8006d58 <__sfputs_r+0xa>
 8006d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d74 <_vfiprintf_r>:
 8006d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d78:	460d      	mov	r5, r1
 8006d7a:	b09d      	sub	sp, #116	; 0x74
 8006d7c:	4614      	mov	r4, r2
 8006d7e:	4698      	mov	r8, r3
 8006d80:	4606      	mov	r6, r0
 8006d82:	b118      	cbz	r0, 8006d8c <_vfiprintf_r+0x18>
 8006d84:	6983      	ldr	r3, [r0, #24]
 8006d86:	b90b      	cbnz	r3, 8006d8c <_vfiprintf_r+0x18>
 8006d88:	f7ff fddc 	bl	8006944 <__sinit>
 8006d8c:	4b89      	ldr	r3, [pc, #548]	; (8006fb4 <_vfiprintf_r+0x240>)
 8006d8e:	429d      	cmp	r5, r3
 8006d90:	d11b      	bne.n	8006dca <_vfiprintf_r+0x56>
 8006d92:	6875      	ldr	r5, [r6, #4]
 8006d94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d96:	07d9      	lsls	r1, r3, #31
 8006d98:	d405      	bmi.n	8006da6 <_vfiprintf_r+0x32>
 8006d9a:	89ab      	ldrh	r3, [r5, #12]
 8006d9c:	059a      	lsls	r2, r3, #22
 8006d9e:	d402      	bmi.n	8006da6 <_vfiprintf_r+0x32>
 8006da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006da2:	f7ff fe6d 	bl	8006a80 <__retarget_lock_acquire_recursive>
 8006da6:	89ab      	ldrh	r3, [r5, #12]
 8006da8:	071b      	lsls	r3, r3, #28
 8006daa:	d501      	bpl.n	8006db0 <_vfiprintf_r+0x3c>
 8006dac:	692b      	ldr	r3, [r5, #16]
 8006dae:	b9eb      	cbnz	r3, 8006dec <_vfiprintf_r+0x78>
 8006db0:	4629      	mov	r1, r5
 8006db2:	4630      	mov	r0, r6
 8006db4:	f7ff fc3e 	bl	8006634 <__swsetup_r>
 8006db8:	b1c0      	cbz	r0, 8006dec <_vfiprintf_r+0x78>
 8006dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dbc:	07dc      	lsls	r4, r3, #31
 8006dbe:	d50e      	bpl.n	8006dde <_vfiprintf_r+0x6a>
 8006dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dc4:	b01d      	add	sp, #116	; 0x74
 8006dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dca:	4b7b      	ldr	r3, [pc, #492]	; (8006fb8 <_vfiprintf_r+0x244>)
 8006dcc:	429d      	cmp	r5, r3
 8006dce:	d101      	bne.n	8006dd4 <_vfiprintf_r+0x60>
 8006dd0:	68b5      	ldr	r5, [r6, #8]
 8006dd2:	e7df      	b.n	8006d94 <_vfiprintf_r+0x20>
 8006dd4:	4b79      	ldr	r3, [pc, #484]	; (8006fbc <_vfiprintf_r+0x248>)
 8006dd6:	429d      	cmp	r5, r3
 8006dd8:	bf08      	it	eq
 8006dda:	68f5      	ldreq	r5, [r6, #12]
 8006ddc:	e7da      	b.n	8006d94 <_vfiprintf_r+0x20>
 8006dde:	89ab      	ldrh	r3, [r5, #12]
 8006de0:	0598      	lsls	r0, r3, #22
 8006de2:	d4ed      	bmi.n	8006dc0 <_vfiprintf_r+0x4c>
 8006de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006de6:	f7ff fe4c 	bl	8006a82 <__retarget_lock_release_recursive>
 8006dea:	e7e9      	b.n	8006dc0 <_vfiprintf_r+0x4c>
 8006dec:	2300      	movs	r3, #0
 8006dee:	9309      	str	r3, [sp, #36]	; 0x24
 8006df0:	2320      	movs	r3, #32
 8006df2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006df6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dfa:	2330      	movs	r3, #48	; 0x30
 8006dfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006fc0 <_vfiprintf_r+0x24c>
 8006e00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e04:	f04f 0901 	mov.w	r9, #1
 8006e08:	4623      	mov	r3, r4
 8006e0a:	469a      	mov	sl, r3
 8006e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e10:	b10a      	cbz	r2, 8006e16 <_vfiprintf_r+0xa2>
 8006e12:	2a25      	cmp	r2, #37	; 0x25
 8006e14:	d1f9      	bne.n	8006e0a <_vfiprintf_r+0x96>
 8006e16:	ebba 0b04 	subs.w	fp, sl, r4
 8006e1a:	d00b      	beq.n	8006e34 <_vfiprintf_r+0xc0>
 8006e1c:	465b      	mov	r3, fp
 8006e1e:	4622      	mov	r2, r4
 8006e20:	4629      	mov	r1, r5
 8006e22:	4630      	mov	r0, r6
 8006e24:	f7ff ff93 	bl	8006d4e <__sfputs_r>
 8006e28:	3001      	adds	r0, #1
 8006e2a:	f000 80aa 	beq.w	8006f82 <_vfiprintf_r+0x20e>
 8006e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e30:	445a      	add	r2, fp
 8006e32:	9209      	str	r2, [sp, #36]	; 0x24
 8006e34:	f89a 3000 	ldrb.w	r3, [sl]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 80a2 	beq.w	8006f82 <_vfiprintf_r+0x20e>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e48:	f10a 0a01 	add.w	sl, sl, #1
 8006e4c:	9304      	str	r3, [sp, #16]
 8006e4e:	9307      	str	r3, [sp, #28]
 8006e50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e54:	931a      	str	r3, [sp, #104]	; 0x68
 8006e56:	4654      	mov	r4, sl
 8006e58:	2205      	movs	r2, #5
 8006e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e5e:	4858      	ldr	r0, [pc, #352]	; (8006fc0 <_vfiprintf_r+0x24c>)
 8006e60:	f7f9 f9b6 	bl	80001d0 <memchr>
 8006e64:	9a04      	ldr	r2, [sp, #16]
 8006e66:	b9d8      	cbnz	r0, 8006ea0 <_vfiprintf_r+0x12c>
 8006e68:	06d1      	lsls	r1, r2, #27
 8006e6a:	bf44      	itt	mi
 8006e6c:	2320      	movmi	r3, #32
 8006e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e72:	0713      	lsls	r3, r2, #28
 8006e74:	bf44      	itt	mi
 8006e76:	232b      	movmi	r3, #43	; 0x2b
 8006e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8006e80:	2b2a      	cmp	r3, #42	; 0x2a
 8006e82:	d015      	beq.n	8006eb0 <_vfiprintf_r+0x13c>
 8006e84:	9a07      	ldr	r2, [sp, #28]
 8006e86:	4654      	mov	r4, sl
 8006e88:	2000      	movs	r0, #0
 8006e8a:	f04f 0c0a 	mov.w	ip, #10
 8006e8e:	4621      	mov	r1, r4
 8006e90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e94:	3b30      	subs	r3, #48	; 0x30
 8006e96:	2b09      	cmp	r3, #9
 8006e98:	d94e      	bls.n	8006f38 <_vfiprintf_r+0x1c4>
 8006e9a:	b1b0      	cbz	r0, 8006eca <_vfiprintf_r+0x156>
 8006e9c:	9207      	str	r2, [sp, #28]
 8006e9e:	e014      	b.n	8006eca <_vfiprintf_r+0x156>
 8006ea0:	eba0 0308 	sub.w	r3, r0, r8
 8006ea4:	fa09 f303 	lsl.w	r3, r9, r3
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	9304      	str	r3, [sp, #16]
 8006eac:	46a2      	mov	sl, r4
 8006eae:	e7d2      	b.n	8006e56 <_vfiprintf_r+0xe2>
 8006eb0:	9b03      	ldr	r3, [sp, #12]
 8006eb2:	1d19      	adds	r1, r3, #4
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	9103      	str	r1, [sp, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	bfbb      	ittet	lt
 8006ebc:	425b      	neglt	r3, r3
 8006ebe:	f042 0202 	orrlt.w	r2, r2, #2
 8006ec2:	9307      	strge	r3, [sp, #28]
 8006ec4:	9307      	strlt	r3, [sp, #28]
 8006ec6:	bfb8      	it	lt
 8006ec8:	9204      	strlt	r2, [sp, #16]
 8006eca:	7823      	ldrb	r3, [r4, #0]
 8006ecc:	2b2e      	cmp	r3, #46	; 0x2e
 8006ece:	d10c      	bne.n	8006eea <_vfiprintf_r+0x176>
 8006ed0:	7863      	ldrb	r3, [r4, #1]
 8006ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ed4:	d135      	bne.n	8006f42 <_vfiprintf_r+0x1ce>
 8006ed6:	9b03      	ldr	r3, [sp, #12]
 8006ed8:	1d1a      	adds	r2, r3, #4
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	9203      	str	r2, [sp, #12]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	bfb8      	it	lt
 8006ee2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006ee6:	3402      	adds	r4, #2
 8006ee8:	9305      	str	r3, [sp, #20]
 8006eea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006fd0 <_vfiprintf_r+0x25c>
 8006eee:	7821      	ldrb	r1, [r4, #0]
 8006ef0:	2203      	movs	r2, #3
 8006ef2:	4650      	mov	r0, sl
 8006ef4:	f7f9 f96c 	bl	80001d0 <memchr>
 8006ef8:	b140      	cbz	r0, 8006f0c <_vfiprintf_r+0x198>
 8006efa:	2340      	movs	r3, #64	; 0x40
 8006efc:	eba0 000a 	sub.w	r0, r0, sl
 8006f00:	fa03 f000 	lsl.w	r0, r3, r0
 8006f04:	9b04      	ldr	r3, [sp, #16]
 8006f06:	4303      	orrs	r3, r0
 8006f08:	3401      	adds	r4, #1
 8006f0a:	9304      	str	r3, [sp, #16]
 8006f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f10:	482c      	ldr	r0, [pc, #176]	; (8006fc4 <_vfiprintf_r+0x250>)
 8006f12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f16:	2206      	movs	r2, #6
 8006f18:	f7f9 f95a 	bl	80001d0 <memchr>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	d03f      	beq.n	8006fa0 <_vfiprintf_r+0x22c>
 8006f20:	4b29      	ldr	r3, [pc, #164]	; (8006fc8 <_vfiprintf_r+0x254>)
 8006f22:	bb1b      	cbnz	r3, 8006f6c <_vfiprintf_r+0x1f8>
 8006f24:	9b03      	ldr	r3, [sp, #12]
 8006f26:	3307      	adds	r3, #7
 8006f28:	f023 0307 	bic.w	r3, r3, #7
 8006f2c:	3308      	adds	r3, #8
 8006f2e:	9303      	str	r3, [sp, #12]
 8006f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f32:	443b      	add	r3, r7
 8006f34:	9309      	str	r3, [sp, #36]	; 0x24
 8006f36:	e767      	b.n	8006e08 <_vfiprintf_r+0x94>
 8006f38:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	2001      	movs	r0, #1
 8006f40:	e7a5      	b.n	8006e8e <_vfiprintf_r+0x11a>
 8006f42:	2300      	movs	r3, #0
 8006f44:	3401      	adds	r4, #1
 8006f46:	9305      	str	r3, [sp, #20]
 8006f48:	4619      	mov	r1, r3
 8006f4a:	f04f 0c0a 	mov.w	ip, #10
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f54:	3a30      	subs	r2, #48	; 0x30
 8006f56:	2a09      	cmp	r2, #9
 8006f58:	d903      	bls.n	8006f62 <_vfiprintf_r+0x1ee>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d0c5      	beq.n	8006eea <_vfiprintf_r+0x176>
 8006f5e:	9105      	str	r1, [sp, #20]
 8006f60:	e7c3      	b.n	8006eea <_vfiprintf_r+0x176>
 8006f62:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f66:	4604      	mov	r4, r0
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e7f0      	b.n	8006f4e <_vfiprintf_r+0x1da>
 8006f6c:	ab03      	add	r3, sp, #12
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	462a      	mov	r2, r5
 8006f72:	4b16      	ldr	r3, [pc, #88]	; (8006fcc <_vfiprintf_r+0x258>)
 8006f74:	a904      	add	r1, sp, #16
 8006f76:	4630      	mov	r0, r6
 8006f78:	f3af 8000 	nop.w
 8006f7c:	4607      	mov	r7, r0
 8006f7e:	1c78      	adds	r0, r7, #1
 8006f80:	d1d6      	bne.n	8006f30 <_vfiprintf_r+0x1bc>
 8006f82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f84:	07d9      	lsls	r1, r3, #31
 8006f86:	d405      	bmi.n	8006f94 <_vfiprintf_r+0x220>
 8006f88:	89ab      	ldrh	r3, [r5, #12]
 8006f8a:	059a      	lsls	r2, r3, #22
 8006f8c:	d402      	bmi.n	8006f94 <_vfiprintf_r+0x220>
 8006f8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f90:	f7ff fd77 	bl	8006a82 <__retarget_lock_release_recursive>
 8006f94:	89ab      	ldrh	r3, [r5, #12]
 8006f96:	065b      	lsls	r3, r3, #25
 8006f98:	f53f af12 	bmi.w	8006dc0 <_vfiprintf_r+0x4c>
 8006f9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f9e:	e711      	b.n	8006dc4 <_vfiprintf_r+0x50>
 8006fa0:	ab03      	add	r3, sp, #12
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	462a      	mov	r2, r5
 8006fa6:	4b09      	ldr	r3, [pc, #36]	; (8006fcc <_vfiprintf_r+0x258>)
 8006fa8:	a904      	add	r1, sp, #16
 8006faa:	4630      	mov	r0, r6
 8006fac:	f000 f880 	bl	80070b0 <_printf_i>
 8006fb0:	e7e4      	b.n	8006f7c <_vfiprintf_r+0x208>
 8006fb2:	bf00      	nop
 8006fb4:	0800792c 	.word	0x0800792c
 8006fb8:	0800794c 	.word	0x0800794c
 8006fbc:	0800790c 	.word	0x0800790c
 8006fc0:	0800796c 	.word	0x0800796c
 8006fc4:	08007976 	.word	0x08007976
 8006fc8:	00000000 	.word	0x00000000
 8006fcc:	08006d4f 	.word	0x08006d4f
 8006fd0:	08007972 	.word	0x08007972

08006fd4 <_printf_common>:
 8006fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd8:	4616      	mov	r6, r2
 8006fda:	4699      	mov	r9, r3
 8006fdc:	688a      	ldr	r2, [r1, #8]
 8006fde:	690b      	ldr	r3, [r1, #16]
 8006fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	bfb8      	it	lt
 8006fe8:	4613      	movlt	r3, r2
 8006fea:	6033      	str	r3, [r6, #0]
 8006fec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ff0:	4607      	mov	r7, r0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	b10a      	cbz	r2, 8006ffa <_printf_common+0x26>
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	6033      	str	r3, [r6, #0]
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	0699      	lsls	r1, r3, #26
 8006ffe:	bf42      	ittt	mi
 8007000:	6833      	ldrmi	r3, [r6, #0]
 8007002:	3302      	addmi	r3, #2
 8007004:	6033      	strmi	r3, [r6, #0]
 8007006:	6825      	ldr	r5, [r4, #0]
 8007008:	f015 0506 	ands.w	r5, r5, #6
 800700c:	d106      	bne.n	800701c <_printf_common+0x48>
 800700e:	f104 0a19 	add.w	sl, r4, #25
 8007012:	68e3      	ldr	r3, [r4, #12]
 8007014:	6832      	ldr	r2, [r6, #0]
 8007016:	1a9b      	subs	r3, r3, r2
 8007018:	42ab      	cmp	r3, r5
 800701a:	dc26      	bgt.n	800706a <_printf_common+0x96>
 800701c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007020:	1e13      	subs	r3, r2, #0
 8007022:	6822      	ldr	r2, [r4, #0]
 8007024:	bf18      	it	ne
 8007026:	2301      	movne	r3, #1
 8007028:	0692      	lsls	r2, r2, #26
 800702a:	d42b      	bmi.n	8007084 <_printf_common+0xb0>
 800702c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007030:	4649      	mov	r1, r9
 8007032:	4638      	mov	r0, r7
 8007034:	47c0      	blx	r8
 8007036:	3001      	adds	r0, #1
 8007038:	d01e      	beq.n	8007078 <_printf_common+0xa4>
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	68e5      	ldr	r5, [r4, #12]
 800703e:	6832      	ldr	r2, [r6, #0]
 8007040:	f003 0306 	and.w	r3, r3, #6
 8007044:	2b04      	cmp	r3, #4
 8007046:	bf08      	it	eq
 8007048:	1aad      	subeq	r5, r5, r2
 800704a:	68a3      	ldr	r3, [r4, #8]
 800704c:	6922      	ldr	r2, [r4, #16]
 800704e:	bf0c      	ite	eq
 8007050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007054:	2500      	movne	r5, #0
 8007056:	4293      	cmp	r3, r2
 8007058:	bfc4      	itt	gt
 800705a:	1a9b      	subgt	r3, r3, r2
 800705c:	18ed      	addgt	r5, r5, r3
 800705e:	2600      	movs	r6, #0
 8007060:	341a      	adds	r4, #26
 8007062:	42b5      	cmp	r5, r6
 8007064:	d11a      	bne.n	800709c <_printf_common+0xc8>
 8007066:	2000      	movs	r0, #0
 8007068:	e008      	b.n	800707c <_printf_common+0xa8>
 800706a:	2301      	movs	r3, #1
 800706c:	4652      	mov	r2, sl
 800706e:	4649      	mov	r1, r9
 8007070:	4638      	mov	r0, r7
 8007072:	47c0      	blx	r8
 8007074:	3001      	adds	r0, #1
 8007076:	d103      	bne.n	8007080 <_printf_common+0xac>
 8007078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800707c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007080:	3501      	adds	r5, #1
 8007082:	e7c6      	b.n	8007012 <_printf_common+0x3e>
 8007084:	18e1      	adds	r1, r4, r3
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	2030      	movs	r0, #48	; 0x30
 800708a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800708e:	4422      	add	r2, r4
 8007090:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007094:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007098:	3302      	adds	r3, #2
 800709a:	e7c7      	b.n	800702c <_printf_common+0x58>
 800709c:	2301      	movs	r3, #1
 800709e:	4622      	mov	r2, r4
 80070a0:	4649      	mov	r1, r9
 80070a2:	4638      	mov	r0, r7
 80070a4:	47c0      	blx	r8
 80070a6:	3001      	adds	r0, #1
 80070a8:	d0e6      	beq.n	8007078 <_printf_common+0xa4>
 80070aa:	3601      	adds	r6, #1
 80070ac:	e7d9      	b.n	8007062 <_printf_common+0x8e>
	...

080070b0 <_printf_i>:
 80070b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070b4:	7e0f      	ldrb	r7, [r1, #24]
 80070b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070b8:	2f78      	cmp	r7, #120	; 0x78
 80070ba:	4691      	mov	r9, r2
 80070bc:	4680      	mov	r8, r0
 80070be:	460c      	mov	r4, r1
 80070c0:	469a      	mov	sl, r3
 80070c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070c6:	d807      	bhi.n	80070d8 <_printf_i+0x28>
 80070c8:	2f62      	cmp	r7, #98	; 0x62
 80070ca:	d80a      	bhi.n	80070e2 <_printf_i+0x32>
 80070cc:	2f00      	cmp	r7, #0
 80070ce:	f000 80d8 	beq.w	8007282 <_printf_i+0x1d2>
 80070d2:	2f58      	cmp	r7, #88	; 0x58
 80070d4:	f000 80a3 	beq.w	800721e <_printf_i+0x16e>
 80070d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070e0:	e03a      	b.n	8007158 <_printf_i+0xa8>
 80070e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070e6:	2b15      	cmp	r3, #21
 80070e8:	d8f6      	bhi.n	80070d8 <_printf_i+0x28>
 80070ea:	a101      	add	r1, pc, #4	; (adr r1, 80070f0 <_printf_i+0x40>)
 80070ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070f0:	08007149 	.word	0x08007149
 80070f4:	0800715d 	.word	0x0800715d
 80070f8:	080070d9 	.word	0x080070d9
 80070fc:	080070d9 	.word	0x080070d9
 8007100:	080070d9 	.word	0x080070d9
 8007104:	080070d9 	.word	0x080070d9
 8007108:	0800715d 	.word	0x0800715d
 800710c:	080070d9 	.word	0x080070d9
 8007110:	080070d9 	.word	0x080070d9
 8007114:	080070d9 	.word	0x080070d9
 8007118:	080070d9 	.word	0x080070d9
 800711c:	08007269 	.word	0x08007269
 8007120:	0800718d 	.word	0x0800718d
 8007124:	0800724b 	.word	0x0800724b
 8007128:	080070d9 	.word	0x080070d9
 800712c:	080070d9 	.word	0x080070d9
 8007130:	0800728b 	.word	0x0800728b
 8007134:	080070d9 	.word	0x080070d9
 8007138:	0800718d 	.word	0x0800718d
 800713c:	080070d9 	.word	0x080070d9
 8007140:	080070d9 	.word	0x080070d9
 8007144:	08007253 	.word	0x08007253
 8007148:	682b      	ldr	r3, [r5, #0]
 800714a:	1d1a      	adds	r2, r3, #4
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	602a      	str	r2, [r5, #0]
 8007150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007158:	2301      	movs	r3, #1
 800715a:	e0a3      	b.n	80072a4 <_printf_i+0x1f4>
 800715c:	6820      	ldr	r0, [r4, #0]
 800715e:	6829      	ldr	r1, [r5, #0]
 8007160:	0606      	lsls	r6, r0, #24
 8007162:	f101 0304 	add.w	r3, r1, #4
 8007166:	d50a      	bpl.n	800717e <_printf_i+0xce>
 8007168:	680e      	ldr	r6, [r1, #0]
 800716a:	602b      	str	r3, [r5, #0]
 800716c:	2e00      	cmp	r6, #0
 800716e:	da03      	bge.n	8007178 <_printf_i+0xc8>
 8007170:	232d      	movs	r3, #45	; 0x2d
 8007172:	4276      	negs	r6, r6
 8007174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007178:	485e      	ldr	r0, [pc, #376]	; (80072f4 <_printf_i+0x244>)
 800717a:	230a      	movs	r3, #10
 800717c:	e019      	b.n	80071b2 <_printf_i+0x102>
 800717e:	680e      	ldr	r6, [r1, #0]
 8007180:	602b      	str	r3, [r5, #0]
 8007182:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007186:	bf18      	it	ne
 8007188:	b236      	sxthne	r6, r6
 800718a:	e7ef      	b.n	800716c <_printf_i+0xbc>
 800718c:	682b      	ldr	r3, [r5, #0]
 800718e:	6820      	ldr	r0, [r4, #0]
 8007190:	1d19      	adds	r1, r3, #4
 8007192:	6029      	str	r1, [r5, #0]
 8007194:	0601      	lsls	r1, r0, #24
 8007196:	d501      	bpl.n	800719c <_printf_i+0xec>
 8007198:	681e      	ldr	r6, [r3, #0]
 800719a:	e002      	b.n	80071a2 <_printf_i+0xf2>
 800719c:	0646      	lsls	r6, r0, #25
 800719e:	d5fb      	bpl.n	8007198 <_printf_i+0xe8>
 80071a0:	881e      	ldrh	r6, [r3, #0]
 80071a2:	4854      	ldr	r0, [pc, #336]	; (80072f4 <_printf_i+0x244>)
 80071a4:	2f6f      	cmp	r7, #111	; 0x6f
 80071a6:	bf0c      	ite	eq
 80071a8:	2308      	moveq	r3, #8
 80071aa:	230a      	movne	r3, #10
 80071ac:	2100      	movs	r1, #0
 80071ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071b2:	6865      	ldr	r5, [r4, #4]
 80071b4:	60a5      	str	r5, [r4, #8]
 80071b6:	2d00      	cmp	r5, #0
 80071b8:	bfa2      	ittt	ge
 80071ba:	6821      	ldrge	r1, [r4, #0]
 80071bc:	f021 0104 	bicge.w	r1, r1, #4
 80071c0:	6021      	strge	r1, [r4, #0]
 80071c2:	b90e      	cbnz	r6, 80071c8 <_printf_i+0x118>
 80071c4:	2d00      	cmp	r5, #0
 80071c6:	d04d      	beq.n	8007264 <_printf_i+0x1b4>
 80071c8:	4615      	mov	r5, r2
 80071ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80071ce:	fb03 6711 	mls	r7, r3, r1, r6
 80071d2:	5dc7      	ldrb	r7, [r0, r7]
 80071d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071d8:	4637      	mov	r7, r6
 80071da:	42bb      	cmp	r3, r7
 80071dc:	460e      	mov	r6, r1
 80071de:	d9f4      	bls.n	80071ca <_printf_i+0x11a>
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d10b      	bne.n	80071fc <_printf_i+0x14c>
 80071e4:	6823      	ldr	r3, [r4, #0]
 80071e6:	07de      	lsls	r6, r3, #31
 80071e8:	d508      	bpl.n	80071fc <_printf_i+0x14c>
 80071ea:	6923      	ldr	r3, [r4, #16]
 80071ec:	6861      	ldr	r1, [r4, #4]
 80071ee:	4299      	cmp	r1, r3
 80071f0:	bfde      	ittt	le
 80071f2:	2330      	movle	r3, #48	; 0x30
 80071f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80071fc:	1b52      	subs	r2, r2, r5
 80071fe:	6122      	str	r2, [r4, #16]
 8007200:	f8cd a000 	str.w	sl, [sp]
 8007204:	464b      	mov	r3, r9
 8007206:	aa03      	add	r2, sp, #12
 8007208:	4621      	mov	r1, r4
 800720a:	4640      	mov	r0, r8
 800720c:	f7ff fee2 	bl	8006fd4 <_printf_common>
 8007210:	3001      	adds	r0, #1
 8007212:	d14c      	bne.n	80072ae <_printf_i+0x1fe>
 8007214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007218:	b004      	add	sp, #16
 800721a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800721e:	4835      	ldr	r0, [pc, #212]	; (80072f4 <_printf_i+0x244>)
 8007220:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007224:	6829      	ldr	r1, [r5, #0]
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	f851 6b04 	ldr.w	r6, [r1], #4
 800722c:	6029      	str	r1, [r5, #0]
 800722e:	061d      	lsls	r5, r3, #24
 8007230:	d514      	bpl.n	800725c <_printf_i+0x1ac>
 8007232:	07df      	lsls	r7, r3, #31
 8007234:	bf44      	itt	mi
 8007236:	f043 0320 	orrmi.w	r3, r3, #32
 800723a:	6023      	strmi	r3, [r4, #0]
 800723c:	b91e      	cbnz	r6, 8007246 <_printf_i+0x196>
 800723e:	6823      	ldr	r3, [r4, #0]
 8007240:	f023 0320 	bic.w	r3, r3, #32
 8007244:	6023      	str	r3, [r4, #0]
 8007246:	2310      	movs	r3, #16
 8007248:	e7b0      	b.n	80071ac <_printf_i+0xfc>
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	f043 0320 	orr.w	r3, r3, #32
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	2378      	movs	r3, #120	; 0x78
 8007254:	4828      	ldr	r0, [pc, #160]	; (80072f8 <_printf_i+0x248>)
 8007256:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800725a:	e7e3      	b.n	8007224 <_printf_i+0x174>
 800725c:	0659      	lsls	r1, r3, #25
 800725e:	bf48      	it	mi
 8007260:	b2b6      	uxthmi	r6, r6
 8007262:	e7e6      	b.n	8007232 <_printf_i+0x182>
 8007264:	4615      	mov	r5, r2
 8007266:	e7bb      	b.n	80071e0 <_printf_i+0x130>
 8007268:	682b      	ldr	r3, [r5, #0]
 800726a:	6826      	ldr	r6, [r4, #0]
 800726c:	6961      	ldr	r1, [r4, #20]
 800726e:	1d18      	adds	r0, r3, #4
 8007270:	6028      	str	r0, [r5, #0]
 8007272:	0635      	lsls	r5, r6, #24
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	d501      	bpl.n	800727c <_printf_i+0x1cc>
 8007278:	6019      	str	r1, [r3, #0]
 800727a:	e002      	b.n	8007282 <_printf_i+0x1d2>
 800727c:	0670      	lsls	r0, r6, #25
 800727e:	d5fb      	bpl.n	8007278 <_printf_i+0x1c8>
 8007280:	8019      	strh	r1, [r3, #0]
 8007282:	2300      	movs	r3, #0
 8007284:	6123      	str	r3, [r4, #16]
 8007286:	4615      	mov	r5, r2
 8007288:	e7ba      	b.n	8007200 <_printf_i+0x150>
 800728a:	682b      	ldr	r3, [r5, #0]
 800728c:	1d1a      	adds	r2, r3, #4
 800728e:	602a      	str	r2, [r5, #0]
 8007290:	681d      	ldr	r5, [r3, #0]
 8007292:	6862      	ldr	r2, [r4, #4]
 8007294:	2100      	movs	r1, #0
 8007296:	4628      	mov	r0, r5
 8007298:	f7f8 ff9a 	bl	80001d0 <memchr>
 800729c:	b108      	cbz	r0, 80072a2 <_printf_i+0x1f2>
 800729e:	1b40      	subs	r0, r0, r5
 80072a0:	6060      	str	r0, [r4, #4]
 80072a2:	6863      	ldr	r3, [r4, #4]
 80072a4:	6123      	str	r3, [r4, #16]
 80072a6:	2300      	movs	r3, #0
 80072a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072ac:	e7a8      	b.n	8007200 <_printf_i+0x150>
 80072ae:	6923      	ldr	r3, [r4, #16]
 80072b0:	462a      	mov	r2, r5
 80072b2:	4649      	mov	r1, r9
 80072b4:	4640      	mov	r0, r8
 80072b6:	47d0      	blx	sl
 80072b8:	3001      	adds	r0, #1
 80072ba:	d0ab      	beq.n	8007214 <_printf_i+0x164>
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	079b      	lsls	r3, r3, #30
 80072c0:	d413      	bmi.n	80072ea <_printf_i+0x23a>
 80072c2:	68e0      	ldr	r0, [r4, #12]
 80072c4:	9b03      	ldr	r3, [sp, #12]
 80072c6:	4298      	cmp	r0, r3
 80072c8:	bfb8      	it	lt
 80072ca:	4618      	movlt	r0, r3
 80072cc:	e7a4      	b.n	8007218 <_printf_i+0x168>
 80072ce:	2301      	movs	r3, #1
 80072d0:	4632      	mov	r2, r6
 80072d2:	4649      	mov	r1, r9
 80072d4:	4640      	mov	r0, r8
 80072d6:	47d0      	blx	sl
 80072d8:	3001      	adds	r0, #1
 80072da:	d09b      	beq.n	8007214 <_printf_i+0x164>
 80072dc:	3501      	adds	r5, #1
 80072de:	68e3      	ldr	r3, [r4, #12]
 80072e0:	9903      	ldr	r1, [sp, #12]
 80072e2:	1a5b      	subs	r3, r3, r1
 80072e4:	42ab      	cmp	r3, r5
 80072e6:	dcf2      	bgt.n	80072ce <_printf_i+0x21e>
 80072e8:	e7eb      	b.n	80072c2 <_printf_i+0x212>
 80072ea:	2500      	movs	r5, #0
 80072ec:	f104 0619 	add.w	r6, r4, #25
 80072f0:	e7f5      	b.n	80072de <_printf_i+0x22e>
 80072f2:	bf00      	nop
 80072f4:	0800797d 	.word	0x0800797d
 80072f8:	0800798e 	.word	0x0800798e

080072fc <_sbrk_r>:
 80072fc:	b538      	push	{r3, r4, r5, lr}
 80072fe:	4d06      	ldr	r5, [pc, #24]	; (8007318 <_sbrk_r+0x1c>)
 8007300:	2300      	movs	r3, #0
 8007302:	4604      	mov	r4, r0
 8007304:	4608      	mov	r0, r1
 8007306:	602b      	str	r3, [r5, #0]
 8007308:	f7f9 fefc 	bl	8001104 <_sbrk>
 800730c:	1c43      	adds	r3, r0, #1
 800730e:	d102      	bne.n	8007316 <_sbrk_r+0x1a>
 8007310:	682b      	ldr	r3, [r5, #0]
 8007312:	b103      	cbz	r3, 8007316 <_sbrk_r+0x1a>
 8007314:	6023      	str	r3, [r4, #0]
 8007316:	bd38      	pop	{r3, r4, r5, pc}
 8007318:	200008e4 	.word	0x200008e4

0800731c <__sread>:
 800731c:	b510      	push	{r4, lr}
 800731e:	460c      	mov	r4, r1
 8007320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007324:	f000 f8a0 	bl	8007468 <_read_r>
 8007328:	2800      	cmp	r0, #0
 800732a:	bfab      	itete	ge
 800732c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800732e:	89a3      	ldrhlt	r3, [r4, #12]
 8007330:	181b      	addge	r3, r3, r0
 8007332:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007336:	bfac      	ite	ge
 8007338:	6563      	strge	r3, [r4, #84]	; 0x54
 800733a:	81a3      	strhlt	r3, [r4, #12]
 800733c:	bd10      	pop	{r4, pc}

0800733e <__swrite>:
 800733e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007342:	461f      	mov	r7, r3
 8007344:	898b      	ldrh	r3, [r1, #12]
 8007346:	05db      	lsls	r3, r3, #23
 8007348:	4605      	mov	r5, r0
 800734a:	460c      	mov	r4, r1
 800734c:	4616      	mov	r6, r2
 800734e:	d505      	bpl.n	800735c <__swrite+0x1e>
 8007350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007354:	2302      	movs	r3, #2
 8007356:	2200      	movs	r2, #0
 8007358:	f000 f868 	bl	800742c <_lseek_r>
 800735c:	89a3      	ldrh	r3, [r4, #12]
 800735e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007362:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007366:	81a3      	strh	r3, [r4, #12]
 8007368:	4632      	mov	r2, r6
 800736a:	463b      	mov	r3, r7
 800736c:	4628      	mov	r0, r5
 800736e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007372:	f000 b817 	b.w	80073a4 <_write_r>

08007376 <__sseek>:
 8007376:	b510      	push	{r4, lr}
 8007378:	460c      	mov	r4, r1
 800737a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800737e:	f000 f855 	bl	800742c <_lseek_r>
 8007382:	1c43      	adds	r3, r0, #1
 8007384:	89a3      	ldrh	r3, [r4, #12]
 8007386:	bf15      	itete	ne
 8007388:	6560      	strne	r0, [r4, #84]	; 0x54
 800738a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800738e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007392:	81a3      	strheq	r3, [r4, #12]
 8007394:	bf18      	it	ne
 8007396:	81a3      	strhne	r3, [r4, #12]
 8007398:	bd10      	pop	{r4, pc}

0800739a <__sclose>:
 800739a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800739e:	f000 b813 	b.w	80073c8 <_close_r>
	...

080073a4 <_write_r>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	4d07      	ldr	r5, [pc, #28]	; (80073c4 <_write_r+0x20>)
 80073a8:	4604      	mov	r4, r0
 80073aa:	4608      	mov	r0, r1
 80073ac:	4611      	mov	r1, r2
 80073ae:	2200      	movs	r2, #0
 80073b0:	602a      	str	r2, [r5, #0]
 80073b2:	461a      	mov	r2, r3
 80073b4:	f7f9 fd1a 	bl	8000dec <_write>
 80073b8:	1c43      	adds	r3, r0, #1
 80073ba:	d102      	bne.n	80073c2 <_write_r+0x1e>
 80073bc:	682b      	ldr	r3, [r5, #0]
 80073be:	b103      	cbz	r3, 80073c2 <_write_r+0x1e>
 80073c0:	6023      	str	r3, [r4, #0]
 80073c2:	bd38      	pop	{r3, r4, r5, pc}
 80073c4:	200008e4 	.word	0x200008e4

080073c8 <_close_r>:
 80073c8:	b538      	push	{r3, r4, r5, lr}
 80073ca:	4d06      	ldr	r5, [pc, #24]	; (80073e4 <_close_r+0x1c>)
 80073cc:	2300      	movs	r3, #0
 80073ce:	4604      	mov	r4, r0
 80073d0:	4608      	mov	r0, r1
 80073d2:	602b      	str	r3, [r5, #0]
 80073d4:	f7f9 fe61 	bl	800109a <_close>
 80073d8:	1c43      	adds	r3, r0, #1
 80073da:	d102      	bne.n	80073e2 <_close_r+0x1a>
 80073dc:	682b      	ldr	r3, [r5, #0]
 80073de:	b103      	cbz	r3, 80073e2 <_close_r+0x1a>
 80073e0:	6023      	str	r3, [r4, #0]
 80073e2:	bd38      	pop	{r3, r4, r5, pc}
 80073e4:	200008e4 	.word	0x200008e4

080073e8 <_fstat_r>:
 80073e8:	b538      	push	{r3, r4, r5, lr}
 80073ea:	4d07      	ldr	r5, [pc, #28]	; (8007408 <_fstat_r+0x20>)
 80073ec:	2300      	movs	r3, #0
 80073ee:	4604      	mov	r4, r0
 80073f0:	4608      	mov	r0, r1
 80073f2:	4611      	mov	r1, r2
 80073f4:	602b      	str	r3, [r5, #0]
 80073f6:	f7f9 fe5c 	bl	80010b2 <_fstat>
 80073fa:	1c43      	adds	r3, r0, #1
 80073fc:	d102      	bne.n	8007404 <_fstat_r+0x1c>
 80073fe:	682b      	ldr	r3, [r5, #0]
 8007400:	b103      	cbz	r3, 8007404 <_fstat_r+0x1c>
 8007402:	6023      	str	r3, [r4, #0]
 8007404:	bd38      	pop	{r3, r4, r5, pc}
 8007406:	bf00      	nop
 8007408:	200008e4 	.word	0x200008e4

0800740c <_isatty_r>:
 800740c:	b538      	push	{r3, r4, r5, lr}
 800740e:	4d06      	ldr	r5, [pc, #24]	; (8007428 <_isatty_r+0x1c>)
 8007410:	2300      	movs	r3, #0
 8007412:	4604      	mov	r4, r0
 8007414:	4608      	mov	r0, r1
 8007416:	602b      	str	r3, [r5, #0]
 8007418:	f7f9 fe5b 	bl	80010d2 <_isatty>
 800741c:	1c43      	adds	r3, r0, #1
 800741e:	d102      	bne.n	8007426 <_isatty_r+0x1a>
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	b103      	cbz	r3, 8007426 <_isatty_r+0x1a>
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	bd38      	pop	{r3, r4, r5, pc}
 8007428:	200008e4 	.word	0x200008e4

0800742c <_lseek_r>:
 800742c:	b538      	push	{r3, r4, r5, lr}
 800742e:	4d07      	ldr	r5, [pc, #28]	; (800744c <_lseek_r+0x20>)
 8007430:	4604      	mov	r4, r0
 8007432:	4608      	mov	r0, r1
 8007434:	4611      	mov	r1, r2
 8007436:	2200      	movs	r2, #0
 8007438:	602a      	str	r2, [r5, #0]
 800743a:	461a      	mov	r2, r3
 800743c:	f7f9 fe54 	bl	80010e8 <_lseek>
 8007440:	1c43      	adds	r3, r0, #1
 8007442:	d102      	bne.n	800744a <_lseek_r+0x1e>
 8007444:	682b      	ldr	r3, [r5, #0]
 8007446:	b103      	cbz	r3, 800744a <_lseek_r+0x1e>
 8007448:	6023      	str	r3, [r4, #0]
 800744a:	bd38      	pop	{r3, r4, r5, pc}
 800744c:	200008e4 	.word	0x200008e4

08007450 <__malloc_lock>:
 8007450:	4801      	ldr	r0, [pc, #4]	; (8007458 <__malloc_lock+0x8>)
 8007452:	f7ff bb15 	b.w	8006a80 <__retarget_lock_acquire_recursive>
 8007456:	bf00      	nop
 8007458:	200008d8 	.word	0x200008d8

0800745c <__malloc_unlock>:
 800745c:	4801      	ldr	r0, [pc, #4]	; (8007464 <__malloc_unlock+0x8>)
 800745e:	f7ff bb10 	b.w	8006a82 <__retarget_lock_release_recursive>
 8007462:	bf00      	nop
 8007464:	200008d8 	.word	0x200008d8

08007468 <_read_r>:
 8007468:	b538      	push	{r3, r4, r5, lr}
 800746a:	4d07      	ldr	r5, [pc, #28]	; (8007488 <_read_r+0x20>)
 800746c:	4604      	mov	r4, r0
 800746e:	4608      	mov	r0, r1
 8007470:	4611      	mov	r1, r2
 8007472:	2200      	movs	r2, #0
 8007474:	602a      	str	r2, [r5, #0]
 8007476:	461a      	mov	r2, r3
 8007478:	f7f9 fdf2 	bl	8001060 <_read>
 800747c:	1c43      	adds	r3, r0, #1
 800747e:	d102      	bne.n	8007486 <_read_r+0x1e>
 8007480:	682b      	ldr	r3, [r5, #0]
 8007482:	b103      	cbz	r3, 8007486 <_read_r+0x1e>
 8007484:	6023      	str	r3, [r4, #0]
 8007486:	bd38      	pop	{r3, r4, r5, pc}
 8007488:	200008e4 	.word	0x200008e4

0800748c <_init>:
 800748c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748e:	bf00      	nop
 8007490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007492:	bc08      	pop	{r3}
 8007494:	469e      	mov	lr, r3
 8007496:	4770      	bx	lr

08007498 <_fini>:
 8007498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749a:	bf00      	nop
 800749c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749e:	bc08      	pop	{r3}
 80074a0:	469e      	mov	lr, r3
 80074a2:	4770      	bx	lr
