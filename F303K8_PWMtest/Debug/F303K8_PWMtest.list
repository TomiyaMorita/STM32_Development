
F303K8_PWMtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003830  08003830  00013830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003868  08003868  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003868  08003868  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003868  08003868  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800386c  0800386c  0001386c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000fc  200000fc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d79a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001955  00000000  00000000  0002d7d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb8  00000000  00000000  0002f130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b20  00000000  00000000  0002fce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a720  00000000  00000000  00030808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e508  00000000  00000000  0004af28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a05f9  00000000  00000000  00059430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f9a29  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003164  00000000  00000000  000f9a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003818 	.word	0x08003818

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003818 	.word	0x08003818

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80001cc:	2104      	movs	r1, #4
 80001ce:	4812      	ldr	r0, [pc, #72]	; (8000218 <main+0x50>)
 80001d0:	f002 f998 	bl	8002504 <HAL_TIM_PWM_Start>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 faaa 	bl	800072c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f822 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f93a 	bl	8000454 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e0:	f000 f908 	bl	80003f4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80001e4:	f000 f876 	bl	80002d4 <MX_TIM1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 80001e8:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <main+0x50>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001f0:	639a      	str	r2, [r3, #56]	; 0x38

	  HAL_Delay(100);
 80001f2:	2064      	movs	r0, #100	; 0x64
 80001f4:	f000 fb00 	bl	80007f8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,SET);
 80001f8:	2201      	movs	r2, #1
 80001fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001fe:	4807      	ldr	r0, [pc, #28]	; (800021c <main+0x54>)
 8000200:	f000 fd76 	bl	8000cf0 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000204:	2064      	movs	r0, #100	; 0x64
 8000206:	f000 faf7 	bl	80007f8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,RESET);
 800020a:	2200      	movs	r2, #0
 800020c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000210:	4802      	ldr	r0, [pc, #8]	; (800021c <main+0x54>)
 8000212:	f000 fd6d 	bl	8000cf0 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 8000216:	e7e7      	b.n	80001e8 <main+0x20>
 8000218:	20000028 	.word	0x20000028
 800021c:	48000400 	.word	0x48000400

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b096      	sub	sp, #88	; 0x58
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800022a:	2228      	movs	r2, #40	; 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f003 faea 	bl	8003808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	f107 031c 	add.w	r3, r7, #28
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]
 8000240:	60da      	str	r2, [r3, #12]
 8000242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]
 8000252:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000254:	2302      	movs	r3, #2
 8000256:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000258:	2301      	movs	r3, #1
 800025a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025c:	2310      	movs	r3, #16
 800025e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000260:	2302      	movs	r3, #2
 8000262:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000264:	2300      	movs	r3, #0
 8000266:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000268:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800026c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000272:	4618      	mov	r0, r3
 8000274:	f000 fd54 	bl	8000d20 <HAL_RCC_OscConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800027e:	f000 f929 	bl	80004d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000282:	230f      	movs	r3, #15
 8000284:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000286:	2302      	movs	r3, #2
 8000288:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000292:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000298:	f107 031c 	add.w	r3, r7, #28
 800029c:	2102      	movs	r1, #2
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 fd7c 	bl	8001d9c <HAL_RCC_ClockConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002aa:	f000 f913 	bl	80004d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80002ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002b2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002b4:	2300      	movs	r3, #0
 80002b6:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 ffa4 	bl	8002208 <HAL_RCCEx_PeriphCLKConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80002c6:	f000 f905 	bl	80004d4 <Error_Handler>
  }
}
 80002ca:	bf00      	nop
 80002cc:	3758      	adds	r7, #88	; 0x58
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b096      	sub	sp, #88	; 0x58
 80002d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]
 80002f6:	615a      	str	r2, [r3, #20]
 80002f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	222c      	movs	r2, #44	; 0x2c
 80002fe:	2100      	movs	r1, #0
 8000300:	4618      	mov	r0, r3
 8000302:	f003 fa81 	bl	8003808 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000306:	4b39      	ldr	r3, [pc, #228]	; (80003ec <MX_TIM1_Init+0x118>)
 8000308:	4a39      	ldr	r2, [pc, #228]	; (80003f0 <MX_TIM1_Init+0x11c>)
 800030a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128-1;
 800030c:	4b37      	ldr	r3, [pc, #220]	; (80003ec <MX_TIM1_Init+0x118>)
 800030e:	227f      	movs	r2, #127	; 0x7f
 8000310:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000312:	4b36      	ldr	r3, [pc, #216]	; (80003ec <MX_TIM1_Init+0x118>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000318:	4b34      	ldr	r3, [pc, #208]	; (80003ec <MX_TIM1_Init+0x118>)
 800031a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800031e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000320:	4b32      	ldr	r3, [pc, #200]	; (80003ec <MX_TIM1_Init+0x118>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000326:	4b31      	ldr	r3, [pc, #196]	; (80003ec <MX_TIM1_Init+0x118>)
 8000328:	2200      	movs	r2, #0
 800032a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800032c:	4b2f      	ldr	r3, [pc, #188]	; (80003ec <MX_TIM1_Init+0x118>)
 800032e:	2200      	movs	r2, #0
 8000330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000332:	482e      	ldr	r0, [pc, #184]	; (80003ec <MX_TIM1_Init+0x118>)
 8000334:	f002 f88e 	bl	8002454 <HAL_TIM_PWM_Init>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800033e:	f000 f8c9 	bl	80004d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000342:	2300      	movs	r3, #0
 8000344:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000346:	2300      	movs	r3, #0
 8000348:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800034a:	2300      	movs	r3, #0
 800034c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800034e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000352:	4619      	mov	r1, r3
 8000354:	4825      	ldr	r0, [pc, #148]	; (80003ec <MX_TIM1_Init+0x118>)
 8000356:	f002 fe19 	bl	8002f8c <HAL_TIMEx_MasterConfigSynchronization>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000360:	f000 f8b8 	bl	80004d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000364:	2360      	movs	r3, #96	; 0x60
 8000366:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000368:	2300      	movs	r3, #0
 800036a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800036c:	2300      	movs	r3, #0
 800036e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000370:	2300      	movs	r3, #0
 8000372:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000378:	2300      	movs	r3, #0
 800037a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800037c:	2300      	movs	r3, #0
 800037e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000380:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000384:	2204      	movs	r2, #4
 8000386:	4619      	mov	r1, r3
 8000388:	4818      	ldr	r0, [pc, #96]	; (80003ec <MX_TIM1_Init+0x118>)
 800038a:	f002 f9a7 	bl	80026dc <HAL_TIM_PWM_ConfigChannel>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000394:	f000 f89e 	bl	80004d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000398:	2300      	movs	r3, #0
 800039a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800039c:	2300      	movs	r3, #0
 800039e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003a8:	2300      	movs	r3, #0
 80003aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80003b6:	2300      	movs	r3, #0
 80003b8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80003ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80003be:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003c4:	2300      	movs	r3, #0
 80003c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	4619      	mov	r1, r3
 80003cc:	4807      	ldr	r0, [pc, #28]	; (80003ec <MX_TIM1_Init+0x118>)
 80003ce:	f002 fe4b 	bl	8003068 <HAL_TIMEx_ConfigBreakDeadTime>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80003d8:	f000 f87c 	bl	80004d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003dc:	4803      	ldr	r0, [pc, #12]	; (80003ec <MX_TIM1_Init+0x118>)
 80003de:	f000 f8c3 	bl	8000568 <HAL_TIM_MspPostInit>

}
 80003e2:	bf00      	nop
 80003e4:	3758      	adds	r7, #88	; 0x58
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000028 	.word	0x20000028
 80003f0:	40012c00 	.word	0x40012c00

080003f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003f8:	4b14      	ldr	r3, [pc, #80]	; (800044c <MX_USART2_UART_Init+0x58>)
 80003fa:	4a15      	ldr	r2, [pc, #84]	; (8000450 <MX_USART2_UART_Init+0x5c>)
 80003fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003fe:	4b13      	ldr	r3, [pc, #76]	; (800044c <MX_USART2_UART_Init+0x58>)
 8000400:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000404:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000406:	4b11      	ldr	r3, [pc, #68]	; (800044c <MX_USART2_UART_Init+0x58>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800040c:	4b0f      	ldr	r3, [pc, #60]	; (800044c <MX_USART2_UART_Init+0x58>)
 800040e:	2200      	movs	r2, #0
 8000410:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000412:	4b0e      	ldr	r3, [pc, #56]	; (800044c <MX_USART2_UART_Init+0x58>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000418:	4b0c      	ldr	r3, [pc, #48]	; (800044c <MX_USART2_UART_Init+0x58>)
 800041a:	220c      	movs	r2, #12
 800041c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041e:	4b0b      	ldr	r3, [pc, #44]	; (800044c <MX_USART2_UART_Init+0x58>)
 8000420:	2200      	movs	r2, #0
 8000422:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000424:	4b09      	ldr	r3, [pc, #36]	; (800044c <MX_USART2_UART_Init+0x58>)
 8000426:	2200      	movs	r2, #0
 8000428:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800042a:	4b08      	ldr	r3, [pc, #32]	; (800044c <MX_USART2_UART_Init+0x58>)
 800042c:	2200      	movs	r2, #0
 800042e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <MX_USART2_UART_Init+0x58>)
 8000432:	2200      	movs	r2, #0
 8000434:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000436:	4805      	ldr	r0, [pc, #20]	; (800044c <MX_USART2_UART_Init+0x58>)
 8000438:	f002 fe8e 	bl	8003158 <HAL_UART_Init>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000442:	f000 f847 	bl	80004d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	20000074 	.word	0x20000074
 8000450:	40004400 	.word	0x40004400

08000454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b088      	sub	sp, #32
 8000458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045a:	f107 030c 	add.w	r3, r7, #12
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	605a      	str	r2, [r3, #4]
 8000464:	609a      	str	r2, [r3, #8]
 8000466:	60da      	str	r2, [r3, #12]
 8000468:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800046a:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <MX_GPIO_Init+0x7c>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	4a18      	ldr	r2, [pc, #96]	; (80004d0 <MX_GPIO_Init+0x7c>)
 8000470:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000474:	6153      	str	r3, [r2, #20]
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <MX_GPIO_Init+0x7c>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800047e:	60bb      	str	r3, [r7, #8]
 8000480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000482:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <MX_GPIO_Init+0x7c>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a12      	ldr	r2, [pc, #72]	; (80004d0 <MX_GPIO_Init+0x7c>)
 8000488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800048c:	6153      	str	r3, [r2, #20]
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <MX_GPIO_Init+0x7c>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a4:	f000 fc24 	bl	8000cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ae:	2301      	movs	r3, #1
 80004b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b2:	2300      	movs	r3, #0
 80004b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ba:	f107 030c 	add.w	r3, r7, #12
 80004be:	4619      	mov	r1, r3
 80004c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c4:	f000 faa2 	bl	8000a0c <HAL_GPIO_Init>

}
 80004c8:	bf00      	nop
 80004ca:	3720      	adds	r7, #32
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40021000 	.word	0x40021000

080004d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d8:	b672      	cpsid	i
}
 80004da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004dc:	e7fe      	b.n	80004dc <Error_Handler+0x8>
	...

080004e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004e6:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <HAL_MspInit+0x44>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <HAL_MspInit+0x44>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6193      	str	r3, [r2, #24]
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <HAL_MspInit+0x44>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <HAL_MspInit+0x44>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	4a08      	ldr	r2, [pc, #32]	; (8000524 <HAL_MspInit+0x44>)
 8000504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000508:	61d3      	str	r3, [r2, #28]
 800050a:	4b06      	ldr	r3, [pc, #24]	; (8000524 <HAL_MspInit+0x44>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000

08000528 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <HAL_TIM_PWM_MspInit+0x38>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d10b      	bne.n	8000552 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <HAL_TIM_PWM_MspInit+0x3c>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	4a09      	ldr	r2, [pc, #36]	; (8000564 <HAL_TIM_PWM_MspInit+0x3c>)
 8000540:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000544:	6193      	str	r3, [r2, #24]
 8000546:	4b07      	ldr	r3, [pc, #28]	; (8000564 <HAL_TIM_PWM_MspInit+0x3c>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000552:	bf00      	nop
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40012c00 	.word	0x40012c00
 8000564:	40021000 	.word	0x40021000

08000568 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a12      	ldr	r2, [pc, #72]	; (80005d0 <HAL_TIM_MspPostInit+0x68>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d11d      	bne.n	80005c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <HAL_TIM_MspPostInit+0x6c>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	4a11      	ldr	r2, [pc, #68]	; (80005d4 <HAL_TIM_MspPostInit+0x6c>)
 8000590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000594:	6153      	str	r3, [r2, #20]
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <HAL_TIM_MspPostInit+0x6c>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a8:	2302      	movs	r3, #2
 80005aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80005b4:	2306      	movs	r3, #6
 80005b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	4619      	mov	r1, r3
 80005be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c2:	f000 fa23 	bl	8000a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80005c6:	bf00      	nop
 80005c8:	3720      	adds	r7, #32
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40012c00 	.word	0x40012c00
 80005d4:	40021000 	.word	0x40021000

080005d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	; 0x28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a18      	ldr	r2, [pc, #96]	; (8000658 <HAL_UART_MspInit+0x80>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d129      	bne.n	800064e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005fa:	4b18      	ldr	r3, [pc, #96]	; (800065c <HAL_UART_MspInit+0x84>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a17      	ldr	r2, [pc, #92]	; (800065c <HAL_UART_MspInit+0x84>)
 8000600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <HAL_UART_MspInit+0x84>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_UART_MspInit+0x84>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	4a11      	ldr	r2, [pc, #68]	; (800065c <HAL_UART_MspInit+0x84>)
 8000618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800061c:	6153      	str	r3, [r2, #20]
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <HAL_UART_MspInit+0x84>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800062a:	f248 0304 	movw	r3, #32772	; 0x8004
 800062e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000630:	2302      	movs	r3, #2
 8000632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000638:	2303      	movs	r3, #3
 800063a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800063c:	2307      	movs	r3, #7
 800063e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	4619      	mov	r1, r3
 8000646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064a:	f000 f9df 	bl	8000a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800064e:	bf00      	nop
 8000650:	3728      	adds	r7, #40	; 0x28
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40004400 	.word	0x40004400
 800065c:	40021000 	.word	0x40021000

08000660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <NMI_Handler+0x4>

08000666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <HardFault_Handler+0x4>

0800066c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <MemManage_Handler+0x4>

08000672 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000676:	e7fe      	b.n	8000676 <BusFault_Handler+0x4>

08000678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800067c:	e7fe      	b.n	800067c <UsageFault_Handler+0x4>

0800067e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ac:	f000 f884 	bl	80007b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <SystemInit+0x20>)
 80006ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006be:	4a05      	ldr	r2, [pc, #20]	; (80006d4 <SystemInit+0x20>)
 80006c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000710 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006dc:	480d      	ldr	r0, [pc, #52]	; (8000714 <LoopForever+0x6>)
  ldr r1, =_edata
 80006de:	490e      	ldr	r1, [pc, #56]	; (8000718 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e0:	4a0e      	ldr	r2, [pc, #56]	; (800071c <LoopForever+0xe>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e4:	e002      	b.n	80006ec <LoopCopyDataInit>

080006e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ea:	3304      	adds	r3, #4

080006ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f0:	d3f9      	bcc.n	80006e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f2:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f4:	4c0b      	ldr	r4, [pc, #44]	; (8000724 <LoopForever+0x16>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f8:	e001      	b.n	80006fe <LoopFillZerobss>

080006fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006fc:	3204      	adds	r2, #4

080006fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000700:	d3fb      	bcc.n	80006fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000702:	f7ff ffd7 	bl	80006b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000706:	f003 f85b 	bl	80037c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800070a:	f7ff fd5d 	bl	80001c8 <main>

0800070e <LoopForever>:

LoopForever:
    b LoopForever
 800070e:	e7fe      	b.n	800070e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000710:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000718:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800071c:	08003870 	.word	0x08003870
  ldr r2, =_sbss
 8000720:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000724:	200000fc 	.word	0x200000fc

08000728 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000728:	e7fe      	b.n	8000728 <ADC1_2_IRQHandler>
	...

0800072c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <HAL_Init+0x28>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a07      	ldr	r2, [pc, #28]	; (8000754 <HAL_Init+0x28>)
 8000736:	f043 0310 	orr.w	r3, r3, #16
 800073a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800073c:	2003      	movs	r0, #3
 800073e:	f000 f931 	bl	80009a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000742:	2000      	movs	r0, #0
 8000744:	f000 f808 	bl	8000758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000748:	f7ff feca 	bl	80004e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40022000 	.word	0x40022000

08000758 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_InitTick+0x54>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_InitTick+0x58>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	4619      	mov	r1, r3
 800076a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800076e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000772:	fbb2 f3f3 	udiv	r3, r2, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f93b 	bl	80009f2 <HAL_SYSTICK_Config>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	e00e      	b.n	80007a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b0f      	cmp	r3, #15
 800078a:	d80a      	bhi.n	80007a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800078c:	2200      	movs	r2, #0
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000794:	f000 f911 	bl	80009ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000798:	4a06      	ldr	r2, [pc, #24]	; (80007b4 <HAL_InitTick+0x5c>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800079e:	2300      	movs	r3, #0
 80007a0:	e000      	b.n	80007a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000000 	.word	0x20000000
 80007b0:	20000008 	.word	0x20000008
 80007b4:	20000004 	.word	0x20000004

080007b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_IncTick+0x20>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_IncTick+0x24>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4413      	add	r3, r2
 80007c8:	4a04      	ldr	r2, [pc, #16]	; (80007dc <HAL_IncTick+0x24>)
 80007ca:	6013      	str	r3, [r2, #0]
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	20000008 	.word	0x20000008
 80007dc:	200000f8 	.word	0x200000f8

080007e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80007e4:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <HAL_GetTick+0x14>)
 80007e6:	681b      	ldr	r3, [r3, #0]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	200000f8 	.word	0x200000f8

080007f8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000800:	f7ff ffee 	bl	80007e0 <HAL_GetTick>
 8000804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000810:	d005      	beq.n	800081e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <HAL_Delay+0x44>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	4413      	add	r3, r2
 800081c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800081e:	bf00      	nop
 8000820:	f7ff ffde 	bl	80007e0 <HAL_GetTick>
 8000824:	4602      	mov	r2, r0
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	429a      	cmp	r2, r3
 800082e:	d8f7      	bhi.n	8000820 <HAL_Delay+0x28>
  {
  }
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000008 	.word	0x20000008

08000840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <__NVIC_SetPriorityGrouping+0x44>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000856:	68ba      	ldr	r2, [r7, #8]
 8000858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800085c:	4013      	ands	r3, r2
 800085e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800086c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000872:	4a04      	ldr	r2, [pc, #16]	; (8000884 <__NVIC_SetPriorityGrouping+0x44>)
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	60d3      	str	r3, [r2, #12]
}
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <__NVIC_GetPriorityGrouping+0x18>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	0a1b      	lsrs	r3, r3, #8
 8000892:	f003 0307 	and.w	r3, r3, #7
}
 8000896:	4618      	mov	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	6039      	str	r1, [r7, #0]
 80008ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	db0a      	blt.n	80008ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	490c      	ldr	r1, [pc, #48]	; (80008f0 <__NVIC_SetPriority+0x4c>)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	0112      	lsls	r2, r2, #4
 80008c4:	b2d2      	uxtb	r2, r2
 80008c6:	440b      	add	r3, r1
 80008c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008cc:	e00a      	b.n	80008e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4908      	ldr	r1, [pc, #32]	; (80008f4 <__NVIC_SetPriority+0x50>)
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	f003 030f 	and.w	r3, r3, #15
 80008da:	3b04      	subs	r3, #4
 80008dc:	0112      	lsls	r2, r2, #4
 80008de:	b2d2      	uxtb	r2, r2
 80008e0:	440b      	add	r3, r1
 80008e2:	761a      	strb	r2, [r3, #24]
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	e000e100 	.word	0xe000e100
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b089      	sub	sp, #36	; 0x24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	f1c3 0307 	rsb	r3, r3, #7
 8000912:	2b04      	cmp	r3, #4
 8000914:	bf28      	it	cs
 8000916:	2304      	movcs	r3, #4
 8000918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	3304      	adds	r3, #4
 800091e:	2b06      	cmp	r3, #6
 8000920:	d902      	bls.n	8000928 <NVIC_EncodePriority+0x30>
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	3b03      	subs	r3, #3
 8000926:	e000      	b.n	800092a <NVIC_EncodePriority+0x32>
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800092c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	43da      	mvns	r2, r3
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	401a      	ands	r2, r3
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000940:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	fa01 f303 	lsl.w	r3, r1, r3
 800094a:	43d9      	mvns	r1, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000950:	4313      	orrs	r3, r2
         );
}
 8000952:	4618      	mov	r0, r3
 8000954:	3724      	adds	r7, #36	; 0x24
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
	...

08000960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3b01      	subs	r3, #1
 800096c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000970:	d301      	bcc.n	8000976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000972:	2301      	movs	r3, #1
 8000974:	e00f      	b.n	8000996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <SysTick_Config+0x40>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3b01      	subs	r3, #1
 800097c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800097e:	210f      	movs	r1, #15
 8000980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000984:	f7ff ff8e 	bl	80008a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <SysTick_Config+0x40>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098e:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <SysTick_Config+0x40>)
 8000990:	2207      	movs	r2, #7
 8000992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	e000e010 	.word	0xe000e010

080009a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ff47 	bl	8000840 <__NVIC_SetPriorityGrouping>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b086      	sub	sp, #24
 80009be:	af00      	add	r7, sp, #0
 80009c0:	4603      	mov	r3, r0
 80009c2:	60b9      	str	r1, [r7, #8]
 80009c4:	607a      	str	r2, [r7, #4]
 80009c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009cc:	f7ff ff5c 	bl	8000888 <__NVIC_GetPriorityGrouping>
 80009d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	68b9      	ldr	r1, [r7, #8]
 80009d6:	6978      	ldr	r0, [r7, #20]
 80009d8:	f7ff ff8e 	bl	80008f8 <NVIC_EncodePriority>
 80009dc:	4602      	mov	r2, r0
 80009de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e2:	4611      	mov	r1, r2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff5d 	bl	80008a4 <__NVIC_SetPriority>
}
 80009ea:	bf00      	nop
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff ffb0 	bl	8000960 <SysTick_Config>
 8000a00:	4603      	mov	r3, r0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b087      	sub	sp, #28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a1a:	e14e      	b.n	8000cba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	2101      	movs	r1, #1
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	fa01 f303 	lsl.w	r3, r1, r3
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f000 8140 	beq.w	8000cb4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f003 0303 	and.w	r3, r3, #3
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d005      	beq.n	8000a4c <HAL_GPIO_Init+0x40>
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f003 0303 	and.w	r3, r3, #3
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d130      	bne.n	8000aae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	2203      	movs	r2, #3
 8000a58:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4013      	ands	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	68da      	ldr	r2, [r3, #12]
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a82:	2201      	movs	r2, #1
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	091b      	lsrs	r3, r3, #4
 8000a98:	f003 0201 	and.w	r2, r3, #1
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f003 0303 	and.w	r3, r3, #3
 8000ab6:	2b03      	cmp	r3, #3
 8000ab8:	d017      	beq.n	8000aea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43db      	mvns	r3, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	689a      	ldr	r2, [r3, #8]
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f003 0303 	and.w	r3, r3, #3
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d123      	bne.n	8000b3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	08da      	lsrs	r2, r3, #3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	3208      	adds	r2, #8
 8000afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	220f      	movs	r2, #15
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43db      	mvns	r3, r3
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4013      	ands	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	691a      	ldr	r2, [r3, #16]
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	f003 0307 	and.w	r3, r3, #7
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	08da      	lsrs	r2, r3, #3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3208      	adds	r2, #8
 8000b38:	6939      	ldr	r1, [r7, #16]
 8000b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	2203      	movs	r2, #3
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f003 0203 	and.w	r2, r3, #3
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 809a 	beq.w	8000cb4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b80:	4b55      	ldr	r3, [pc, #340]	; (8000cd8 <HAL_GPIO_Init+0x2cc>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a54      	ldr	r2, [pc, #336]	; (8000cd8 <HAL_GPIO_Init+0x2cc>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b52      	ldr	r3, [pc, #328]	; (8000cd8 <HAL_GPIO_Init+0x2cc>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b98:	4a50      	ldr	r2, [pc, #320]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	089b      	lsrs	r3, r3, #2
 8000b9e:	3302      	adds	r3, #2
 8000ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	f003 0303 	and.w	r3, r3, #3
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	220f      	movs	r2, #15
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bc2:	d013      	beq.n	8000bec <HAL_GPIO_Init+0x1e0>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a46      	ldr	r2, [pc, #280]	; (8000ce0 <HAL_GPIO_Init+0x2d4>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d00d      	beq.n	8000be8 <HAL_GPIO_Init+0x1dc>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a45      	ldr	r2, [pc, #276]	; (8000ce4 <HAL_GPIO_Init+0x2d8>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d007      	beq.n	8000be4 <HAL_GPIO_Init+0x1d8>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a44      	ldr	r2, [pc, #272]	; (8000ce8 <HAL_GPIO_Init+0x2dc>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d101      	bne.n	8000be0 <HAL_GPIO_Init+0x1d4>
 8000bdc:	2303      	movs	r3, #3
 8000bde:	e006      	b.n	8000bee <HAL_GPIO_Init+0x1e2>
 8000be0:	2305      	movs	r3, #5
 8000be2:	e004      	b.n	8000bee <HAL_GPIO_Init+0x1e2>
 8000be4:	2302      	movs	r3, #2
 8000be6:	e002      	b.n	8000bee <HAL_GPIO_Init+0x1e2>
 8000be8:	2301      	movs	r3, #1
 8000bea:	e000      	b.n	8000bee <HAL_GPIO_Init+0x1e2>
 8000bec:	2300      	movs	r3, #0
 8000bee:	697a      	ldr	r2, [r7, #20]
 8000bf0:	f002 0203 	and.w	r2, r2, #3
 8000bf4:	0092      	lsls	r2, r2, #2
 8000bf6:	4093      	lsls	r3, r2
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bfe:	4937      	ldr	r1, [pc, #220]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	089b      	lsrs	r3, r3, #2
 8000c04:	3302      	adds	r3, #2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c0c:	4b37      	ldr	r3, [pc, #220]	; (8000cec <HAL_GPIO_Init+0x2e0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	43db      	mvns	r3, r3
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d003      	beq.n	8000c30 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c30:	4a2e      	ldr	r2, [pc, #184]	; (8000cec <HAL_GPIO_Init+0x2e0>)
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c36:	4b2d      	ldr	r3, [pc, #180]	; (8000cec <HAL_GPIO_Init+0x2e0>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d003      	beq.n	8000c5a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c5a:	4a24      	ldr	r2, [pc, #144]	; (8000cec <HAL_GPIO_Init+0x2e0>)
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c60:	4b22      	ldr	r3, [pc, #136]	; (8000cec <HAL_GPIO_Init+0x2e0>)
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d003      	beq.n	8000c84 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c84:	4a19      	ldr	r2, [pc, #100]	; (8000cec <HAL_GPIO_Init+0x2e0>)
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_GPIO_Init+0x2e0>)
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	43db      	mvns	r3, r3
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4013      	ands	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cae:	4a0f      	ldr	r2, [pc, #60]	; (8000cec <HAL_GPIO_Init+0x2e0>)
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f47f aea9 	bne.w	8000a1c <HAL_GPIO_Init+0x10>
  }
}
 8000cca:	bf00      	nop
 8000ccc:	bf00      	nop
 8000cce:	371c      	adds	r7, #28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010000 	.word	0x40010000
 8000ce0:	48000400 	.word	0x48000400
 8000ce4:	48000800 	.word	0x48000800
 8000ce8:	48000c00 	.word	0x48000c00
 8000cec:	40010400 	.word	0x40010400

08000cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	807b      	strh	r3, [r7, #2]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d00:	787b      	ldrb	r3, [r7, #1]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d06:	887a      	ldrh	r2, [r7, #2]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d0c:	e002      	b.n	8000d14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d0e:	887a      	ldrh	r2, [r7, #2]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d30:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	f001 b823 	b.w	8001d8c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f000 817d 	beq.w	8001056 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d5c:	4bbc      	ldr	r3, [pc, #752]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 030c 	and.w	r3, r3, #12
 8000d64:	2b04      	cmp	r3, #4
 8000d66:	d00c      	beq.n	8000d82 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d68:	4bb9      	ldr	r3, [pc, #740]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 030c 	and.w	r3, r3, #12
 8000d70:	2b08      	cmp	r3, #8
 8000d72:	d15c      	bne.n	8000e2e <HAL_RCC_OscConfig+0x10e>
 8000d74:	4bb6      	ldr	r3, [pc, #728]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d80:	d155      	bne.n	8000e2e <HAL_RCC_OscConfig+0x10e>
 8000d82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d86:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d8a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d8e:	fa93 f3a3 	rbit	r3, r3
 8000d92:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d96:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d9a:	fab3 f383 	clz	r3, r3
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	095b      	lsrs	r3, r3, #5
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d102      	bne.n	8000db4 <HAL_RCC_OscConfig+0x94>
 8000dae:	4ba8      	ldr	r3, [pc, #672]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	e015      	b.n	8000de0 <HAL_RCC_OscConfig+0xc0>
 8000db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000db8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dbc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000dc0:	fa93 f3a3 	rbit	r3, r3
 8000dc4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dcc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000dd0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000dd4:	fa93 f3a3 	rbit	r3, r3
 8000dd8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000ddc:	4b9c      	ldr	r3, [pc, #624]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000de4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000de8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000dec:	fa92 f2a2 	rbit	r2, r2
 8000df0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000df4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000df8:	fab2 f282 	clz	r2, r2
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	f042 0220 	orr.w	r2, r2, #32
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	f002 021f 	and.w	r2, r2, #31
 8000e08:	2101      	movs	r1, #1
 8000e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0e:	4013      	ands	r3, r2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f000 811f 	beq.w	8001054 <HAL_RCC_OscConfig+0x334>
 8000e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f040 8116 	bne.w	8001054 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	f000 bfaf 	b.w	8001d8c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e3e:	d106      	bne.n	8000e4e <HAL_RCC_OscConfig+0x12e>
 8000e40:	4b83      	ldr	r3, [pc, #524]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a82      	ldr	r2, [pc, #520]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	e036      	b.n	8000ebc <HAL_RCC_OscConfig+0x19c>
 8000e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10c      	bne.n	8000e78 <HAL_RCC_OscConfig+0x158>
 8000e5e:	4b7c      	ldr	r3, [pc, #496]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a7b      	ldr	r2, [pc, #492]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	4b79      	ldr	r3, [pc, #484]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a78      	ldr	r2, [pc, #480]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	e021      	b.n	8000ebc <HAL_RCC_OscConfig+0x19c>
 8000e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e88:	d10c      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x184>
 8000e8a:	4b71      	ldr	r3, [pc, #452]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a70      	ldr	r2, [pc, #448]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	4b6e      	ldr	r3, [pc, #440]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a6d      	ldr	r2, [pc, #436]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	e00b      	b.n	8000ebc <HAL_RCC_OscConfig+0x19c>
 8000ea4:	4b6a      	ldr	r3, [pc, #424]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a69      	ldr	r2, [pc, #420]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	4b67      	ldr	r3, [pc, #412]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a66      	ldr	r2, [pc, #408]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ebc:	4b64      	ldr	r3, [pc, #400]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec0:	f023 020f 	bic.w	r2, r3, #15
 8000ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ec8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	495f      	ldr	r1, [pc, #380]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d059      	beq.n	8000f9a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee6:	f7ff fc7b 	bl	80007e0 <HAL_GetTick>
 8000eea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eee:	e00a      	b.n	8000f06 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ef0:	f7ff fc76 	bl	80007e0 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b64      	cmp	r3, #100	; 0x64
 8000efe:	d902      	bls.n	8000f06 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	f000 bf43 	b.w	8001d8c <HAL_RCC_OscConfig+0x106c>
 8000f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f0a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f12:	fa93 f3a3 	rbit	r3, r3
 8000f16:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f1e:	fab3 f383 	clz	r3, r3
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	095b      	lsrs	r3, r3, #5
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d102      	bne.n	8000f38 <HAL_RCC_OscConfig+0x218>
 8000f32:	4b47      	ldr	r3, [pc, #284]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	e015      	b.n	8000f64 <HAL_RCC_OscConfig+0x244>
 8000f38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f3c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f40:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f44:	fa93 f3a3 	rbit	r3, r3
 8000f48:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f50:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f54:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f58:	fa93 f3a3 	rbit	r3, r3
 8000f5c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f60:	4b3b      	ldr	r3, [pc, #236]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f68:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f6c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f70:	fa92 f2a2 	rbit	r2, r2
 8000f74:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f78:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f7c:	fab2 f282 	clz	r2, r2
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	f042 0220 	orr.w	r2, r2, #32
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	f002 021f 	and.w	r2, r2, #31
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f92:	4013      	ands	r3, r2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0ab      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x1d0>
 8000f98:	e05d      	b.n	8001056 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9a:	f7ff fc21 	bl	80007e0 <HAL_GetTick>
 8000f9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa2:	e00a      	b.n	8000fba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa4:	f7ff fc1c 	bl	80007e0 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	2b64      	cmp	r3, #100	; 0x64
 8000fb2:	d902      	bls.n	8000fba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	f000 bee9 	b.w	8001d8c <HAL_RCC_OscConfig+0x106c>
 8000fba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fbe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000fc6:	fa93 f3a3 	rbit	r3, r3
 8000fca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000fce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd2:	fab3 f383 	clz	r3, r3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	095b      	lsrs	r3, r3, #5
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d102      	bne.n	8000fec <HAL_RCC_OscConfig+0x2cc>
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	e015      	b.n	8001018 <HAL_RCC_OscConfig+0x2f8>
 8000fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000ff8:	fa93 f3a3 	rbit	r3, r3
 8000ffc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001000:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001004:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001008:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800100c:	fa93 f3a3 	rbit	r3, r3
 8001010:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_RCC_OscConfig+0x330>)
 8001016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001018:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800101c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001020:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001024:	fa92 f2a2 	rbit	r2, r2
 8001028:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800102c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001030:	fab2 f282 	clz	r2, r2
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	f042 0220 	orr.w	r2, r2, #32
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	f002 021f 	and.w	r2, r2, #31
 8001040:	2101      	movs	r1, #1
 8001042:	fa01 f202 	lsl.w	r2, r1, r2
 8001046:	4013      	ands	r3, r2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1ab      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x284>
 800104c:	e003      	b.n	8001056 <HAL_RCC_OscConfig+0x336>
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800105a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 817d 	beq.w	8001366 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800106c:	4ba6      	ldr	r3, [pc, #664]	; (8001308 <HAL_RCC_OscConfig+0x5e8>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 030c 	and.w	r3, r3, #12
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00b      	beq.n	8001090 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001078:	4ba3      	ldr	r3, [pc, #652]	; (8001308 <HAL_RCC_OscConfig+0x5e8>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 030c 	and.w	r3, r3, #12
 8001080:	2b08      	cmp	r3, #8
 8001082:	d172      	bne.n	800116a <HAL_RCC_OscConfig+0x44a>
 8001084:	4ba0      	ldr	r3, [pc, #640]	; (8001308 <HAL_RCC_OscConfig+0x5e8>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d16c      	bne.n	800116a <HAL_RCC_OscConfig+0x44a>
 8001090:	2302      	movs	r3, #2
 8001092:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001096:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800109a:	fa93 f3a3 	rbit	r3, r3
 800109e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80010a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a6:	fab3 f383 	clz	r3, r3
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	095b      	lsrs	r3, r3, #5
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d102      	bne.n	80010c0 <HAL_RCC_OscConfig+0x3a0>
 80010ba:	4b93      	ldr	r3, [pc, #588]	; (8001308 <HAL_RCC_OscConfig+0x5e8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	e013      	b.n	80010e8 <HAL_RCC_OscConfig+0x3c8>
 80010c0:	2302      	movs	r3, #2
 80010c2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80010ca:	fa93 f3a3 	rbit	r3, r3
 80010ce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010d2:	2302      	movs	r3, #2
 80010d4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80010dc:	fa93 f3a3 	rbit	r3, r3
 80010e0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80010e4:	4b88      	ldr	r3, [pc, #544]	; (8001308 <HAL_RCC_OscConfig+0x5e8>)
 80010e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e8:	2202      	movs	r2, #2
 80010ea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80010ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010f2:	fa92 f2a2 	rbit	r2, r2
 80010f6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80010fa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80010fe:	fab2 f282 	clz	r2, r2
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	f042 0220 	orr.w	r2, r2, #32
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	f002 021f 	and.w	r2, r2, #31
 800110e:	2101      	movs	r1, #1
 8001110:	fa01 f202 	lsl.w	r2, r1, r2
 8001114:	4013      	ands	r3, r2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00a      	beq.n	8001130 <HAL_RCC_OscConfig+0x410>
 800111a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800111e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d002      	beq.n	8001130 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	f000 be2e 	b.w	8001d8c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001130:	4b75      	ldr	r3, [pc, #468]	; (8001308 <HAL_RCC_OscConfig+0x5e8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800113c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	21f8      	movs	r1, #248	; 0xf8
 8001146:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800114e:	fa91 f1a1 	rbit	r1, r1
 8001152:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001156:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800115a:	fab1 f181 	clz	r1, r1
 800115e:	b2c9      	uxtb	r1, r1
 8001160:	408b      	lsls	r3, r1
 8001162:	4969      	ldr	r1, [pc, #420]	; (8001308 <HAL_RCC_OscConfig+0x5e8>)
 8001164:	4313      	orrs	r3, r2
 8001166:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001168:	e0fd      	b.n	8001366 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800116a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800116e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 8088 	beq.w	800128c <HAL_RCC_OscConfig+0x56c>
 800117c:	2301      	movs	r3, #1
 800117e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001182:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001186:	fa93 f3a3 	rbit	r3, r3
 800118a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800118e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001192:	fab3 f383 	clz	r3, r3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800119c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	461a      	mov	r2, r3
 80011a4:	2301      	movs	r3, #1
 80011a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a8:	f7ff fb1a 	bl	80007e0 <HAL_GetTick>
 80011ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b0:	e00a      	b.n	80011c8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b2:	f7ff fb15 	bl	80007e0 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d902      	bls.n	80011c8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	f000 bde2 	b.w	8001d8c <HAL_RCC_OscConfig+0x106c>
 80011c8:	2302      	movs	r3, #2
 80011ca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80011d2:	fa93 f3a3 	rbit	r3, r3
 80011d6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80011da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011de:	fab3 f383 	clz	r3, r3
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	095b      	lsrs	r3, r3, #5
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d102      	bne.n	80011f8 <HAL_RCC_OscConfig+0x4d8>
 80011f2:	4b45      	ldr	r3, [pc, #276]	; (8001308 <HAL_RCC_OscConfig+0x5e8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	e013      	b.n	8001220 <HAL_RCC_OscConfig+0x500>
 80011f8:	2302      	movs	r3, #2
 80011fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001202:	fa93 f3a3 	rbit	r3, r3
 8001206:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800120a:	2302      	movs	r3, #2
 800120c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001210:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001214:	fa93 f3a3 	rbit	r3, r3
 8001218:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800121c:	4b3a      	ldr	r3, [pc, #232]	; (8001308 <HAL_RCC_OscConfig+0x5e8>)
 800121e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001220:	2202      	movs	r2, #2
 8001222:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001226:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800122a:	fa92 f2a2 	rbit	r2, r2
 800122e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001232:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001236:	fab2 f282 	clz	r2, r2
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	f042 0220 	orr.w	r2, r2, #32
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	f002 021f 	and.w	r2, r2, #31
 8001246:	2101      	movs	r1, #1
 8001248:	fa01 f202 	lsl.w	r2, r1, r2
 800124c:	4013      	ands	r3, r2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0af      	beq.n	80011b2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001252:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <HAL_RCC_OscConfig+0x5e8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800125a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800125e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	21f8      	movs	r1, #248	; 0xf8
 8001268:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001270:	fa91 f1a1 	rbit	r1, r1
 8001274:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001278:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800127c:	fab1 f181 	clz	r1, r1
 8001280:	b2c9      	uxtb	r1, r1
 8001282:	408b      	lsls	r3, r1
 8001284:	4920      	ldr	r1, [pc, #128]	; (8001308 <HAL_RCC_OscConfig+0x5e8>)
 8001286:	4313      	orrs	r3, r2
 8001288:	600b      	str	r3, [r1, #0]
 800128a:	e06c      	b.n	8001366 <HAL_RCC_OscConfig+0x646>
 800128c:	2301      	movs	r3, #1
 800128e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001296:	fa93 f3a3 	rbit	r3, r3
 800129a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800129e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a2:	fab3 f383 	clz	r3, r3
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	461a      	mov	r2, r3
 80012b4:	2300      	movs	r3, #0
 80012b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fa92 	bl	80007e0 <HAL_GetTick>
 80012bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c0:	e00a      	b.n	80012d8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c2:	f7ff fa8d 	bl	80007e0 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d902      	bls.n	80012d8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	f000 bd5a 	b.w	8001d8c <HAL_RCC_OscConfig+0x106c>
 80012d8:	2302      	movs	r3, #2
 80012da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80012e2:	fa93 f3a3 	rbit	r3, r3
 80012e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80012ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ee:	fab3 f383 	clz	r3, r3
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	095b      	lsrs	r3, r3, #5
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d104      	bne.n	800130c <HAL_RCC_OscConfig+0x5ec>
 8001302:	4b01      	ldr	r3, [pc, #4]	; (8001308 <HAL_RCC_OscConfig+0x5e8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	e015      	b.n	8001334 <HAL_RCC_OscConfig+0x614>
 8001308:	40021000 	.word	0x40021000
 800130c:	2302      	movs	r3, #2
 800130e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001312:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001316:	fa93 f3a3 	rbit	r3, r3
 800131a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800131e:	2302      	movs	r3, #2
 8001320:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001324:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001328:	fa93 f3a3 	rbit	r3, r3
 800132c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001330:	4bc8      	ldr	r3, [pc, #800]	; (8001654 <HAL_RCC_OscConfig+0x934>)
 8001332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001334:	2202      	movs	r2, #2
 8001336:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800133a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800133e:	fa92 f2a2 	rbit	r2, r2
 8001342:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001346:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800134a:	fab2 f282 	clz	r2, r2
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	f042 0220 	orr.w	r2, r2, #32
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	f002 021f 	and.w	r2, r2, #31
 800135a:	2101      	movs	r1, #1
 800135c:	fa01 f202 	lsl.w	r2, r1, r2
 8001360:	4013      	ands	r3, r2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1ad      	bne.n	80012c2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800136a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 8110 	beq.w	800159c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800137c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001380:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d079      	beq.n	8001480 <HAL_RCC_OscConfig+0x760>
 800138c:	2301      	movs	r3, #1
 800138e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001392:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001396:	fa93 f3a3 	rbit	r3, r3
 800139a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800139e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013a2:	fab3 f383 	clz	r3, r3
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	461a      	mov	r2, r3
 80013aa:	4bab      	ldr	r3, [pc, #684]	; (8001658 <HAL_RCC_OscConfig+0x938>)
 80013ac:	4413      	add	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	461a      	mov	r2, r3
 80013b2:	2301      	movs	r3, #1
 80013b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b6:	f7ff fa13 	bl	80007e0 <HAL_GetTick>
 80013ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013be:	e00a      	b.n	80013d6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c0:	f7ff fa0e 	bl	80007e0 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d902      	bls.n	80013d6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	f000 bcdb 	b.w	8001d8c <HAL_RCC_OscConfig+0x106c>
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80013e0:	fa93 f3a3 	rbit	r3, r3
 80013e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80013e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013f0:	2202      	movs	r2, #2
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	fa93 f2a3 	rbit	r2, r3
 8001402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001406:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001414:	2202      	movs	r2, #2
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	fa93 f2a3 	rbit	r2, r3
 8001426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800142e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001430:	4b88      	ldr	r3, [pc, #544]	; (8001654 <HAL_RCC_OscConfig+0x934>)
 8001432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001438:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800143c:	2102      	movs	r1, #2
 800143e:	6019      	str	r1, [r3, #0]
 8001440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001444:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	fa93 f1a3 	rbit	r1, r3
 800144e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001452:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001456:	6019      	str	r1, [r3, #0]
  return result;
 8001458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	fab3 f383 	clz	r3, r3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800146c:	b2db      	uxtb	r3, r3
 800146e:	f003 031f 	and.w	r3, r3, #31
 8001472:	2101      	movs	r1, #1
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	4013      	ands	r3, r2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0a0      	beq.n	80013c0 <HAL_RCC_OscConfig+0x6a0>
 800147e:	e08d      	b.n	800159c <HAL_RCC_OscConfig+0x87c>
 8001480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001484:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001488:	2201      	movs	r2, #1
 800148a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001490:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	fa93 f2a3 	rbit	r2, r3
 800149a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014a2:	601a      	str	r2, [r3, #0]
  return result;
 80014a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ae:	fab3 f383 	clz	r3, r3
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b68      	ldr	r3, [pc, #416]	; (8001658 <HAL_RCC_OscConfig+0x938>)
 80014b8:	4413      	add	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	461a      	mov	r2, r3
 80014be:	2300      	movs	r3, #0
 80014c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c2:	f7ff f98d 	bl	80007e0 <HAL_GetTick>
 80014c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ca:	e00a      	b.n	80014e2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014cc:	f7ff f988 	bl	80007e0 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d902      	bls.n	80014e2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	f000 bc55 	b.w	8001d8c <HAL_RCC_OscConfig+0x106c>
 80014e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014ea:	2202      	movs	r2, #2
 80014ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	fa93 f2a3 	rbit	r2, r3
 80014fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001500:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800150e:	2202      	movs	r2, #2
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001516:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	fa93 f2a3 	rbit	r2, r3
 8001520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001524:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001532:	2202      	movs	r2, #2
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	fa93 f2a3 	rbit	r2, r3
 8001544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001548:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800154c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800154e:	4b41      	ldr	r3, [pc, #260]	; (8001654 <HAL_RCC_OscConfig+0x934>)
 8001550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001556:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800155a:	2102      	movs	r1, #2
 800155c:	6019      	str	r1, [r3, #0]
 800155e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001562:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	fa93 f1a3 	rbit	r1, r3
 800156c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001570:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001574:	6019      	str	r1, [r3, #0]
  return result;
 8001576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	fab3 f383 	clz	r3, r3
 8001584:	b2db      	uxtb	r3, r3
 8001586:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800158a:	b2db      	uxtb	r3, r3
 800158c:	f003 031f 	and.w	r3, r3, #31
 8001590:	2101      	movs	r1, #1
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	4013      	ands	r3, r2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d197      	bne.n	80014cc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 81a1 	beq.w	80018f4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015b8:	4b26      	ldr	r3, [pc, #152]	; (8001654 <HAL_RCC_OscConfig+0x934>)
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d116      	bne.n	80015f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c4:	4b23      	ldr	r3, [pc, #140]	; (8001654 <HAL_RCC_OscConfig+0x934>)
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	4a22      	ldr	r2, [pc, #136]	; (8001654 <HAL_RCC_OscConfig+0x934>)
 80015ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ce:	61d3      	str	r3, [r2, #28]
 80015d0:	4b20      	ldr	r3, [pc, #128]	; (8001654 <HAL_RCC_OscConfig+0x934>)
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80015d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015dc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015ec:	2301      	movs	r3, #1
 80015ee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <HAL_RCC_OscConfig+0x93c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d11a      	bne.n	8001634 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <HAL_RCC_OscConfig+0x93c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a16      	ldr	r2, [pc, #88]	; (800165c <HAL_RCC_OscConfig+0x93c>)
 8001604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001608:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160a:	f7ff f8e9 	bl	80007e0 <HAL_GetTick>
 800160e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001612:	e009      	b.n	8001628 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001614:	f7ff f8e4 	bl	80007e0 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b64      	cmp	r3, #100	; 0x64
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e3b1      	b.n	8001d8c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_RCC_OscConfig+0x93c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0ef      	beq.n	8001614 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001638:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d10d      	bne.n	8001660 <HAL_RCC_OscConfig+0x940>
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <HAL_RCC_OscConfig+0x934>)
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4a02      	ldr	r2, [pc, #8]	; (8001654 <HAL_RCC_OscConfig+0x934>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6213      	str	r3, [r2, #32]
 8001650:	e03c      	b.n	80016cc <HAL_RCC_OscConfig+0x9ac>
 8001652:	bf00      	nop
 8001654:	40021000 	.word	0x40021000
 8001658:	10908120 	.word	0x10908120
 800165c:	40007000 	.word	0x40007000
 8001660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001664:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d10c      	bne.n	800168a <HAL_RCC_OscConfig+0x96a>
 8001670:	4bc1      	ldr	r3, [pc, #772]	; (8001978 <HAL_RCC_OscConfig+0xc58>)
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	4ac0      	ldr	r2, [pc, #768]	; (8001978 <HAL_RCC_OscConfig+0xc58>)
 8001676:	f023 0301 	bic.w	r3, r3, #1
 800167a:	6213      	str	r3, [r2, #32]
 800167c:	4bbe      	ldr	r3, [pc, #760]	; (8001978 <HAL_RCC_OscConfig+0xc58>)
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	4abd      	ldr	r2, [pc, #756]	; (8001978 <HAL_RCC_OscConfig+0xc58>)
 8001682:	f023 0304 	bic.w	r3, r3, #4
 8001686:	6213      	str	r3, [r2, #32]
 8001688:	e020      	b.n	80016cc <HAL_RCC_OscConfig+0x9ac>
 800168a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2b05      	cmp	r3, #5
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x994>
 800169a:	4bb7      	ldr	r3, [pc, #732]	; (8001978 <HAL_RCC_OscConfig+0xc58>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4ab6      	ldr	r2, [pc, #728]	; (8001978 <HAL_RCC_OscConfig+0xc58>)
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	6213      	str	r3, [r2, #32]
 80016a6:	4bb4      	ldr	r3, [pc, #720]	; (8001978 <HAL_RCC_OscConfig+0xc58>)
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4ab3      	ldr	r2, [pc, #716]	; (8001978 <HAL_RCC_OscConfig+0xc58>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6213      	str	r3, [r2, #32]
 80016b2:	e00b      	b.n	80016cc <HAL_RCC_OscConfig+0x9ac>
 80016b4:	4bb0      	ldr	r3, [pc, #704]	; (8001978 <HAL_RCC_OscConfig+0xc58>)
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	4aaf      	ldr	r2, [pc, #700]	; (8001978 <HAL_RCC_OscConfig+0xc58>)
 80016ba:	f023 0301 	bic.w	r3, r3, #1
 80016be:	6213      	str	r3, [r2, #32]
 80016c0:	4bad      	ldr	r3, [pc, #692]	; (8001978 <HAL_RCC_OscConfig+0xc58>)
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	4aac      	ldr	r2, [pc, #688]	; (8001978 <HAL_RCC_OscConfig+0xc58>)
 80016c6:	f023 0304 	bic.w	r3, r3, #4
 80016ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 8081 	beq.w	80017e0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016de:	f7ff f87f 	bl	80007e0 <HAL_GetTick>
 80016e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e6:	e00b      	b.n	8001700 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e8:	f7ff f87a 	bl	80007e0 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e345      	b.n	8001d8c <HAL_RCC_OscConfig+0x106c>
 8001700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001704:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001708:	2202      	movs	r2, #2
 800170a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001710:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	fa93 f2a3 	rbit	r2, r3
 800171a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001728:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800172c:	2202      	movs	r2, #2
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001734:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	fa93 f2a3 	rbit	r2, r3
 800173e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001742:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001746:	601a      	str	r2, [r3, #0]
  return result;
 8001748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001750:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001752:	fab3 f383 	clz	r3, r3
 8001756:	b2db      	uxtb	r3, r3
 8001758:	095b      	lsrs	r3, r3, #5
 800175a:	b2db      	uxtb	r3, r3
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d102      	bne.n	800176c <HAL_RCC_OscConfig+0xa4c>
 8001766:	4b84      	ldr	r3, [pc, #528]	; (8001978 <HAL_RCC_OscConfig+0xc58>)
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	e013      	b.n	8001794 <HAL_RCC_OscConfig+0xa74>
 800176c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001770:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001774:	2202      	movs	r2, #2
 8001776:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	fa93 f2a3 	rbit	r2, r3
 8001786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	4b79      	ldr	r3, [pc, #484]	; (8001978 <HAL_RCC_OscConfig+0xc58>)
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001798:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800179c:	2102      	movs	r1, #2
 800179e:	6011      	str	r1, [r2, #0]
 80017a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017a4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	fa92 f1a2 	rbit	r1, r2
 80017ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017b2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017b6:	6011      	str	r1, [r2, #0]
  return result;
 80017b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017bc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	fab2 f282 	clz	r2, r2
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	f002 021f 	and.w	r2, r2, #31
 80017d2:	2101      	movs	r1, #1
 80017d4:	fa01 f202 	lsl.w	r2, r1, r2
 80017d8:	4013      	ands	r3, r2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d084      	beq.n	80016e8 <HAL_RCC_OscConfig+0x9c8>
 80017de:	e07f      	b.n	80018e0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e0:	f7fe fffe 	bl	80007e0 <HAL_GetTick>
 80017e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e8:	e00b      	b.n	8001802 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ea:	f7fe fff9 	bl	80007e0 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e2c4      	b.n	8001d8c <HAL_RCC_OscConfig+0x106c>
 8001802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001806:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800180a:	2202      	movs	r2, #2
 800180c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001812:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	fa93 f2a3 	rbit	r2, r3
 800181c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001820:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800182e:	2202      	movs	r2, #2
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001836:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	fa93 f2a3 	rbit	r2, r3
 8001840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001844:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001848:	601a      	str	r2, [r3, #0]
  return result;
 800184a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001852:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001854:	fab3 f383 	clz	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	095b      	lsrs	r3, r3, #5
 800185c:	b2db      	uxtb	r3, r3
 800185e:	f043 0302 	orr.w	r3, r3, #2
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d102      	bne.n	800186e <HAL_RCC_OscConfig+0xb4e>
 8001868:	4b43      	ldr	r3, [pc, #268]	; (8001978 <HAL_RCC_OscConfig+0xc58>)
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	e013      	b.n	8001896 <HAL_RCC_OscConfig+0xb76>
 800186e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001872:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001876:	2202      	movs	r2, #2
 8001878:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	fa93 f2a3 	rbit	r2, r3
 8001888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	4b39      	ldr	r3, [pc, #228]	; (8001978 <HAL_RCC_OscConfig+0xc58>)
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800189a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800189e:	2102      	movs	r1, #2
 80018a0:	6011      	str	r1, [r2, #0]
 80018a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018a6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	fa92 f1a2 	rbit	r1, r2
 80018b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018b8:	6011      	str	r1, [r2, #0]
  return result;
 80018ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018be:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	fab2 f282 	clz	r2, r2
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	f002 021f 	and.w	r2, r2, #31
 80018d4:	2101      	movs	r1, #1
 80018d6:	fa01 f202 	lsl.w	r2, r1, r2
 80018da:	4013      	ands	r3, r2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d184      	bne.n	80017ea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d105      	bne.n	80018f4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e8:	4b23      	ldr	r3, [pc, #140]	; (8001978 <HAL_RCC_OscConfig+0xc58>)
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	4a22      	ldr	r2, [pc, #136]	; (8001978 <HAL_RCC_OscConfig+0xc58>)
 80018ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 8242 	beq.w	8001d8a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <HAL_RCC_OscConfig+0xc58>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	2b08      	cmp	r3, #8
 8001910:	f000 8213 	beq.w	8001d3a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001918:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	2b02      	cmp	r3, #2
 8001922:	f040 8162 	bne.w	8001bea <HAL_RCC_OscConfig+0xeca>
 8001926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800192e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001932:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001938:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	fa93 f2a3 	rbit	r2, r3
 8001942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001946:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800194a:	601a      	str	r2, [r3, #0]
  return result;
 800194c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001950:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001954:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001956:	fab3 f383 	clz	r3, r3
 800195a:	b2db      	uxtb	r3, r3
 800195c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001960:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	461a      	mov	r2, r3
 8001968:	2300      	movs	r3, #0
 800196a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7fe ff38 	bl	80007e0 <HAL_GetTick>
 8001970:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001974:	e00c      	b.n	8001990 <HAL_RCC_OscConfig+0xc70>
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197c:	f7fe ff30 	bl	80007e0 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e1fd      	b.n	8001d8c <HAL_RCC_OscConfig+0x106c>
 8001990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001994:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001998:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800199c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	fa93 f2a3 	rbit	r2, r3
 80019ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019b4:	601a      	str	r2, [r3, #0]
  return result;
 80019b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c0:	fab3 f383 	clz	r3, r3
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d102      	bne.n	80019da <HAL_RCC_OscConfig+0xcba>
 80019d4:	4bb0      	ldr	r3, [pc, #704]	; (8001c98 <HAL_RCC_OscConfig+0xf78>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	e027      	b.n	8001a2a <HAL_RCC_OscConfig+0xd0a>
 80019da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019de:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	fa93 f2a3 	rbit	r2, r3
 80019f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a04:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a12:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	fa93 f2a3 	rbit	r2, r3
 8001a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a20:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	4b9c      	ldr	r3, [pc, #624]	; (8001c98 <HAL_RCC_OscConfig+0xf78>)
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a2e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a32:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a36:	6011      	str	r1, [r2, #0]
 8001a38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a3c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	fa92 f1a2 	rbit	r1, r2
 8001a46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a4a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a4e:	6011      	str	r1, [r2, #0]
  return result;
 8001a50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a54:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	fab2 f282 	clz	r2, r2
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	f042 0220 	orr.w	r2, r2, #32
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	f002 021f 	and.w	r2, r2, #31
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d182      	bne.n	800197c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a76:	4b88      	ldr	r3, [pc, #544]	; (8001c98 <HAL_RCC_OscConfig+0xf78>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	430b      	orrs	r3, r1
 8001a98:	497f      	ldr	r1, [pc, #508]	; (8001c98 <HAL_RCC_OscConfig+0xf78>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
 8001a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001aa6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	fa93 f2a3 	rbit	r2, r3
 8001aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ac2:	601a      	str	r2, [r3, #0]
  return result;
 8001ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001acc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ace:	fab3 f383 	clz	r3, r3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ad8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	461a      	mov	r2, r3
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7fe fe7c 	bl	80007e0 <HAL_GetTick>
 8001ae8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aec:	e009      	b.n	8001b02 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aee:	f7fe fe77 	bl	80007e0 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e144      	b.n	8001d8c <HAL_RCC_OscConfig+0x106c>
 8001b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b06:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b14:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	fa93 f2a3 	rbit	r2, r3
 8001b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b22:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b26:	601a      	str	r2, [r3, #0]
  return result;
 8001b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	095b      	lsrs	r3, r3, #5
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d102      	bne.n	8001b4c <HAL_RCC_OscConfig+0xe2c>
 8001b46:	4b54      	ldr	r3, [pc, #336]	; (8001c98 <HAL_RCC_OscConfig+0xf78>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	e027      	b.n	8001b9c <HAL_RCC_OscConfig+0xe7c>
 8001b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b50:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	fa93 f2a3 	rbit	r2, r3
 8001b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b76:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b84:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	fa93 f2a3 	rbit	r2, r3
 8001b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b92:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	4b3f      	ldr	r3, [pc, #252]	; (8001c98 <HAL_RCC_OscConfig+0xf78>)
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ba0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001ba4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ba8:	6011      	str	r1, [r2, #0]
 8001baa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	fa92 f1a2 	rbit	r1, r2
 8001bb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bbc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001bc0:	6011      	str	r1, [r2, #0]
  return result;
 8001bc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bc6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	fab2 f282 	clz	r2, r2
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	f042 0220 	orr.w	r2, r2, #32
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	f002 021f 	and.w	r2, r2, #31
 8001bdc:	2101      	movs	r1, #1
 8001bde:	fa01 f202 	lsl.w	r2, r1, r2
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d082      	beq.n	8001aee <HAL_RCC_OscConfig+0xdce>
 8001be8:	e0cf      	b.n	8001d8a <HAL_RCC_OscConfig+0x106a>
 8001bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bf2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	fa93 f2a3 	rbit	r2, r3
 8001c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c0e:	601a      	str	r2, [r3, #0]
  return result;
 8001c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c14:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c18:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7fe fdd6 	bl	80007e0 <HAL_GetTick>
 8001c34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c38:	e009      	b.n	8001c4e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3a:	f7fe fdd1 	bl	80007e0 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e09e      	b.n	8001d8c <HAL_RCC_OscConfig+0x106c>
 8001c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c52:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c60:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	fa93 f2a3 	rbit	r2, r3
 8001c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c72:	601a      	str	r2, [r3, #0]
  return result;
 8001c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c78:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c7e:	fab3 f383 	clz	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	095b      	lsrs	r3, r3, #5
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d104      	bne.n	8001c9c <HAL_RCC_OscConfig+0xf7c>
 8001c92:	4b01      	ldr	r3, [pc, #4]	; (8001c98 <HAL_RCC_OscConfig+0xf78>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	e029      	b.n	8001cec <HAL_RCC_OscConfig+0xfcc>
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ca4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ca8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	fa93 f2a3 	rbit	r2, r3
 8001cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	fa93 f2a3 	rbit	r2, r3
 8001cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	4b2b      	ldr	r3, [pc, #172]	; (8001d98 <HAL_RCC_OscConfig+0x1078>)
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cf0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001cf4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cf8:	6011      	str	r1, [r2, #0]
 8001cfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cfe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	fa92 f1a2 	rbit	r1, r2
 8001d08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d0c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d10:	6011      	str	r1, [r2, #0]
  return result;
 8001d12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d16:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	fab2 f282 	clz	r2, r2
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	f042 0220 	orr.w	r2, r2, #32
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	f002 021f 	and.w	r2, r2, #31
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d180      	bne.n	8001c3a <HAL_RCC_OscConfig+0xf1a>
 8001d38:	e027      	b.n	8001d8a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e01e      	b.n	8001d8c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d4e:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <HAL_RCC_OscConfig+0x1078>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d5a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d10b      	bne.n	8001d86 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d001      	beq.n	8001d8a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000

08001d9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b09e      	sub	sp, #120	; 0x78
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e162      	b.n	800207a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001db4:	4b90      	ldr	r3, [pc, #576]	; (8001ff8 <HAL_RCC_ClockConfig+0x25c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d910      	bls.n	8001de4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc2:	4b8d      	ldr	r3, [pc, #564]	; (8001ff8 <HAL_RCC_ClockConfig+0x25c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f023 0207 	bic.w	r2, r3, #7
 8001dca:	498b      	ldr	r1, [pc, #556]	; (8001ff8 <HAL_RCC_ClockConfig+0x25c>)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	4b89      	ldr	r3, [pc, #548]	; (8001ff8 <HAL_RCC_ClockConfig+0x25c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e14a      	b.n	800207a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d008      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df0:	4b82      	ldr	r3, [pc, #520]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	497f      	ldr	r1, [pc, #508]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 80dc 	beq.w	8001fc8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d13c      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xf6>
 8001e18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e1c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e28:	fab3 f383 	clz	r3, r3
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d102      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xa6>
 8001e3c:	4b6f      	ldr	r3, [pc, #444]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	e00f      	b.n	8001e62 <HAL_RCC_ClockConfig+0xc6>
 8001e42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	667b      	str	r3, [r7, #100]	; 0x64
 8001e50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e54:	663b      	str	r3, [r7, #96]	; 0x60
 8001e56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e58:	fa93 f3a3 	rbit	r3, r3
 8001e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e5e:	4b67      	ldr	r3, [pc, #412]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e66:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e6a:	fa92 f2a2 	rbit	r2, r2
 8001e6e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e72:	fab2 f282 	clz	r2, r2
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	f042 0220 	orr.w	r2, r2, #32
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	f002 021f 	and.w	r2, r2, #31
 8001e82:	2101      	movs	r1, #1
 8001e84:	fa01 f202 	lsl.w	r2, r1, r2
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d17b      	bne.n	8001f86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e0f3      	b.n	800207a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d13c      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x178>
 8001e9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eaa:	fab3 f383 	clz	r3, r3
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	095b      	lsrs	r3, r3, #5
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d102      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x128>
 8001ebe:	4b4f      	ldr	r3, [pc, #316]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	e00f      	b.n	8001ee4 <HAL_RCC_ClockConfig+0x148>
 8001ec4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ec8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ed2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ed6:	643b      	str	r3, [r7, #64]	; 0x40
 8001ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eda:	fa93 f3a3 	rbit	r3, r3
 8001ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ee0:	4b46      	ldr	r3, [pc, #280]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ee8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001eea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001eec:	fa92 f2a2 	rbit	r2, r2
 8001ef0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ef4:	fab2 f282 	clz	r2, r2
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	f042 0220 	orr.w	r2, r2, #32
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	f002 021f 	and.w	r2, r2, #31
 8001f04:	2101      	movs	r1, #1
 8001f06:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d13a      	bne.n	8001f86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0b2      	b.n	800207a <HAL_RCC_ClockConfig+0x2de>
 8001f14:	2302      	movs	r3, #2
 8001f16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1a:	fa93 f3a3 	rbit	r3, r3
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	095b      	lsrs	r3, r3, #5
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d102      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x1a0>
 8001f36:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	e00d      	b.n	8001f58 <HAL_RCC_ClockConfig+0x1bc>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f42:	fa93 f3a3 	rbit	r3, r3
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
 8001f48:	2302      	movs	r3, #2
 8001f4a:	623b      	str	r3, [r7, #32]
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	61fb      	str	r3, [r7, #28]
 8001f54:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	2202      	movs	r2, #2
 8001f5a:	61ba      	str	r2, [r7, #24]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	fa92 f2a2 	rbit	r2, r2
 8001f62:	617a      	str	r2, [r7, #20]
  return result;
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	fab2 f282 	clz	r2, r2
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	f042 0220 	orr.w	r2, r2, #32
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	f002 021f 	and.w	r2, r2, #31
 8001f76:	2101      	movs	r1, #1
 8001f78:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e079      	b.n	800207a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f86:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f023 0203 	bic.w	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	491a      	ldr	r1, [pc, #104]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f98:	f7fe fc22 	bl	80007e0 <HAL_GetTick>
 8001f9c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa0:	f7fe fc1e 	bl	80007e0 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e061      	b.n	800207a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 020c 	and.w	r2, r3, #12
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d1eb      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_RCC_ClockConfig+0x25c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d214      	bcs.n	8002000 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_RCC_ClockConfig+0x25c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 0207 	bic.w	r2, r3, #7
 8001fde:	4906      	ldr	r1, [pc, #24]	; (8001ff8 <HAL_RCC_ClockConfig+0x25c>)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe6:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <HAL_RCC_ClockConfig+0x25c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d005      	beq.n	8002000 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e040      	b.n	800207a <HAL_RCC_ClockConfig+0x2de>
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d008      	beq.n	800201e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800200c:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <HAL_RCC_ClockConfig+0x2e8>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	491a      	ldr	r1, [pc, #104]	; (8002084 <HAL_RCC_ClockConfig+0x2e8>)
 800201a:	4313      	orrs	r3, r2
 800201c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800202a:	4b16      	ldr	r3, [pc, #88]	; (8002084 <HAL_RCC_ClockConfig+0x2e8>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4912      	ldr	r1, [pc, #72]	; (8002084 <HAL_RCC_ClockConfig+0x2e8>)
 800203a:	4313      	orrs	r3, r2
 800203c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800203e:	f000 f829 	bl	8002094 <HAL_RCC_GetSysClockFreq>
 8002042:	4601      	mov	r1, r0
 8002044:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <HAL_RCC_ClockConfig+0x2e8>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800204c:	22f0      	movs	r2, #240	; 0xf0
 800204e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	fa92 f2a2 	rbit	r2, r2
 8002056:	60fa      	str	r2, [r7, #12]
  return result;
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	fab2 f282 	clz	r2, r2
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	40d3      	lsrs	r3, r2
 8002062:	4a09      	ldr	r2, [pc, #36]	; (8002088 <HAL_RCC_ClockConfig+0x2ec>)
 8002064:	5cd3      	ldrb	r3, [r2, r3]
 8002066:	fa21 f303 	lsr.w	r3, r1, r3
 800206a:	4a08      	ldr	r2, [pc, #32]	; (800208c <HAL_RCC_ClockConfig+0x2f0>)
 800206c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800206e:	4b08      	ldr	r3, [pc, #32]	; (8002090 <HAL_RCC_ClockConfig+0x2f4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fb70 	bl	8000758 <HAL_InitTick>
  
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3778      	adds	r7, #120	; 0x78
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	08003830 	.word	0x08003830
 800208c:	20000000 	.word	0x20000000
 8002090:	20000004 	.word	0x20000004

08002094 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002094:	b480      	push	{r7}
 8002096:	b08b      	sub	sp, #44	; 0x2c
 8002098:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	2300      	movs	r3, #0
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80020ae:	4b29      	ldr	r3, [pc, #164]	; (8002154 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d002      	beq.n	80020c4 <HAL_RCC_GetSysClockFreq+0x30>
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d003      	beq.n	80020ca <HAL_RCC_GetSysClockFreq+0x36>
 80020c2:	e03c      	b.n	800213e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020c4:	4b24      	ldr	r3, [pc, #144]	; (8002158 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020c6:	623b      	str	r3, [r7, #32]
      break;
 80020c8:	e03c      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	fa92 f2a2 	rbit	r2, r2
 80020dc:	607a      	str	r2, [r7, #4]
  return result;
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	fab2 f282 	clz	r2, r2
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	40d3      	lsrs	r3, r2
 80020e8:	4a1c      	ldr	r2, [pc, #112]	; (800215c <HAL_RCC_GetSysClockFreq+0xc8>)
 80020ea:	5cd3      	ldrb	r3, [r2, r3]
 80020ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020ee:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	220f      	movs	r2, #15
 80020f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	fa92 f2a2 	rbit	r2, r2
 8002100:	60fa      	str	r2, [r7, #12]
  return result;
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	fab2 f282 	clz	r2, r2
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	40d3      	lsrs	r3, r2
 800210c:	4a14      	ldr	r2, [pc, #80]	; (8002160 <HAL_RCC_GetSysClockFreq+0xcc>)
 800210e:	5cd3      	ldrb	r3, [r2, r3]
 8002110:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800211c:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <HAL_RCC_GetSysClockFreq+0xc4>)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	fbb2 f2f3 	udiv	r2, r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fb02 f303 	mul.w	r3, r2, r3
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
 800212c:	e004      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002132:	fb02 f303 	mul.w	r3, r2, r3
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	623b      	str	r3, [r7, #32]
      break;
 800213c:	e002      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002140:	623b      	str	r3, [r7, #32]
      break;
 8002142:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002144:	6a3b      	ldr	r3, [r7, #32]
}
 8002146:	4618      	mov	r0, r3
 8002148:	372c      	adds	r7, #44	; 0x2c
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000
 8002158:	007a1200 	.word	0x007a1200
 800215c:	08003848 	.word	0x08003848
 8002160:	08003858 	.word	0x08003858
 8002164:	003d0900 	.word	0x003d0900

08002168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <HAL_RCC_GetHCLKFreq+0x14>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000000 	.word	0x20000000

08002180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002186:	f7ff ffef 	bl	8002168 <HAL_RCC_GetHCLKFreq>
 800218a:	4601      	mov	r1, r0
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002194:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002198:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	fa92 f2a2 	rbit	r2, r2
 80021a0:	603a      	str	r2, [r7, #0]
  return result;
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	fab2 f282 	clz	r2, r2
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	40d3      	lsrs	r3, r2
 80021ac:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021ae:	5cd3      	ldrb	r3, [r2, r3]
 80021b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000
 80021c0:	08003840 	.word	0x08003840

080021c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021ca:	f7ff ffcd 	bl	8002168 <HAL_RCC_GetHCLKFreq>
 80021ce:	4601      	mov	r1, r0
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	fa92 f2a2 	rbit	r2, r2
 80021e4:	603a      	str	r2, [r7, #0]
  return result;
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	fab2 f282 	clz	r2, r2
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	40d3      	lsrs	r3, r2
 80021f0:	4a04      	ldr	r2, [pc, #16]	; (8002204 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021f2:	5cd3      	ldrb	r3, [r2, r3]
 80021f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	08003840 	.word	0x08003840

08002208 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b092      	sub	sp, #72	; 0x48
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002218:	2300      	movs	r3, #0
 800221a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 80cd 	beq.w	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800222c:	4b86      	ldr	r3, [pc, #536]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10e      	bne.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002238:	4b83      	ldr	r3, [pc, #524]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	4a82      	ldr	r2, [pc, #520]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800223e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002242:	61d3      	str	r3, [r2, #28]
 8002244:	4b80      	ldr	r3, [pc, #512]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002250:	2301      	movs	r3, #1
 8002252:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002256:	4b7d      	ldr	r3, [pc, #500]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d118      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002262:	4b7a      	ldr	r3, [pc, #488]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a79      	ldr	r2, [pc, #484]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226e:	f7fe fab7 	bl	80007e0 <HAL_GetTick>
 8002272:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002274:	e008      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002276:	f7fe fab3 	bl	80007e0 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b64      	cmp	r3, #100	; 0x64
 8002282:	d901      	bls.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e0db      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002288:	4b70      	ldr	r3, [pc, #448]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f0      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002294:	4b6c      	ldr	r3, [pc, #432]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800229c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800229e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d07d      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d076      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022b2:	4b65      	ldr	r3, [pc, #404]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022c0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c4:	fa93 f3a3 	rbit	r3, r3
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b5e      	ldr	r3, [pc, #376]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	461a      	mov	r2, r3
 80022dc:	2301      	movs	r3, #1
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022f0:	fab3 f383 	clz	r3, r3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	4b55      	ldr	r3, [pc, #340]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	461a      	mov	r2, r3
 8002300:	2300      	movs	r3, #0
 8002302:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002304:	4a50      	ldr	r2, [pc, #320]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002308:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800230a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	d045      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7fe fa64 	bl	80007e0 <HAL_GetTick>
 8002318:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231a:	e00a      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231c:	f7fe fa60 	bl	80007e0 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f241 3288 	movw	r2, #5000	; 0x1388
 800232a:	4293      	cmp	r3, r2
 800232c:	d901      	bls.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e086      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002332:	2302      	movs	r3, #2
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
 800233e:	2302      	movs	r3, #2
 8002340:	623b      	str	r3, [r7, #32]
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	61fb      	str	r3, [r7, #28]
  return result;
 800234a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234c:	fab3 f383 	clz	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f043 0302 	orr.w	r3, r3, #2
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d102      	bne.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002360:	4b39      	ldr	r3, [pc, #228]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	e007      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002366:	2302      	movs	r3, #2
 8002368:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	4b35      	ldr	r3, [pc, #212]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	2202      	movs	r2, #2
 8002378:	613a      	str	r2, [r7, #16]
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	fa92 f2a2 	rbit	r2, r2
 8002380:	60fa      	str	r2, [r7, #12]
  return result;
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	fab2 f282 	clz	r2, r2
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	f002 021f 	and.w	r2, r2, #31
 8002394:	2101      	movs	r1, #1
 8002396:	fa01 f202 	lsl.w	r2, r1, r2
 800239a:	4013      	ands	r3, r2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0bd      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023a0:	4b29      	ldr	r3, [pc, #164]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4926      	ldr	r1, [pc, #152]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d105      	bne.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ba:	4b23      	ldr	r3, [pc, #140]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	4a22      	ldr	r2, [pc, #136]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d008      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023d2:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f023 0203 	bic.w	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	491a      	ldr	r1, [pc, #104]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023f0:	4b15      	ldr	r3, [pc, #84]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	f023 0210 	bic.w	r2, r3, #16
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4912      	ldr	r1, [pc, #72]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240a:	2b00      	cmp	r3, #0
 800240c:	d008      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800240e:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	490b      	ldr	r1, [pc, #44]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800241c:	4313      	orrs	r3, r2
 800241e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	4903      	ldr	r1, [pc, #12]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800243a:	4313      	orrs	r3, r2
 800243c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3748      	adds	r7, #72	; 0x48
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40021000 	.word	0x40021000
 800244c:	40007000 	.word	0x40007000
 8002450:	10908100 	.word	0x10908100

08002454 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e049      	b.n	80024fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d106      	bne.n	8002480 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7fe f854 	bl	8000528 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3304      	adds	r3, #4
 8002490:	4619      	mov	r1, r3
 8002492:	4610      	mov	r0, r2
 8002494:	f000 fa36 	bl	8002904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d109      	bne.n	8002528 <HAL_TIM_PWM_Start+0x24>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b01      	cmp	r3, #1
 800251e:	bf14      	ite	ne
 8002520:	2301      	movne	r3, #1
 8002522:	2300      	moveq	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	e03c      	b.n	80025a2 <HAL_TIM_PWM_Start+0x9e>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	2b04      	cmp	r3, #4
 800252c:	d109      	bne.n	8002542 <HAL_TIM_PWM_Start+0x3e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b01      	cmp	r3, #1
 8002538:	bf14      	ite	ne
 800253a:	2301      	movne	r3, #1
 800253c:	2300      	moveq	r3, #0
 800253e:	b2db      	uxtb	r3, r3
 8002540:	e02f      	b.n	80025a2 <HAL_TIM_PWM_Start+0x9e>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2b08      	cmp	r3, #8
 8002546:	d109      	bne.n	800255c <HAL_TIM_PWM_Start+0x58>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b01      	cmp	r3, #1
 8002552:	bf14      	ite	ne
 8002554:	2301      	movne	r3, #1
 8002556:	2300      	moveq	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	e022      	b.n	80025a2 <HAL_TIM_PWM_Start+0x9e>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	2b0c      	cmp	r3, #12
 8002560:	d109      	bne.n	8002576 <HAL_TIM_PWM_Start+0x72>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b01      	cmp	r3, #1
 800256c:	bf14      	ite	ne
 800256e:	2301      	movne	r3, #1
 8002570:	2300      	moveq	r3, #0
 8002572:	b2db      	uxtb	r3, r3
 8002574:	e015      	b.n	80025a2 <HAL_TIM_PWM_Start+0x9e>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b10      	cmp	r3, #16
 800257a:	d109      	bne.n	8002590 <HAL_TIM_PWM_Start+0x8c>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b01      	cmp	r3, #1
 8002586:	bf14      	ite	ne
 8002588:	2301      	movne	r3, #1
 800258a:	2300      	moveq	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	e008      	b.n	80025a2 <HAL_TIM_PWM_Start+0x9e>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b01      	cmp	r3, #1
 800259a:	bf14      	ite	ne
 800259c:	2301      	movne	r3, #1
 800259e:	2300      	moveq	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e088      	b.n	80026bc <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d104      	bne.n	80025ba <HAL_TIM_PWM_Start+0xb6>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025b8:	e023      	b.n	8002602 <HAL_TIM_PWM_Start+0xfe>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d104      	bne.n	80025ca <HAL_TIM_PWM_Start+0xc6>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025c8:	e01b      	b.n	8002602 <HAL_TIM_PWM_Start+0xfe>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d104      	bne.n	80025da <HAL_TIM_PWM_Start+0xd6>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025d8:	e013      	b.n	8002602 <HAL_TIM_PWM_Start+0xfe>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	2b0c      	cmp	r3, #12
 80025de:	d104      	bne.n	80025ea <HAL_TIM_PWM_Start+0xe6>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025e8:	e00b      	b.n	8002602 <HAL_TIM_PWM_Start+0xfe>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b10      	cmp	r3, #16
 80025ee:	d104      	bne.n	80025fa <HAL_TIM_PWM_Start+0xf6>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025f8:	e003      	b.n	8002602 <HAL_TIM_PWM_Start+0xfe>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2202      	movs	r2, #2
 80025fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2201      	movs	r2, #1
 8002608:	6839      	ldr	r1, [r7, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f000 fc98 	bl	8002f40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a2b      	ldr	r2, [pc, #172]	; (80026c4 <HAL_TIM_PWM_Start+0x1c0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00e      	beq.n	8002638 <HAL_TIM_PWM_Start+0x134>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a2a      	ldr	r2, [pc, #168]	; (80026c8 <HAL_TIM_PWM_Start+0x1c4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d009      	beq.n	8002638 <HAL_TIM_PWM_Start+0x134>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a28      	ldr	r2, [pc, #160]	; (80026cc <HAL_TIM_PWM_Start+0x1c8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d004      	beq.n	8002638 <HAL_TIM_PWM_Start+0x134>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a27      	ldr	r2, [pc, #156]	; (80026d0 <HAL_TIM_PWM_Start+0x1cc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d101      	bne.n	800263c <HAL_TIM_PWM_Start+0x138>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <HAL_TIM_PWM_Start+0x13a>
 800263c:	2300      	movs	r3, #0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d007      	beq.n	8002652 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002650:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a1b      	ldr	r2, [pc, #108]	; (80026c4 <HAL_TIM_PWM_Start+0x1c0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d00e      	beq.n	800267a <HAL_TIM_PWM_Start+0x176>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002664:	d009      	beq.n	800267a <HAL_TIM_PWM_Start+0x176>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1a      	ldr	r2, [pc, #104]	; (80026d4 <HAL_TIM_PWM_Start+0x1d0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d004      	beq.n	800267a <HAL_TIM_PWM_Start+0x176>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <HAL_TIM_PWM_Start+0x1c4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d115      	bne.n	80026a6 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <HAL_TIM_PWM_Start+0x1d4>)
 8002682:	4013      	ands	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b06      	cmp	r3, #6
 800268a:	d015      	beq.n	80026b8 <HAL_TIM_PWM_Start+0x1b4>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002692:	d011      	beq.n	80026b8 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0201 	orr.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a4:	e008      	b.n	80026b8 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0201 	orr.w	r2, r2, #1
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	e000      	b.n	80026ba <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40012c00 	.word	0x40012c00
 80026c8:	40014000 	.word	0x40014000
 80026cc:	40014400 	.word	0x40014400
 80026d0:	40014800 	.word	0x40014800
 80026d4:	40000400 	.word	0x40000400
 80026d8:	00010007 	.word	0x00010007

080026dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e0ff      	b.n	80028fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b14      	cmp	r3, #20
 8002706:	f200 80f0 	bhi.w	80028ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800270a:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800270c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002710:	08002765 	.word	0x08002765
 8002714:	080028eb 	.word	0x080028eb
 8002718:	080028eb 	.word	0x080028eb
 800271c:	080028eb 	.word	0x080028eb
 8002720:	080027a5 	.word	0x080027a5
 8002724:	080028eb 	.word	0x080028eb
 8002728:	080028eb 	.word	0x080028eb
 800272c:	080028eb 	.word	0x080028eb
 8002730:	080027e7 	.word	0x080027e7
 8002734:	080028eb 	.word	0x080028eb
 8002738:	080028eb 	.word	0x080028eb
 800273c:	080028eb 	.word	0x080028eb
 8002740:	08002827 	.word	0x08002827
 8002744:	080028eb 	.word	0x080028eb
 8002748:	080028eb 	.word	0x080028eb
 800274c:	080028eb 	.word	0x080028eb
 8002750:	08002869 	.word	0x08002869
 8002754:	080028eb 	.word	0x080028eb
 8002758:	080028eb 	.word	0x080028eb
 800275c:	080028eb 	.word	0x080028eb
 8002760:	080028a9 	.word	0x080028a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f942 	bl	80029f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699a      	ldr	r2, [r3, #24]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0208 	orr.w	r2, r2, #8
 800277e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0204 	bic.w	r2, r2, #4
 800278e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6999      	ldr	r1, [r3, #24]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	619a      	str	r2, [r3, #24]
      break;
 80027a2:	e0a5      	b.n	80028f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 f9a8 	bl	8002b00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6999      	ldr	r1, [r3, #24]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	021a      	lsls	r2, r3, #8
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	619a      	str	r2, [r3, #24]
      break;
 80027e4:	e084      	b.n	80028f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68b9      	ldr	r1, [r7, #8]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 fa07 	bl	8002c00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69da      	ldr	r2, [r3, #28]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0208 	orr.w	r2, r2, #8
 8002800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69da      	ldr	r2, [r3, #28]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0204 	bic.w	r2, r2, #4
 8002810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	69d9      	ldr	r1, [r3, #28]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	61da      	str	r2, [r3, #28]
      break;
 8002824:	e064      	b.n	80028f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68b9      	ldr	r1, [r7, #8]
 800282c:	4618      	mov	r0, r3
 800282e:	f000 fa65 	bl	8002cfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	69da      	ldr	r2, [r3, #28]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	69da      	ldr	r2, [r3, #28]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	69d9      	ldr	r1, [r3, #28]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	021a      	lsls	r2, r3, #8
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	61da      	str	r2, [r3, #28]
      break;
 8002866:	e043      	b.n	80028f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	4618      	mov	r0, r3
 8002870:	f000 faa8 	bl	8002dc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0208 	orr.w	r2, r2, #8
 8002882:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0204 	bic.w	r2, r2, #4
 8002892:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	691a      	ldr	r2, [r3, #16]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80028a6:	e023      	b.n	80028f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 fae6 	bl	8002e80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	021a      	lsls	r2, r3, #8
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80028e8:	e002      	b.n	80028f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	75fb      	strb	r3, [r7, #23]
      break;
 80028ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop

08002904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a32      	ldr	r2, [pc, #200]	; (80029e0 <TIM_Base_SetConfig+0xdc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d007      	beq.n	800292c <TIM_Base_SetConfig+0x28>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002922:	d003      	beq.n	800292c <TIM_Base_SetConfig+0x28>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a2f      	ldr	r2, [pc, #188]	; (80029e4 <TIM_Base_SetConfig+0xe0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d108      	bne.n	800293e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a27      	ldr	r2, [pc, #156]	; (80029e0 <TIM_Base_SetConfig+0xdc>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d013      	beq.n	800296e <TIM_Base_SetConfig+0x6a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294c:	d00f      	beq.n	800296e <TIM_Base_SetConfig+0x6a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a24      	ldr	r2, [pc, #144]	; (80029e4 <TIM_Base_SetConfig+0xe0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00b      	beq.n	800296e <TIM_Base_SetConfig+0x6a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a23      	ldr	r2, [pc, #140]	; (80029e8 <TIM_Base_SetConfig+0xe4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <TIM_Base_SetConfig+0x6a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a22      	ldr	r2, [pc, #136]	; (80029ec <TIM_Base_SetConfig+0xe8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d003      	beq.n	800296e <TIM_Base_SetConfig+0x6a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a21      	ldr	r2, [pc, #132]	; (80029f0 <TIM_Base_SetConfig+0xec>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d108      	bne.n	8002980 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a0e      	ldr	r2, [pc, #56]	; (80029e0 <TIM_Base_SetConfig+0xdc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00b      	beq.n	80029c4 <TIM_Base_SetConfig+0xc0>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a0e      	ldr	r2, [pc, #56]	; (80029e8 <TIM_Base_SetConfig+0xe4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d007      	beq.n	80029c4 <TIM_Base_SetConfig+0xc0>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a0d      	ldr	r2, [pc, #52]	; (80029ec <TIM_Base_SetConfig+0xe8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d003      	beq.n	80029c4 <TIM_Base_SetConfig+0xc0>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a0c      	ldr	r2, [pc, #48]	; (80029f0 <TIM_Base_SetConfig+0xec>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d103      	bne.n	80029cc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	615a      	str	r2, [r3, #20]
}
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40012c00 	.word	0x40012c00
 80029e4:	40000400 	.word	0x40000400
 80029e8:	40014000 	.word	0x40014000
 80029ec:	40014400 	.word	0x40014400
 80029f0:	40014800 	.word	0x40014800

080029f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b087      	sub	sp, #28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	f023 0201 	bic.w	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 0303 	bic.w	r3, r3, #3
 8002a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f023 0302 	bic.w	r3, r3, #2
 8002a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a28      	ldr	r2, [pc, #160]	; (8002af0 <TIM_OC1_SetConfig+0xfc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00b      	beq.n	8002a6c <TIM_OC1_SetConfig+0x78>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a27      	ldr	r2, [pc, #156]	; (8002af4 <TIM_OC1_SetConfig+0x100>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d007      	beq.n	8002a6c <TIM_OC1_SetConfig+0x78>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a26      	ldr	r2, [pc, #152]	; (8002af8 <TIM_OC1_SetConfig+0x104>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d003      	beq.n	8002a6c <TIM_OC1_SetConfig+0x78>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a25      	ldr	r2, [pc, #148]	; (8002afc <TIM_OC1_SetConfig+0x108>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d10c      	bne.n	8002a86 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f023 0308 	bic.w	r3, r3, #8
 8002a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f023 0304 	bic.w	r3, r3, #4
 8002a84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a19      	ldr	r2, [pc, #100]	; (8002af0 <TIM_OC1_SetConfig+0xfc>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00b      	beq.n	8002aa6 <TIM_OC1_SetConfig+0xb2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <TIM_OC1_SetConfig+0x100>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d007      	beq.n	8002aa6 <TIM_OC1_SetConfig+0xb2>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a17      	ldr	r2, [pc, #92]	; (8002af8 <TIM_OC1_SetConfig+0x104>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d003      	beq.n	8002aa6 <TIM_OC1_SetConfig+0xb2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a16      	ldr	r2, [pc, #88]	; (8002afc <TIM_OC1_SetConfig+0x108>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d111      	bne.n	8002aca <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	621a      	str	r2, [r3, #32]
}
 8002ae4:	bf00      	nop
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40012c00 	.word	0x40012c00
 8002af4:	40014000 	.word	0x40014000
 8002af8:	40014400 	.word	0x40014400
 8002afc:	40014800 	.word	0x40014800

08002b00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	f023 0210 	bic.w	r2, r3, #16
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	021b      	lsls	r3, r3, #8
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f023 0320 	bic.w	r3, r3, #32
 8002b4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a24      	ldr	r2, [pc, #144]	; (8002bf0 <TIM_OC2_SetConfig+0xf0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d10d      	bne.n	8002b80 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a1b      	ldr	r2, [pc, #108]	; (8002bf0 <TIM_OC2_SetConfig+0xf0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d00b      	beq.n	8002ba0 <TIM_OC2_SetConfig+0xa0>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a1a      	ldr	r2, [pc, #104]	; (8002bf4 <TIM_OC2_SetConfig+0xf4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d007      	beq.n	8002ba0 <TIM_OC2_SetConfig+0xa0>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a19      	ldr	r2, [pc, #100]	; (8002bf8 <TIM_OC2_SetConfig+0xf8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d003      	beq.n	8002ba0 <TIM_OC2_SetConfig+0xa0>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a18      	ldr	r2, [pc, #96]	; (8002bfc <TIM_OC2_SetConfig+0xfc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d113      	bne.n	8002bc8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ba6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bae:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	621a      	str	r2, [r3, #32]
}
 8002be2:	bf00      	nop
 8002be4:	371c      	adds	r7, #28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40012c00 	.word	0x40012c00
 8002bf4:	40014000 	.word	0x40014000
 8002bf8:	40014400 	.word	0x40014400
 8002bfc:	40014800 	.word	0x40014800

08002c00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f023 0303 	bic.w	r3, r3, #3
 8002c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	021b      	lsls	r3, r3, #8
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a23      	ldr	r2, [pc, #140]	; (8002cec <TIM_OC3_SetConfig+0xec>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d10d      	bne.n	8002c7e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c7c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a1a      	ldr	r2, [pc, #104]	; (8002cec <TIM_OC3_SetConfig+0xec>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00b      	beq.n	8002c9e <TIM_OC3_SetConfig+0x9e>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a19      	ldr	r2, [pc, #100]	; (8002cf0 <TIM_OC3_SetConfig+0xf0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d007      	beq.n	8002c9e <TIM_OC3_SetConfig+0x9e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a18      	ldr	r2, [pc, #96]	; (8002cf4 <TIM_OC3_SetConfig+0xf4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d003      	beq.n	8002c9e <TIM_OC3_SetConfig+0x9e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a17      	ldr	r2, [pc, #92]	; (8002cf8 <TIM_OC3_SetConfig+0xf8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d113      	bne.n	8002cc6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	621a      	str	r2, [r3, #32]
}
 8002ce0:	bf00      	nop
 8002ce2:	371c      	adds	r7, #28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	40012c00 	.word	0x40012c00
 8002cf0:	40014000 	.word	0x40014000
 8002cf4:	40014400 	.word	0x40014400
 8002cf8:	40014800 	.word	0x40014800

08002cfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b087      	sub	sp, #28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	031b      	lsls	r3, r3, #12
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a16      	ldr	r2, [pc, #88]	; (8002db4 <TIM_OC4_SetConfig+0xb8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00b      	beq.n	8002d78 <TIM_OC4_SetConfig+0x7c>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a15      	ldr	r2, [pc, #84]	; (8002db8 <TIM_OC4_SetConfig+0xbc>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d007      	beq.n	8002d78 <TIM_OC4_SetConfig+0x7c>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a14      	ldr	r2, [pc, #80]	; (8002dbc <TIM_OC4_SetConfig+0xc0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d003      	beq.n	8002d78 <TIM_OC4_SetConfig+0x7c>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a13      	ldr	r2, [pc, #76]	; (8002dc0 <TIM_OC4_SetConfig+0xc4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d109      	bne.n	8002d8c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	019b      	lsls	r3, r3, #6
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	621a      	str	r2, [r3, #32]
}
 8002da6:	bf00      	nop
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40012c00 	.word	0x40012c00
 8002db8:	40014000 	.word	0x40014000
 8002dbc:	40014400 	.word	0x40014400
 8002dc0:	40014800 	.word	0x40014800

08002dc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002e08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	041b      	lsls	r3, r3, #16
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a15      	ldr	r2, [pc, #84]	; (8002e70 <TIM_OC5_SetConfig+0xac>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00b      	beq.n	8002e36 <TIM_OC5_SetConfig+0x72>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a14      	ldr	r2, [pc, #80]	; (8002e74 <TIM_OC5_SetConfig+0xb0>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d007      	beq.n	8002e36 <TIM_OC5_SetConfig+0x72>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a13      	ldr	r2, [pc, #76]	; (8002e78 <TIM_OC5_SetConfig+0xb4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d003      	beq.n	8002e36 <TIM_OC5_SetConfig+0x72>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a12      	ldr	r2, [pc, #72]	; (8002e7c <TIM_OC5_SetConfig+0xb8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d109      	bne.n	8002e4a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	021b      	lsls	r3, r3, #8
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	621a      	str	r2, [r3, #32]
}
 8002e64:	bf00      	nop
 8002e66:	371c      	adds	r7, #28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	40012c00 	.word	0x40012c00
 8002e74:	40014000 	.word	0x40014000
 8002e78:	40014400 	.word	0x40014400
 8002e7c:	40014800 	.word	0x40014800

08002e80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	021b      	lsls	r3, r3, #8
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	051b      	lsls	r3, r3, #20
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a16      	ldr	r2, [pc, #88]	; (8002f30 <TIM_OC6_SetConfig+0xb0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00b      	beq.n	8002ef4 <TIM_OC6_SetConfig+0x74>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a15      	ldr	r2, [pc, #84]	; (8002f34 <TIM_OC6_SetConfig+0xb4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d007      	beq.n	8002ef4 <TIM_OC6_SetConfig+0x74>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <TIM_OC6_SetConfig+0xb8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d003      	beq.n	8002ef4 <TIM_OC6_SetConfig+0x74>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a13      	ldr	r2, [pc, #76]	; (8002f3c <TIM_OC6_SetConfig+0xbc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d109      	bne.n	8002f08 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	029b      	lsls	r3, r3, #10
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	621a      	str	r2, [r3, #32]
}
 8002f22:	bf00      	nop
 8002f24:	371c      	adds	r7, #28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40012c00 	.word	0x40012c00
 8002f34:	40014000 	.word	0x40014000
 8002f38:	40014400 	.word	0x40014400
 8002f3c:	40014800 	.word	0x40014800

08002f40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f003 031f 	and.w	r3, r3, #31
 8002f52:	2201      	movs	r2, #1
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a1a      	ldr	r2, [r3, #32]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	43db      	mvns	r3, r3
 8002f62:	401a      	ands	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a1a      	ldr	r2, [r3, #32]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f003 031f 	and.w	r3, r3, #31
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	fa01 f303 	lsl.w	r3, r1, r3
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	621a      	str	r2, [r3, #32]
}
 8002f7e:	bf00      	nop
 8002f80:	371c      	adds	r7, #28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e054      	b.n	800304e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a24      	ldr	r2, [pc, #144]	; (800305c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d108      	bne.n	8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002fd4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a17      	ldr	r2, [pc, #92]	; (800305c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d00e      	beq.n	8003022 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300c:	d009      	beq.n	8003022 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a13      	ldr	r2, [pc, #76]	; (8003060 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d004      	beq.n	8003022 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a11      	ldr	r2, [pc, #68]	; (8003064 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d10c      	bne.n	800303c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003028:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	4313      	orrs	r3, r2
 8003032:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40012c00 	.word	0x40012c00
 8003060:	40000400 	.word	0x40000400
 8003064:	40014000 	.word	0x40014000

08003068 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003080:	2302      	movs	r3, #2
 8003082:	e060      	b.n	8003146 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	041b      	lsls	r3, r3, #16
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a14      	ldr	r2, [pc, #80]	; (8003154 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d115      	bne.n	8003134 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	051b      	lsls	r3, r3, #20
 8003114:	4313      	orrs	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40012c00 	.word	0x40012c00

08003158 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e040      	b.n	80031ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fd fa2c 	bl	80005d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2224      	movs	r2, #36	; 0x24
 8003184:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0201 	bic.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f82c 	bl	80031f4 <UART_SetConfig>
 800319c:	4603      	mov	r3, r0
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e022      	b.n	80031ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f956 	bl	8003460 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f9dd 	bl	80035a4 <UART_CheckIdleState>
 80031ea:	4603      	mov	r3, r0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b088      	sub	sp, #32
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	4313      	orrs	r3, r2
 8003216:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	4b8a      	ldr	r3, [pc, #552]	; (8003448 <UART_SetConfig+0x254>)
 8003220:	4013      	ands	r3, r2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	6979      	ldr	r1, [r7, #20]
 8003228:	430b      	orrs	r3, r1
 800322a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	430a      	orrs	r2, r1
 8003264:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a78      	ldr	r2, [pc, #480]	; (800344c <UART_SetConfig+0x258>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d120      	bne.n	80032b2 <UART_SetConfig+0xbe>
 8003270:	4b77      	ldr	r3, [pc, #476]	; (8003450 <UART_SetConfig+0x25c>)
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	2b03      	cmp	r3, #3
 800327a:	d817      	bhi.n	80032ac <UART_SetConfig+0xb8>
 800327c:	a201      	add	r2, pc, #4	; (adr r2, 8003284 <UART_SetConfig+0x90>)
 800327e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003282:	bf00      	nop
 8003284:	08003295 	.word	0x08003295
 8003288:	080032a1 	.word	0x080032a1
 800328c:	080032a7 	.word	0x080032a7
 8003290:	0800329b 	.word	0x0800329b
 8003294:	2300      	movs	r3, #0
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	e01d      	b.n	80032d6 <UART_SetConfig+0xe2>
 800329a:	2302      	movs	r3, #2
 800329c:	77fb      	strb	r3, [r7, #31]
 800329e:	e01a      	b.n	80032d6 <UART_SetConfig+0xe2>
 80032a0:	2304      	movs	r3, #4
 80032a2:	77fb      	strb	r3, [r7, #31]
 80032a4:	e017      	b.n	80032d6 <UART_SetConfig+0xe2>
 80032a6:	2308      	movs	r3, #8
 80032a8:	77fb      	strb	r3, [r7, #31]
 80032aa:	e014      	b.n	80032d6 <UART_SetConfig+0xe2>
 80032ac:	2310      	movs	r3, #16
 80032ae:	77fb      	strb	r3, [r7, #31]
 80032b0:	e011      	b.n	80032d6 <UART_SetConfig+0xe2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a67      	ldr	r2, [pc, #412]	; (8003454 <UART_SetConfig+0x260>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d102      	bne.n	80032c2 <UART_SetConfig+0xce>
 80032bc:	2300      	movs	r3, #0
 80032be:	77fb      	strb	r3, [r7, #31]
 80032c0:	e009      	b.n	80032d6 <UART_SetConfig+0xe2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a64      	ldr	r2, [pc, #400]	; (8003458 <UART_SetConfig+0x264>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d102      	bne.n	80032d2 <UART_SetConfig+0xde>
 80032cc:	2300      	movs	r3, #0
 80032ce:	77fb      	strb	r3, [r7, #31]
 80032d0:	e001      	b.n	80032d6 <UART_SetConfig+0xe2>
 80032d2:	2310      	movs	r3, #16
 80032d4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032de:	d15b      	bne.n	8003398 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80032e0:	7ffb      	ldrb	r3, [r7, #31]
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d827      	bhi.n	8003336 <UART_SetConfig+0x142>
 80032e6:	a201      	add	r2, pc, #4	; (adr r2, 80032ec <UART_SetConfig+0xf8>)
 80032e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ec:	08003311 	.word	0x08003311
 80032f0:	08003319 	.word	0x08003319
 80032f4:	08003321 	.word	0x08003321
 80032f8:	08003337 	.word	0x08003337
 80032fc:	08003327 	.word	0x08003327
 8003300:	08003337 	.word	0x08003337
 8003304:	08003337 	.word	0x08003337
 8003308:	08003337 	.word	0x08003337
 800330c:	0800332f 	.word	0x0800332f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003310:	f7fe ff36 	bl	8002180 <HAL_RCC_GetPCLK1Freq>
 8003314:	61b8      	str	r0, [r7, #24]
        break;
 8003316:	e013      	b.n	8003340 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003318:	f7fe ff54 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 800331c:	61b8      	str	r0, [r7, #24]
        break;
 800331e:	e00f      	b.n	8003340 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003320:	4b4e      	ldr	r3, [pc, #312]	; (800345c <UART_SetConfig+0x268>)
 8003322:	61bb      	str	r3, [r7, #24]
        break;
 8003324:	e00c      	b.n	8003340 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003326:	f7fe feb5 	bl	8002094 <HAL_RCC_GetSysClockFreq>
 800332a:	61b8      	str	r0, [r7, #24]
        break;
 800332c:	e008      	b.n	8003340 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800332e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003332:	61bb      	str	r3, [r7, #24]
        break;
 8003334:	e004      	b.n	8003340 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	77bb      	strb	r3, [r7, #30]
        break;
 800333e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d074      	beq.n	8003430 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	005a      	lsls	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	085b      	lsrs	r3, r3, #1
 8003350:	441a      	add	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	fbb2 f3f3 	udiv	r3, r2, r3
 800335a:	b29b      	uxth	r3, r3
 800335c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b0f      	cmp	r3, #15
 8003362:	d916      	bls.n	8003392 <UART_SetConfig+0x19e>
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336a:	d212      	bcs.n	8003392 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	b29b      	uxth	r3, r3
 8003370:	f023 030f 	bic.w	r3, r3, #15
 8003374:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	085b      	lsrs	r3, r3, #1
 800337a:	b29b      	uxth	r3, r3
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	b29a      	uxth	r2, r3
 8003382:	89fb      	ldrh	r3, [r7, #14]
 8003384:	4313      	orrs	r3, r2
 8003386:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	89fa      	ldrh	r2, [r7, #14]
 800338e:	60da      	str	r2, [r3, #12]
 8003390:	e04e      	b.n	8003430 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	77bb      	strb	r3, [r7, #30]
 8003396:	e04b      	b.n	8003430 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003398:	7ffb      	ldrb	r3, [r7, #31]
 800339a:	2b08      	cmp	r3, #8
 800339c:	d827      	bhi.n	80033ee <UART_SetConfig+0x1fa>
 800339e:	a201      	add	r2, pc, #4	; (adr r2, 80033a4 <UART_SetConfig+0x1b0>)
 80033a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a4:	080033c9 	.word	0x080033c9
 80033a8:	080033d1 	.word	0x080033d1
 80033ac:	080033d9 	.word	0x080033d9
 80033b0:	080033ef 	.word	0x080033ef
 80033b4:	080033df 	.word	0x080033df
 80033b8:	080033ef 	.word	0x080033ef
 80033bc:	080033ef 	.word	0x080033ef
 80033c0:	080033ef 	.word	0x080033ef
 80033c4:	080033e7 	.word	0x080033e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033c8:	f7fe feda 	bl	8002180 <HAL_RCC_GetPCLK1Freq>
 80033cc:	61b8      	str	r0, [r7, #24]
        break;
 80033ce:	e013      	b.n	80033f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033d0:	f7fe fef8 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 80033d4:	61b8      	str	r0, [r7, #24]
        break;
 80033d6:	e00f      	b.n	80033f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033d8:	4b20      	ldr	r3, [pc, #128]	; (800345c <UART_SetConfig+0x268>)
 80033da:	61bb      	str	r3, [r7, #24]
        break;
 80033dc:	e00c      	b.n	80033f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033de:	f7fe fe59 	bl	8002094 <HAL_RCC_GetSysClockFreq>
 80033e2:	61b8      	str	r0, [r7, #24]
        break;
 80033e4:	e008      	b.n	80033f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ea:	61bb      	str	r3, [r7, #24]
        break;
 80033ec:	e004      	b.n	80033f8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	77bb      	strb	r3, [r7, #30]
        break;
 80033f6:	bf00      	nop
    }

    if (pclk != 0U)
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d018      	beq.n	8003430 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	085a      	lsrs	r2, r3, #1
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	441a      	add	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003410:	b29b      	uxth	r3, r3
 8003412:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	2b0f      	cmp	r3, #15
 8003418:	d908      	bls.n	800342c <UART_SetConfig+0x238>
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003420:	d204      	bcs.n	800342c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	e001      	b.n	8003430 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800343c:	7fbb      	ldrb	r3, [r7, #30]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3720      	adds	r7, #32
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	efff69f3 	.word	0xefff69f3
 800344c:	40013800 	.word	0x40013800
 8003450:	40021000 	.word	0x40021000
 8003454:	40004400 	.word	0x40004400
 8003458:	40004800 	.word	0x40004800
 800345c:	007a1200 	.word	0x007a1200

08003460 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00a      	beq.n	800348a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00a      	beq.n	80034ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01a      	beq.n	8003576 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800355e:	d10a      	bne.n	8003576 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	605a      	str	r2, [r3, #4]
  }
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035b4:	f7fd f914 	bl	80007e0 <HAL_GetTick>
 80035b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d10e      	bne.n	80035e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f82d 	bl	8003636 <UART_WaitOnFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e023      	b.n	800362e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d10e      	bne.n	8003612 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f817 	bl	8003636 <UART_WaitOnFlagUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e00d      	b.n	800362e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2220      	movs	r2, #32
 800361c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b09c      	sub	sp, #112	; 0x70
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	603b      	str	r3, [r7, #0]
 8003642:	4613      	mov	r3, r2
 8003644:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003646:	e0a5      	b.n	8003794 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800364a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800364e:	f000 80a1 	beq.w	8003794 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003652:	f7fd f8c5 	bl	80007e0 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800365e:	429a      	cmp	r2, r3
 8003660:	d302      	bcc.n	8003668 <UART_WaitOnFlagUntilTimeout+0x32>
 8003662:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003664:	2b00      	cmp	r3, #0
 8003666:	d13e      	bne.n	80036e6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003670:	e853 3f00 	ldrex	r3, [r3]
 8003674:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003678:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800367c:	667b      	str	r3, [r7, #100]	; 0x64
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003686:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003688:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800368c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800368e:	e841 2300 	strex	r3, r2, [r1]
 8003692:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1e6      	bne.n	8003668 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	3308      	adds	r3, #8
 80036a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a4:	e853 3f00 	ldrex	r3, [r3]
 80036a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ac:	f023 0301 	bic.w	r3, r3, #1
 80036b0:	663b      	str	r3, [r7, #96]	; 0x60
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3308      	adds	r3, #8
 80036b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80036bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036c2:	e841 2300 	strex	r3, r2, [r1]
 80036c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80036c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1e5      	bne.n	800369a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2220      	movs	r2, #32
 80036d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e067      	b.n	80037b6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d04f      	beq.n	8003794 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003702:	d147      	bne.n	8003794 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800370c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	e853 3f00 	ldrex	r3, [r3]
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003722:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800372c:	637b      	str	r3, [r7, #52]	; 0x34
 800372e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003730:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003734:	e841 2300 	strex	r3, r2, [r1]
 8003738:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800373a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1e6      	bne.n	800370e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3308      	adds	r3, #8
 8003746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	e853 3f00 	ldrex	r3, [r3]
 800374e:	613b      	str	r3, [r7, #16]
   return(result);
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f023 0301 	bic.w	r3, r3, #1
 8003756:	66bb      	str	r3, [r7, #104]	; 0x68
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	3308      	adds	r3, #8
 800375e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003760:	623a      	str	r2, [r7, #32]
 8003762:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003764:	69f9      	ldr	r1, [r7, #28]
 8003766:	6a3a      	ldr	r2, [r7, #32]
 8003768:	e841 2300 	strex	r3, r2, [r1]
 800376c:	61bb      	str	r3, [r7, #24]
   return(result);
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e5      	bne.n	8003740 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2220      	movs	r2, #32
 800377e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e010      	b.n	80037b6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	69da      	ldr	r2, [r3, #28]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	4013      	ands	r3, r2
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	bf0c      	ite	eq
 80037a4:	2301      	moveq	r3, #1
 80037a6:	2300      	movne	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	461a      	mov	r2, r3
 80037ac:	79fb      	ldrb	r3, [r7, #7]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	f43f af4a 	beq.w	8003648 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3770      	adds	r7, #112	; 0x70
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <__libc_init_array>:
 80037c0:	b570      	push	{r4, r5, r6, lr}
 80037c2:	4d0d      	ldr	r5, [pc, #52]	; (80037f8 <__libc_init_array+0x38>)
 80037c4:	4c0d      	ldr	r4, [pc, #52]	; (80037fc <__libc_init_array+0x3c>)
 80037c6:	1b64      	subs	r4, r4, r5
 80037c8:	10a4      	asrs	r4, r4, #2
 80037ca:	2600      	movs	r6, #0
 80037cc:	42a6      	cmp	r6, r4
 80037ce:	d109      	bne.n	80037e4 <__libc_init_array+0x24>
 80037d0:	4d0b      	ldr	r5, [pc, #44]	; (8003800 <__libc_init_array+0x40>)
 80037d2:	4c0c      	ldr	r4, [pc, #48]	; (8003804 <__libc_init_array+0x44>)
 80037d4:	f000 f820 	bl	8003818 <_init>
 80037d8:	1b64      	subs	r4, r4, r5
 80037da:	10a4      	asrs	r4, r4, #2
 80037dc:	2600      	movs	r6, #0
 80037de:	42a6      	cmp	r6, r4
 80037e0:	d105      	bne.n	80037ee <__libc_init_array+0x2e>
 80037e2:	bd70      	pop	{r4, r5, r6, pc}
 80037e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e8:	4798      	blx	r3
 80037ea:	3601      	adds	r6, #1
 80037ec:	e7ee      	b.n	80037cc <__libc_init_array+0xc>
 80037ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f2:	4798      	blx	r3
 80037f4:	3601      	adds	r6, #1
 80037f6:	e7f2      	b.n	80037de <__libc_init_array+0x1e>
 80037f8:	08003868 	.word	0x08003868
 80037fc:	08003868 	.word	0x08003868
 8003800:	08003868 	.word	0x08003868
 8003804:	0800386c 	.word	0x0800386c

08003808 <memset>:
 8003808:	4402      	add	r2, r0
 800380a:	4603      	mov	r3, r0
 800380c:	4293      	cmp	r3, r2
 800380e:	d100      	bne.n	8003812 <memset+0xa>
 8003810:	4770      	bx	lr
 8003812:	f803 1b01 	strb.w	r1, [r3], #1
 8003816:	e7f9      	b.n	800380c <memset+0x4>

08003818 <_init>:
 8003818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381a:	bf00      	nop
 800381c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381e:	bc08      	pop	{r3}
 8003820:	469e      	mov	lr, r3
 8003822:	4770      	bx	lr

08003824 <_fini>:
 8003824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003826:	bf00      	nop
 8003828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382a:	bc08      	pop	{r3}
 800382c:	469e      	mov	lr, r3
 800382e:	4770      	bx	lr
