
STMF446_BLDCMotor_CAN_UART_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d84  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  08007f58  08007f58  00017f58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084fc  080084fc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080084fc  080084fc  000184fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008504  08008504  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008504  08008504  00018504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008508  08008508  00018508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800850c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  200001dc  080086e8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  080086e8  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c265  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e7c  00000000  00000000  0002c471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  0002e2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002ecd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000332b  00000000  00000000  0002f5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c594  00000000  00000000  00032923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccfb6  00000000  00000000  0003eeb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010be6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038d0  00000000  00000000  0010bec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007f3c 	.word	0x08007f3c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007f3c 	.word	0x08007f3c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <Zero>:
typedef struct {
	uint16_t rxMsg;
	uint16_t txMsg;
}CANMessage;

void Zero(){
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
	data[0] = 0xFF;
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <Zero+0x40>)
 8000ef2:	22ff      	movs	r2, #255	; 0xff
 8000ef4:	701a      	strb	r2, [r3, #0]
    data[1] = 0xFF;
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <Zero+0x40>)
 8000ef8:	22ff      	movs	r2, #255	; 0xff
 8000efa:	705a      	strb	r2, [r3, #1]
    data[2] = 0xFF;
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <Zero+0x40>)
 8000efe:	22ff      	movs	r2, #255	; 0xff
 8000f00:	709a      	strb	r2, [r3, #2]
    data[3] = 0xFF;
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <Zero+0x40>)
 8000f04:	22ff      	movs	r2, #255	; 0xff
 8000f06:	70da      	strb	r2, [r3, #3]
    data[4] = 0xFF;
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <Zero+0x40>)
 8000f0a:	22ff      	movs	r2, #255	; 0xff
 8000f0c:	711a      	strb	r2, [r3, #4]
    data[5] = 0xFF;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <Zero+0x40>)
 8000f10:	22ff      	movs	r2, #255	; 0xff
 8000f12:	715a      	strb	r2, [r3, #5]
    data[6] = 0xFF;
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <Zero+0x40>)
 8000f16:	22ff      	movs	r2, #255	; 0xff
 8000f18:	719a      	strb	r2, [r3, #6]
    data[7] = 0xFE;
 8000f1a:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <Zero+0x40>)
 8000f1c:	22fe      	movs	r2, #254	; 0xfe
 8000f1e:	71da      	strb	r2, [r3, #7]
    //WriteAll();
    }
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	200002c8 	.word	0x200002c8

08000f30 <EnterMotorMode>:

void EnterMotorMode(){
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
	data[0] = 0xFF;
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <EnterMotorMode+0x40>)
 8000f36:	22ff      	movs	r2, #255	; 0xff
 8000f38:	701a      	strb	r2, [r3, #0]
    data[1] = 0xFF;
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <EnterMotorMode+0x40>)
 8000f3c:	22ff      	movs	r2, #255	; 0xff
 8000f3e:	705a      	strb	r2, [r3, #1]
    data[2] = 0xFF;
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <EnterMotorMode+0x40>)
 8000f42:	22ff      	movs	r2, #255	; 0xff
 8000f44:	709a      	strb	r2, [r3, #2]
    data[3] = 0xFF;
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <EnterMotorMode+0x40>)
 8000f48:	22ff      	movs	r2, #255	; 0xff
 8000f4a:	70da      	strb	r2, [r3, #3]
    data[4] = 0xFF;
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <EnterMotorMode+0x40>)
 8000f4e:	22ff      	movs	r2, #255	; 0xff
 8000f50:	711a      	strb	r2, [r3, #4]
    data[5] = 0xFF;
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <EnterMotorMode+0x40>)
 8000f54:	22ff      	movs	r2, #255	; 0xff
 8000f56:	715a      	strb	r2, [r3, #5]
    data[6] = 0xFF;
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <EnterMotorMode+0x40>)
 8000f5a:	22ff      	movs	r2, #255	; 0xff
 8000f5c:	719a      	strb	r2, [r3, #6]
    data[7] = 0xFC;
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <EnterMotorMode+0x40>)
 8000f60:	22fc      	movs	r2, #252	; 0xfc
 8000f62:	71da      	strb	r2, [r3, #7]
    //WriteAll();
    }
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	200002c8 	.word	0x200002c8

08000f74 <ExitMotorMode>:

void ExitMotorMode(){
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
	data[0] = 0xFF;
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <ExitMotorMode+0x40>)
 8000f7a:	22ff      	movs	r2, #255	; 0xff
 8000f7c:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <ExitMotorMode+0x40>)
 8000f80:	22ff      	movs	r2, #255	; 0xff
 8000f82:	705a      	strb	r2, [r3, #1]
	data[2] = 0xFF;
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <ExitMotorMode+0x40>)
 8000f86:	22ff      	movs	r2, #255	; 0xff
 8000f88:	709a      	strb	r2, [r3, #2]
	data[3] = 0xFF;
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <ExitMotorMode+0x40>)
 8000f8c:	22ff      	movs	r2, #255	; 0xff
 8000f8e:	70da      	strb	r2, [r3, #3]
	data[4] = 0xFF;
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <ExitMotorMode+0x40>)
 8000f92:	22ff      	movs	r2, #255	; 0xff
 8000f94:	711a      	strb	r2, [r3, #4]
	data[5] = 0xFF;
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <ExitMotorMode+0x40>)
 8000f98:	22ff      	movs	r2, #255	; 0xff
 8000f9a:	715a      	strb	r2, [r3, #5]
	data[6] = 0xFF;
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <ExitMotorMode+0x40>)
 8000f9e:	22ff      	movs	r2, #255	; 0xff
 8000fa0:	719a      	strb	r2, [r3, #6]
	data[7] = 0xFD;
 8000fa2:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <ExitMotorMode+0x40>)
 8000fa4:	22fd      	movs	r2, #253	; 0xfd
 8000fa6:	71da      	strb	r2, [r3, #7]
    //WriteAll();
    }
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	200002c8 	.word	0x200002c8

08000fb8 <pack_cmd>:


void pack_cmd(float _p_des, float _v_des, float _kp, float _kd, float _t_ff){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b090      	sub	sp, #64	; 0x40
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	ed87 0a05 	vstr	s0, [r7, #20]
 8000fc2:	edc7 0a04 	vstr	s1, [r7, #16]
 8000fc6:	ed87 1a03 	vstr	s2, [r7, #12]
 8000fca:	edc7 1a02 	vstr	s3, [r7, #8]
 8000fce:	ed87 2a01 	vstr	s4, [r7, #4]
	/// limit data to be within bounds ///
	float p_des = fminf(fmaxf(P_MIN, _p_des), P_MAX);
 8000fd2:	edd7 0a05 	vldr	s1, [r7, #20]
 8000fd6:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 8000fda:	f000 fe0e 	bl	8001bfa <fmaxf>
 8000fde:	eef0 7a40 	vmov.f32	s15, s0
 8000fe2:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 8000fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fea:	f000 fe22 	bl	8001c32 <fminf>
 8000fee:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
	float v_des = fminf(fmaxf(V_MIN, _v_des), V_MAX);
 8000ff2:	edd7 0a04 	vldr	s1, [r7, #16]
 8000ff6:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8001190 <pack_cmd+0x1d8>
 8000ffa:	f000 fdfe 	bl	8001bfa <fmaxf>
 8000ffe:	eef0 7a40 	vmov.f32	s15, s0
 8001002:	eddf 0a64 	vldr	s1, [pc, #400]	; 8001194 <pack_cmd+0x1dc>
 8001006:	eeb0 0a67 	vmov.f32	s0, s15
 800100a:	f000 fe12 	bl	8001c32 <fminf>
 800100e:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	float kp = fminf(fmaxf(KP_MIN, _kp), KP_MAX);
 8001012:	edd7 0a03 	vldr	s1, [r7, #12]
 8001016:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8001198 <pack_cmd+0x1e0>
 800101a:	f000 fdee 	bl	8001bfa <fmaxf>
 800101e:	eef0 7a40 	vmov.f32	s15, s0
 8001022:	eddf 0a5e 	vldr	s1, [pc, #376]	; 800119c <pack_cmd+0x1e4>
 8001026:	eeb0 0a67 	vmov.f32	s0, s15
 800102a:	f000 fe02 	bl	8001c32 <fminf>
 800102e:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	float kd = fminf(fmaxf(KD_MIN, _kd), KD_MAX);
 8001032:	edd7 0a02 	vldr	s1, [r7, #8]
 8001036:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8001198 <pack_cmd+0x1e0>
 800103a:	f000 fdde 	bl	8001bfa <fmaxf>
 800103e:	eef0 7a40 	vmov.f32	s15, s0
 8001042:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001046:	eeb0 0a67 	vmov.f32	s0, s15
 800104a:	f000 fdf2 	bl	8001c32 <fminf>
 800104e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float t_ff = fminf(fmaxf(T_MIN, _t_ff), T_MAX);
 8001052:	edd7 0a01 	vldr	s1, [r7, #4]
 8001056:	eebb 0a02 	vmov.f32	s0, #178	; 0xc1900000 -18.0
 800105a:	f000 fdce 	bl	8001bfa <fmaxf>
 800105e:	eef0 7a40 	vmov.f32	s15, s0
 8001062:	eef3 0a02 	vmov.f32	s1, #50	; 0x41900000  18.0
 8001066:	eeb0 0a67 	vmov.f32	s0, s15
 800106a:	f000 fde2 	bl	8001c32 <fminf>
 800106e:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	/// convert floats to unsigned ints ///
	uint16_t p_int = float_to_uint(p_des, P_MIN, P_MAX, 16);
 8001072:	2010      	movs	r0, #16
 8001074:	eeb2 1a09 	vmov.f32	s2, #41	; 0x41480000  12.5
 8001078:	eefa 0a09 	vmov.f32	s1, #169	; 0xc1480000 -12.5
 800107c:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8001080:	f000 fdf3 	bl	8001c6a <float_to_uint>
 8001084:	4603      	mov	r3, r0
 8001086:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t v_int = float_to_uint(v_des, V_MIN, V_MAX, 12);
 8001088:	200c      	movs	r0, #12
 800108a:	ed9f 1a42 	vldr	s2, [pc, #264]	; 8001194 <pack_cmd+0x1dc>
 800108e:	eddf 0a40 	vldr	s1, [pc, #256]	; 8001190 <pack_cmd+0x1d8>
 8001092:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001096:	f000 fde8 	bl	8001c6a <float_to_uint>
 800109a:	4603      	mov	r3, r0
 800109c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t kp_int = float_to_uint(kp, KP_MIN, KP_MAX, 12);
 800109e:	200c      	movs	r0, #12
 80010a0:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 800119c <pack_cmd+0x1e4>
 80010a4:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8001198 <pack_cmd+0x1e0>
 80010a8:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 80010ac:	f000 fddd 	bl	8001c6a <float_to_uint>
 80010b0:	4603      	mov	r3, r0
 80010b2:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t kd_int = float_to_uint(kd, KD_MIN, KD_MAX, 12);
 80010b4:	200c      	movs	r0, #12
 80010b6:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 80010ba:	eddf 0a37 	vldr	s1, [pc, #220]	; 8001198 <pack_cmd+0x1e0>
 80010be:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80010c2:	f000 fdd2 	bl	8001c6a <float_to_uint>
 80010c6:	4603      	mov	r3, r0
 80010c8:	843b      	strh	r3, [r7, #32]
	uint16_t t_int = float_to_uint(t_ff, T_MIN, T_MAX, 12);
 80010ca:	200c      	movs	r0, #12
 80010cc:	eeb3 1a02 	vmov.f32	s2, #50	; 0x41900000  18.0
 80010d0:	eefb 0a02 	vmov.f32	s1, #178	; 0xc1900000 -18.0
 80010d4:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80010d8:	f000 fdc7 	bl	8001c6a <float_to_uint>
 80010dc:	4603      	mov	r3, r0
 80010de:	83fb      	strh	r3, [r7, #30]
	/// pack ints into the can buffer ///
	data[0] = p_int>>8;
 80010e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <pack_cmd+0x1e8>)
 80010ea:	701a      	strb	r2, [r3, #0]
	data[1] = p_int&0xFF;
 80010ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <pack_cmd+0x1e8>)
 80010f2:	705a      	strb	r2, [r3, #1]
	data[2] = v_int>>4;
 80010f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010f6:	091b      	lsrs	r3, r3, #4
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <pack_cmd+0x1e8>)
 80010fe:	709a      	strb	r2, [r3, #2]
	data[3] = ((v_int&0xF)<<4)|(kp_int>>8);
 8001100:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	b25a      	sxtb	r2, r3
 8001106:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	b29b      	uxth	r3, r3
 800110c:	b25b      	sxtb	r3, r3
 800110e:	4313      	orrs	r3, r2
 8001110:	b25b      	sxtb	r3, r3
 8001112:	b2da      	uxtb	r2, r3
 8001114:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <pack_cmd+0x1e8>)
 8001116:	70da      	strb	r2, [r3, #3]
	data[4] = kp_int&0xFF;
 8001118:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <pack_cmd+0x1e8>)
 800111e:	711a      	strb	r2, [r3, #4]
	data[5] = kd_int>>4;
 8001120:	8c3b      	ldrh	r3, [r7, #32]
 8001122:	091b      	lsrs	r3, r3, #4
 8001124:	b29b      	uxth	r3, r3
 8001126:	b2da      	uxtb	r2, r3
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <pack_cmd+0x1e8>)
 800112a:	715a      	strb	r2, [r3, #5]
	data[6] = ((kd_int&0xF)<<4)|(t_int>>8);
 800112c:	8c3b      	ldrh	r3, [r7, #32]
 800112e:	011b      	lsls	r3, r3, #4
 8001130:	b25a      	sxtb	r2, r3
 8001132:	8bfb      	ldrh	r3, [r7, #30]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	b29b      	uxth	r3, r3
 8001138:	b25b      	sxtb	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b25b      	sxtb	r3, r3
 800113e:	b2da      	uxtb	r2, r3
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <pack_cmd+0x1e8>)
 8001142:	719a      	strb	r2, [r3, #6]
	data[7] = t_int&0xFF;
 8001144:	8bfb      	ldrh	r3, [r7, #30]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <pack_cmd+0x1e8>)
 800114a:	71da      	strb	r2, [r3, #7]

	int i=0;
 800114c:	2300      	movs	r3, #0
 800114e:	63fb      	str	r3, [r7, #60]	; 0x3c
	printf("pack_cmd data\r\n");
 8001150:	4814      	ldr	r0, [pc, #80]	; (80011a4 <pack_cmd+0x1ec>)
 8001152:	f004 fe3f 	bl	8005dd4 <puts>
	for(i=0;i<8;i++){
 8001156:	2300      	movs	r3, #0
 8001158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800115a:	e00e      	b.n	800117a <pack_cmd+0x1c2>
		printf("data%d : ",i);
 800115c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800115e:	4812      	ldr	r0, [pc, #72]	; (80011a8 <pack_cmd+0x1f0>)
 8001160:	f004 fdb2 	bl	8005cc8 <iprintf>
		printf("%x\r\n",data[i]);
 8001164:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <pack_cmd+0x1e8>)
 8001166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001168:	4413      	add	r3, r2
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	480f      	ldr	r0, [pc, #60]	; (80011ac <pack_cmd+0x1f4>)
 8001170:	f004 fdaa 	bl	8005cc8 <iprintf>
	for(i=0;i<8;i++){
 8001174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001176:	3301      	adds	r3, #1
 8001178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800117a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800117c:	2b07      	cmp	r3, #7
 800117e:	dded      	ble.n	800115c <pack_cmd+0x1a4>
	}
	printf("\r\n");
 8001180:	480b      	ldr	r0, [pc, #44]	; (80011b0 <pack_cmd+0x1f8>)
 8001182:	f004 fe27 	bl	8005dd4 <puts>
}
 8001186:	bf00      	nop
 8001188:	3740      	adds	r7, #64	; 0x40
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	c2820000 	.word	0xc2820000
 8001194:	42820000 	.word	0x42820000
 8001198:	00000000 	.word	0x00000000
 800119c:	43fa0000 	.word	0x43fa0000
 80011a0:	200002c8 	.word	0x200002c8
 80011a4:	08007f58 	.word	0x08007f58
 80011a8:	08007f68 	.word	0x08007f68
 80011ac:	08007f74 	.word	0x08007f74
 80011b0:	08007f7c 	.word	0x08007f7c

080011b4 <BLDC_CANTx>:
void BLDC_CANTx(){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
	TxHeader.StdId=0x1;
 80011ba:	4b3f      	ldr	r3, [pc, #252]	; (80012b8 <BLDC_CANTx+0x104>)
 80011bc:	2201      	movs	r2, #1
 80011be:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 80011c0:	4b3d      	ldr	r3, [pc, #244]	; (80012b8 <BLDC_CANTx+0x104>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 0x08;
 80011c6:	4b3c      	ldr	r3, [pc, #240]	; (80012b8 <BLDC_CANTx+0x104>)
 80011c8:	2208      	movs	r2, #8
 80011ca:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 80011cc:	4b3a      	ldr	r3, [pc, #232]	; (80012b8 <BLDC_CANTx+0x104>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 80011d2:	4b39      	ldr	r3, [pc, #228]	; (80012b8 <BLDC_CANTx+0x104>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	751a      	strb	r2, [r3, #20]
//	HAL_CAN_AddTxMessage(&hcan1,&TxHeader,data,&TxMailbox);
//	HAL_Delay(10);

	int i = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
	int count=0;
 80011dc:	2300      	movs	r3, #0
 80011de:	603b      	str	r3, [r7, #0]
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) ){
 80011e0:	4836      	ldr	r0, [pc, #216]	; (80012bc <BLDC_CANTx+0x108>)
 80011e2:	f001 fb91 	bl	8002908 <HAL_CAN_GetTxMailboxesFreeLevel>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d036      	beq.n	800125a <BLDC_CANTx+0xa6>
		HAL_CAN_AddTxMessage(&hcan1,&TxHeader,data,&TxMailbox);
 80011ec:	4b34      	ldr	r3, [pc, #208]	; (80012c0 <BLDC_CANTx+0x10c>)
 80011ee:	4a35      	ldr	r2, [pc, #212]	; (80012c4 <BLDC_CANTx+0x110>)
 80011f0:	4931      	ldr	r1, [pc, #196]	; (80012b8 <BLDC_CANTx+0x104>)
 80011f2:	4832      	ldr	r0, [pc, #200]	; (80012bc <BLDC_CANTx+0x108>)
 80011f4:	f001 faad 	bl	8002752 <HAL_CAN_AddTxMessage>
		HAL_Delay(1);
 80011f8:	2001      	movs	r0, #1
 80011fa:	f001 f81d 	bl	8002238 <HAL_Delay>
//		printf("Can Send\r\n");
		while(!nextcan_flag){
 80011fe:	e022      	b.n	8001246 <BLDC_CANTx+0x92>
			printf("Mailboxes: %d\r\n",HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8001200:	482e      	ldr	r0, [pc, #184]	; (80012bc <BLDC_CANTx+0x108>)
 8001202:	f001 fb81 	bl	8002908 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001206:	4603      	mov	r3, r0
 8001208:	4619      	mov	r1, r3
 800120a:	482f      	ldr	r0, [pc, #188]	; (80012c8 <BLDC_CANTx+0x114>)
 800120c:	f004 fd5c 	bl	8005cc8 <iprintf>
			HAL_CAN_AddTxMessage(&hcan1,&TxHeader,data,&TxMailbox);
 8001210:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <BLDC_CANTx+0x10c>)
 8001212:	4a2c      	ldr	r2, [pc, #176]	; (80012c4 <BLDC_CANTx+0x110>)
 8001214:	4928      	ldr	r1, [pc, #160]	; (80012b8 <BLDC_CANTx+0x104>)
 8001216:	4829      	ldr	r0, [pc, #164]	; (80012bc <BLDC_CANTx+0x108>)
 8001218:	f001 fa9b 	bl	8002752 <HAL_CAN_AddTxMessage>
			HAL_Delay(1);
 800121c:	2001      	movs	r0, #1
 800121e:	f001 f80b 	bl	8002238 <HAL_Delay>
			count++;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	603b      	str	r3, [r7, #0]
			if(count==10){
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	2b0a      	cmp	r3, #10
 800122c:	d10b      	bne.n	8001246 <BLDC_CANTx+0x92>
				nextcan_flag=1;
 800122e:	4b27      	ldr	r3, [pc, #156]	; (80012cc <BLDC_CANTx+0x118>)
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
				HAL_CAN_Stop (&hcan1);
 8001234:	4821      	ldr	r0, [pc, #132]	; (80012bc <BLDC_CANTx+0x108>)
 8001236:	f001 fa43 	bl	80026c0 <HAL_CAN_Stop>
				//HAL_CAN_AbortTxRequest(&hcan1,TxMailbox);
				HAL_CAN_Start(&hcan1);
 800123a:	4820      	ldr	r0, [pc, #128]	; (80012bc <BLDC_CANTx+0x108>)
 800123c:	f001 f9fc 	bl	8002638 <HAL_CAN_Start>
				printf("CAN RESET\r\n");
 8001240:	4823      	ldr	r0, [pc, #140]	; (80012d0 <BLDC_CANTx+0x11c>)
 8001242:	f004 fdc7 	bl	8005dd4 <puts>
		while(!nextcan_flag){
 8001246:	4b21      	ldr	r3, [pc, #132]	; (80012cc <BLDC_CANTx+0x118>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0d8      	beq.n	8001200 <BLDC_CANTx+0x4c>
			}
		}
		nextcan_flag=0;
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <BLDC_CANTx+0x118>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
		count=0;
 8001254:	2300      	movs	r3, #0
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	e008      	b.n	800126c <BLDC_CANTx+0xb8>
	}else{
		printf("Mailbox_congestion\r\n");
 800125a:	481e      	ldr	r0, [pc, #120]	; (80012d4 <BLDC_CANTx+0x120>)
 800125c:	f004 fdba 	bl	8005dd4 <puts>
		nextcan_flag=0;
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <BLDC_CANTx+0x118>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
		get_can_flag=1;
 8001266:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <BLDC_CANTx+0x124>)
 8001268:	2201      	movs	r2, #1
 800126a:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(10);
 800126c:	200a      	movs	r0, #10
 800126e:	f000 ffe3 	bl	8002238 <HAL_Delay>
	printf("Send Command Data: 0x%x\r\n",data[0]);
 8001272:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <BLDC_CANTx+0x110>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	4619      	mov	r1, r3
 8001278:	4818      	ldr	r0, [pc, #96]	; (80012dc <BLDC_CANTx+0x128>)
 800127a:	f004 fd25 	bl	8005cc8 <iprintf>
	for(i=0;i < 8;i++){
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	e00e      	b.n	80012a2 <BLDC_CANTx+0xee>
		printf("data[%d] :",i);
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	4816      	ldr	r0, [pc, #88]	; (80012e0 <BLDC_CANTx+0x12c>)
 8001288:	f004 fd1e 	bl	8005cc8 <iprintf>
		printf("0x%x\r\n",data[i]);
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <BLDC_CANTx+0x110>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	4813      	ldr	r0, [pc, #76]	; (80012e4 <BLDC_CANTx+0x130>)
 8001298:	f004 fd16 	bl	8005cc8 <iprintf>
	for(i=0;i < 8;i++){
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3301      	adds	r3, #1
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b07      	cmp	r3, #7
 80012a6:	dded      	ble.n	8001284 <BLDC_CANTx+0xd0>
	}
	printf("\r\n");
 80012a8:	480f      	ldr	r0, [pc, #60]	; (80012e8 <BLDC_CANTx+0x134>)
 80012aa:	f004 fd93 	bl	8005dd4 <puts>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000028c 	.word	0x2000028c
 80012bc:	200001f8 	.word	0x200001f8
 80012c0:	200002d0 	.word	0x200002d0
 80012c4:	200002c8 	.word	0x200002c8
 80012c8:	08007f80 	.word	0x08007f80
 80012cc:	200002d6 	.word	0x200002d6
 80012d0:	08007f90 	.word	0x08007f90
 80012d4:	08007f9c 	.word	0x08007f9c
 80012d8:	200002d5 	.word	0x200002d5
 80012dc:	08007fb0 	.word	0x08007fb0
 80012e0:	08007fcc 	.word	0x08007fcc
 80012e4:	08007fd8 	.word	0x08007fd8
 80012e8:	08007f7c 	.word	0x08007f7c

080012ec <unpack_reply>:

void unpack_reply(){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
    /// unpack ints from can buffer ///
    uint16_t id = data[0];
 80012f2:	4b37      	ldr	r3, [pc, #220]	; (80013d0 <unpack_reply+0xe4>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	82fb      	strh	r3, [r7, #22]
    uint16_t p_int = (data[1]<<8)|data[2];
 80012f8:	4b35      	ldr	r3, [pc, #212]	; (80013d0 <unpack_reply+0xe4>)
 80012fa:	785b      	ldrb	r3, [r3, #1]
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	b21a      	sxth	r2, r3
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <unpack_reply+0xe4>)
 8001302:	789b      	ldrb	r3, [r3, #2]
 8001304:	b21b      	sxth	r3, r3
 8001306:	4313      	orrs	r3, r2
 8001308:	b21b      	sxth	r3, r3
 800130a:	82bb      	strh	r3, [r7, #20]
    uint16_t v_int = (data[3]<<4)|(data[4]>>4);
 800130c:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <unpack_reply+0xe4>)
 800130e:	78db      	ldrb	r3, [r3, #3]
 8001310:	011b      	lsls	r3, r3, #4
 8001312:	b21a      	sxth	r2, r3
 8001314:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <unpack_reply+0xe4>)
 8001316:	791b      	ldrb	r3, [r3, #4]
 8001318:	091b      	lsrs	r3, r3, #4
 800131a:	b2db      	uxtb	r3, r3
 800131c:	b21b      	sxth	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b21b      	sxth	r3, r3
 8001322:	827b      	strh	r3, [r7, #18]
    uint16_t i_int = ((data[4]&0xF)<<8)|data[5];
 8001324:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <unpack_reply+0xe4>)
 8001326:	791b      	ldrb	r3, [r3, #4]
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	b21b      	sxth	r3, r3
 800132c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001330:	b21a      	sxth	r2, r3
 8001332:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <unpack_reply+0xe4>)
 8001334:	795b      	ldrb	r3, [r3, #5]
 8001336:	b21b      	sxth	r3, r3
 8001338:	4313      	orrs	r3, r2
 800133a:	b21b      	sxth	r3, r3
 800133c:	823b      	strh	r3, [r7, #16]
    /// convert uints to floats ///
    float p = uint_to_float(p_int, P_MIN, P_MAX, 16);
 800133e:	8abb      	ldrh	r3, [r7, #20]
 8001340:	2110      	movs	r1, #16
 8001342:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 8001346:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 800134a:	4618      	mov	r0, r3
 800134c:	f000 fcc0 	bl	8001cd0 <uint_to_float>
 8001350:	ed87 0a03 	vstr	s0, [r7, #12]
    float v = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8001354:	8a7b      	ldrh	r3, [r7, #18]
 8001356:	210c      	movs	r1, #12
 8001358:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80013d4 <unpack_reply+0xe8>
 800135c:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80013d8 <unpack_reply+0xec>
 8001360:	4618      	mov	r0, r3
 8001362:	f000 fcb5 	bl	8001cd0 <uint_to_float>
 8001366:	ed87 0a02 	vstr	s0, [r7, #8]
    float t = uint_to_float(i_int, -T_MAX, T_MAX, 12);
 800136a:	8a3b      	ldrh	r3, [r7, #16]
 800136c:	210c      	movs	r1, #12
 800136e:	eef3 0a02 	vmov.f32	s1, #50	; 0x41900000  18.0
 8001372:	eebb 0a02 	vmov.f32	s0, #178	; 0xc1900000 -18.0
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fcaa 	bl	8001cd0 <uint_to_float>
 800137c:	ed87 0a01 	vstr	s0, [r7, #4]
    //printf(" get data \r\n");
    printf("GetUnpackCanData\r\n");
 8001380:	4816      	ldr	r0, [pc, #88]	; (80013dc <unpack_reply+0xf0>)
 8001382:	f004 fd27 	bl	8005dd4 <puts>
    printf("ID : %x\r\n",id);
 8001386:	8afb      	ldrh	r3, [r7, #22]
 8001388:	4619      	mov	r1, r3
 800138a:	4815      	ldr	r0, [pc, #84]	; (80013e0 <unpack_reply+0xf4>)
 800138c:	f004 fc9c 	bl	8005cc8 <iprintf>
    printf("Position : %lf\r\n",p);
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f7ff f8f9 	bl	8000588 <__aeabi_f2d>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4812      	ldr	r0, [pc, #72]	; (80013e4 <unpack_reply+0xf8>)
 800139c:	f004 fc94 	bl	8005cc8 <iprintf>
    printf("Velocity : %lf\r\n",v);
 80013a0:	68b8      	ldr	r0, [r7, #8]
 80013a2:	f7ff f8f1 	bl	8000588 <__aeabi_f2d>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	480f      	ldr	r0, [pc, #60]	; (80013e8 <unpack_reply+0xfc>)
 80013ac:	f004 fc8c 	bl	8005cc8 <iprintf>
    printf("Current : %lf\r\n",t);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff f8e9 	bl	8000588 <__aeabi_f2d>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	480c      	ldr	r0, [pc, #48]	; (80013ec <unpack_reply+0x100>)
 80013bc:	f004 fc84 	bl	8005cc8 <iprintf>
	printf("\r\n");
 80013c0:	480b      	ldr	r0, [pc, #44]	; (80013f0 <unpack_reply+0x104>)
 80013c2:	f004 fd07 	bl	8005dd4 <puts>

}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200002c8 	.word	0x200002c8
 80013d4:	42820000 	.word	0x42820000
 80013d8:	c2820000 	.word	0xc2820000
 80013dc:	08007fe0 	.word	0x08007fe0
 80013e0:	08007ff4 	.word	0x08007ff4
 80013e4:	08008000 	.word	0x08008000
 80013e8:	08008014 	.word	0x08008014
 80013ec:	08008028 	.word	0x08008028
 80013f0:	08007f7c 	.word	0x08007f7c

080013f4 <BLDC_CANRx>:


void BLDC_CANRx(){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
	uint16_t RxBitshift[4];

	RxBitshift[0]=RxData[0];
 80013fa:	4b36      	ldr	r3, [pc, #216]	; (80014d4 <BLDC_CANRx+0xe0>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	803b      	strh	r3, [r7, #0]
	RxBitshift[1]=RxData[1]<<8;
 8001402:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <BLDC_CANRx+0xe0>)
 8001404:	785b      	ldrb	r3, [r3, #1]
 8001406:	b29b      	uxth	r3, r3
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b29b      	uxth	r3, r3
 800140c:	807b      	strh	r3, [r7, #2]
	RxBitshift[1]+=RxData[2];
 800140e:	887a      	ldrh	r2, [r7, #2]
 8001410:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <BLDC_CANRx+0xe0>)
 8001412:	789b      	ldrb	r3, [r3, #2]
 8001414:	b29b      	uxth	r3, r3
 8001416:	4413      	add	r3, r2
 8001418:	b29b      	uxth	r3, r3
 800141a:	807b      	strh	r3, [r7, #2]
	RxBitshift[2]=RxData[3]<<4;
 800141c:	4b2d      	ldr	r3, [pc, #180]	; (80014d4 <BLDC_CANRx+0xe0>)
 800141e:	78db      	ldrb	r3, [r3, #3]
 8001420:	b29b      	uxth	r3, r3
 8001422:	011b      	lsls	r3, r3, #4
 8001424:	b29b      	uxth	r3, r3
 8001426:	80bb      	strh	r3, [r7, #4]
	RxBitshift[2]+=RxData[4]>>4;
 8001428:	88ba      	ldrh	r2, [r7, #4]
 800142a:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <BLDC_CANRx+0xe0>)
 800142c:	791b      	ldrb	r3, [r3, #4]
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	b2db      	uxtb	r3, r3
 8001432:	b29b      	uxth	r3, r3
 8001434:	4413      	add	r3, r2
 8001436:	b29b      	uxth	r3, r3
 8001438:	80bb      	strh	r3, [r7, #4]
	RxBitshift[3]=RxData[4]<<8;
 800143a:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <BLDC_CANRx+0xe0>)
 800143c:	791b      	ldrb	r3, [r3, #4]
 800143e:	b29b      	uxth	r3, r3
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	b29b      	uxth	r3, r3
 8001444:	80fb      	strh	r3, [r7, #6]
	RxBitshift[3]+=RxData[5];
 8001446:	88fa      	ldrh	r2, [r7, #6]
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <BLDC_CANRx+0xe0>)
 800144a:	795b      	ldrb	r3, [r3, #5]
 800144c:	b29b      	uxth	r3, r3
 800144e:	4413      	add	r3, r2
 8001450:	b29b      	uxth	r3, r3
 8001452:	80fb      	strh	r3, [r7, #6]
	printf("GetCanData\r\n");
 8001454:	4820      	ldr	r0, [pc, #128]	; (80014d8 <BLDC_CANRx+0xe4>)
 8001456:	f004 fcbd 	bl	8005dd4 <puts>
	printf("ID : 0x%x\r\n",RxBitshift[0]);
 800145a:	883b      	ldrh	r3, [r7, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	481f      	ldr	r0, [pc, #124]	; (80014dc <BLDC_CANRx+0xe8>)
 8001460:	f004 fc32 	bl	8005cc8 <iprintf>
	printf("Position : 0x%x\r\n",RxBitshift[1]);
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	4619      	mov	r1, r3
 8001468:	481d      	ldr	r0, [pc, #116]	; (80014e0 <BLDC_CANRx+0xec>)
 800146a:	f004 fc2d 	bl	8005cc8 <iprintf>
	printf("Velocity : 0x%x\r\n",RxBitshift[2]);
 800146e:	88bb      	ldrh	r3, [r7, #4]
 8001470:	4619      	mov	r1, r3
 8001472:	481c      	ldr	r0, [pc, #112]	; (80014e4 <BLDC_CANRx+0xf0>)
 8001474:	f004 fc28 	bl	8005cc8 <iprintf>
	printf("Current : 0x%x\r\n",RxBitshift[3]);
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	4619      	mov	r1, r3
 800147c:	481a      	ldr	r0, [pc, #104]	; (80014e8 <BLDC_CANRx+0xf4>)
 800147e:	f004 fc23 	bl	8005cc8 <iprintf>
	printf("\r\n");
 8001482:	481a      	ldr	r0, [pc, #104]	; (80014ec <BLDC_CANRx+0xf8>)
 8001484:	f004 fca6 	bl	8005dd4 <puts>
	data[0] = RxData[0];
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <BLDC_CANRx+0xe0>)
 800148a:	781a      	ldrb	r2, [r3, #0]
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <BLDC_CANRx+0xfc>)
 800148e:	701a      	strb	r2, [r3, #0]
	data[1] = RxData[1];
 8001490:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <BLDC_CANRx+0xe0>)
 8001492:	785a      	ldrb	r2, [r3, #1]
 8001494:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <BLDC_CANRx+0xfc>)
 8001496:	705a      	strb	r2, [r3, #1]
	data[2] = RxData[2];
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <BLDC_CANRx+0xe0>)
 800149a:	789a      	ldrb	r2, [r3, #2]
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <BLDC_CANRx+0xfc>)
 800149e:	709a      	strb	r2, [r3, #2]
	data[3] = RxData[3];
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <BLDC_CANRx+0xe0>)
 80014a2:	78da      	ldrb	r2, [r3, #3]
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <BLDC_CANRx+0xfc>)
 80014a6:	70da      	strb	r2, [r3, #3]
	data[4] = RxData[4];
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <BLDC_CANRx+0xe0>)
 80014aa:	791a      	ldrb	r2, [r3, #4]
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <BLDC_CANRx+0xfc>)
 80014ae:	711a      	strb	r2, [r3, #4]
	data[5] = RxData[5];
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <BLDC_CANRx+0xe0>)
 80014b2:	795a      	ldrb	r2, [r3, #5]
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <BLDC_CANRx+0xfc>)
 80014b6:	715a      	strb	r2, [r3, #5]
	data[6] = RxData[6];
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <BLDC_CANRx+0xe0>)
 80014ba:	799a      	ldrb	r2, [r3, #6]
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <BLDC_CANRx+0xfc>)
 80014be:	719a      	strb	r2, [r3, #6]
	data[7] = RxData[7];
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <BLDC_CANRx+0xe0>)
 80014c2:	79da      	ldrb	r2, [r3, #7]
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <BLDC_CANRx+0xfc>)
 80014c6:	71da      	strb	r2, [r3, #7]
	unpack_reply();
 80014c8:	f7ff ff10 	bl	80012ec <unpack_reply>

}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200002c0 	.word	0x200002c0
 80014d8:	08008038 	.word	0x08008038
 80014dc:	08008044 	.word	0x08008044
 80014e0:	08008050 	.word	0x08008050
 80014e4:	08008064 	.word	0x08008064
 80014e8:	08008078 	.word	0x08008078
 80014ec:	08007f7c 	.word	0x08007f7c
 80014f0:	200002c8 	.word	0x200002c8

080014f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014fa:	f000 fe2b 	bl	8002154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014fe:	f000 f9cb 	bl	8001898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001502:	f000 fa97 	bl	8001a34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001506:	f000 fa6b 	bl	80019e0 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800150a:	f000 fa31 	bl	8001970 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

sFilterConfig.FilterBank = 0;
 800150e:	4bcf      	ldr	r3, [pc, #828]	; (800184c <main+0x358>)
 8001510:	2200      	movs	r2, #0
 8001512:	615a      	str	r2, [r3, #20]
sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001514:	4bcd      	ldr	r3, [pc, #820]	; (800184c <main+0x358>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800151a:	4bcc      	ldr	r3, [pc, #816]	; (800184c <main+0x358>)
 800151c:	2201      	movs	r2, #1
 800151e:	61da      	str	r2, [r3, #28]
sFilterConfig.FilterIdHigh = 0x0000;
 8001520:	4bca      	ldr	r3, [pc, #808]	; (800184c <main+0x358>)
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
sFilterConfig.FilterIdLow = 0x0000;
 8001526:	4bc9      	ldr	r3, [pc, #804]	; (800184c <main+0x358>)
 8001528:	2200      	movs	r2, #0
 800152a:	605a      	str	r2, [r3, #4]
sFilterConfig.FilterMaskIdHigh = 0x0000;
 800152c:	4bc7      	ldr	r3, [pc, #796]	; (800184c <main+0x358>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
sFilterConfig.FilterMaskIdLow = 0x0000;
 8001532:	4bc6      	ldr	r3, [pc, #792]	; (800184c <main+0x358>)
 8001534:	2200      	movs	r2, #0
 8001536:	60da      	str	r2, [r3, #12]
sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001538:	4bc4      	ldr	r3, [pc, #784]	; (800184c <main+0x358>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
//	sFilterConfig.FilterFIFOAssignment =CAN_FILTER_FIFO0;
sFilterConfig.FilterActivation=ENABLE;
 800153e:	4bc3      	ldr	r3, [pc, #780]	; (800184c <main+0x358>)
 8001540:	2201      	movs	r2, #1
 8001542:	621a      	str	r2, [r3, #32]
sFilterConfig.SlaveStartFilterBank=14;
 8001544:	4bc1      	ldr	r3, [pc, #772]	; (800184c <main+0x358>)
 8001546:	220e      	movs	r2, #14
 8001548:	625a      	str	r2, [r3, #36]	; 0x24

if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 800154a:	49c0      	ldr	r1, [pc, #768]	; (800184c <main+0x358>)
 800154c:	48c0      	ldr	r0, [pc, #768]	; (8001850 <main+0x35c>)
 800154e:	f000 ff93 	bl	8002478 <HAL_CAN_ConfigFilter>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <main+0x68>
{
	Error_Handler();
 8001558:	f000 fb4a 	bl	8001bf0 <Error_Handler>
}
if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 800155c:	48bc      	ldr	r0, [pc, #752]	; (8001850 <main+0x35c>)
 800155e:	f001 f86b 	bl	8002638 <HAL_CAN_Start>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <main+0x78>
{
	Error_Handler();
 8001568:	f000 fb42 	bl	8001bf0 <Error_Handler>
}

if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800156c:	2103      	movs	r1, #3
 800156e:	48b8      	ldr	r0, [pc, #736]	; (8001850 <main+0x35c>)
 8001570:	f001 fb11 	bl	8002b96 <HAL_CAN_ActivateNotification>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <main+0x8a>
{
	Error_Handler();
 800157a:	f000 fb39 	bl	8001bf0 <Error_Handler>
//	  {
//	     Error_Handler ();
//	  }

char KeyCommand[1];
KeyCommand[0]=0;
 800157e:	2300      	movs	r3, #0
 8001580:	713b      	strb	r3, [r7, #4]
//int RxBitshift[4];
//int TxBitshift[4];
//int current=0;
//int current_range=0;
printf("BLDC Start\r\n");
 8001582:	48b4      	ldr	r0, [pc, #720]	; (8001854 <main+0x360>)
 8001584:	f004 fc26 	bl	8005dd4 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_uart_flag=0;
 8001588:	4bb3      	ldr	r3, [pc, #716]	; (8001858 <main+0x364>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2, (uint8_t *)KeyCommand, 1);
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	2201      	movs	r2, #1
 8001592:	4619      	mov	r1, r3
 8001594:	48b1      	ldr	r0, [pc, #708]	; (800185c <main+0x368>)
 8001596:	f002 ff62 	bl	800445e <HAL_UART_Receive_IT>
	  HAL_UART_Transmit(&huart2, (uint8_t *)KeyCommand, 1,300);
 800159a:	1d39      	adds	r1, r7, #4
 800159c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80015a0:	2201      	movs	r2, #1
 80015a2:	48ae      	ldr	r0, [pc, #696]	; (800185c <main+0x368>)
 80015a4:	f002 fec9 	bl	800433a <HAL_UART_Transmit>
	  //受信するまで待つ
	  while(!get_uart_flag){}
 80015a8:	bf00      	nop
 80015aa:	4bab      	ldr	r3, [pc, #684]	; (8001858 <main+0x364>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0fb      	beq.n	80015aa <main+0xb6>
	  get_can_flag=0;
 80015b2:	4bab      	ldr	r3, [pc, #684]	; (8001860 <main+0x36c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
	  //canデータ受信用のフラグを0に
	  if(KeyCommand[0]!=0 ){
 80015b8:	793b      	ldrb	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0e4      	beq.n	8001588 <main+0x94>
		  switch(KeyCommand[0]){
 80015be:	793b      	ldrb	r3, [r7, #4]
 80015c0:	2b33      	cmp	r3, #51	; 0x33
 80015c2:	dc77      	bgt.n	80016b4 <main+0x1c0>
 80015c4:	2b1b      	cmp	r3, #27
 80015c6:	da3b      	bge.n	8001640 <main+0x14c>
 80015c8:	e130      	b.n	800182c <main+0x338>
 80015ca:	3b61      	subs	r3, #97	; 0x61
 80015cc:	2b19      	cmp	r3, #25
 80015ce:	f200 812d 	bhi.w	800182c <main+0x338>
 80015d2:	a201      	add	r2, pc, #4	; (adr r2, 80015d8 <main+0xe4>)
 80015d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d8:	080017a3 	.word	0x080017a3
 80015dc:	080017d1 	.word	0x080017d1
 80015e0:	080017ff 	.word	0x080017ff
 80015e4:	0800182d 	.word	0x0800182d
 80015e8:	0800182d 	.word	0x0800182d
 80015ec:	0800182d 	.word	0x0800182d
 80015f0:	0800182d 	.word	0x0800182d
 80015f4:	0800182d 	.word	0x0800182d
 80015f8:	0800182d 	.word	0x0800182d
 80015fc:	0800182d 	.word	0x0800182d
 8001600:	0800182d 	.word	0x0800182d
 8001604:	0800182d 	.word	0x0800182d
 8001608:	08001757 	.word	0x08001757
 800160c:	0800182d 	.word	0x0800182d
 8001610:	0800182d 	.word	0x0800182d
 8001614:	0800182d 	.word	0x0800182d
 8001618:	0800182d 	.word	0x0800182d
 800161c:	0800182d 	.word	0x0800182d
 8001620:	0800182d 	.word	0x0800182d
 8001624:	0800182d 	.word	0x0800182d
 8001628:	0800182d 	.word	0x0800182d
 800162c:	0800182d 	.word	0x0800182d
 8001630:	0800182d 	.word	0x0800182d
 8001634:	0800182d 	.word	0x0800182d
 8001638:	0800182d 	.word	0x0800182d
 800163c:	0800178b 	.word	0x0800178b
 8001640:	3b1b      	subs	r3, #27
 8001642:	2b18      	cmp	r3, #24
 8001644:	f200 80f2 	bhi.w	800182c <main+0x338>
 8001648:	a201      	add	r2, pc, #4	; (adr r2, 8001650 <main+0x15c>)
 800164a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164e:	bf00      	nop
 8001650:	08001771 	.word	0x08001771
 8001654:	0800182d 	.word	0x0800182d
 8001658:	0800182d 	.word	0x0800182d
 800165c:	0800182d 	.word	0x0800182d
 8001660:	0800182d 	.word	0x0800182d
 8001664:	0800182d 	.word	0x0800182d
 8001668:	0800182d 	.word	0x0800182d
 800166c:	0800182d 	.word	0x0800182d
 8001670:	0800182d 	.word	0x0800182d
 8001674:	0800182d 	.word	0x0800182d
 8001678:	0800182d 	.word	0x0800182d
 800167c:	0800182d 	.word	0x0800182d
 8001680:	0800182d 	.word	0x0800182d
 8001684:	0800182d 	.word	0x0800182d
 8001688:	0800182d 	.word	0x0800182d
 800168c:	0800182d 	.word	0x0800182d
 8001690:	0800182d 	.word	0x0800182d
 8001694:	0800182d 	.word	0x0800182d
 8001698:	0800182d 	.word	0x0800182d
 800169c:	0800182d 	.word	0x0800182d
 80016a0:	0800182d 	.word	0x0800182d
 80016a4:	0800182d 	.word	0x0800182d
 80016a8:	080016c1 	.word	0x080016c1
 80016ac:	080016f3 	.word	0x080016f3
 80016b0:	08001725 	.word	0x08001725
 80016b4:	2b7a      	cmp	r3, #122	; 0x7a
 80016b6:	f300 80b9 	bgt.w	800182c <main+0x338>
 80016ba:	2b61      	cmp	r3, #97	; 0x61
 80016bc:	da85      	bge.n	80015ca <main+0xd6>
 80016be:	e0b5      	b.n	800182c <main+0x338>
		  //void pack_cmd(float _p_des, float _v_des, float _kp, float _kd, float _t_ff)
		  case '1':
			  printf("case : 1\r\n");
 80016c0:	4868      	ldr	r0, [pc, #416]	; (8001864 <main+0x370>)
 80016c2:	f004 fb87 	bl	8005dd4 <puts>
			  pack_cmd(0.0, 1.0, 5.0, 3.0, 0.0);
 80016c6:	ed9f 2a68 	vldr	s4, [pc, #416]	; 8001868 <main+0x374>
 80016ca:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 80016ce:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 80016d2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80016d6:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8001868 <main+0x374>
 80016da:	f7ff fc6d 	bl	8000fb8 <pack_cmd>
			  BLDC_CANTx();
 80016de:	f7ff fd69 	bl	80011b4 <BLDC_CANTx>
			  HAL_Delay(10);
 80016e2:	200a      	movs	r0, #10
 80016e4:	f000 fda8 	bl	8002238 <HAL_Delay>
			  BLDC_CANRx();
 80016e8:	f7ff fe84 	bl	80013f4 <BLDC_CANRx>
			  KeyCommand[0]=0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	713b      	strb	r3, [r7, #4]
			  break;
 80016f0:	e0a5      	b.n	800183e <main+0x34a>
		  case'2':
			  printf("case : 2\r\n");
 80016f2:	485e      	ldr	r0, [pc, #376]	; (800186c <main+0x378>)
 80016f4:	f004 fb6e 	bl	8005dd4 <puts>
			  pack_cmd(2.0*PI, 1.0, 5.0, 3.0, 0.0);
 80016f8:	ed9f 2a5b 	vldr	s4, [pc, #364]	; 8001868 <main+0x374>
 80016fc:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8001700:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8001704:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001708:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8001870 <main+0x37c>
 800170c:	f7ff fc54 	bl	8000fb8 <pack_cmd>
			  BLDC_CANTx();
 8001710:	f7ff fd50 	bl	80011b4 <BLDC_CANTx>
			  HAL_Delay(10);
 8001714:	200a      	movs	r0, #10
 8001716:	f000 fd8f 	bl	8002238 <HAL_Delay>
			  BLDC_CANRx();
 800171a:	f7ff fe6b 	bl	80013f4 <BLDC_CANRx>
			  KeyCommand[0]=0;
 800171e:	2300      	movs	r3, #0
 8001720:	713b      	strb	r3, [r7, #4]
			  break;
 8001722:	e08c      	b.n	800183e <main+0x34a>
		  case'3':
			  printf("case : 3\r\n");
 8001724:	4853      	ldr	r0, [pc, #332]	; (8001874 <main+0x380>)
 8001726:	f004 fb55 	bl	8005dd4 <puts>
			  pack_cmd(2.0*PI, 1.0, 5.0, 3.0, 4.0);
 800172a:	eeb1 2a00 	vmov.f32	s4, #16	; 0x40800000  4.0
 800172e:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8001732:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8001736:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800173a:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8001870 <main+0x37c>
 800173e:	f7ff fc3b 	bl	8000fb8 <pack_cmd>
			  BLDC_CANTx();
 8001742:	f7ff fd37 	bl	80011b4 <BLDC_CANTx>
			  HAL_Delay(10);
 8001746:	200a      	movs	r0, #10
 8001748:	f000 fd76 	bl	8002238 <HAL_Delay>
			  BLDC_CANRx();
 800174c:	f7ff fe52 	bl	80013f4 <BLDC_CANRx>
			  KeyCommand[0]=0;
 8001750:	2300      	movs	r3, #0
 8001752:	713b      	strb	r3, [r7, #4]
			  break;
 8001754:	e073      	b.n	800183e <main+0x34a>
		  case'm':
			  printf("case : m\r\n");
 8001756:	4848      	ldr	r0, [pc, #288]	; (8001878 <main+0x384>)
 8001758:	f004 fb3c 	bl	8005dd4 <puts>
			  EnterMotorMode();
 800175c:	f7ff fbe8 	bl	8000f30 <EnterMotorMode>
			  BLDC_CANTx();
 8001760:	f7ff fd28 	bl	80011b4 <BLDC_CANTx>
			  HAL_Delay(10);
 8001764:	200a      	movs	r0, #10
 8001766:	f000 fd67 	bl	8002238 <HAL_Delay>
			  KeyCommand[0]=0;
 800176a:	2300      	movs	r3, #0
 800176c:	713b      	strb	r3, [r7, #4]

			  break;
 800176e:	e066      	b.n	800183e <main+0x34a>
		  case 27:
			  printf("case : esc\r\n");
 8001770:	4842      	ldr	r0, [pc, #264]	; (800187c <main+0x388>)
 8001772:	f004 fb2f 	bl	8005dd4 <puts>
			  ExitMotorMode();
 8001776:	f7ff fbfd 	bl	8000f74 <ExitMotorMode>
			  BLDC_CANTx();
 800177a:	f7ff fd1b 	bl	80011b4 <BLDC_CANTx>
			  HAL_Delay(10);
 800177e:	200a      	movs	r0, #10
 8001780:	f000 fd5a 	bl	8002238 <HAL_Delay>
			  KeyCommand[0]=0;
 8001784:	2300      	movs	r3, #0
 8001786:	713b      	strb	r3, [r7, #4]

			  break;
 8001788:	e059      	b.n	800183e <main+0x34a>
		  case'z':
			  printf("case : z\r\n");
 800178a:	483d      	ldr	r0, [pc, #244]	; (8001880 <main+0x38c>)
 800178c:	f004 fb22 	bl	8005dd4 <puts>
			  Zero();
 8001790:	f7ff fbac 	bl	8000eec <Zero>
			  BLDC_CANTx();
 8001794:	f7ff fd0e 	bl	80011b4 <BLDC_CANTx>
			  HAL_Delay(10);
 8001798:	200a      	movs	r0, #10
 800179a:	f000 fd4d 	bl	8002238 <HAL_Delay>
			  KeyCommand[0]=0;
 800179e:	2300      	movs	r3, #0
 80017a0:	713b      	strb	r3, [r7, #4]
		  case'a':
			  printf("case : a\r\n");
 80017a2:	4838      	ldr	r0, [pc, #224]	; (8001884 <main+0x390>)
 80017a4:	f004 fb16 	bl	8005dd4 <puts>
			  pack_cmd(-PI/2, 1.0, 5.0, 4.0, 0.0);
 80017a8:	ed9f 2a2f 	vldr	s4, [pc, #188]	; 8001868 <main+0x374>
 80017ac:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 80017b0:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 80017b4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80017b8:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8001888 <main+0x394>
 80017bc:	f7ff fbfc 	bl	8000fb8 <pack_cmd>
			  BLDC_CANTx();
 80017c0:	f7ff fcf8 	bl	80011b4 <BLDC_CANTx>
			  HAL_Delay(10);
 80017c4:	200a      	movs	r0, #10
 80017c6:	f000 fd37 	bl	8002238 <HAL_Delay>
			  KeyCommand[0]=0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	713b      	strb	r3, [r7, #4]
			  break;
 80017ce:	e036      	b.n	800183e <main+0x34a>
		  case'b':
			  printf("case : a\r\n");
 80017d0:	482c      	ldr	r0, [pc, #176]	; (8001884 <main+0x390>)
 80017d2:	f004 faff 	bl	8005dd4 <puts>
			  pack_cmd(PI/2, 1.0, 5.0, 4.0, 0.0);
 80017d6:	ed9f 2a24 	vldr	s4, [pc, #144]	; 8001868 <main+0x374>
 80017da:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 80017de:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 80017e2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80017e6:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800188c <main+0x398>
 80017ea:	f7ff fbe5 	bl	8000fb8 <pack_cmd>
			  BLDC_CANTx();
 80017ee:	f7ff fce1 	bl	80011b4 <BLDC_CANTx>
			  HAL_Delay(10);
 80017f2:	200a      	movs	r0, #10
 80017f4:	f000 fd20 	bl	8002238 <HAL_Delay>
			  KeyCommand[0]=0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	713b      	strb	r3, [r7, #4]
			  break;
 80017fc:	e01f      	b.n	800183e <main+0x34a>
		  case'c':
			  printf("case : c\r\n");
 80017fe:	4824      	ldr	r0, [pc, #144]	; (8001890 <main+0x39c>)
 8001800:	f004 fae8 	bl	8005dd4 <puts>
			  pack_cmd(0.0, 1.0, 5.0, 4.0, 0.0);
 8001804:	ed9f 2a18 	vldr	s4, [pc, #96]	; 8001868 <main+0x374>
 8001808:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 800180c:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8001810:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001814:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8001868 <main+0x374>
 8001818:	f7ff fbce 	bl	8000fb8 <pack_cmd>
			  BLDC_CANTx();
 800181c:	f7ff fcca 	bl	80011b4 <BLDC_CANTx>
			  HAL_Delay(10);
 8001820:	200a      	movs	r0, #10
 8001822:	f000 fd09 	bl	8002238 <HAL_Delay>
			  KeyCommand[0]=0;
 8001826:	2300      	movs	r3, #0
 8001828:	713b      	strb	r3, [r7, #4]
			  break;
 800182a:	e008      	b.n	800183e <main+0x34a>

		  default:
			  printf("NoCommand\r\n");
 800182c:	4819      	ldr	r0, [pc, #100]	; (8001894 <main+0x3a0>)
 800182e:	f004 fad1 	bl	8005dd4 <puts>
			  KeyCommand[0]=0;
 8001832:	2300      	movs	r3, #0
 8001834:	713b      	strb	r3, [r7, #4]
			  get_can_flag=1;
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <main+0x36c>)
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
			  break;
 800183c:	bf00      	nop
		  }
		  while(!get_can_flag){}
 800183e:	bf00      	nop
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <main+0x36c>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0fb      	beq.n	8001840 <main+0x34c>
	  get_uart_flag=0;
 8001848:	e69e      	b.n	8001588 <main+0x94>
 800184a:	bf00      	nop
 800184c:	20000264 	.word	0x20000264
 8001850:	200001f8 	.word	0x200001f8
 8001854:	0800808c 	.word	0x0800808c
 8001858:	200002d4 	.word	0x200002d4
 800185c:	20000220 	.word	0x20000220
 8001860:	200002d5 	.word	0x200002d5
 8001864:	08008098 	.word	0x08008098
 8001868:	00000000 	.word	0x00000000
 800186c:	080080a4 	.word	0x080080a4
 8001870:	40c90fdb 	.word	0x40c90fdb
 8001874:	080080b0 	.word	0x080080b0
 8001878:	080080bc 	.word	0x080080bc
 800187c:	080080c8 	.word	0x080080c8
 8001880:	080080d4 	.word	0x080080d4
 8001884:	080080e0 	.word	0x080080e0
 8001888:	bfc90fdb 	.word	0xbfc90fdb
 800188c:	3fc90fdb 	.word	0x3fc90fdb
 8001890:	080080ec 	.word	0x080080ec
 8001894:	080080f8 	.word	0x080080f8

08001898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b094      	sub	sp, #80	; 0x50
 800189c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	2234      	movs	r2, #52	; 0x34
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f003 fd9c 	bl	80053e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ac:	f107 0308 	add.w	r3, r7, #8
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018bc:	2300      	movs	r3, #0
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	4b29      	ldr	r3, [pc, #164]	; (8001968 <SystemClock_Config+0xd0>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	4a28      	ldr	r2, [pc, #160]	; (8001968 <SystemClock_Config+0xd0>)
 80018c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ca:	6413      	str	r3, [r2, #64]	; 0x40
 80018cc:	4b26      	ldr	r3, [pc, #152]	; (8001968 <SystemClock_Config+0xd0>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d8:	2300      	movs	r3, #0
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	4b23      	ldr	r3, [pc, #140]	; (800196c <SystemClock_Config+0xd4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a22      	ldr	r2, [pc, #136]	; (800196c <SystemClock_Config+0xd4>)
 80018e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b20      	ldr	r3, [pc, #128]	; (800196c <SystemClock_Config+0xd4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018f4:	2302      	movs	r3, #2
 80018f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018f8:	2301      	movs	r3, #1
 80018fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018fc:	2310      	movs	r3, #16
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001900:	2302      	movs	r3, #2
 8001902:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001904:	2300      	movs	r3, #0
 8001906:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001908:	2308      	movs	r3, #8
 800190a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 800190c:	23a0      	movs	r3, #160	; 0xa0
 800190e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001910:	2302      	movs	r3, #2
 8001912:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001914:	2302      	movs	r3, #2
 8001916:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001918:	2302      	movs	r3, #2
 800191a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	4618      	mov	r0, r3
 8001922:	f002 fa1f 	bl	8003d64 <HAL_RCC_OscConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800192c:	f000 f960 	bl	8001bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001930:	230f      	movs	r3, #15
 8001932:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001934:	2302      	movs	r3, #2
 8001936:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800193c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001940:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001946:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001948:	f107 0308 	add.w	r3, r7, #8
 800194c:	2105      	movs	r1, #5
 800194e:	4618      	mov	r0, r3
 8001950:	f001 febe 	bl	80036d0 <HAL_RCC_ClockConfig>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800195a:	f000 f949 	bl	8001bf0 <Error_Handler>
  }
}
 800195e:	bf00      	nop
 8001960:	3750      	adds	r7, #80	; 0x50
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800
 800196c:	40007000 	.word	0x40007000

08001970 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001974:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <MX_CAN1_Init+0x68>)
 8001976:	4a19      	ldr	r2, [pc, #100]	; (80019dc <MX_CAN1_Init+0x6c>)
 8001978:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800197a:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <MX_CAN1_Init+0x68>)
 800197c:	2204      	movs	r2, #4
 800197e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001980:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <MX_CAN1_Init+0x68>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <MX_CAN1_Init+0x68>)
 8001988:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800198c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <MX_CAN1_Init+0x68>)
 8001990:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001994:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <MX_CAN1_Init+0x68>)
 8001998:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 800199c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <MX_CAN1_Init+0x68>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <MX_CAN1_Init+0x68>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <MX_CAN1_Init+0x68>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <MX_CAN1_Init+0x68>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <MX_CAN1_Init+0x68>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <MX_CAN1_Init+0x68>)
 80019be:	2200      	movs	r2, #0
 80019c0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80019c2:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_CAN1_Init+0x68>)
 80019c4:	f000 fc5c 	bl	8002280 <HAL_CAN_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80019ce:	f000 f90f 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200001f8 	.word	0x200001f8
 80019dc:	40006400 	.word	0x40006400

080019e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 80019e6:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <MX_USART2_UART_Init+0x50>)
 80019e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 80019ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a06:	220c      	movs	r2, #12
 8001a08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a16:	4805      	ldr	r0, [pc, #20]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a18:	f002 fc42 	bl	80042a0 <HAL_UART_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a22:	f000 f8e5 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000220 	.word	0x20000220
 8001a30:	40004400 	.word	0x40004400

08001a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	; 0x28
 8001a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	4b37      	ldr	r3, [pc, #220]	; (8001b2c <MX_GPIO_Init+0xf8>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a36      	ldr	r2, [pc, #216]	; (8001b2c <MX_GPIO_Init+0xf8>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <MX_GPIO_Init+0xf8>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b30      	ldr	r3, [pc, #192]	; (8001b2c <MX_GPIO_Init+0xf8>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a2f      	ldr	r2, [pc, #188]	; (8001b2c <MX_GPIO_Init+0xf8>)
 8001a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <MX_GPIO_Init+0xf8>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <MX_GPIO_Init+0xf8>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a28      	ldr	r2, [pc, #160]	; (8001b2c <MX_GPIO_Init+0xf8>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <MX_GPIO_Init+0xf8>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <MX_GPIO_Init+0xf8>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a21      	ldr	r2, [pc, #132]	; (8001b2c <MX_GPIO_Init+0xf8>)
 8001aa8:	f043 0302 	orr.w	r3, r3, #2
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <MX_GPIO_Init+0xf8>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2120      	movs	r1, #32
 8001abe:	481c      	ldr	r0, [pc, #112]	; (8001b30 <MX_GPIO_Init+0xfc>)
 8001ac0:	f001 fdec 	bl	800369c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2110      	movs	r1, #16
 8001ac8:	481a      	ldr	r0, [pc, #104]	; (8001b34 <MX_GPIO_Init+0x100>)
 8001aca:	f001 fde7 	bl	800369c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ace:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ad4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4814      	ldr	r0, [pc, #80]	; (8001b38 <MX_GPIO_Init+0x104>)
 8001ae6:	f001 fc45 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001aea:	2320      	movs	r3, #32
 8001aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	480b      	ldr	r0, [pc, #44]	; (8001b30 <MX_GPIO_Init+0xfc>)
 8001b02:	f001 fc37 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b06:	2310      	movs	r3, #16
 8001b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4805      	ldr	r0, [pc, #20]	; (8001b34 <MX_GPIO_Init+0x100>)
 8001b1e:	f001 fc29 	bl	8003374 <HAL_GPIO_Init>

}
 8001b22:	bf00      	nop
 8001b24:	3728      	adds	r7, #40	; 0x28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40020000 	.word	0x40020000
 8001b34:	40020400 	.word	0x40020400
 8001b38:	40020800 	.word	0x40020800

08001b3c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)	//printfに必要
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	230a      	movs	r3, #10
 8001b4e:	68b9      	ldr	r1, [r7, #8]
 8001b50:	4803      	ldr	r0, [pc, #12]	; (8001b60 <_write+0x24>)
 8001b52:	f002 fbf2 	bl	800433a <HAL_UART_Transmit>
  return len;
 8001b56:	687b      	ldr	r3, [r7, #4]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000220 	.word	0x20000220

08001b64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*UartHandle)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit(&huart2,UART1_Data,6,1000);
//	printf("UART_START\r\n");
//if(get_can_flag==0){
	get_uart_flag=1;
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <HAL_UART_RxCpltCallback+0x1c>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	701a      	strb	r2, [r3, #0]
//	printf("UART_GET\r\n");
//}

}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	200002d4 	.word	0x200002d4

08001b84 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
//	  printf("TxCan\r\n");
	  nextcan_flag=1;
 8001b8c:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	701a      	strb	r2, [r3, #0]

}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	200002d6 	.word	0x200002d6

08001ba4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	get_can_flag=1;
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	701a      	strb	r2, [r3, #0]
	printf("RxCan\r\n");
 8001bb2:	480a      	ldr	r0, [pc, #40]	; (8001bdc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001bb4:	f004 f90e 	bl	8005dd4 <puts>
	HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0, &RxHeader,RxData);
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001bba:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	480a      	ldr	r0, [pc, #40]	; (8001be8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001bc0:	f000 fed7 	bl	8002972 <HAL_CAN_GetRxMessage>
	HAL_UART_Transmit(&huart2,RxData,sizeof(RxData),100);//受け取ったデータを送信
 8001bc4:	2364      	movs	r3, #100	; 0x64
 8001bc6:	2208      	movs	r2, #8
 8001bc8:	4905      	ldr	r1, [pc, #20]	; (8001be0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001bca:	4808      	ldr	r0, [pc, #32]	; (8001bec <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001bcc:	f002 fbb5 	bl	800433a <HAL_UART_Transmit>
//  if(flag >0){
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
//  }else{
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
//  }
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	200002d5 	.word	0x200002d5
 8001bdc:	08008104 	.word	0x08008104
 8001be0:	200002c0 	.word	0x200002c0
 8001be4:	200002a4 	.word	0x200002a4
 8001be8:	200001f8 	.word	0x200001f8
 8001bec:	20000220 	.word	0x20000220

08001bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf4:	b672      	cpsid	i
}
 8001bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <Error_Handler+0x8>

08001bfa <fmaxf>:
#include "math_ops.h"


float fmaxf(float x, float y){
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c04:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8001c08:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c0c:	edd7 7a00 	vldr	s15, [r7]
 8001c10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c18:	dd01      	ble.n	8001c1e <fmaxf+0x24>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	e000      	b.n	8001c20 <fmaxf+0x26>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	ee07 3a90 	vmov	s15, r3
    }
 8001c24:	eeb0 0a67 	vmov.f32	s0, s15
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <fminf>:

float fminf(float x, float y){
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c3c:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 8001c40:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c44:	edd7 7a00 	vldr	s15, [r7]
 8001c48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c50:	d501      	bpl.n	8001c56 <fminf+0x24>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	e000      	b.n	8001c58 <fminf+0x26>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	ee07 3a90 	vmov	s15, r3
    }
 8001c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <float_to_uint>:
        *y = *y * limit/norm;
        }
    }


int float_to_uint(float x, float x_min, float x_max, int bits){
 8001c6a:	b480      	push	{r7}
 8001c6c:	b087      	sub	sp, #28
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c74:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c78:	ed87 1a01 	vstr	s2, [r7, #4]
 8001c7c:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 8001c7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c82:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c8a:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 8001c92:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c96:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	ee07 3a90 	vmov	s15, r3
 8001cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001cb4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cc0:	ee17 3a90 	vmov	r3, s15
    }
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	371c      	adds	r7, #28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <uint_to_float>:


float uint_to_float(int x_int, float x_min, float x_max, int bits){
 8001cd0:	b480      	push	{r7}
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001cdc:	edc7 0a01 	vstr	s1, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8001ce2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ce6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cee:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	ee07 3a90 	vmov	s15, r3
 8001cfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d00:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d04:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001d08:	2201      	movs	r2, #1
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	3b01      	subs	r3, #1
 8001d12:	ee07 3a90 	vmov	s15, r3
 8001d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d22:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8001d26:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2a:	371c      	adds	r7, #28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	4a0f      	ldr	r2, [pc, #60]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d48:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	603b      	str	r3, [r7, #0]
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a08      	ldr	r2, [pc, #32]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800

08001d84 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a2a      	ldr	r2, [pc, #168]	; (8001e4c <HAL_CAN_MspInit+0xc8>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d14d      	bne.n	8001e42 <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <HAL_CAN_MspInit+0xcc>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	4a28      	ldr	r2, [pc, #160]	; (8001e50 <HAL_CAN_MspInit+0xcc>)
 8001db0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001db4:	6413      	str	r3, [r2, #64]	; 0x40
 8001db6:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <HAL_CAN_MspInit+0xcc>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <HAL_CAN_MspInit+0xcc>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a21      	ldr	r2, [pc, #132]	; (8001e50 <HAL_CAN_MspInit+0xcc>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <HAL_CAN_MspInit+0xcc>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001dde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dec:	2303      	movs	r3, #3
 8001dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001df0:	2309      	movs	r3, #9
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4816      	ldr	r0, [pc, #88]	; (8001e54 <HAL_CAN_MspInit+0xd0>)
 8001dfc:	f001 faba 	bl	8003374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e12:	2309      	movs	r3, #9
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	480d      	ldr	r0, [pc, #52]	; (8001e54 <HAL_CAN_MspInit+0xd0>)
 8001e1e:	f001 faa9 	bl	8003374 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2100      	movs	r1, #0
 8001e26:	2013      	movs	r0, #19
 8001e28:	f001 f9db 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001e2c:	2013      	movs	r0, #19
 8001e2e:	f001 f9f4 	bl	800321a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	2014      	movs	r0, #20
 8001e38:	f001 f9d3 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001e3c:	2014      	movs	r0, #20
 8001e3e:	f001 f9ec 	bl	800321a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001e42:	bf00      	nop
 8001e44:	3728      	adds	r7, #40	; 0x28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40006400 	.word	0x40006400
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40020000 	.word	0x40020000

08001e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08a      	sub	sp, #40	; 0x28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a1d      	ldr	r2, [pc, #116]	; (8001eec <HAL_UART_MspInit+0x94>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d133      	bne.n	8001ee2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <HAL_UART_MspInit+0x98>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4a1b      	ldr	r2, [pc, #108]	; (8001ef0 <HAL_UART_MspInit+0x98>)
 8001e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e88:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8a:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_UART_MspInit+0x98>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <HAL_UART_MspInit+0x98>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a14      	ldr	r2, [pc, #80]	; (8001ef0 <HAL_UART_MspInit+0x98>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_UART_MspInit+0x98>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001eb2:	230c      	movs	r3, #12
 8001eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ec2:	2307      	movs	r3, #7
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4809      	ldr	r0, [pc, #36]	; (8001ef4 <HAL_UART_MspInit+0x9c>)
 8001ece:	f001 fa51 	bl	8003374 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	2026      	movs	r0, #38	; 0x26
 8001ed8:	f001 f983 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001edc:	2026      	movs	r0, #38	; 0x26
 8001ede:	f001 f99c 	bl	800321a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ee2:	bf00      	nop
 8001ee4:	3728      	adds	r7, #40	; 0x28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40004400 	.word	0x40004400
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020000 	.word	0x40020000

08001ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <NMI_Handler+0x4>

08001efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <HardFault_Handler+0x4>

08001f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <MemManage_Handler+0x4>

08001f0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <BusFault_Handler+0x4>

08001f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <UsageFault_Handler+0x4>

08001f16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f44:	f000 f958 	bl	80021f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f50:	4802      	ldr	r0, [pc, #8]	; (8001f5c <CAN1_TX_IRQHandler+0x10>)
 8001f52:	f000 fe46 	bl	8002be2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200001f8 	.word	0x200001f8

08001f60 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f64:	4802      	ldr	r0, [pc, #8]	; (8001f70 <CAN1_RX0_IRQHandler+0x10>)
 8001f66:	f000 fe3c 	bl	8002be2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200001f8 	.word	0x200001f8

08001f74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f78:	4802      	ldr	r0, [pc, #8]	; (8001f84 <USART2_IRQHandler+0x10>)
 8001f7a:	f002 faa1 	bl	80044c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000220 	.word	0x20000220

08001f88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
	return 1;
 8001f8c:	2301      	movs	r3, #1
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <_kill>:

int _kill(int pid, int sig)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fa2:	f003 f9f5 	bl	8005390 <__errno>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2216      	movs	r2, #22
 8001faa:	601a      	str	r2, [r3, #0]
	return -1;
 8001fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <_exit>:

void _exit (int status)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff ffe7 	bl	8001f98 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fca:	e7fe      	b.n	8001fca <_exit+0x12>

08001fcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	e00a      	b.n	8001ff4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fde:	f3af 8000 	nop.w
 8001fe2:	4601      	mov	r1, r0
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	60ba      	str	r2, [r7, #8]
 8001fea:	b2ca      	uxtb	r2, r1
 8001fec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	dbf0      	blt.n	8001fde <_read+0x12>
	}

return len;
 8001ffc:	687b      	ldr	r3, [r7, #4]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
	return -1;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800202e:	605a      	str	r2, [r3, #4]
	return 0;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <_isatty>:

int _isatty(int file)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
	return 1;
 8002046:	2301      	movs	r3, #1
}
 8002048:	4618      	mov	r0, r3
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
	return 0;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002078:	4a14      	ldr	r2, [pc, #80]	; (80020cc <_sbrk+0x5c>)
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <_sbrk+0x60>)
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002084:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <_sbrk+0x64>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d102      	bne.n	8002092 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800208c:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <_sbrk+0x64>)
 800208e:	4a12      	ldr	r2, [pc, #72]	; (80020d8 <_sbrk+0x68>)
 8002090:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002092:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <_sbrk+0x64>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	429a      	cmp	r2, r3
 800209e:	d207      	bcs.n	80020b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020a0:	f003 f976 	bl	8005390 <__errno>
 80020a4:	4603      	mov	r3, r0
 80020a6:	220c      	movs	r2, #12
 80020a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020ae:	e009      	b.n	80020c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b0:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <_sbrk+0x64>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020b6:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <_sbrk+0x64>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	4a05      	ldr	r2, [pc, #20]	; (80020d4 <_sbrk+0x64>)
 80020c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020c2:	68fb      	ldr	r3, [r7, #12]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20020000 	.word	0x20020000
 80020d0:	00000400 	.word	0x00000400
 80020d4:	200002d8 	.word	0x200002d8
 80020d8:	200002f0 	.word	0x200002f0

080020dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <SystemInit+0x20>)
 80020e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e6:	4a05      	ldr	r2, [pc, #20]	; (80020fc <SystemInit+0x20>)
 80020e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002138 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002104:	480d      	ldr	r0, [pc, #52]	; (800213c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002106:	490e      	ldr	r1, [pc, #56]	; (8002140 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002108:	4a0e      	ldr	r2, [pc, #56]	; (8002144 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800210c:	e002      	b.n	8002114 <LoopCopyDataInit>

0800210e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002112:	3304      	adds	r3, #4

08002114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002118:	d3f9      	bcc.n	800210e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211a:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800211c:	4c0b      	ldr	r4, [pc, #44]	; (800214c <LoopFillZerobss+0x26>)
  movs r3, #0
 800211e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002120:	e001      	b.n	8002126 <LoopFillZerobss>

08002122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002124:	3204      	adds	r2, #4

08002126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002128:	d3fb      	bcc.n	8002122 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800212a:	f7ff ffd7 	bl	80020dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800212e:	f003 f935 	bl	800539c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002132:	f7ff f9df 	bl	80014f4 <main>
  bx  lr    
 8002136:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002138:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800213c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002140:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002144:	0800850c 	.word	0x0800850c
  ldr r2, =_sbss
 8002148:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800214c:	200002f0 	.word	0x200002f0

08002150 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002150:	e7fe      	b.n	8002150 <ADC_IRQHandler>
	...

08002154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002158:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <HAL_Init+0x40>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <HAL_Init+0x40>)
 800215e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002162:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_Init+0x40>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <HAL_Init+0x40>)
 800216a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800216e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_Init+0x40>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a07      	ldr	r2, [pc, #28]	; (8002194 <HAL_Init+0x40>)
 8002176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217c:	2003      	movs	r0, #3
 800217e:	f001 f825 	bl	80031cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002182:	2000      	movs	r0, #0
 8002184:	f000 f808 	bl	8002198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002188:	f7ff fdd4 	bl	8001d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023c00 	.word	0x40023c00

08002198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_InitTick+0x54>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_InitTick+0x58>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4619      	mov	r1, r3
 80021aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b6:	4618      	mov	r0, r3
 80021b8:	f001 f83d 	bl	8003236 <HAL_SYSTICK_Config>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00e      	b.n	80021e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b0f      	cmp	r3, #15
 80021ca:	d80a      	bhi.n	80021e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021cc:	2200      	movs	r2, #0
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021d4:	f001 f805 	bl	80031e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d8:	4a06      	ldr	r2, [pc, #24]	; (80021f4 <HAL_InitTick+0x5c>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000000 	.word	0x20000000
 80021f0:	20000008 	.word	0x20000008
 80021f4:	20000004 	.word	0x20000004

080021f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_IncTick+0x20>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_IncTick+0x24>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4413      	add	r3, r2
 8002208:	4a04      	ldr	r2, [pc, #16]	; (800221c <HAL_IncTick+0x24>)
 800220a:	6013      	str	r3, [r2, #0]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000008 	.word	0x20000008
 800221c:	200002dc 	.word	0x200002dc

08002220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return uwTick;
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <HAL_GetTick+0x14>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	200002dc 	.word	0x200002dc

08002238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002240:	f7ff ffee 	bl	8002220 <HAL_GetTick>
 8002244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002250:	d005      	beq.n	800225e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_Delay+0x44>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4413      	add	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800225e:	bf00      	nop
 8002260:	f7ff ffde 	bl	8002220 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	429a      	cmp	r2, r3
 800226e:	d8f7      	bhi.n	8002260 <HAL_Delay+0x28>
  {
  }
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000008 	.word	0x20000008

08002280 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e0ed      	b.n	800246e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d102      	bne.n	80022a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff fd70 	bl	8001d84 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022b4:	f7ff ffb4 	bl	8002220 <HAL_GetTick>
 80022b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022ba:	e012      	b.n	80022e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022bc:	f7ff ffb0 	bl	8002220 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b0a      	cmp	r3, #10
 80022c8:	d90b      	bls.n	80022e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2205      	movs	r2, #5
 80022da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0c5      	b.n	800246e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0e5      	beq.n	80022bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0202 	bic.w	r2, r2, #2
 80022fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002300:	f7ff ff8e 	bl	8002220 <HAL_GetTick>
 8002304:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002306:	e012      	b.n	800232e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002308:	f7ff ff8a 	bl	8002220 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b0a      	cmp	r3, #10
 8002314:	d90b      	bls.n	800232e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2205      	movs	r2, #5
 8002326:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e09f      	b.n	800246e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1e5      	bne.n	8002308 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7e1b      	ldrb	r3, [r3, #24]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d108      	bne.n	8002356 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	e007      	b.n	8002366 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002364:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	7e5b      	ldrb	r3, [r3, #25]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d108      	bne.n	8002380 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	e007      	b.n	8002390 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800238e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	7e9b      	ldrb	r3, [r3, #26]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d108      	bne.n	80023aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0220 	orr.w	r2, r2, #32
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	e007      	b.n	80023ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0220 	bic.w	r2, r2, #32
 80023b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	7edb      	ldrb	r3, [r3, #27]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d108      	bne.n	80023d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0210 	bic.w	r2, r2, #16
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	e007      	b.n	80023e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0210 	orr.w	r2, r2, #16
 80023e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7f1b      	ldrb	r3, [r3, #28]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d108      	bne.n	80023fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0208 	orr.w	r2, r2, #8
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	e007      	b.n	800240e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0208 	bic.w	r2, r2, #8
 800240c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	7f5b      	ldrb	r3, [r3, #29]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d108      	bne.n	8002428 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0204 	orr.w	r2, r2, #4
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	e007      	b.n	8002438 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0204 	bic.w	r2, r2, #4
 8002436:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	ea42 0103 	orr.w	r1, r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	1e5a      	subs	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800248e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002490:	7cfb      	ldrb	r3, [r7, #19]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d003      	beq.n	800249e <HAL_CAN_ConfigFilter+0x26>
 8002496:	7cfb      	ldrb	r3, [r7, #19]
 8002498:	2b02      	cmp	r3, #2
 800249a:	f040 80be 	bne.w	800261a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800249e:	4b65      	ldr	r3, [pc, #404]	; (8002634 <HAL_CAN_ConfigFilter+0x1bc>)
 80024a0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024a8:	f043 0201 	orr.w	r2, r3, #1
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024b8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	021b      	lsls	r3, r3, #8
 80024ce:	431a      	orrs	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	2201      	movs	r2, #1
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	401a      	ands	r2, r3
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d123      	bne.n	8002548 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	43db      	mvns	r3, r3
 800250a:	401a      	ands	r2, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002522:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	3248      	adds	r2, #72	; 0x48
 8002528:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800253c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800253e:	6979      	ldr	r1, [r7, #20]
 8002540:	3348      	adds	r3, #72	; 0x48
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	440b      	add	r3, r1
 8002546:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d122      	bne.n	8002596 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	431a      	orrs	r2, r3
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002570:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	3248      	adds	r2, #72	; 0x48
 8002576:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800258a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800258c:	6979      	ldr	r1, [r7, #20]
 800258e:	3348      	adds	r3, #72	; 0x48
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	440b      	add	r3, r1
 8002594:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d109      	bne.n	80025b2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	401a      	ands	r2, r3
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80025b0:	e007      	b.n	80025c2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d109      	bne.n	80025de <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	401a      	ands	r2, r3
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80025dc:	e007      	b.n	80025ee <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d107      	bne.n	8002606 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	431a      	orrs	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800260c:	f023 0201 	bic.w	r2, r3, #1
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e006      	b.n	8002628 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
  }
}
 8002628:	4618      	mov	r0, r3
 800262a:	371c      	adds	r7, #28
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	40006400 	.word	0x40006400

08002638 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d12e      	bne.n	80026aa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0201 	bic.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002664:	f7ff fddc 	bl	8002220 <HAL_GetTick>
 8002668:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800266a:	e012      	b.n	8002692 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800266c:	f7ff fdd8 	bl	8002220 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b0a      	cmp	r3, #10
 8002678:	d90b      	bls.n	8002692 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2205      	movs	r2, #5
 800268a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e012      	b.n	80026b8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1e5      	bne.n	800266c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	e006      	b.n	80026b8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
  }
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d133      	bne.n	800273c <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026e4:	f7ff fd9c 	bl	8002220 <HAL_GetTick>
 80026e8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026ea:	e012      	b.n	8002712 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026ec:	f7ff fd98 	bl	8002220 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b0a      	cmp	r3, #10
 80026f8:	d90b      	bls.n	8002712 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2205      	movs	r2, #5
 800270a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e01b      	b.n	800274a <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0e5      	beq.n	80026ec <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0202 	bic.w	r2, r2, #2
 800272e:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	e006      	b.n	800274a <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
  }
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002752:	b480      	push	{r7}
 8002754:	b089      	sub	sp, #36	; 0x24
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002766:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002770:	7ffb      	ldrb	r3, [r7, #31]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d003      	beq.n	800277e <HAL_CAN_AddTxMessage+0x2c>
 8002776:	7ffb      	ldrb	r3, [r7, #31]
 8002778:	2b02      	cmp	r3, #2
 800277a:	f040 80b8 	bne.w	80028ee <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10a      	bne.n	800279e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800278e:	2b00      	cmp	r3, #0
 8002790:	d105      	bne.n	800279e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80a0 	beq.w	80028de <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	0e1b      	lsrs	r3, r3, #24
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d907      	bls.n	80027be <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e09e      	b.n	80028fc <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80027be:	2201      	movs	r2, #1
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	409a      	lsls	r2, r3
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10d      	bne.n	80027ec <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027da:	68f9      	ldr	r1, [r7, #12]
 80027dc:	6809      	ldr	r1, [r1, #0]
 80027de:	431a      	orrs	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	3318      	adds	r3, #24
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	440b      	add	r3, r1
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	e00f      	b.n	800280c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027f6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027fc:	68f9      	ldr	r1, [r7, #12]
 80027fe:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002800:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	3318      	adds	r3, #24
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	440b      	add	r3, r1
 800280a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6819      	ldr	r1, [r3, #0]
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3318      	adds	r3, #24
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	440b      	add	r3, r1
 800281c:	3304      	adds	r3, #4
 800281e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	7d1b      	ldrb	r3, [r3, #20]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d111      	bne.n	800284c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	3318      	adds	r3, #24
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	4413      	add	r3, r2
 8002834:	3304      	adds	r3, #4
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	6811      	ldr	r1, [r2, #0]
 800283c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	3318      	adds	r3, #24
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	440b      	add	r3, r1
 8002848:	3304      	adds	r3, #4
 800284a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3307      	adds	r3, #7
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	061a      	lsls	r2, r3, #24
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3306      	adds	r3, #6
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	041b      	lsls	r3, r3, #16
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3305      	adds	r3, #5
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	4313      	orrs	r3, r2
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	3204      	adds	r2, #4
 800286c:	7812      	ldrb	r2, [r2, #0]
 800286e:	4610      	mov	r0, r2
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	6811      	ldr	r1, [r2, #0]
 8002874:	ea43 0200 	orr.w	r2, r3, r0
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	440b      	add	r3, r1
 800287e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002882:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3303      	adds	r3, #3
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	061a      	lsls	r2, r3, #24
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3302      	adds	r3, #2
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	041b      	lsls	r3, r3, #16
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3301      	adds	r3, #1
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	4313      	orrs	r3, r2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	7812      	ldrb	r2, [r2, #0]
 80028a4:	4610      	mov	r0, r2
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	6811      	ldr	r1, [r2, #0]
 80028aa:	ea43 0200 	orr.w	r2, r3, r0
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	440b      	add	r3, r1
 80028b4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80028b8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	3318      	adds	r3, #24
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	4413      	add	r3, r2
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	6811      	ldr	r1, [r2, #0]
 80028cc:	f043 0201 	orr.w	r2, r3, #1
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	3318      	adds	r3, #24
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	440b      	add	r3, r1
 80028d8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	e00e      	b.n	80028fc <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e006      	b.n	80028fc <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
  }
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3724      	adds	r7, #36	; 0x24
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3020 	ldrb.w	r3, [r3, #32]
 800291a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800291c:	7afb      	ldrb	r3, [r7, #11]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d002      	beq.n	8002928 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002922:	7afb      	ldrb	r3, [r7, #11]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d11d      	bne.n	8002964 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3301      	adds	r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	3301      	adds	r3, #1
 800294e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d002      	beq.n	8002964 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	3301      	adds	r3, #1
 8002962:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002964:	68fb      	ldr	r3, [r7, #12]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002972:	b480      	push	{r7}
 8002974:	b087      	sub	sp, #28
 8002976:	af00      	add	r7, sp, #0
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
 800297e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002986:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002988:	7dfb      	ldrb	r3, [r7, #23]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d003      	beq.n	8002996 <HAL_CAN_GetRxMessage+0x24>
 800298e:	7dfb      	ldrb	r3, [r7, #23]
 8002990:	2b02      	cmp	r3, #2
 8002992:	f040 80f3 	bne.w	8002b7c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10e      	bne.n	80029ba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d116      	bne.n	80029d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e0e7      	b.n	8002b8a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d107      	bne.n	80029d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0d8      	b.n	8002b8a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	331b      	adds	r3, #27
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	4413      	add	r3, r2
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0204 	and.w	r2, r3, #4
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10c      	bne.n	8002a10 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	331b      	adds	r3, #27
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	4413      	add	r3, r2
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	0d5b      	lsrs	r3, r3, #21
 8002a06:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	e00b      	b.n	8002a28 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	331b      	adds	r3, #27
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	4413      	add	r3, r2
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	08db      	lsrs	r3, r3, #3
 8002a20:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	331b      	adds	r3, #27
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	4413      	add	r3, r2
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0202 	and.w	r2, r3, #2
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	331b      	adds	r3, #27
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	4413      	add	r3, r2
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 020f 	and.w	r2, r3, #15
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	331b      	adds	r3, #27
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	4413      	add	r3, r2
 8002a62:	3304      	adds	r3, #4
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	0a1b      	lsrs	r3, r3, #8
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	331b      	adds	r3, #27
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	4413      	add	r3, r2
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	0c1b      	lsrs	r3, r3, #16
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0a1a      	lsrs	r2, r3, #8
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	0c1a      	lsrs	r2, r3, #16
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	3302      	adds	r3, #2
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	0e1a      	lsrs	r2, r3, #24
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	3303      	adds	r3, #3
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	3304      	adds	r3, #4
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	0a1a      	lsrs	r2, r3, #8
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	3305      	adds	r3, #5
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	0c1a      	lsrs	r2, r3, #16
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	3306      	adds	r3, #6
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	0e1a      	lsrs	r2, r3, #24
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	3307      	adds	r3, #7
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d108      	bne.n	8002b68 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0220 	orr.w	r2, r2, #32
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	e007      	b.n	8002b78 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0220 	orr.w	r2, r2, #32
 8002b76:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e006      	b.n	8002b8a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
  }
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b085      	sub	sp, #20
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ba6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d002      	beq.n	8002bb4 <HAL_CAN_ActivateNotification+0x1e>
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d109      	bne.n	8002bc8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6959      	ldr	r1, [r3, #20]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	e006      	b.n	8002bd6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
  }
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b08a      	sub	sp, #40	; 0x28
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d07c      	beq.n	8002d22 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d023      	beq.n	8002c7a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2201      	movs	r2, #1
 8002c38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7fe ff9d 	bl	8001b84 <HAL_CAN_TxMailbox0CompleteCallback>
 8002c4a:	e016      	b.n	8002c7a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d004      	beq.n	8002c60 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5e:	e00c      	b.n	8002c7a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d004      	beq.n	8002c74 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
 8002c72:	e002      	b.n	8002c7a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f97f 	bl	8002f78 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d024      	beq.n	8002cce <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f959 	bl	8002f50 <HAL_CAN_TxMailbox1CompleteCallback>
 8002c9e:	e016      	b.n	8002cce <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d004      	beq.n	8002cb4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb2:	e00c      	b.n	8002cce <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d004      	beq.n	8002cc8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc6:	e002      	b.n	8002cce <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f95f 	bl	8002f8c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d024      	beq.n	8002d22 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ce0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f939 	bl	8002f64 <HAL_CAN_TxMailbox2CompleteCallback>
 8002cf2:	e016      	b.n	8002d22 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d004      	beq.n	8002d08 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
 8002d06:	e00c      	b.n	8002d22 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d004      	beq.n	8002d1c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1a:	e002      	b.n	8002d22 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f93f 	bl	8002fa0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00c      	beq.n	8002d46 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d007      	beq.n	8002d46 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2210      	movs	r2, #16
 8002d44:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00b      	beq.n	8002d68 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d006      	beq.n	8002d68 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2208      	movs	r2, #8
 8002d60:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f926 	bl	8002fb4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d009      	beq.n	8002d86 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7fe ff0f 	bl	8001ba4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00c      	beq.n	8002daa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2210      	movs	r2, #16
 8002da8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00b      	beq.n	8002dcc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d006      	beq.n	8002dcc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2208      	movs	r2, #8
 8002dc4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f908 	bl	8002fdc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f8ef 	bl	8002fc8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00b      	beq.n	8002e0c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d006      	beq.n	8002e0c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2210      	movs	r2, #16
 8002e04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f8f2 	bl	8002ff0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00b      	beq.n	8002e2e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d006      	beq.n	8002e2e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2208      	movs	r2, #8
 8002e26:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f8eb 	bl	8003004 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d07b      	beq.n	8002f30 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d072      	beq.n	8002f28 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	f043 0302 	orr.w	r3, r3, #2
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	f043 0304 	orr.w	r3, r3, #4
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d043      	beq.n	8002f28 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d03e      	beq.n	8002f28 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eb0:	2b60      	cmp	r3, #96	; 0x60
 8002eb2:	d02b      	beq.n	8002f0c <HAL_CAN_IRQHandler+0x32a>
 8002eb4:	2b60      	cmp	r3, #96	; 0x60
 8002eb6:	d82e      	bhi.n	8002f16 <HAL_CAN_IRQHandler+0x334>
 8002eb8:	2b50      	cmp	r3, #80	; 0x50
 8002eba:	d022      	beq.n	8002f02 <HAL_CAN_IRQHandler+0x320>
 8002ebc:	2b50      	cmp	r3, #80	; 0x50
 8002ebe:	d82a      	bhi.n	8002f16 <HAL_CAN_IRQHandler+0x334>
 8002ec0:	2b40      	cmp	r3, #64	; 0x40
 8002ec2:	d019      	beq.n	8002ef8 <HAL_CAN_IRQHandler+0x316>
 8002ec4:	2b40      	cmp	r3, #64	; 0x40
 8002ec6:	d826      	bhi.n	8002f16 <HAL_CAN_IRQHandler+0x334>
 8002ec8:	2b30      	cmp	r3, #48	; 0x30
 8002eca:	d010      	beq.n	8002eee <HAL_CAN_IRQHandler+0x30c>
 8002ecc:	2b30      	cmp	r3, #48	; 0x30
 8002ece:	d822      	bhi.n	8002f16 <HAL_CAN_IRQHandler+0x334>
 8002ed0:	2b10      	cmp	r3, #16
 8002ed2:	d002      	beq.n	8002eda <HAL_CAN_IRQHandler+0x2f8>
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d005      	beq.n	8002ee4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ed8:	e01d      	b.n	8002f16 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	f043 0308 	orr.w	r3, r3, #8
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ee2:	e019      	b.n	8002f18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	f043 0310 	orr.w	r3, r3, #16
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002eec:	e014      	b.n	8002f18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	f043 0320 	orr.w	r3, r3, #32
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ef6:	e00f      	b.n	8002f18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f00:	e00a      	b.n	8002f18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f0a:	e005      	b.n	8002f18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f14:	e000      	b.n	8002f18 <HAL_CAN_IRQHandler+0x336>
            break;
 8002f16:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699a      	ldr	r2, [r3, #24]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f26:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f868 	bl	8003018 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f48:	bf00      	nop
 8002f4a:	3728      	adds	r7, #40	; 0x28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003048:	4013      	ands	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305e:	4a04      	ldr	r2, [pc, #16]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	60d3      	str	r3, [r2, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <__NVIC_GetPriorityGrouping+0x18>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f003 0307 	and.w	r3, r3, #7
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	db0b      	blt.n	80030ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	f003 021f 	and.w	r2, r3, #31
 80030a8:	4907      	ldr	r1, [pc, #28]	; (80030c8 <__NVIC_EnableIRQ+0x38>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	2001      	movs	r0, #1
 80030b2:	fa00 f202 	lsl.w	r2, r0, r2
 80030b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	e000e100 	.word	0xe000e100

080030cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	6039      	str	r1, [r7, #0]
 80030d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	db0a      	blt.n	80030f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	490c      	ldr	r1, [pc, #48]	; (8003118 <__NVIC_SetPriority+0x4c>)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	0112      	lsls	r2, r2, #4
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	440b      	add	r3, r1
 80030f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030f4:	e00a      	b.n	800310c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4908      	ldr	r1, [pc, #32]	; (800311c <__NVIC_SetPriority+0x50>)
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	3b04      	subs	r3, #4
 8003104:	0112      	lsls	r2, r2, #4
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	440b      	add	r3, r1
 800310a:	761a      	strb	r2, [r3, #24]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000e100 	.word	0xe000e100
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003120:	b480      	push	{r7}
 8003122:	b089      	sub	sp, #36	; 0x24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f1c3 0307 	rsb	r3, r3, #7
 800313a:	2b04      	cmp	r3, #4
 800313c:	bf28      	it	cs
 800313e:	2304      	movcs	r3, #4
 8003140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3304      	adds	r3, #4
 8003146:	2b06      	cmp	r3, #6
 8003148:	d902      	bls.n	8003150 <NVIC_EncodePriority+0x30>
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3b03      	subs	r3, #3
 800314e:	e000      	b.n	8003152 <NVIC_EncodePriority+0x32>
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43da      	mvns	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	401a      	ands	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003168:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	43d9      	mvns	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003178:	4313      	orrs	r3, r2
         );
}
 800317a:	4618      	mov	r0, r3
 800317c:	3724      	adds	r7, #36	; 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3b01      	subs	r3, #1
 8003194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003198:	d301      	bcc.n	800319e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800319a:	2301      	movs	r3, #1
 800319c:	e00f      	b.n	80031be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800319e:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <SysTick_Config+0x40>)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031a6:	210f      	movs	r1, #15
 80031a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031ac:	f7ff ff8e 	bl	80030cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <SysTick_Config+0x40>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031b6:	4b04      	ldr	r3, [pc, #16]	; (80031c8 <SysTick_Config+0x40>)
 80031b8:	2207      	movs	r2, #7
 80031ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	e000e010 	.word	0xe000e010

080031cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff ff29 	bl	800302c <__NVIC_SetPriorityGrouping>
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	4603      	mov	r3, r0
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031f4:	f7ff ff3e 	bl	8003074 <__NVIC_GetPriorityGrouping>
 80031f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	6978      	ldr	r0, [r7, #20]
 8003200:	f7ff ff8e 	bl	8003120 <NVIC_EncodePriority>
 8003204:	4602      	mov	r2, r0
 8003206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800320a:	4611      	mov	r1, r2
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff5d 	bl	80030cc <__NVIC_SetPriority>
}
 8003212:	bf00      	nop
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	4603      	mov	r3, r0
 8003222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff31 	bl	8003090 <__NVIC_EnableIRQ>
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff ffa2 	bl	8003188 <SysTick_Config>
 8003244:	4603      	mov	r3, r0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800325c:	f7fe ffe0 	bl	8002220 <HAL_GetTick>
 8003260:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d008      	beq.n	8003280 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2280      	movs	r2, #128	; 0x80
 8003272:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e052      	b.n	8003326 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0216 	bic.w	r2, r2, #22
 800328e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800329e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d103      	bne.n	80032b0 <HAL_DMA_Abort+0x62>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0208 	bic.w	r2, r2, #8
 80032be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d0:	e013      	b.n	80032fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032d2:	f7fe ffa5 	bl	8002220 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b05      	cmp	r3, #5
 80032de:	d90c      	bls.n	80032fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2203      	movs	r2, #3
 80032ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e015      	b.n	8003326 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e4      	bne.n	80032d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330c:	223f      	movs	r2, #63	; 0x3f
 800330e:	409a      	lsls	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d004      	beq.n	800334c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2280      	movs	r2, #128	; 0x80
 8003346:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e00c      	b.n	8003366 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2205      	movs	r2, #5
 8003350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0201 	bic.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003374:	b480      	push	{r7}
 8003376:	b089      	sub	sp, #36	; 0x24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003382:	2300      	movs	r3, #0
 8003384:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003386:	2300      	movs	r3, #0
 8003388:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	e165      	b.n	800365c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003390:	2201      	movs	r2, #1
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4013      	ands	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	f040 8154 	bne.w	8003656 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d005      	beq.n	80033c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d130      	bne.n	8003428 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	2203      	movs	r2, #3
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4013      	ands	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033fc:	2201      	movs	r2, #1
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	091b      	lsrs	r3, r3, #4
 8003412:	f003 0201 	and.w	r2, r3, #1
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4313      	orrs	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	2b03      	cmp	r3, #3
 8003432:	d017      	beq.n	8003464 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	2203      	movs	r2, #3
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4013      	ands	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4313      	orrs	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d123      	bne.n	80034b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	08da      	lsrs	r2, r3, #3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3208      	adds	r2, #8
 8003478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800347c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	220f      	movs	r2, #15
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	08da      	lsrs	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3208      	adds	r2, #8
 80034b2:	69b9      	ldr	r1, [r7, #24]
 80034b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	2203      	movs	r2, #3
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 0203 	and.w	r2, r3, #3
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 80ae 	beq.w	8003656 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	4b5d      	ldr	r3, [pc, #372]	; (8003674 <HAL_GPIO_Init+0x300>)
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	4a5c      	ldr	r2, [pc, #368]	; (8003674 <HAL_GPIO_Init+0x300>)
 8003504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003508:	6453      	str	r3, [r2, #68]	; 0x44
 800350a:	4b5a      	ldr	r3, [pc, #360]	; (8003674 <HAL_GPIO_Init+0x300>)
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003516:	4a58      	ldr	r2, [pc, #352]	; (8003678 <HAL_GPIO_Init+0x304>)
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	089b      	lsrs	r3, r3, #2
 800351c:	3302      	adds	r3, #2
 800351e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003522:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	220f      	movs	r2, #15
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	43db      	mvns	r3, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4013      	ands	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a4f      	ldr	r2, [pc, #316]	; (800367c <HAL_GPIO_Init+0x308>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d025      	beq.n	800358e <HAL_GPIO_Init+0x21a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a4e      	ldr	r2, [pc, #312]	; (8003680 <HAL_GPIO_Init+0x30c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d01f      	beq.n	800358a <HAL_GPIO_Init+0x216>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a4d      	ldr	r2, [pc, #308]	; (8003684 <HAL_GPIO_Init+0x310>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d019      	beq.n	8003586 <HAL_GPIO_Init+0x212>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a4c      	ldr	r2, [pc, #304]	; (8003688 <HAL_GPIO_Init+0x314>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <HAL_GPIO_Init+0x20e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a4b      	ldr	r2, [pc, #300]	; (800368c <HAL_GPIO_Init+0x318>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00d      	beq.n	800357e <HAL_GPIO_Init+0x20a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a4a      	ldr	r2, [pc, #296]	; (8003690 <HAL_GPIO_Init+0x31c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d007      	beq.n	800357a <HAL_GPIO_Init+0x206>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a49      	ldr	r2, [pc, #292]	; (8003694 <HAL_GPIO_Init+0x320>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d101      	bne.n	8003576 <HAL_GPIO_Init+0x202>
 8003572:	2306      	movs	r3, #6
 8003574:	e00c      	b.n	8003590 <HAL_GPIO_Init+0x21c>
 8003576:	2307      	movs	r3, #7
 8003578:	e00a      	b.n	8003590 <HAL_GPIO_Init+0x21c>
 800357a:	2305      	movs	r3, #5
 800357c:	e008      	b.n	8003590 <HAL_GPIO_Init+0x21c>
 800357e:	2304      	movs	r3, #4
 8003580:	e006      	b.n	8003590 <HAL_GPIO_Init+0x21c>
 8003582:	2303      	movs	r3, #3
 8003584:	e004      	b.n	8003590 <HAL_GPIO_Init+0x21c>
 8003586:	2302      	movs	r3, #2
 8003588:	e002      	b.n	8003590 <HAL_GPIO_Init+0x21c>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <HAL_GPIO_Init+0x21c>
 800358e:	2300      	movs	r3, #0
 8003590:	69fa      	ldr	r2, [r7, #28]
 8003592:	f002 0203 	and.w	r2, r2, #3
 8003596:	0092      	lsls	r2, r2, #2
 8003598:	4093      	lsls	r3, r2
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4313      	orrs	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035a0:	4935      	ldr	r1, [pc, #212]	; (8003678 <HAL_GPIO_Init+0x304>)
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	089b      	lsrs	r3, r3, #2
 80035a6:	3302      	adds	r3, #2
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ae:	4b3a      	ldr	r3, [pc, #232]	; (8003698 <HAL_GPIO_Init+0x324>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	43db      	mvns	r3, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4013      	ands	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035d2:	4a31      	ldr	r2, [pc, #196]	; (8003698 <HAL_GPIO_Init+0x324>)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035d8:	4b2f      	ldr	r3, [pc, #188]	; (8003698 <HAL_GPIO_Init+0x324>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	43db      	mvns	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035fc:	4a26      	ldr	r2, [pc, #152]	; (8003698 <HAL_GPIO_Init+0x324>)
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003602:	4b25      	ldr	r3, [pc, #148]	; (8003698 <HAL_GPIO_Init+0x324>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	43db      	mvns	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4013      	ands	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003626:	4a1c      	ldr	r2, [pc, #112]	; (8003698 <HAL_GPIO_Init+0x324>)
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800362c:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <HAL_GPIO_Init+0x324>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003650:	4a11      	ldr	r2, [pc, #68]	; (8003698 <HAL_GPIO_Init+0x324>)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	3301      	adds	r3, #1
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	2b0f      	cmp	r3, #15
 8003660:	f67f ae96 	bls.w	8003390 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003664:	bf00      	nop
 8003666:	bf00      	nop
 8003668:	3724      	adds	r7, #36	; 0x24
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800
 8003678:	40013800 	.word	0x40013800
 800367c:	40020000 	.word	0x40020000
 8003680:	40020400 	.word	0x40020400
 8003684:	40020800 	.word	0x40020800
 8003688:	40020c00 	.word	0x40020c00
 800368c:	40021000 	.word	0x40021000
 8003690:	40021400 	.word	0x40021400
 8003694:	40021800 	.word	0x40021800
 8003698:	40013c00 	.word	0x40013c00

0800369c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	807b      	strh	r3, [r7, #2]
 80036a8:	4613      	mov	r3, r2
 80036aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036ac:	787b      	ldrb	r3, [r7, #1]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036b2:	887a      	ldrh	r2, [r7, #2]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036b8:	e003      	b.n	80036c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036ba:	887b      	ldrh	r3, [r7, #2]
 80036bc:	041a      	lsls	r2, r3, #16
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	619a      	str	r2, [r3, #24]
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0cc      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036e4:	4b68      	ldr	r3, [pc, #416]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 030f 	and.w	r3, r3, #15
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d90c      	bls.n	800370c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b65      	ldr	r3, [pc, #404]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fa:	4b63      	ldr	r3, [pc, #396]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0b8      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d020      	beq.n	800375a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003724:	4b59      	ldr	r3, [pc, #356]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4a58      	ldr	r2, [pc, #352]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800372e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800373c:	4b53      	ldr	r3, [pc, #332]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	4a52      	ldr	r2, [pc, #328]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003748:	4b50      	ldr	r3, [pc, #320]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	494d      	ldr	r1, [pc, #308]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d044      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376e:	4b47      	ldr	r3, [pc, #284]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d119      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e07f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d003      	beq.n	800378e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800378a:	2b03      	cmp	r3, #3
 800378c:	d107      	bne.n	800379e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378e:	4b3f      	ldr	r3, [pc, #252]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e06f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379e:	4b3b      	ldr	r3, [pc, #236]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e067      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ae:	4b37      	ldr	r3, [pc, #220]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f023 0203 	bic.w	r2, r3, #3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4934      	ldr	r1, [pc, #208]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037c0:	f7fe fd2e 	bl	8002220 <HAL_GetTick>
 80037c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c6:	e00a      	b.n	80037de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c8:	f7fe fd2a 	bl	8002220 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e04f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037de:	4b2b      	ldr	r3, [pc, #172]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 020c 	and.w	r2, r3, #12
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d1eb      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037f0:	4b25      	ldr	r3, [pc, #148]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 030f 	and.w	r3, r3, #15
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d20c      	bcs.n	8003818 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fe:	4b22      	ldr	r3, [pc, #136]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b20      	ldr	r3, [pc, #128]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e032      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003824:	4b19      	ldr	r3, [pc, #100]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4916      	ldr	r1, [pc, #88]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d009      	beq.n	8003856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003842:	4b12      	ldr	r3, [pc, #72]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	490e      	ldr	r1, [pc, #56]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	4313      	orrs	r3, r2
 8003854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003856:	f000 f855 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 800385a:	4602      	mov	r2, r0
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	490a      	ldr	r1, [pc, #40]	; (8003890 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	5ccb      	ldrb	r3, [r1, r3]
 800386a:	fa22 f303 	lsr.w	r3, r2, r3
 800386e:	4a09      	ldr	r2, [pc, #36]	; (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003872:	4b09      	ldr	r3, [pc, #36]	; (8003898 <HAL_RCC_ClockConfig+0x1c8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe fc8e 	bl	8002198 <HAL_InitTick>

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40023c00 	.word	0x40023c00
 800388c:	40023800 	.word	0x40023800
 8003890:	0800810c 	.word	0x0800810c
 8003894:	20000000 	.word	0x20000000
 8003898:	20000004 	.word	0x20000004

0800389c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a0:	4b03      	ldr	r3, [pc, #12]	; (80038b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038a2:	681b      	ldr	r3, [r3, #0]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	20000000 	.word	0x20000000

080038b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038b8:	f7ff fff0 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	0a9b      	lsrs	r3, r3, #10
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4903      	ldr	r1, [pc, #12]	; (80038d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40023800 	.word	0x40023800
 80038d8:	0800811c 	.word	0x0800811c

080038dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038e0:	f7ff ffdc 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038e4:	4602      	mov	r2, r0
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	0b5b      	lsrs	r3, r3, #13
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	4903      	ldr	r1, [pc, #12]	; (8003900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038f2:	5ccb      	ldrb	r3, [r1, r3]
 80038f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40023800 	.word	0x40023800
 8003900:	0800811c 	.word	0x0800811c

08003904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003908:	b0ae      	sub	sp, #184	; 0xb8
 800390a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800392a:	4bcb      	ldr	r3, [pc, #812]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x354>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b0c      	cmp	r3, #12
 8003934:	f200 8206 	bhi.w	8003d44 <HAL_RCC_GetSysClockFreq+0x440>
 8003938:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <HAL_RCC_GetSysClockFreq+0x3c>)
 800393a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393e:	bf00      	nop
 8003940:	08003975 	.word	0x08003975
 8003944:	08003d45 	.word	0x08003d45
 8003948:	08003d45 	.word	0x08003d45
 800394c:	08003d45 	.word	0x08003d45
 8003950:	0800397d 	.word	0x0800397d
 8003954:	08003d45 	.word	0x08003d45
 8003958:	08003d45 	.word	0x08003d45
 800395c:	08003d45 	.word	0x08003d45
 8003960:	08003985 	.word	0x08003985
 8003964:	08003d45 	.word	0x08003d45
 8003968:	08003d45 	.word	0x08003d45
 800396c:	08003d45 	.word	0x08003d45
 8003970:	08003b75 	.word	0x08003b75
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003974:	4bb9      	ldr	r3, [pc, #740]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x358>)
 8003976:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800397a:	e1e7      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800397c:	4bb8      	ldr	r3, [pc, #736]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x35c>)
 800397e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003982:	e1e3      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003984:	4bb4      	ldr	r3, [pc, #720]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800398c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003990:	4bb1      	ldr	r3, [pc, #708]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d071      	beq.n	8003a80 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800399c:	4bae      	ldr	r3, [pc, #696]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x354>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	099b      	lsrs	r3, r3, #6
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039a8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80039ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039b8:	2300      	movs	r3, #0
 80039ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80039be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039c2:	4622      	mov	r2, r4
 80039c4:	462b      	mov	r3, r5
 80039c6:	f04f 0000 	mov.w	r0, #0
 80039ca:	f04f 0100 	mov.w	r1, #0
 80039ce:	0159      	lsls	r1, r3, #5
 80039d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039d4:	0150      	lsls	r0, r2, #5
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	4621      	mov	r1, r4
 80039dc:	1a51      	subs	r1, r2, r1
 80039de:	6439      	str	r1, [r7, #64]	; 0x40
 80039e0:	4629      	mov	r1, r5
 80039e2:	eb63 0301 	sbc.w	r3, r3, r1
 80039e6:	647b      	str	r3, [r7, #68]	; 0x44
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80039f4:	4649      	mov	r1, r9
 80039f6:	018b      	lsls	r3, r1, #6
 80039f8:	4641      	mov	r1, r8
 80039fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039fe:	4641      	mov	r1, r8
 8003a00:	018a      	lsls	r2, r1, #6
 8003a02:	4641      	mov	r1, r8
 8003a04:	1a51      	subs	r1, r2, r1
 8003a06:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a08:	4649      	mov	r1, r9
 8003a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003a1c:	4649      	mov	r1, r9
 8003a1e:	00cb      	lsls	r3, r1, #3
 8003a20:	4641      	mov	r1, r8
 8003a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a26:	4641      	mov	r1, r8
 8003a28:	00ca      	lsls	r2, r1, #3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4603      	mov	r3, r0
 8003a30:	4622      	mov	r2, r4
 8003a32:	189b      	adds	r3, r3, r2
 8003a34:	633b      	str	r3, [r7, #48]	; 0x30
 8003a36:	462b      	mov	r3, r5
 8003a38:	460a      	mov	r2, r1
 8003a3a:	eb42 0303 	adc.w	r3, r2, r3
 8003a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a4c:	4629      	mov	r1, r5
 8003a4e:	024b      	lsls	r3, r1, #9
 8003a50:	4621      	mov	r1, r4
 8003a52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a56:	4621      	mov	r1, r4
 8003a58:	024a      	lsls	r2, r1, #9
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a62:	2200      	movs	r2, #0
 8003a64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a6c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003a70:	f7fd f8ba 	bl	8000be8 <__aeabi_uldivmod>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4613      	mov	r3, r2
 8003a7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a7e:	e067      	b.n	8003b50 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a80:	4b75      	ldr	r3, [pc, #468]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	099b      	lsrs	r3, r3, #6
 8003a86:	2200      	movs	r2, #0
 8003a88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a8c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003a90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a98:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a9e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003aa2:	4622      	mov	r2, r4
 8003aa4:	462b      	mov	r3, r5
 8003aa6:	f04f 0000 	mov.w	r0, #0
 8003aaa:	f04f 0100 	mov.w	r1, #0
 8003aae:	0159      	lsls	r1, r3, #5
 8003ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab4:	0150      	lsls	r0, r2, #5
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4621      	mov	r1, r4
 8003abc:	1a51      	subs	r1, r2, r1
 8003abe:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003ad4:	4649      	mov	r1, r9
 8003ad6:	018b      	lsls	r3, r1, #6
 8003ad8:	4641      	mov	r1, r8
 8003ada:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ade:	4641      	mov	r1, r8
 8003ae0:	018a      	lsls	r2, r1, #6
 8003ae2:	4641      	mov	r1, r8
 8003ae4:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ae8:	4649      	mov	r1, r9
 8003aea:	eb63 0b01 	sbc.w	fp, r3, r1
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003afa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003afe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b02:	4692      	mov	sl, r2
 8003b04:	469b      	mov	fp, r3
 8003b06:	4623      	mov	r3, r4
 8003b08:	eb1a 0303 	adds.w	r3, sl, r3
 8003b0c:	623b      	str	r3, [r7, #32]
 8003b0e:	462b      	mov	r3, r5
 8003b10:	eb4b 0303 	adc.w	r3, fp, r3
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003b22:	4629      	mov	r1, r5
 8003b24:	028b      	lsls	r3, r1, #10
 8003b26:	4621      	mov	r1, r4
 8003b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	028a      	lsls	r2, r1, #10
 8003b30:	4610      	mov	r0, r2
 8003b32:	4619      	mov	r1, r3
 8003b34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b38:	2200      	movs	r2, #0
 8003b3a:	673b      	str	r3, [r7, #112]	; 0x70
 8003b3c:	677a      	str	r2, [r7, #116]	; 0x74
 8003b3e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003b42:	f7fd f851 	bl	8000be8 <__aeabi_uldivmod>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b50:	4b41      	ldr	r3, [pc, #260]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	0c1b      	lsrs	r3, r3, #16
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003b62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b72:	e0eb      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b74:	4b38      	ldr	r3, [pc, #224]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b80:	4b35      	ldr	r3, [pc, #212]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d06b      	beq.n	8003c64 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b8c:	4b32      	ldr	r3, [pc, #200]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	099b      	lsrs	r3, r3, #6
 8003b92:	2200      	movs	r2, #0
 8003b94:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b9e:	663b      	str	r3, [r7, #96]	; 0x60
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	667b      	str	r3, [r7, #100]	; 0x64
 8003ba4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003ba8:	4622      	mov	r2, r4
 8003baa:	462b      	mov	r3, r5
 8003bac:	f04f 0000 	mov.w	r0, #0
 8003bb0:	f04f 0100 	mov.w	r1, #0
 8003bb4:	0159      	lsls	r1, r3, #5
 8003bb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bba:	0150      	lsls	r0, r2, #5
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4621      	mov	r1, r4
 8003bc2:	1a51      	subs	r1, r2, r1
 8003bc4:	61b9      	str	r1, [r7, #24]
 8003bc6:	4629      	mov	r1, r5
 8003bc8:	eb63 0301 	sbc.w	r3, r3, r1
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003bda:	4659      	mov	r1, fp
 8003bdc:	018b      	lsls	r3, r1, #6
 8003bde:	4651      	mov	r1, sl
 8003be0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003be4:	4651      	mov	r1, sl
 8003be6:	018a      	lsls	r2, r1, #6
 8003be8:	4651      	mov	r1, sl
 8003bea:	ebb2 0801 	subs.w	r8, r2, r1
 8003bee:	4659      	mov	r1, fp
 8003bf0:	eb63 0901 	sbc.w	r9, r3, r1
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c08:	4690      	mov	r8, r2
 8003c0a:	4699      	mov	r9, r3
 8003c0c:	4623      	mov	r3, r4
 8003c0e:	eb18 0303 	adds.w	r3, r8, r3
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	462b      	mov	r3, r5
 8003c16:	eb49 0303 	adc.w	r3, r9, r3
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003c28:	4629      	mov	r1, r5
 8003c2a:	024b      	lsls	r3, r1, #9
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c32:	4621      	mov	r1, r4
 8003c34:	024a      	lsls	r2, r1, #9
 8003c36:	4610      	mov	r0, r2
 8003c38:	4619      	mov	r1, r3
 8003c3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c3e:	2200      	movs	r2, #0
 8003c40:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c42:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c44:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c48:	f7fc ffce 	bl	8000be8 <__aeabi_uldivmod>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4613      	mov	r3, r2
 8003c52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c56:	e065      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0x420>
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	00f42400 	.word	0x00f42400
 8003c60:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c64:	4b3d      	ldr	r3, [pc, #244]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x458>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	099b      	lsrs	r3, r3, #6
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	4611      	mov	r1, r2
 8003c70:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c74:	653b      	str	r3, [r7, #80]	; 0x50
 8003c76:	2300      	movs	r3, #0
 8003c78:	657b      	str	r3, [r7, #84]	; 0x54
 8003c7a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003c7e:	4642      	mov	r2, r8
 8003c80:	464b      	mov	r3, r9
 8003c82:	f04f 0000 	mov.w	r0, #0
 8003c86:	f04f 0100 	mov.w	r1, #0
 8003c8a:	0159      	lsls	r1, r3, #5
 8003c8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c90:	0150      	lsls	r0, r2, #5
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	4641      	mov	r1, r8
 8003c98:	1a51      	subs	r1, r2, r1
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	4649      	mov	r1, r9
 8003c9e:	eb63 0301 	sbc.w	r3, r3, r1
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003cb0:	4659      	mov	r1, fp
 8003cb2:	018b      	lsls	r3, r1, #6
 8003cb4:	4651      	mov	r1, sl
 8003cb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cba:	4651      	mov	r1, sl
 8003cbc:	018a      	lsls	r2, r1, #6
 8003cbe:	4651      	mov	r1, sl
 8003cc0:	1a54      	subs	r4, r2, r1
 8003cc2:	4659      	mov	r1, fp
 8003cc4:	eb63 0501 	sbc.w	r5, r3, r1
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	00eb      	lsls	r3, r5, #3
 8003cd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cd6:	00e2      	lsls	r2, r4, #3
 8003cd8:	4614      	mov	r4, r2
 8003cda:	461d      	mov	r5, r3
 8003cdc:	4643      	mov	r3, r8
 8003cde:	18e3      	adds	r3, r4, r3
 8003ce0:	603b      	str	r3, [r7, #0]
 8003ce2:	464b      	mov	r3, r9
 8003ce4:	eb45 0303 	adc.w	r3, r5, r3
 8003ce8:	607b      	str	r3, [r7, #4]
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cf6:	4629      	mov	r1, r5
 8003cf8:	028b      	lsls	r3, r1, #10
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d00:	4621      	mov	r1, r4
 8003d02:	028a      	lsls	r2, r1, #10
 8003d04:	4610      	mov	r0, r2
 8003d06:	4619      	mov	r1, r3
 8003d08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d10:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003d12:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d16:	f7fc ff67 	bl	8000be8 <__aeabi_uldivmod>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4613      	mov	r3, r2
 8003d20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d24:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x458>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	0f1b      	lsrs	r3, r3, #28
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003d32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d42:	e003      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d44:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003d46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	37b8      	adds	r7, #184	; 0xb8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	00f42400 	.word	0x00f42400

08003d64 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e28d      	b.n	8004292 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 8083 	beq.w	8003e8a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d84:	4b94      	ldr	r3, [pc, #592]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 030c 	and.w	r3, r3, #12
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d019      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d90:	4b91      	ldr	r3, [pc, #580]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d106      	bne.n	8003daa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d9c:	4b8e      	ldr	r3, [pc, #568]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003da8:	d00c      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003daa:	4b8b      	ldr	r3, [pc, #556]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003db2:	2b0c      	cmp	r3, #12
 8003db4:	d112      	bne.n	8003ddc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003db6:	4b88      	ldr	r3, [pc, #544]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dc2:	d10b      	bne.n	8003ddc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc4:	4b84      	ldr	r3, [pc, #528]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d05b      	beq.n	8003e88 <HAL_RCC_OscConfig+0x124>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d157      	bne.n	8003e88 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e25a      	b.n	8004292 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de4:	d106      	bne.n	8003df4 <HAL_RCC_OscConfig+0x90>
 8003de6:	4b7c      	ldr	r3, [pc, #496]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a7b      	ldr	r2, [pc, #492]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	e01d      	b.n	8003e30 <HAL_RCC_OscConfig+0xcc>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dfc:	d10c      	bne.n	8003e18 <HAL_RCC_OscConfig+0xb4>
 8003dfe:	4b76      	ldr	r3, [pc, #472]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a75      	ldr	r2, [pc, #468]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	4b73      	ldr	r3, [pc, #460]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a72      	ldr	r2, [pc, #456]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	e00b      	b.n	8003e30 <HAL_RCC_OscConfig+0xcc>
 8003e18:	4b6f      	ldr	r3, [pc, #444]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a6e      	ldr	r2, [pc, #440]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	4b6c      	ldr	r3, [pc, #432]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a6b      	ldr	r2, [pc, #428]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d013      	beq.n	8003e60 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e38:	f7fe f9f2 	bl	8002220 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e40:	f7fe f9ee 	bl	8002220 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b64      	cmp	r3, #100	; 0x64
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e21f      	b.n	8004292 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e52:	4b61      	ldr	r3, [pc, #388]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0f0      	beq.n	8003e40 <HAL_RCC_OscConfig+0xdc>
 8003e5e:	e014      	b.n	8003e8a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fe f9de 	bl	8002220 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e68:	f7fe f9da 	bl	8002220 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b64      	cmp	r3, #100	; 0x64
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e20b      	b.n	8004292 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e7a:	4b57      	ldr	r3, [pc, #348]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f0      	bne.n	8003e68 <HAL_RCC_OscConfig+0x104>
 8003e86:	e000      	b.n	8003e8a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d06f      	beq.n	8003f76 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e96:	4b50      	ldr	r3, [pc, #320]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d017      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ea2:	4b4d      	ldr	r3, [pc, #308]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003eaa:	2b08      	cmp	r3, #8
 8003eac:	d105      	bne.n	8003eba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003eae:	4b4a      	ldr	r3, [pc, #296]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00b      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eba:	4b47      	ldr	r3, [pc, #284]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ec2:	2b0c      	cmp	r3, #12
 8003ec4:	d11c      	bne.n	8003f00 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ec6:	4b44      	ldr	r3, [pc, #272]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d116      	bne.n	8003f00 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed2:	4b41      	ldr	r3, [pc, #260]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d005      	beq.n	8003eea <HAL_RCC_OscConfig+0x186>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d001      	beq.n	8003eea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e1d3      	b.n	8004292 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eea:	4b3b      	ldr	r3, [pc, #236]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	4937      	ldr	r1, [pc, #220]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efe:	e03a      	b.n	8003f76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d020      	beq.n	8003f4a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f08:	4b34      	ldr	r3, [pc, #208]	; (8003fdc <HAL_RCC_OscConfig+0x278>)
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0e:	f7fe f987 	bl	8002220 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f16:	f7fe f983 	bl	8002220 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e1b4      	b.n	8004292 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f28:	4b2b      	ldr	r3, [pc, #172]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0f0      	beq.n	8003f16 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f34:	4b28      	ldr	r3, [pc, #160]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	4925      	ldr	r1, [pc, #148]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	600b      	str	r3, [r1, #0]
 8003f48:	e015      	b.n	8003f76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f4a:	4b24      	ldr	r3, [pc, #144]	; (8003fdc <HAL_RCC_OscConfig+0x278>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fe f966 	bl	8002220 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f58:	f7fe f962 	bl	8002220 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e193      	b.n	8004292 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6a:	4b1b      	ldr	r3, [pc, #108]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f0      	bne.n	8003f58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d036      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d016      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f8a:	4b15      	ldr	r3, [pc, #84]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f90:	f7fe f946 	bl	8002220 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f98:	f7fe f942 	bl	8002220 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e173      	b.n	8004292 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003faa:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCC_OscConfig+0x234>
 8003fb6:	e01b      	b.n	8003ff0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fb8:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fbe:	f7fe f92f 	bl	8002220 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc4:	e00e      	b.n	8003fe4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fc6:	f7fe f92b 	bl	8002220 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d907      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e15c      	b.n	8004292 <HAL_RCC_OscConfig+0x52e>
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	42470000 	.word	0x42470000
 8003fe0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe4:	4b8a      	ldr	r3, [pc, #552]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 8003fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1ea      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 8097 	beq.w	800412c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ffe:	2300      	movs	r3, #0
 8004000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004002:	4b83      	ldr	r3, [pc, #524]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10f      	bne.n	800402e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800400e:	2300      	movs	r3, #0
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	4b7f      	ldr	r3, [pc, #508]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	4a7e      	ldr	r2, [pc, #504]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 8004018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401c:	6413      	str	r3, [r2, #64]	; 0x40
 800401e:	4b7c      	ldr	r3, [pc, #496]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004026:	60bb      	str	r3, [r7, #8]
 8004028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800402a:	2301      	movs	r3, #1
 800402c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402e:	4b79      	ldr	r3, [pc, #484]	; (8004214 <HAL_RCC_OscConfig+0x4b0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004036:	2b00      	cmp	r3, #0
 8004038:	d118      	bne.n	800406c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800403a:	4b76      	ldr	r3, [pc, #472]	; (8004214 <HAL_RCC_OscConfig+0x4b0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a75      	ldr	r2, [pc, #468]	; (8004214 <HAL_RCC_OscConfig+0x4b0>)
 8004040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004046:	f7fe f8eb 	bl	8002220 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800404e:	f7fe f8e7 	bl	8002220 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e118      	b.n	8004292 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004060:	4b6c      	ldr	r3, [pc, #432]	; (8004214 <HAL_RCC_OscConfig+0x4b0>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0f0      	beq.n	800404e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d106      	bne.n	8004082 <HAL_RCC_OscConfig+0x31e>
 8004074:	4b66      	ldr	r3, [pc, #408]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 8004076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004078:	4a65      	ldr	r2, [pc, #404]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	6713      	str	r3, [r2, #112]	; 0x70
 8004080:	e01c      	b.n	80040bc <HAL_RCC_OscConfig+0x358>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2b05      	cmp	r3, #5
 8004088:	d10c      	bne.n	80040a4 <HAL_RCC_OscConfig+0x340>
 800408a:	4b61      	ldr	r3, [pc, #388]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 800408c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408e:	4a60      	ldr	r2, [pc, #384]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 8004090:	f043 0304 	orr.w	r3, r3, #4
 8004094:	6713      	str	r3, [r2, #112]	; 0x70
 8004096:	4b5e      	ldr	r3, [pc, #376]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 8004098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409a:	4a5d      	ldr	r2, [pc, #372]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 800409c:	f043 0301 	orr.w	r3, r3, #1
 80040a0:	6713      	str	r3, [r2, #112]	; 0x70
 80040a2:	e00b      	b.n	80040bc <HAL_RCC_OscConfig+0x358>
 80040a4:	4b5a      	ldr	r3, [pc, #360]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 80040a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a8:	4a59      	ldr	r2, [pc, #356]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 80040aa:	f023 0301 	bic.w	r3, r3, #1
 80040ae:	6713      	str	r3, [r2, #112]	; 0x70
 80040b0:	4b57      	ldr	r3, [pc, #348]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 80040b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b4:	4a56      	ldr	r2, [pc, #344]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 80040b6:	f023 0304 	bic.w	r3, r3, #4
 80040ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d015      	beq.n	80040f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c4:	f7fe f8ac 	bl	8002220 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ca:	e00a      	b.n	80040e2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040cc:	f7fe f8a8 	bl	8002220 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040da:	4293      	cmp	r3, r2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e0d7      	b.n	8004292 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e2:	4b4b      	ldr	r3, [pc, #300]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0ee      	beq.n	80040cc <HAL_RCC_OscConfig+0x368>
 80040ee:	e014      	b.n	800411a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f0:	f7fe f896 	bl	8002220 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f6:	e00a      	b.n	800410e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f8:	f7fe f892 	bl	8002220 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	f241 3288 	movw	r2, #5000	; 0x1388
 8004106:	4293      	cmp	r3, r2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e0c1      	b.n	8004292 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800410e:	4b40      	ldr	r3, [pc, #256]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 8004110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1ee      	bne.n	80040f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800411a:	7dfb      	ldrb	r3, [r7, #23]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d105      	bne.n	800412c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004120:	4b3b      	ldr	r3, [pc, #236]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	4a3a      	ldr	r2, [pc, #232]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 8004126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800412a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 80ad 	beq.w	8004290 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004136:	4b36      	ldr	r3, [pc, #216]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
 800413e:	2b08      	cmp	r3, #8
 8004140:	d060      	beq.n	8004204 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	2b02      	cmp	r3, #2
 8004148:	d145      	bne.n	80041d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414a:	4b33      	ldr	r3, [pc, #204]	; (8004218 <HAL_RCC_OscConfig+0x4b4>)
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004150:	f7fe f866 	bl	8002220 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004158:	f7fe f862 	bl	8002220 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e093      	b.n	8004292 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416a:	4b29      	ldr	r3, [pc, #164]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f0      	bne.n	8004158 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69da      	ldr	r2, [r3, #28]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	019b      	lsls	r3, r3, #6
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	085b      	lsrs	r3, r3, #1
 800418e:	3b01      	subs	r3, #1
 8004190:	041b      	lsls	r3, r3, #16
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	061b      	lsls	r3, r3, #24
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a0:	071b      	lsls	r3, r3, #28
 80041a2:	491b      	ldr	r1, [pc, #108]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041a8:	4b1b      	ldr	r3, [pc, #108]	; (8004218 <HAL_RCC_OscConfig+0x4b4>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ae:	f7fe f837 	bl	8002220 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b6:	f7fe f833 	bl	8002220 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e064      	b.n	8004292 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c8:	4b11      	ldr	r3, [pc, #68]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <HAL_RCC_OscConfig+0x452>
 80041d4:	e05c      	b.n	8004290 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d6:	4b10      	ldr	r3, [pc, #64]	; (8004218 <HAL_RCC_OscConfig+0x4b4>)
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041dc:	f7fe f820 	bl	8002220 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e4:	f7fe f81c 	bl	8002220 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e04d      	b.n	8004292 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f6:	4b06      	ldr	r3, [pc, #24]	; (8004210 <HAL_RCC_OscConfig+0x4ac>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1f0      	bne.n	80041e4 <HAL_RCC_OscConfig+0x480>
 8004202:	e045      	b.n	8004290 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d107      	bne.n	800421c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e040      	b.n	8004292 <HAL_RCC_OscConfig+0x52e>
 8004210:	40023800 	.word	0x40023800
 8004214:	40007000 	.word	0x40007000
 8004218:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800421c:	4b1f      	ldr	r3, [pc, #124]	; (800429c <HAL_RCC_OscConfig+0x538>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d030      	beq.n	800428c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004234:	429a      	cmp	r2, r3
 8004236:	d129      	bne.n	800428c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004242:	429a      	cmp	r2, r3
 8004244:	d122      	bne.n	800428c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800424c:	4013      	ands	r3, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004252:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004254:	4293      	cmp	r3, r2
 8004256:	d119      	bne.n	800428c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004262:	085b      	lsrs	r3, r3, #1
 8004264:	3b01      	subs	r3, #1
 8004266:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004268:	429a      	cmp	r2, r3
 800426a:	d10f      	bne.n	800428c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004278:	429a      	cmp	r2, r3
 800427a:	d107      	bne.n	800428c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004286:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004288:	429a      	cmp	r2, r3
 800428a:	d001      	beq.n	8004290 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e000      	b.n	8004292 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40023800 	.word	0x40023800

080042a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e03f      	b.n	8004332 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fd fdc6 	bl	8001e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2224      	movs	r2, #36	; 0x24
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fddf 	bl	8004ea8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695a      	ldr	r2, [r3, #20]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004308:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004318:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b08a      	sub	sp, #40	; 0x28
 800433e:	af02      	add	r7, sp, #8
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	603b      	str	r3, [r7, #0]
 8004346:	4613      	mov	r3, r2
 8004348:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800434a:	2300      	movs	r3, #0
 800434c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b20      	cmp	r3, #32
 8004358:	d17c      	bne.n	8004454 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <HAL_UART_Transmit+0x2c>
 8004360:	88fb      	ldrh	r3, [r7, #6]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e075      	b.n	8004456 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_UART_Transmit+0x3e>
 8004374:	2302      	movs	r3, #2
 8004376:	e06e      	b.n	8004456 <HAL_UART_Transmit+0x11c>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2221      	movs	r2, #33	; 0x21
 800438a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800438e:	f7fd ff47 	bl	8002220 <HAL_GetTick>
 8004392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	88fa      	ldrh	r2, [r7, #6]
 8004398:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	88fa      	ldrh	r2, [r7, #6]
 800439e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a8:	d108      	bne.n	80043bc <HAL_UART_Transmit+0x82>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d104      	bne.n	80043bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043b2:	2300      	movs	r3, #0
 80043b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	61bb      	str	r3, [r7, #24]
 80043ba:	e003      	b.n	80043c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043c0:	2300      	movs	r3, #0
 80043c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043cc:	e02a      	b.n	8004424 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2200      	movs	r2, #0
 80043d6:	2180      	movs	r1, #128	; 0x80
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 fb1f 	bl	8004a1c <UART_WaitOnFlagUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e036      	b.n	8004456 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10b      	bne.n	8004406 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	3302      	adds	r3, #2
 8004402:	61bb      	str	r3, [r7, #24]
 8004404:	e007      	b.n	8004416 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	781a      	ldrb	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	3301      	adds	r3, #1
 8004414:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1cf      	bne.n	80043ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2200      	movs	r2, #0
 8004436:	2140      	movs	r1, #64	; 0x40
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 faef 	bl	8004a1c <UART_WaitOnFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e006      	b.n	8004456 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	e000      	b.n	8004456 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004454:	2302      	movs	r3, #2
  }
}
 8004456:	4618      	mov	r0, r3
 8004458:	3720      	adds	r7, #32
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b084      	sub	sp, #16
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	4613      	mov	r3, r2
 800446a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b20      	cmp	r3, #32
 8004476:	d11d      	bne.n	80044b4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <HAL_UART_Receive_IT+0x26>
 800447e:	88fb      	ldrh	r3, [r7, #6]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e016      	b.n	80044b6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_UART_Receive_IT+0x38>
 8004492:	2302      	movs	r3, #2
 8004494:	e00f      	b.n	80044b6 <HAL_UART_Receive_IT+0x58>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	461a      	mov	r2, r3
 80044a8:	68b9      	ldr	r1, [r7, #8]
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 fb24 	bl	8004af8 <UART_Start_Receive_IT>
 80044b0:	4603      	mov	r3, r0
 80044b2:	e000      	b.n	80044b6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80044b4:	2302      	movs	r3, #2
  }
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b0ba      	sub	sp, #232	; 0xe8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80044fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10f      	bne.n	8004526 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b00      	cmp	r3, #0
 8004510:	d009      	beq.n	8004526 <HAL_UART_IRQHandler+0x66>
 8004512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 fc07 	bl	8004d32 <UART_Receive_IT>
      return;
 8004524:	e256      	b.n	80049d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004526:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 80de 	beq.w	80046ec <HAL_UART_IRQHandler+0x22c>
 8004530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d106      	bne.n	800454a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800453c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004540:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 80d1 	beq.w	80046ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800454a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00b      	beq.n	800456e <HAL_UART_IRQHandler+0xae>
 8004556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800455a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	f043 0201 	orr.w	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800456e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00b      	beq.n	8004592 <HAL_UART_IRQHandler+0xd2>
 800457a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d005      	beq.n	8004592 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	f043 0202 	orr.w	r2, r3, #2
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <HAL_UART_IRQHandler+0xf6>
 800459e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f043 0204 	orr.w	r2, r3, #4
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d011      	beq.n	80045e6 <HAL_UART_IRQHandler+0x126>
 80045c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d105      	bne.n	80045da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d005      	beq.n	80045e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	f043 0208 	orr.w	r2, r3, #8
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 81ed 	beq.w	80049ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f4:	f003 0320 	and.w	r3, r3, #32
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <HAL_UART_IRQHandler+0x14e>
 80045fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004600:	f003 0320 	and.w	r3, r3, #32
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fb92 	bl	8004d32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004618:	2b40      	cmp	r3, #64	; 0x40
 800461a:	bf0c      	ite	eq
 800461c:	2301      	moveq	r3, #1
 800461e:	2300      	movne	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d103      	bne.n	800463a <HAL_UART_IRQHandler+0x17a>
 8004632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004636:	2b00      	cmp	r3, #0
 8004638:	d04f      	beq.n	80046da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 fa9a 	bl	8004b74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464a:	2b40      	cmp	r3, #64	; 0x40
 800464c:	d141      	bne.n	80046d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3314      	adds	r3, #20
 8004654:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004658:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800465c:	e853 3f00 	ldrex	r3, [r3]
 8004660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800466c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3314      	adds	r3, #20
 8004676:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800467a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800467e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004686:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800468a:	e841 2300 	strex	r3, r2, [r1]
 800468e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1d9      	bne.n	800464e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d013      	beq.n	80046ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a6:	4a7d      	ldr	r2, [pc, #500]	; (800489c <HAL_UART_IRQHandler+0x3dc>)
 80046a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fe fe3d 	bl	800332e <HAL_DMA_Abort_IT>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d016      	beq.n	80046e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046c4:	4610      	mov	r0, r2
 80046c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c8:	e00e      	b.n	80046e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f990 	bl	80049f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d0:	e00a      	b.n	80046e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f98c 	bl	80049f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d8:	e006      	b.n	80046e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f988 	bl	80049f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80046e6:	e170      	b.n	80049ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e8:	bf00      	nop
    return;
 80046ea:	e16e      	b.n	80049ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	f040 814a 	bne.w	800498a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 8143 	beq.w	800498a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 813c 	beq.w	800498a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004712:	2300      	movs	r3, #0
 8004714:	60bb      	str	r3, [r7, #8]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	60bb      	str	r3, [r7, #8]
 8004726:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004732:	2b40      	cmp	r3, #64	; 0x40
 8004734:	f040 80b4 	bne.w	80048a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004744:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 8140 	beq.w	80049ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004752:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004756:	429a      	cmp	r2, r3
 8004758:	f080 8139 	bcs.w	80049ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004762:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800476e:	f000 8088 	beq.w	8004882 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	330c      	adds	r3, #12
 8004778:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004780:	e853 3f00 	ldrex	r3, [r3]
 8004784:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004788:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800478c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004790:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	330c      	adds	r3, #12
 800479a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800479e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047ae:	e841 2300 	strex	r3, r2, [r1]
 80047b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1d9      	bne.n	8004772 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	3314      	adds	r3, #20
 80047c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047d0:	f023 0301 	bic.w	r3, r3, #1
 80047d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3314      	adds	r3, #20
 80047de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047ee:	e841 2300 	strex	r3, r2, [r1]
 80047f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1e1      	bne.n	80047be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3314      	adds	r3, #20
 8004800:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004804:	e853 3f00 	ldrex	r3, [r3]
 8004808:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800480a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800480c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004810:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3314      	adds	r3, #20
 800481a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800481e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004820:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004822:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004824:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004826:	e841 2300 	strex	r3, r2, [r1]
 800482a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800482c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1e3      	bne.n	80047fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	330c      	adds	r3, #12
 8004846:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800484a:	e853 3f00 	ldrex	r3, [r3]
 800484e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004852:	f023 0310 	bic.w	r3, r3, #16
 8004856:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	330c      	adds	r3, #12
 8004860:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004864:	65ba      	str	r2, [r7, #88]	; 0x58
 8004866:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004868:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800486a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800486c:	e841 2300 	strex	r3, r2, [r1]
 8004870:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e3      	bne.n	8004840 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487c:	4618      	mov	r0, r3
 800487e:	f7fe fce6 	bl	800324e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800488a:	b29b      	uxth	r3, r3
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	b29b      	uxth	r3, r3
 8004890:	4619      	mov	r1, r3
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f8b6 	bl	8004a04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004898:	e099      	b.n	80049ce <HAL_UART_IRQHandler+0x50e>
 800489a:	bf00      	nop
 800489c:	08004c3b 	.word	0x08004c3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 808b 	beq.w	80049d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80048bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 8086 	beq.w	80049d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	330c      	adds	r3, #12
 80048cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d0:	e853 3f00 	ldrex	r3, [r3]
 80048d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	330c      	adds	r3, #12
 80048e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80048ea:	647a      	str	r2, [r7, #68]	; 0x44
 80048ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1e3      	bne.n	80048c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3314      	adds	r3, #20
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	e853 3f00 	ldrex	r3, [r3]
 800490c:	623b      	str	r3, [r7, #32]
   return(result);
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	f023 0301 	bic.w	r3, r3, #1
 8004914:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3314      	adds	r3, #20
 800491e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004922:	633a      	str	r2, [r7, #48]	; 0x30
 8004924:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1e3      	bne.n	80048fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	330c      	adds	r3, #12
 800494a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	e853 3f00 	ldrex	r3, [r3]
 8004952:	60fb      	str	r3, [r7, #12]
   return(result);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0310 	bic.w	r3, r3, #16
 800495a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	330c      	adds	r3, #12
 8004964:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004968:	61fa      	str	r2, [r7, #28]
 800496a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496c:	69b9      	ldr	r1, [r7, #24]
 800496e:	69fa      	ldr	r2, [r7, #28]
 8004970:	e841 2300 	strex	r3, r2, [r1]
 8004974:	617b      	str	r3, [r7, #20]
   return(result);
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1e3      	bne.n	8004944 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800497c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004980:	4619      	mov	r1, r3
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f83e 	bl	8004a04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004988:	e023      	b.n	80049d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800498a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800498e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <HAL_UART_IRQHandler+0x4ea>
 8004996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800499a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f95d 	bl	8004c62 <UART_Transmit_IT>
    return;
 80049a8:	e014      	b.n	80049d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00e      	beq.n	80049d4 <HAL_UART_IRQHandler+0x514>
 80049b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d008      	beq.n	80049d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f99d 	bl	8004d02 <UART_EndTransmit_IT>
    return;
 80049c8:	e004      	b.n	80049d4 <HAL_UART_IRQHandler+0x514>
    return;
 80049ca:	bf00      	nop
 80049cc:	e002      	b.n	80049d4 <HAL_UART_IRQHandler+0x514>
      return;
 80049ce:	bf00      	nop
 80049d0:	e000      	b.n	80049d4 <HAL_UART_IRQHandler+0x514>
      return;
 80049d2:	bf00      	nop
  }
}
 80049d4:	37e8      	adds	r7, #232	; 0xe8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop

080049dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b090      	sub	sp, #64	; 0x40
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	603b      	str	r3, [r7, #0]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a2c:	e050      	b.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a34:	d04c      	beq.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d007      	beq.n	8004a4c <UART_WaitOnFlagUntilTimeout+0x30>
 8004a3c:	f7fd fbf0 	bl	8002220 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d241      	bcs.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	330c      	adds	r3, #12
 8004a52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	330c      	adds	r3, #12
 8004a6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a6c:	637a      	str	r2, [r7, #52]	; 0x34
 8004a6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e5      	bne.n	8004a4c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3314      	adds	r3, #20
 8004a86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
 8004a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	f023 0301 	bic.w	r3, r3, #1
 8004a96:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3314      	adds	r3, #20
 8004a9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004aa0:	623a      	str	r2, [r7, #32]
 8004aa2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	69f9      	ldr	r1, [r7, #28]
 8004aa6:	6a3a      	ldr	r2, [r7, #32]
 8004aa8:	e841 2300 	strex	r3, r2, [r1]
 8004aac:	61bb      	str	r3, [r7, #24]
   return(result);
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e5      	bne.n	8004a80 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e00f      	b.n	8004af0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	bf0c      	ite	eq
 8004ae0:	2301      	moveq	r3, #1
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d09f      	beq.n	8004a2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3740      	adds	r7, #64	; 0x40
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	4613      	mov	r3, r2
 8004b04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	88fa      	ldrh	r2, [r7, #6]
 8004b10:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	88fa      	ldrh	r2, [r7, #6]
 8004b16:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2222      	movs	r2, #34	; 0x22
 8004b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d007      	beq.n	8004b46 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b44:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	695a      	ldr	r2, [r3, #20]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f042 0201 	orr.w	r2, r2, #1
 8004b54:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f042 0220 	orr.w	r2, r2, #32
 8004b64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b095      	sub	sp, #84	; 0x54
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	330c      	adds	r3, #12
 8004b82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	330c      	adds	r3, #12
 8004b9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b9c:	643a      	str	r2, [r7, #64]	; 0x40
 8004b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ba2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e5      	bne.n	8004b7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3314      	adds	r3, #20
 8004bb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	e853 3f00 	ldrex	r3, [r3]
 8004bbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	f023 0301 	bic.w	r3, r3, #1
 8004bc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3314      	adds	r3, #20
 8004bce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bd8:	e841 2300 	strex	r3, r2, [r1]
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e5      	bne.n	8004bb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d119      	bne.n	8004c20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	330c      	adds	r3, #12
 8004bf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f023 0310 	bic.w	r3, r3, #16
 8004c02:	647b      	str	r3, [r7, #68]	; 0x44
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	330c      	adds	r3, #12
 8004c0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c0c:	61ba      	str	r2, [r7, #24]
 8004c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c10:	6979      	ldr	r1, [r7, #20]
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	613b      	str	r3, [r7, #16]
   return(result);
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e5      	bne.n	8004bec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c2e:	bf00      	nop
 8004c30:	3754      	adds	r7, #84	; 0x54
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f7ff fecb 	bl	80049f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c5a:	bf00      	nop
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b085      	sub	sp, #20
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b21      	cmp	r3, #33	; 0x21
 8004c74:	d13e      	bne.n	8004cf4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7e:	d114      	bne.n	8004caa <UART_Transmit_IT+0x48>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d110      	bne.n	8004caa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	1c9a      	adds	r2, r3, #2
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	621a      	str	r2, [r3, #32]
 8004ca8:	e008      	b.n	8004cbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	1c59      	adds	r1, r3, #1
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6211      	str	r1, [r2, #32]
 8004cb4:	781a      	ldrb	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10f      	bne.n	8004cf0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	e000      	b.n	8004cf6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cf4:	2302      	movs	r3, #2
  }
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b082      	sub	sp, #8
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7ff fe5a 	bl	80049dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b08c      	sub	sp, #48	; 0x30
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b22      	cmp	r3, #34	; 0x22
 8004d44:	f040 80ab 	bne.w	8004e9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d50:	d117      	bne.n	8004d82 <UART_Receive_IT+0x50>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d113      	bne.n	8004d82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7a:	1c9a      	adds	r2, r3, #2
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	629a      	str	r2, [r3, #40]	; 0x28
 8004d80:	e026      	b.n	8004dd0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d94:	d007      	beq.n	8004da6 <UART_Receive_IT+0x74>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10a      	bne.n	8004db4 <UART_Receive_IT+0x82>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	701a      	strb	r2, [r3, #0]
 8004db2:	e008      	b.n	8004dc6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	4619      	mov	r1, r3
 8004dde:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d15a      	bne.n	8004e9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0220 	bic.w	r2, r2, #32
 8004df2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695a      	ldr	r2, [r3, #20]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0201 	bic.w	r2, r2, #1
 8004e12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d135      	bne.n	8004e90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	330c      	adds	r3, #12
 8004e30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	e853 3f00 	ldrex	r3, [r3]
 8004e38:	613b      	str	r3, [r7, #16]
   return(result);
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f023 0310 	bic.w	r3, r3, #16
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	330c      	adds	r3, #12
 8004e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4a:	623a      	str	r2, [r7, #32]
 8004e4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4e:	69f9      	ldr	r1, [r7, #28]
 8004e50:	6a3a      	ldr	r2, [r7, #32]
 8004e52:	e841 2300 	strex	r3, r2, [r1]
 8004e56:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1e5      	bne.n	8004e2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0310 	and.w	r3, r3, #16
 8004e68:	2b10      	cmp	r3, #16
 8004e6a:	d10a      	bne.n	8004e82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e86:	4619      	mov	r1, r3
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7ff fdbb 	bl	8004a04 <HAL_UARTEx_RxEventCallback>
 8004e8e:	e002      	b.n	8004e96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7fc fe67 	bl	8001b64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	e002      	b.n	8004ea0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e000      	b.n	8004ea0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004e9e:	2302      	movs	r3, #2
  }
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3730      	adds	r7, #48	; 0x30
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eac:	b0c0      	sub	sp, #256	; 0x100
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec4:	68d9      	ldr	r1, [r3, #12]
 8004ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	ea40 0301 	orr.w	r3, r0, r1
 8004ed0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f00:	f021 010c 	bic.w	r1, r1, #12
 8004f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f0e:	430b      	orrs	r3, r1
 8004f10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f22:	6999      	ldr	r1, [r3, #24]
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	ea40 0301 	orr.w	r3, r0, r1
 8004f2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	4b8f      	ldr	r3, [pc, #572]	; (8005174 <UART_SetConfig+0x2cc>)
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d005      	beq.n	8004f48 <UART_SetConfig+0xa0>
 8004f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	4b8d      	ldr	r3, [pc, #564]	; (8005178 <UART_SetConfig+0x2d0>)
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d104      	bne.n	8004f52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f48:	f7fe fcc8 	bl	80038dc <HAL_RCC_GetPCLK2Freq>
 8004f4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f50:	e003      	b.n	8004f5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f52:	f7fe fcaf 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 8004f56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f64:	f040 810c 	bne.w	8005180 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f7a:	4622      	mov	r2, r4
 8004f7c:	462b      	mov	r3, r5
 8004f7e:	1891      	adds	r1, r2, r2
 8004f80:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f82:	415b      	adcs	r3, r3
 8004f84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f8a:	4621      	mov	r1, r4
 8004f8c:	eb12 0801 	adds.w	r8, r2, r1
 8004f90:	4629      	mov	r1, r5
 8004f92:	eb43 0901 	adc.w	r9, r3, r1
 8004f96:	f04f 0200 	mov.w	r2, #0
 8004f9a:	f04f 0300 	mov.w	r3, #0
 8004f9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004faa:	4690      	mov	r8, r2
 8004fac:	4699      	mov	r9, r3
 8004fae:	4623      	mov	r3, r4
 8004fb0:	eb18 0303 	adds.w	r3, r8, r3
 8004fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004fb8:	462b      	mov	r3, r5
 8004fba:	eb49 0303 	adc.w	r3, r9, r3
 8004fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004fce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004fd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	18db      	adds	r3, r3, r3
 8004fda:	653b      	str	r3, [r7, #80]	; 0x50
 8004fdc:	4613      	mov	r3, r2
 8004fde:	eb42 0303 	adc.w	r3, r2, r3
 8004fe2:	657b      	str	r3, [r7, #84]	; 0x54
 8004fe4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004fe8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004fec:	f7fb fdfc 	bl	8000be8 <__aeabi_uldivmod>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4b61      	ldr	r3, [pc, #388]	; (800517c <UART_SetConfig+0x2d4>)
 8004ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8004ffa:	095b      	lsrs	r3, r3, #5
 8004ffc:	011c      	lsls	r4, r3, #4
 8004ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005002:	2200      	movs	r2, #0
 8005004:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005008:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800500c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005010:	4642      	mov	r2, r8
 8005012:	464b      	mov	r3, r9
 8005014:	1891      	adds	r1, r2, r2
 8005016:	64b9      	str	r1, [r7, #72]	; 0x48
 8005018:	415b      	adcs	r3, r3
 800501a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800501c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005020:	4641      	mov	r1, r8
 8005022:	eb12 0a01 	adds.w	sl, r2, r1
 8005026:	4649      	mov	r1, r9
 8005028:	eb43 0b01 	adc.w	fp, r3, r1
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005038:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800503c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005040:	4692      	mov	sl, r2
 8005042:	469b      	mov	fp, r3
 8005044:	4643      	mov	r3, r8
 8005046:	eb1a 0303 	adds.w	r3, sl, r3
 800504a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800504e:	464b      	mov	r3, r9
 8005050:	eb4b 0303 	adc.w	r3, fp, r3
 8005054:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005064:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005068:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800506c:	460b      	mov	r3, r1
 800506e:	18db      	adds	r3, r3, r3
 8005070:	643b      	str	r3, [r7, #64]	; 0x40
 8005072:	4613      	mov	r3, r2
 8005074:	eb42 0303 	adc.w	r3, r2, r3
 8005078:	647b      	str	r3, [r7, #68]	; 0x44
 800507a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800507e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005082:	f7fb fdb1 	bl	8000be8 <__aeabi_uldivmod>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	4611      	mov	r1, r2
 800508c:	4b3b      	ldr	r3, [pc, #236]	; (800517c <UART_SetConfig+0x2d4>)
 800508e:	fba3 2301 	umull	r2, r3, r3, r1
 8005092:	095b      	lsrs	r3, r3, #5
 8005094:	2264      	movs	r2, #100	; 0x64
 8005096:	fb02 f303 	mul.w	r3, r2, r3
 800509a:	1acb      	subs	r3, r1, r3
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80050a2:	4b36      	ldr	r3, [pc, #216]	; (800517c <UART_SetConfig+0x2d4>)
 80050a4:	fba3 2302 	umull	r2, r3, r3, r2
 80050a8:	095b      	lsrs	r3, r3, #5
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050b0:	441c      	add	r4, r3
 80050b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80050c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80050c4:	4642      	mov	r2, r8
 80050c6:	464b      	mov	r3, r9
 80050c8:	1891      	adds	r1, r2, r2
 80050ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80050cc:	415b      	adcs	r3, r3
 80050ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050d4:	4641      	mov	r1, r8
 80050d6:	1851      	adds	r1, r2, r1
 80050d8:	6339      	str	r1, [r7, #48]	; 0x30
 80050da:	4649      	mov	r1, r9
 80050dc:	414b      	adcs	r3, r1
 80050de:	637b      	str	r3, [r7, #52]	; 0x34
 80050e0:	f04f 0200 	mov.w	r2, #0
 80050e4:	f04f 0300 	mov.w	r3, #0
 80050e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80050ec:	4659      	mov	r1, fp
 80050ee:	00cb      	lsls	r3, r1, #3
 80050f0:	4651      	mov	r1, sl
 80050f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050f6:	4651      	mov	r1, sl
 80050f8:	00ca      	lsls	r2, r1, #3
 80050fa:	4610      	mov	r0, r2
 80050fc:	4619      	mov	r1, r3
 80050fe:	4603      	mov	r3, r0
 8005100:	4642      	mov	r2, r8
 8005102:	189b      	adds	r3, r3, r2
 8005104:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005108:	464b      	mov	r3, r9
 800510a:	460a      	mov	r2, r1
 800510c:	eb42 0303 	adc.w	r3, r2, r3
 8005110:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005120:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005124:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005128:	460b      	mov	r3, r1
 800512a:	18db      	adds	r3, r3, r3
 800512c:	62bb      	str	r3, [r7, #40]	; 0x28
 800512e:	4613      	mov	r3, r2
 8005130:	eb42 0303 	adc.w	r3, r2, r3
 8005134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005136:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800513a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800513e:	f7fb fd53 	bl	8000be8 <__aeabi_uldivmod>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4b0d      	ldr	r3, [pc, #52]	; (800517c <UART_SetConfig+0x2d4>)
 8005148:	fba3 1302 	umull	r1, r3, r3, r2
 800514c:	095b      	lsrs	r3, r3, #5
 800514e:	2164      	movs	r1, #100	; 0x64
 8005150:	fb01 f303 	mul.w	r3, r1, r3
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	3332      	adds	r3, #50	; 0x32
 800515a:	4a08      	ldr	r2, [pc, #32]	; (800517c <UART_SetConfig+0x2d4>)
 800515c:	fba2 2303 	umull	r2, r3, r2, r3
 8005160:	095b      	lsrs	r3, r3, #5
 8005162:	f003 0207 	and.w	r2, r3, #7
 8005166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4422      	add	r2, r4
 800516e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005170:	e105      	b.n	800537e <UART_SetConfig+0x4d6>
 8005172:	bf00      	nop
 8005174:	40011000 	.word	0x40011000
 8005178:	40011400 	.word	0x40011400
 800517c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005184:	2200      	movs	r2, #0
 8005186:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800518a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800518e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005192:	4642      	mov	r2, r8
 8005194:	464b      	mov	r3, r9
 8005196:	1891      	adds	r1, r2, r2
 8005198:	6239      	str	r1, [r7, #32]
 800519a:	415b      	adcs	r3, r3
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
 800519e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051a2:	4641      	mov	r1, r8
 80051a4:	1854      	adds	r4, r2, r1
 80051a6:	4649      	mov	r1, r9
 80051a8:	eb43 0501 	adc.w	r5, r3, r1
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	00eb      	lsls	r3, r5, #3
 80051b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051ba:	00e2      	lsls	r2, r4, #3
 80051bc:	4614      	mov	r4, r2
 80051be:	461d      	mov	r5, r3
 80051c0:	4643      	mov	r3, r8
 80051c2:	18e3      	adds	r3, r4, r3
 80051c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051c8:	464b      	mov	r3, r9
 80051ca:	eb45 0303 	adc.w	r3, r5, r3
 80051ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051e2:	f04f 0200 	mov.w	r2, #0
 80051e6:	f04f 0300 	mov.w	r3, #0
 80051ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80051ee:	4629      	mov	r1, r5
 80051f0:	008b      	lsls	r3, r1, #2
 80051f2:	4621      	mov	r1, r4
 80051f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051f8:	4621      	mov	r1, r4
 80051fa:	008a      	lsls	r2, r1, #2
 80051fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005200:	f7fb fcf2 	bl	8000be8 <__aeabi_uldivmod>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	4b60      	ldr	r3, [pc, #384]	; (800538c <UART_SetConfig+0x4e4>)
 800520a:	fba3 2302 	umull	r2, r3, r3, r2
 800520e:	095b      	lsrs	r3, r3, #5
 8005210:	011c      	lsls	r4, r3, #4
 8005212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005216:	2200      	movs	r2, #0
 8005218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800521c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005220:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005224:	4642      	mov	r2, r8
 8005226:	464b      	mov	r3, r9
 8005228:	1891      	adds	r1, r2, r2
 800522a:	61b9      	str	r1, [r7, #24]
 800522c:	415b      	adcs	r3, r3
 800522e:	61fb      	str	r3, [r7, #28]
 8005230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005234:	4641      	mov	r1, r8
 8005236:	1851      	adds	r1, r2, r1
 8005238:	6139      	str	r1, [r7, #16]
 800523a:	4649      	mov	r1, r9
 800523c:	414b      	adcs	r3, r1
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800524c:	4659      	mov	r1, fp
 800524e:	00cb      	lsls	r3, r1, #3
 8005250:	4651      	mov	r1, sl
 8005252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005256:	4651      	mov	r1, sl
 8005258:	00ca      	lsls	r2, r1, #3
 800525a:	4610      	mov	r0, r2
 800525c:	4619      	mov	r1, r3
 800525e:	4603      	mov	r3, r0
 8005260:	4642      	mov	r2, r8
 8005262:	189b      	adds	r3, r3, r2
 8005264:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005268:	464b      	mov	r3, r9
 800526a:	460a      	mov	r2, r1
 800526c:	eb42 0303 	adc.w	r3, r2, r3
 8005270:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	67bb      	str	r3, [r7, #120]	; 0x78
 800527e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800528c:	4649      	mov	r1, r9
 800528e:	008b      	lsls	r3, r1, #2
 8005290:	4641      	mov	r1, r8
 8005292:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005296:	4641      	mov	r1, r8
 8005298:	008a      	lsls	r2, r1, #2
 800529a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800529e:	f7fb fca3 	bl	8000be8 <__aeabi_uldivmod>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4b39      	ldr	r3, [pc, #228]	; (800538c <UART_SetConfig+0x4e4>)
 80052a8:	fba3 1302 	umull	r1, r3, r3, r2
 80052ac:	095b      	lsrs	r3, r3, #5
 80052ae:	2164      	movs	r1, #100	; 0x64
 80052b0:	fb01 f303 	mul.w	r3, r1, r3
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	3332      	adds	r3, #50	; 0x32
 80052ba:	4a34      	ldr	r2, [pc, #208]	; (800538c <UART_SetConfig+0x4e4>)
 80052bc:	fba2 2303 	umull	r2, r3, r2, r3
 80052c0:	095b      	lsrs	r3, r3, #5
 80052c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052c6:	441c      	add	r4, r3
 80052c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052cc:	2200      	movs	r2, #0
 80052ce:	673b      	str	r3, [r7, #112]	; 0x70
 80052d0:	677a      	str	r2, [r7, #116]	; 0x74
 80052d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80052d6:	4642      	mov	r2, r8
 80052d8:	464b      	mov	r3, r9
 80052da:	1891      	adds	r1, r2, r2
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	415b      	adcs	r3, r3
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052e6:	4641      	mov	r1, r8
 80052e8:	1851      	adds	r1, r2, r1
 80052ea:	6039      	str	r1, [r7, #0]
 80052ec:	4649      	mov	r1, r9
 80052ee:	414b      	adcs	r3, r1
 80052f0:	607b      	str	r3, [r7, #4]
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052fe:	4659      	mov	r1, fp
 8005300:	00cb      	lsls	r3, r1, #3
 8005302:	4651      	mov	r1, sl
 8005304:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005308:	4651      	mov	r1, sl
 800530a:	00ca      	lsls	r2, r1, #3
 800530c:	4610      	mov	r0, r2
 800530e:	4619      	mov	r1, r3
 8005310:	4603      	mov	r3, r0
 8005312:	4642      	mov	r2, r8
 8005314:	189b      	adds	r3, r3, r2
 8005316:	66bb      	str	r3, [r7, #104]	; 0x68
 8005318:	464b      	mov	r3, r9
 800531a:	460a      	mov	r2, r1
 800531c:	eb42 0303 	adc.w	r3, r2, r3
 8005320:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	663b      	str	r3, [r7, #96]	; 0x60
 800532c:	667a      	str	r2, [r7, #100]	; 0x64
 800532e:	f04f 0200 	mov.w	r2, #0
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800533a:	4649      	mov	r1, r9
 800533c:	008b      	lsls	r3, r1, #2
 800533e:	4641      	mov	r1, r8
 8005340:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005344:	4641      	mov	r1, r8
 8005346:	008a      	lsls	r2, r1, #2
 8005348:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800534c:	f7fb fc4c 	bl	8000be8 <__aeabi_uldivmod>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4b0d      	ldr	r3, [pc, #52]	; (800538c <UART_SetConfig+0x4e4>)
 8005356:	fba3 1302 	umull	r1, r3, r3, r2
 800535a:	095b      	lsrs	r3, r3, #5
 800535c:	2164      	movs	r1, #100	; 0x64
 800535e:	fb01 f303 	mul.w	r3, r1, r3
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	3332      	adds	r3, #50	; 0x32
 8005368:	4a08      	ldr	r2, [pc, #32]	; (800538c <UART_SetConfig+0x4e4>)
 800536a:	fba2 2303 	umull	r2, r3, r2, r3
 800536e:	095b      	lsrs	r3, r3, #5
 8005370:	f003 020f 	and.w	r2, r3, #15
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4422      	add	r2, r4
 800537c:	609a      	str	r2, [r3, #8]
}
 800537e:	bf00      	nop
 8005380:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005384:	46bd      	mov	sp, r7
 8005386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800538a:	bf00      	nop
 800538c:	51eb851f 	.word	0x51eb851f

08005390 <__errno>:
 8005390:	4b01      	ldr	r3, [pc, #4]	; (8005398 <__errno+0x8>)
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	2000000c 	.word	0x2000000c

0800539c <__libc_init_array>:
 800539c:	b570      	push	{r4, r5, r6, lr}
 800539e:	4d0d      	ldr	r5, [pc, #52]	; (80053d4 <__libc_init_array+0x38>)
 80053a0:	4c0d      	ldr	r4, [pc, #52]	; (80053d8 <__libc_init_array+0x3c>)
 80053a2:	1b64      	subs	r4, r4, r5
 80053a4:	10a4      	asrs	r4, r4, #2
 80053a6:	2600      	movs	r6, #0
 80053a8:	42a6      	cmp	r6, r4
 80053aa:	d109      	bne.n	80053c0 <__libc_init_array+0x24>
 80053ac:	4d0b      	ldr	r5, [pc, #44]	; (80053dc <__libc_init_array+0x40>)
 80053ae:	4c0c      	ldr	r4, [pc, #48]	; (80053e0 <__libc_init_array+0x44>)
 80053b0:	f002 fdc4 	bl	8007f3c <_init>
 80053b4:	1b64      	subs	r4, r4, r5
 80053b6:	10a4      	asrs	r4, r4, #2
 80053b8:	2600      	movs	r6, #0
 80053ba:	42a6      	cmp	r6, r4
 80053bc:	d105      	bne.n	80053ca <__libc_init_array+0x2e>
 80053be:	bd70      	pop	{r4, r5, r6, pc}
 80053c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c4:	4798      	blx	r3
 80053c6:	3601      	adds	r6, #1
 80053c8:	e7ee      	b.n	80053a8 <__libc_init_array+0xc>
 80053ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ce:	4798      	blx	r3
 80053d0:	3601      	adds	r6, #1
 80053d2:	e7f2      	b.n	80053ba <__libc_init_array+0x1e>
 80053d4:	08008504 	.word	0x08008504
 80053d8:	08008504 	.word	0x08008504
 80053dc:	08008504 	.word	0x08008504
 80053e0:	08008508 	.word	0x08008508

080053e4 <memset>:
 80053e4:	4402      	add	r2, r0
 80053e6:	4603      	mov	r3, r0
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d100      	bne.n	80053ee <memset+0xa>
 80053ec:	4770      	bx	lr
 80053ee:	f803 1b01 	strb.w	r1, [r3], #1
 80053f2:	e7f9      	b.n	80053e8 <memset+0x4>

080053f4 <__cvt>:
 80053f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053f8:	ec55 4b10 	vmov	r4, r5, d0
 80053fc:	2d00      	cmp	r5, #0
 80053fe:	460e      	mov	r6, r1
 8005400:	4619      	mov	r1, r3
 8005402:	462b      	mov	r3, r5
 8005404:	bfbb      	ittet	lt
 8005406:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800540a:	461d      	movlt	r5, r3
 800540c:	2300      	movge	r3, #0
 800540e:	232d      	movlt	r3, #45	; 0x2d
 8005410:	700b      	strb	r3, [r1, #0]
 8005412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005414:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005418:	4691      	mov	r9, r2
 800541a:	f023 0820 	bic.w	r8, r3, #32
 800541e:	bfbc      	itt	lt
 8005420:	4622      	movlt	r2, r4
 8005422:	4614      	movlt	r4, r2
 8005424:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005428:	d005      	beq.n	8005436 <__cvt+0x42>
 800542a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800542e:	d100      	bne.n	8005432 <__cvt+0x3e>
 8005430:	3601      	adds	r6, #1
 8005432:	2102      	movs	r1, #2
 8005434:	e000      	b.n	8005438 <__cvt+0x44>
 8005436:	2103      	movs	r1, #3
 8005438:	ab03      	add	r3, sp, #12
 800543a:	9301      	str	r3, [sp, #4]
 800543c:	ab02      	add	r3, sp, #8
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	ec45 4b10 	vmov	d0, r4, r5
 8005444:	4653      	mov	r3, sl
 8005446:	4632      	mov	r2, r6
 8005448:	f000 fe1a 	bl	8006080 <_dtoa_r>
 800544c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005450:	4607      	mov	r7, r0
 8005452:	d102      	bne.n	800545a <__cvt+0x66>
 8005454:	f019 0f01 	tst.w	r9, #1
 8005458:	d022      	beq.n	80054a0 <__cvt+0xac>
 800545a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800545e:	eb07 0906 	add.w	r9, r7, r6
 8005462:	d110      	bne.n	8005486 <__cvt+0x92>
 8005464:	783b      	ldrb	r3, [r7, #0]
 8005466:	2b30      	cmp	r3, #48	; 0x30
 8005468:	d10a      	bne.n	8005480 <__cvt+0x8c>
 800546a:	2200      	movs	r2, #0
 800546c:	2300      	movs	r3, #0
 800546e:	4620      	mov	r0, r4
 8005470:	4629      	mov	r1, r5
 8005472:	f7fb fb49 	bl	8000b08 <__aeabi_dcmpeq>
 8005476:	b918      	cbnz	r0, 8005480 <__cvt+0x8c>
 8005478:	f1c6 0601 	rsb	r6, r6, #1
 800547c:	f8ca 6000 	str.w	r6, [sl]
 8005480:	f8da 3000 	ldr.w	r3, [sl]
 8005484:	4499      	add	r9, r3
 8005486:	2200      	movs	r2, #0
 8005488:	2300      	movs	r3, #0
 800548a:	4620      	mov	r0, r4
 800548c:	4629      	mov	r1, r5
 800548e:	f7fb fb3b 	bl	8000b08 <__aeabi_dcmpeq>
 8005492:	b108      	cbz	r0, 8005498 <__cvt+0xa4>
 8005494:	f8cd 900c 	str.w	r9, [sp, #12]
 8005498:	2230      	movs	r2, #48	; 0x30
 800549a:	9b03      	ldr	r3, [sp, #12]
 800549c:	454b      	cmp	r3, r9
 800549e:	d307      	bcc.n	80054b0 <__cvt+0xbc>
 80054a0:	9b03      	ldr	r3, [sp, #12]
 80054a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054a4:	1bdb      	subs	r3, r3, r7
 80054a6:	4638      	mov	r0, r7
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	b004      	add	sp, #16
 80054ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b0:	1c59      	adds	r1, r3, #1
 80054b2:	9103      	str	r1, [sp, #12]
 80054b4:	701a      	strb	r2, [r3, #0]
 80054b6:	e7f0      	b.n	800549a <__cvt+0xa6>

080054b8 <__exponent>:
 80054b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ba:	4603      	mov	r3, r0
 80054bc:	2900      	cmp	r1, #0
 80054be:	bfb8      	it	lt
 80054c0:	4249      	neglt	r1, r1
 80054c2:	f803 2b02 	strb.w	r2, [r3], #2
 80054c6:	bfb4      	ite	lt
 80054c8:	222d      	movlt	r2, #45	; 0x2d
 80054ca:	222b      	movge	r2, #43	; 0x2b
 80054cc:	2909      	cmp	r1, #9
 80054ce:	7042      	strb	r2, [r0, #1]
 80054d0:	dd2a      	ble.n	8005528 <__exponent+0x70>
 80054d2:	f10d 0407 	add.w	r4, sp, #7
 80054d6:	46a4      	mov	ip, r4
 80054d8:	270a      	movs	r7, #10
 80054da:	46a6      	mov	lr, r4
 80054dc:	460a      	mov	r2, r1
 80054de:	fb91 f6f7 	sdiv	r6, r1, r7
 80054e2:	fb07 1516 	mls	r5, r7, r6, r1
 80054e6:	3530      	adds	r5, #48	; 0x30
 80054e8:	2a63      	cmp	r2, #99	; 0x63
 80054ea:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80054ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80054f2:	4631      	mov	r1, r6
 80054f4:	dcf1      	bgt.n	80054da <__exponent+0x22>
 80054f6:	3130      	adds	r1, #48	; 0x30
 80054f8:	f1ae 0502 	sub.w	r5, lr, #2
 80054fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005500:	1c44      	adds	r4, r0, #1
 8005502:	4629      	mov	r1, r5
 8005504:	4561      	cmp	r1, ip
 8005506:	d30a      	bcc.n	800551e <__exponent+0x66>
 8005508:	f10d 0209 	add.w	r2, sp, #9
 800550c:	eba2 020e 	sub.w	r2, r2, lr
 8005510:	4565      	cmp	r5, ip
 8005512:	bf88      	it	hi
 8005514:	2200      	movhi	r2, #0
 8005516:	4413      	add	r3, r2
 8005518:	1a18      	subs	r0, r3, r0
 800551a:	b003      	add	sp, #12
 800551c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800551e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005522:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005526:	e7ed      	b.n	8005504 <__exponent+0x4c>
 8005528:	2330      	movs	r3, #48	; 0x30
 800552a:	3130      	adds	r1, #48	; 0x30
 800552c:	7083      	strb	r3, [r0, #2]
 800552e:	70c1      	strb	r1, [r0, #3]
 8005530:	1d03      	adds	r3, r0, #4
 8005532:	e7f1      	b.n	8005518 <__exponent+0x60>

08005534 <_printf_float>:
 8005534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005538:	ed2d 8b02 	vpush	{d8}
 800553c:	b08d      	sub	sp, #52	; 0x34
 800553e:	460c      	mov	r4, r1
 8005540:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005544:	4616      	mov	r6, r2
 8005546:	461f      	mov	r7, r3
 8005548:	4605      	mov	r5, r0
 800554a:	f001 fd3f 	bl	8006fcc <_localeconv_r>
 800554e:	f8d0 a000 	ldr.w	sl, [r0]
 8005552:	4650      	mov	r0, sl
 8005554:	f7fa fe5c 	bl	8000210 <strlen>
 8005558:	2300      	movs	r3, #0
 800555a:	930a      	str	r3, [sp, #40]	; 0x28
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	9305      	str	r3, [sp, #20]
 8005560:	f8d8 3000 	ldr.w	r3, [r8]
 8005564:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005568:	3307      	adds	r3, #7
 800556a:	f023 0307 	bic.w	r3, r3, #7
 800556e:	f103 0208 	add.w	r2, r3, #8
 8005572:	f8c8 2000 	str.w	r2, [r8]
 8005576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800557e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005582:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005586:	9307      	str	r3, [sp, #28]
 8005588:	f8cd 8018 	str.w	r8, [sp, #24]
 800558c:	ee08 0a10 	vmov	s16, r0
 8005590:	4b9f      	ldr	r3, [pc, #636]	; (8005810 <_printf_float+0x2dc>)
 8005592:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800559a:	f7fb fae7 	bl	8000b6c <__aeabi_dcmpun>
 800559e:	bb88      	cbnz	r0, 8005604 <_printf_float+0xd0>
 80055a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055a4:	4b9a      	ldr	r3, [pc, #616]	; (8005810 <_printf_float+0x2dc>)
 80055a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055aa:	f7fb fac1 	bl	8000b30 <__aeabi_dcmple>
 80055ae:	bb48      	cbnz	r0, 8005604 <_printf_float+0xd0>
 80055b0:	2200      	movs	r2, #0
 80055b2:	2300      	movs	r3, #0
 80055b4:	4640      	mov	r0, r8
 80055b6:	4649      	mov	r1, r9
 80055b8:	f7fb fab0 	bl	8000b1c <__aeabi_dcmplt>
 80055bc:	b110      	cbz	r0, 80055c4 <_printf_float+0x90>
 80055be:	232d      	movs	r3, #45	; 0x2d
 80055c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055c4:	4b93      	ldr	r3, [pc, #588]	; (8005814 <_printf_float+0x2e0>)
 80055c6:	4894      	ldr	r0, [pc, #592]	; (8005818 <_printf_float+0x2e4>)
 80055c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80055cc:	bf94      	ite	ls
 80055ce:	4698      	movls	r8, r3
 80055d0:	4680      	movhi	r8, r0
 80055d2:	2303      	movs	r3, #3
 80055d4:	6123      	str	r3, [r4, #16]
 80055d6:	9b05      	ldr	r3, [sp, #20]
 80055d8:	f023 0204 	bic.w	r2, r3, #4
 80055dc:	6022      	str	r2, [r4, #0]
 80055de:	f04f 0900 	mov.w	r9, #0
 80055e2:	9700      	str	r7, [sp, #0]
 80055e4:	4633      	mov	r3, r6
 80055e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80055e8:	4621      	mov	r1, r4
 80055ea:	4628      	mov	r0, r5
 80055ec:	f000 f9d8 	bl	80059a0 <_printf_common>
 80055f0:	3001      	adds	r0, #1
 80055f2:	f040 8090 	bne.w	8005716 <_printf_float+0x1e2>
 80055f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055fa:	b00d      	add	sp, #52	; 0x34
 80055fc:	ecbd 8b02 	vpop	{d8}
 8005600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005604:	4642      	mov	r2, r8
 8005606:	464b      	mov	r3, r9
 8005608:	4640      	mov	r0, r8
 800560a:	4649      	mov	r1, r9
 800560c:	f7fb faae 	bl	8000b6c <__aeabi_dcmpun>
 8005610:	b140      	cbz	r0, 8005624 <_printf_float+0xf0>
 8005612:	464b      	mov	r3, r9
 8005614:	2b00      	cmp	r3, #0
 8005616:	bfbc      	itt	lt
 8005618:	232d      	movlt	r3, #45	; 0x2d
 800561a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800561e:	487f      	ldr	r0, [pc, #508]	; (800581c <_printf_float+0x2e8>)
 8005620:	4b7f      	ldr	r3, [pc, #508]	; (8005820 <_printf_float+0x2ec>)
 8005622:	e7d1      	b.n	80055c8 <_printf_float+0x94>
 8005624:	6863      	ldr	r3, [r4, #4]
 8005626:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800562a:	9206      	str	r2, [sp, #24]
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	d13f      	bne.n	80056b0 <_printf_float+0x17c>
 8005630:	2306      	movs	r3, #6
 8005632:	6063      	str	r3, [r4, #4]
 8005634:	9b05      	ldr	r3, [sp, #20]
 8005636:	6861      	ldr	r1, [r4, #4]
 8005638:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800563c:	2300      	movs	r3, #0
 800563e:	9303      	str	r3, [sp, #12]
 8005640:	ab0a      	add	r3, sp, #40	; 0x28
 8005642:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005646:	ab09      	add	r3, sp, #36	; 0x24
 8005648:	ec49 8b10 	vmov	d0, r8, r9
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	6022      	str	r2, [r4, #0]
 8005650:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005654:	4628      	mov	r0, r5
 8005656:	f7ff fecd 	bl	80053f4 <__cvt>
 800565a:	9b06      	ldr	r3, [sp, #24]
 800565c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800565e:	2b47      	cmp	r3, #71	; 0x47
 8005660:	4680      	mov	r8, r0
 8005662:	d108      	bne.n	8005676 <_printf_float+0x142>
 8005664:	1cc8      	adds	r0, r1, #3
 8005666:	db02      	blt.n	800566e <_printf_float+0x13a>
 8005668:	6863      	ldr	r3, [r4, #4]
 800566a:	4299      	cmp	r1, r3
 800566c:	dd41      	ble.n	80056f2 <_printf_float+0x1be>
 800566e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005672:	fa5f fb8b 	uxtb.w	fp, fp
 8005676:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800567a:	d820      	bhi.n	80056be <_printf_float+0x18a>
 800567c:	3901      	subs	r1, #1
 800567e:	465a      	mov	r2, fp
 8005680:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005684:	9109      	str	r1, [sp, #36]	; 0x24
 8005686:	f7ff ff17 	bl	80054b8 <__exponent>
 800568a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800568c:	1813      	adds	r3, r2, r0
 800568e:	2a01      	cmp	r2, #1
 8005690:	4681      	mov	r9, r0
 8005692:	6123      	str	r3, [r4, #16]
 8005694:	dc02      	bgt.n	800569c <_printf_float+0x168>
 8005696:	6822      	ldr	r2, [r4, #0]
 8005698:	07d2      	lsls	r2, r2, #31
 800569a:	d501      	bpl.n	80056a0 <_printf_float+0x16c>
 800569c:	3301      	adds	r3, #1
 800569e:	6123      	str	r3, [r4, #16]
 80056a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d09c      	beq.n	80055e2 <_printf_float+0xae>
 80056a8:	232d      	movs	r3, #45	; 0x2d
 80056aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056ae:	e798      	b.n	80055e2 <_printf_float+0xae>
 80056b0:	9a06      	ldr	r2, [sp, #24]
 80056b2:	2a47      	cmp	r2, #71	; 0x47
 80056b4:	d1be      	bne.n	8005634 <_printf_float+0x100>
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1bc      	bne.n	8005634 <_printf_float+0x100>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e7b9      	b.n	8005632 <_printf_float+0xfe>
 80056be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80056c2:	d118      	bne.n	80056f6 <_printf_float+0x1c2>
 80056c4:	2900      	cmp	r1, #0
 80056c6:	6863      	ldr	r3, [r4, #4]
 80056c8:	dd0b      	ble.n	80056e2 <_printf_float+0x1ae>
 80056ca:	6121      	str	r1, [r4, #16]
 80056cc:	b913      	cbnz	r3, 80056d4 <_printf_float+0x1a0>
 80056ce:	6822      	ldr	r2, [r4, #0]
 80056d0:	07d0      	lsls	r0, r2, #31
 80056d2:	d502      	bpl.n	80056da <_printf_float+0x1a6>
 80056d4:	3301      	adds	r3, #1
 80056d6:	440b      	add	r3, r1
 80056d8:	6123      	str	r3, [r4, #16]
 80056da:	65a1      	str	r1, [r4, #88]	; 0x58
 80056dc:	f04f 0900 	mov.w	r9, #0
 80056e0:	e7de      	b.n	80056a0 <_printf_float+0x16c>
 80056e2:	b913      	cbnz	r3, 80056ea <_printf_float+0x1b6>
 80056e4:	6822      	ldr	r2, [r4, #0]
 80056e6:	07d2      	lsls	r2, r2, #31
 80056e8:	d501      	bpl.n	80056ee <_printf_float+0x1ba>
 80056ea:	3302      	adds	r3, #2
 80056ec:	e7f4      	b.n	80056d8 <_printf_float+0x1a4>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e7f2      	b.n	80056d8 <_printf_float+0x1a4>
 80056f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80056f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056f8:	4299      	cmp	r1, r3
 80056fa:	db05      	blt.n	8005708 <_printf_float+0x1d4>
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	6121      	str	r1, [r4, #16]
 8005700:	07d8      	lsls	r0, r3, #31
 8005702:	d5ea      	bpl.n	80056da <_printf_float+0x1a6>
 8005704:	1c4b      	adds	r3, r1, #1
 8005706:	e7e7      	b.n	80056d8 <_printf_float+0x1a4>
 8005708:	2900      	cmp	r1, #0
 800570a:	bfd4      	ite	le
 800570c:	f1c1 0202 	rsble	r2, r1, #2
 8005710:	2201      	movgt	r2, #1
 8005712:	4413      	add	r3, r2
 8005714:	e7e0      	b.n	80056d8 <_printf_float+0x1a4>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	055a      	lsls	r2, r3, #21
 800571a:	d407      	bmi.n	800572c <_printf_float+0x1f8>
 800571c:	6923      	ldr	r3, [r4, #16]
 800571e:	4642      	mov	r2, r8
 8005720:	4631      	mov	r1, r6
 8005722:	4628      	mov	r0, r5
 8005724:	47b8      	blx	r7
 8005726:	3001      	adds	r0, #1
 8005728:	d12c      	bne.n	8005784 <_printf_float+0x250>
 800572a:	e764      	b.n	80055f6 <_printf_float+0xc2>
 800572c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005730:	f240 80e0 	bls.w	80058f4 <_printf_float+0x3c0>
 8005734:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005738:	2200      	movs	r2, #0
 800573a:	2300      	movs	r3, #0
 800573c:	f7fb f9e4 	bl	8000b08 <__aeabi_dcmpeq>
 8005740:	2800      	cmp	r0, #0
 8005742:	d034      	beq.n	80057ae <_printf_float+0x27a>
 8005744:	4a37      	ldr	r2, [pc, #220]	; (8005824 <_printf_float+0x2f0>)
 8005746:	2301      	movs	r3, #1
 8005748:	4631      	mov	r1, r6
 800574a:	4628      	mov	r0, r5
 800574c:	47b8      	blx	r7
 800574e:	3001      	adds	r0, #1
 8005750:	f43f af51 	beq.w	80055f6 <_printf_float+0xc2>
 8005754:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005758:	429a      	cmp	r2, r3
 800575a:	db02      	blt.n	8005762 <_printf_float+0x22e>
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	07d8      	lsls	r0, r3, #31
 8005760:	d510      	bpl.n	8005784 <_printf_float+0x250>
 8005762:	ee18 3a10 	vmov	r3, s16
 8005766:	4652      	mov	r2, sl
 8005768:	4631      	mov	r1, r6
 800576a:	4628      	mov	r0, r5
 800576c:	47b8      	blx	r7
 800576e:	3001      	adds	r0, #1
 8005770:	f43f af41 	beq.w	80055f6 <_printf_float+0xc2>
 8005774:	f04f 0800 	mov.w	r8, #0
 8005778:	f104 091a 	add.w	r9, r4, #26
 800577c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800577e:	3b01      	subs	r3, #1
 8005780:	4543      	cmp	r3, r8
 8005782:	dc09      	bgt.n	8005798 <_printf_float+0x264>
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	079b      	lsls	r3, r3, #30
 8005788:	f100 8105 	bmi.w	8005996 <_printf_float+0x462>
 800578c:	68e0      	ldr	r0, [r4, #12]
 800578e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005790:	4298      	cmp	r0, r3
 8005792:	bfb8      	it	lt
 8005794:	4618      	movlt	r0, r3
 8005796:	e730      	b.n	80055fa <_printf_float+0xc6>
 8005798:	2301      	movs	r3, #1
 800579a:	464a      	mov	r2, r9
 800579c:	4631      	mov	r1, r6
 800579e:	4628      	mov	r0, r5
 80057a0:	47b8      	blx	r7
 80057a2:	3001      	adds	r0, #1
 80057a4:	f43f af27 	beq.w	80055f6 <_printf_float+0xc2>
 80057a8:	f108 0801 	add.w	r8, r8, #1
 80057ac:	e7e6      	b.n	800577c <_printf_float+0x248>
 80057ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	dc39      	bgt.n	8005828 <_printf_float+0x2f4>
 80057b4:	4a1b      	ldr	r2, [pc, #108]	; (8005824 <_printf_float+0x2f0>)
 80057b6:	2301      	movs	r3, #1
 80057b8:	4631      	mov	r1, r6
 80057ba:	4628      	mov	r0, r5
 80057bc:	47b8      	blx	r7
 80057be:	3001      	adds	r0, #1
 80057c0:	f43f af19 	beq.w	80055f6 <_printf_float+0xc2>
 80057c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057c8:	4313      	orrs	r3, r2
 80057ca:	d102      	bne.n	80057d2 <_printf_float+0x29e>
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	07d9      	lsls	r1, r3, #31
 80057d0:	d5d8      	bpl.n	8005784 <_printf_float+0x250>
 80057d2:	ee18 3a10 	vmov	r3, s16
 80057d6:	4652      	mov	r2, sl
 80057d8:	4631      	mov	r1, r6
 80057da:	4628      	mov	r0, r5
 80057dc:	47b8      	blx	r7
 80057de:	3001      	adds	r0, #1
 80057e0:	f43f af09 	beq.w	80055f6 <_printf_float+0xc2>
 80057e4:	f04f 0900 	mov.w	r9, #0
 80057e8:	f104 0a1a 	add.w	sl, r4, #26
 80057ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ee:	425b      	negs	r3, r3
 80057f0:	454b      	cmp	r3, r9
 80057f2:	dc01      	bgt.n	80057f8 <_printf_float+0x2c4>
 80057f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057f6:	e792      	b.n	800571e <_printf_float+0x1ea>
 80057f8:	2301      	movs	r3, #1
 80057fa:	4652      	mov	r2, sl
 80057fc:	4631      	mov	r1, r6
 80057fe:	4628      	mov	r0, r5
 8005800:	47b8      	blx	r7
 8005802:	3001      	adds	r0, #1
 8005804:	f43f aef7 	beq.w	80055f6 <_printf_float+0xc2>
 8005808:	f109 0901 	add.w	r9, r9, #1
 800580c:	e7ee      	b.n	80057ec <_printf_float+0x2b8>
 800580e:	bf00      	nop
 8005810:	7fefffff 	.word	0x7fefffff
 8005814:	08008128 	.word	0x08008128
 8005818:	0800812c 	.word	0x0800812c
 800581c:	08008134 	.word	0x08008134
 8005820:	08008130 	.word	0x08008130
 8005824:	08008138 	.word	0x08008138
 8005828:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800582a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800582c:	429a      	cmp	r2, r3
 800582e:	bfa8      	it	ge
 8005830:	461a      	movge	r2, r3
 8005832:	2a00      	cmp	r2, #0
 8005834:	4691      	mov	r9, r2
 8005836:	dc37      	bgt.n	80058a8 <_printf_float+0x374>
 8005838:	f04f 0b00 	mov.w	fp, #0
 800583c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005840:	f104 021a 	add.w	r2, r4, #26
 8005844:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005846:	9305      	str	r3, [sp, #20]
 8005848:	eba3 0309 	sub.w	r3, r3, r9
 800584c:	455b      	cmp	r3, fp
 800584e:	dc33      	bgt.n	80058b8 <_printf_float+0x384>
 8005850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005854:	429a      	cmp	r2, r3
 8005856:	db3b      	blt.n	80058d0 <_printf_float+0x39c>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	07da      	lsls	r2, r3, #31
 800585c:	d438      	bmi.n	80058d0 <_printf_float+0x39c>
 800585e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005860:	9a05      	ldr	r2, [sp, #20]
 8005862:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005864:	1a9a      	subs	r2, r3, r2
 8005866:	eba3 0901 	sub.w	r9, r3, r1
 800586a:	4591      	cmp	r9, r2
 800586c:	bfa8      	it	ge
 800586e:	4691      	movge	r9, r2
 8005870:	f1b9 0f00 	cmp.w	r9, #0
 8005874:	dc35      	bgt.n	80058e2 <_printf_float+0x3ae>
 8005876:	f04f 0800 	mov.w	r8, #0
 800587a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800587e:	f104 0a1a 	add.w	sl, r4, #26
 8005882:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005886:	1a9b      	subs	r3, r3, r2
 8005888:	eba3 0309 	sub.w	r3, r3, r9
 800588c:	4543      	cmp	r3, r8
 800588e:	f77f af79 	ble.w	8005784 <_printf_float+0x250>
 8005892:	2301      	movs	r3, #1
 8005894:	4652      	mov	r2, sl
 8005896:	4631      	mov	r1, r6
 8005898:	4628      	mov	r0, r5
 800589a:	47b8      	blx	r7
 800589c:	3001      	adds	r0, #1
 800589e:	f43f aeaa 	beq.w	80055f6 <_printf_float+0xc2>
 80058a2:	f108 0801 	add.w	r8, r8, #1
 80058a6:	e7ec      	b.n	8005882 <_printf_float+0x34e>
 80058a8:	4613      	mov	r3, r2
 80058aa:	4631      	mov	r1, r6
 80058ac:	4642      	mov	r2, r8
 80058ae:	4628      	mov	r0, r5
 80058b0:	47b8      	blx	r7
 80058b2:	3001      	adds	r0, #1
 80058b4:	d1c0      	bne.n	8005838 <_printf_float+0x304>
 80058b6:	e69e      	b.n	80055f6 <_printf_float+0xc2>
 80058b8:	2301      	movs	r3, #1
 80058ba:	4631      	mov	r1, r6
 80058bc:	4628      	mov	r0, r5
 80058be:	9205      	str	r2, [sp, #20]
 80058c0:	47b8      	blx	r7
 80058c2:	3001      	adds	r0, #1
 80058c4:	f43f ae97 	beq.w	80055f6 <_printf_float+0xc2>
 80058c8:	9a05      	ldr	r2, [sp, #20]
 80058ca:	f10b 0b01 	add.w	fp, fp, #1
 80058ce:	e7b9      	b.n	8005844 <_printf_float+0x310>
 80058d0:	ee18 3a10 	vmov	r3, s16
 80058d4:	4652      	mov	r2, sl
 80058d6:	4631      	mov	r1, r6
 80058d8:	4628      	mov	r0, r5
 80058da:	47b8      	blx	r7
 80058dc:	3001      	adds	r0, #1
 80058de:	d1be      	bne.n	800585e <_printf_float+0x32a>
 80058e0:	e689      	b.n	80055f6 <_printf_float+0xc2>
 80058e2:	9a05      	ldr	r2, [sp, #20]
 80058e4:	464b      	mov	r3, r9
 80058e6:	4442      	add	r2, r8
 80058e8:	4631      	mov	r1, r6
 80058ea:	4628      	mov	r0, r5
 80058ec:	47b8      	blx	r7
 80058ee:	3001      	adds	r0, #1
 80058f0:	d1c1      	bne.n	8005876 <_printf_float+0x342>
 80058f2:	e680      	b.n	80055f6 <_printf_float+0xc2>
 80058f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058f6:	2a01      	cmp	r2, #1
 80058f8:	dc01      	bgt.n	80058fe <_printf_float+0x3ca>
 80058fa:	07db      	lsls	r3, r3, #31
 80058fc:	d538      	bpl.n	8005970 <_printf_float+0x43c>
 80058fe:	2301      	movs	r3, #1
 8005900:	4642      	mov	r2, r8
 8005902:	4631      	mov	r1, r6
 8005904:	4628      	mov	r0, r5
 8005906:	47b8      	blx	r7
 8005908:	3001      	adds	r0, #1
 800590a:	f43f ae74 	beq.w	80055f6 <_printf_float+0xc2>
 800590e:	ee18 3a10 	vmov	r3, s16
 8005912:	4652      	mov	r2, sl
 8005914:	4631      	mov	r1, r6
 8005916:	4628      	mov	r0, r5
 8005918:	47b8      	blx	r7
 800591a:	3001      	adds	r0, #1
 800591c:	f43f ae6b 	beq.w	80055f6 <_printf_float+0xc2>
 8005920:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005924:	2200      	movs	r2, #0
 8005926:	2300      	movs	r3, #0
 8005928:	f7fb f8ee 	bl	8000b08 <__aeabi_dcmpeq>
 800592c:	b9d8      	cbnz	r0, 8005966 <_printf_float+0x432>
 800592e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005930:	f108 0201 	add.w	r2, r8, #1
 8005934:	3b01      	subs	r3, #1
 8005936:	4631      	mov	r1, r6
 8005938:	4628      	mov	r0, r5
 800593a:	47b8      	blx	r7
 800593c:	3001      	adds	r0, #1
 800593e:	d10e      	bne.n	800595e <_printf_float+0x42a>
 8005940:	e659      	b.n	80055f6 <_printf_float+0xc2>
 8005942:	2301      	movs	r3, #1
 8005944:	4652      	mov	r2, sl
 8005946:	4631      	mov	r1, r6
 8005948:	4628      	mov	r0, r5
 800594a:	47b8      	blx	r7
 800594c:	3001      	adds	r0, #1
 800594e:	f43f ae52 	beq.w	80055f6 <_printf_float+0xc2>
 8005952:	f108 0801 	add.w	r8, r8, #1
 8005956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005958:	3b01      	subs	r3, #1
 800595a:	4543      	cmp	r3, r8
 800595c:	dcf1      	bgt.n	8005942 <_printf_float+0x40e>
 800595e:	464b      	mov	r3, r9
 8005960:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005964:	e6dc      	b.n	8005720 <_printf_float+0x1ec>
 8005966:	f04f 0800 	mov.w	r8, #0
 800596a:	f104 0a1a 	add.w	sl, r4, #26
 800596e:	e7f2      	b.n	8005956 <_printf_float+0x422>
 8005970:	2301      	movs	r3, #1
 8005972:	4642      	mov	r2, r8
 8005974:	e7df      	b.n	8005936 <_printf_float+0x402>
 8005976:	2301      	movs	r3, #1
 8005978:	464a      	mov	r2, r9
 800597a:	4631      	mov	r1, r6
 800597c:	4628      	mov	r0, r5
 800597e:	47b8      	blx	r7
 8005980:	3001      	adds	r0, #1
 8005982:	f43f ae38 	beq.w	80055f6 <_printf_float+0xc2>
 8005986:	f108 0801 	add.w	r8, r8, #1
 800598a:	68e3      	ldr	r3, [r4, #12]
 800598c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800598e:	1a5b      	subs	r3, r3, r1
 8005990:	4543      	cmp	r3, r8
 8005992:	dcf0      	bgt.n	8005976 <_printf_float+0x442>
 8005994:	e6fa      	b.n	800578c <_printf_float+0x258>
 8005996:	f04f 0800 	mov.w	r8, #0
 800599a:	f104 0919 	add.w	r9, r4, #25
 800599e:	e7f4      	b.n	800598a <_printf_float+0x456>

080059a0 <_printf_common>:
 80059a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059a4:	4616      	mov	r6, r2
 80059a6:	4699      	mov	r9, r3
 80059a8:	688a      	ldr	r2, [r1, #8]
 80059aa:	690b      	ldr	r3, [r1, #16]
 80059ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059b0:	4293      	cmp	r3, r2
 80059b2:	bfb8      	it	lt
 80059b4:	4613      	movlt	r3, r2
 80059b6:	6033      	str	r3, [r6, #0]
 80059b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059bc:	4607      	mov	r7, r0
 80059be:	460c      	mov	r4, r1
 80059c0:	b10a      	cbz	r2, 80059c6 <_printf_common+0x26>
 80059c2:	3301      	adds	r3, #1
 80059c4:	6033      	str	r3, [r6, #0]
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	0699      	lsls	r1, r3, #26
 80059ca:	bf42      	ittt	mi
 80059cc:	6833      	ldrmi	r3, [r6, #0]
 80059ce:	3302      	addmi	r3, #2
 80059d0:	6033      	strmi	r3, [r6, #0]
 80059d2:	6825      	ldr	r5, [r4, #0]
 80059d4:	f015 0506 	ands.w	r5, r5, #6
 80059d8:	d106      	bne.n	80059e8 <_printf_common+0x48>
 80059da:	f104 0a19 	add.w	sl, r4, #25
 80059de:	68e3      	ldr	r3, [r4, #12]
 80059e0:	6832      	ldr	r2, [r6, #0]
 80059e2:	1a9b      	subs	r3, r3, r2
 80059e4:	42ab      	cmp	r3, r5
 80059e6:	dc26      	bgt.n	8005a36 <_printf_common+0x96>
 80059e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059ec:	1e13      	subs	r3, r2, #0
 80059ee:	6822      	ldr	r2, [r4, #0]
 80059f0:	bf18      	it	ne
 80059f2:	2301      	movne	r3, #1
 80059f4:	0692      	lsls	r2, r2, #26
 80059f6:	d42b      	bmi.n	8005a50 <_printf_common+0xb0>
 80059f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059fc:	4649      	mov	r1, r9
 80059fe:	4638      	mov	r0, r7
 8005a00:	47c0      	blx	r8
 8005a02:	3001      	adds	r0, #1
 8005a04:	d01e      	beq.n	8005a44 <_printf_common+0xa4>
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	68e5      	ldr	r5, [r4, #12]
 8005a0a:	6832      	ldr	r2, [r6, #0]
 8005a0c:	f003 0306 	and.w	r3, r3, #6
 8005a10:	2b04      	cmp	r3, #4
 8005a12:	bf08      	it	eq
 8005a14:	1aad      	subeq	r5, r5, r2
 8005a16:	68a3      	ldr	r3, [r4, #8]
 8005a18:	6922      	ldr	r2, [r4, #16]
 8005a1a:	bf0c      	ite	eq
 8005a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a20:	2500      	movne	r5, #0
 8005a22:	4293      	cmp	r3, r2
 8005a24:	bfc4      	itt	gt
 8005a26:	1a9b      	subgt	r3, r3, r2
 8005a28:	18ed      	addgt	r5, r5, r3
 8005a2a:	2600      	movs	r6, #0
 8005a2c:	341a      	adds	r4, #26
 8005a2e:	42b5      	cmp	r5, r6
 8005a30:	d11a      	bne.n	8005a68 <_printf_common+0xc8>
 8005a32:	2000      	movs	r0, #0
 8005a34:	e008      	b.n	8005a48 <_printf_common+0xa8>
 8005a36:	2301      	movs	r3, #1
 8005a38:	4652      	mov	r2, sl
 8005a3a:	4649      	mov	r1, r9
 8005a3c:	4638      	mov	r0, r7
 8005a3e:	47c0      	blx	r8
 8005a40:	3001      	adds	r0, #1
 8005a42:	d103      	bne.n	8005a4c <_printf_common+0xac>
 8005a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a4c:	3501      	adds	r5, #1
 8005a4e:	e7c6      	b.n	80059de <_printf_common+0x3e>
 8005a50:	18e1      	adds	r1, r4, r3
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	2030      	movs	r0, #48	; 0x30
 8005a56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a5a:	4422      	add	r2, r4
 8005a5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a64:	3302      	adds	r3, #2
 8005a66:	e7c7      	b.n	80059f8 <_printf_common+0x58>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	4622      	mov	r2, r4
 8005a6c:	4649      	mov	r1, r9
 8005a6e:	4638      	mov	r0, r7
 8005a70:	47c0      	blx	r8
 8005a72:	3001      	adds	r0, #1
 8005a74:	d0e6      	beq.n	8005a44 <_printf_common+0xa4>
 8005a76:	3601      	adds	r6, #1
 8005a78:	e7d9      	b.n	8005a2e <_printf_common+0x8e>
	...

08005a7c <_printf_i>:
 8005a7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a80:	7e0f      	ldrb	r7, [r1, #24]
 8005a82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a84:	2f78      	cmp	r7, #120	; 0x78
 8005a86:	4691      	mov	r9, r2
 8005a88:	4680      	mov	r8, r0
 8005a8a:	460c      	mov	r4, r1
 8005a8c:	469a      	mov	sl, r3
 8005a8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a92:	d807      	bhi.n	8005aa4 <_printf_i+0x28>
 8005a94:	2f62      	cmp	r7, #98	; 0x62
 8005a96:	d80a      	bhi.n	8005aae <_printf_i+0x32>
 8005a98:	2f00      	cmp	r7, #0
 8005a9a:	f000 80d8 	beq.w	8005c4e <_printf_i+0x1d2>
 8005a9e:	2f58      	cmp	r7, #88	; 0x58
 8005aa0:	f000 80a3 	beq.w	8005bea <_printf_i+0x16e>
 8005aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005aa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005aac:	e03a      	b.n	8005b24 <_printf_i+0xa8>
 8005aae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ab2:	2b15      	cmp	r3, #21
 8005ab4:	d8f6      	bhi.n	8005aa4 <_printf_i+0x28>
 8005ab6:	a101      	add	r1, pc, #4	; (adr r1, 8005abc <_printf_i+0x40>)
 8005ab8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005abc:	08005b15 	.word	0x08005b15
 8005ac0:	08005b29 	.word	0x08005b29
 8005ac4:	08005aa5 	.word	0x08005aa5
 8005ac8:	08005aa5 	.word	0x08005aa5
 8005acc:	08005aa5 	.word	0x08005aa5
 8005ad0:	08005aa5 	.word	0x08005aa5
 8005ad4:	08005b29 	.word	0x08005b29
 8005ad8:	08005aa5 	.word	0x08005aa5
 8005adc:	08005aa5 	.word	0x08005aa5
 8005ae0:	08005aa5 	.word	0x08005aa5
 8005ae4:	08005aa5 	.word	0x08005aa5
 8005ae8:	08005c35 	.word	0x08005c35
 8005aec:	08005b59 	.word	0x08005b59
 8005af0:	08005c17 	.word	0x08005c17
 8005af4:	08005aa5 	.word	0x08005aa5
 8005af8:	08005aa5 	.word	0x08005aa5
 8005afc:	08005c57 	.word	0x08005c57
 8005b00:	08005aa5 	.word	0x08005aa5
 8005b04:	08005b59 	.word	0x08005b59
 8005b08:	08005aa5 	.word	0x08005aa5
 8005b0c:	08005aa5 	.word	0x08005aa5
 8005b10:	08005c1f 	.word	0x08005c1f
 8005b14:	682b      	ldr	r3, [r5, #0]
 8005b16:	1d1a      	adds	r2, r3, #4
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	602a      	str	r2, [r5, #0]
 8005b1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b24:	2301      	movs	r3, #1
 8005b26:	e0a3      	b.n	8005c70 <_printf_i+0x1f4>
 8005b28:	6820      	ldr	r0, [r4, #0]
 8005b2a:	6829      	ldr	r1, [r5, #0]
 8005b2c:	0606      	lsls	r6, r0, #24
 8005b2e:	f101 0304 	add.w	r3, r1, #4
 8005b32:	d50a      	bpl.n	8005b4a <_printf_i+0xce>
 8005b34:	680e      	ldr	r6, [r1, #0]
 8005b36:	602b      	str	r3, [r5, #0]
 8005b38:	2e00      	cmp	r6, #0
 8005b3a:	da03      	bge.n	8005b44 <_printf_i+0xc8>
 8005b3c:	232d      	movs	r3, #45	; 0x2d
 8005b3e:	4276      	negs	r6, r6
 8005b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b44:	485e      	ldr	r0, [pc, #376]	; (8005cc0 <_printf_i+0x244>)
 8005b46:	230a      	movs	r3, #10
 8005b48:	e019      	b.n	8005b7e <_printf_i+0x102>
 8005b4a:	680e      	ldr	r6, [r1, #0]
 8005b4c:	602b      	str	r3, [r5, #0]
 8005b4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b52:	bf18      	it	ne
 8005b54:	b236      	sxthne	r6, r6
 8005b56:	e7ef      	b.n	8005b38 <_printf_i+0xbc>
 8005b58:	682b      	ldr	r3, [r5, #0]
 8005b5a:	6820      	ldr	r0, [r4, #0]
 8005b5c:	1d19      	adds	r1, r3, #4
 8005b5e:	6029      	str	r1, [r5, #0]
 8005b60:	0601      	lsls	r1, r0, #24
 8005b62:	d501      	bpl.n	8005b68 <_printf_i+0xec>
 8005b64:	681e      	ldr	r6, [r3, #0]
 8005b66:	e002      	b.n	8005b6e <_printf_i+0xf2>
 8005b68:	0646      	lsls	r6, r0, #25
 8005b6a:	d5fb      	bpl.n	8005b64 <_printf_i+0xe8>
 8005b6c:	881e      	ldrh	r6, [r3, #0]
 8005b6e:	4854      	ldr	r0, [pc, #336]	; (8005cc0 <_printf_i+0x244>)
 8005b70:	2f6f      	cmp	r7, #111	; 0x6f
 8005b72:	bf0c      	ite	eq
 8005b74:	2308      	moveq	r3, #8
 8005b76:	230a      	movne	r3, #10
 8005b78:	2100      	movs	r1, #0
 8005b7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b7e:	6865      	ldr	r5, [r4, #4]
 8005b80:	60a5      	str	r5, [r4, #8]
 8005b82:	2d00      	cmp	r5, #0
 8005b84:	bfa2      	ittt	ge
 8005b86:	6821      	ldrge	r1, [r4, #0]
 8005b88:	f021 0104 	bicge.w	r1, r1, #4
 8005b8c:	6021      	strge	r1, [r4, #0]
 8005b8e:	b90e      	cbnz	r6, 8005b94 <_printf_i+0x118>
 8005b90:	2d00      	cmp	r5, #0
 8005b92:	d04d      	beq.n	8005c30 <_printf_i+0x1b4>
 8005b94:	4615      	mov	r5, r2
 8005b96:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b9a:	fb03 6711 	mls	r7, r3, r1, r6
 8005b9e:	5dc7      	ldrb	r7, [r0, r7]
 8005ba0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ba4:	4637      	mov	r7, r6
 8005ba6:	42bb      	cmp	r3, r7
 8005ba8:	460e      	mov	r6, r1
 8005baa:	d9f4      	bls.n	8005b96 <_printf_i+0x11a>
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	d10b      	bne.n	8005bc8 <_printf_i+0x14c>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	07de      	lsls	r6, r3, #31
 8005bb4:	d508      	bpl.n	8005bc8 <_printf_i+0x14c>
 8005bb6:	6923      	ldr	r3, [r4, #16]
 8005bb8:	6861      	ldr	r1, [r4, #4]
 8005bba:	4299      	cmp	r1, r3
 8005bbc:	bfde      	ittt	le
 8005bbe:	2330      	movle	r3, #48	; 0x30
 8005bc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bc4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005bc8:	1b52      	subs	r2, r2, r5
 8005bca:	6122      	str	r2, [r4, #16]
 8005bcc:	f8cd a000 	str.w	sl, [sp]
 8005bd0:	464b      	mov	r3, r9
 8005bd2:	aa03      	add	r2, sp, #12
 8005bd4:	4621      	mov	r1, r4
 8005bd6:	4640      	mov	r0, r8
 8005bd8:	f7ff fee2 	bl	80059a0 <_printf_common>
 8005bdc:	3001      	adds	r0, #1
 8005bde:	d14c      	bne.n	8005c7a <_printf_i+0x1fe>
 8005be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005be4:	b004      	add	sp, #16
 8005be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bea:	4835      	ldr	r0, [pc, #212]	; (8005cc0 <_printf_i+0x244>)
 8005bec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005bf0:	6829      	ldr	r1, [r5, #0]
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005bf8:	6029      	str	r1, [r5, #0]
 8005bfa:	061d      	lsls	r5, r3, #24
 8005bfc:	d514      	bpl.n	8005c28 <_printf_i+0x1ac>
 8005bfe:	07df      	lsls	r7, r3, #31
 8005c00:	bf44      	itt	mi
 8005c02:	f043 0320 	orrmi.w	r3, r3, #32
 8005c06:	6023      	strmi	r3, [r4, #0]
 8005c08:	b91e      	cbnz	r6, 8005c12 <_printf_i+0x196>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	f023 0320 	bic.w	r3, r3, #32
 8005c10:	6023      	str	r3, [r4, #0]
 8005c12:	2310      	movs	r3, #16
 8005c14:	e7b0      	b.n	8005b78 <_printf_i+0xfc>
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	f043 0320 	orr.w	r3, r3, #32
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	2378      	movs	r3, #120	; 0x78
 8005c20:	4828      	ldr	r0, [pc, #160]	; (8005cc4 <_printf_i+0x248>)
 8005c22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c26:	e7e3      	b.n	8005bf0 <_printf_i+0x174>
 8005c28:	0659      	lsls	r1, r3, #25
 8005c2a:	bf48      	it	mi
 8005c2c:	b2b6      	uxthmi	r6, r6
 8005c2e:	e7e6      	b.n	8005bfe <_printf_i+0x182>
 8005c30:	4615      	mov	r5, r2
 8005c32:	e7bb      	b.n	8005bac <_printf_i+0x130>
 8005c34:	682b      	ldr	r3, [r5, #0]
 8005c36:	6826      	ldr	r6, [r4, #0]
 8005c38:	6961      	ldr	r1, [r4, #20]
 8005c3a:	1d18      	adds	r0, r3, #4
 8005c3c:	6028      	str	r0, [r5, #0]
 8005c3e:	0635      	lsls	r5, r6, #24
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	d501      	bpl.n	8005c48 <_printf_i+0x1cc>
 8005c44:	6019      	str	r1, [r3, #0]
 8005c46:	e002      	b.n	8005c4e <_printf_i+0x1d2>
 8005c48:	0670      	lsls	r0, r6, #25
 8005c4a:	d5fb      	bpl.n	8005c44 <_printf_i+0x1c8>
 8005c4c:	8019      	strh	r1, [r3, #0]
 8005c4e:	2300      	movs	r3, #0
 8005c50:	6123      	str	r3, [r4, #16]
 8005c52:	4615      	mov	r5, r2
 8005c54:	e7ba      	b.n	8005bcc <_printf_i+0x150>
 8005c56:	682b      	ldr	r3, [r5, #0]
 8005c58:	1d1a      	adds	r2, r3, #4
 8005c5a:	602a      	str	r2, [r5, #0]
 8005c5c:	681d      	ldr	r5, [r3, #0]
 8005c5e:	6862      	ldr	r2, [r4, #4]
 8005c60:	2100      	movs	r1, #0
 8005c62:	4628      	mov	r0, r5
 8005c64:	f7fa fadc 	bl	8000220 <memchr>
 8005c68:	b108      	cbz	r0, 8005c6e <_printf_i+0x1f2>
 8005c6a:	1b40      	subs	r0, r0, r5
 8005c6c:	6060      	str	r0, [r4, #4]
 8005c6e:	6863      	ldr	r3, [r4, #4]
 8005c70:	6123      	str	r3, [r4, #16]
 8005c72:	2300      	movs	r3, #0
 8005c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c78:	e7a8      	b.n	8005bcc <_printf_i+0x150>
 8005c7a:	6923      	ldr	r3, [r4, #16]
 8005c7c:	462a      	mov	r2, r5
 8005c7e:	4649      	mov	r1, r9
 8005c80:	4640      	mov	r0, r8
 8005c82:	47d0      	blx	sl
 8005c84:	3001      	adds	r0, #1
 8005c86:	d0ab      	beq.n	8005be0 <_printf_i+0x164>
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	079b      	lsls	r3, r3, #30
 8005c8c:	d413      	bmi.n	8005cb6 <_printf_i+0x23a>
 8005c8e:	68e0      	ldr	r0, [r4, #12]
 8005c90:	9b03      	ldr	r3, [sp, #12]
 8005c92:	4298      	cmp	r0, r3
 8005c94:	bfb8      	it	lt
 8005c96:	4618      	movlt	r0, r3
 8005c98:	e7a4      	b.n	8005be4 <_printf_i+0x168>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	4632      	mov	r2, r6
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	4640      	mov	r0, r8
 8005ca2:	47d0      	blx	sl
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	d09b      	beq.n	8005be0 <_printf_i+0x164>
 8005ca8:	3501      	adds	r5, #1
 8005caa:	68e3      	ldr	r3, [r4, #12]
 8005cac:	9903      	ldr	r1, [sp, #12]
 8005cae:	1a5b      	subs	r3, r3, r1
 8005cb0:	42ab      	cmp	r3, r5
 8005cb2:	dcf2      	bgt.n	8005c9a <_printf_i+0x21e>
 8005cb4:	e7eb      	b.n	8005c8e <_printf_i+0x212>
 8005cb6:	2500      	movs	r5, #0
 8005cb8:	f104 0619 	add.w	r6, r4, #25
 8005cbc:	e7f5      	b.n	8005caa <_printf_i+0x22e>
 8005cbe:	bf00      	nop
 8005cc0:	0800813a 	.word	0x0800813a
 8005cc4:	0800814b 	.word	0x0800814b

08005cc8 <iprintf>:
 8005cc8:	b40f      	push	{r0, r1, r2, r3}
 8005cca:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <iprintf+0x2c>)
 8005ccc:	b513      	push	{r0, r1, r4, lr}
 8005cce:	681c      	ldr	r4, [r3, #0]
 8005cd0:	b124      	cbz	r4, 8005cdc <iprintf+0x14>
 8005cd2:	69a3      	ldr	r3, [r4, #24]
 8005cd4:	b913      	cbnz	r3, 8005cdc <iprintf+0x14>
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f001 f8da 	bl	8006e90 <__sinit>
 8005cdc:	ab05      	add	r3, sp, #20
 8005cde:	9a04      	ldr	r2, [sp, #16]
 8005ce0:	68a1      	ldr	r1, [r4, #8]
 8005ce2:	9301      	str	r3, [sp, #4]
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f001 fe97 	bl	8007a18 <_vfiprintf_r>
 8005cea:	b002      	add	sp, #8
 8005cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cf0:	b004      	add	sp, #16
 8005cf2:	4770      	bx	lr
 8005cf4:	2000000c 	.word	0x2000000c

08005cf8 <_puts_r>:
 8005cf8:	b570      	push	{r4, r5, r6, lr}
 8005cfa:	460e      	mov	r6, r1
 8005cfc:	4605      	mov	r5, r0
 8005cfe:	b118      	cbz	r0, 8005d08 <_puts_r+0x10>
 8005d00:	6983      	ldr	r3, [r0, #24]
 8005d02:	b90b      	cbnz	r3, 8005d08 <_puts_r+0x10>
 8005d04:	f001 f8c4 	bl	8006e90 <__sinit>
 8005d08:	69ab      	ldr	r3, [r5, #24]
 8005d0a:	68ac      	ldr	r4, [r5, #8]
 8005d0c:	b913      	cbnz	r3, 8005d14 <_puts_r+0x1c>
 8005d0e:	4628      	mov	r0, r5
 8005d10:	f001 f8be 	bl	8006e90 <__sinit>
 8005d14:	4b2c      	ldr	r3, [pc, #176]	; (8005dc8 <_puts_r+0xd0>)
 8005d16:	429c      	cmp	r4, r3
 8005d18:	d120      	bne.n	8005d5c <_puts_r+0x64>
 8005d1a:	686c      	ldr	r4, [r5, #4]
 8005d1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d1e:	07db      	lsls	r3, r3, #31
 8005d20:	d405      	bmi.n	8005d2e <_puts_r+0x36>
 8005d22:	89a3      	ldrh	r3, [r4, #12]
 8005d24:	0598      	lsls	r0, r3, #22
 8005d26:	d402      	bmi.n	8005d2e <_puts_r+0x36>
 8005d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d2a:	f001 f954 	bl	8006fd6 <__retarget_lock_acquire_recursive>
 8005d2e:	89a3      	ldrh	r3, [r4, #12]
 8005d30:	0719      	lsls	r1, r3, #28
 8005d32:	d51d      	bpl.n	8005d70 <_puts_r+0x78>
 8005d34:	6923      	ldr	r3, [r4, #16]
 8005d36:	b1db      	cbz	r3, 8005d70 <_puts_r+0x78>
 8005d38:	3e01      	subs	r6, #1
 8005d3a:	68a3      	ldr	r3, [r4, #8]
 8005d3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d40:	3b01      	subs	r3, #1
 8005d42:	60a3      	str	r3, [r4, #8]
 8005d44:	bb39      	cbnz	r1, 8005d96 <_puts_r+0x9e>
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	da38      	bge.n	8005dbc <_puts_r+0xc4>
 8005d4a:	4622      	mov	r2, r4
 8005d4c:	210a      	movs	r1, #10
 8005d4e:	4628      	mov	r0, r5
 8005d50:	f000 f848 	bl	8005de4 <__swbuf_r>
 8005d54:	3001      	adds	r0, #1
 8005d56:	d011      	beq.n	8005d7c <_puts_r+0x84>
 8005d58:	250a      	movs	r5, #10
 8005d5a:	e011      	b.n	8005d80 <_puts_r+0x88>
 8005d5c:	4b1b      	ldr	r3, [pc, #108]	; (8005dcc <_puts_r+0xd4>)
 8005d5e:	429c      	cmp	r4, r3
 8005d60:	d101      	bne.n	8005d66 <_puts_r+0x6e>
 8005d62:	68ac      	ldr	r4, [r5, #8]
 8005d64:	e7da      	b.n	8005d1c <_puts_r+0x24>
 8005d66:	4b1a      	ldr	r3, [pc, #104]	; (8005dd0 <_puts_r+0xd8>)
 8005d68:	429c      	cmp	r4, r3
 8005d6a:	bf08      	it	eq
 8005d6c:	68ec      	ldreq	r4, [r5, #12]
 8005d6e:	e7d5      	b.n	8005d1c <_puts_r+0x24>
 8005d70:	4621      	mov	r1, r4
 8005d72:	4628      	mov	r0, r5
 8005d74:	f000 f888 	bl	8005e88 <__swsetup_r>
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	d0dd      	beq.n	8005d38 <_puts_r+0x40>
 8005d7c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005d80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d82:	07da      	lsls	r2, r3, #31
 8005d84:	d405      	bmi.n	8005d92 <_puts_r+0x9a>
 8005d86:	89a3      	ldrh	r3, [r4, #12]
 8005d88:	059b      	lsls	r3, r3, #22
 8005d8a:	d402      	bmi.n	8005d92 <_puts_r+0x9a>
 8005d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d8e:	f001 f923 	bl	8006fd8 <__retarget_lock_release_recursive>
 8005d92:	4628      	mov	r0, r5
 8005d94:	bd70      	pop	{r4, r5, r6, pc}
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	da04      	bge.n	8005da4 <_puts_r+0xac>
 8005d9a:	69a2      	ldr	r2, [r4, #24]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	dc06      	bgt.n	8005dae <_puts_r+0xb6>
 8005da0:	290a      	cmp	r1, #10
 8005da2:	d004      	beq.n	8005dae <_puts_r+0xb6>
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	1c5a      	adds	r2, r3, #1
 8005da8:	6022      	str	r2, [r4, #0]
 8005daa:	7019      	strb	r1, [r3, #0]
 8005dac:	e7c5      	b.n	8005d3a <_puts_r+0x42>
 8005dae:	4622      	mov	r2, r4
 8005db0:	4628      	mov	r0, r5
 8005db2:	f000 f817 	bl	8005de4 <__swbuf_r>
 8005db6:	3001      	adds	r0, #1
 8005db8:	d1bf      	bne.n	8005d3a <_puts_r+0x42>
 8005dba:	e7df      	b.n	8005d7c <_puts_r+0x84>
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	250a      	movs	r5, #10
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	6022      	str	r2, [r4, #0]
 8005dc4:	701d      	strb	r5, [r3, #0]
 8005dc6:	e7db      	b.n	8005d80 <_puts_r+0x88>
 8005dc8:	0800820c 	.word	0x0800820c
 8005dcc:	0800822c 	.word	0x0800822c
 8005dd0:	080081ec 	.word	0x080081ec

08005dd4 <puts>:
 8005dd4:	4b02      	ldr	r3, [pc, #8]	; (8005de0 <puts+0xc>)
 8005dd6:	4601      	mov	r1, r0
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	f7ff bf8d 	b.w	8005cf8 <_puts_r>
 8005dde:	bf00      	nop
 8005de0:	2000000c 	.word	0x2000000c

08005de4 <__swbuf_r>:
 8005de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de6:	460e      	mov	r6, r1
 8005de8:	4614      	mov	r4, r2
 8005dea:	4605      	mov	r5, r0
 8005dec:	b118      	cbz	r0, 8005df6 <__swbuf_r+0x12>
 8005dee:	6983      	ldr	r3, [r0, #24]
 8005df0:	b90b      	cbnz	r3, 8005df6 <__swbuf_r+0x12>
 8005df2:	f001 f84d 	bl	8006e90 <__sinit>
 8005df6:	4b21      	ldr	r3, [pc, #132]	; (8005e7c <__swbuf_r+0x98>)
 8005df8:	429c      	cmp	r4, r3
 8005dfa:	d12b      	bne.n	8005e54 <__swbuf_r+0x70>
 8005dfc:	686c      	ldr	r4, [r5, #4]
 8005dfe:	69a3      	ldr	r3, [r4, #24]
 8005e00:	60a3      	str	r3, [r4, #8]
 8005e02:	89a3      	ldrh	r3, [r4, #12]
 8005e04:	071a      	lsls	r2, r3, #28
 8005e06:	d52f      	bpl.n	8005e68 <__swbuf_r+0x84>
 8005e08:	6923      	ldr	r3, [r4, #16]
 8005e0a:	b36b      	cbz	r3, 8005e68 <__swbuf_r+0x84>
 8005e0c:	6923      	ldr	r3, [r4, #16]
 8005e0e:	6820      	ldr	r0, [r4, #0]
 8005e10:	1ac0      	subs	r0, r0, r3
 8005e12:	6963      	ldr	r3, [r4, #20]
 8005e14:	b2f6      	uxtb	r6, r6
 8005e16:	4283      	cmp	r3, r0
 8005e18:	4637      	mov	r7, r6
 8005e1a:	dc04      	bgt.n	8005e26 <__swbuf_r+0x42>
 8005e1c:	4621      	mov	r1, r4
 8005e1e:	4628      	mov	r0, r5
 8005e20:	f000 ffa2 	bl	8006d68 <_fflush_r>
 8005e24:	bb30      	cbnz	r0, 8005e74 <__swbuf_r+0x90>
 8005e26:	68a3      	ldr	r3, [r4, #8]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	60a3      	str	r3, [r4, #8]
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	6022      	str	r2, [r4, #0]
 8005e32:	701e      	strb	r6, [r3, #0]
 8005e34:	6963      	ldr	r3, [r4, #20]
 8005e36:	3001      	adds	r0, #1
 8005e38:	4283      	cmp	r3, r0
 8005e3a:	d004      	beq.n	8005e46 <__swbuf_r+0x62>
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	07db      	lsls	r3, r3, #31
 8005e40:	d506      	bpl.n	8005e50 <__swbuf_r+0x6c>
 8005e42:	2e0a      	cmp	r6, #10
 8005e44:	d104      	bne.n	8005e50 <__swbuf_r+0x6c>
 8005e46:	4621      	mov	r1, r4
 8005e48:	4628      	mov	r0, r5
 8005e4a:	f000 ff8d 	bl	8006d68 <_fflush_r>
 8005e4e:	b988      	cbnz	r0, 8005e74 <__swbuf_r+0x90>
 8005e50:	4638      	mov	r0, r7
 8005e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e54:	4b0a      	ldr	r3, [pc, #40]	; (8005e80 <__swbuf_r+0x9c>)
 8005e56:	429c      	cmp	r4, r3
 8005e58:	d101      	bne.n	8005e5e <__swbuf_r+0x7a>
 8005e5a:	68ac      	ldr	r4, [r5, #8]
 8005e5c:	e7cf      	b.n	8005dfe <__swbuf_r+0x1a>
 8005e5e:	4b09      	ldr	r3, [pc, #36]	; (8005e84 <__swbuf_r+0xa0>)
 8005e60:	429c      	cmp	r4, r3
 8005e62:	bf08      	it	eq
 8005e64:	68ec      	ldreq	r4, [r5, #12]
 8005e66:	e7ca      	b.n	8005dfe <__swbuf_r+0x1a>
 8005e68:	4621      	mov	r1, r4
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f000 f80c 	bl	8005e88 <__swsetup_r>
 8005e70:	2800      	cmp	r0, #0
 8005e72:	d0cb      	beq.n	8005e0c <__swbuf_r+0x28>
 8005e74:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005e78:	e7ea      	b.n	8005e50 <__swbuf_r+0x6c>
 8005e7a:	bf00      	nop
 8005e7c:	0800820c 	.word	0x0800820c
 8005e80:	0800822c 	.word	0x0800822c
 8005e84:	080081ec 	.word	0x080081ec

08005e88 <__swsetup_r>:
 8005e88:	4b32      	ldr	r3, [pc, #200]	; (8005f54 <__swsetup_r+0xcc>)
 8005e8a:	b570      	push	{r4, r5, r6, lr}
 8005e8c:	681d      	ldr	r5, [r3, #0]
 8005e8e:	4606      	mov	r6, r0
 8005e90:	460c      	mov	r4, r1
 8005e92:	b125      	cbz	r5, 8005e9e <__swsetup_r+0x16>
 8005e94:	69ab      	ldr	r3, [r5, #24]
 8005e96:	b913      	cbnz	r3, 8005e9e <__swsetup_r+0x16>
 8005e98:	4628      	mov	r0, r5
 8005e9a:	f000 fff9 	bl	8006e90 <__sinit>
 8005e9e:	4b2e      	ldr	r3, [pc, #184]	; (8005f58 <__swsetup_r+0xd0>)
 8005ea0:	429c      	cmp	r4, r3
 8005ea2:	d10f      	bne.n	8005ec4 <__swsetup_r+0x3c>
 8005ea4:	686c      	ldr	r4, [r5, #4]
 8005ea6:	89a3      	ldrh	r3, [r4, #12]
 8005ea8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005eac:	0719      	lsls	r1, r3, #28
 8005eae:	d42c      	bmi.n	8005f0a <__swsetup_r+0x82>
 8005eb0:	06dd      	lsls	r5, r3, #27
 8005eb2:	d411      	bmi.n	8005ed8 <__swsetup_r+0x50>
 8005eb4:	2309      	movs	r3, #9
 8005eb6:	6033      	str	r3, [r6, #0]
 8005eb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ebc:	81a3      	strh	r3, [r4, #12]
 8005ebe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ec2:	e03e      	b.n	8005f42 <__swsetup_r+0xba>
 8005ec4:	4b25      	ldr	r3, [pc, #148]	; (8005f5c <__swsetup_r+0xd4>)
 8005ec6:	429c      	cmp	r4, r3
 8005ec8:	d101      	bne.n	8005ece <__swsetup_r+0x46>
 8005eca:	68ac      	ldr	r4, [r5, #8]
 8005ecc:	e7eb      	b.n	8005ea6 <__swsetup_r+0x1e>
 8005ece:	4b24      	ldr	r3, [pc, #144]	; (8005f60 <__swsetup_r+0xd8>)
 8005ed0:	429c      	cmp	r4, r3
 8005ed2:	bf08      	it	eq
 8005ed4:	68ec      	ldreq	r4, [r5, #12]
 8005ed6:	e7e6      	b.n	8005ea6 <__swsetup_r+0x1e>
 8005ed8:	0758      	lsls	r0, r3, #29
 8005eda:	d512      	bpl.n	8005f02 <__swsetup_r+0x7a>
 8005edc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ede:	b141      	cbz	r1, 8005ef2 <__swsetup_r+0x6a>
 8005ee0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ee4:	4299      	cmp	r1, r3
 8005ee6:	d002      	beq.n	8005eee <__swsetup_r+0x66>
 8005ee8:	4630      	mov	r0, r6
 8005eea:	f001 fc8b 	bl	8007804 <_free_r>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	6363      	str	r3, [r4, #52]	; 0x34
 8005ef2:	89a3      	ldrh	r3, [r4, #12]
 8005ef4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ef8:	81a3      	strh	r3, [r4, #12]
 8005efa:	2300      	movs	r3, #0
 8005efc:	6063      	str	r3, [r4, #4]
 8005efe:	6923      	ldr	r3, [r4, #16]
 8005f00:	6023      	str	r3, [r4, #0]
 8005f02:	89a3      	ldrh	r3, [r4, #12]
 8005f04:	f043 0308 	orr.w	r3, r3, #8
 8005f08:	81a3      	strh	r3, [r4, #12]
 8005f0a:	6923      	ldr	r3, [r4, #16]
 8005f0c:	b94b      	cbnz	r3, 8005f22 <__swsetup_r+0x9a>
 8005f0e:	89a3      	ldrh	r3, [r4, #12]
 8005f10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f18:	d003      	beq.n	8005f22 <__swsetup_r+0x9a>
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	f001 f881 	bl	8007024 <__smakebuf_r>
 8005f22:	89a0      	ldrh	r0, [r4, #12]
 8005f24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f28:	f010 0301 	ands.w	r3, r0, #1
 8005f2c:	d00a      	beq.n	8005f44 <__swsetup_r+0xbc>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60a3      	str	r3, [r4, #8]
 8005f32:	6963      	ldr	r3, [r4, #20]
 8005f34:	425b      	negs	r3, r3
 8005f36:	61a3      	str	r3, [r4, #24]
 8005f38:	6923      	ldr	r3, [r4, #16]
 8005f3a:	b943      	cbnz	r3, 8005f4e <__swsetup_r+0xc6>
 8005f3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f40:	d1ba      	bne.n	8005eb8 <__swsetup_r+0x30>
 8005f42:	bd70      	pop	{r4, r5, r6, pc}
 8005f44:	0781      	lsls	r1, r0, #30
 8005f46:	bf58      	it	pl
 8005f48:	6963      	ldrpl	r3, [r4, #20]
 8005f4a:	60a3      	str	r3, [r4, #8]
 8005f4c:	e7f4      	b.n	8005f38 <__swsetup_r+0xb0>
 8005f4e:	2000      	movs	r0, #0
 8005f50:	e7f7      	b.n	8005f42 <__swsetup_r+0xba>
 8005f52:	bf00      	nop
 8005f54:	2000000c 	.word	0x2000000c
 8005f58:	0800820c 	.word	0x0800820c
 8005f5c:	0800822c 	.word	0x0800822c
 8005f60:	080081ec 	.word	0x080081ec

08005f64 <quorem>:
 8005f64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f68:	6903      	ldr	r3, [r0, #16]
 8005f6a:	690c      	ldr	r4, [r1, #16]
 8005f6c:	42a3      	cmp	r3, r4
 8005f6e:	4607      	mov	r7, r0
 8005f70:	f2c0 8081 	blt.w	8006076 <quorem+0x112>
 8005f74:	3c01      	subs	r4, #1
 8005f76:	f101 0814 	add.w	r8, r1, #20
 8005f7a:	f100 0514 	add.w	r5, r0, #20
 8005f7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f82:	9301      	str	r3, [sp, #4]
 8005f84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f98:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f9c:	d331      	bcc.n	8006002 <quorem+0x9e>
 8005f9e:	f04f 0e00 	mov.w	lr, #0
 8005fa2:	4640      	mov	r0, r8
 8005fa4:	46ac      	mov	ip, r5
 8005fa6:	46f2      	mov	sl, lr
 8005fa8:	f850 2b04 	ldr.w	r2, [r0], #4
 8005fac:	b293      	uxth	r3, r2
 8005fae:	fb06 e303 	mla	r3, r6, r3, lr
 8005fb2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	ebaa 0303 	sub.w	r3, sl, r3
 8005fbc:	f8dc a000 	ldr.w	sl, [ip]
 8005fc0:	0c12      	lsrs	r2, r2, #16
 8005fc2:	fa13 f38a 	uxtah	r3, r3, sl
 8005fc6:	fb06 e202 	mla	r2, r6, r2, lr
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	9b00      	ldr	r3, [sp, #0]
 8005fce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005fd2:	b292      	uxth	r2, r2
 8005fd4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005fd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fdc:	f8bd 3000 	ldrh.w	r3, [sp]
 8005fe0:	4581      	cmp	r9, r0
 8005fe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fe6:	f84c 3b04 	str.w	r3, [ip], #4
 8005fea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005fee:	d2db      	bcs.n	8005fa8 <quorem+0x44>
 8005ff0:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ff4:	b92b      	cbnz	r3, 8006002 <quorem+0x9e>
 8005ff6:	9b01      	ldr	r3, [sp, #4]
 8005ff8:	3b04      	subs	r3, #4
 8005ffa:	429d      	cmp	r5, r3
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	d32e      	bcc.n	800605e <quorem+0xfa>
 8006000:	613c      	str	r4, [r7, #16]
 8006002:	4638      	mov	r0, r7
 8006004:	f001 fae6 	bl	80075d4 <__mcmp>
 8006008:	2800      	cmp	r0, #0
 800600a:	db24      	blt.n	8006056 <quorem+0xf2>
 800600c:	3601      	adds	r6, #1
 800600e:	4628      	mov	r0, r5
 8006010:	f04f 0c00 	mov.w	ip, #0
 8006014:	f858 2b04 	ldr.w	r2, [r8], #4
 8006018:	f8d0 e000 	ldr.w	lr, [r0]
 800601c:	b293      	uxth	r3, r2
 800601e:	ebac 0303 	sub.w	r3, ip, r3
 8006022:	0c12      	lsrs	r2, r2, #16
 8006024:	fa13 f38e 	uxtah	r3, r3, lr
 8006028:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800602c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006030:	b29b      	uxth	r3, r3
 8006032:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006036:	45c1      	cmp	r9, r8
 8006038:	f840 3b04 	str.w	r3, [r0], #4
 800603c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006040:	d2e8      	bcs.n	8006014 <quorem+0xb0>
 8006042:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006046:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800604a:	b922      	cbnz	r2, 8006056 <quorem+0xf2>
 800604c:	3b04      	subs	r3, #4
 800604e:	429d      	cmp	r5, r3
 8006050:	461a      	mov	r2, r3
 8006052:	d30a      	bcc.n	800606a <quorem+0x106>
 8006054:	613c      	str	r4, [r7, #16]
 8006056:	4630      	mov	r0, r6
 8006058:	b003      	add	sp, #12
 800605a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800605e:	6812      	ldr	r2, [r2, #0]
 8006060:	3b04      	subs	r3, #4
 8006062:	2a00      	cmp	r2, #0
 8006064:	d1cc      	bne.n	8006000 <quorem+0x9c>
 8006066:	3c01      	subs	r4, #1
 8006068:	e7c7      	b.n	8005ffa <quorem+0x96>
 800606a:	6812      	ldr	r2, [r2, #0]
 800606c:	3b04      	subs	r3, #4
 800606e:	2a00      	cmp	r2, #0
 8006070:	d1f0      	bne.n	8006054 <quorem+0xf0>
 8006072:	3c01      	subs	r4, #1
 8006074:	e7eb      	b.n	800604e <quorem+0xea>
 8006076:	2000      	movs	r0, #0
 8006078:	e7ee      	b.n	8006058 <quorem+0xf4>
 800607a:	0000      	movs	r0, r0
 800607c:	0000      	movs	r0, r0
	...

08006080 <_dtoa_r>:
 8006080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006084:	ed2d 8b04 	vpush	{d8-d9}
 8006088:	ec57 6b10 	vmov	r6, r7, d0
 800608c:	b093      	sub	sp, #76	; 0x4c
 800608e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006090:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006094:	9106      	str	r1, [sp, #24]
 8006096:	ee10 aa10 	vmov	sl, s0
 800609a:	4604      	mov	r4, r0
 800609c:	9209      	str	r2, [sp, #36]	; 0x24
 800609e:	930c      	str	r3, [sp, #48]	; 0x30
 80060a0:	46bb      	mov	fp, r7
 80060a2:	b975      	cbnz	r5, 80060c2 <_dtoa_r+0x42>
 80060a4:	2010      	movs	r0, #16
 80060a6:	f000 fffd 	bl	80070a4 <malloc>
 80060aa:	4602      	mov	r2, r0
 80060ac:	6260      	str	r0, [r4, #36]	; 0x24
 80060ae:	b920      	cbnz	r0, 80060ba <_dtoa_r+0x3a>
 80060b0:	4ba7      	ldr	r3, [pc, #668]	; (8006350 <_dtoa_r+0x2d0>)
 80060b2:	21ea      	movs	r1, #234	; 0xea
 80060b4:	48a7      	ldr	r0, [pc, #668]	; (8006354 <_dtoa_r+0x2d4>)
 80060b6:	f001 fe45 	bl	8007d44 <__assert_func>
 80060ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80060be:	6005      	str	r5, [r0, #0]
 80060c0:	60c5      	str	r5, [r0, #12]
 80060c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060c4:	6819      	ldr	r1, [r3, #0]
 80060c6:	b151      	cbz	r1, 80060de <_dtoa_r+0x5e>
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	604a      	str	r2, [r1, #4]
 80060cc:	2301      	movs	r3, #1
 80060ce:	4093      	lsls	r3, r2
 80060d0:	608b      	str	r3, [r1, #8]
 80060d2:	4620      	mov	r0, r4
 80060d4:	f001 f83c 	bl	8007150 <_Bfree>
 80060d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060da:	2200      	movs	r2, #0
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	1e3b      	subs	r3, r7, #0
 80060e0:	bfaa      	itet	ge
 80060e2:	2300      	movge	r3, #0
 80060e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80060e8:	f8c8 3000 	strge.w	r3, [r8]
 80060ec:	4b9a      	ldr	r3, [pc, #616]	; (8006358 <_dtoa_r+0x2d8>)
 80060ee:	bfbc      	itt	lt
 80060f0:	2201      	movlt	r2, #1
 80060f2:	f8c8 2000 	strlt.w	r2, [r8]
 80060f6:	ea33 030b 	bics.w	r3, r3, fp
 80060fa:	d11b      	bne.n	8006134 <_dtoa_r+0xb4>
 80060fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006108:	4333      	orrs	r3, r6
 800610a:	f000 8592 	beq.w	8006c32 <_dtoa_r+0xbb2>
 800610e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006110:	b963      	cbnz	r3, 800612c <_dtoa_r+0xac>
 8006112:	4b92      	ldr	r3, [pc, #584]	; (800635c <_dtoa_r+0x2dc>)
 8006114:	e022      	b.n	800615c <_dtoa_r+0xdc>
 8006116:	4b92      	ldr	r3, [pc, #584]	; (8006360 <_dtoa_r+0x2e0>)
 8006118:	9301      	str	r3, [sp, #4]
 800611a:	3308      	adds	r3, #8
 800611c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800611e:	6013      	str	r3, [r2, #0]
 8006120:	9801      	ldr	r0, [sp, #4]
 8006122:	b013      	add	sp, #76	; 0x4c
 8006124:	ecbd 8b04 	vpop	{d8-d9}
 8006128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800612c:	4b8b      	ldr	r3, [pc, #556]	; (800635c <_dtoa_r+0x2dc>)
 800612e:	9301      	str	r3, [sp, #4]
 8006130:	3303      	adds	r3, #3
 8006132:	e7f3      	b.n	800611c <_dtoa_r+0x9c>
 8006134:	2200      	movs	r2, #0
 8006136:	2300      	movs	r3, #0
 8006138:	4650      	mov	r0, sl
 800613a:	4659      	mov	r1, fp
 800613c:	f7fa fce4 	bl	8000b08 <__aeabi_dcmpeq>
 8006140:	ec4b ab19 	vmov	d9, sl, fp
 8006144:	4680      	mov	r8, r0
 8006146:	b158      	cbz	r0, 8006160 <_dtoa_r+0xe0>
 8006148:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800614a:	2301      	movs	r3, #1
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 856b 	beq.w	8006c2c <_dtoa_r+0xbac>
 8006156:	4883      	ldr	r0, [pc, #524]	; (8006364 <_dtoa_r+0x2e4>)
 8006158:	6018      	str	r0, [r3, #0]
 800615a:	1e43      	subs	r3, r0, #1
 800615c:	9301      	str	r3, [sp, #4]
 800615e:	e7df      	b.n	8006120 <_dtoa_r+0xa0>
 8006160:	ec4b ab10 	vmov	d0, sl, fp
 8006164:	aa10      	add	r2, sp, #64	; 0x40
 8006166:	a911      	add	r1, sp, #68	; 0x44
 8006168:	4620      	mov	r0, r4
 800616a:	f001 fad9 	bl	8007720 <__d2b>
 800616e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006172:	ee08 0a10 	vmov	s16, r0
 8006176:	2d00      	cmp	r5, #0
 8006178:	f000 8084 	beq.w	8006284 <_dtoa_r+0x204>
 800617c:	ee19 3a90 	vmov	r3, s19
 8006180:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006184:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006188:	4656      	mov	r6, sl
 800618a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800618e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006192:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006196:	4b74      	ldr	r3, [pc, #464]	; (8006368 <_dtoa_r+0x2e8>)
 8006198:	2200      	movs	r2, #0
 800619a:	4630      	mov	r0, r6
 800619c:	4639      	mov	r1, r7
 800619e:	f7fa f893 	bl	80002c8 <__aeabi_dsub>
 80061a2:	a365      	add	r3, pc, #404	; (adr r3, 8006338 <_dtoa_r+0x2b8>)
 80061a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a8:	f7fa fa46 	bl	8000638 <__aeabi_dmul>
 80061ac:	a364      	add	r3, pc, #400	; (adr r3, 8006340 <_dtoa_r+0x2c0>)
 80061ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b2:	f7fa f88b 	bl	80002cc <__adddf3>
 80061b6:	4606      	mov	r6, r0
 80061b8:	4628      	mov	r0, r5
 80061ba:	460f      	mov	r7, r1
 80061bc:	f7fa f9d2 	bl	8000564 <__aeabi_i2d>
 80061c0:	a361      	add	r3, pc, #388	; (adr r3, 8006348 <_dtoa_r+0x2c8>)
 80061c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c6:	f7fa fa37 	bl	8000638 <__aeabi_dmul>
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	4630      	mov	r0, r6
 80061d0:	4639      	mov	r1, r7
 80061d2:	f7fa f87b 	bl	80002cc <__adddf3>
 80061d6:	4606      	mov	r6, r0
 80061d8:	460f      	mov	r7, r1
 80061da:	f7fa fcdd 	bl	8000b98 <__aeabi_d2iz>
 80061de:	2200      	movs	r2, #0
 80061e0:	9000      	str	r0, [sp, #0]
 80061e2:	2300      	movs	r3, #0
 80061e4:	4630      	mov	r0, r6
 80061e6:	4639      	mov	r1, r7
 80061e8:	f7fa fc98 	bl	8000b1c <__aeabi_dcmplt>
 80061ec:	b150      	cbz	r0, 8006204 <_dtoa_r+0x184>
 80061ee:	9800      	ldr	r0, [sp, #0]
 80061f0:	f7fa f9b8 	bl	8000564 <__aeabi_i2d>
 80061f4:	4632      	mov	r2, r6
 80061f6:	463b      	mov	r3, r7
 80061f8:	f7fa fc86 	bl	8000b08 <__aeabi_dcmpeq>
 80061fc:	b910      	cbnz	r0, 8006204 <_dtoa_r+0x184>
 80061fe:	9b00      	ldr	r3, [sp, #0]
 8006200:	3b01      	subs	r3, #1
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	9b00      	ldr	r3, [sp, #0]
 8006206:	2b16      	cmp	r3, #22
 8006208:	d85a      	bhi.n	80062c0 <_dtoa_r+0x240>
 800620a:	9a00      	ldr	r2, [sp, #0]
 800620c:	4b57      	ldr	r3, [pc, #348]	; (800636c <_dtoa_r+0x2ec>)
 800620e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006216:	ec51 0b19 	vmov	r0, r1, d9
 800621a:	f7fa fc7f 	bl	8000b1c <__aeabi_dcmplt>
 800621e:	2800      	cmp	r0, #0
 8006220:	d050      	beq.n	80062c4 <_dtoa_r+0x244>
 8006222:	9b00      	ldr	r3, [sp, #0]
 8006224:	3b01      	subs	r3, #1
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	2300      	movs	r3, #0
 800622a:	930b      	str	r3, [sp, #44]	; 0x2c
 800622c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800622e:	1b5d      	subs	r5, r3, r5
 8006230:	1e6b      	subs	r3, r5, #1
 8006232:	9305      	str	r3, [sp, #20]
 8006234:	bf45      	ittet	mi
 8006236:	f1c5 0301 	rsbmi	r3, r5, #1
 800623a:	9304      	strmi	r3, [sp, #16]
 800623c:	2300      	movpl	r3, #0
 800623e:	2300      	movmi	r3, #0
 8006240:	bf4c      	ite	mi
 8006242:	9305      	strmi	r3, [sp, #20]
 8006244:	9304      	strpl	r3, [sp, #16]
 8006246:	9b00      	ldr	r3, [sp, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	db3d      	blt.n	80062c8 <_dtoa_r+0x248>
 800624c:	9b05      	ldr	r3, [sp, #20]
 800624e:	9a00      	ldr	r2, [sp, #0]
 8006250:	920a      	str	r2, [sp, #40]	; 0x28
 8006252:	4413      	add	r3, r2
 8006254:	9305      	str	r3, [sp, #20]
 8006256:	2300      	movs	r3, #0
 8006258:	9307      	str	r3, [sp, #28]
 800625a:	9b06      	ldr	r3, [sp, #24]
 800625c:	2b09      	cmp	r3, #9
 800625e:	f200 8089 	bhi.w	8006374 <_dtoa_r+0x2f4>
 8006262:	2b05      	cmp	r3, #5
 8006264:	bfc4      	itt	gt
 8006266:	3b04      	subgt	r3, #4
 8006268:	9306      	strgt	r3, [sp, #24]
 800626a:	9b06      	ldr	r3, [sp, #24]
 800626c:	f1a3 0302 	sub.w	r3, r3, #2
 8006270:	bfcc      	ite	gt
 8006272:	2500      	movgt	r5, #0
 8006274:	2501      	movle	r5, #1
 8006276:	2b03      	cmp	r3, #3
 8006278:	f200 8087 	bhi.w	800638a <_dtoa_r+0x30a>
 800627c:	e8df f003 	tbb	[pc, r3]
 8006280:	59383a2d 	.word	0x59383a2d
 8006284:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006288:	441d      	add	r5, r3
 800628a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800628e:	2b20      	cmp	r3, #32
 8006290:	bfc1      	itttt	gt
 8006292:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006296:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800629a:	fa0b f303 	lslgt.w	r3, fp, r3
 800629e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80062a2:	bfda      	itte	le
 80062a4:	f1c3 0320 	rsble	r3, r3, #32
 80062a8:	fa06 f003 	lslle.w	r0, r6, r3
 80062ac:	4318      	orrgt	r0, r3
 80062ae:	f7fa f949 	bl	8000544 <__aeabi_ui2d>
 80062b2:	2301      	movs	r3, #1
 80062b4:	4606      	mov	r6, r0
 80062b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80062ba:	3d01      	subs	r5, #1
 80062bc:	930e      	str	r3, [sp, #56]	; 0x38
 80062be:	e76a      	b.n	8006196 <_dtoa_r+0x116>
 80062c0:	2301      	movs	r3, #1
 80062c2:	e7b2      	b.n	800622a <_dtoa_r+0x1aa>
 80062c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80062c6:	e7b1      	b.n	800622c <_dtoa_r+0x1ac>
 80062c8:	9b04      	ldr	r3, [sp, #16]
 80062ca:	9a00      	ldr	r2, [sp, #0]
 80062cc:	1a9b      	subs	r3, r3, r2
 80062ce:	9304      	str	r3, [sp, #16]
 80062d0:	4253      	negs	r3, r2
 80062d2:	9307      	str	r3, [sp, #28]
 80062d4:	2300      	movs	r3, #0
 80062d6:	930a      	str	r3, [sp, #40]	; 0x28
 80062d8:	e7bf      	b.n	800625a <_dtoa_r+0x1da>
 80062da:	2300      	movs	r3, #0
 80062dc:	9308      	str	r3, [sp, #32]
 80062de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	dc55      	bgt.n	8006390 <_dtoa_r+0x310>
 80062e4:	2301      	movs	r3, #1
 80062e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80062ea:	461a      	mov	r2, r3
 80062ec:	9209      	str	r2, [sp, #36]	; 0x24
 80062ee:	e00c      	b.n	800630a <_dtoa_r+0x28a>
 80062f0:	2301      	movs	r3, #1
 80062f2:	e7f3      	b.n	80062dc <_dtoa_r+0x25c>
 80062f4:	2300      	movs	r3, #0
 80062f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062f8:	9308      	str	r3, [sp, #32]
 80062fa:	9b00      	ldr	r3, [sp, #0]
 80062fc:	4413      	add	r3, r2
 80062fe:	9302      	str	r3, [sp, #8]
 8006300:	3301      	adds	r3, #1
 8006302:	2b01      	cmp	r3, #1
 8006304:	9303      	str	r3, [sp, #12]
 8006306:	bfb8      	it	lt
 8006308:	2301      	movlt	r3, #1
 800630a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800630c:	2200      	movs	r2, #0
 800630e:	6042      	str	r2, [r0, #4]
 8006310:	2204      	movs	r2, #4
 8006312:	f102 0614 	add.w	r6, r2, #20
 8006316:	429e      	cmp	r6, r3
 8006318:	6841      	ldr	r1, [r0, #4]
 800631a:	d93d      	bls.n	8006398 <_dtoa_r+0x318>
 800631c:	4620      	mov	r0, r4
 800631e:	f000 fed7 	bl	80070d0 <_Balloc>
 8006322:	9001      	str	r0, [sp, #4]
 8006324:	2800      	cmp	r0, #0
 8006326:	d13b      	bne.n	80063a0 <_dtoa_r+0x320>
 8006328:	4b11      	ldr	r3, [pc, #68]	; (8006370 <_dtoa_r+0x2f0>)
 800632a:	4602      	mov	r2, r0
 800632c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006330:	e6c0      	b.n	80060b4 <_dtoa_r+0x34>
 8006332:	2301      	movs	r3, #1
 8006334:	e7df      	b.n	80062f6 <_dtoa_r+0x276>
 8006336:	bf00      	nop
 8006338:	636f4361 	.word	0x636f4361
 800633c:	3fd287a7 	.word	0x3fd287a7
 8006340:	8b60c8b3 	.word	0x8b60c8b3
 8006344:	3fc68a28 	.word	0x3fc68a28
 8006348:	509f79fb 	.word	0x509f79fb
 800634c:	3fd34413 	.word	0x3fd34413
 8006350:	08008169 	.word	0x08008169
 8006354:	08008180 	.word	0x08008180
 8006358:	7ff00000 	.word	0x7ff00000
 800635c:	08008165 	.word	0x08008165
 8006360:	0800815c 	.word	0x0800815c
 8006364:	08008139 	.word	0x08008139
 8006368:	3ff80000 	.word	0x3ff80000
 800636c:	080082d0 	.word	0x080082d0
 8006370:	080081db 	.word	0x080081db
 8006374:	2501      	movs	r5, #1
 8006376:	2300      	movs	r3, #0
 8006378:	9306      	str	r3, [sp, #24]
 800637a:	9508      	str	r5, [sp, #32]
 800637c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006380:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006384:	2200      	movs	r2, #0
 8006386:	2312      	movs	r3, #18
 8006388:	e7b0      	b.n	80062ec <_dtoa_r+0x26c>
 800638a:	2301      	movs	r3, #1
 800638c:	9308      	str	r3, [sp, #32]
 800638e:	e7f5      	b.n	800637c <_dtoa_r+0x2fc>
 8006390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006392:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006396:	e7b8      	b.n	800630a <_dtoa_r+0x28a>
 8006398:	3101      	adds	r1, #1
 800639a:	6041      	str	r1, [r0, #4]
 800639c:	0052      	lsls	r2, r2, #1
 800639e:	e7b8      	b.n	8006312 <_dtoa_r+0x292>
 80063a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063a2:	9a01      	ldr	r2, [sp, #4]
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	9b03      	ldr	r3, [sp, #12]
 80063a8:	2b0e      	cmp	r3, #14
 80063aa:	f200 809d 	bhi.w	80064e8 <_dtoa_r+0x468>
 80063ae:	2d00      	cmp	r5, #0
 80063b0:	f000 809a 	beq.w	80064e8 <_dtoa_r+0x468>
 80063b4:	9b00      	ldr	r3, [sp, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	dd32      	ble.n	8006420 <_dtoa_r+0x3a0>
 80063ba:	4ab7      	ldr	r2, [pc, #732]	; (8006698 <_dtoa_r+0x618>)
 80063bc:	f003 030f 	and.w	r3, r3, #15
 80063c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80063c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063c8:	9b00      	ldr	r3, [sp, #0]
 80063ca:	05d8      	lsls	r0, r3, #23
 80063cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80063d0:	d516      	bpl.n	8006400 <_dtoa_r+0x380>
 80063d2:	4bb2      	ldr	r3, [pc, #712]	; (800669c <_dtoa_r+0x61c>)
 80063d4:	ec51 0b19 	vmov	r0, r1, d9
 80063d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063dc:	f7fa fa56 	bl	800088c <__aeabi_ddiv>
 80063e0:	f007 070f 	and.w	r7, r7, #15
 80063e4:	4682      	mov	sl, r0
 80063e6:	468b      	mov	fp, r1
 80063e8:	2503      	movs	r5, #3
 80063ea:	4eac      	ldr	r6, [pc, #688]	; (800669c <_dtoa_r+0x61c>)
 80063ec:	b957      	cbnz	r7, 8006404 <_dtoa_r+0x384>
 80063ee:	4642      	mov	r2, r8
 80063f0:	464b      	mov	r3, r9
 80063f2:	4650      	mov	r0, sl
 80063f4:	4659      	mov	r1, fp
 80063f6:	f7fa fa49 	bl	800088c <__aeabi_ddiv>
 80063fa:	4682      	mov	sl, r0
 80063fc:	468b      	mov	fp, r1
 80063fe:	e028      	b.n	8006452 <_dtoa_r+0x3d2>
 8006400:	2502      	movs	r5, #2
 8006402:	e7f2      	b.n	80063ea <_dtoa_r+0x36a>
 8006404:	07f9      	lsls	r1, r7, #31
 8006406:	d508      	bpl.n	800641a <_dtoa_r+0x39a>
 8006408:	4640      	mov	r0, r8
 800640a:	4649      	mov	r1, r9
 800640c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006410:	f7fa f912 	bl	8000638 <__aeabi_dmul>
 8006414:	3501      	adds	r5, #1
 8006416:	4680      	mov	r8, r0
 8006418:	4689      	mov	r9, r1
 800641a:	107f      	asrs	r7, r7, #1
 800641c:	3608      	adds	r6, #8
 800641e:	e7e5      	b.n	80063ec <_dtoa_r+0x36c>
 8006420:	f000 809b 	beq.w	800655a <_dtoa_r+0x4da>
 8006424:	9b00      	ldr	r3, [sp, #0]
 8006426:	4f9d      	ldr	r7, [pc, #628]	; (800669c <_dtoa_r+0x61c>)
 8006428:	425e      	negs	r6, r3
 800642a:	4b9b      	ldr	r3, [pc, #620]	; (8006698 <_dtoa_r+0x618>)
 800642c:	f006 020f 	and.w	r2, r6, #15
 8006430:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006438:	ec51 0b19 	vmov	r0, r1, d9
 800643c:	f7fa f8fc 	bl	8000638 <__aeabi_dmul>
 8006440:	1136      	asrs	r6, r6, #4
 8006442:	4682      	mov	sl, r0
 8006444:	468b      	mov	fp, r1
 8006446:	2300      	movs	r3, #0
 8006448:	2502      	movs	r5, #2
 800644a:	2e00      	cmp	r6, #0
 800644c:	d17a      	bne.n	8006544 <_dtoa_r+0x4c4>
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1d3      	bne.n	80063fa <_dtoa_r+0x37a>
 8006452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 8082 	beq.w	800655e <_dtoa_r+0x4de>
 800645a:	4b91      	ldr	r3, [pc, #580]	; (80066a0 <_dtoa_r+0x620>)
 800645c:	2200      	movs	r2, #0
 800645e:	4650      	mov	r0, sl
 8006460:	4659      	mov	r1, fp
 8006462:	f7fa fb5b 	bl	8000b1c <__aeabi_dcmplt>
 8006466:	2800      	cmp	r0, #0
 8006468:	d079      	beq.n	800655e <_dtoa_r+0x4de>
 800646a:	9b03      	ldr	r3, [sp, #12]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d076      	beq.n	800655e <_dtoa_r+0x4de>
 8006470:	9b02      	ldr	r3, [sp, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	dd36      	ble.n	80064e4 <_dtoa_r+0x464>
 8006476:	9b00      	ldr	r3, [sp, #0]
 8006478:	4650      	mov	r0, sl
 800647a:	4659      	mov	r1, fp
 800647c:	1e5f      	subs	r7, r3, #1
 800647e:	2200      	movs	r2, #0
 8006480:	4b88      	ldr	r3, [pc, #544]	; (80066a4 <_dtoa_r+0x624>)
 8006482:	f7fa f8d9 	bl	8000638 <__aeabi_dmul>
 8006486:	9e02      	ldr	r6, [sp, #8]
 8006488:	4682      	mov	sl, r0
 800648a:	468b      	mov	fp, r1
 800648c:	3501      	adds	r5, #1
 800648e:	4628      	mov	r0, r5
 8006490:	f7fa f868 	bl	8000564 <__aeabi_i2d>
 8006494:	4652      	mov	r2, sl
 8006496:	465b      	mov	r3, fp
 8006498:	f7fa f8ce 	bl	8000638 <__aeabi_dmul>
 800649c:	4b82      	ldr	r3, [pc, #520]	; (80066a8 <_dtoa_r+0x628>)
 800649e:	2200      	movs	r2, #0
 80064a0:	f7f9 ff14 	bl	80002cc <__adddf3>
 80064a4:	46d0      	mov	r8, sl
 80064a6:	46d9      	mov	r9, fp
 80064a8:	4682      	mov	sl, r0
 80064aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80064ae:	2e00      	cmp	r6, #0
 80064b0:	d158      	bne.n	8006564 <_dtoa_r+0x4e4>
 80064b2:	4b7e      	ldr	r3, [pc, #504]	; (80066ac <_dtoa_r+0x62c>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	4640      	mov	r0, r8
 80064b8:	4649      	mov	r1, r9
 80064ba:	f7f9 ff05 	bl	80002c8 <__aeabi_dsub>
 80064be:	4652      	mov	r2, sl
 80064c0:	465b      	mov	r3, fp
 80064c2:	4680      	mov	r8, r0
 80064c4:	4689      	mov	r9, r1
 80064c6:	f7fa fb47 	bl	8000b58 <__aeabi_dcmpgt>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	f040 8295 	bne.w	80069fa <_dtoa_r+0x97a>
 80064d0:	4652      	mov	r2, sl
 80064d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80064d6:	4640      	mov	r0, r8
 80064d8:	4649      	mov	r1, r9
 80064da:	f7fa fb1f 	bl	8000b1c <__aeabi_dcmplt>
 80064de:	2800      	cmp	r0, #0
 80064e0:	f040 8289 	bne.w	80069f6 <_dtoa_r+0x976>
 80064e4:	ec5b ab19 	vmov	sl, fp, d9
 80064e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f2c0 8148 	blt.w	8006780 <_dtoa_r+0x700>
 80064f0:	9a00      	ldr	r2, [sp, #0]
 80064f2:	2a0e      	cmp	r2, #14
 80064f4:	f300 8144 	bgt.w	8006780 <_dtoa_r+0x700>
 80064f8:	4b67      	ldr	r3, [pc, #412]	; (8006698 <_dtoa_r+0x618>)
 80064fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006504:	2b00      	cmp	r3, #0
 8006506:	f280 80d5 	bge.w	80066b4 <_dtoa_r+0x634>
 800650a:	9b03      	ldr	r3, [sp, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	f300 80d1 	bgt.w	80066b4 <_dtoa_r+0x634>
 8006512:	f040 826f 	bne.w	80069f4 <_dtoa_r+0x974>
 8006516:	4b65      	ldr	r3, [pc, #404]	; (80066ac <_dtoa_r+0x62c>)
 8006518:	2200      	movs	r2, #0
 800651a:	4640      	mov	r0, r8
 800651c:	4649      	mov	r1, r9
 800651e:	f7fa f88b 	bl	8000638 <__aeabi_dmul>
 8006522:	4652      	mov	r2, sl
 8006524:	465b      	mov	r3, fp
 8006526:	f7fa fb0d 	bl	8000b44 <__aeabi_dcmpge>
 800652a:	9e03      	ldr	r6, [sp, #12]
 800652c:	4637      	mov	r7, r6
 800652e:	2800      	cmp	r0, #0
 8006530:	f040 8245 	bne.w	80069be <_dtoa_r+0x93e>
 8006534:	9d01      	ldr	r5, [sp, #4]
 8006536:	2331      	movs	r3, #49	; 0x31
 8006538:	f805 3b01 	strb.w	r3, [r5], #1
 800653c:	9b00      	ldr	r3, [sp, #0]
 800653e:	3301      	adds	r3, #1
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	e240      	b.n	80069c6 <_dtoa_r+0x946>
 8006544:	07f2      	lsls	r2, r6, #31
 8006546:	d505      	bpl.n	8006554 <_dtoa_r+0x4d4>
 8006548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800654c:	f7fa f874 	bl	8000638 <__aeabi_dmul>
 8006550:	3501      	adds	r5, #1
 8006552:	2301      	movs	r3, #1
 8006554:	1076      	asrs	r6, r6, #1
 8006556:	3708      	adds	r7, #8
 8006558:	e777      	b.n	800644a <_dtoa_r+0x3ca>
 800655a:	2502      	movs	r5, #2
 800655c:	e779      	b.n	8006452 <_dtoa_r+0x3d2>
 800655e:	9f00      	ldr	r7, [sp, #0]
 8006560:	9e03      	ldr	r6, [sp, #12]
 8006562:	e794      	b.n	800648e <_dtoa_r+0x40e>
 8006564:	9901      	ldr	r1, [sp, #4]
 8006566:	4b4c      	ldr	r3, [pc, #304]	; (8006698 <_dtoa_r+0x618>)
 8006568:	4431      	add	r1, r6
 800656a:	910d      	str	r1, [sp, #52]	; 0x34
 800656c:	9908      	ldr	r1, [sp, #32]
 800656e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006572:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006576:	2900      	cmp	r1, #0
 8006578:	d043      	beq.n	8006602 <_dtoa_r+0x582>
 800657a:	494d      	ldr	r1, [pc, #308]	; (80066b0 <_dtoa_r+0x630>)
 800657c:	2000      	movs	r0, #0
 800657e:	f7fa f985 	bl	800088c <__aeabi_ddiv>
 8006582:	4652      	mov	r2, sl
 8006584:	465b      	mov	r3, fp
 8006586:	f7f9 fe9f 	bl	80002c8 <__aeabi_dsub>
 800658a:	9d01      	ldr	r5, [sp, #4]
 800658c:	4682      	mov	sl, r0
 800658e:	468b      	mov	fp, r1
 8006590:	4649      	mov	r1, r9
 8006592:	4640      	mov	r0, r8
 8006594:	f7fa fb00 	bl	8000b98 <__aeabi_d2iz>
 8006598:	4606      	mov	r6, r0
 800659a:	f7f9 ffe3 	bl	8000564 <__aeabi_i2d>
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	4640      	mov	r0, r8
 80065a4:	4649      	mov	r1, r9
 80065a6:	f7f9 fe8f 	bl	80002c8 <__aeabi_dsub>
 80065aa:	3630      	adds	r6, #48	; 0x30
 80065ac:	f805 6b01 	strb.w	r6, [r5], #1
 80065b0:	4652      	mov	r2, sl
 80065b2:	465b      	mov	r3, fp
 80065b4:	4680      	mov	r8, r0
 80065b6:	4689      	mov	r9, r1
 80065b8:	f7fa fab0 	bl	8000b1c <__aeabi_dcmplt>
 80065bc:	2800      	cmp	r0, #0
 80065be:	d163      	bne.n	8006688 <_dtoa_r+0x608>
 80065c0:	4642      	mov	r2, r8
 80065c2:	464b      	mov	r3, r9
 80065c4:	4936      	ldr	r1, [pc, #216]	; (80066a0 <_dtoa_r+0x620>)
 80065c6:	2000      	movs	r0, #0
 80065c8:	f7f9 fe7e 	bl	80002c8 <__aeabi_dsub>
 80065cc:	4652      	mov	r2, sl
 80065ce:	465b      	mov	r3, fp
 80065d0:	f7fa faa4 	bl	8000b1c <__aeabi_dcmplt>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	f040 80b5 	bne.w	8006744 <_dtoa_r+0x6c4>
 80065da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065dc:	429d      	cmp	r5, r3
 80065de:	d081      	beq.n	80064e4 <_dtoa_r+0x464>
 80065e0:	4b30      	ldr	r3, [pc, #192]	; (80066a4 <_dtoa_r+0x624>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	4650      	mov	r0, sl
 80065e6:	4659      	mov	r1, fp
 80065e8:	f7fa f826 	bl	8000638 <__aeabi_dmul>
 80065ec:	4b2d      	ldr	r3, [pc, #180]	; (80066a4 <_dtoa_r+0x624>)
 80065ee:	4682      	mov	sl, r0
 80065f0:	468b      	mov	fp, r1
 80065f2:	4640      	mov	r0, r8
 80065f4:	4649      	mov	r1, r9
 80065f6:	2200      	movs	r2, #0
 80065f8:	f7fa f81e 	bl	8000638 <__aeabi_dmul>
 80065fc:	4680      	mov	r8, r0
 80065fe:	4689      	mov	r9, r1
 8006600:	e7c6      	b.n	8006590 <_dtoa_r+0x510>
 8006602:	4650      	mov	r0, sl
 8006604:	4659      	mov	r1, fp
 8006606:	f7fa f817 	bl	8000638 <__aeabi_dmul>
 800660a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800660c:	9d01      	ldr	r5, [sp, #4]
 800660e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006610:	4682      	mov	sl, r0
 8006612:	468b      	mov	fp, r1
 8006614:	4649      	mov	r1, r9
 8006616:	4640      	mov	r0, r8
 8006618:	f7fa fabe 	bl	8000b98 <__aeabi_d2iz>
 800661c:	4606      	mov	r6, r0
 800661e:	f7f9 ffa1 	bl	8000564 <__aeabi_i2d>
 8006622:	3630      	adds	r6, #48	; 0x30
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4640      	mov	r0, r8
 800662a:	4649      	mov	r1, r9
 800662c:	f7f9 fe4c 	bl	80002c8 <__aeabi_dsub>
 8006630:	f805 6b01 	strb.w	r6, [r5], #1
 8006634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006636:	429d      	cmp	r5, r3
 8006638:	4680      	mov	r8, r0
 800663a:	4689      	mov	r9, r1
 800663c:	f04f 0200 	mov.w	r2, #0
 8006640:	d124      	bne.n	800668c <_dtoa_r+0x60c>
 8006642:	4b1b      	ldr	r3, [pc, #108]	; (80066b0 <_dtoa_r+0x630>)
 8006644:	4650      	mov	r0, sl
 8006646:	4659      	mov	r1, fp
 8006648:	f7f9 fe40 	bl	80002cc <__adddf3>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4640      	mov	r0, r8
 8006652:	4649      	mov	r1, r9
 8006654:	f7fa fa80 	bl	8000b58 <__aeabi_dcmpgt>
 8006658:	2800      	cmp	r0, #0
 800665a:	d173      	bne.n	8006744 <_dtoa_r+0x6c4>
 800665c:	4652      	mov	r2, sl
 800665e:	465b      	mov	r3, fp
 8006660:	4913      	ldr	r1, [pc, #76]	; (80066b0 <_dtoa_r+0x630>)
 8006662:	2000      	movs	r0, #0
 8006664:	f7f9 fe30 	bl	80002c8 <__aeabi_dsub>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	4640      	mov	r0, r8
 800666e:	4649      	mov	r1, r9
 8006670:	f7fa fa54 	bl	8000b1c <__aeabi_dcmplt>
 8006674:	2800      	cmp	r0, #0
 8006676:	f43f af35 	beq.w	80064e4 <_dtoa_r+0x464>
 800667a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800667c:	1e6b      	subs	r3, r5, #1
 800667e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006680:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006684:	2b30      	cmp	r3, #48	; 0x30
 8006686:	d0f8      	beq.n	800667a <_dtoa_r+0x5fa>
 8006688:	9700      	str	r7, [sp, #0]
 800668a:	e049      	b.n	8006720 <_dtoa_r+0x6a0>
 800668c:	4b05      	ldr	r3, [pc, #20]	; (80066a4 <_dtoa_r+0x624>)
 800668e:	f7f9 ffd3 	bl	8000638 <__aeabi_dmul>
 8006692:	4680      	mov	r8, r0
 8006694:	4689      	mov	r9, r1
 8006696:	e7bd      	b.n	8006614 <_dtoa_r+0x594>
 8006698:	080082d0 	.word	0x080082d0
 800669c:	080082a8 	.word	0x080082a8
 80066a0:	3ff00000 	.word	0x3ff00000
 80066a4:	40240000 	.word	0x40240000
 80066a8:	401c0000 	.word	0x401c0000
 80066ac:	40140000 	.word	0x40140000
 80066b0:	3fe00000 	.word	0x3fe00000
 80066b4:	9d01      	ldr	r5, [sp, #4]
 80066b6:	4656      	mov	r6, sl
 80066b8:	465f      	mov	r7, fp
 80066ba:	4642      	mov	r2, r8
 80066bc:	464b      	mov	r3, r9
 80066be:	4630      	mov	r0, r6
 80066c0:	4639      	mov	r1, r7
 80066c2:	f7fa f8e3 	bl	800088c <__aeabi_ddiv>
 80066c6:	f7fa fa67 	bl	8000b98 <__aeabi_d2iz>
 80066ca:	4682      	mov	sl, r0
 80066cc:	f7f9 ff4a 	bl	8000564 <__aeabi_i2d>
 80066d0:	4642      	mov	r2, r8
 80066d2:	464b      	mov	r3, r9
 80066d4:	f7f9 ffb0 	bl	8000638 <__aeabi_dmul>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	4630      	mov	r0, r6
 80066de:	4639      	mov	r1, r7
 80066e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80066e4:	f7f9 fdf0 	bl	80002c8 <__aeabi_dsub>
 80066e8:	f805 6b01 	strb.w	r6, [r5], #1
 80066ec:	9e01      	ldr	r6, [sp, #4]
 80066ee:	9f03      	ldr	r7, [sp, #12]
 80066f0:	1bae      	subs	r6, r5, r6
 80066f2:	42b7      	cmp	r7, r6
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	d135      	bne.n	8006766 <_dtoa_r+0x6e6>
 80066fa:	f7f9 fde7 	bl	80002cc <__adddf3>
 80066fe:	4642      	mov	r2, r8
 8006700:	464b      	mov	r3, r9
 8006702:	4606      	mov	r6, r0
 8006704:	460f      	mov	r7, r1
 8006706:	f7fa fa27 	bl	8000b58 <__aeabi_dcmpgt>
 800670a:	b9d0      	cbnz	r0, 8006742 <_dtoa_r+0x6c2>
 800670c:	4642      	mov	r2, r8
 800670e:	464b      	mov	r3, r9
 8006710:	4630      	mov	r0, r6
 8006712:	4639      	mov	r1, r7
 8006714:	f7fa f9f8 	bl	8000b08 <__aeabi_dcmpeq>
 8006718:	b110      	cbz	r0, 8006720 <_dtoa_r+0x6a0>
 800671a:	f01a 0f01 	tst.w	sl, #1
 800671e:	d110      	bne.n	8006742 <_dtoa_r+0x6c2>
 8006720:	4620      	mov	r0, r4
 8006722:	ee18 1a10 	vmov	r1, s16
 8006726:	f000 fd13 	bl	8007150 <_Bfree>
 800672a:	2300      	movs	r3, #0
 800672c:	9800      	ldr	r0, [sp, #0]
 800672e:	702b      	strb	r3, [r5, #0]
 8006730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006732:	3001      	adds	r0, #1
 8006734:	6018      	str	r0, [r3, #0]
 8006736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006738:	2b00      	cmp	r3, #0
 800673a:	f43f acf1 	beq.w	8006120 <_dtoa_r+0xa0>
 800673e:	601d      	str	r5, [r3, #0]
 8006740:	e4ee      	b.n	8006120 <_dtoa_r+0xa0>
 8006742:	9f00      	ldr	r7, [sp, #0]
 8006744:	462b      	mov	r3, r5
 8006746:	461d      	mov	r5, r3
 8006748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800674c:	2a39      	cmp	r2, #57	; 0x39
 800674e:	d106      	bne.n	800675e <_dtoa_r+0x6de>
 8006750:	9a01      	ldr	r2, [sp, #4]
 8006752:	429a      	cmp	r2, r3
 8006754:	d1f7      	bne.n	8006746 <_dtoa_r+0x6c6>
 8006756:	9901      	ldr	r1, [sp, #4]
 8006758:	2230      	movs	r2, #48	; 0x30
 800675a:	3701      	adds	r7, #1
 800675c:	700a      	strb	r2, [r1, #0]
 800675e:	781a      	ldrb	r2, [r3, #0]
 8006760:	3201      	adds	r2, #1
 8006762:	701a      	strb	r2, [r3, #0]
 8006764:	e790      	b.n	8006688 <_dtoa_r+0x608>
 8006766:	4ba6      	ldr	r3, [pc, #664]	; (8006a00 <_dtoa_r+0x980>)
 8006768:	2200      	movs	r2, #0
 800676a:	f7f9 ff65 	bl	8000638 <__aeabi_dmul>
 800676e:	2200      	movs	r2, #0
 8006770:	2300      	movs	r3, #0
 8006772:	4606      	mov	r6, r0
 8006774:	460f      	mov	r7, r1
 8006776:	f7fa f9c7 	bl	8000b08 <__aeabi_dcmpeq>
 800677a:	2800      	cmp	r0, #0
 800677c:	d09d      	beq.n	80066ba <_dtoa_r+0x63a>
 800677e:	e7cf      	b.n	8006720 <_dtoa_r+0x6a0>
 8006780:	9a08      	ldr	r2, [sp, #32]
 8006782:	2a00      	cmp	r2, #0
 8006784:	f000 80d7 	beq.w	8006936 <_dtoa_r+0x8b6>
 8006788:	9a06      	ldr	r2, [sp, #24]
 800678a:	2a01      	cmp	r2, #1
 800678c:	f300 80ba 	bgt.w	8006904 <_dtoa_r+0x884>
 8006790:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006792:	2a00      	cmp	r2, #0
 8006794:	f000 80b2 	beq.w	80068fc <_dtoa_r+0x87c>
 8006798:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800679c:	9e07      	ldr	r6, [sp, #28]
 800679e:	9d04      	ldr	r5, [sp, #16]
 80067a0:	9a04      	ldr	r2, [sp, #16]
 80067a2:	441a      	add	r2, r3
 80067a4:	9204      	str	r2, [sp, #16]
 80067a6:	9a05      	ldr	r2, [sp, #20]
 80067a8:	2101      	movs	r1, #1
 80067aa:	441a      	add	r2, r3
 80067ac:	4620      	mov	r0, r4
 80067ae:	9205      	str	r2, [sp, #20]
 80067b0:	f000 fd86 	bl	80072c0 <__i2b>
 80067b4:	4607      	mov	r7, r0
 80067b6:	2d00      	cmp	r5, #0
 80067b8:	dd0c      	ble.n	80067d4 <_dtoa_r+0x754>
 80067ba:	9b05      	ldr	r3, [sp, #20]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	dd09      	ble.n	80067d4 <_dtoa_r+0x754>
 80067c0:	42ab      	cmp	r3, r5
 80067c2:	9a04      	ldr	r2, [sp, #16]
 80067c4:	bfa8      	it	ge
 80067c6:	462b      	movge	r3, r5
 80067c8:	1ad2      	subs	r2, r2, r3
 80067ca:	9204      	str	r2, [sp, #16]
 80067cc:	9a05      	ldr	r2, [sp, #20]
 80067ce:	1aed      	subs	r5, r5, r3
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	9305      	str	r3, [sp, #20]
 80067d4:	9b07      	ldr	r3, [sp, #28]
 80067d6:	b31b      	cbz	r3, 8006820 <_dtoa_r+0x7a0>
 80067d8:	9b08      	ldr	r3, [sp, #32]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 80af 	beq.w	800693e <_dtoa_r+0x8be>
 80067e0:	2e00      	cmp	r6, #0
 80067e2:	dd13      	ble.n	800680c <_dtoa_r+0x78c>
 80067e4:	4639      	mov	r1, r7
 80067e6:	4632      	mov	r2, r6
 80067e8:	4620      	mov	r0, r4
 80067ea:	f000 fe29 	bl	8007440 <__pow5mult>
 80067ee:	ee18 2a10 	vmov	r2, s16
 80067f2:	4601      	mov	r1, r0
 80067f4:	4607      	mov	r7, r0
 80067f6:	4620      	mov	r0, r4
 80067f8:	f000 fd78 	bl	80072ec <__multiply>
 80067fc:	ee18 1a10 	vmov	r1, s16
 8006800:	4680      	mov	r8, r0
 8006802:	4620      	mov	r0, r4
 8006804:	f000 fca4 	bl	8007150 <_Bfree>
 8006808:	ee08 8a10 	vmov	s16, r8
 800680c:	9b07      	ldr	r3, [sp, #28]
 800680e:	1b9a      	subs	r2, r3, r6
 8006810:	d006      	beq.n	8006820 <_dtoa_r+0x7a0>
 8006812:	ee18 1a10 	vmov	r1, s16
 8006816:	4620      	mov	r0, r4
 8006818:	f000 fe12 	bl	8007440 <__pow5mult>
 800681c:	ee08 0a10 	vmov	s16, r0
 8006820:	2101      	movs	r1, #1
 8006822:	4620      	mov	r0, r4
 8006824:	f000 fd4c 	bl	80072c0 <__i2b>
 8006828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800682a:	2b00      	cmp	r3, #0
 800682c:	4606      	mov	r6, r0
 800682e:	f340 8088 	ble.w	8006942 <_dtoa_r+0x8c2>
 8006832:	461a      	mov	r2, r3
 8006834:	4601      	mov	r1, r0
 8006836:	4620      	mov	r0, r4
 8006838:	f000 fe02 	bl	8007440 <__pow5mult>
 800683c:	9b06      	ldr	r3, [sp, #24]
 800683e:	2b01      	cmp	r3, #1
 8006840:	4606      	mov	r6, r0
 8006842:	f340 8081 	ble.w	8006948 <_dtoa_r+0x8c8>
 8006846:	f04f 0800 	mov.w	r8, #0
 800684a:	6933      	ldr	r3, [r6, #16]
 800684c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006850:	6918      	ldr	r0, [r3, #16]
 8006852:	f000 fce5 	bl	8007220 <__hi0bits>
 8006856:	f1c0 0020 	rsb	r0, r0, #32
 800685a:	9b05      	ldr	r3, [sp, #20]
 800685c:	4418      	add	r0, r3
 800685e:	f010 001f 	ands.w	r0, r0, #31
 8006862:	f000 8092 	beq.w	800698a <_dtoa_r+0x90a>
 8006866:	f1c0 0320 	rsb	r3, r0, #32
 800686a:	2b04      	cmp	r3, #4
 800686c:	f340 808a 	ble.w	8006984 <_dtoa_r+0x904>
 8006870:	f1c0 001c 	rsb	r0, r0, #28
 8006874:	9b04      	ldr	r3, [sp, #16]
 8006876:	4403      	add	r3, r0
 8006878:	9304      	str	r3, [sp, #16]
 800687a:	9b05      	ldr	r3, [sp, #20]
 800687c:	4403      	add	r3, r0
 800687e:	4405      	add	r5, r0
 8006880:	9305      	str	r3, [sp, #20]
 8006882:	9b04      	ldr	r3, [sp, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	dd07      	ble.n	8006898 <_dtoa_r+0x818>
 8006888:	ee18 1a10 	vmov	r1, s16
 800688c:	461a      	mov	r2, r3
 800688e:	4620      	mov	r0, r4
 8006890:	f000 fe30 	bl	80074f4 <__lshift>
 8006894:	ee08 0a10 	vmov	s16, r0
 8006898:	9b05      	ldr	r3, [sp, #20]
 800689a:	2b00      	cmp	r3, #0
 800689c:	dd05      	ble.n	80068aa <_dtoa_r+0x82a>
 800689e:	4631      	mov	r1, r6
 80068a0:	461a      	mov	r2, r3
 80068a2:	4620      	mov	r0, r4
 80068a4:	f000 fe26 	bl	80074f4 <__lshift>
 80068a8:	4606      	mov	r6, r0
 80068aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d06e      	beq.n	800698e <_dtoa_r+0x90e>
 80068b0:	ee18 0a10 	vmov	r0, s16
 80068b4:	4631      	mov	r1, r6
 80068b6:	f000 fe8d 	bl	80075d4 <__mcmp>
 80068ba:	2800      	cmp	r0, #0
 80068bc:	da67      	bge.n	800698e <_dtoa_r+0x90e>
 80068be:	9b00      	ldr	r3, [sp, #0]
 80068c0:	3b01      	subs	r3, #1
 80068c2:	ee18 1a10 	vmov	r1, s16
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	220a      	movs	r2, #10
 80068ca:	2300      	movs	r3, #0
 80068cc:	4620      	mov	r0, r4
 80068ce:	f000 fc61 	bl	8007194 <__multadd>
 80068d2:	9b08      	ldr	r3, [sp, #32]
 80068d4:	ee08 0a10 	vmov	s16, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 81b1 	beq.w	8006c40 <_dtoa_r+0xbc0>
 80068de:	2300      	movs	r3, #0
 80068e0:	4639      	mov	r1, r7
 80068e2:	220a      	movs	r2, #10
 80068e4:	4620      	mov	r0, r4
 80068e6:	f000 fc55 	bl	8007194 <__multadd>
 80068ea:	9b02      	ldr	r3, [sp, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	4607      	mov	r7, r0
 80068f0:	f300 808e 	bgt.w	8006a10 <_dtoa_r+0x990>
 80068f4:	9b06      	ldr	r3, [sp, #24]
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	dc51      	bgt.n	800699e <_dtoa_r+0x91e>
 80068fa:	e089      	b.n	8006a10 <_dtoa_r+0x990>
 80068fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006902:	e74b      	b.n	800679c <_dtoa_r+0x71c>
 8006904:	9b03      	ldr	r3, [sp, #12]
 8006906:	1e5e      	subs	r6, r3, #1
 8006908:	9b07      	ldr	r3, [sp, #28]
 800690a:	42b3      	cmp	r3, r6
 800690c:	bfbf      	itttt	lt
 800690e:	9b07      	ldrlt	r3, [sp, #28]
 8006910:	9607      	strlt	r6, [sp, #28]
 8006912:	1af2      	sublt	r2, r6, r3
 8006914:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006916:	bfb6      	itet	lt
 8006918:	189b      	addlt	r3, r3, r2
 800691a:	1b9e      	subge	r6, r3, r6
 800691c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800691e:	9b03      	ldr	r3, [sp, #12]
 8006920:	bfb8      	it	lt
 8006922:	2600      	movlt	r6, #0
 8006924:	2b00      	cmp	r3, #0
 8006926:	bfb7      	itett	lt
 8006928:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800692c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006930:	1a9d      	sublt	r5, r3, r2
 8006932:	2300      	movlt	r3, #0
 8006934:	e734      	b.n	80067a0 <_dtoa_r+0x720>
 8006936:	9e07      	ldr	r6, [sp, #28]
 8006938:	9d04      	ldr	r5, [sp, #16]
 800693a:	9f08      	ldr	r7, [sp, #32]
 800693c:	e73b      	b.n	80067b6 <_dtoa_r+0x736>
 800693e:	9a07      	ldr	r2, [sp, #28]
 8006940:	e767      	b.n	8006812 <_dtoa_r+0x792>
 8006942:	9b06      	ldr	r3, [sp, #24]
 8006944:	2b01      	cmp	r3, #1
 8006946:	dc18      	bgt.n	800697a <_dtoa_r+0x8fa>
 8006948:	f1ba 0f00 	cmp.w	sl, #0
 800694c:	d115      	bne.n	800697a <_dtoa_r+0x8fa>
 800694e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006952:	b993      	cbnz	r3, 800697a <_dtoa_r+0x8fa>
 8006954:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006958:	0d1b      	lsrs	r3, r3, #20
 800695a:	051b      	lsls	r3, r3, #20
 800695c:	b183      	cbz	r3, 8006980 <_dtoa_r+0x900>
 800695e:	9b04      	ldr	r3, [sp, #16]
 8006960:	3301      	adds	r3, #1
 8006962:	9304      	str	r3, [sp, #16]
 8006964:	9b05      	ldr	r3, [sp, #20]
 8006966:	3301      	adds	r3, #1
 8006968:	9305      	str	r3, [sp, #20]
 800696a:	f04f 0801 	mov.w	r8, #1
 800696e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006970:	2b00      	cmp	r3, #0
 8006972:	f47f af6a 	bne.w	800684a <_dtoa_r+0x7ca>
 8006976:	2001      	movs	r0, #1
 8006978:	e76f      	b.n	800685a <_dtoa_r+0x7da>
 800697a:	f04f 0800 	mov.w	r8, #0
 800697e:	e7f6      	b.n	800696e <_dtoa_r+0x8ee>
 8006980:	4698      	mov	r8, r3
 8006982:	e7f4      	b.n	800696e <_dtoa_r+0x8ee>
 8006984:	f43f af7d 	beq.w	8006882 <_dtoa_r+0x802>
 8006988:	4618      	mov	r0, r3
 800698a:	301c      	adds	r0, #28
 800698c:	e772      	b.n	8006874 <_dtoa_r+0x7f4>
 800698e:	9b03      	ldr	r3, [sp, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	dc37      	bgt.n	8006a04 <_dtoa_r+0x984>
 8006994:	9b06      	ldr	r3, [sp, #24]
 8006996:	2b02      	cmp	r3, #2
 8006998:	dd34      	ble.n	8006a04 <_dtoa_r+0x984>
 800699a:	9b03      	ldr	r3, [sp, #12]
 800699c:	9302      	str	r3, [sp, #8]
 800699e:	9b02      	ldr	r3, [sp, #8]
 80069a0:	b96b      	cbnz	r3, 80069be <_dtoa_r+0x93e>
 80069a2:	4631      	mov	r1, r6
 80069a4:	2205      	movs	r2, #5
 80069a6:	4620      	mov	r0, r4
 80069a8:	f000 fbf4 	bl	8007194 <__multadd>
 80069ac:	4601      	mov	r1, r0
 80069ae:	4606      	mov	r6, r0
 80069b0:	ee18 0a10 	vmov	r0, s16
 80069b4:	f000 fe0e 	bl	80075d4 <__mcmp>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	f73f adbb 	bgt.w	8006534 <_dtoa_r+0x4b4>
 80069be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069c0:	9d01      	ldr	r5, [sp, #4]
 80069c2:	43db      	mvns	r3, r3
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	f04f 0800 	mov.w	r8, #0
 80069ca:	4631      	mov	r1, r6
 80069cc:	4620      	mov	r0, r4
 80069ce:	f000 fbbf 	bl	8007150 <_Bfree>
 80069d2:	2f00      	cmp	r7, #0
 80069d4:	f43f aea4 	beq.w	8006720 <_dtoa_r+0x6a0>
 80069d8:	f1b8 0f00 	cmp.w	r8, #0
 80069dc:	d005      	beq.n	80069ea <_dtoa_r+0x96a>
 80069de:	45b8      	cmp	r8, r7
 80069e0:	d003      	beq.n	80069ea <_dtoa_r+0x96a>
 80069e2:	4641      	mov	r1, r8
 80069e4:	4620      	mov	r0, r4
 80069e6:	f000 fbb3 	bl	8007150 <_Bfree>
 80069ea:	4639      	mov	r1, r7
 80069ec:	4620      	mov	r0, r4
 80069ee:	f000 fbaf 	bl	8007150 <_Bfree>
 80069f2:	e695      	b.n	8006720 <_dtoa_r+0x6a0>
 80069f4:	2600      	movs	r6, #0
 80069f6:	4637      	mov	r7, r6
 80069f8:	e7e1      	b.n	80069be <_dtoa_r+0x93e>
 80069fa:	9700      	str	r7, [sp, #0]
 80069fc:	4637      	mov	r7, r6
 80069fe:	e599      	b.n	8006534 <_dtoa_r+0x4b4>
 8006a00:	40240000 	.word	0x40240000
 8006a04:	9b08      	ldr	r3, [sp, #32]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 80ca 	beq.w	8006ba0 <_dtoa_r+0xb20>
 8006a0c:	9b03      	ldr	r3, [sp, #12]
 8006a0e:	9302      	str	r3, [sp, #8]
 8006a10:	2d00      	cmp	r5, #0
 8006a12:	dd05      	ble.n	8006a20 <_dtoa_r+0x9a0>
 8006a14:	4639      	mov	r1, r7
 8006a16:	462a      	mov	r2, r5
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f000 fd6b 	bl	80074f4 <__lshift>
 8006a1e:	4607      	mov	r7, r0
 8006a20:	f1b8 0f00 	cmp.w	r8, #0
 8006a24:	d05b      	beq.n	8006ade <_dtoa_r+0xa5e>
 8006a26:	6879      	ldr	r1, [r7, #4]
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f000 fb51 	bl	80070d0 <_Balloc>
 8006a2e:	4605      	mov	r5, r0
 8006a30:	b928      	cbnz	r0, 8006a3e <_dtoa_r+0x9be>
 8006a32:	4b87      	ldr	r3, [pc, #540]	; (8006c50 <_dtoa_r+0xbd0>)
 8006a34:	4602      	mov	r2, r0
 8006a36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006a3a:	f7ff bb3b 	b.w	80060b4 <_dtoa_r+0x34>
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	3202      	adds	r2, #2
 8006a42:	0092      	lsls	r2, r2, #2
 8006a44:	f107 010c 	add.w	r1, r7, #12
 8006a48:	300c      	adds	r0, #12
 8006a4a:	f000 fb33 	bl	80070b4 <memcpy>
 8006a4e:	2201      	movs	r2, #1
 8006a50:	4629      	mov	r1, r5
 8006a52:	4620      	mov	r0, r4
 8006a54:	f000 fd4e 	bl	80074f4 <__lshift>
 8006a58:	9b01      	ldr	r3, [sp, #4]
 8006a5a:	f103 0901 	add.w	r9, r3, #1
 8006a5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006a62:	4413      	add	r3, r2
 8006a64:	9305      	str	r3, [sp, #20]
 8006a66:	f00a 0301 	and.w	r3, sl, #1
 8006a6a:	46b8      	mov	r8, r7
 8006a6c:	9304      	str	r3, [sp, #16]
 8006a6e:	4607      	mov	r7, r0
 8006a70:	4631      	mov	r1, r6
 8006a72:	ee18 0a10 	vmov	r0, s16
 8006a76:	f7ff fa75 	bl	8005f64 <quorem>
 8006a7a:	4641      	mov	r1, r8
 8006a7c:	9002      	str	r0, [sp, #8]
 8006a7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006a82:	ee18 0a10 	vmov	r0, s16
 8006a86:	f000 fda5 	bl	80075d4 <__mcmp>
 8006a8a:	463a      	mov	r2, r7
 8006a8c:	9003      	str	r0, [sp, #12]
 8006a8e:	4631      	mov	r1, r6
 8006a90:	4620      	mov	r0, r4
 8006a92:	f000 fdbb 	bl	800760c <__mdiff>
 8006a96:	68c2      	ldr	r2, [r0, #12]
 8006a98:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006a9c:	4605      	mov	r5, r0
 8006a9e:	bb02      	cbnz	r2, 8006ae2 <_dtoa_r+0xa62>
 8006aa0:	4601      	mov	r1, r0
 8006aa2:	ee18 0a10 	vmov	r0, s16
 8006aa6:	f000 fd95 	bl	80075d4 <__mcmp>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	4629      	mov	r1, r5
 8006aae:	4620      	mov	r0, r4
 8006ab0:	9207      	str	r2, [sp, #28]
 8006ab2:	f000 fb4d 	bl	8007150 <_Bfree>
 8006ab6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006aba:	ea43 0102 	orr.w	r1, r3, r2
 8006abe:	9b04      	ldr	r3, [sp, #16]
 8006ac0:	430b      	orrs	r3, r1
 8006ac2:	464d      	mov	r5, r9
 8006ac4:	d10f      	bne.n	8006ae6 <_dtoa_r+0xa66>
 8006ac6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006aca:	d02a      	beq.n	8006b22 <_dtoa_r+0xaa2>
 8006acc:	9b03      	ldr	r3, [sp, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	dd02      	ble.n	8006ad8 <_dtoa_r+0xa58>
 8006ad2:	9b02      	ldr	r3, [sp, #8]
 8006ad4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006ad8:	f88b a000 	strb.w	sl, [fp]
 8006adc:	e775      	b.n	80069ca <_dtoa_r+0x94a>
 8006ade:	4638      	mov	r0, r7
 8006ae0:	e7ba      	b.n	8006a58 <_dtoa_r+0x9d8>
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	e7e2      	b.n	8006aac <_dtoa_r+0xa2c>
 8006ae6:	9b03      	ldr	r3, [sp, #12]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	db04      	blt.n	8006af6 <_dtoa_r+0xa76>
 8006aec:	9906      	ldr	r1, [sp, #24]
 8006aee:	430b      	orrs	r3, r1
 8006af0:	9904      	ldr	r1, [sp, #16]
 8006af2:	430b      	orrs	r3, r1
 8006af4:	d122      	bne.n	8006b3c <_dtoa_r+0xabc>
 8006af6:	2a00      	cmp	r2, #0
 8006af8:	ddee      	ble.n	8006ad8 <_dtoa_r+0xa58>
 8006afa:	ee18 1a10 	vmov	r1, s16
 8006afe:	2201      	movs	r2, #1
 8006b00:	4620      	mov	r0, r4
 8006b02:	f000 fcf7 	bl	80074f4 <__lshift>
 8006b06:	4631      	mov	r1, r6
 8006b08:	ee08 0a10 	vmov	s16, r0
 8006b0c:	f000 fd62 	bl	80075d4 <__mcmp>
 8006b10:	2800      	cmp	r0, #0
 8006b12:	dc03      	bgt.n	8006b1c <_dtoa_r+0xa9c>
 8006b14:	d1e0      	bne.n	8006ad8 <_dtoa_r+0xa58>
 8006b16:	f01a 0f01 	tst.w	sl, #1
 8006b1a:	d0dd      	beq.n	8006ad8 <_dtoa_r+0xa58>
 8006b1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b20:	d1d7      	bne.n	8006ad2 <_dtoa_r+0xa52>
 8006b22:	2339      	movs	r3, #57	; 0x39
 8006b24:	f88b 3000 	strb.w	r3, [fp]
 8006b28:	462b      	mov	r3, r5
 8006b2a:	461d      	mov	r5, r3
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006b32:	2a39      	cmp	r2, #57	; 0x39
 8006b34:	d071      	beq.n	8006c1a <_dtoa_r+0xb9a>
 8006b36:	3201      	adds	r2, #1
 8006b38:	701a      	strb	r2, [r3, #0]
 8006b3a:	e746      	b.n	80069ca <_dtoa_r+0x94a>
 8006b3c:	2a00      	cmp	r2, #0
 8006b3e:	dd07      	ble.n	8006b50 <_dtoa_r+0xad0>
 8006b40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b44:	d0ed      	beq.n	8006b22 <_dtoa_r+0xaa2>
 8006b46:	f10a 0301 	add.w	r3, sl, #1
 8006b4a:	f88b 3000 	strb.w	r3, [fp]
 8006b4e:	e73c      	b.n	80069ca <_dtoa_r+0x94a>
 8006b50:	9b05      	ldr	r3, [sp, #20]
 8006b52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006b56:	4599      	cmp	r9, r3
 8006b58:	d047      	beq.n	8006bea <_dtoa_r+0xb6a>
 8006b5a:	ee18 1a10 	vmov	r1, s16
 8006b5e:	2300      	movs	r3, #0
 8006b60:	220a      	movs	r2, #10
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 fb16 	bl	8007194 <__multadd>
 8006b68:	45b8      	cmp	r8, r7
 8006b6a:	ee08 0a10 	vmov	s16, r0
 8006b6e:	f04f 0300 	mov.w	r3, #0
 8006b72:	f04f 020a 	mov.w	r2, #10
 8006b76:	4641      	mov	r1, r8
 8006b78:	4620      	mov	r0, r4
 8006b7a:	d106      	bne.n	8006b8a <_dtoa_r+0xb0a>
 8006b7c:	f000 fb0a 	bl	8007194 <__multadd>
 8006b80:	4680      	mov	r8, r0
 8006b82:	4607      	mov	r7, r0
 8006b84:	f109 0901 	add.w	r9, r9, #1
 8006b88:	e772      	b.n	8006a70 <_dtoa_r+0x9f0>
 8006b8a:	f000 fb03 	bl	8007194 <__multadd>
 8006b8e:	4639      	mov	r1, r7
 8006b90:	4680      	mov	r8, r0
 8006b92:	2300      	movs	r3, #0
 8006b94:	220a      	movs	r2, #10
 8006b96:	4620      	mov	r0, r4
 8006b98:	f000 fafc 	bl	8007194 <__multadd>
 8006b9c:	4607      	mov	r7, r0
 8006b9e:	e7f1      	b.n	8006b84 <_dtoa_r+0xb04>
 8006ba0:	9b03      	ldr	r3, [sp, #12]
 8006ba2:	9302      	str	r3, [sp, #8]
 8006ba4:	9d01      	ldr	r5, [sp, #4]
 8006ba6:	ee18 0a10 	vmov	r0, s16
 8006baa:	4631      	mov	r1, r6
 8006bac:	f7ff f9da 	bl	8005f64 <quorem>
 8006bb0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006bb4:	9b01      	ldr	r3, [sp, #4]
 8006bb6:	f805 ab01 	strb.w	sl, [r5], #1
 8006bba:	1aea      	subs	r2, r5, r3
 8006bbc:	9b02      	ldr	r3, [sp, #8]
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	dd09      	ble.n	8006bd6 <_dtoa_r+0xb56>
 8006bc2:	ee18 1a10 	vmov	r1, s16
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	220a      	movs	r2, #10
 8006bca:	4620      	mov	r0, r4
 8006bcc:	f000 fae2 	bl	8007194 <__multadd>
 8006bd0:	ee08 0a10 	vmov	s16, r0
 8006bd4:	e7e7      	b.n	8006ba6 <_dtoa_r+0xb26>
 8006bd6:	9b02      	ldr	r3, [sp, #8]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	bfc8      	it	gt
 8006bdc:	461d      	movgt	r5, r3
 8006bde:	9b01      	ldr	r3, [sp, #4]
 8006be0:	bfd8      	it	le
 8006be2:	2501      	movle	r5, #1
 8006be4:	441d      	add	r5, r3
 8006be6:	f04f 0800 	mov.w	r8, #0
 8006bea:	ee18 1a10 	vmov	r1, s16
 8006bee:	2201      	movs	r2, #1
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	f000 fc7f 	bl	80074f4 <__lshift>
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	ee08 0a10 	vmov	s16, r0
 8006bfc:	f000 fcea 	bl	80075d4 <__mcmp>
 8006c00:	2800      	cmp	r0, #0
 8006c02:	dc91      	bgt.n	8006b28 <_dtoa_r+0xaa8>
 8006c04:	d102      	bne.n	8006c0c <_dtoa_r+0xb8c>
 8006c06:	f01a 0f01 	tst.w	sl, #1
 8006c0a:	d18d      	bne.n	8006b28 <_dtoa_r+0xaa8>
 8006c0c:	462b      	mov	r3, r5
 8006c0e:	461d      	mov	r5, r3
 8006c10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c14:	2a30      	cmp	r2, #48	; 0x30
 8006c16:	d0fa      	beq.n	8006c0e <_dtoa_r+0xb8e>
 8006c18:	e6d7      	b.n	80069ca <_dtoa_r+0x94a>
 8006c1a:	9a01      	ldr	r2, [sp, #4]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d184      	bne.n	8006b2a <_dtoa_r+0xaaa>
 8006c20:	9b00      	ldr	r3, [sp, #0]
 8006c22:	3301      	adds	r3, #1
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	2331      	movs	r3, #49	; 0x31
 8006c28:	7013      	strb	r3, [r2, #0]
 8006c2a:	e6ce      	b.n	80069ca <_dtoa_r+0x94a>
 8006c2c:	4b09      	ldr	r3, [pc, #36]	; (8006c54 <_dtoa_r+0xbd4>)
 8006c2e:	f7ff ba95 	b.w	800615c <_dtoa_r+0xdc>
 8006c32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f47f aa6e 	bne.w	8006116 <_dtoa_r+0x96>
 8006c3a:	4b07      	ldr	r3, [pc, #28]	; (8006c58 <_dtoa_r+0xbd8>)
 8006c3c:	f7ff ba8e 	b.w	800615c <_dtoa_r+0xdc>
 8006c40:	9b02      	ldr	r3, [sp, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	dcae      	bgt.n	8006ba4 <_dtoa_r+0xb24>
 8006c46:	9b06      	ldr	r3, [sp, #24]
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	f73f aea8 	bgt.w	800699e <_dtoa_r+0x91e>
 8006c4e:	e7a9      	b.n	8006ba4 <_dtoa_r+0xb24>
 8006c50:	080081db 	.word	0x080081db
 8006c54:	08008138 	.word	0x08008138
 8006c58:	0800815c 	.word	0x0800815c

08006c5c <__sflush_r>:
 8006c5c:	898a      	ldrh	r2, [r1, #12]
 8006c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c62:	4605      	mov	r5, r0
 8006c64:	0710      	lsls	r0, r2, #28
 8006c66:	460c      	mov	r4, r1
 8006c68:	d458      	bmi.n	8006d1c <__sflush_r+0xc0>
 8006c6a:	684b      	ldr	r3, [r1, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	dc05      	bgt.n	8006c7c <__sflush_r+0x20>
 8006c70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	dc02      	bgt.n	8006c7c <__sflush_r+0x20>
 8006c76:	2000      	movs	r0, #0
 8006c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c7e:	2e00      	cmp	r6, #0
 8006c80:	d0f9      	beq.n	8006c76 <__sflush_r+0x1a>
 8006c82:	2300      	movs	r3, #0
 8006c84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c88:	682f      	ldr	r7, [r5, #0]
 8006c8a:	602b      	str	r3, [r5, #0]
 8006c8c:	d032      	beq.n	8006cf4 <__sflush_r+0x98>
 8006c8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c90:	89a3      	ldrh	r3, [r4, #12]
 8006c92:	075a      	lsls	r2, r3, #29
 8006c94:	d505      	bpl.n	8006ca2 <__sflush_r+0x46>
 8006c96:	6863      	ldr	r3, [r4, #4]
 8006c98:	1ac0      	subs	r0, r0, r3
 8006c9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c9c:	b10b      	cbz	r3, 8006ca2 <__sflush_r+0x46>
 8006c9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ca0:	1ac0      	subs	r0, r0, r3
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ca8:	6a21      	ldr	r1, [r4, #32]
 8006caa:	4628      	mov	r0, r5
 8006cac:	47b0      	blx	r6
 8006cae:	1c43      	adds	r3, r0, #1
 8006cb0:	89a3      	ldrh	r3, [r4, #12]
 8006cb2:	d106      	bne.n	8006cc2 <__sflush_r+0x66>
 8006cb4:	6829      	ldr	r1, [r5, #0]
 8006cb6:	291d      	cmp	r1, #29
 8006cb8:	d82c      	bhi.n	8006d14 <__sflush_r+0xb8>
 8006cba:	4a2a      	ldr	r2, [pc, #168]	; (8006d64 <__sflush_r+0x108>)
 8006cbc:	40ca      	lsrs	r2, r1
 8006cbe:	07d6      	lsls	r6, r2, #31
 8006cc0:	d528      	bpl.n	8006d14 <__sflush_r+0xb8>
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	6062      	str	r2, [r4, #4]
 8006cc6:	04d9      	lsls	r1, r3, #19
 8006cc8:	6922      	ldr	r2, [r4, #16]
 8006cca:	6022      	str	r2, [r4, #0]
 8006ccc:	d504      	bpl.n	8006cd8 <__sflush_r+0x7c>
 8006cce:	1c42      	adds	r2, r0, #1
 8006cd0:	d101      	bne.n	8006cd6 <__sflush_r+0x7a>
 8006cd2:	682b      	ldr	r3, [r5, #0]
 8006cd4:	b903      	cbnz	r3, 8006cd8 <__sflush_r+0x7c>
 8006cd6:	6560      	str	r0, [r4, #84]	; 0x54
 8006cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cda:	602f      	str	r7, [r5, #0]
 8006cdc:	2900      	cmp	r1, #0
 8006cde:	d0ca      	beq.n	8006c76 <__sflush_r+0x1a>
 8006ce0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ce4:	4299      	cmp	r1, r3
 8006ce6:	d002      	beq.n	8006cee <__sflush_r+0x92>
 8006ce8:	4628      	mov	r0, r5
 8006cea:	f000 fd8b 	bl	8007804 <_free_r>
 8006cee:	2000      	movs	r0, #0
 8006cf0:	6360      	str	r0, [r4, #52]	; 0x34
 8006cf2:	e7c1      	b.n	8006c78 <__sflush_r+0x1c>
 8006cf4:	6a21      	ldr	r1, [r4, #32]
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	47b0      	blx	r6
 8006cfc:	1c41      	adds	r1, r0, #1
 8006cfe:	d1c7      	bne.n	8006c90 <__sflush_r+0x34>
 8006d00:	682b      	ldr	r3, [r5, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d0c4      	beq.n	8006c90 <__sflush_r+0x34>
 8006d06:	2b1d      	cmp	r3, #29
 8006d08:	d001      	beq.n	8006d0e <__sflush_r+0xb2>
 8006d0a:	2b16      	cmp	r3, #22
 8006d0c:	d101      	bne.n	8006d12 <__sflush_r+0xb6>
 8006d0e:	602f      	str	r7, [r5, #0]
 8006d10:	e7b1      	b.n	8006c76 <__sflush_r+0x1a>
 8006d12:	89a3      	ldrh	r3, [r4, #12]
 8006d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d18:	81a3      	strh	r3, [r4, #12]
 8006d1a:	e7ad      	b.n	8006c78 <__sflush_r+0x1c>
 8006d1c:	690f      	ldr	r7, [r1, #16]
 8006d1e:	2f00      	cmp	r7, #0
 8006d20:	d0a9      	beq.n	8006c76 <__sflush_r+0x1a>
 8006d22:	0793      	lsls	r3, r2, #30
 8006d24:	680e      	ldr	r6, [r1, #0]
 8006d26:	bf08      	it	eq
 8006d28:	694b      	ldreq	r3, [r1, #20]
 8006d2a:	600f      	str	r7, [r1, #0]
 8006d2c:	bf18      	it	ne
 8006d2e:	2300      	movne	r3, #0
 8006d30:	eba6 0807 	sub.w	r8, r6, r7
 8006d34:	608b      	str	r3, [r1, #8]
 8006d36:	f1b8 0f00 	cmp.w	r8, #0
 8006d3a:	dd9c      	ble.n	8006c76 <__sflush_r+0x1a>
 8006d3c:	6a21      	ldr	r1, [r4, #32]
 8006d3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d40:	4643      	mov	r3, r8
 8006d42:	463a      	mov	r2, r7
 8006d44:	4628      	mov	r0, r5
 8006d46:	47b0      	blx	r6
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	dc06      	bgt.n	8006d5a <__sflush_r+0xfe>
 8006d4c:	89a3      	ldrh	r3, [r4, #12]
 8006d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d52:	81a3      	strh	r3, [r4, #12]
 8006d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d58:	e78e      	b.n	8006c78 <__sflush_r+0x1c>
 8006d5a:	4407      	add	r7, r0
 8006d5c:	eba8 0800 	sub.w	r8, r8, r0
 8006d60:	e7e9      	b.n	8006d36 <__sflush_r+0xda>
 8006d62:	bf00      	nop
 8006d64:	20400001 	.word	0x20400001

08006d68 <_fflush_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	690b      	ldr	r3, [r1, #16]
 8006d6c:	4605      	mov	r5, r0
 8006d6e:	460c      	mov	r4, r1
 8006d70:	b913      	cbnz	r3, 8006d78 <_fflush_r+0x10>
 8006d72:	2500      	movs	r5, #0
 8006d74:	4628      	mov	r0, r5
 8006d76:	bd38      	pop	{r3, r4, r5, pc}
 8006d78:	b118      	cbz	r0, 8006d82 <_fflush_r+0x1a>
 8006d7a:	6983      	ldr	r3, [r0, #24]
 8006d7c:	b90b      	cbnz	r3, 8006d82 <_fflush_r+0x1a>
 8006d7e:	f000 f887 	bl	8006e90 <__sinit>
 8006d82:	4b14      	ldr	r3, [pc, #80]	; (8006dd4 <_fflush_r+0x6c>)
 8006d84:	429c      	cmp	r4, r3
 8006d86:	d11b      	bne.n	8006dc0 <_fflush_r+0x58>
 8006d88:	686c      	ldr	r4, [r5, #4]
 8006d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d0ef      	beq.n	8006d72 <_fflush_r+0xa>
 8006d92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d94:	07d0      	lsls	r0, r2, #31
 8006d96:	d404      	bmi.n	8006da2 <_fflush_r+0x3a>
 8006d98:	0599      	lsls	r1, r3, #22
 8006d9a:	d402      	bmi.n	8006da2 <_fflush_r+0x3a>
 8006d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d9e:	f000 f91a 	bl	8006fd6 <__retarget_lock_acquire_recursive>
 8006da2:	4628      	mov	r0, r5
 8006da4:	4621      	mov	r1, r4
 8006da6:	f7ff ff59 	bl	8006c5c <__sflush_r>
 8006daa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dac:	07da      	lsls	r2, r3, #31
 8006dae:	4605      	mov	r5, r0
 8006db0:	d4e0      	bmi.n	8006d74 <_fflush_r+0xc>
 8006db2:	89a3      	ldrh	r3, [r4, #12]
 8006db4:	059b      	lsls	r3, r3, #22
 8006db6:	d4dd      	bmi.n	8006d74 <_fflush_r+0xc>
 8006db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dba:	f000 f90d 	bl	8006fd8 <__retarget_lock_release_recursive>
 8006dbe:	e7d9      	b.n	8006d74 <_fflush_r+0xc>
 8006dc0:	4b05      	ldr	r3, [pc, #20]	; (8006dd8 <_fflush_r+0x70>)
 8006dc2:	429c      	cmp	r4, r3
 8006dc4:	d101      	bne.n	8006dca <_fflush_r+0x62>
 8006dc6:	68ac      	ldr	r4, [r5, #8]
 8006dc8:	e7df      	b.n	8006d8a <_fflush_r+0x22>
 8006dca:	4b04      	ldr	r3, [pc, #16]	; (8006ddc <_fflush_r+0x74>)
 8006dcc:	429c      	cmp	r4, r3
 8006dce:	bf08      	it	eq
 8006dd0:	68ec      	ldreq	r4, [r5, #12]
 8006dd2:	e7da      	b.n	8006d8a <_fflush_r+0x22>
 8006dd4:	0800820c 	.word	0x0800820c
 8006dd8:	0800822c 	.word	0x0800822c
 8006ddc:	080081ec 	.word	0x080081ec

08006de0 <std>:
 8006de0:	2300      	movs	r3, #0
 8006de2:	b510      	push	{r4, lr}
 8006de4:	4604      	mov	r4, r0
 8006de6:	e9c0 3300 	strd	r3, r3, [r0]
 8006dea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dee:	6083      	str	r3, [r0, #8]
 8006df0:	8181      	strh	r1, [r0, #12]
 8006df2:	6643      	str	r3, [r0, #100]	; 0x64
 8006df4:	81c2      	strh	r2, [r0, #14]
 8006df6:	6183      	str	r3, [r0, #24]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	2208      	movs	r2, #8
 8006dfc:	305c      	adds	r0, #92	; 0x5c
 8006dfe:	f7fe faf1 	bl	80053e4 <memset>
 8006e02:	4b05      	ldr	r3, [pc, #20]	; (8006e18 <std+0x38>)
 8006e04:	6263      	str	r3, [r4, #36]	; 0x24
 8006e06:	4b05      	ldr	r3, [pc, #20]	; (8006e1c <std+0x3c>)
 8006e08:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e0a:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <std+0x40>)
 8006e0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e0e:	4b05      	ldr	r3, [pc, #20]	; (8006e24 <std+0x44>)
 8006e10:	6224      	str	r4, [r4, #32]
 8006e12:	6323      	str	r3, [r4, #48]	; 0x30
 8006e14:	bd10      	pop	{r4, pc}
 8006e16:	bf00      	nop
 8006e18:	08007c99 	.word	0x08007c99
 8006e1c:	08007cbb 	.word	0x08007cbb
 8006e20:	08007cf3 	.word	0x08007cf3
 8006e24:	08007d17 	.word	0x08007d17

08006e28 <_cleanup_r>:
 8006e28:	4901      	ldr	r1, [pc, #4]	; (8006e30 <_cleanup_r+0x8>)
 8006e2a:	f000 b8af 	b.w	8006f8c <_fwalk_reent>
 8006e2e:	bf00      	nop
 8006e30:	08006d69 	.word	0x08006d69

08006e34 <__sfmoreglue>:
 8006e34:	b570      	push	{r4, r5, r6, lr}
 8006e36:	2268      	movs	r2, #104	; 0x68
 8006e38:	1e4d      	subs	r5, r1, #1
 8006e3a:	4355      	muls	r5, r2
 8006e3c:	460e      	mov	r6, r1
 8006e3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e42:	f000 fd4b 	bl	80078dc <_malloc_r>
 8006e46:	4604      	mov	r4, r0
 8006e48:	b140      	cbz	r0, 8006e5c <__sfmoreglue+0x28>
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	e9c0 1600 	strd	r1, r6, [r0]
 8006e50:	300c      	adds	r0, #12
 8006e52:	60a0      	str	r0, [r4, #8]
 8006e54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e58:	f7fe fac4 	bl	80053e4 <memset>
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	bd70      	pop	{r4, r5, r6, pc}

08006e60 <__sfp_lock_acquire>:
 8006e60:	4801      	ldr	r0, [pc, #4]	; (8006e68 <__sfp_lock_acquire+0x8>)
 8006e62:	f000 b8b8 	b.w	8006fd6 <__retarget_lock_acquire_recursive>
 8006e66:	bf00      	nop
 8006e68:	200002e1 	.word	0x200002e1

08006e6c <__sfp_lock_release>:
 8006e6c:	4801      	ldr	r0, [pc, #4]	; (8006e74 <__sfp_lock_release+0x8>)
 8006e6e:	f000 b8b3 	b.w	8006fd8 <__retarget_lock_release_recursive>
 8006e72:	bf00      	nop
 8006e74:	200002e1 	.word	0x200002e1

08006e78 <__sinit_lock_acquire>:
 8006e78:	4801      	ldr	r0, [pc, #4]	; (8006e80 <__sinit_lock_acquire+0x8>)
 8006e7a:	f000 b8ac 	b.w	8006fd6 <__retarget_lock_acquire_recursive>
 8006e7e:	bf00      	nop
 8006e80:	200002e2 	.word	0x200002e2

08006e84 <__sinit_lock_release>:
 8006e84:	4801      	ldr	r0, [pc, #4]	; (8006e8c <__sinit_lock_release+0x8>)
 8006e86:	f000 b8a7 	b.w	8006fd8 <__retarget_lock_release_recursive>
 8006e8a:	bf00      	nop
 8006e8c:	200002e2 	.word	0x200002e2

08006e90 <__sinit>:
 8006e90:	b510      	push	{r4, lr}
 8006e92:	4604      	mov	r4, r0
 8006e94:	f7ff fff0 	bl	8006e78 <__sinit_lock_acquire>
 8006e98:	69a3      	ldr	r3, [r4, #24]
 8006e9a:	b11b      	cbz	r3, 8006ea4 <__sinit+0x14>
 8006e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea0:	f7ff bff0 	b.w	8006e84 <__sinit_lock_release>
 8006ea4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ea8:	6523      	str	r3, [r4, #80]	; 0x50
 8006eaa:	4b13      	ldr	r3, [pc, #76]	; (8006ef8 <__sinit+0x68>)
 8006eac:	4a13      	ldr	r2, [pc, #76]	; (8006efc <__sinit+0x6c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006eb2:	42a3      	cmp	r3, r4
 8006eb4:	bf04      	itt	eq
 8006eb6:	2301      	moveq	r3, #1
 8006eb8:	61a3      	streq	r3, [r4, #24]
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f000 f820 	bl	8006f00 <__sfp>
 8006ec0:	6060      	str	r0, [r4, #4]
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f000 f81c 	bl	8006f00 <__sfp>
 8006ec8:	60a0      	str	r0, [r4, #8]
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f000 f818 	bl	8006f00 <__sfp>
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	60e0      	str	r0, [r4, #12]
 8006ed4:	2104      	movs	r1, #4
 8006ed6:	6860      	ldr	r0, [r4, #4]
 8006ed8:	f7ff ff82 	bl	8006de0 <std>
 8006edc:	68a0      	ldr	r0, [r4, #8]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	2109      	movs	r1, #9
 8006ee2:	f7ff ff7d 	bl	8006de0 <std>
 8006ee6:	68e0      	ldr	r0, [r4, #12]
 8006ee8:	2202      	movs	r2, #2
 8006eea:	2112      	movs	r1, #18
 8006eec:	f7ff ff78 	bl	8006de0 <std>
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	61a3      	str	r3, [r4, #24]
 8006ef4:	e7d2      	b.n	8006e9c <__sinit+0xc>
 8006ef6:	bf00      	nop
 8006ef8:	08008124 	.word	0x08008124
 8006efc:	08006e29 	.word	0x08006e29

08006f00 <__sfp>:
 8006f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f02:	4607      	mov	r7, r0
 8006f04:	f7ff ffac 	bl	8006e60 <__sfp_lock_acquire>
 8006f08:	4b1e      	ldr	r3, [pc, #120]	; (8006f84 <__sfp+0x84>)
 8006f0a:	681e      	ldr	r6, [r3, #0]
 8006f0c:	69b3      	ldr	r3, [r6, #24]
 8006f0e:	b913      	cbnz	r3, 8006f16 <__sfp+0x16>
 8006f10:	4630      	mov	r0, r6
 8006f12:	f7ff ffbd 	bl	8006e90 <__sinit>
 8006f16:	3648      	adds	r6, #72	; 0x48
 8006f18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	d503      	bpl.n	8006f28 <__sfp+0x28>
 8006f20:	6833      	ldr	r3, [r6, #0]
 8006f22:	b30b      	cbz	r3, 8006f68 <__sfp+0x68>
 8006f24:	6836      	ldr	r6, [r6, #0]
 8006f26:	e7f7      	b.n	8006f18 <__sfp+0x18>
 8006f28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f2c:	b9d5      	cbnz	r5, 8006f64 <__sfp+0x64>
 8006f2e:	4b16      	ldr	r3, [pc, #88]	; (8006f88 <__sfp+0x88>)
 8006f30:	60e3      	str	r3, [r4, #12]
 8006f32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f36:	6665      	str	r5, [r4, #100]	; 0x64
 8006f38:	f000 f84c 	bl	8006fd4 <__retarget_lock_init_recursive>
 8006f3c:	f7ff ff96 	bl	8006e6c <__sfp_lock_release>
 8006f40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f48:	6025      	str	r5, [r4, #0]
 8006f4a:	61a5      	str	r5, [r4, #24]
 8006f4c:	2208      	movs	r2, #8
 8006f4e:	4629      	mov	r1, r5
 8006f50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f54:	f7fe fa46 	bl	80053e4 <memset>
 8006f58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f60:	4620      	mov	r0, r4
 8006f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f64:	3468      	adds	r4, #104	; 0x68
 8006f66:	e7d9      	b.n	8006f1c <__sfp+0x1c>
 8006f68:	2104      	movs	r1, #4
 8006f6a:	4638      	mov	r0, r7
 8006f6c:	f7ff ff62 	bl	8006e34 <__sfmoreglue>
 8006f70:	4604      	mov	r4, r0
 8006f72:	6030      	str	r0, [r6, #0]
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d1d5      	bne.n	8006f24 <__sfp+0x24>
 8006f78:	f7ff ff78 	bl	8006e6c <__sfp_lock_release>
 8006f7c:	230c      	movs	r3, #12
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	e7ee      	b.n	8006f60 <__sfp+0x60>
 8006f82:	bf00      	nop
 8006f84:	08008124 	.word	0x08008124
 8006f88:	ffff0001 	.word	0xffff0001

08006f8c <_fwalk_reent>:
 8006f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f90:	4606      	mov	r6, r0
 8006f92:	4688      	mov	r8, r1
 8006f94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f98:	2700      	movs	r7, #0
 8006f9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f9e:	f1b9 0901 	subs.w	r9, r9, #1
 8006fa2:	d505      	bpl.n	8006fb0 <_fwalk_reent+0x24>
 8006fa4:	6824      	ldr	r4, [r4, #0]
 8006fa6:	2c00      	cmp	r4, #0
 8006fa8:	d1f7      	bne.n	8006f9a <_fwalk_reent+0xe>
 8006faa:	4638      	mov	r0, r7
 8006fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fb0:	89ab      	ldrh	r3, [r5, #12]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d907      	bls.n	8006fc6 <_fwalk_reent+0x3a>
 8006fb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	d003      	beq.n	8006fc6 <_fwalk_reent+0x3a>
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	47c0      	blx	r8
 8006fc4:	4307      	orrs	r7, r0
 8006fc6:	3568      	adds	r5, #104	; 0x68
 8006fc8:	e7e9      	b.n	8006f9e <_fwalk_reent+0x12>
	...

08006fcc <_localeconv_r>:
 8006fcc:	4800      	ldr	r0, [pc, #0]	; (8006fd0 <_localeconv_r+0x4>)
 8006fce:	4770      	bx	lr
 8006fd0:	20000160 	.word	0x20000160

08006fd4 <__retarget_lock_init_recursive>:
 8006fd4:	4770      	bx	lr

08006fd6 <__retarget_lock_acquire_recursive>:
 8006fd6:	4770      	bx	lr

08006fd8 <__retarget_lock_release_recursive>:
 8006fd8:	4770      	bx	lr

08006fda <__swhatbuf_r>:
 8006fda:	b570      	push	{r4, r5, r6, lr}
 8006fdc:	460e      	mov	r6, r1
 8006fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe2:	2900      	cmp	r1, #0
 8006fe4:	b096      	sub	sp, #88	; 0x58
 8006fe6:	4614      	mov	r4, r2
 8006fe8:	461d      	mov	r5, r3
 8006fea:	da08      	bge.n	8006ffe <__swhatbuf_r+0x24>
 8006fec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	602a      	str	r2, [r5, #0]
 8006ff4:	061a      	lsls	r2, r3, #24
 8006ff6:	d410      	bmi.n	800701a <__swhatbuf_r+0x40>
 8006ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ffc:	e00e      	b.n	800701c <__swhatbuf_r+0x42>
 8006ffe:	466a      	mov	r2, sp
 8007000:	f000 fee0 	bl	8007dc4 <_fstat_r>
 8007004:	2800      	cmp	r0, #0
 8007006:	dbf1      	blt.n	8006fec <__swhatbuf_r+0x12>
 8007008:	9a01      	ldr	r2, [sp, #4]
 800700a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800700e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007012:	425a      	negs	r2, r3
 8007014:	415a      	adcs	r2, r3
 8007016:	602a      	str	r2, [r5, #0]
 8007018:	e7ee      	b.n	8006ff8 <__swhatbuf_r+0x1e>
 800701a:	2340      	movs	r3, #64	; 0x40
 800701c:	2000      	movs	r0, #0
 800701e:	6023      	str	r3, [r4, #0]
 8007020:	b016      	add	sp, #88	; 0x58
 8007022:	bd70      	pop	{r4, r5, r6, pc}

08007024 <__smakebuf_r>:
 8007024:	898b      	ldrh	r3, [r1, #12]
 8007026:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007028:	079d      	lsls	r5, r3, #30
 800702a:	4606      	mov	r6, r0
 800702c:	460c      	mov	r4, r1
 800702e:	d507      	bpl.n	8007040 <__smakebuf_r+0x1c>
 8007030:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	6123      	str	r3, [r4, #16]
 8007038:	2301      	movs	r3, #1
 800703a:	6163      	str	r3, [r4, #20]
 800703c:	b002      	add	sp, #8
 800703e:	bd70      	pop	{r4, r5, r6, pc}
 8007040:	ab01      	add	r3, sp, #4
 8007042:	466a      	mov	r2, sp
 8007044:	f7ff ffc9 	bl	8006fda <__swhatbuf_r>
 8007048:	9900      	ldr	r1, [sp, #0]
 800704a:	4605      	mov	r5, r0
 800704c:	4630      	mov	r0, r6
 800704e:	f000 fc45 	bl	80078dc <_malloc_r>
 8007052:	b948      	cbnz	r0, 8007068 <__smakebuf_r+0x44>
 8007054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007058:	059a      	lsls	r2, r3, #22
 800705a:	d4ef      	bmi.n	800703c <__smakebuf_r+0x18>
 800705c:	f023 0303 	bic.w	r3, r3, #3
 8007060:	f043 0302 	orr.w	r3, r3, #2
 8007064:	81a3      	strh	r3, [r4, #12]
 8007066:	e7e3      	b.n	8007030 <__smakebuf_r+0xc>
 8007068:	4b0d      	ldr	r3, [pc, #52]	; (80070a0 <__smakebuf_r+0x7c>)
 800706a:	62b3      	str	r3, [r6, #40]	; 0x28
 800706c:	89a3      	ldrh	r3, [r4, #12]
 800706e:	6020      	str	r0, [r4, #0]
 8007070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007074:	81a3      	strh	r3, [r4, #12]
 8007076:	9b00      	ldr	r3, [sp, #0]
 8007078:	6163      	str	r3, [r4, #20]
 800707a:	9b01      	ldr	r3, [sp, #4]
 800707c:	6120      	str	r0, [r4, #16]
 800707e:	b15b      	cbz	r3, 8007098 <__smakebuf_r+0x74>
 8007080:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007084:	4630      	mov	r0, r6
 8007086:	f000 feaf 	bl	8007de8 <_isatty_r>
 800708a:	b128      	cbz	r0, 8007098 <__smakebuf_r+0x74>
 800708c:	89a3      	ldrh	r3, [r4, #12]
 800708e:	f023 0303 	bic.w	r3, r3, #3
 8007092:	f043 0301 	orr.w	r3, r3, #1
 8007096:	81a3      	strh	r3, [r4, #12]
 8007098:	89a0      	ldrh	r0, [r4, #12]
 800709a:	4305      	orrs	r5, r0
 800709c:	81a5      	strh	r5, [r4, #12]
 800709e:	e7cd      	b.n	800703c <__smakebuf_r+0x18>
 80070a0:	08006e29 	.word	0x08006e29

080070a4 <malloc>:
 80070a4:	4b02      	ldr	r3, [pc, #8]	; (80070b0 <malloc+0xc>)
 80070a6:	4601      	mov	r1, r0
 80070a8:	6818      	ldr	r0, [r3, #0]
 80070aa:	f000 bc17 	b.w	80078dc <_malloc_r>
 80070ae:	bf00      	nop
 80070b0:	2000000c 	.word	0x2000000c

080070b4 <memcpy>:
 80070b4:	440a      	add	r2, r1
 80070b6:	4291      	cmp	r1, r2
 80070b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80070bc:	d100      	bne.n	80070c0 <memcpy+0xc>
 80070be:	4770      	bx	lr
 80070c0:	b510      	push	{r4, lr}
 80070c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070ca:	4291      	cmp	r1, r2
 80070cc:	d1f9      	bne.n	80070c2 <memcpy+0xe>
 80070ce:	bd10      	pop	{r4, pc}

080070d0 <_Balloc>:
 80070d0:	b570      	push	{r4, r5, r6, lr}
 80070d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070d4:	4604      	mov	r4, r0
 80070d6:	460d      	mov	r5, r1
 80070d8:	b976      	cbnz	r6, 80070f8 <_Balloc+0x28>
 80070da:	2010      	movs	r0, #16
 80070dc:	f7ff ffe2 	bl	80070a4 <malloc>
 80070e0:	4602      	mov	r2, r0
 80070e2:	6260      	str	r0, [r4, #36]	; 0x24
 80070e4:	b920      	cbnz	r0, 80070f0 <_Balloc+0x20>
 80070e6:	4b18      	ldr	r3, [pc, #96]	; (8007148 <_Balloc+0x78>)
 80070e8:	4818      	ldr	r0, [pc, #96]	; (800714c <_Balloc+0x7c>)
 80070ea:	2166      	movs	r1, #102	; 0x66
 80070ec:	f000 fe2a 	bl	8007d44 <__assert_func>
 80070f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070f4:	6006      	str	r6, [r0, #0]
 80070f6:	60c6      	str	r6, [r0, #12]
 80070f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80070fa:	68f3      	ldr	r3, [r6, #12]
 80070fc:	b183      	cbz	r3, 8007120 <_Balloc+0x50>
 80070fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007106:	b9b8      	cbnz	r0, 8007138 <_Balloc+0x68>
 8007108:	2101      	movs	r1, #1
 800710a:	fa01 f605 	lsl.w	r6, r1, r5
 800710e:	1d72      	adds	r2, r6, #5
 8007110:	0092      	lsls	r2, r2, #2
 8007112:	4620      	mov	r0, r4
 8007114:	f000 fb60 	bl	80077d8 <_calloc_r>
 8007118:	b160      	cbz	r0, 8007134 <_Balloc+0x64>
 800711a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800711e:	e00e      	b.n	800713e <_Balloc+0x6e>
 8007120:	2221      	movs	r2, #33	; 0x21
 8007122:	2104      	movs	r1, #4
 8007124:	4620      	mov	r0, r4
 8007126:	f000 fb57 	bl	80077d8 <_calloc_r>
 800712a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800712c:	60f0      	str	r0, [r6, #12]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1e4      	bne.n	80070fe <_Balloc+0x2e>
 8007134:	2000      	movs	r0, #0
 8007136:	bd70      	pop	{r4, r5, r6, pc}
 8007138:	6802      	ldr	r2, [r0, #0]
 800713a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800713e:	2300      	movs	r3, #0
 8007140:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007144:	e7f7      	b.n	8007136 <_Balloc+0x66>
 8007146:	bf00      	nop
 8007148:	08008169 	.word	0x08008169
 800714c:	0800824c 	.word	0x0800824c

08007150 <_Bfree>:
 8007150:	b570      	push	{r4, r5, r6, lr}
 8007152:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007154:	4605      	mov	r5, r0
 8007156:	460c      	mov	r4, r1
 8007158:	b976      	cbnz	r6, 8007178 <_Bfree+0x28>
 800715a:	2010      	movs	r0, #16
 800715c:	f7ff ffa2 	bl	80070a4 <malloc>
 8007160:	4602      	mov	r2, r0
 8007162:	6268      	str	r0, [r5, #36]	; 0x24
 8007164:	b920      	cbnz	r0, 8007170 <_Bfree+0x20>
 8007166:	4b09      	ldr	r3, [pc, #36]	; (800718c <_Bfree+0x3c>)
 8007168:	4809      	ldr	r0, [pc, #36]	; (8007190 <_Bfree+0x40>)
 800716a:	218a      	movs	r1, #138	; 0x8a
 800716c:	f000 fdea 	bl	8007d44 <__assert_func>
 8007170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007174:	6006      	str	r6, [r0, #0]
 8007176:	60c6      	str	r6, [r0, #12]
 8007178:	b13c      	cbz	r4, 800718a <_Bfree+0x3a>
 800717a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800717c:	6862      	ldr	r2, [r4, #4]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007184:	6021      	str	r1, [r4, #0]
 8007186:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800718a:	bd70      	pop	{r4, r5, r6, pc}
 800718c:	08008169 	.word	0x08008169
 8007190:	0800824c 	.word	0x0800824c

08007194 <__multadd>:
 8007194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007198:	690d      	ldr	r5, [r1, #16]
 800719a:	4607      	mov	r7, r0
 800719c:	460c      	mov	r4, r1
 800719e:	461e      	mov	r6, r3
 80071a0:	f101 0c14 	add.w	ip, r1, #20
 80071a4:	2000      	movs	r0, #0
 80071a6:	f8dc 3000 	ldr.w	r3, [ip]
 80071aa:	b299      	uxth	r1, r3
 80071ac:	fb02 6101 	mla	r1, r2, r1, r6
 80071b0:	0c1e      	lsrs	r6, r3, #16
 80071b2:	0c0b      	lsrs	r3, r1, #16
 80071b4:	fb02 3306 	mla	r3, r2, r6, r3
 80071b8:	b289      	uxth	r1, r1
 80071ba:	3001      	adds	r0, #1
 80071bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071c0:	4285      	cmp	r5, r0
 80071c2:	f84c 1b04 	str.w	r1, [ip], #4
 80071c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071ca:	dcec      	bgt.n	80071a6 <__multadd+0x12>
 80071cc:	b30e      	cbz	r6, 8007212 <__multadd+0x7e>
 80071ce:	68a3      	ldr	r3, [r4, #8]
 80071d0:	42ab      	cmp	r3, r5
 80071d2:	dc19      	bgt.n	8007208 <__multadd+0x74>
 80071d4:	6861      	ldr	r1, [r4, #4]
 80071d6:	4638      	mov	r0, r7
 80071d8:	3101      	adds	r1, #1
 80071da:	f7ff ff79 	bl	80070d0 <_Balloc>
 80071de:	4680      	mov	r8, r0
 80071e0:	b928      	cbnz	r0, 80071ee <__multadd+0x5a>
 80071e2:	4602      	mov	r2, r0
 80071e4:	4b0c      	ldr	r3, [pc, #48]	; (8007218 <__multadd+0x84>)
 80071e6:	480d      	ldr	r0, [pc, #52]	; (800721c <__multadd+0x88>)
 80071e8:	21b5      	movs	r1, #181	; 0xb5
 80071ea:	f000 fdab 	bl	8007d44 <__assert_func>
 80071ee:	6922      	ldr	r2, [r4, #16]
 80071f0:	3202      	adds	r2, #2
 80071f2:	f104 010c 	add.w	r1, r4, #12
 80071f6:	0092      	lsls	r2, r2, #2
 80071f8:	300c      	adds	r0, #12
 80071fa:	f7ff ff5b 	bl	80070b4 <memcpy>
 80071fe:	4621      	mov	r1, r4
 8007200:	4638      	mov	r0, r7
 8007202:	f7ff ffa5 	bl	8007150 <_Bfree>
 8007206:	4644      	mov	r4, r8
 8007208:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800720c:	3501      	adds	r5, #1
 800720e:	615e      	str	r6, [r3, #20]
 8007210:	6125      	str	r5, [r4, #16]
 8007212:	4620      	mov	r0, r4
 8007214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007218:	080081db 	.word	0x080081db
 800721c:	0800824c 	.word	0x0800824c

08007220 <__hi0bits>:
 8007220:	0c03      	lsrs	r3, r0, #16
 8007222:	041b      	lsls	r3, r3, #16
 8007224:	b9d3      	cbnz	r3, 800725c <__hi0bits+0x3c>
 8007226:	0400      	lsls	r0, r0, #16
 8007228:	2310      	movs	r3, #16
 800722a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800722e:	bf04      	itt	eq
 8007230:	0200      	lsleq	r0, r0, #8
 8007232:	3308      	addeq	r3, #8
 8007234:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007238:	bf04      	itt	eq
 800723a:	0100      	lsleq	r0, r0, #4
 800723c:	3304      	addeq	r3, #4
 800723e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007242:	bf04      	itt	eq
 8007244:	0080      	lsleq	r0, r0, #2
 8007246:	3302      	addeq	r3, #2
 8007248:	2800      	cmp	r0, #0
 800724a:	db05      	blt.n	8007258 <__hi0bits+0x38>
 800724c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007250:	f103 0301 	add.w	r3, r3, #1
 8007254:	bf08      	it	eq
 8007256:	2320      	moveq	r3, #32
 8007258:	4618      	mov	r0, r3
 800725a:	4770      	bx	lr
 800725c:	2300      	movs	r3, #0
 800725e:	e7e4      	b.n	800722a <__hi0bits+0xa>

08007260 <__lo0bits>:
 8007260:	6803      	ldr	r3, [r0, #0]
 8007262:	f013 0207 	ands.w	r2, r3, #7
 8007266:	4601      	mov	r1, r0
 8007268:	d00b      	beq.n	8007282 <__lo0bits+0x22>
 800726a:	07da      	lsls	r2, r3, #31
 800726c:	d423      	bmi.n	80072b6 <__lo0bits+0x56>
 800726e:	0798      	lsls	r0, r3, #30
 8007270:	bf49      	itett	mi
 8007272:	085b      	lsrmi	r3, r3, #1
 8007274:	089b      	lsrpl	r3, r3, #2
 8007276:	2001      	movmi	r0, #1
 8007278:	600b      	strmi	r3, [r1, #0]
 800727a:	bf5c      	itt	pl
 800727c:	600b      	strpl	r3, [r1, #0]
 800727e:	2002      	movpl	r0, #2
 8007280:	4770      	bx	lr
 8007282:	b298      	uxth	r0, r3
 8007284:	b9a8      	cbnz	r0, 80072b2 <__lo0bits+0x52>
 8007286:	0c1b      	lsrs	r3, r3, #16
 8007288:	2010      	movs	r0, #16
 800728a:	b2da      	uxtb	r2, r3
 800728c:	b90a      	cbnz	r2, 8007292 <__lo0bits+0x32>
 800728e:	3008      	adds	r0, #8
 8007290:	0a1b      	lsrs	r3, r3, #8
 8007292:	071a      	lsls	r2, r3, #28
 8007294:	bf04      	itt	eq
 8007296:	091b      	lsreq	r3, r3, #4
 8007298:	3004      	addeq	r0, #4
 800729a:	079a      	lsls	r2, r3, #30
 800729c:	bf04      	itt	eq
 800729e:	089b      	lsreq	r3, r3, #2
 80072a0:	3002      	addeq	r0, #2
 80072a2:	07da      	lsls	r2, r3, #31
 80072a4:	d403      	bmi.n	80072ae <__lo0bits+0x4e>
 80072a6:	085b      	lsrs	r3, r3, #1
 80072a8:	f100 0001 	add.w	r0, r0, #1
 80072ac:	d005      	beq.n	80072ba <__lo0bits+0x5a>
 80072ae:	600b      	str	r3, [r1, #0]
 80072b0:	4770      	bx	lr
 80072b2:	4610      	mov	r0, r2
 80072b4:	e7e9      	b.n	800728a <__lo0bits+0x2a>
 80072b6:	2000      	movs	r0, #0
 80072b8:	4770      	bx	lr
 80072ba:	2020      	movs	r0, #32
 80072bc:	4770      	bx	lr
	...

080072c0 <__i2b>:
 80072c0:	b510      	push	{r4, lr}
 80072c2:	460c      	mov	r4, r1
 80072c4:	2101      	movs	r1, #1
 80072c6:	f7ff ff03 	bl	80070d0 <_Balloc>
 80072ca:	4602      	mov	r2, r0
 80072cc:	b928      	cbnz	r0, 80072da <__i2b+0x1a>
 80072ce:	4b05      	ldr	r3, [pc, #20]	; (80072e4 <__i2b+0x24>)
 80072d0:	4805      	ldr	r0, [pc, #20]	; (80072e8 <__i2b+0x28>)
 80072d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80072d6:	f000 fd35 	bl	8007d44 <__assert_func>
 80072da:	2301      	movs	r3, #1
 80072dc:	6144      	str	r4, [r0, #20]
 80072de:	6103      	str	r3, [r0, #16]
 80072e0:	bd10      	pop	{r4, pc}
 80072e2:	bf00      	nop
 80072e4:	080081db 	.word	0x080081db
 80072e8:	0800824c 	.word	0x0800824c

080072ec <__multiply>:
 80072ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f0:	4691      	mov	r9, r2
 80072f2:	690a      	ldr	r2, [r1, #16]
 80072f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	bfb8      	it	lt
 80072fc:	460b      	movlt	r3, r1
 80072fe:	460c      	mov	r4, r1
 8007300:	bfbc      	itt	lt
 8007302:	464c      	movlt	r4, r9
 8007304:	4699      	movlt	r9, r3
 8007306:	6927      	ldr	r7, [r4, #16]
 8007308:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800730c:	68a3      	ldr	r3, [r4, #8]
 800730e:	6861      	ldr	r1, [r4, #4]
 8007310:	eb07 060a 	add.w	r6, r7, sl
 8007314:	42b3      	cmp	r3, r6
 8007316:	b085      	sub	sp, #20
 8007318:	bfb8      	it	lt
 800731a:	3101      	addlt	r1, #1
 800731c:	f7ff fed8 	bl	80070d0 <_Balloc>
 8007320:	b930      	cbnz	r0, 8007330 <__multiply+0x44>
 8007322:	4602      	mov	r2, r0
 8007324:	4b44      	ldr	r3, [pc, #272]	; (8007438 <__multiply+0x14c>)
 8007326:	4845      	ldr	r0, [pc, #276]	; (800743c <__multiply+0x150>)
 8007328:	f240 115d 	movw	r1, #349	; 0x15d
 800732c:	f000 fd0a 	bl	8007d44 <__assert_func>
 8007330:	f100 0514 	add.w	r5, r0, #20
 8007334:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007338:	462b      	mov	r3, r5
 800733a:	2200      	movs	r2, #0
 800733c:	4543      	cmp	r3, r8
 800733e:	d321      	bcc.n	8007384 <__multiply+0x98>
 8007340:	f104 0314 	add.w	r3, r4, #20
 8007344:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007348:	f109 0314 	add.w	r3, r9, #20
 800734c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007350:	9202      	str	r2, [sp, #8]
 8007352:	1b3a      	subs	r2, r7, r4
 8007354:	3a15      	subs	r2, #21
 8007356:	f022 0203 	bic.w	r2, r2, #3
 800735a:	3204      	adds	r2, #4
 800735c:	f104 0115 	add.w	r1, r4, #21
 8007360:	428f      	cmp	r7, r1
 8007362:	bf38      	it	cc
 8007364:	2204      	movcc	r2, #4
 8007366:	9201      	str	r2, [sp, #4]
 8007368:	9a02      	ldr	r2, [sp, #8]
 800736a:	9303      	str	r3, [sp, #12]
 800736c:	429a      	cmp	r2, r3
 800736e:	d80c      	bhi.n	800738a <__multiply+0x9e>
 8007370:	2e00      	cmp	r6, #0
 8007372:	dd03      	ble.n	800737c <__multiply+0x90>
 8007374:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007378:	2b00      	cmp	r3, #0
 800737a:	d05a      	beq.n	8007432 <__multiply+0x146>
 800737c:	6106      	str	r6, [r0, #16]
 800737e:	b005      	add	sp, #20
 8007380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007384:	f843 2b04 	str.w	r2, [r3], #4
 8007388:	e7d8      	b.n	800733c <__multiply+0x50>
 800738a:	f8b3 a000 	ldrh.w	sl, [r3]
 800738e:	f1ba 0f00 	cmp.w	sl, #0
 8007392:	d024      	beq.n	80073de <__multiply+0xf2>
 8007394:	f104 0e14 	add.w	lr, r4, #20
 8007398:	46a9      	mov	r9, r5
 800739a:	f04f 0c00 	mov.w	ip, #0
 800739e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80073a2:	f8d9 1000 	ldr.w	r1, [r9]
 80073a6:	fa1f fb82 	uxth.w	fp, r2
 80073aa:	b289      	uxth	r1, r1
 80073ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80073b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80073b4:	f8d9 2000 	ldr.w	r2, [r9]
 80073b8:	4461      	add	r1, ip
 80073ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073be:	fb0a c20b 	mla	r2, sl, fp, ip
 80073c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80073c6:	b289      	uxth	r1, r1
 80073c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073cc:	4577      	cmp	r7, lr
 80073ce:	f849 1b04 	str.w	r1, [r9], #4
 80073d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073d6:	d8e2      	bhi.n	800739e <__multiply+0xb2>
 80073d8:	9a01      	ldr	r2, [sp, #4]
 80073da:	f845 c002 	str.w	ip, [r5, r2]
 80073de:	9a03      	ldr	r2, [sp, #12]
 80073e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073e4:	3304      	adds	r3, #4
 80073e6:	f1b9 0f00 	cmp.w	r9, #0
 80073ea:	d020      	beq.n	800742e <__multiply+0x142>
 80073ec:	6829      	ldr	r1, [r5, #0]
 80073ee:	f104 0c14 	add.w	ip, r4, #20
 80073f2:	46ae      	mov	lr, r5
 80073f4:	f04f 0a00 	mov.w	sl, #0
 80073f8:	f8bc b000 	ldrh.w	fp, [ip]
 80073fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007400:	fb09 220b 	mla	r2, r9, fp, r2
 8007404:	4492      	add	sl, r2
 8007406:	b289      	uxth	r1, r1
 8007408:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800740c:	f84e 1b04 	str.w	r1, [lr], #4
 8007410:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007414:	f8be 1000 	ldrh.w	r1, [lr]
 8007418:	0c12      	lsrs	r2, r2, #16
 800741a:	fb09 1102 	mla	r1, r9, r2, r1
 800741e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007422:	4567      	cmp	r7, ip
 8007424:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007428:	d8e6      	bhi.n	80073f8 <__multiply+0x10c>
 800742a:	9a01      	ldr	r2, [sp, #4]
 800742c:	50a9      	str	r1, [r5, r2]
 800742e:	3504      	adds	r5, #4
 8007430:	e79a      	b.n	8007368 <__multiply+0x7c>
 8007432:	3e01      	subs	r6, #1
 8007434:	e79c      	b.n	8007370 <__multiply+0x84>
 8007436:	bf00      	nop
 8007438:	080081db 	.word	0x080081db
 800743c:	0800824c 	.word	0x0800824c

08007440 <__pow5mult>:
 8007440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007444:	4615      	mov	r5, r2
 8007446:	f012 0203 	ands.w	r2, r2, #3
 800744a:	4606      	mov	r6, r0
 800744c:	460f      	mov	r7, r1
 800744e:	d007      	beq.n	8007460 <__pow5mult+0x20>
 8007450:	4c25      	ldr	r4, [pc, #148]	; (80074e8 <__pow5mult+0xa8>)
 8007452:	3a01      	subs	r2, #1
 8007454:	2300      	movs	r3, #0
 8007456:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800745a:	f7ff fe9b 	bl	8007194 <__multadd>
 800745e:	4607      	mov	r7, r0
 8007460:	10ad      	asrs	r5, r5, #2
 8007462:	d03d      	beq.n	80074e0 <__pow5mult+0xa0>
 8007464:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007466:	b97c      	cbnz	r4, 8007488 <__pow5mult+0x48>
 8007468:	2010      	movs	r0, #16
 800746a:	f7ff fe1b 	bl	80070a4 <malloc>
 800746e:	4602      	mov	r2, r0
 8007470:	6270      	str	r0, [r6, #36]	; 0x24
 8007472:	b928      	cbnz	r0, 8007480 <__pow5mult+0x40>
 8007474:	4b1d      	ldr	r3, [pc, #116]	; (80074ec <__pow5mult+0xac>)
 8007476:	481e      	ldr	r0, [pc, #120]	; (80074f0 <__pow5mult+0xb0>)
 8007478:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800747c:	f000 fc62 	bl	8007d44 <__assert_func>
 8007480:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007484:	6004      	str	r4, [r0, #0]
 8007486:	60c4      	str	r4, [r0, #12]
 8007488:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800748c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007490:	b94c      	cbnz	r4, 80074a6 <__pow5mult+0x66>
 8007492:	f240 2171 	movw	r1, #625	; 0x271
 8007496:	4630      	mov	r0, r6
 8007498:	f7ff ff12 	bl	80072c0 <__i2b>
 800749c:	2300      	movs	r3, #0
 800749e:	f8c8 0008 	str.w	r0, [r8, #8]
 80074a2:	4604      	mov	r4, r0
 80074a4:	6003      	str	r3, [r0, #0]
 80074a6:	f04f 0900 	mov.w	r9, #0
 80074aa:	07eb      	lsls	r3, r5, #31
 80074ac:	d50a      	bpl.n	80074c4 <__pow5mult+0x84>
 80074ae:	4639      	mov	r1, r7
 80074b0:	4622      	mov	r2, r4
 80074b2:	4630      	mov	r0, r6
 80074b4:	f7ff ff1a 	bl	80072ec <__multiply>
 80074b8:	4639      	mov	r1, r7
 80074ba:	4680      	mov	r8, r0
 80074bc:	4630      	mov	r0, r6
 80074be:	f7ff fe47 	bl	8007150 <_Bfree>
 80074c2:	4647      	mov	r7, r8
 80074c4:	106d      	asrs	r5, r5, #1
 80074c6:	d00b      	beq.n	80074e0 <__pow5mult+0xa0>
 80074c8:	6820      	ldr	r0, [r4, #0]
 80074ca:	b938      	cbnz	r0, 80074dc <__pow5mult+0x9c>
 80074cc:	4622      	mov	r2, r4
 80074ce:	4621      	mov	r1, r4
 80074d0:	4630      	mov	r0, r6
 80074d2:	f7ff ff0b 	bl	80072ec <__multiply>
 80074d6:	6020      	str	r0, [r4, #0]
 80074d8:	f8c0 9000 	str.w	r9, [r0]
 80074dc:	4604      	mov	r4, r0
 80074de:	e7e4      	b.n	80074aa <__pow5mult+0x6a>
 80074e0:	4638      	mov	r0, r7
 80074e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074e6:	bf00      	nop
 80074e8:	08008398 	.word	0x08008398
 80074ec:	08008169 	.word	0x08008169
 80074f0:	0800824c 	.word	0x0800824c

080074f4 <__lshift>:
 80074f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f8:	460c      	mov	r4, r1
 80074fa:	6849      	ldr	r1, [r1, #4]
 80074fc:	6923      	ldr	r3, [r4, #16]
 80074fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007502:	68a3      	ldr	r3, [r4, #8]
 8007504:	4607      	mov	r7, r0
 8007506:	4691      	mov	r9, r2
 8007508:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800750c:	f108 0601 	add.w	r6, r8, #1
 8007510:	42b3      	cmp	r3, r6
 8007512:	db0b      	blt.n	800752c <__lshift+0x38>
 8007514:	4638      	mov	r0, r7
 8007516:	f7ff fddb 	bl	80070d0 <_Balloc>
 800751a:	4605      	mov	r5, r0
 800751c:	b948      	cbnz	r0, 8007532 <__lshift+0x3e>
 800751e:	4602      	mov	r2, r0
 8007520:	4b2a      	ldr	r3, [pc, #168]	; (80075cc <__lshift+0xd8>)
 8007522:	482b      	ldr	r0, [pc, #172]	; (80075d0 <__lshift+0xdc>)
 8007524:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007528:	f000 fc0c 	bl	8007d44 <__assert_func>
 800752c:	3101      	adds	r1, #1
 800752e:	005b      	lsls	r3, r3, #1
 8007530:	e7ee      	b.n	8007510 <__lshift+0x1c>
 8007532:	2300      	movs	r3, #0
 8007534:	f100 0114 	add.w	r1, r0, #20
 8007538:	f100 0210 	add.w	r2, r0, #16
 800753c:	4618      	mov	r0, r3
 800753e:	4553      	cmp	r3, sl
 8007540:	db37      	blt.n	80075b2 <__lshift+0xbe>
 8007542:	6920      	ldr	r0, [r4, #16]
 8007544:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007548:	f104 0314 	add.w	r3, r4, #20
 800754c:	f019 091f 	ands.w	r9, r9, #31
 8007550:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007554:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007558:	d02f      	beq.n	80075ba <__lshift+0xc6>
 800755a:	f1c9 0e20 	rsb	lr, r9, #32
 800755e:	468a      	mov	sl, r1
 8007560:	f04f 0c00 	mov.w	ip, #0
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	fa02 f209 	lsl.w	r2, r2, r9
 800756a:	ea42 020c 	orr.w	r2, r2, ip
 800756e:	f84a 2b04 	str.w	r2, [sl], #4
 8007572:	f853 2b04 	ldr.w	r2, [r3], #4
 8007576:	4298      	cmp	r0, r3
 8007578:	fa22 fc0e 	lsr.w	ip, r2, lr
 800757c:	d8f2      	bhi.n	8007564 <__lshift+0x70>
 800757e:	1b03      	subs	r3, r0, r4
 8007580:	3b15      	subs	r3, #21
 8007582:	f023 0303 	bic.w	r3, r3, #3
 8007586:	3304      	adds	r3, #4
 8007588:	f104 0215 	add.w	r2, r4, #21
 800758c:	4290      	cmp	r0, r2
 800758e:	bf38      	it	cc
 8007590:	2304      	movcc	r3, #4
 8007592:	f841 c003 	str.w	ip, [r1, r3]
 8007596:	f1bc 0f00 	cmp.w	ip, #0
 800759a:	d001      	beq.n	80075a0 <__lshift+0xac>
 800759c:	f108 0602 	add.w	r6, r8, #2
 80075a0:	3e01      	subs	r6, #1
 80075a2:	4638      	mov	r0, r7
 80075a4:	612e      	str	r6, [r5, #16]
 80075a6:	4621      	mov	r1, r4
 80075a8:	f7ff fdd2 	bl	8007150 <_Bfree>
 80075ac:	4628      	mov	r0, r5
 80075ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80075b6:	3301      	adds	r3, #1
 80075b8:	e7c1      	b.n	800753e <__lshift+0x4a>
 80075ba:	3904      	subs	r1, #4
 80075bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80075c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80075c4:	4298      	cmp	r0, r3
 80075c6:	d8f9      	bhi.n	80075bc <__lshift+0xc8>
 80075c8:	e7ea      	b.n	80075a0 <__lshift+0xac>
 80075ca:	bf00      	nop
 80075cc:	080081db 	.word	0x080081db
 80075d0:	0800824c 	.word	0x0800824c

080075d4 <__mcmp>:
 80075d4:	b530      	push	{r4, r5, lr}
 80075d6:	6902      	ldr	r2, [r0, #16]
 80075d8:	690c      	ldr	r4, [r1, #16]
 80075da:	1b12      	subs	r2, r2, r4
 80075dc:	d10e      	bne.n	80075fc <__mcmp+0x28>
 80075de:	f100 0314 	add.w	r3, r0, #20
 80075e2:	3114      	adds	r1, #20
 80075e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80075e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80075ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80075f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80075f4:	42a5      	cmp	r5, r4
 80075f6:	d003      	beq.n	8007600 <__mcmp+0x2c>
 80075f8:	d305      	bcc.n	8007606 <__mcmp+0x32>
 80075fa:	2201      	movs	r2, #1
 80075fc:	4610      	mov	r0, r2
 80075fe:	bd30      	pop	{r4, r5, pc}
 8007600:	4283      	cmp	r3, r0
 8007602:	d3f3      	bcc.n	80075ec <__mcmp+0x18>
 8007604:	e7fa      	b.n	80075fc <__mcmp+0x28>
 8007606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800760a:	e7f7      	b.n	80075fc <__mcmp+0x28>

0800760c <__mdiff>:
 800760c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007610:	460c      	mov	r4, r1
 8007612:	4606      	mov	r6, r0
 8007614:	4611      	mov	r1, r2
 8007616:	4620      	mov	r0, r4
 8007618:	4690      	mov	r8, r2
 800761a:	f7ff ffdb 	bl	80075d4 <__mcmp>
 800761e:	1e05      	subs	r5, r0, #0
 8007620:	d110      	bne.n	8007644 <__mdiff+0x38>
 8007622:	4629      	mov	r1, r5
 8007624:	4630      	mov	r0, r6
 8007626:	f7ff fd53 	bl	80070d0 <_Balloc>
 800762a:	b930      	cbnz	r0, 800763a <__mdiff+0x2e>
 800762c:	4b3a      	ldr	r3, [pc, #232]	; (8007718 <__mdiff+0x10c>)
 800762e:	4602      	mov	r2, r0
 8007630:	f240 2132 	movw	r1, #562	; 0x232
 8007634:	4839      	ldr	r0, [pc, #228]	; (800771c <__mdiff+0x110>)
 8007636:	f000 fb85 	bl	8007d44 <__assert_func>
 800763a:	2301      	movs	r3, #1
 800763c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007640:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007644:	bfa4      	itt	ge
 8007646:	4643      	movge	r3, r8
 8007648:	46a0      	movge	r8, r4
 800764a:	4630      	mov	r0, r6
 800764c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007650:	bfa6      	itte	ge
 8007652:	461c      	movge	r4, r3
 8007654:	2500      	movge	r5, #0
 8007656:	2501      	movlt	r5, #1
 8007658:	f7ff fd3a 	bl	80070d0 <_Balloc>
 800765c:	b920      	cbnz	r0, 8007668 <__mdiff+0x5c>
 800765e:	4b2e      	ldr	r3, [pc, #184]	; (8007718 <__mdiff+0x10c>)
 8007660:	4602      	mov	r2, r0
 8007662:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007666:	e7e5      	b.n	8007634 <__mdiff+0x28>
 8007668:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800766c:	6926      	ldr	r6, [r4, #16]
 800766e:	60c5      	str	r5, [r0, #12]
 8007670:	f104 0914 	add.w	r9, r4, #20
 8007674:	f108 0514 	add.w	r5, r8, #20
 8007678:	f100 0e14 	add.w	lr, r0, #20
 800767c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007680:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007684:	f108 0210 	add.w	r2, r8, #16
 8007688:	46f2      	mov	sl, lr
 800768a:	2100      	movs	r1, #0
 800768c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007690:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007694:	fa1f f883 	uxth.w	r8, r3
 8007698:	fa11 f18b 	uxtah	r1, r1, fp
 800769c:	0c1b      	lsrs	r3, r3, #16
 800769e:	eba1 0808 	sub.w	r8, r1, r8
 80076a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80076a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80076aa:	fa1f f888 	uxth.w	r8, r8
 80076ae:	1419      	asrs	r1, r3, #16
 80076b0:	454e      	cmp	r6, r9
 80076b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80076b6:	f84a 3b04 	str.w	r3, [sl], #4
 80076ba:	d8e7      	bhi.n	800768c <__mdiff+0x80>
 80076bc:	1b33      	subs	r3, r6, r4
 80076be:	3b15      	subs	r3, #21
 80076c0:	f023 0303 	bic.w	r3, r3, #3
 80076c4:	3304      	adds	r3, #4
 80076c6:	3415      	adds	r4, #21
 80076c8:	42a6      	cmp	r6, r4
 80076ca:	bf38      	it	cc
 80076cc:	2304      	movcc	r3, #4
 80076ce:	441d      	add	r5, r3
 80076d0:	4473      	add	r3, lr
 80076d2:	469e      	mov	lr, r3
 80076d4:	462e      	mov	r6, r5
 80076d6:	4566      	cmp	r6, ip
 80076d8:	d30e      	bcc.n	80076f8 <__mdiff+0xec>
 80076da:	f10c 0203 	add.w	r2, ip, #3
 80076de:	1b52      	subs	r2, r2, r5
 80076e0:	f022 0203 	bic.w	r2, r2, #3
 80076e4:	3d03      	subs	r5, #3
 80076e6:	45ac      	cmp	ip, r5
 80076e8:	bf38      	it	cc
 80076ea:	2200      	movcc	r2, #0
 80076ec:	441a      	add	r2, r3
 80076ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80076f2:	b17b      	cbz	r3, 8007714 <__mdiff+0x108>
 80076f4:	6107      	str	r7, [r0, #16]
 80076f6:	e7a3      	b.n	8007640 <__mdiff+0x34>
 80076f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80076fc:	fa11 f288 	uxtah	r2, r1, r8
 8007700:	1414      	asrs	r4, r2, #16
 8007702:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007706:	b292      	uxth	r2, r2
 8007708:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800770c:	f84e 2b04 	str.w	r2, [lr], #4
 8007710:	1421      	asrs	r1, r4, #16
 8007712:	e7e0      	b.n	80076d6 <__mdiff+0xca>
 8007714:	3f01      	subs	r7, #1
 8007716:	e7ea      	b.n	80076ee <__mdiff+0xe2>
 8007718:	080081db 	.word	0x080081db
 800771c:	0800824c 	.word	0x0800824c

08007720 <__d2b>:
 8007720:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007724:	4689      	mov	r9, r1
 8007726:	2101      	movs	r1, #1
 8007728:	ec57 6b10 	vmov	r6, r7, d0
 800772c:	4690      	mov	r8, r2
 800772e:	f7ff fccf 	bl	80070d0 <_Balloc>
 8007732:	4604      	mov	r4, r0
 8007734:	b930      	cbnz	r0, 8007744 <__d2b+0x24>
 8007736:	4602      	mov	r2, r0
 8007738:	4b25      	ldr	r3, [pc, #148]	; (80077d0 <__d2b+0xb0>)
 800773a:	4826      	ldr	r0, [pc, #152]	; (80077d4 <__d2b+0xb4>)
 800773c:	f240 310a 	movw	r1, #778	; 0x30a
 8007740:	f000 fb00 	bl	8007d44 <__assert_func>
 8007744:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007748:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800774c:	bb35      	cbnz	r5, 800779c <__d2b+0x7c>
 800774e:	2e00      	cmp	r6, #0
 8007750:	9301      	str	r3, [sp, #4]
 8007752:	d028      	beq.n	80077a6 <__d2b+0x86>
 8007754:	4668      	mov	r0, sp
 8007756:	9600      	str	r6, [sp, #0]
 8007758:	f7ff fd82 	bl	8007260 <__lo0bits>
 800775c:	9900      	ldr	r1, [sp, #0]
 800775e:	b300      	cbz	r0, 80077a2 <__d2b+0x82>
 8007760:	9a01      	ldr	r2, [sp, #4]
 8007762:	f1c0 0320 	rsb	r3, r0, #32
 8007766:	fa02 f303 	lsl.w	r3, r2, r3
 800776a:	430b      	orrs	r3, r1
 800776c:	40c2      	lsrs	r2, r0
 800776e:	6163      	str	r3, [r4, #20]
 8007770:	9201      	str	r2, [sp, #4]
 8007772:	9b01      	ldr	r3, [sp, #4]
 8007774:	61a3      	str	r3, [r4, #24]
 8007776:	2b00      	cmp	r3, #0
 8007778:	bf14      	ite	ne
 800777a:	2202      	movne	r2, #2
 800777c:	2201      	moveq	r2, #1
 800777e:	6122      	str	r2, [r4, #16]
 8007780:	b1d5      	cbz	r5, 80077b8 <__d2b+0x98>
 8007782:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007786:	4405      	add	r5, r0
 8007788:	f8c9 5000 	str.w	r5, [r9]
 800778c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007790:	f8c8 0000 	str.w	r0, [r8]
 8007794:	4620      	mov	r0, r4
 8007796:	b003      	add	sp, #12
 8007798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800779c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077a0:	e7d5      	b.n	800774e <__d2b+0x2e>
 80077a2:	6161      	str	r1, [r4, #20]
 80077a4:	e7e5      	b.n	8007772 <__d2b+0x52>
 80077a6:	a801      	add	r0, sp, #4
 80077a8:	f7ff fd5a 	bl	8007260 <__lo0bits>
 80077ac:	9b01      	ldr	r3, [sp, #4]
 80077ae:	6163      	str	r3, [r4, #20]
 80077b0:	2201      	movs	r2, #1
 80077b2:	6122      	str	r2, [r4, #16]
 80077b4:	3020      	adds	r0, #32
 80077b6:	e7e3      	b.n	8007780 <__d2b+0x60>
 80077b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077c0:	f8c9 0000 	str.w	r0, [r9]
 80077c4:	6918      	ldr	r0, [r3, #16]
 80077c6:	f7ff fd2b 	bl	8007220 <__hi0bits>
 80077ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077ce:	e7df      	b.n	8007790 <__d2b+0x70>
 80077d0:	080081db 	.word	0x080081db
 80077d4:	0800824c 	.word	0x0800824c

080077d8 <_calloc_r>:
 80077d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077da:	fba1 2402 	umull	r2, r4, r1, r2
 80077de:	b94c      	cbnz	r4, 80077f4 <_calloc_r+0x1c>
 80077e0:	4611      	mov	r1, r2
 80077e2:	9201      	str	r2, [sp, #4]
 80077e4:	f000 f87a 	bl	80078dc <_malloc_r>
 80077e8:	9a01      	ldr	r2, [sp, #4]
 80077ea:	4605      	mov	r5, r0
 80077ec:	b930      	cbnz	r0, 80077fc <_calloc_r+0x24>
 80077ee:	4628      	mov	r0, r5
 80077f0:	b003      	add	sp, #12
 80077f2:	bd30      	pop	{r4, r5, pc}
 80077f4:	220c      	movs	r2, #12
 80077f6:	6002      	str	r2, [r0, #0]
 80077f8:	2500      	movs	r5, #0
 80077fa:	e7f8      	b.n	80077ee <_calloc_r+0x16>
 80077fc:	4621      	mov	r1, r4
 80077fe:	f7fd fdf1 	bl	80053e4 <memset>
 8007802:	e7f4      	b.n	80077ee <_calloc_r+0x16>

08007804 <_free_r>:
 8007804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007806:	2900      	cmp	r1, #0
 8007808:	d044      	beq.n	8007894 <_free_r+0x90>
 800780a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800780e:	9001      	str	r0, [sp, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	f1a1 0404 	sub.w	r4, r1, #4
 8007816:	bfb8      	it	lt
 8007818:	18e4      	addlt	r4, r4, r3
 800781a:	f000 fb19 	bl	8007e50 <__malloc_lock>
 800781e:	4a1e      	ldr	r2, [pc, #120]	; (8007898 <_free_r+0x94>)
 8007820:	9801      	ldr	r0, [sp, #4]
 8007822:	6813      	ldr	r3, [r2, #0]
 8007824:	b933      	cbnz	r3, 8007834 <_free_r+0x30>
 8007826:	6063      	str	r3, [r4, #4]
 8007828:	6014      	str	r4, [r2, #0]
 800782a:	b003      	add	sp, #12
 800782c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007830:	f000 bb14 	b.w	8007e5c <__malloc_unlock>
 8007834:	42a3      	cmp	r3, r4
 8007836:	d908      	bls.n	800784a <_free_r+0x46>
 8007838:	6825      	ldr	r5, [r4, #0]
 800783a:	1961      	adds	r1, r4, r5
 800783c:	428b      	cmp	r3, r1
 800783e:	bf01      	itttt	eq
 8007840:	6819      	ldreq	r1, [r3, #0]
 8007842:	685b      	ldreq	r3, [r3, #4]
 8007844:	1949      	addeq	r1, r1, r5
 8007846:	6021      	streq	r1, [r4, #0]
 8007848:	e7ed      	b.n	8007826 <_free_r+0x22>
 800784a:	461a      	mov	r2, r3
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	b10b      	cbz	r3, 8007854 <_free_r+0x50>
 8007850:	42a3      	cmp	r3, r4
 8007852:	d9fa      	bls.n	800784a <_free_r+0x46>
 8007854:	6811      	ldr	r1, [r2, #0]
 8007856:	1855      	adds	r5, r2, r1
 8007858:	42a5      	cmp	r5, r4
 800785a:	d10b      	bne.n	8007874 <_free_r+0x70>
 800785c:	6824      	ldr	r4, [r4, #0]
 800785e:	4421      	add	r1, r4
 8007860:	1854      	adds	r4, r2, r1
 8007862:	42a3      	cmp	r3, r4
 8007864:	6011      	str	r1, [r2, #0]
 8007866:	d1e0      	bne.n	800782a <_free_r+0x26>
 8007868:	681c      	ldr	r4, [r3, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	6053      	str	r3, [r2, #4]
 800786e:	4421      	add	r1, r4
 8007870:	6011      	str	r1, [r2, #0]
 8007872:	e7da      	b.n	800782a <_free_r+0x26>
 8007874:	d902      	bls.n	800787c <_free_r+0x78>
 8007876:	230c      	movs	r3, #12
 8007878:	6003      	str	r3, [r0, #0]
 800787a:	e7d6      	b.n	800782a <_free_r+0x26>
 800787c:	6825      	ldr	r5, [r4, #0]
 800787e:	1961      	adds	r1, r4, r5
 8007880:	428b      	cmp	r3, r1
 8007882:	bf04      	itt	eq
 8007884:	6819      	ldreq	r1, [r3, #0]
 8007886:	685b      	ldreq	r3, [r3, #4]
 8007888:	6063      	str	r3, [r4, #4]
 800788a:	bf04      	itt	eq
 800788c:	1949      	addeq	r1, r1, r5
 800788e:	6021      	streq	r1, [r4, #0]
 8007890:	6054      	str	r4, [r2, #4]
 8007892:	e7ca      	b.n	800782a <_free_r+0x26>
 8007894:	b003      	add	sp, #12
 8007896:	bd30      	pop	{r4, r5, pc}
 8007898:	200002e4 	.word	0x200002e4

0800789c <sbrk_aligned>:
 800789c:	b570      	push	{r4, r5, r6, lr}
 800789e:	4e0e      	ldr	r6, [pc, #56]	; (80078d8 <sbrk_aligned+0x3c>)
 80078a0:	460c      	mov	r4, r1
 80078a2:	6831      	ldr	r1, [r6, #0]
 80078a4:	4605      	mov	r5, r0
 80078a6:	b911      	cbnz	r1, 80078ae <sbrk_aligned+0x12>
 80078a8:	f000 f9e6 	bl	8007c78 <_sbrk_r>
 80078ac:	6030      	str	r0, [r6, #0]
 80078ae:	4621      	mov	r1, r4
 80078b0:	4628      	mov	r0, r5
 80078b2:	f000 f9e1 	bl	8007c78 <_sbrk_r>
 80078b6:	1c43      	adds	r3, r0, #1
 80078b8:	d00a      	beq.n	80078d0 <sbrk_aligned+0x34>
 80078ba:	1cc4      	adds	r4, r0, #3
 80078bc:	f024 0403 	bic.w	r4, r4, #3
 80078c0:	42a0      	cmp	r0, r4
 80078c2:	d007      	beq.n	80078d4 <sbrk_aligned+0x38>
 80078c4:	1a21      	subs	r1, r4, r0
 80078c6:	4628      	mov	r0, r5
 80078c8:	f000 f9d6 	bl	8007c78 <_sbrk_r>
 80078cc:	3001      	adds	r0, #1
 80078ce:	d101      	bne.n	80078d4 <sbrk_aligned+0x38>
 80078d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80078d4:	4620      	mov	r0, r4
 80078d6:	bd70      	pop	{r4, r5, r6, pc}
 80078d8:	200002e8 	.word	0x200002e8

080078dc <_malloc_r>:
 80078dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e0:	1ccd      	adds	r5, r1, #3
 80078e2:	f025 0503 	bic.w	r5, r5, #3
 80078e6:	3508      	adds	r5, #8
 80078e8:	2d0c      	cmp	r5, #12
 80078ea:	bf38      	it	cc
 80078ec:	250c      	movcc	r5, #12
 80078ee:	2d00      	cmp	r5, #0
 80078f0:	4607      	mov	r7, r0
 80078f2:	db01      	blt.n	80078f8 <_malloc_r+0x1c>
 80078f4:	42a9      	cmp	r1, r5
 80078f6:	d905      	bls.n	8007904 <_malloc_r+0x28>
 80078f8:	230c      	movs	r3, #12
 80078fa:	603b      	str	r3, [r7, #0]
 80078fc:	2600      	movs	r6, #0
 80078fe:	4630      	mov	r0, r6
 8007900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007904:	4e2e      	ldr	r6, [pc, #184]	; (80079c0 <_malloc_r+0xe4>)
 8007906:	f000 faa3 	bl	8007e50 <__malloc_lock>
 800790a:	6833      	ldr	r3, [r6, #0]
 800790c:	461c      	mov	r4, r3
 800790e:	bb34      	cbnz	r4, 800795e <_malloc_r+0x82>
 8007910:	4629      	mov	r1, r5
 8007912:	4638      	mov	r0, r7
 8007914:	f7ff ffc2 	bl	800789c <sbrk_aligned>
 8007918:	1c43      	adds	r3, r0, #1
 800791a:	4604      	mov	r4, r0
 800791c:	d14d      	bne.n	80079ba <_malloc_r+0xde>
 800791e:	6834      	ldr	r4, [r6, #0]
 8007920:	4626      	mov	r6, r4
 8007922:	2e00      	cmp	r6, #0
 8007924:	d140      	bne.n	80079a8 <_malloc_r+0xcc>
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	4631      	mov	r1, r6
 800792a:	4638      	mov	r0, r7
 800792c:	eb04 0803 	add.w	r8, r4, r3
 8007930:	f000 f9a2 	bl	8007c78 <_sbrk_r>
 8007934:	4580      	cmp	r8, r0
 8007936:	d13a      	bne.n	80079ae <_malloc_r+0xd2>
 8007938:	6821      	ldr	r1, [r4, #0]
 800793a:	3503      	adds	r5, #3
 800793c:	1a6d      	subs	r5, r5, r1
 800793e:	f025 0503 	bic.w	r5, r5, #3
 8007942:	3508      	adds	r5, #8
 8007944:	2d0c      	cmp	r5, #12
 8007946:	bf38      	it	cc
 8007948:	250c      	movcc	r5, #12
 800794a:	4629      	mov	r1, r5
 800794c:	4638      	mov	r0, r7
 800794e:	f7ff ffa5 	bl	800789c <sbrk_aligned>
 8007952:	3001      	adds	r0, #1
 8007954:	d02b      	beq.n	80079ae <_malloc_r+0xd2>
 8007956:	6823      	ldr	r3, [r4, #0]
 8007958:	442b      	add	r3, r5
 800795a:	6023      	str	r3, [r4, #0]
 800795c:	e00e      	b.n	800797c <_malloc_r+0xa0>
 800795e:	6822      	ldr	r2, [r4, #0]
 8007960:	1b52      	subs	r2, r2, r5
 8007962:	d41e      	bmi.n	80079a2 <_malloc_r+0xc6>
 8007964:	2a0b      	cmp	r2, #11
 8007966:	d916      	bls.n	8007996 <_malloc_r+0xba>
 8007968:	1961      	adds	r1, r4, r5
 800796a:	42a3      	cmp	r3, r4
 800796c:	6025      	str	r5, [r4, #0]
 800796e:	bf18      	it	ne
 8007970:	6059      	strne	r1, [r3, #4]
 8007972:	6863      	ldr	r3, [r4, #4]
 8007974:	bf08      	it	eq
 8007976:	6031      	streq	r1, [r6, #0]
 8007978:	5162      	str	r2, [r4, r5]
 800797a:	604b      	str	r3, [r1, #4]
 800797c:	4638      	mov	r0, r7
 800797e:	f104 060b 	add.w	r6, r4, #11
 8007982:	f000 fa6b 	bl	8007e5c <__malloc_unlock>
 8007986:	f026 0607 	bic.w	r6, r6, #7
 800798a:	1d23      	adds	r3, r4, #4
 800798c:	1af2      	subs	r2, r6, r3
 800798e:	d0b6      	beq.n	80078fe <_malloc_r+0x22>
 8007990:	1b9b      	subs	r3, r3, r6
 8007992:	50a3      	str	r3, [r4, r2]
 8007994:	e7b3      	b.n	80078fe <_malloc_r+0x22>
 8007996:	6862      	ldr	r2, [r4, #4]
 8007998:	42a3      	cmp	r3, r4
 800799a:	bf0c      	ite	eq
 800799c:	6032      	streq	r2, [r6, #0]
 800799e:	605a      	strne	r2, [r3, #4]
 80079a0:	e7ec      	b.n	800797c <_malloc_r+0xa0>
 80079a2:	4623      	mov	r3, r4
 80079a4:	6864      	ldr	r4, [r4, #4]
 80079a6:	e7b2      	b.n	800790e <_malloc_r+0x32>
 80079a8:	4634      	mov	r4, r6
 80079aa:	6876      	ldr	r6, [r6, #4]
 80079ac:	e7b9      	b.n	8007922 <_malloc_r+0x46>
 80079ae:	230c      	movs	r3, #12
 80079b0:	603b      	str	r3, [r7, #0]
 80079b2:	4638      	mov	r0, r7
 80079b4:	f000 fa52 	bl	8007e5c <__malloc_unlock>
 80079b8:	e7a1      	b.n	80078fe <_malloc_r+0x22>
 80079ba:	6025      	str	r5, [r4, #0]
 80079bc:	e7de      	b.n	800797c <_malloc_r+0xa0>
 80079be:	bf00      	nop
 80079c0:	200002e4 	.word	0x200002e4

080079c4 <__sfputc_r>:
 80079c4:	6893      	ldr	r3, [r2, #8]
 80079c6:	3b01      	subs	r3, #1
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	b410      	push	{r4}
 80079cc:	6093      	str	r3, [r2, #8]
 80079ce:	da08      	bge.n	80079e2 <__sfputc_r+0x1e>
 80079d0:	6994      	ldr	r4, [r2, #24]
 80079d2:	42a3      	cmp	r3, r4
 80079d4:	db01      	blt.n	80079da <__sfputc_r+0x16>
 80079d6:	290a      	cmp	r1, #10
 80079d8:	d103      	bne.n	80079e2 <__sfputc_r+0x1e>
 80079da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079de:	f7fe ba01 	b.w	8005de4 <__swbuf_r>
 80079e2:	6813      	ldr	r3, [r2, #0]
 80079e4:	1c58      	adds	r0, r3, #1
 80079e6:	6010      	str	r0, [r2, #0]
 80079e8:	7019      	strb	r1, [r3, #0]
 80079ea:	4608      	mov	r0, r1
 80079ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <__sfputs_r>:
 80079f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f4:	4606      	mov	r6, r0
 80079f6:	460f      	mov	r7, r1
 80079f8:	4614      	mov	r4, r2
 80079fa:	18d5      	adds	r5, r2, r3
 80079fc:	42ac      	cmp	r4, r5
 80079fe:	d101      	bne.n	8007a04 <__sfputs_r+0x12>
 8007a00:	2000      	movs	r0, #0
 8007a02:	e007      	b.n	8007a14 <__sfputs_r+0x22>
 8007a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a08:	463a      	mov	r2, r7
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	f7ff ffda 	bl	80079c4 <__sfputc_r>
 8007a10:	1c43      	adds	r3, r0, #1
 8007a12:	d1f3      	bne.n	80079fc <__sfputs_r+0xa>
 8007a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a18 <_vfiprintf_r>:
 8007a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1c:	460d      	mov	r5, r1
 8007a1e:	b09d      	sub	sp, #116	; 0x74
 8007a20:	4614      	mov	r4, r2
 8007a22:	4698      	mov	r8, r3
 8007a24:	4606      	mov	r6, r0
 8007a26:	b118      	cbz	r0, 8007a30 <_vfiprintf_r+0x18>
 8007a28:	6983      	ldr	r3, [r0, #24]
 8007a2a:	b90b      	cbnz	r3, 8007a30 <_vfiprintf_r+0x18>
 8007a2c:	f7ff fa30 	bl	8006e90 <__sinit>
 8007a30:	4b89      	ldr	r3, [pc, #548]	; (8007c58 <_vfiprintf_r+0x240>)
 8007a32:	429d      	cmp	r5, r3
 8007a34:	d11b      	bne.n	8007a6e <_vfiprintf_r+0x56>
 8007a36:	6875      	ldr	r5, [r6, #4]
 8007a38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a3a:	07d9      	lsls	r1, r3, #31
 8007a3c:	d405      	bmi.n	8007a4a <_vfiprintf_r+0x32>
 8007a3e:	89ab      	ldrh	r3, [r5, #12]
 8007a40:	059a      	lsls	r2, r3, #22
 8007a42:	d402      	bmi.n	8007a4a <_vfiprintf_r+0x32>
 8007a44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a46:	f7ff fac6 	bl	8006fd6 <__retarget_lock_acquire_recursive>
 8007a4a:	89ab      	ldrh	r3, [r5, #12]
 8007a4c:	071b      	lsls	r3, r3, #28
 8007a4e:	d501      	bpl.n	8007a54 <_vfiprintf_r+0x3c>
 8007a50:	692b      	ldr	r3, [r5, #16]
 8007a52:	b9eb      	cbnz	r3, 8007a90 <_vfiprintf_r+0x78>
 8007a54:	4629      	mov	r1, r5
 8007a56:	4630      	mov	r0, r6
 8007a58:	f7fe fa16 	bl	8005e88 <__swsetup_r>
 8007a5c:	b1c0      	cbz	r0, 8007a90 <_vfiprintf_r+0x78>
 8007a5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a60:	07dc      	lsls	r4, r3, #31
 8007a62:	d50e      	bpl.n	8007a82 <_vfiprintf_r+0x6a>
 8007a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a68:	b01d      	add	sp, #116	; 0x74
 8007a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6e:	4b7b      	ldr	r3, [pc, #492]	; (8007c5c <_vfiprintf_r+0x244>)
 8007a70:	429d      	cmp	r5, r3
 8007a72:	d101      	bne.n	8007a78 <_vfiprintf_r+0x60>
 8007a74:	68b5      	ldr	r5, [r6, #8]
 8007a76:	e7df      	b.n	8007a38 <_vfiprintf_r+0x20>
 8007a78:	4b79      	ldr	r3, [pc, #484]	; (8007c60 <_vfiprintf_r+0x248>)
 8007a7a:	429d      	cmp	r5, r3
 8007a7c:	bf08      	it	eq
 8007a7e:	68f5      	ldreq	r5, [r6, #12]
 8007a80:	e7da      	b.n	8007a38 <_vfiprintf_r+0x20>
 8007a82:	89ab      	ldrh	r3, [r5, #12]
 8007a84:	0598      	lsls	r0, r3, #22
 8007a86:	d4ed      	bmi.n	8007a64 <_vfiprintf_r+0x4c>
 8007a88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a8a:	f7ff faa5 	bl	8006fd8 <__retarget_lock_release_recursive>
 8007a8e:	e7e9      	b.n	8007a64 <_vfiprintf_r+0x4c>
 8007a90:	2300      	movs	r3, #0
 8007a92:	9309      	str	r3, [sp, #36]	; 0x24
 8007a94:	2320      	movs	r3, #32
 8007a96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a9e:	2330      	movs	r3, #48	; 0x30
 8007aa0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c64 <_vfiprintf_r+0x24c>
 8007aa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007aa8:	f04f 0901 	mov.w	r9, #1
 8007aac:	4623      	mov	r3, r4
 8007aae:	469a      	mov	sl, r3
 8007ab0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ab4:	b10a      	cbz	r2, 8007aba <_vfiprintf_r+0xa2>
 8007ab6:	2a25      	cmp	r2, #37	; 0x25
 8007ab8:	d1f9      	bne.n	8007aae <_vfiprintf_r+0x96>
 8007aba:	ebba 0b04 	subs.w	fp, sl, r4
 8007abe:	d00b      	beq.n	8007ad8 <_vfiprintf_r+0xc0>
 8007ac0:	465b      	mov	r3, fp
 8007ac2:	4622      	mov	r2, r4
 8007ac4:	4629      	mov	r1, r5
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	f7ff ff93 	bl	80079f2 <__sfputs_r>
 8007acc:	3001      	adds	r0, #1
 8007ace:	f000 80aa 	beq.w	8007c26 <_vfiprintf_r+0x20e>
 8007ad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ad4:	445a      	add	r2, fp
 8007ad6:	9209      	str	r2, [sp, #36]	; 0x24
 8007ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 80a2 	beq.w	8007c26 <_vfiprintf_r+0x20e>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ae8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007aec:	f10a 0a01 	add.w	sl, sl, #1
 8007af0:	9304      	str	r3, [sp, #16]
 8007af2:	9307      	str	r3, [sp, #28]
 8007af4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007af8:	931a      	str	r3, [sp, #104]	; 0x68
 8007afa:	4654      	mov	r4, sl
 8007afc:	2205      	movs	r2, #5
 8007afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b02:	4858      	ldr	r0, [pc, #352]	; (8007c64 <_vfiprintf_r+0x24c>)
 8007b04:	f7f8 fb8c 	bl	8000220 <memchr>
 8007b08:	9a04      	ldr	r2, [sp, #16]
 8007b0a:	b9d8      	cbnz	r0, 8007b44 <_vfiprintf_r+0x12c>
 8007b0c:	06d1      	lsls	r1, r2, #27
 8007b0e:	bf44      	itt	mi
 8007b10:	2320      	movmi	r3, #32
 8007b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b16:	0713      	lsls	r3, r2, #28
 8007b18:	bf44      	itt	mi
 8007b1a:	232b      	movmi	r3, #43	; 0x2b
 8007b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b20:	f89a 3000 	ldrb.w	r3, [sl]
 8007b24:	2b2a      	cmp	r3, #42	; 0x2a
 8007b26:	d015      	beq.n	8007b54 <_vfiprintf_r+0x13c>
 8007b28:	9a07      	ldr	r2, [sp, #28]
 8007b2a:	4654      	mov	r4, sl
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	f04f 0c0a 	mov.w	ip, #10
 8007b32:	4621      	mov	r1, r4
 8007b34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b38:	3b30      	subs	r3, #48	; 0x30
 8007b3a:	2b09      	cmp	r3, #9
 8007b3c:	d94e      	bls.n	8007bdc <_vfiprintf_r+0x1c4>
 8007b3e:	b1b0      	cbz	r0, 8007b6e <_vfiprintf_r+0x156>
 8007b40:	9207      	str	r2, [sp, #28]
 8007b42:	e014      	b.n	8007b6e <_vfiprintf_r+0x156>
 8007b44:	eba0 0308 	sub.w	r3, r0, r8
 8007b48:	fa09 f303 	lsl.w	r3, r9, r3
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	9304      	str	r3, [sp, #16]
 8007b50:	46a2      	mov	sl, r4
 8007b52:	e7d2      	b.n	8007afa <_vfiprintf_r+0xe2>
 8007b54:	9b03      	ldr	r3, [sp, #12]
 8007b56:	1d19      	adds	r1, r3, #4
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	9103      	str	r1, [sp, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	bfbb      	ittet	lt
 8007b60:	425b      	neglt	r3, r3
 8007b62:	f042 0202 	orrlt.w	r2, r2, #2
 8007b66:	9307      	strge	r3, [sp, #28]
 8007b68:	9307      	strlt	r3, [sp, #28]
 8007b6a:	bfb8      	it	lt
 8007b6c:	9204      	strlt	r2, [sp, #16]
 8007b6e:	7823      	ldrb	r3, [r4, #0]
 8007b70:	2b2e      	cmp	r3, #46	; 0x2e
 8007b72:	d10c      	bne.n	8007b8e <_vfiprintf_r+0x176>
 8007b74:	7863      	ldrb	r3, [r4, #1]
 8007b76:	2b2a      	cmp	r3, #42	; 0x2a
 8007b78:	d135      	bne.n	8007be6 <_vfiprintf_r+0x1ce>
 8007b7a:	9b03      	ldr	r3, [sp, #12]
 8007b7c:	1d1a      	adds	r2, r3, #4
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	9203      	str	r2, [sp, #12]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	bfb8      	it	lt
 8007b86:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007b8a:	3402      	adds	r4, #2
 8007b8c:	9305      	str	r3, [sp, #20]
 8007b8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c74 <_vfiprintf_r+0x25c>
 8007b92:	7821      	ldrb	r1, [r4, #0]
 8007b94:	2203      	movs	r2, #3
 8007b96:	4650      	mov	r0, sl
 8007b98:	f7f8 fb42 	bl	8000220 <memchr>
 8007b9c:	b140      	cbz	r0, 8007bb0 <_vfiprintf_r+0x198>
 8007b9e:	2340      	movs	r3, #64	; 0x40
 8007ba0:	eba0 000a 	sub.w	r0, r0, sl
 8007ba4:	fa03 f000 	lsl.w	r0, r3, r0
 8007ba8:	9b04      	ldr	r3, [sp, #16]
 8007baa:	4303      	orrs	r3, r0
 8007bac:	3401      	adds	r4, #1
 8007bae:	9304      	str	r3, [sp, #16]
 8007bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb4:	482c      	ldr	r0, [pc, #176]	; (8007c68 <_vfiprintf_r+0x250>)
 8007bb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bba:	2206      	movs	r2, #6
 8007bbc:	f7f8 fb30 	bl	8000220 <memchr>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	d03f      	beq.n	8007c44 <_vfiprintf_r+0x22c>
 8007bc4:	4b29      	ldr	r3, [pc, #164]	; (8007c6c <_vfiprintf_r+0x254>)
 8007bc6:	bb1b      	cbnz	r3, 8007c10 <_vfiprintf_r+0x1f8>
 8007bc8:	9b03      	ldr	r3, [sp, #12]
 8007bca:	3307      	adds	r3, #7
 8007bcc:	f023 0307 	bic.w	r3, r3, #7
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	9303      	str	r3, [sp, #12]
 8007bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd6:	443b      	add	r3, r7
 8007bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8007bda:	e767      	b.n	8007aac <_vfiprintf_r+0x94>
 8007bdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007be0:	460c      	mov	r4, r1
 8007be2:	2001      	movs	r0, #1
 8007be4:	e7a5      	b.n	8007b32 <_vfiprintf_r+0x11a>
 8007be6:	2300      	movs	r3, #0
 8007be8:	3401      	adds	r4, #1
 8007bea:	9305      	str	r3, [sp, #20]
 8007bec:	4619      	mov	r1, r3
 8007bee:	f04f 0c0a 	mov.w	ip, #10
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bf8:	3a30      	subs	r2, #48	; 0x30
 8007bfa:	2a09      	cmp	r2, #9
 8007bfc:	d903      	bls.n	8007c06 <_vfiprintf_r+0x1ee>
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d0c5      	beq.n	8007b8e <_vfiprintf_r+0x176>
 8007c02:	9105      	str	r1, [sp, #20]
 8007c04:	e7c3      	b.n	8007b8e <_vfiprintf_r+0x176>
 8007c06:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c0a:	4604      	mov	r4, r0
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e7f0      	b.n	8007bf2 <_vfiprintf_r+0x1da>
 8007c10:	ab03      	add	r3, sp, #12
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	462a      	mov	r2, r5
 8007c16:	4b16      	ldr	r3, [pc, #88]	; (8007c70 <_vfiprintf_r+0x258>)
 8007c18:	a904      	add	r1, sp, #16
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	f7fd fc8a 	bl	8005534 <_printf_float>
 8007c20:	4607      	mov	r7, r0
 8007c22:	1c78      	adds	r0, r7, #1
 8007c24:	d1d6      	bne.n	8007bd4 <_vfiprintf_r+0x1bc>
 8007c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c28:	07d9      	lsls	r1, r3, #31
 8007c2a:	d405      	bmi.n	8007c38 <_vfiprintf_r+0x220>
 8007c2c:	89ab      	ldrh	r3, [r5, #12]
 8007c2e:	059a      	lsls	r2, r3, #22
 8007c30:	d402      	bmi.n	8007c38 <_vfiprintf_r+0x220>
 8007c32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c34:	f7ff f9d0 	bl	8006fd8 <__retarget_lock_release_recursive>
 8007c38:	89ab      	ldrh	r3, [r5, #12]
 8007c3a:	065b      	lsls	r3, r3, #25
 8007c3c:	f53f af12 	bmi.w	8007a64 <_vfiprintf_r+0x4c>
 8007c40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c42:	e711      	b.n	8007a68 <_vfiprintf_r+0x50>
 8007c44:	ab03      	add	r3, sp, #12
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	462a      	mov	r2, r5
 8007c4a:	4b09      	ldr	r3, [pc, #36]	; (8007c70 <_vfiprintf_r+0x258>)
 8007c4c:	a904      	add	r1, sp, #16
 8007c4e:	4630      	mov	r0, r6
 8007c50:	f7fd ff14 	bl	8005a7c <_printf_i>
 8007c54:	e7e4      	b.n	8007c20 <_vfiprintf_r+0x208>
 8007c56:	bf00      	nop
 8007c58:	0800820c 	.word	0x0800820c
 8007c5c:	0800822c 	.word	0x0800822c
 8007c60:	080081ec 	.word	0x080081ec
 8007c64:	080083a4 	.word	0x080083a4
 8007c68:	080083ae 	.word	0x080083ae
 8007c6c:	08005535 	.word	0x08005535
 8007c70:	080079f3 	.word	0x080079f3
 8007c74:	080083aa 	.word	0x080083aa

08007c78 <_sbrk_r>:
 8007c78:	b538      	push	{r3, r4, r5, lr}
 8007c7a:	4d06      	ldr	r5, [pc, #24]	; (8007c94 <_sbrk_r+0x1c>)
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	4604      	mov	r4, r0
 8007c80:	4608      	mov	r0, r1
 8007c82:	602b      	str	r3, [r5, #0]
 8007c84:	f7fa f9f4 	bl	8002070 <_sbrk>
 8007c88:	1c43      	adds	r3, r0, #1
 8007c8a:	d102      	bne.n	8007c92 <_sbrk_r+0x1a>
 8007c8c:	682b      	ldr	r3, [r5, #0]
 8007c8e:	b103      	cbz	r3, 8007c92 <_sbrk_r+0x1a>
 8007c90:	6023      	str	r3, [r4, #0]
 8007c92:	bd38      	pop	{r3, r4, r5, pc}
 8007c94:	200002ec 	.word	0x200002ec

08007c98 <__sread>:
 8007c98:	b510      	push	{r4, lr}
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca0:	f000 f8e2 	bl	8007e68 <_read_r>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	bfab      	itete	ge
 8007ca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007caa:	89a3      	ldrhlt	r3, [r4, #12]
 8007cac:	181b      	addge	r3, r3, r0
 8007cae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cb2:	bfac      	ite	ge
 8007cb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007cb6:	81a3      	strhlt	r3, [r4, #12]
 8007cb8:	bd10      	pop	{r4, pc}

08007cba <__swrite>:
 8007cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cbe:	461f      	mov	r7, r3
 8007cc0:	898b      	ldrh	r3, [r1, #12]
 8007cc2:	05db      	lsls	r3, r3, #23
 8007cc4:	4605      	mov	r5, r0
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	4616      	mov	r6, r2
 8007cca:	d505      	bpl.n	8007cd8 <__swrite+0x1e>
 8007ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f000 f898 	bl	8007e08 <_lseek_r>
 8007cd8:	89a3      	ldrh	r3, [r4, #12]
 8007cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ce2:	81a3      	strh	r3, [r4, #12]
 8007ce4:	4632      	mov	r2, r6
 8007ce6:	463b      	mov	r3, r7
 8007ce8:	4628      	mov	r0, r5
 8007cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cee:	f000 b817 	b.w	8007d20 <_write_r>

08007cf2 <__sseek>:
 8007cf2:	b510      	push	{r4, lr}
 8007cf4:	460c      	mov	r4, r1
 8007cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cfa:	f000 f885 	bl	8007e08 <_lseek_r>
 8007cfe:	1c43      	adds	r3, r0, #1
 8007d00:	89a3      	ldrh	r3, [r4, #12]
 8007d02:	bf15      	itete	ne
 8007d04:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d0e:	81a3      	strheq	r3, [r4, #12]
 8007d10:	bf18      	it	ne
 8007d12:	81a3      	strhne	r3, [r4, #12]
 8007d14:	bd10      	pop	{r4, pc}

08007d16 <__sclose>:
 8007d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d1a:	f000 b831 	b.w	8007d80 <_close_r>
	...

08007d20 <_write_r>:
 8007d20:	b538      	push	{r3, r4, r5, lr}
 8007d22:	4d07      	ldr	r5, [pc, #28]	; (8007d40 <_write_r+0x20>)
 8007d24:	4604      	mov	r4, r0
 8007d26:	4608      	mov	r0, r1
 8007d28:	4611      	mov	r1, r2
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	602a      	str	r2, [r5, #0]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	f7f9 ff04 	bl	8001b3c <_write>
 8007d34:	1c43      	adds	r3, r0, #1
 8007d36:	d102      	bne.n	8007d3e <_write_r+0x1e>
 8007d38:	682b      	ldr	r3, [r5, #0]
 8007d3a:	b103      	cbz	r3, 8007d3e <_write_r+0x1e>
 8007d3c:	6023      	str	r3, [r4, #0]
 8007d3e:	bd38      	pop	{r3, r4, r5, pc}
 8007d40:	200002ec 	.word	0x200002ec

08007d44 <__assert_func>:
 8007d44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d46:	4614      	mov	r4, r2
 8007d48:	461a      	mov	r2, r3
 8007d4a:	4b09      	ldr	r3, [pc, #36]	; (8007d70 <__assert_func+0x2c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4605      	mov	r5, r0
 8007d50:	68d8      	ldr	r0, [r3, #12]
 8007d52:	b14c      	cbz	r4, 8007d68 <__assert_func+0x24>
 8007d54:	4b07      	ldr	r3, [pc, #28]	; (8007d74 <__assert_func+0x30>)
 8007d56:	9100      	str	r1, [sp, #0]
 8007d58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d5c:	4906      	ldr	r1, [pc, #24]	; (8007d78 <__assert_func+0x34>)
 8007d5e:	462b      	mov	r3, r5
 8007d60:	f000 f81e 	bl	8007da0 <fiprintf>
 8007d64:	f000 f89f 	bl	8007ea6 <abort>
 8007d68:	4b04      	ldr	r3, [pc, #16]	; (8007d7c <__assert_func+0x38>)
 8007d6a:	461c      	mov	r4, r3
 8007d6c:	e7f3      	b.n	8007d56 <__assert_func+0x12>
 8007d6e:	bf00      	nop
 8007d70:	2000000c 	.word	0x2000000c
 8007d74:	080083b5 	.word	0x080083b5
 8007d78:	080083c2 	.word	0x080083c2
 8007d7c:	080083f0 	.word	0x080083f0

08007d80 <_close_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4d06      	ldr	r5, [pc, #24]	; (8007d9c <_close_r+0x1c>)
 8007d84:	2300      	movs	r3, #0
 8007d86:	4604      	mov	r4, r0
 8007d88:	4608      	mov	r0, r1
 8007d8a:	602b      	str	r3, [r5, #0]
 8007d8c:	f7fa f93b 	bl	8002006 <_close>
 8007d90:	1c43      	adds	r3, r0, #1
 8007d92:	d102      	bne.n	8007d9a <_close_r+0x1a>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	b103      	cbz	r3, 8007d9a <_close_r+0x1a>
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	200002ec 	.word	0x200002ec

08007da0 <fiprintf>:
 8007da0:	b40e      	push	{r1, r2, r3}
 8007da2:	b503      	push	{r0, r1, lr}
 8007da4:	4601      	mov	r1, r0
 8007da6:	ab03      	add	r3, sp, #12
 8007da8:	4805      	ldr	r0, [pc, #20]	; (8007dc0 <fiprintf+0x20>)
 8007daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dae:	6800      	ldr	r0, [r0, #0]
 8007db0:	9301      	str	r3, [sp, #4]
 8007db2:	f7ff fe31 	bl	8007a18 <_vfiprintf_r>
 8007db6:	b002      	add	sp, #8
 8007db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dbc:	b003      	add	sp, #12
 8007dbe:	4770      	bx	lr
 8007dc0:	2000000c 	.word	0x2000000c

08007dc4 <_fstat_r>:
 8007dc4:	b538      	push	{r3, r4, r5, lr}
 8007dc6:	4d07      	ldr	r5, [pc, #28]	; (8007de4 <_fstat_r+0x20>)
 8007dc8:	2300      	movs	r3, #0
 8007dca:	4604      	mov	r4, r0
 8007dcc:	4608      	mov	r0, r1
 8007dce:	4611      	mov	r1, r2
 8007dd0:	602b      	str	r3, [r5, #0]
 8007dd2:	f7fa f924 	bl	800201e <_fstat>
 8007dd6:	1c43      	adds	r3, r0, #1
 8007dd8:	d102      	bne.n	8007de0 <_fstat_r+0x1c>
 8007dda:	682b      	ldr	r3, [r5, #0]
 8007ddc:	b103      	cbz	r3, 8007de0 <_fstat_r+0x1c>
 8007dde:	6023      	str	r3, [r4, #0]
 8007de0:	bd38      	pop	{r3, r4, r5, pc}
 8007de2:	bf00      	nop
 8007de4:	200002ec 	.word	0x200002ec

08007de8 <_isatty_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4d06      	ldr	r5, [pc, #24]	; (8007e04 <_isatty_r+0x1c>)
 8007dec:	2300      	movs	r3, #0
 8007dee:	4604      	mov	r4, r0
 8007df0:	4608      	mov	r0, r1
 8007df2:	602b      	str	r3, [r5, #0]
 8007df4:	f7fa f923 	bl	800203e <_isatty>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	d102      	bne.n	8007e02 <_isatty_r+0x1a>
 8007dfc:	682b      	ldr	r3, [r5, #0]
 8007dfe:	b103      	cbz	r3, 8007e02 <_isatty_r+0x1a>
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
 8007e04:	200002ec 	.word	0x200002ec

08007e08 <_lseek_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	4d07      	ldr	r5, [pc, #28]	; (8007e28 <_lseek_r+0x20>)
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	4608      	mov	r0, r1
 8007e10:	4611      	mov	r1, r2
 8007e12:	2200      	movs	r2, #0
 8007e14:	602a      	str	r2, [r5, #0]
 8007e16:	461a      	mov	r2, r3
 8007e18:	f7fa f91c 	bl	8002054 <_lseek>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d102      	bne.n	8007e26 <_lseek_r+0x1e>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	b103      	cbz	r3, 8007e26 <_lseek_r+0x1e>
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	200002ec 	.word	0x200002ec

08007e2c <__ascii_mbtowc>:
 8007e2c:	b082      	sub	sp, #8
 8007e2e:	b901      	cbnz	r1, 8007e32 <__ascii_mbtowc+0x6>
 8007e30:	a901      	add	r1, sp, #4
 8007e32:	b142      	cbz	r2, 8007e46 <__ascii_mbtowc+0x1a>
 8007e34:	b14b      	cbz	r3, 8007e4a <__ascii_mbtowc+0x1e>
 8007e36:	7813      	ldrb	r3, [r2, #0]
 8007e38:	600b      	str	r3, [r1, #0]
 8007e3a:	7812      	ldrb	r2, [r2, #0]
 8007e3c:	1e10      	subs	r0, r2, #0
 8007e3e:	bf18      	it	ne
 8007e40:	2001      	movne	r0, #1
 8007e42:	b002      	add	sp, #8
 8007e44:	4770      	bx	lr
 8007e46:	4610      	mov	r0, r2
 8007e48:	e7fb      	b.n	8007e42 <__ascii_mbtowc+0x16>
 8007e4a:	f06f 0001 	mvn.w	r0, #1
 8007e4e:	e7f8      	b.n	8007e42 <__ascii_mbtowc+0x16>

08007e50 <__malloc_lock>:
 8007e50:	4801      	ldr	r0, [pc, #4]	; (8007e58 <__malloc_lock+0x8>)
 8007e52:	f7ff b8c0 	b.w	8006fd6 <__retarget_lock_acquire_recursive>
 8007e56:	bf00      	nop
 8007e58:	200002e0 	.word	0x200002e0

08007e5c <__malloc_unlock>:
 8007e5c:	4801      	ldr	r0, [pc, #4]	; (8007e64 <__malloc_unlock+0x8>)
 8007e5e:	f7ff b8bb 	b.w	8006fd8 <__retarget_lock_release_recursive>
 8007e62:	bf00      	nop
 8007e64:	200002e0 	.word	0x200002e0

08007e68 <_read_r>:
 8007e68:	b538      	push	{r3, r4, r5, lr}
 8007e6a:	4d07      	ldr	r5, [pc, #28]	; (8007e88 <_read_r+0x20>)
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	4608      	mov	r0, r1
 8007e70:	4611      	mov	r1, r2
 8007e72:	2200      	movs	r2, #0
 8007e74:	602a      	str	r2, [r5, #0]
 8007e76:	461a      	mov	r2, r3
 8007e78:	f7fa f8a8 	bl	8001fcc <_read>
 8007e7c:	1c43      	adds	r3, r0, #1
 8007e7e:	d102      	bne.n	8007e86 <_read_r+0x1e>
 8007e80:	682b      	ldr	r3, [r5, #0]
 8007e82:	b103      	cbz	r3, 8007e86 <_read_r+0x1e>
 8007e84:	6023      	str	r3, [r4, #0]
 8007e86:	bd38      	pop	{r3, r4, r5, pc}
 8007e88:	200002ec 	.word	0x200002ec

08007e8c <__ascii_wctomb>:
 8007e8c:	b149      	cbz	r1, 8007ea2 <__ascii_wctomb+0x16>
 8007e8e:	2aff      	cmp	r2, #255	; 0xff
 8007e90:	bf85      	ittet	hi
 8007e92:	238a      	movhi	r3, #138	; 0x8a
 8007e94:	6003      	strhi	r3, [r0, #0]
 8007e96:	700a      	strbls	r2, [r1, #0]
 8007e98:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007e9c:	bf98      	it	ls
 8007e9e:	2001      	movls	r0, #1
 8007ea0:	4770      	bx	lr
 8007ea2:	4608      	mov	r0, r1
 8007ea4:	4770      	bx	lr

08007ea6 <abort>:
 8007ea6:	b508      	push	{r3, lr}
 8007ea8:	2006      	movs	r0, #6
 8007eaa:	f000 f82b 	bl	8007f04 <raise>
 8007eae:	2001      	movs	r0, #1
 8007eb0:	f7fa f882 	bl	8001fb8 <_exit>

08007eb4 <_raise_r>:
 8007eb4:	291f      	cmp	r1, #31
 8007eb6:	b538      	push	{r3, r4, r5, lr}
 8007eb8:	4604      	mov	r4, r0
 8007eba:	460d      	mov	r5, r1
 8007ebc:	d904      	bls.n	8007ec8 <_raise_r+0x14>
 8007ebe:	2316      	movs	r3, #22
 8007ec0:	6003      	str	r3, [r0, #0]
 8007ec2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ec6:	bd38      	pop	{r3, r4, r5, pc}
 8007ec8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007eca:	b112      	cbz	r2, 8007ed2 <_raise_r+0x1e>
 8007ecc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ed0:	b94b      	cbnz	r3, 8007ee6 <_raise_r+0x32>
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f000 f830 	bl	8007f38 <_getpid_r>
 8007ed8:	462a      	mov	r2, r5
 8007eda:	4601      	mov	r1, r0
 8007edc:	4620      	mov	r0, r4
 8007ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ee2:	f000 b817 	b.w	8007f14 <_kill_r>
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d00a      	beq.n	8007f00 <_raise_r+0x4c>
 8007eea:	1c59      	adds	r1, r3, #1
 8007eec:	d103      	bne.n	8007ef6 <_raise_r+0x42>
 8007eee:	2316      	movs	r3, #22
 8007ef0:	6003      	str	r3, [r0, #0]
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	e7e7      	b.n	8007ec6 <_raise_r+0x12>
 8007ef6:	2400      	movs	r4, #0
 8007ef8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007efc:	4628      	mov	r0, r5
 8007efe:	4798      	blx	r3
 8007f00:	2000      	movs	r0, #0
 8007f02:	e7e0      	b.n	8007ec6 <_raise_r+0x12>

08007f04 <raise>:
 8007f04:	4b02      	ldr	r3, [pc, #8]	; (8007f10 <raise+0xc>)
 8007f06:	4601      	mov	r1, r0
 8007f08:	6818      	ldr	r0, [r3, #0]
 8007f0a:	f7ff bfd3 	b.w	8007eb4 <_raise_r>
 8007f0e:	bf00      	nop
 8007f10:	2000000c 	.word	0x2000000c

08007f14 <_kill_r>:
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4d07      	ldr	r5, [pc, #28]	; (8007f34 <_kill_r+0x20>)
 8007f18:	2300      	movs	r3, #0
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	4608      	mov	r0, r1
 8007f1e:	4611      	mov	r1, r2
 8007f20:	602b      	str	r3, [r5, #0]
 8007f22:	f7fa f839 	bl	8001f98 <_kill>
 8007f26:	1c43      	adds	r3, r0, #1
 8007f28:	d102      	bne.n	8007f30 <_kill_r+0x1c>
 8007f2a:	682b      	ldr	r3, [r5, #0]
 8007f2c:	b103      	cbz	r3, 8007f30 <_kill_r+0x1c>
 8007f2e:	6023      	str	r3, [r4, #0]
 8007f30:	bd38      	pop	{r3, r4, r5, pc}
 8007f32:	bf00      	nop
 8007f34:	200002ec 	.word	0x200002ec

08007f38 <_getpid_r>:
 8007f38:	f7fa b826 	b.w	8001f88 <_getpid>

08007f3c <_init>:
 8007f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3e:	bf00      	nop
 8007f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f42:	bc08      	pop	{r3}
 8007f44:	469e      	mov	lr, r3
 8007f46:	4770      	bx	lr

08007f48 <_fini>:
 8007f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4a:	bf00      	nop
 8007f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f4e:	bc08      	pop	{r3}
 8007f50:	469e      	mov	lr, r3
 8007f52:	4770      	bx	lr
