
STMF446_CAN_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004838  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080049fc  080049fc  000149fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab8  08004ab8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004ab8  08004ab8  00014ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ac0  08004ac0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ac4  08004ac4  00014ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000070  08004b38  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08004b38  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc79  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d02  00000000  00000000  0002bd19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0002da20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  0002e380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ff7  00000000  00000000  0002ec28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc4e  00000000  00000000  00031c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc546  00000000  00000000  0003d86d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00109db3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c48  00000000  00000000  00109e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080049e4 	.word	0x080049e4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	080049e4 	.word	0x080049e4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fc7d 	bl	8000e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f8e5 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f9b1 	bl	800087c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051a:	f000 f985 	bl	8000828 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800051e:	f000 f94b 	bl	80007b8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

sFilterConfig.FilterBank = 0;
 8000522:	4b65      	ldr	r3, [pc, #404]	; (80006b8 <main+0x1b0>)
 8000524:	2200      	movs	r2, #0
 8000526:	615a      	str	r2, [r3, #20]
sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000528:	4b63      	ldr	r3, [pc, #396]	; (80006b8 <main+0x1b0>)
 800052a:	2200      	movs	r2, #0
 800052c:	619a      	str	r2, [r3, #24]
sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800052e:	4b62      	ldr	r3, [pc, #392]	; (80006b8 <main+0x1b0>)
 8000530:	2201      	movs	r2, #1
 8000532:	61da      	str	r2, [r3, #28]
sFilterConfig.FilterIdHigh = 0x0000;
 8000534:	4b60      	ldr	r3, [pc, #384]	; (80006b8 <main+0x1b0>)
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
sFilterConfig.FilterIdLow = 0x0000;
 800053a:	4b5f      	ldr	r3, [pc, #380]	; (80006b8 <main+0x1b0>)
 800053c:	2200      	movs	r2, #0
 800053e:	605a      	str	r2, [r3, #4]
sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000540:	4b5d      	ldr	r3, [pc, #372]	; (80006b8 <main+0x1b0>)
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
sFilterConfig.FilterMaskIdLow = 0x0000;
 8000546:	4b5c      	ldr	r3, [pc, #368]	; (80006b8 <main+0x1b0>)
 8000548:	2200      	movs	r2, #0
 800054a:	60da      	str	r2, [r3, #12]
sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800054c:	4b5a      	ldr	r3, [pc, #360]	; (80006b8 <main+0x1b0>)
 800054e:	2200      	movs	r2, #0
 8000550:	611a      	str	r2, [r3, #16]
//	sFilterConfig.FilterFIFOAssignment =CAN_FILTER_FIFO0;
sFilterConfig.FilterActivation=ENABLE;
 8000552:	4b59      	ldr	r3, [pc, #356]	; (80006b8 <main+0x1b0>)
 8000554:	2201      	movs	r2, #1
 8000556:	621a      	str	r2, [r3, #32]
sFilterConfig.SlaveStartFilterBank=14;
 8000558:	4b57      	ldr	r3, [pc, #348]	; (80006b8 <main+0x1b0>)
 800055a:	220e      	movs	r2, #14
 800055c:	625a      	str	r2, [r3, #36]	; 0x24

if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 800055e:	4956      	ldr	r1, [pc, #344]	; (80006b8 <main+0x1b0>)
 8000560:	4856      	ldr	r0, [pc, #344]	; (80006bc <main+0x1b4>)
 8000562:	f000 fdc1 	bl	80010e8 <HAL_CAN_ConfigFilter>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <main+0x68>
{
	Error_Handler();
 800056c:	f000 fa5a 	bl	8000a24 <Error_Handler>
}
if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 8000570:	4852      	ldr	r0, [pc, #328]	; (80006bc <main+0x1b4>)
 8000572:	f000 fe99 	bl	80012a8 <HAL_CAN_Start>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <main+0x78>
{
	Error_Handler();
 800057c:	f000 fa52 	bl	8000a24 <Error_Handler>
}

if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8000580:	2103      	movs	r1, #3
 8000582:	484e      	ldr	r0, [pc, #312]	; (80006bc <main+0x1b4>)
 8000584:	f001 f8f6 	bl	8001774 <HAL_CAN_ActivateNotification>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <main+0x8a>
{
	Error_Handler();
 800058e:	f000 fa49 	bl	8000a24 <Error_Handler>
//	  {
//	     Error_Handler ();
//	  }

char KeyCommand[1];
KeyCommand[0]=0;
 8000592:	2300      	movs	r3, #0
 8000594:	713b      	strb	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //受信割り込みの開始=6byte受け取ったら次の処理へ
	  get_uart_flag=0;
 8000596:	4b4a      	ldr	r3, [pc, #296]	; (80006c0 <main+0x1b8>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2, (uint8_t *)KeyCommand, 1);
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2201      	movs	r2, #1
 80005a0:	4619      	mov	r1, r3
 80005a2:	4848      	ldr	r0, [pc, #288]	; (80006c4 <main+0x1bc>)
 80005a4:	f002 fd55 	bl	8003052 <HAL_UART_Receive_IT>
	  HAL_UART_Transmit(&huart2, (uint8_t *)KeyCommand, 1,3000);
 80005a8:	1d39      	adds	r1, r7, #4
 80005aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005ae:	2201      	movs	r2, #1
 80005b0:	4844      	ldr	r0, [pc, #272]	; (80006c4 <main+0x1bc>)
 80005b2:	f002 fcbc 	bl	8002f2e <HAL_UART_Transmit>
//	  HAL_Delay(100);
	  //受信するまで待つ
	  while(!get_uart_flag){}
 80005b6:	bf00      	nop
 80005b8:	4b41      	ldr	r3, [pc, #260]	; (80006c0 <main+0x1b8>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d0fb      	beq.n	80005b8 <main+0xb0>
//	  printf("beforecase\r\n");
	  if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)){
 80005c0:	483e      	ldr	r0, [pc, #248]	; (80006bc <main+0x1b4>)
 80005c2:	f000 ff90 	bl	80014e6 <HAL_CAN_GetTxMailboxesFreeLevel>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d06e      	beq.n	80006aa <main+0x1a2>
		  if(KeyCommand[0]!=0 ){
 80005cc:	793b      	ldrb	r3, [r7, #4]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d068      	beq.n	80006a4 <main+0x19c>
			  switch(KeyCommand[0]){
 80005d2:	793b      	ldrb	r3, [r7, #4]
 80005d4:	2b31      	cmp	r3, #49	; 0x31
 80005d6:	d002      	beq.n	80005de <main+0xd6>
 80005d8:	2b32      	cmp	r3, #50	; 0x32
 80005da:	d02e      	beq.n	800063a <main+0x132>
 80005dc:	e05b      	b.n	8000696 <main+0x18e>
			  case '1':
				  TxHeader.StdId=0x141;
 80005de:	4b3a      	ldr	r3, [pc, #232]	; (80006c8 <main+0x1c0>)
 80005e0:	f240 1241 	movw	r2, #321	; 0x141
 80005e4:	601a      	str	r2, [r3, #0]
				  //TxHeader.ExtId=0x01;
				  TxHeader.RTR = CAN_RTR_DATA;
 80005e6:	4b38      	ldr	r3, [pc, #224]	; (80006c8 <main+0x1c0>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
				  TxHeader.IDE = CAN_ID_STD;
 80005ec:	4b36      	ldr	r3, [pc, #216]	; (80006c8 <main+0x1c0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
				  TxHeader.DLC = 0x08;
 80005f2:	4b35      	ldr	r3, [pc, #212]	; (80006c8 <main+0x1c0>)
 80005f4:	2208      	movs	r2, #8
 80005f6:	611a      	str	r2, [r3, #16]
				  TxHeader.TransmitGlobalTime = DISABLE;
 80005f8:	4b33      	ldr	r3, [pc, #204]	; (80006c8 <main+0x1c0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	751a      	strb	r2, [r3, #20]
				  TxData[0] = 0xA4;
 80005fe:	4b33      	ldr	r3, [pc, #204]	; (80006cc <main+0x1c4>)
 8000600:	22a4      	movs	r2, #164	; 0xa4
 8000602:	701a      	strb	r2, [r3, #0]
				  TxData[1] = 0x00;
 8000604:	4b31      	ldr	r3, [pc, #196]	; (80006cc <main+0x1c4>)
 8000606:	2200      	movs	r2, #0
 8000608:	705a      	strb	r2, [r3, #1]
				  TxData[2] = 0x20;
 800060a:	4b30      	ldr	r3, [pc, #192]	; (80006cc <main+0x1c4>)
 800060c:	2220      	movs	r2, #32
 800060e:	709a      	strb	r2, [r3, #2]
				  TxData[3] = 0x00;
 8000610:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <main+0x1c4>)
 8000612:	2200      	movs	r2, #0
 8000614:	70da      	strb	r2, [r3, #3]
				  TxData[4] = 0x00;
 8000616:	4b2d      	ldr	r3, [pc, #180]	; (80006cc <main+0x1c4>)
 8000618:	2200      	movs	r2, #0
 800061a:	711a      	strb	r2, [r3, #4]
				  TxData[5] = 0x00;
 800061c:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <main+0x1c4>)
 800061e:	2200      	movs	r2, #0
 8000620:	715a      	strb	r2, [r3, #5]
				  TxData[6] = 0x00;
 8000622:	4b2a      	ldr	r3, [pc, #168]	; (80006cc <main+0x1c4>)
 8000624:	2200      	movs	r2, #0
 8000626:	719a      	strb	r2, [r3, #6]
				  TxData[7] = 0x00;
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <main+0x1c4>)
 800062a:	2200      	movs	r2, #0
 800062c:	71da      	strb	r2, [r3, #7]
				  printf("case : 1\r\n");
 800062e:	4828      	ldr	r0, [pc, #160]	; (80006d0 <main+0x1c8>)
 8000630:	f003 fd48 	bl	80040c4 <puts>
				  KeyCommand[0]=0;
 8000634:	2300      	movs	r3, #0
 8000636:	713b      	strb	r3, [r7, #4]
				  break;
 8000638:	e030      	b.n	800069c <main+0x194>
			  case'2':
				  TxHeader.StdId=0x141;
 800063a:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <main+0x1c0>)
 800063c:	f240 1241 	movw	r2, #321	; 0x141
 8000640:	601a      	str	r2, [r3, #0]
				  //TxHeader.ExtId=0x01;
				  TxHeader.RTR = CAN_RTR_DATA;
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <main+0x1c0>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
				  TxHeader.IDE = CAN_ID_STD;
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <main+0x1c0>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
				  TxHeader.DLC = 0x08;
 800064e:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <main+0x1c0>)
 8000650:	2208      	movs	r2, #8
 8000652:	611a      	str	r2, [r3, #16]
				  TxHeader.TransmitGlobalTime = DISABLE;
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <main+0x1c0>)
 8000656:	2200      	movs	r2, #0
 8000658:	751a      	strb	r2, [r3, #20]
				  TxData[0] = 0xA4;
 800065a:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <main+0x1c4>)
 800065c:	22a4      	movs	r2, #164	; 0xa4
 800065e:	701a      	strb	r2, [r3, #0]
				  TxData[1] = 0x00;
 8000660:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <main+0x1c4>)
 8000662:	2200      	movs	r2, #0
 8000664:	705a      	strb	r2, [r3, #1]
				  TxData[2] = 0x20;
 8000666:	4b19      	ldr	r3, [pc, #100]	; (80006cc <main+0x1c4>)
 8000668:	2220      	movs	r2, #32
 800066a:	709a      	strb	r2, [r3, #2]
				  TxData[3] = 0x00;
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <main+0x1c4>)
 800066e:	2200      	movs	r2, #0
 8000670:	70da      	strb	r2, [r3, #3]
				  TxData[4] = 0x50;
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <main+0x1c4>)
 8000674:	2250      	movs	r2, #80	; 0x50
 8000676:	711a      	strb	r2, [r3, #4]
				  TxData[5] = 0x46;
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <main+0x1c4>)
 800067a:	2246      	movs	r2, #70	; 0x46
 800067c:	715a      	strb	r2, [r3, #5]
				  TxData[6] = 0x00;
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <main+0x1c4>)
 8000680:	2200      	movs	r2, #0
 8000682:	719a      	strb	r2, [r3, #6]
				  TxData[7] = 0x00;
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <main+0x1c4>)
 8000686:	2200      	movs	r2, #0
 8000688:	71da      	strb	r2, [r3, #7]
				  printf("case : 2\r\n");
 800068a:	4812      	ldr	r0, [pc, #72]	; (80006d4 <main+0x1cc>)
 800068c:	f003 fd1a 	bl	80040c4 <puts>
				  KeyCommand[0]=0;
 8000690:	2300      	movs	r3, #0
 8000692:	713b      	strb	r3, [r7, #4]
				  break;
 8000694:	e002      	b.n	800069c <main+0x194>
			  default:
				  KeyCommand[0]=0;
 8000696:	2300      	movs	r3, #0
 8000698:	713b      	strb	r3, [r7, #4]
				  break;
 800069a:	bf00      	nop
			  }
			  get_uart_flag=0;
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <main+0x1b8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
 80006a2:	e002      	b.n	80006aa <main+0x1a2>
		  }
		  else{
			  printf("Mailbox congestion\r\n");
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <main+0x1d0>)
 80006a6:	f003 fd0d 	bl	80040c4 <puts>

	 // printf("UARTdata:%s\r\n",KeyCommand[0]);


//	  if(get_can_flag)
	  HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <main+0x1d4>)
 80006ac:	4a07      	ldr	r2, [pc, #28]	; (80006cc <main+0x1c4>)
 80006ae:	4906      	ldr	r1, [pc, #24]	; (80006c8 <main+0x1c0>)
 80006b0:	4802      	ldr	r0, [pc, #8]	; (80006bc <main+0x1b4>)
 80006b2:	f000 fe3d 	bl	8001330 <HAL_CAN_AddTxMessage>
	  get_uart_flag=0;
 80006b6:	e76e      	b.n	8000596 <main+0x8e>
 80006b8:	200000f8 	.word	0x200000f8
 80006bc:	2000008c 	.word	0x2000008c
 80006c0:	200001a0 	.word	0x200001a0
 80006c4:	200000b4 	.word	0x200000b4
 80006c8:	20000120 	.word	0x20000120
 80006cc:	20000154 	.word	0x20000154
 80006d0:	080049fc 	.word	0x080049fc
 80006d4:	08004a08 	.word	0x08004a08
 80006d8:	08004a14 	.word	0x08004a14
 80006dc:	2000019c 	.word	0x2000019c

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b094      	sub	sp, #80	; 0x50
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	2234      	movs	r2, #52	; 0x34
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f003 fc72 	bl	8003fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b29      	ldr	r3, [pc, #164]	; (80007b0 <SystemClock_Config+0xd0>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	4a28      	ldr	r2, [pc, #160]	; (80007b0 <SystemClock_Config+0xd0>)
 800070e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000712:	6413      	str	r3, [r2, #64]	; 0x40
 8000714:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <SystemClock_Config+0xd0>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	2300      	movs	r3, #0
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <SystemClock_Config+0xd4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a22      	ldr	r2, [pc, #136]	; (80007b4 <SystemClock_Config+0xd4>)
 800072a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <SystemClock_Config+0xd4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800073c:	2302      	movs	r3, #2
 800073e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000744:	2310      	movs	r3, #16
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074c:	2300      	movs	r3, #0
 800074e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000750:	2308      	movs	r3, #8
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000754:	23a0      	movs	r3, #160	; 0xa0
 8000756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800075c:	2302      	movs	r3, #2
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000760:	2302      	movs	r3, #2
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4618      	mov	r0, r3
 800076a:	f002 f8f5 	bl	8002958 <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000774:	f000 f956 	bl	8000a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	2302      	movs	r3, #2
 800077e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000784:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000788:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	2105      	movs	r1, #5
 8000796:	4618      	mov	r0, r3
 8000798:	f001 fd94 	bl	80022c4 <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007a2:	f000 f93f 	bl	8000a24 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3750      	adds	r7, #80	; 0x50
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007bc:	4b18      	ldr	r3, [pc, #96]	; (8000820 <MX_CAN1_Init+0x68>)
 80007be:	4a19      	ldr	r2, [pc, #100]	; (8000824 <MX_CAN1_Init+0x6c>)
 80007c0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_CAN1_Init+0x68>)
 80007c4:	2204      	movs	r2, #4
 80007c6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007c8:	4b15      	ldr	r3, [pc, #84]	; (8000820 <MX_CAN1_Init+0x68>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_CAN1_Init+0x68>)
 80007d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007d4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_CAN1_Init+0x68>)
 80007d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007dc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_CAN1_Init+0x68>)
 80007e0:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80007e4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_CAN1_Init+0x68>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_CAN1_Init+0x68>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_CAN1_Init+0x68>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_CAN1_Init+0x68>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_CAN1_Init+0x68>)
 8000800:	2200      	movs	r2, #0
 8000802:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_CAN1_Init+0x68>)
 8000806:	2200      	movs	r2, #0
 8000808:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_CAN1_Init+0x68>)
 800080c:	f000 fb70 	bl	8000ef0 <HAL_CAN_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000816:	f000 f905 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000008c 	.word	0x2000008c
 8000824:	40006400 	.word	0x40006400

08000828 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 800082e:	4a12      	ldr	r2, [pc, #72]	; (8000878 <MX_USART2_UART_Init+0x50>)
 8000830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000860:	f002 fb18 	bl	8002e94 <HAL_UART_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800086a:	f000 f8db 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200000b4 	.word	0x200000b4
 8000878:	40004400 	.word	0x40004400

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	4b37      	ldr	r3, [pc, #220]	; (8000974 <MX_GPIO_Init+0xf8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a36      	ldr	r2, [pc, #216]	; (8000974 <MX_GPIO_Init+0xf8>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b34      	ldr	r3, [pc, #208]	; (8000974 <MX_GPIO_Init+0xf8>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	4b30      	ldr	r3, [pc, #192]	; (8000974 <MX_GPIO_Init+0xf8>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a2f      	ldr	r2, [pc, #188]	; (8000974 <MX_GPIO_Init+0xf8>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <MX_GPIO_Init+0xf8>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	4b29      	ldr	r3, [pc, #164]	; (8000974 <MX_GPIO_Init+0xf8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a28      	ldr	r2, [pc, #160]	; (8000974 <MX_GPIO_Init+0xf8>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b26      	ldr	r3, [pc, #152]	; (8000974 <MX_GPIO_Init+0xf8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_GPIO_Init+0xf8>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a21      	ldr	r2, [pc, #132]	; (8000974 <MX_GPIO_Init+0xf8>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_GPIO_Init+0xf8>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2120      	movs	r1, #32
 8000906:	481c      	ldr	r0, [pc, #112]	; (8000978 <MX_GPIO_Init+0xfc>)
 8000908:	f001 fcc2 	bl	8002290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2110      	movs	r1, #16
 8000910:	481a      	ldr	r0, [pc, #104]	; (800097c <MX_GPIO_Init+0x100>)
 8000912:	f001 fcbd 	bl	8002290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800091c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	4814      	ldr	r0, [pc, #80]	; (8000980 <MX_GPIO_Init+0x104>)
 800092e:	f001 fb1b 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000932:	2320      	movs	r3, #32
 8000934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	480b      	ldr	r0, [pc, #44]	; (8000978 <MX_GPIO_Init+0xfc>)
 800094a:	f001 fb0d 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800094e:	2310      	movs	r3, #16
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_GPIO_Init+0x100>)
 8000966:	f001 faff 	bl	8001f68 <HAL_GPIO_Init>

}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	; 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40020000 	.word	0x40020000
 800097c:	40020400 	.word	0x40020400
 8000980:	40020800 	.word	0x40020800

08000984 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)	//printfに必要
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	b29a      	uxth	r2, r3
 8000994:	230a      	movs	r3, #10
 8000996:	68b9      	ldr	r1, [r7, #8]
 8000998:	4803      	ldr	r0, [pc, #12]	; (80009a8 <_write+0x24>)
 800099a:	f002 fac8 	bl	8002f2e <HAL_UART_Transmit>
  return len;
 800099e:	687b      	ldr	r3, [r7, #4]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200000b4 	.word	0x200000b4

080009ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*UartHandle)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit(&huart2,UART1_Data,6,1000);
	get_uart_flag=1;
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <HAL_UART_RxCpltCallback+0x1c>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	200001a0 	.word	0x200001a0

080009cc <HAL_CAN_RxFifo0MsgPendingCallback>:
	  printf("Tx_can\r\n");

}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
//  HAL_UART_Transmit(&huart2, tx_data, 10,3000);
	printf("Rx_can\r\n");
 80009d4:	480c      	ldr	r0, [pc, #48]	; (8000a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80009d6:	f003 fb75 	bl	80040c4 <puts>
  HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0, &RxHeader,RxData);
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80009dc:	4a0c      	ldr	r2, [pc, #48]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80009de:	2100      	movs	r1, #0
 80009e0:	480c      	ldr	r0, [pc, #48]	; (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80009e2:	f000 fdb5 	bl	8001550 <HAL_CAN_GetRxMessage>
  HAL_UART_Transmit(&huart2,RxData,sizeof(RxData),1000);//受け取ったデータを送信
 80009e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ea:	2240      	movs	r2, #64	; 0x40
 80009ec:	4907      	ldr	r1, [pc, #28]	; (8000a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80009ee:	480a      	ldr	r0, [pc, #40]	; (8000a18 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80009f0:	f002 fa9d 	bl	8002f2e <HAL_UART_Transmit>
	printf("\r\n");
 80009f4:	4809      	ldr	r0, [pc, #36]	; (8000a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80009f6:	f003 fb65 	bl	80040c4 <puts>

//HAL_UART_Transmit(&huart2,&RxHeader,4);
  get_can_flag=1;
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	701a      	strb	r2, [r3, #0]
//  if(flag >0){
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
//  }else{
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
//  }
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	08004a30 	.word	0x08004a30
 8000a0c:	2000015c 	.word	0x2000015c
 8000a10:	20000138 	.word	0x20000138
 8000a14:	2000008c 	.word	0x2000008c
 8000a18:	200000b4 	.word	0x200000b4
 8000a1c:	08004a38 	.word	0x08004a38
 8000a20:	200001a1 	.word	0x200001a1

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <Error_Handler+0x8>
	...

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	6453      	str	r3, [r2, #68]	; 0x44
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	; 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a2a      	ldr	r2, [pc, #168]	; (8000b48 <HAL_CAN_MspInit+0xc8>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d14d      	bne.n	8000b3e <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <HAL_CAN_MspInit+0xcc>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a28      	ldr	r2, [pc, #160]	; (8000b4c <HAL_CAN_MspInit+0xcc>)
 8000aac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <HAL_CAN_MspInit+0xcc>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <HAL_CAN_MspInit+0xcc>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a21      	ldr	r2, [pc, #132]	; (8000b4c <HAL_CAN_MspInit+0xcc>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <HAL_CAN_MspInit+0xcc>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ada:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000aec:	2309      	movs	r3, #9
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	4816      	ldr	r0, [pc, #88]	; (8000b50 <HAL_CAN_MspInit+0xd0>)
 8000af8:	f001 fa36 	bl	8001f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b0e:	2309      	movs	r3, #9
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	480d      	ldr	r0, [pc, #52]	; (8000b50 <HAL_CAN_MspInit+0xd0>)
 8000b1a:	f001 fa25 	bl	8001f68 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	2013      	movs	r0, #19
 8000b24:	f001 f957 	bl	8001dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000b28:	2013      	movs	r0, #19
 8000b2a:	f001 f970 	bl	8001e0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	2014      	movs	r0, #20
 8000b34:	f001 f94f 	bl	8001dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b38:	2014      	movs	r0, #20
 8000b3a:	f001 f968 	bl	8001e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b3e:	bf00      	nop
 8000b40:	3728      	adds	r7, #40	; 0x28
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40006400 	.word	0x40006400
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020000 	.word	0x40020000

08000b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a1d      	ldr	r2, [pc, #116]	; (8000be8 <HAL_UART_MspInit+0x94>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d133      	bne.n	8000bde <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <HAL_UART_MspInit+0x98>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <HAL_UART_MspInit+0x98>)
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <HAL_UART_MspInit+0x98>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_UART_MspInit+0x98>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a14      	ldr	r2, [pc, #80]	; (8000bec <HAL_UART_MspInit+0x98>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_UART_MspInit+0x98>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bae:	230c      	movs	r3, #12
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bbe:	2307      	movs	r3, #7
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <HAL_UART_MspInit+0x9c>)
 8000bca:	f001 f9cd 	bl	8001f68 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2026      	movs	r0, #38	; 0x26
 8000bd4:	f001 f8ff 	bl	8001dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bd8:	2026      	movs	r0, #38	; 0x26
 8000bda:	f001 f918 	bl	8001e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	; 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40004400 	.word	0x40004400
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020000 	.word	0x40020000

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c40:	f000 f936 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <CAN1_TX_IRQHandler+0x10>)
 8000c4e:	f000 fdb7 	bl	80017c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000008c 	.word	0x2000008c

08000c5c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <CAN1_RX0_IRQHandler+0x10>)
 8000c62:	f000 fdad 	bl	80017c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2000008c 	.word	0x2000008c

08000c70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <USART2_IRQHandler+0x10>)
 8000c76:	f002 fa1d 	bl	80030b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200000b4 	.word	0x200000b4

08000c84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	e00a      	b.n	8000cac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c96:	f3af 8000 	nop.w
 8000c9a:	4601      	mov	r1, r0
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	60ba      	str	r2, [r7, #8]
 8000ca2:	b2ca      	uxtb	r2, r1
 8000ca4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dbf0      	blt.n	8000c96 <_read+0x12>
	}

return len;
 8000cb4:	687b      	ldr	r3, [r7, #4]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_close>:
	}
	return len;
}

int _close(int file)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
	return -1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ce6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <_isatty>:

int _isatty(int file)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
	return 1;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
	return 0;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f003 f914 	bl	8003f84 <__errno>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20020000 	.word	0x20020000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	200001a4 	.word	0x200001a4
 8000d90:	200001c0 	.word	0x200001c0

08000d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dbe:	490e      	ldr	r1, [pc, #56]	; (8000df8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc0:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd4:	4c0b      	ldr	r4, [pc, #44]	; (8000e04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000de2:	f7ff ffd7 	bl	8000d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de6:	f003 f8d3 	bl	8003f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dea:	f7ff fb8d 	bl	8000508 <main>
  bx  lr    
 8000dee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000df0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dfc:	08004ac8 	.word	0x08004ac8
  ldr r2, =_sbss
 8000e00:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e04:	200001bc 	.word	0x200001bc

08000e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC_IRQHandler>
	...

08000e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <HAL_Init+0x40>)
 8000e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <HAL_Init+0x40>)
 8000e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <HAL_Init+0x40>)
 8000e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 ffc3 	bl	8001dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f000 f808 	bl	8000e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e40:	f7ff fdf6 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023c00 	.word	0x40023c00

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x54>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_InitTick+0x58>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 ffdb 	bl	8001e2a <HAL_SYSTICK_Config>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00e      	b.n	8000e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b0f      	cmp	r3, #15
 8000e82:	d80a      	bhi.n	8000e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e8c:	f000 ffa3 	bl	8001dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e90:	4a06      	ldr	r2, [pc, #24]	; (8000eac <HAL_InitTick+0x5c>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000004 	.word	0x20000004

08000eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x20>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	200001a8 	.word	0x200001a8

08000ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_GetTick+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	200001a8 	.word	0x200001a8

08000ef0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d101      	bne.n	8000f02 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e0ed      	b.n	80010de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d102      	bne.n	8000f14 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff fdb6 	bl	8000a80 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 0201 	orr.w	r2, r2, #1
 8000f22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f24:	f7ff ffd8 	bl	8000ed8 <HAL_GetTick>
 8000f28:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f2a:	e012      	b.n	8000f52 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f2c:	f7ff ffd4 	bl	8000ed8 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b0a      	cmp	r3, #10
 8000f38:	d90b      	bls.n	8000f52 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2205      	movs	r2, #5
 8000f4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e0c5      	b.n	80010de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0e5      	beq.n	8000f2c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 0202 	bic.w	r2, r2, #2
 8000f6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f70:	f7ff ffb2 	bl	8000ed8 <HAL_GetTick>
 8000f74:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f76:	e012      	b.n	8000f9e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f78:	f7ff ffae 	bl	8000ed8 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b0a      	cmp	r3, #10
 8000f84:	d90b      	bls.n	8000f9e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2205      	movs	r2, #5
 8000f96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e09f      	b.n	80010de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1e5      	bne.n	8000f78 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	7e1b      	ldrb	r3, [r3, #24]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d108      	bne.n	8000fc6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	e007      	b.n	8000fd6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	7e5b      	ldrb	r3, [r3, #25]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d108      	bne.n	8000ff0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	e007      	b.n	8001000 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ffe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	7e9b      	ldrb	r3, [r3, #26]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d108      	bne.n	800101a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f042 0220 	orr.w	r2, r2, #32
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	e007      	b.n	800102a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f022 0220 	bic.w	r2, r2, #32
 8001028:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7edb      	ldrb	r3, [r3, #27]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d108      	bne.n	8001044 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 0210 	bic.w	r2, r2, #16
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	e007      	b.n	8001054 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f042 0210 	orr.w	r2, r2, #16
 8001052:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7f1b      	ldrb	r3, [r3, #28]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d108      	bne.n	800106e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f042 0208 	orr.w	r2, r2, #8
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	e007      	b.n	800107e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 0208 	bic.w	r2, r2, #8
 800107c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	7f5b      	ldrb	r3, [r3, #29]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d108      	bne.n	8001098 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f042 0204 	orr.w	r2, r2, #4
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	e007      	b.n	80010a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0204 	bic.w	r2, r2, #4
 80010a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	431a      	orrs	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	431a      	orrs	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	ea42 0103 	orr.w	r1, r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	1e5a      	subs	r2, r3, #1
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	430a      	orrs	r2, r1
 80010cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010fe:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001100:	7cfb      	ldrb	r3, [r7, #19]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d003      	beq.n	800110e <HAL_CAN_ConfigFilter+0x26>
 8001106:	7cfb      	ldrb	r3, [r7, #19]
 8001108:	2b02      	cmp	r3, #2
 800110a:	f040 80be 	bne.w	800128a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800110e:	4b65      	ldr	r3, [pc, #404]	; (80012a4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001110:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001118:	f043 0201 	orr.w	r2, r3, #1
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001128:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	431a      	orrs	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	f003 031f 	and.w	r3, r3, #31
 800114e:	2201      	movs	r2, #1
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	43db      	mvns	r3, r3
 8001160:	401a      	ands	r2, r3
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d123      	bne.n	80011b8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	43db      	mvns	r3, r3
 800117a:	401a      	ands	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001192:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	3248      	adds	r2, #72	; 0x48
 8001198:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011ac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011ae:	6979      	ldr	r1, [r7, #20]
 80011b0:	3348      	adds	r3, #72	; 0x48
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	440b      	add	r3, r1
 80011b6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	69db      	ldr	r3, [r3, #28]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d122      	bne.n	8001206 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	431a      	orrs	r2, r3
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	3248      	adds	r2, #72	; 0x48
 80011e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011fc:	6979      	ldr	r1, [r7, #20]
 80011fe:	3348      	adds	r3, #72	; 0x48
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	440b      	add	r3, r1
 8001204:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d109      	bne.n	8001222 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43db      	mvns	r3, r3
 8001218:	401a      	ands	r2, r3
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001220:	e007      	b.n	8001232 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	431a      	orrs	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d109      	bne.n	800124e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	43db      	mvns	r3, r3
 8001244:	401a      	ands	r2, r3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800124c:	e007      	b.n	800125e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	431a      	orrs	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d107      	bne.n	8001276 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	431a      	orrs	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800127c:	f023 0201 	bic.w	r2, r3, #1
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	e006      	b.n	8001298 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
  }
}
 8001298:	4618      	mov	r0, r3
 800129a:	371c      	adds	r7, #28
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	40006400 	.word	0x40006400

080012a8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d12e      	bne.n	800131a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2202      	movs	r2, #2
 80012c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0201 	bic.w	r2, r2, #1
 80012d2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80012d4:	f7ff fe00 	bl	8000ed8 <HAL_GetTick>
 80012d8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012da:	e012      	b.n	8001302 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012dc:	f7ff fdfc 	bl	8000ed8 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b0a      	cmp	r3, #10
 80012e8:	d90b      	bls.n	8001302 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2205      	movs	r2, #5
 80012fa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e012      	b.n	8001328 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1e5      	bne.n	80012dc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	e006      	b.n	8001328 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
  }
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001344:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800134e:	7ffb      	ldrb	r3, [r7, #31]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d003      	beq.n	800135c <HAL_CAN_AddTxMessage+0x2c>
 8001354:	7ffb      	ldrb	r3, [r7, #31]
 8001356:	2b02      	cmp	r3, #2
 8001358:	f040 80b8 	bne.w	80014cc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10a      	bne.n	800137c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800136c:	2b00      	cmp	r3, #0
 800136e:	d105      	bne.n	800137c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 80a0 	beq.w	80014bc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	0e1b      	lsrs	r3, r3, #24
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d907      	bls.n	800139c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e09e      	b.n	80014da <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800139c:	2201      	movs	r2, #1
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	409a      	lsls	r2, r3
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10d      	bne.n	80013ca <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013b8:	68f9      	ldr	r1, [r7, #12]
 80013ba:	6809      	ldr	r1, [r1, #0]
 80013bc:	431a      	orrs	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	3318      	adds	r3, #24
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	440b      	add	r3, r1
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	e00f      	b.n	80013ea <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013d4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013da:	68f9      	ldr	r1, [r7, #12]
 80013dc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80013de:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	3318      	adds	r3, #24
 80013e4:	011b      	lsls	r3, r3, #4
 80013e6:	440b      	add	r3, r1
 80013e8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6819      	ldr	r1, [r3, #0]
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	691a      	ldr	r2, [r3, #16]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	3318      	adds	r3, #24
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	440b      	add	r3, r1
 80013fa:	3304      	adds	r3, #4
 80013fc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	7d1b      	ldrb	r3, [r3, #20]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d111      	bne.n	800142a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	3318      	adds	r3, #24
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	4413      	add	r3, r2
 8001412:	3304      	adds	r3, #4
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	6811      	ldr	r1, [r2, #0]
 800141a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3318      	adds	r3, #24
 8001422:	011b      	lsls	r3, r3, #4
 8001424:	440b      	add	r3, r1
 8001426:	3304      	adds	r3, #4
 8001428:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3307      	adds	r3, #7
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	061a      	lsls	r2, r3, #24
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3306      	adds	r3, #6
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	041b      	lsls	r3, r3, #16
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3305      	adds	r3, #5
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	4313      	orrs	r3, r2
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	3204      	adds	r2, #4
 800144a:	7812      	ldrb	r2, [r2, #0]
 800144c:	4610      	mov	r0, r2
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	6811      	ldr	r1, [r2, #0]
 8001452:	ea43 0200 	orr.w	r2, r3, r0
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	440b      	add	r3, r1
 800145c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001460:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3303      	adds	r3, #3
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	061a      	lsls	r2, r3, #24
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3302      	adds	r3, #2
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	041b      	lsls	r3, r3, #16
 8001472:	431a      	orrs	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3301      	adds	r3, #1
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	4313      	orrs	r3, r2
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	7812      	ldrb	r2, [r2, #0]
 8001482:	4610      	mov	r0, r2
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	6811      	ldr	r1, [r2, #0]
 8001488:	ea43 0200 	orr.w	r2, r3, r0
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	440b      	add	r3, r1
 8001492:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001496:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	3318      	adds	r3, #24
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	4413      	add	r3, r2
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	6811      	ldr	r1, [r2, #0]
 80014aa:	f043 0201 	orr.w	r2, r3, #1
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3318      	adds	r3, #24
 80014b2:	011b      	lsls	r3, r3, #4
 80014b4:	440b      	add	r3, r1
 80014b6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	e00e      	b.n	80014da <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e006      	b.n	80014da <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
  }
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	; 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80014fa:	7afb      	ldrb	r3, [r7, #11]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d002      	beq.n	8001506 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001500:	7afb      	ldrb	r3, [r7, #11]
 8001502:	2b02      	cmp	r3, #2
 8001504:	d11d      	bne.n	8001542 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d002      	beq.n	800151a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	3301      	adds	r3, #1
 8001518:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3301      	adds	r3, #1
 800152c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d002      	beq.n	8001542 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3301      	adds	r3, #1
 8001540:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001542:	68fb      	ldr	r3, [r7, #12]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
 800155c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001564:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001566:	7dfb      	ldrb	r3, [r7, #23]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d003      	beq.n	8001574 <HAL_CAN_GetRxMessage+0x24>
 800156c:	7dfb      	ldrb	r3, [r7, #23]
 800156e:	2b02      	cmp	r3, #2
 8001570:	f040 80f3 	bne.w	800175a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10e      	bne.n	8001598 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d116      	bne.n	80015b6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0e7      	b.n	8001768 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d107      	bne.n	80015b6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e0d8      	b.n	8001768 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	331b      	adds	r3, #27
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	4413      	add	r3, r2
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0204 	and.w	r2, r3, #4
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10c      	bne.n	80015ee <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	331b      	adds	r3, #27
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	4413      	add	r3, r2
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	0d5b      	lsrs	r3, r3, #21
 80015e4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	e00b      	b.n	8001606 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	331b      	adds	r3, #27
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	4413      	add	r3, r2
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	08db      	lsrs	r3, r3, #3
 80015fe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	331b      	adds	r3, #27
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	4413      	add	r3, r2
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0202 	and.w	r2, r3, #2
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	331b      	adds	r3, #27
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	4413      	add	r3, r2
 8001628:	3304      	adds	r3, #4
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 020f 	and.w	r2, r3, #15
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	331b      	adds	r3, #27
 800163c:	011b      	lsls	r3, r3, #4
 800163e:	4413      	add	r3, r2
 8001640:	3304      	adds	r3, #4
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	b2da      	uxtb	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	331b      	adds	r3, #27
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	4413      	add	r3, r2
 8001658:	3304      	adds	r3, #4
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	0c1b      	lsrs	r3, r3, #16
 800165e:	b29a      	uxth	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	4413      	add	r3, r2
 800166e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	4413      	add	r3, r2
 8001684:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	0a1a      	lsrs	r2, r3, #8
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	3301      	adds	r3, #1
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	4413      	add	r3, r2
 800169e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	0c1a      	lsrs	r2, r3, #16
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	3302      	adds	r3, #2
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	4413      	add	r3, r2
 80016b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	0e1a      	lsrs	r2, r3, #24
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	3303      	adds	r3, #3
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	4413      	add	r3, r2
 80016d2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	3304      	adds	r3, #4
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	4413      	add	r3, r2
 80016ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	0a1a      	lsrs	r2, r3, #8
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	3305      	adds	r3, #5
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	4413      	add	r3, r2
 8001704:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	0c1a      	lsrs	r2, r3, #16
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	3306      	adds	r3, #6
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	4413      	add	r3, r2
 800171e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	0e1a      	lsrs	r2, r3, #24
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	3307      	adds	r3, #7
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d108      	bne.n	8001746 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0220 	orr.w	r2, r2, #32
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	e007      	b.n	8001756 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	691a      	ldr	r2, [r3, #16]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f042 0220 	orr.w	r2, r2, #32
 8001754:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	e006      	b.n	8001768 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
  }
}
 8001768:	4618      	mov	r0, r3
 800176a:	371c      	adds	r7, #28
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001784:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d002      	beq.n	8001792 <HAL_CAN_ActivateNotification+0x1e>
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d109      	bne.n	80017a6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6959      	ldr	r1, [r3, #20]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e006      	b.n	80017b4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
  }
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d07c      	beq.n	8001900 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	d023      	beq.n	8001858 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2201      	movs	r2, #1
 8001816:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f983 	bl	8001b2e <HAL_CAN_TxMailbox0CompleteCallback>
 8001828:	e016      	b.n	8001858 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d004      	beq.n	800183e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
 800183c:	e00c      	b.n	8001858 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	2b00      	cmp	r3, #0
 8001846:	d004      	beq.n	8001852 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
 8001850:	e002      	b.n	8001858 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f989 	bl	8001b6a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d024      	beq.n	80018ac <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f44f 7280 	mov.w	r2, #256	; 0x100
 800186a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f963 	bl	8001b42 <HAL_CAN_TxMailbox1CompleteCallback>
 800187c:	e016      	b.n	80018ac <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001884:	2b00      	cmp	r3, #0
 8001886:	d004      	beq.n	8001892 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
 8001890:	e00c      	b.n	80018ac <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001898:	2b00      	cmp	r3, #0
 800189a:	d004      	beq.n	80018a6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
 80018a4:	e002      	b.n	80018ac <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f969 	bl	8001b7e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d024      	beq.n	8001900 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f943 	bl	8001b56 <HAL_CAN_TxMailbox2CompleteCallback>
 80018d0:	e016      	b.n	8001900 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d004      	beq.n	80018e6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
 80018e4:	e00c      	b.n	8001900 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d004      	beq.n	80018fa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
 80018f8:	e002      	b.n	8001900 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f949 	bl	8001b92 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00c      	beq.n	8001924 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	2b00      	cmp	r3, #0
 8001912:	d007      	beq.n	8001924 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800191a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2210      	movs	r2, #16
 8001922:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00b      	beq.n	8001946 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d006      	beq.n	8001946 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2208      	movs	r2, #8
 800193e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f930 	bl	8001ba6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d009      	beq.n	8001964 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff f834 	bl	80009cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00c      	beq.n	8001988 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	d007      	beq.n	8001988 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800197e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2210      	movs	r2, #16
 8001986:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001988:	6a3b      	ldr	r3, [r7, #32]
 800198a:	f003 0320 	and.w	r3, r3, #32
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00b      	beq.n	80019aa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b00      	cmp	r3, #0
 800199a:	d006      	beq.n	80019aa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2208      	movs	r2, #8
 80019a2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f912 	bl	8001bce <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	f003 0310 	and.w	r3, r3, #16
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d009      	beq.n	80019c8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f8f9 	bl	8001bba <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00b      	beq.n	80019ea <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	f003 0310 	and.w	r3, r3, #16
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d006      	beq.n	80019ea <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2210      	movs	r2, #16
 80019e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f8fc 	bl	8001be2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00b      	beq.n	8001a0c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d006      	beq.n	8001a0c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2208      	movs	r2, #8
 8001a04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f8f5 	bl	8001bf6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d07b      	beq.n	8001b0e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d072      	beq.n	8001b06 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d008      	beq.n	8001a3c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
 8001a3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d008      	beq.n	8001a58 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	f043 0302 	orr.w	r3, r3, #2
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d008      	beq.n	8001a74 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	f043 0304 	orr.w	r3, r3, #4
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d043      	beq.n	8001b06 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d03e      	beq.n	8001b06 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a8e:	2b60      	cmp	r3, #96	; 0x60
 8001a90:	d02b      	beq.n	8001aea <HAL_CAN_IRQHandler+0x32a>
 8001a92:	2b60      	cmp	r3, #96	; 0x60
 8001a94:	d82e      	bhi.n	8001af4 <HAL_CAN_IRQHandler+0x334>
 8001a96:	2b50      	cmp	r3, #80	; 0x50
 8001a98:	d022      	beq.n	8001ae0 <HAL_CAN_IRQHandler+0x320>
 8001a9a:	2b50      	cmp	r3, #80	; 0x50
 8001a9c:	d82a      	bhi.n	8001af4 <HAL_CAN_IRQHandler+0x334>
 8001a9e:	2b40      	cmp	r3, #64	; 0x40
 8001aa0:	d019      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x316>
 8001aa2:	2b40      	cmp	r3, #64	; 0x40
 8001aa4:	d826      	bhi.n	8001af4 <HAL_CAN_IRQHandler+0x334>
 8001aa6:	2b30      	cmp	r3, #48	; 0x30
 8001aa8:	d010      	beq.n	8001acc <HAL_CAN_IRQHandler+0x30c>
 8001aaa:	2b30      	cmp	r3, #48	; 0x30
 8001aac:	d822      	bhi.n	8001af4 <HAL_CAN_IRQHandler+0x334>
 8001aae:	2b10      	cmp	r3, #16
 8001ab0:	d002      	beq.n	8001ab8 <HAL_CAN_IRQHandler+0x2f8>
 8001ab2:	2b20      	cmp	r3, #32
 8001ab4:	d005      	beq.n	8001ac2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ab6:	e01d      	b.n	8001af4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	f043 0308 	orr.w	r3, r3, #8
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ac0:	e019      	b.n	8001af6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	f043 0310 	orr.w	r3, r3, #16
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001aca:	e014      	b.n	8001af6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	f043 0320 	orr.w	r3, r3, #32
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ad4:	e00f      	b.n	8001af6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ade:	e00a      	b.n	8001af6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ae8:	e005      	b.n	8001af6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001af2:	e000      	b.n	8001af6 <HAL_CAN_IRQHandler+0x336>
            break;
 8001af4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	699a      	ldr	r2, [r3, #24]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b04:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f872 	bl	8001c0a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b26:	bf00      	nop
 8001b28:	3728      	adds	r7, #40	; 0x28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c52:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	60d3      	str	r3, [r2, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <__NVIC_GetPriorityGrouping+0x18>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	f003 0307 	and.w	r3, r3, #7
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	db0b      	blt.n	8001cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	f003 021f 	and.w	r2, r3, #31
 8001c9c:	4907      	ldr	r1, [pc, #28]	; (8001cbc <__NVIC_EnableIRQ+0x38>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	095b      	lsrs	r3, r3, #5
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8001caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000e100 	.word	0xe000e100

08001cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	db0a      	blt.n	8001cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	490c      	ldr	r1, [pc, #48]	; (8001d0c <__NVIC_SetPriority+0x4c>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	0112      	lsls	r2, r2, #4
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce8:	e00a      	b.n	8001d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4908      	ldr	r1, [pc, #32]	; (8001d10 <__NVIC_SetPriority+0x50>)
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	3b04      	subs	r3, #4
 8001cf8:	0112      	lsls	r2, r2, #4
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	761a      	strb	r2, [r3, #24]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000e100 	.word	0xe000e100
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b089      	sub	sp, #36	; 0x24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f1c3 0307 	rsb	r3, r3, #7
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	bf28      	it	cs
 8001d32:	2304      	movcs	r3, #4
 8001d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d902      	bls.n	8001d44 <NVIC_EncodePriority+0x30>
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3b03      	subs	r3, #3
 8001d42:	e000      	b.n	8001d46 <NVIC_EncodePriority+0x32>
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	401a      	ands	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	43d9      	mvns	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	4313      	orrs	r3, r2
         );
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3724      	adds	r7, #36	; 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d8c:	d301      	bcc.n	8001d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e00f      	b.n	8001db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <SysTick_Config+0x40>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9a:	210f      	movs	r1, #15
 8001d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001da0:	f7ff ff8e 	bl	8001cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <SysTick_Config+0x40>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001daa:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <SysTick_Config+0x40>)
 8001dac:	2207      	movs	r2, #7
 8001dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	e000e010 	.word	0xe000e010

08001dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff ff29 	bl	8001c20 <__NVIC_SetPriorityGrouping>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b086      	sub	sp, #24
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de8:	f7ff ff3e 	bl	8001c68 <__NVIC_GetPriorityGrouping>
 8001dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	6978      	ldr	r0, [r7, #20]
 8001df4:	f7ff ff8e 	bl	8001d14 <NVIC_EncodePriority>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfe:	4611      	mov	r1, r2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff5d 	bl	8001cc0 <__NVIC_SetPriority>
}
 8001e06:	bf00      	nop
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff31 	bl	8001c84 <__NVIC_EnableIRQ>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff ffa2 	bl	8001d7c <SysTick_Config>
 8001e38:	4603      	mov	r3, r0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e50:	f7ff f842 	bl	8000ed8 <HAL_GetTick>
 8001e54:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d008      	beq.n	8001e74 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2280      	movs	r2, #128	; 0x80
 8001e66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e052      	b.n	8001f1a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0216 	bic.w	r2, r2, #22
 8001e82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e92:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d103      	bne.n	8001ea4 <HAL_DMA_Abort+0x62>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d007      	beq.n	8001eb4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0208 	bic.w	r2, r2, #8
 8001eb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0201 	bic.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec4:	e013      	b.n	8001eee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ec6:	f7ff f807 	bl	8000ed8 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d90c      	bls.n	8001eee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2203      	movs	r2, #3
 8001ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e015      	b.n	8001f1a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1e4      	bne.n	8001ec6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f00:	223f      	movs	r2, #63	; 0x3f
 8001f02:	409a      	lsls	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d004      	beq.n	8001f40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2280      	movs	r2, #128	; 0x80
 8001f3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e00c      	b.n	8001f5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2205      	movs	r2, #5
 8001f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0201 	bic.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	; 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	e165      	b.n	8002250 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f84:	2201      	movs	r2, #1
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	f040 8154 	bne.w	800224a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d005      	beq.n	8001fba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d130      	bne.n	800201c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 0201 	and.w	r2, r3, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	2b03      	cmp	r3, #3
 8002026:	d017      	beq.n	8002058 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	2203      	movs	r2, #3
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d123      	bne.n	80020ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	08da      	lsrs	r2, r3, #3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3208      	adds	r2, #8
 800206c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	220f      	movs	r2, #15
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	08da      	lsrs	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3208      	adds	r2, #8
 80020a6:	69b9      	ldr	r1, [r7, #24]
 80020a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0203 	and.w	r2, r3, #3
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80ae 	beq.w	800224a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b5d      	ldr	r3, [pc, #372]	; (8002268 <HAL_GPIO_Init+0x300>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	4a5c      	ldr	r2, [pc, #368]	; (8002268 <HAL_GPIO_Init+0x300>)
 80020f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020fc:	6453      	str	r3, [r2, #68]	; 0x44
 80020fe:	4b5a      	ldr	r3, [pc, #360]	; (8002268 <HAL_GPIO_Init+0x300>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800210a:	4a58      	ldr	r2, [pc, #352]	; (800226c <HAL_GPIO_Init+0x304>)
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	089b      	lsrs	r3, r3, #2
 8002110:	3302      	adds	r3, #2
 8002112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	220f      	movs	r2, #15
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a4f      	ldr	r2, [pc, #316]	; (8002270 <HAL_GPIO_Init+0x308>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d025      	beq.n	8002182 <HAL_GPIO_Init+0x21a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a4e      	ldr	r2, [pc, #312]	; (8002274 <HAL_GPIO_Init+0x30c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d01f      	beq.n	800217e <HAL_GPIO_Init+0x216>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a4d      	ldr	r2, [pc, #308]	; (8002278 <HAL_GPIO_Init+0x310>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d019      	beq.n	800217a <HAL_GPIO_Init+0x212>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4c      	ldr	r2, [pc, #304]	; (800227c <HAL_GPIO_Init+0x314>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d013      	beq.n	8002176 <HAL_GPIO_Init+0x20e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a4b      	ldr	r2, [pc, #300]	; (8002280 <HAL_GPIO_Init+0x318>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00d      	beq.n	8002172 <HAL_GPIO_Init+0x20a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a4a      	ldr	r2, [pc, #296]	; (8002284 <HAL_GPIO_Init+0x31c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d007      	beq.n	800216e <HAL_GPIO_Init+0x206>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a49      	ldr	r2, [pc, #292]	; (8002288 <HAL_GPIO_Init+0x320>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d101      	bne.n	800216a <HAL_GPIO_Init+0x202>
 8002166:	2306      	movs	r3, #6
 8002168:	e00c      	b.n	8002184 <HAL_GPIO_Init+0x21c>
 800216a:	2307      	movs	r3, #7
 800216c:	e00a      	b.n	8002184 <HAL_GPIO_Init+0x21c>
 800216e:	2305      	movs	r3, #5
 8002170:	e008      	b.n	8002184 <HAL_GPIO_Init+0x21c>
 8002172:	2304      	movs	r3, #4
 8002174:	e006      	b.n	8002184 <HAL_GPIO_Init+0x21c>
 8002176:	2303      	movs	r3, #3
 8002178:	e004      	b.n	8002184 <HAL_GPIO_Init+0x21c>
 800217a:	2302      	movs	r3, #2
 800217c:	e002      	b.n	8002184 <HAL_GPIO_Init+0x21c>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <HAL_GPIO_Init+0x21c>
 8002182:	2300      	movs	r3, #0
 8002184:	69fa      	ldr	r2, [r7, #28]
 8002186:	f002 0203 	and.w	r2, r2, #3
 800218a:	0092      	lsls	r2, r2, #2
 800218c:	4093      	lsls	r3, r2
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002194:	4935      	ldr	r1, [pc, #212]	; (800226c <HAL_GPIO_Init+0x304>)
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	089b      	lsrs	r3, r3, #2
 800219a:	3302      	adds	r3, #2
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021a2:	4b3a      	ldr	r3, [pc, #232]	; (800228c <HAL_GPIO_Init+0x324>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021c6:	4a31      	ldr	r2, [pc, #196]	; (800228c <HAL_GPIO_Init+0x324>)
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021cc:	4b2f      	ldr	r3, [pc, #188]	; (800228c <HAL_GPIO_Init+0x324>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021f0:	4a26      	ldr	r2, [pc, #152]	; (800228c <HAL_GPIO_Init+0x324>)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021f6:	4b25      	ldr	r3, [pc, #148]	; (800228c <HAL_GPIO_Init+0x324>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800221a:	4a1c      	ldr	r2, [pc, #112]	; (800228c <HAL_GPIO_Init+0x324>)
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002220:	4b1a      	ldr	r3, [pc, #104]	; (800228c <HAL_GPIO_Init+0x324>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002244:	4a11      	ldr	r2, [pc, #68]	; (800228c <HAL_GPIO_Init+0x324>)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3301      	adds	r3, #1
 800224e:	61fb      	str	r3, [r7, #28]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	2b0f      	cmp	r3, #15
 8002254:	f67f ae96 	bls.w	8001f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	3724      	adds	r7, #36	; 0x24
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40023800 	.word	0x40023800
 800226c:	40013800 	.word	0x40013800
 8002270:	40020000 	.word	0x40020000
 8002274:	40020400 	.word	0x40020400
 8002278:	40020800 	.word	0x40020800
 800227c:	40020c00 	.word	0x40020c00
 8002280:	40021000 	.word	0x40021000
 8002284:	40021400 	.word	0x40021400
 8002288:	40021800 	.word	0x40021800
 800228c:	40013c00 	.word	0x40013c00

08002290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	807b      	strh	r3, [r7, #2]
 800229c:	4613      	mov	r3, r2
 800229e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a0:	787b      	ldrb	r3, [r7, #1]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022a6:	887a      	ldrh	r2, [r7, #2]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022ac:	e003      	b.n	80022b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022ae:	887b      	ldrh	r3, [r7, #2]
 80022b0:	041a      	lsls	r2, r3, #16
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	619a      	str	r2, [r3, #24]
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e0cc      	b.n	8002472 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022d8:	4b68      	ldr	r3, [pc, #416]	; (800247c <HAL_RCC_ClockConfig+0x1b8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d90c      	bls.n	8002300 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e6:	4b65      	ldr	r3, [pc, #404]	; (800247c <HAL_RCC_ClockConfig+0x1b8>)
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ee:	4b63      	ldr	r3, [pc, #396]	; (800247c <HAL_RCC_ClockConfig+0x1b8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d001      	beq.n	8002300 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0b8      	b.n	8002472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d020      	beq.n	800234e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002318:	4b59      	ldr	r3, [pc, #356]	; (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	4a58      	ldr	r2, [pc, #352]	; (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002322:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002330:	4b53      	ldr	r3, [pc, #332]	; (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	4a52      	ldr	r2, [pc, #328]	; (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800233a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800233c:	4b50      	ldr	r3, [pc, #320]	; (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	494d      	ldr	r1, [pc, #308]	; (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	4313      	orrs	r3, r2
 800234c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d044      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d107      	bne.n	8002372 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	4b47      	ldr	r3, [pc, #284]	; (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d119      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e07f      	b.n	8002472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d003      	beq.n	8002382 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800237e:	2b03      	cmp	r3, #3
 8002380:	d107      	bne.n	8002392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002382:	4b3f      	ldr	r3, [pc, #252]	; (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d109      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e06f      	b.n	8002472 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002392:	4b3b      	ldr	r3, [pc, #236]	; (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e067      	b.n	8002472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023a2:	4b37      	ldr	r3, [pc, #220]	; (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f023 0203 	bic.w	r2, r3, #3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	4934      	ldr	r1, [pc, #208]	; (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b4:	f7fe fd90 	bl	8000ed8 <HAL_GetTick>
 80023b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ba:	e00a      	b.n	80023d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023bc:	f7fe fd8c 	bl	8000ed8 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e04f      	b.n	8002472 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d2:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 020c 	and.w	r2, r3, #12
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d1eb      	bne.n	80023bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023e4:	4b25      	ldr	r3, [pc, #148]	; (800247c <HAL_RCC_ClockConfig+0x1b8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d20c      	bcs.n	800240c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4b22      	ldr	r3, [pc, #136]	; (800247c <HAL_RCC_ClockConfig+0x1b8>)
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fa:	4b20      	ldr	r3, [pc, #128]	; (800247c <HAL_RCC_ClockConfig+0x1b8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e032      	b.n	8002472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002418:	4b19      	ldr	r3, [pc, #100]	; (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4916      	ldr	r1, [pc, #88]	; (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	4313      	orrs	r3, r2
 8002428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d009      	beq.n	800244a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002436:	4b12      	ldr	r3, [pc, #72]	; (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	490e      	ldr	r1, [pc, #56]	; (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	4313      	orrs	r3, r2
 8002448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800244a:	f000 f855 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 800244e:	4602      	mov	r2, r0
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	490a      	ldr	r1, [pc, #40]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 800245c:	5ccb      	ldrb	r3, [r1, r3]
 800245e:	fa22 f303 	lsr.w	r3, r2, r3
 8002462:	4a09      	ldr	r2, [pc, #36]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <HAL_RCC_ClockConfig+0x1c8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe fcf0 	bl	8000e50 <HAL_InitTick>

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40023c00 	.word	0x40023c00
 8002480:	40023800 	.word	0x40023800
 8002484:	08004a3c 	.word	0x08004a3c
 8002488:	20000000 	.word	0x20000000
 800248c:	20000004 	.word	0x20000004

08002490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002494:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20000000 	.word	0x20000000

080024a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024ac:	f7ff fff0 	bl	8002490 <HAL_RCC_GetHCLKFreq>
 80024b0:	4602      	mov	r2, r0
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	0a9b      	lsrs	r3, r3, #10
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	4903      	ldr	r1, [pc, #12]	; (80024cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024be:	5ccb      	ldrb	r3, [r1, r3]
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40023800 	.word	0x40023800
 80024cc:	08004a4c 	.word	0x08004a4c

080024d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024d4:	f7ff ffdc 	bl	8002490 <HAL_RCC_GetHCLKFreq>
 80024d8:	4602      	mov	r2, r0
 80024da:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	0b5b      	lsrs	r3, r3, #13
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	4903      	ldr	r1, [pc, #12]	; (80024f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024e6:	5ccb      	ldrb	r3, [r1, r3]
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40023800 	.word	0x40023800
 80024f4:	08004a4c 	.word	0x08004a4c

080024f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024fc:	b0ae      	sub	sp, #184	; 0xb8
 80024fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800251e:	4bcb      	ldr	r3, [pc, #812]	; (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b0c      	cmp	r3, #12
 8002528:	f200 8206 	bhi.w	8002938 <HAL_RCC_GetSysClockFreq+0x440>
 800252c:	a201      	add	r2, pc, #4	; (adr r2, 8002534 <HAL_RCC_GetSysClockFreq+0x3c>)
 800252e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002532:	bf00      	nop
 8002534:	08002569 	.word	0x08002569
 8002538:	08002939 	.word	0x08002939
 800253c:	08002939 	.word	0x08002939
 8002540:	08002939 	.word	0x08002939
 8002544:	08002571 	.word	0x08002571
 8002548:	08002939 	.word	0x08002939
 800254c:	08002939 	.word	0x08002939
 8002550:	08002939 	.word	0x08002939
 8002554:	08002579 	.word	0x08002579
 8002558:	08002939 	.word	0x08002939
 800255c:	08002939 	.word	0x08002939
 8002560:	08002939 	.word	0x08002939
 8002564:	08002769 	.word	0x08002769
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002568:	4bb9      	ldr	r3, [pc, #740]	; (8002850 <HAL_RCC_GetSysClockFreq+0x358>)
 800256a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800256e:	e1e7      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002570:	4bb8      	ldr	r3, [pc, #736]	; (8002854 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002572:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002576:	e1e3      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002578:	4bb4      	ldr	r3, [pc, #720]	; (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002580:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002584:	4bb1      	ldr	r3, [pc, #708]	; (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d071      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002590:	4bae      	ldr	r3, [pc, #696]	; (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	099b      	lsrs	r3, r3, #6
 8002596:	2200      	movs	r2, #0
 8002598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800259c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80025a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025ac:	2300      	movs	r3, #0
 80025ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80025b6:	4622      	mov	r2, r4
 80025b8:	462b      	mov	r3, r5
 80025ba:	f04f 0000 	mov.w	r0, #0
 80025be:	f04f 0100 	mov.w	r1, #0
 80025c2:	0159      	lsls	r1, r3, #5
 80025c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c8:	0150      	lsls	r0, r2, #5
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4621      	mov	r1, r4
 80025d0:	1a51      	subs	r1, r2, r1
 80025d2:	6439      	str	r1, [r7, #64]	; 0x40
 80025d4:	4629      	mov	r1, r5
 80025d6:	eb63 0301 	sbc.w	r3, r3, r1
 80025da:	647b      	str	r3, [r7, #68]	; 0x44
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80025e8:	4649      	mov	r1, r9
 80025ea:	018b      	lsls	r3, r1, #6
 80025ec:	4641      	mov	r1, r8
 80025ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025f2:	4641      	mov	r1, r8
 80025f4:	018a      	lsls	r2, r1, #6
 80025f6:	4641      	mov	r1, r8
 80025f8:	1a51      	subs	r1, r2, r1
 80025fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80025fc:	4649      	mov	r1, r9
 80025fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002610:	4649      	mov	r1, r9
 8002612:	00cb      	lsls	r3, r1, #3
 8002614:	4641      	mov	r1, r8
 8002616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800261a:	4641      	mov	r1, r8
 800261c:	00ca      	lsls	r2, r1, #3
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	4603      	mov	r3, r0
 8002624:	4622      	mov	r2, r4
 8002626:	189b      	adds	r3, r3, r2
 8002628:	633b      	str	r3, [r7, #48]	; 0x30
 800262a:	462b      	mov	r3, r5
 800262c:	460a      	mov	r2, r1
 800262e:	eb42 0303 	adc.w	r3, r2, r3
 8002632:	637b      	str	r3, [r7, #52]	; 0x34
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002640:	4629      	mov	r1, r5
 8002642:	024b      	lsls	r3, r1, #9
 8002644:	4621      	mov	r1, r4
 8002646:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800264a:	4621      	mov	r1, r4
 800264c:	024a      	lsls	r2, r1, #9
 800264e:	4610      	mov	r0, r2
 8002650:	4619      	mov	r1, r3
 8002652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002656:	2200      	movs	r2, #0
 8002658:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800265c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002660:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002664:	f7fd fdce 	bl	8000204 <__aeabi_uldivmod>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4613      	mov	r3, r2
 800266e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002672:	e067      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002674:	4b75      	ldr	r3, [pc, #468]	; (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	099b      	lsrs	r3, r3, #6
 800267a:	2200      	movs	r2, #0
 800267c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002680:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002684:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800268c:	67bb      	str	r3, [r7, #120]	; 0x78
 800268e:	2300      	movs	r3, #0
 8002690:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002692:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002696:	4622      	mov	r2, r4
 8002698:	462b      	mov	r3, r5
 800269a:	f04f 0000 	mov.w	r0, #0
 800269e:	f04f 0100 	mov.w	r1, #0
 80026a2:	0159      	lsls	r1, r3, #5
 80026a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a8:	0150      	lsls	r0, r2, #5
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4621      	mov	r1, r4
 80026b0:	1a51      	subs	r1, r2, r1
 80026b2:	62b9      	str	r1, [r7, #40]	; 0x28
 80026b4:	4629      	mov	r1, r5
 80026b6:	eb63 0301 	sbc.w	r3, r3, r1
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80026c8:	4649      	mov	r1, r9
 80026ca:	018b      	lsls	r3, r1, #6
 80026cc:	4641      	mov	r1, r8
 80026ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026d2:	4641      	mov	r1, r8
 80026d4:	018a      	lsls	r2, r1, #6
 80026d6:	4641      	mov	r1, r8
 80026d8:	ebb2 0a01 	subs.w	sl, r2, r1
 80026dc:	4649      	mov	r1, r9
 80026de:	eb63 0b01 	sbc.w	fp, r3, r1
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026f6:	4692      	mov	sl, r2
 80026f8:	469b      	mov	fp, r3
 80026fa:	4623      	mov	r3, r4
 80026fc:	eb1a 0303 	adds.w	r3, sl, r3
 8002700:	623b      	str	r3, [r7, #32]
 8002702:	462b      	mov	r3, r5
 8002704:	eb4b 0303 	adc.w	r3, fp, r3
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002716:	4629      	mov	r1, r5
 8002718:	028b      	lsls	r3, r1, #10
 800271a:	4621      	mov	r1, r4
 800271c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002720:	4621      	mov	r1, r4
 8002722:	028a      	lsls	r2, r1, #10
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800272c:	2200      	movs	r2, #0
 800272e:	673b      	str	r3, [r7, #112]	; 0x70
 8002730:	677a      	str	r2, [r7, #116]	; 0x74
 8002732:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002736:	f7fd fd65 	bl	8000204 <__aeabi_uldivmod>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4613      	mov	r3, r2
 8002740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002744:	4b41      	ldr	r3, [pc, #260]	; (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	0c1b      	lsrs	r3, r3, #16
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	3301      	adds	r3, #1
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800275a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800275e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002762:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002766:	e0eb      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002768:	4b38      	ldr	r3, [pc, #224]	; (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002770:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002774:	4b35      	ldr	r3, [pc, #212]	; (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d06b      	beq.n	8002858 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002780:	4b32      	ldr	r3, [pc, #200]	; (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	2200      	movs	r2, #0
 8002788:	66bb      	str	r3, [r7, #104]	; 0x68
 800278a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800278c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800278e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002792:	663b      	str	r3, [r7, #96]	; 0x60
 8002794:	2300      	movs	r3, #0
 8002796:	667b      	str	r3, [r7, #100]	; 0x64
 8002798:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800279c:	4622      	mov	r2, r4
 800279e:	462b      	mov	r3, r5
 80027a0:	f04f 0000 	mov.w	r0, #0
 80027a4:	f04f 0100 	mov.w	r1, #0
 80027a8:	0159      	lsls	r1, r3, #5
 80027aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ae:	0150      	lsls	r0, r2, #5
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4621      	mov	r1, r4
 80027b6:	1a51      	subs	r1, r2, r1
 80027b8:	61b9      	str	r1, [r7, #24]
 80027ba:	4629      	mov	r1, r5
 80027bc:	eb63 0301 	sbc.w	r3, r3, r1
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80027ce:	4659      	mov	r1, fp
 80027d0:	018b      	lsls	r3, r1, #6
 80027d2:	4651      	mov	r1, sl
 80027d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027d8:	4651      	mov	r1, sl
 80027da:	018a      	lsls	r2, r1, #6
 80027dc:	4651      	mov	r1, sl
 80027de:	ebb2 0801 	subs.w	r8, r2, r1
 80027e2:	4659      	mov	r1, fp
 80027e4:	eb63 0901 	sbc.w	r9, r3, r1
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027fc:	4690      	mov	r8, r2
 80027fe:	4699      	mov	r9, r3
 8002800:	4623      	mov	r3, r4
 8002802:	eb18 0303 	adds.w	r3, r8, r3
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	462b      	mov	r3, r5
 800280a:	eb49 0303 	adc.w	r3, r9, r3
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800281c:	4629      	mov	r1, r5
 800281e:	024b      	lsls	r3, r1, #9
 8002820:	4621      	mov	r1, r4
 8002822:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002826:	4621      	mov	r1, r4
 8002828:	024a      	lsls	r2, r1, #9
 800282a:	4610      	mov	r0, r2
 800282c:	4619      	mov	r1, r3
 800282e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002832:	2200      	movs	r2, #0
 8002834:	65bb      	str	r3, [r7, #88]	; 0x58
 8002836:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002838:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800283c:	f7fd fce2 	bl	8000204 <__aeabi_uldivmod>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4613      	mov	r3, r2
 8002846:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800284a:	e065      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x420>
 800284c:	40023800 	.word	0x40023800
 8002850:	00f42400 	.word	0x00f42400
 8002854:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002858:	4b3d      	ldr	r3, [pc, #244]	; (8002950 <HAL_RCC_GetSysClockFreq+0x458>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	099b      	lsrs	r3, r3, #6
 800285e:	2200      	movs	r2, #0
 8002860:	4618      	mov	r0, r3
 8002862:	4611      	mov	r1, r2
 8002864:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002868:	653b      	str	r3, [r7, #80]	; 0x50
 800286a:	2300      	movs	r3, #0
 800286c:	657b      	str	r3, [r7, #84]	; 0x54
 800286e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002872:	4642      	mov	r2, r8
 8002874:	464b      	mov	r3, r9
 8002876:	f04f 0000 	mov.w	r0, #0
 800287a:	f04f 0100 	mov.w	r1, #0
 800287e:	0159      	lsls	r1, r3, #5
 8002880:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002884:	0150      	lsls	r0, r2, #5
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4641      	mov	r1, r8
 800288c:	1a51      	subs	r1, r2, r1
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	4649      	mov	r1, r9
 8002892:	eb63 0301 	sbc.w	r3, r3, r1
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80028a4:	4659      	mov	r1, fp
 80028a6:	018b      	lsls	r3, r1, #6
 80028a8:	4651      	mov	r1, sl
 80028aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ae:	4651      	mov	r1, sl
 80028b0:	018a      	lsls	r2, r1, #6
 80028b2:	4651      	mov	r1, sl
 80028b4:	1a54      	subs	r4, r2, r1
 80028b6:	4659      	mov	r1, fp
 80028b8:	eb63 0501 	sbc.w	r5, r3, r1
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	00eb      	lsls	r3, r5, #3
 80028c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ca:	00e2      	lsls	r2, r4, #3
 80028cc:	4614      	mov	r4, r2
 80028ce:	461d      	mov	r5, r3
 80028d0:	4643      	mov	r3, r8
 80028d2:	18e3      	adds	r3, r4, r3
 80028d4:	603b      	str	r3, [r7, #0]
 80028d6:	464b      	mov	r3, r9
 80028d8:	eb45 0303 	adc.w	r3, r5, r3
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ea:	4629      	mov	r1, r5
 80028ec:	028b      	lsls	r3, r1, #10
 80028ee:	4621      	mov	r1, r4
 80028f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028f4:	4621      	mov	r1, r4
 80028f6:	028a      	lsls	r2, r1, #10
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002900:	2200      	movs	r2, #0
 8002902:	64bb      	str	r3, [r7, #72]	; 0x48
 8002904:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002906:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800290a:	f7fd fc7b 	bl	8000204 <__aeabi_uldivmod>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4613      	mov	r3, r2
 8002914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002918:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <HAL_RCC_GetSysClockFreq+0x458>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	0f1b      	lsrs	r3, r3, #28
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002926:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800292a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800292e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002932:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002936:	e003      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_RCC_GetSysClockFreq+0x45c>)
 800293a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800293e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002940:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002944:	4618      	mov	r0, r3
 8002946:	37b8      	adds	r7, #184	; 0xb8
 8002948:	46bd      	mov	sp, r7
 800294a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800
 8002954:	00f42400 	.word	0x00f42400

08002958 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e28d      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 8083 	beq.w	8002a7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002978:	4b94      	ldr	r3, [pc, #592]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 030c 	and.w	r3, r3, #12
 8002980:	2b04      	cmp	r3, #4
 8002982:	d019      	beq.n	80029b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002984:	4b91      	ldr	r3, [pc, #580]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800298c:	2b08      	cmp	r3, #8
 800298e:	d106      	bne.n	800299e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002990:	4b8e      	ldr	r3, [pc, #568]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002998:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800299c:	d00c      	beq.n	80029b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800299e:	4b8b      	ldr	r3, [pc, #556]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029a6:	2b0c      	cmp	r3, #12
 80029a8:	d112      	bne.n	80029d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029aa:	4b88      	ldr	r3, [pc, #544]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b6:	d10b      	bne.n	80029d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b8:	4b84      	ldr	r3, [pc, #528]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d05b      	beq.n	8002a7c <HAL_RCC_OscConfig+0x124>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d157      	bne.n	8002a7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e25a      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d8:	d106      	bne.n	80029e8 <HAL_RCC_OscConfig+0x90>
 80029da:	4b7c      	ldr	r3, [pc, #496]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a7b      	ldr	r2, [pc, #492]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e01d      	b.n	8002a24 <HAL_RCC_OscConfig+0xcc>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f0:	d10c      	bne.n	8002a0c <HAL_RCC_OscConfig+0xb4>
 80029f2:	4b76      	ldr	r3, [pc, #472]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a75      	ldr	r2, [pc, #468]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 80029f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	4b73      	ldr	r3, [pc, #460]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a72      	ldr	r2, [pc, #456]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e00b      	b.n	8002a24 <HAL_RCC_OscConfig+0xcc>
 8002a0c:	4b6f      	ldr	r3, [pc, #444]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a6e      	ldr	r2, [pc, #440]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	4b6c      	ldr	r3, [pc, #432]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a6b      	ldr	r2, [pc, #428]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d013      	beq.n	8002a54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fa54 	bl	8000ed8 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a34:	f7fe fa50 	bl	8000ed8 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	; 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e21f      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	4b61      	ldr	r3, [pc, #388]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0xdc>
 8002a52:	e014      	b.n	8002a7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7fe fa40 	bl	8000ed8 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a5c:	f7fe fa3c 	bl	8000ed8 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b64      	cmp	r3, #100	; 0x64
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e20b      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6e:	4b57      	ldr	r3, [pc, #348]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x104>
 8002a7a:	e000      	b.n	8002a7e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d06f      	beq.n	8002b6a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a8a:	4b50      	ldr	r3, [pc, #320]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d017      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a96:	4b4d      	ldr	r3, [pc, #308]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d105      	bne.n	8002aae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002aa2:	4b4a      	ldr	r3, [pc, #296]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00b      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aae:	4b47      	ldr	r3, [pc, #284]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ab6:	2b0c      	cmp	r3, #12
 8002ab8:	d11c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aba:	4b44      	ldr	r3, [pc, #272]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d116      	bne.n	8002af4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac6:	4b41      	ldr	r3, [pc, #260]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_RCC_OscConfig+0x186>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d001      	beq.n	8002ade <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e1d3      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ade:	4b3b      	ldr	r3, [pc, #236]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4937      	ldr	r1, [pc, #220]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	e03a      	b.n	8002b6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d020      	beq.n	8002b3e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002afc:	4b34      	ldr	r3, [pc, #208]	; (8002bd0 <HAL_RCC_OscConfig+0x278>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b02:	f7fe f9e9 	bl	8000ed8 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b0a:	f7fe f9e5 	bl	8000ed8 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e1b4      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1c:	4b2b      	ldr	r3, [pc, #172]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b28:	4b28      	ldr	r3, [pc, #160]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4925      	ldr	r1, [pc, #148]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	600b      	str	r3, [r1, #0]
 8002b3c:	e015      	b.n	8002b6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b3e:	4b24      	ldr	r3, [pc, #144]	; (8002bd0 <HAL_RCC_OscConfig+0x278>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fe f9c8 	bl	8000ed8 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b4c:	f7fe f9c4 	bl	8000ed8 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e193      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5e:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d036      	beq.n	8002be4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d016      	beq.n	8002bac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b7e:	4b15      	ldr	r3, [pc, #84]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b84:	f7fe f9a8 	bl	8000ed8 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b8c:	f7fe f9a4 	bl	8000ed8 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e173      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0x234>
 8002baa:	e01b      	b.n	8002be4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bac:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb2:	f7fe f991 	bl	8000ed8 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb8:	e00e      	b.n	8002bd8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bba:	f7fe f98d 	bl	8000ed8 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d907      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e15c      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	42470000 	.word	0x42470000
 8002bd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd8:	4b8a      	ldr	r3, [pc, #552]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1ea      	bne.n	8002bba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 8097 	beq.w	8002d20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf6:	4b83      	ldr	r3, [pc, #524]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10f      	bne.n	8002c22 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	4b7f      	ldr	r3, [pc, #508]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	4a7e      	ldr	r2, [pc, #504]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c10:	6413      	str	r3, [r2, #64]	; 0x40
 8002c12:	4b7c      	ldr	r3, [pc, #496]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c22:	4b79      	ldr	r3, [pc, #484]	; (8002e08 <HAL_RCC_OscConfig+0x4b0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d118      	bne.n	8002c60 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c2e:	4b76      	ldr	r3, [pc, #472]	; (8002e08 <HAL_RCC_OscConfig+0x4b0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a75      	ldr	r2, [pc, #468]	; (8002e08 <HAL_RCC_OscConfig+0x4b0>)
 8002c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c3a:	f7fe f94d 	bl	8000ed8 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c42:	f7fe f949 	bl	8000ed8 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e118      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c54:	4b6c      	ldr	r3, [pc, #432]	; (8002e08 <HAL_RCC_OscConfig+0x4b0>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d106      	bne.n	8002c76 <HAL_RCC_OscConfig+0x31e>
 8002c68:	4b66      	ldr	r3, [pc, #408]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6c:	4a65      	ldr	r2, [pc, #404]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	6713      	str	r3, [r2, #112]	; 0x70
 8002c74:	e01c      	b.n	8002cb0 <HAL_RCC_OscConfig+0x358>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2b05      	cmp	r3, #5
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCC_OscConfig+0x340>
 8002c7e:	4b61      	ldr	r3, [pc, #388]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	4a60      	ldr	r2, [pc, #384]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c84:	f043 0304 	orr.w	r3, r3, #4
 8002c88:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8a:	4b5e      	ldr	r3, [pc, #376]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	4a5d      	ldr	r2, [pc, #372]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6713      	str	r3, [r2, #112]	; 0x70
 8002c96:	e00b      	b.n	8002cb0 <HAL_RCC_OscConfig+0x358>
 8002c98:	4b5a      	ldr	r3, [pc, #360]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9c:	4a59      	ldr	r2, [pc, #356]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c9e:	f023 0301 	bic.w	r3, r3, #1
 8002ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca4:	4b57      	ldr	r3, [pc, #348]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca8:	4a56      	ldr	r2, [pc, #344]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002caa:	f023 0304 	bic.w	r3, r3, #4
 8002cae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d015      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb8:	f7fe f90e 	bl	8000ed8 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc0:	f7fe f90a 	bl	8000ed8 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e0d7      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd6:	4b4b      	ldr	r3, [pc, #300]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0ee      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x368>
 8002ce2:	e014      	b.n	8002d0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce4:	f7fe f8f8 	bl	8000ed8 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cea:	e00a      	b.n	8002d02 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cec:	f7fe f8f4 	bl	8000ed8 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e0c1      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d02:	4b40      	ldr	r3, [pc, #256]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1ee      	bne.n	8002cec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d0e:	7dfb      	ldrb	r3, [r7, #23]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d105      	bne.n	8002d20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d14:	4b3b      	ldr	r3, [pc, #236]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	4a3a      	ldr	r2, [pc, #232]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80ad 	beq.w	8002e84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d2a:	4b36      	ldr	r3, [pc, #216]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d060      	beq.n	8002df8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d145      	bne.n	8002dca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3e:	4b33      	ldr	r3, [pc, #204]	; (8002e0c <HAL_RCC_OscConfig+0x4b4>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fe f8c8 	bl	8000ed8 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fe f8c4 	bl	8000ed8 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e093      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5e:	4b29      	ldr	r3, [pc, #164]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69da      	ldr	r2, [r3, #28]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	019b      	lsls	r3, r3, #6
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	085b      	lsrs	r3, r3, #1
 8002d82:	3b01      	subs	r3, #1
 8002d84:	041b      	lsls	r3, r3, #16
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	061b      	lsls	r3, r3, #24
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	071b      	lsls	r3, r3, #28
 8002d96:	491b      	ldr	r1, [pc, #108]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d9c:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <HAL_RCC_OscConfig+0x4b4>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da2:	f7fe f899 	bl	8000ed8 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002daa:	f7fe f895 	bl	8000ed8 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e064      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dbc:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x452>
 8002dc8:	e05c      	b.n	8002e84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dca:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <HAL_RCC_OscConfig+0x4b4>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7fe f882 	bl	8000ed8 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd8:	f7fe f87e 	bl	8000ed8 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e04d      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dea:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x480>
 8002df6:	e045      	b.n	8002e84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d107      	bne.n	8002e10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e040      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40007000 	.word	0x40007000
 8002e0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e10:	4b1f      	ldr	r3, [pc, #124]	; (8002e90 <HAL_RCC_OscConfig+0x538>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d030      	beq.n	8002e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d129      	bne.n	8002e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d122      	bne.n	8002e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e40:	4013      	ands	r3, r2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d119      	bne.n	8002e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e56:	085b      	lsrs	r3, r3, #1
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d10f      	bne.n	8002e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40023800 	.word	0x40023800

08002e94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e03f      	b.n	8002f26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fd fe4a 	bl	8000b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2224      	movs	r2, #36	; 0x24
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ed6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 fddf 	bl	8003a9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002efc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b08a      	sub	sp, #40	; 0x28
 8002f32:	af02      	add	r7, sp, #8
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	603b      	str	r3, [r7, #0]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b20      	cmp	r3, #32
 8002f4c:	d17c      	bne.n	8003048 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d002      	beq.n	8002f5a <HAL_UART_Transmit+0x2c>
 8002f54:	88fb      	ldrh	r3, [r7, #6]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e075      	b.n	800304a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_UART_Transmit+0x3e>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e06e      	b.n	800304a <HAL_UART_Transmit+0x11c>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2221      	movs	r2, #33	; 0x21
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f82:	f7fd ffa9 	bl	8000ed8 <HAL_GetTick>
 8002f86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	88fa      	ldrh	r2, [r7, #6]
 8002f8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	88fa      	ldrh	r2, [r7, #6]
 8002f92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9c:	d108      	bne.n	8002fb0 <HAL_UART_Transmit+0x82>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d104      	bne.n	8002fb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	61bb      	str	r3, [r7, #24]
 8002fae:	e003      	b.n	8002fb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002fc0:	e02a      	b.n	8003018 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2180      	movs	r1, #128	; 0x80
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 fb1f 	bl	8003610 <UART_WaitOnFlagUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e036      	b.n	800304a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10b      	bne.n	8002ffa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ff0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	3302      	adds	r3, #2
 8002ff6:	61bb      	str	r3, [r7, #24]
 8002ff8:	e007      	b.n	800300a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	781a      	ldrb	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	3301      	adds	r3, #1
 8003008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800300e:	b29b      	uxth	r3, r3
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1cf      	bne.n	8002fc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2200      	movs	r2, #0
 800302a:	2140      	movs	r1, #64	; 0x40
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 faef 	bl	8003610 <UART_WaitOnFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e006      	b.n	800304a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	e000      	b.n	800304a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003048:	2302      	movs	r3, #2
  }
}
 800304a:	4618      	mov	r0, r3
 800304c:	3720      	adds	r7, #32
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	4613      	mov	r3, r2
 800305e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b20      	cmp	r3, #32
 800306a:	d11d      	bne.n	80030a8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <HAL_UART_Receive_IT+0x26>
 8003072:	88fb      	ldrh	r3, [r7, #6]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e016      	b.n	80030aa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003082:	2b01      	cmp	r3, #1
 8003084:	d101      	bne.n	800308a <HAL_UART_Receive_IT+0x38>
 8003086:	2302      	movs	r3, #2
 8003088:	e00f      	b.n	80030aa <HAL_UART_Receive_IT+0x58>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	461a      	mov	r2, r3
 800309c:	68b9      	ldr	r1, [r7, #8]
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 fb24 	bl	80036ec <UART_Start_Receive_IT>
 80030a4:	4603      	mov	r3, r0
 80030a6:	e000      	b.n	80030aa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
  }
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b0ba      	sub	sp, #232	; 0xe8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80030da:	2300      	movs	r3, #0
 80030dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80030f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10f      	bne.n	800311a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d009      	beq.n	800311a <HAL_UART_IRQHandler+0x66>
 8003106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800310a:	f003 0320 	and.w	r3, r3, #32
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fc07 	bl	8003926 <UART_Receive_IT>
      return;
 8003118:	e256      	b.n	80035c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800311a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 80de 	beq.w	80032e0 <HAL_UART_IRQHandler+0x22c>
 8003124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d106      	bne.n	800313e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003134:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80d1 	beq.w	80032e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800313e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00b      	beq.n	8003162 <HAL_UART_IRQHandler+0xae>
 800314a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f043 0201 	orr.w	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00b      	beq.n	8003186 <HAL_UART_IRQHandler+0xd2>
 800316e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f043 0202 	orr.w	r2, r3, #2
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00b      	beq.n	80031aa <HAL_UART_IRQHandler+0xf6>
 8003192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d005      	beq.n	80031aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f043 0204 	orr.w	r2, r3, #4
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d011      	beq.n	80031da <HAL_UART_IRQHandler+0x126>
 80031b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d105      	bne.n	80031ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d005      	beq.n	80031da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f043 0208 	orr.w	r2, r3, #8
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 81ed 	beq.w	80035be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_UART_IRQHandler+0x14e>
 80031f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fb92 	bl	8003926 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320c:	2b40      	cmp	r3, #64	; 0x40
 800320e:	bf0c      	ite	eq
 8003210:	2301      	moveq	r3, #1
 8003212:	2300      	movne	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d103      	bne.n	800322e <HAL_UART_IRQHandler+0x17a>
 8003226:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800322a:	2b00      	cmp	r3, #0
 800322c:	d04f      	beq.n	80032ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fa9a 	bl	8003768 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323e:	2b40      	cmp	r3, #64	; 0x40
 8003240:	d141      	bne.n	80032c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3314      	adds	r3, #20
 8003248:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003250:	e853 3f00 	ldrex	r3, [r3]
 8003254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003258:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800325c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3314      	adds	r3, #20
 800326a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800326e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003272:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003276:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800327a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800327e:	e841 2300 	strex	r3, r2, [r1]
 8003282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003286:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1d9      	bne.n	8003242 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003292:	2b00      	cmp	r3, #0
 8003294:	d013      	beq.n	80032be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	4a7d      	ldr	r2, [pc, #500]	; (8003490 <HAL_UART_IRQHandler+0x3dc>)
 800329c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe fe3d 	bl	8001f22 <HAL_DMA_Abort_IT>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d016      	beq.n	80032dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032b8:	4610      	mov	r0, r2
 80032ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032bc:	e00e      	b.n	80032dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f990 	bl	80035e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c4:	e00a      	b.n	80032dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f98c 	bl	80035e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032cc:	e006      	b.n	80032dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f988 	bl	80035e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80032da:	e170      	b.n	80035be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032dc:	bf00      	nop
    return;
 80032de:	e16e      	b.n	80035be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	f040 814a 	bne.w	800357e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8143 	beq.w	800357e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80032f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 813c 	beq.w	800357e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003306:	2300      	movs	r3, #0
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003326:	2b40      	cmp	r3, #64	; 0x40
 8003328:	f040 80b4 	bne.w	8003494 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003338:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 8140 	beq.w	80035c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003346:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800334a:	429a      	cmp	r2, r3
 800334c:	f080 8139 	bcs.w	80035c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003356:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003362:	f000 8088 	beq.w	8003476 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	330c      	adds	r3, #12
 800336c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003370:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003374:	e853 3f00 	ldrex	r3, [r3]
 8003378:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800337c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003384:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	330c      	adds	r3, #12
 800338e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003392:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003396:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800339e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033a2:	e841 2300 	strex	r3, r2, [r1]
 80033a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1d9      	bne.n	8003366 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	3314      	adds	r3, #20
 80033b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033bc:	e853 3f00 	ldrex	r3, [r3]
 80033c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033c4:	f023 0301 	bic.w	r3, r3, #1
 80033c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3314      	adds	r3, #20
 80033d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033e2:	e841 2300 	strex	r3, r2, [r1]
 80033e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1e1      	bne.n	80033b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3314      	adds	r3, #20
 80033f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033f8:	e853 3f00 	ldrex	r3, [r3]
 80033fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003404:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3314      	adds	r3, #20
 800340e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003412:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003414:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003416:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003418:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800341a:	e841 2300 	strex	r3, r2, [r1]
 800341e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1e3      	bne.n	80033ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	330c      	adds	r3, #12
 800343a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800343e:	e853 3f00 	ldrex	r3, [r3]
 8003442:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003446:	f023 0310 	bic.w	r3, r3, #16
 800344a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	330c      	adds	r3, #12
 8003454:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003458:	65ba      	str	r2, [r7, #88]	; 0x58
 800345a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800345e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003460:	e841 2300 	strex	r3, r2, [r1]
 8003464:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1e3      	bne.n	8003434 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003470:	4618      	mov	r0, r3
 8003472:	f7fe fce6 	bl	8001e42 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800347e:	b29b      	uxth	r3, r3
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	b29b      	uxth	r3, r3
 8003484:	4619      	mov	r1, r3
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f8b6 	bl	80035f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800348c:	e099      	b.n	80035c2 <HAL_UART_IRQHandler+0x50e>
 800348e:	bf00      	nop
 8003490:	0800382f 	.word	0x0800382f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800349c:	b29b      	uxth	r3, r3
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 808b 	beq.w	80035c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80034b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 8086 	beq.w	80035c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	330c      	adds	r3, #12
 80034c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c4:	e853 3f00 	ldrex	r3, [r3]
 80034c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	330c      	adds	r3, #12
 80034da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80034de:	647a      	str	r2, [r7, #68]	; 0x44
 80034e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034e6:	e841 2300 	strex	r3, r2, [r1]
 80034ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1e3      	bne.n	80034ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	3314      	adds	r3, #20
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	e853 3f00 	ldrex	r3, [r3]
 8003500:	623b      	str	r3, [r7, #32]
   return(result);
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	f023 0301 	bic.w	r3, r3, #1
 8003508:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3314      	adds	r3, #20
 8003512:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003516:	633a      	str	r2, [r7, #48]	; 0x30
 8003518:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800351c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800351e:	e841 2300 	strex	r3, r2, [r1]
 8003522:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1e3      	bne.n	80034f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	330c      	adds	r3, #12
 800353e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	e853 3f00 	ldrex	r3, [r3]
 8003546:	60fb      	str	r3, [r7, #12]
   return(result);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0310 	bic.w	r3, r3, #16
 800354e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	330c      	adds	r3, #12
 8003558:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800355c:	61fa      	str	r2, [r7, #28]
 800355e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003560:	69b9      	ldr	r1, [r7, #24]
 8003562:	69fa      	ldr	r2, [r7, #28]
 8003564:	e841 2300 	strex	r3, r2, [r1]
 8003568:	617b      	str	r3, [r7, #20]
   return(result);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1e3      	bne.n	8003538 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003574:	4619      	mov	r1, r3
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f83e 	bl	80035f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800357c:	e023      	b.n	80035c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800357e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003586:	2b00      	cmp	r3, #0
 8003588:	d009      	beq.n	800359e <HAL_UART_IRQHandler+0x4ea>
 800358a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800358e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f95d 	bl	8003856 <UART_Transmit_IT>
    return;
 800359c:	e014      	b.n	80035c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800359e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00e      	beq.n	80035c8 <HAL_UART_IRQHandler+0x514>
 80035aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d008      	beq.n	80035c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f99d 	bl	80038f6 <UART_EndTransmit_IT>
    return;
 80035bc:	e004      	b.n	80035c8 <HAL_UART_IRQHandler+0x514>
    return;
 80035be:	bf00      	nop
 80035c0:	e002      	b.n	80035c8 <HAL_UART_IRQHandler+0x514>
      return;
 80035c2:	bf00      	nop
 80035c4:	e000      	b.n	80035c8 <HAL_UART_IRQHandler+0x514>
      return;
 80035c6:	bf00      	nop
  }
}
 80035c8:	37e8      	adds	r7, #232	; 0xe8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop

080035d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b090      	sub	sp, #64	; 0x40
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	4613      	mov	r3, r2
 800361e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003620:	e050      	b.n	80036c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003628:	d04c      	beq.n	80036c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800362a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800362c:	2b00      	cmp	r3, #0
 800362e:	d007      	beq.n	8003640 <UART_WaitOnFlagUntilTimeout+0x30>
 8003630:	f7fd fc52 	bl	8000ed8 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800363c:	429a      	cmp	r2, r3
 800363e:	d241      	bcs.n	80036c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	330c      	adds	r3, #12
 8003646:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364a:	e853 3f00 	ldrex	r3, [r3]
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	330c      	adds	r3, #12
 800365e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003660:	637a      	str	r2, [r7, #52]	; 0x34
 8003662:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003664:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003668:	e841 2300 	strex	r3, r2, [r1]
 800366c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e5      	bne.n	8003640 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3314      	adds	r3, #20
 800367a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	e853 3f00 	ldrex	r3, [r3]
 8003682:	613b      	str	r3, [r7, #16]
   return(result);
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f023 0301 	bic.w	r3, r3, #1
 800368a:	63bb      	str	r3, [r7, #56]	; 0x38
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3314      	adds	r3, #20
 8003692:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003694:	623a      	str	r2, [r7, #32]
 8003696:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003698:	69f9      	ldr	r1, [r7, #28]
 800369a:	6a3a      	ldr	r2, [r7, #32]
 800369c:	e841 2300 	strex	r3, r2, [r1]
 80036a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1e5      	bne.n	8003674 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e00f      	b.n	80036e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4013      	ands	r3, r2
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d09f      	beq.n	8003622 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3740      	adds	r7, #64	; 0x40
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	4613      	mov	r3, r2
 80036f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	88fa      	ldrh	r2, [r7, #6]
 8003704:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	88fa      	ldrh	r2, [r7, #6]
 800370a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2222      	movs	r2, #34	; 0x22
 8003716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d007      	beq.n	800373a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003738:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0201 	orr.w	r2, r2, #1
 8003748:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0220 	orr.w	r2, r2, #32
 8003758:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003768:	b480      	push	{r7}
 800376a:	b095      	sub	sp, #84	; 0x54
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	330c      	adds	r3, #12
 8003776:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377a:	e853 3f00 	ldrex	r3, [r3]
 800377e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	330c      	adds	r3, #12
 800378e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003790:	643a      	str	r2, [r7, #64]	; 0x40
 8003792:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003794:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003796:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003798:	e841 2300 	strex	r3, r2, [r1]
 800379c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800379e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e5      	bne.n	8003770 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3314      	adds	r3, #20
 80037aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	e853 3f00 	ldrex	r3, [r3]
 80037b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3314      	adds	r3, #20
 80037c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e5      	bne.n	80037a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d119      	bne.n	8003814 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	330c      	adds	r3, #12
 80037e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	e853 3f00 	ldrex	r3, [r3]
 80037ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f023 0310 	bic.w	r3, r3, #16
 80037f6:	647b      	str	r3, [r7, #68]	; 0x44
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	330c      	adds	r3, #12
 80037fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003800:	61ba      	str	r2, [r7, #24]
 8003802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003804:	6979      	ldr	r1, [r7, #20]
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	e841 2300 	strex	r3, r2, [r1]
 800380c:	613b      	str	r3, [r7, #16]
   return(result);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e5      	bne.n	80037e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003822:	bf00      	nop
 8003824:	3754      	adds	r7, #84	; 0x54
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f7ff fecb 	bl	80035e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800384e:	bf00      	nop
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003856:	b480      	push	{r7}
 8003858:	b085      	sub	sp, #20
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b21      	cmp	r3, #33	; 0x21
 8003868:	d13e      	bne.n	80038e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003872:	d114      	bne.n	800389e <UART_Transmit_IT+0x48>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d110      	bne.n	800389e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003890:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	1c9a      	adds	r2, r3, #2
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	621a      	str	r2, [r3, #32]
 800389c:	e008      	b.n	80038b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	1c59      	adds	r1, r3, #1
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6211      	str	r1, [r2, #32]
 80038a8:	781a      	ldrb	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	4619      	mov	r1, r3
 80038be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10f      	bne.n	80038e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	e000      	b.n	80038ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
  }
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800390c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff fe5a 	bl	80035d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b08c      	sub	sp, #48	; 0x30
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b22      	cmp	r3, #34	; 0x22
 8003938:	f040 80ab 	bne.w	8003a92 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003944:	d117      	bne.n	8003976 <UART_Receive_IT+0x50>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d113      	bne.n	8003976 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800394e:	2300      	movs	r3, #0
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003956:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	b29b      	uxth	r3, r3
 8003960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003964:	b29a      	uxth	r2, r3
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003968:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	1c9a      	adds	r2, r3, #2
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	629a      	str	r2, [r3, #40]	; 0x28
 8003974:	e026      	b.n	80039c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800397c:	2300      	movs	r3, #0
 800397e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003988:	d007      	beq.n	800399a <UART_Receive_IT+0x74>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10a      	bne.n	80039a8 <UART_Receive_IT+0x82>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a4:	701a      	strb	r2, [r3, #0]
 80039a6:	e008      	b.n	80039ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	4619      	mov	r1, r3
 80039d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d15a      	bne.n	8003a8e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0220 	bic.w	r2, r2, #32
 80039e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0201 	bic.w	r2, r2, #1
 8003a06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d135      	bne.n	8003a84 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	330c      	adds	r3, #12
 8003a24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	e853 3f00 	ldrex	r3, [r3]
 8003a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f023 0310 	bic.w	r3, r3, #16
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	330c      	adds	r3, #12
 8003a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3e:	623a      	str	r2, [r7, #32]
 8003a40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a42:	69f9      	ldr	r1, [r7, #28]
 8003a44:	6a3a      	ldr	r2, [r7, #32]
 8003a46:	e841 2300 	strex	r3, r2, [r1]
 8003a4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e5      	bne.n	8003a1e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b10      	cmp	r3, #16
 8003a5e:	d10a      	bne.n	8003a76 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff fdbb 	bl	80035f8 <HAL_UARTEx_RxEventCallback>
 8003a82:	e002      	b.n	8003a8a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7fc ff91 	bl	80009ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e002      	b.n	8003a94 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e000      	b.n	8003a94 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003a92:	2302      	movs	r3, #2
  }
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3730      	adds	r7, #48	; 0x30
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa0:	b0c0      	sub	sp, #256	; 0x100
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab8:	68d9      	ldr	r1, [r3, #12]
 8003aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	ea40 0301 	orr.w	r3, r0, r1
 8003ac4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	431a      	orrs	r2, r3
 8003adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003af4:	f021 010c 	bic.w	r1, r1, #12
 8003af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b02:	430b      	orrs	r3, r1
 8003b04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b16:	6999      	ldr	r1, [r3, #24]
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	ea40 0301 	orr.w	r3, r0, r1
 8003b22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	4b8f      	ldr	r3, [pc, #572]	; (8003d68 <UART_SetConfig+0x2cc>)
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d005      	beq.n	8003b3c <UART_SetConfig+0xa0>
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	4b8d      	ldr	r3, [pc, #564]	; (8003d6c <UART_SetConfig+0x2d0>)
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d104      	bne.n	8003b46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b3c:	f7fe fcc8 	bl	80024d0 <HAL_RCC_GetPCLK2Freq>
 8003b40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b44:	e003      	b.n	8003b4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b46:	f7fe fcaf 	bl	80024a8 <HAL_RCC_GetPCLK1Freq>
 8003b4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b58:	f040 810c 	bne.w	8003d74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b60:	2200      	movs	r2, #0
 8003b62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b6e:	4622      	mov	r2, r4
 8003b70:	462b      	mov	r3, r5
 8003b72:	1891      	adds	r1, r2, r2
 8003b74:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b76:	415b      	adcs	r3, r3
 8003b78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b7e:	4621      	mov	r1, r4
 8003b80:	eb12 0801 	adds.w	r8, r2, r1
 8003b84:	4629      	mov	r1, r5
 8003b86:	eb43 0901 	adc.w	r9, r3, r1
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b9e:	4690      	mov	r8, r2
 8003ba0:	4699      	mov	r9, r3
 8003ba2:	4623      	mov	r3, r4
 8003ba4:	eb18 0303 	adds.w	r3, r8, r3
 8003ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003bac:	462b      	mov	r3, r5
 8003bae:	eb49 0303 	adc.w	r3, r9, r3
 8003bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003bc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003bca:	460b      	mov	r3, r1
 8003bcc:	18db      	adds	r3, r3, r3
 8003bce:	653b      	str	r3, [r7, #80]	; 0x50
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	eb42 0303 	adc.w	r3, r2, r3
 8003bd6:	657b      	str	r3, [r7, #84]	; 0x54
 8003bd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003bdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003be0:	f7fc fb10 	bl	8000204 <__aeabi_uldivmod>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4b61      	ldr	r3, [pc, #388]	; (8003d70 <UART_SetConfig+0x2d4>)
 8003bea:	fba3 2302 	umull	r2, r3, r3, r2
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	011c      	lsls	r4, r3, #4
 8003bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bfc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c04:	4642      	mov	r2, r8
 8003c06:	464b      	mov	r3, r9
 8003c08:	1891      	adds	r1, r2, r2
 8003c0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c0c:	415b      	adcs	r3, r3
 8003c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c14:	4641      	mov	r1, r8
 8003c16:	eb12 0a01 	adds.w	sl, r2, r1
 8003c1a:	4649      	mov	r1, r9
 8003c1c:	eb43 0b01 	adc.w	fp, r3, r1
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c34:	4692      	mov	sl, r2
 8003c36:	469b      	mov	fp, r3
 8003c38:	4643      	mov	r3, r8
 8003c3a:	eb1a 0303 	adds.w	r3, sl, r3
 8003c3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c42:	464b      	mov	r3, r9
 8003c44:	eb4b 0303 	adc.w	r3, fp, r3
 8003c48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c60:	460b      	mov	r3, r1
 8003c62:	18db      	adds	r3, r3, r3
 8003c64:	643b      	str	r3, [r7, #64]	; 0x40
 8003c66:	4613      	mov	r3, r2
 8003c68:	eb42 0303 	adc.w	r3, r2, r3
 8003c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c76:	f7fc fac5 	bl	8000204 <__aeabi_uldivmod>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4611      	mov	r1, r2
 8003c80:	4b3b      	ldr	r3, [pc, #236]	; (8003d70 <UART_SetConfig+0x2d4>)
 8003c82:	fba3 2301 	umull	r2, r3, r3, r1
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	2264      	movs	r2, #100	; 0x64
 8003c8a:	fb02 f303 	mul.w	r3, r2, r3
 8003c8e:	1acb      	subs	r3, r1, r3
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c96:	4b36      	ldr	r3, [pc, #216]	; (8003d70 <UART_SetConfig+0x2d4>)
 8003c98:	fba3 2302 	umull	r2, r3, r3, r2
 8003c9c:	095b      	lsrs	r3, r3, #5
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ca4:	441c      	add	r4, r3
 8003ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003cb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003cb8:	4642      	mov	r2, r8
 8003cba:	464b      	mov	r3, r9
 8003cbc:	1891      	adds	r1, r2, r2
 8003cbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cc0:	415b      	adcs	r3, r3
 8003cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003cc8:	4641      	mov	r1, r8
 8003cca:	1851      	adds	r1, r2, r1
 8003ccc:	6339      	str	r1, [r7, #48]	; 0x30
 8003cce:	4649      	mov	r1, r9
 8003cd0:	414b      	adcs	r3, r1
 8003cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ce0:	4659      	mov	r1, fp
 8003ce2:	00cb      	lsls	r3, r1, #3
 8003ce4:	4651      	mov	r1, sl
 8003ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cea:	4651      	mov	r1, sl
 8003cec:	00ca      	lsls	r2, r1, #3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	4642      	mov	r2, r8
 8003cf6:	189b      	adds	r3, r3, r2
 8003cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cfc:	464b      	mov	r3, r9
 8003cfe:	460a      	mov	r2, r1
 8003d00:	eb42 0303 	adc.w	r3, r2, r3
 8003d04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	18db      	adds	r3, r3, r3
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d22:	4613      	mov	r3, r2
 8003d24:	eb42 0303 	adc.w	r3, r2, r3
 8003d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d32:	f7fc fa67 	bl	8000204 <__aeabi_uldivmod>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <UART_SetConfig+0x2d4>)
 8003d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d40:	095b      	lsrs	r3, r3, #5
 8003d42:	2164      	movs	r1, #100	; 0x64
 8003d44:	fb01 f303 	mul.w	r3, r1, r3
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	3332      	adds	r3, #50	; 0x32
 8003d4e:	4a08      	ldr	r2, [pc, #32]	; (8003d70 <UART_SetConfig+0x2d4>)
 8003d50:	fba2 2303 	umull	r2, r3, r2, r3
 8003d54:	095b      	lsrs	r3, r3, #5
 8003d56:	f003 0207 	and.w	r2, r3, #7
 8003d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4422      	add	r2, r4
 8003d62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d64:	e105      	b.n	8003f72 <UART_SetConfig+0x4d6>
 8003d66:	bf00      	nop
 8003d68:	40011000 	.word	0x40011000
 8003d6c:	40011400 	.word	0x40011400
 8003d70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d86:	4642      	mov	r2, r8
 8003d88:	464b      	mov	r3, r9
 8003d8a:	1891      	adds	r1, r2, r2
 8003d8c:	6239      	str	r1, [r7, #32]
 8003d8e:	415b      	adcs	r3, r3
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
 8003d92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d96:	4641      	mov	r1, r8
 8003d98:	1854      	adds	r4, r2, r1
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	eb43 0501 	adc.w	r5, r3, r1
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	00eb      	lsls	r3, r5, #3
 8003daa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dae:	00e2      	lsls	r2, r4, #3
 8003db0:	4614      	mov	r4, r2
 8003db2:	461d      	mov	r5, r3
 8003db4:	4643      	mov	r3, r8
 8003db6:	18e3      	adds	r3, r4, r3
 8003db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003dbc:	464b      	mov	r3, r9
 8003dbe:	eb45 0303 	adc.w	r3, r5, r3
 8003dc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003dd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003de2:	4629      	mov	r1, r5
 8003de4:	008b      	lsls	r3, r1, #2
 8003de6:	4621      	mov	r1, r4
 8003de8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dec:	4621      	mov	r1, r4
 8003dee:	008a      	lsls	r2, r1, #2
 8003df0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003df4:	f7fc fa06 	bl	8000204 <__aeabi_uldivmod>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4b60      	ldr	r3, [pc, #384]	; (8003f80 <UART_SetConfig+0x4e4>)
 8003dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	011c      	lsls	r4, r3, #4
 8003e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e18:	4642      	mov	r2, r8
 8003e1a:	464b      	mov	r3, r9
 8003e1c:	1891      	adds	r1, r2, r2
 8003e1e:	61b9      	str	r1, [r7, #24]
 8003e20:	415b      	adcs	r3, r3
 8003e22:	61fb      	str	r3, [r7, #28]
 8003e24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e28:	4641      	mov	r1, r8
 8003e2a:	1851      	adds	r1, r2, r1
 8003e2c:	6139      	str	r1, [r7, #16]
 8003e2e:	4649      	mov	r1, r9
 8003e30:	414b      	adcs	r3, r1
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e40:	4659      	mov	r1, fp
 8003e42:	00cb      	lsls	r3, r1, #3
 8003e44:	4651      	mov	r1, sl
 8003e46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e4a:	4651      	mov	r1, sl
 8003e4c:	00ca      	lsls	r2, r1, #3
 8003e4e:	4610      	mov	r0, r2
 8003e50:	4619      	mov	r1, r3
 8003e52:	4603      	mov	r3, r0
 8003e54:	4642      	mov	r2, r8
 8003e56:	189b      	adds	r3, r3, r2
 8003e58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e5c:	464b      	mov	r3, r9
 8003e5e:	460a      	mov	r2, r1
 8003e60:	eb42 0303 	adc.w	r3, r2, r3
 8003e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e80:	4649      	mov	r1, r9
 8003e82:	008b      	lsls	r3, r1, #2
 8003e84:	4641      	mov	r1, r8
 8003e86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e8a:	4641      	mov	r1, r8
 8003e8c:	008a      	lsls	r2, r1, #2
 8003e8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e92:	f7fc f9b7 	bl	8000204 <__aeabi_uldivmod>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4b39      	ldr	r3, [pc, #228]	; (8003f80 <UART_SetConfig+0x4e4>)
 8003e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003ea0:	095b      	lsrs	r3, r3, #5
 8003ea2:	2164      	movs	r1, #100	; 0x64
 8003ea4:	fb01 f303 	mul.w	r3, r1, r3
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	3332      	adds	r3, #50	; 0x32
 8003eae:	4a34      	ldr	r2, [pc, #208]	; (8003f80 <UART_SetConfig+0x4e4>)
 8003eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eba:	441c      	add	r4, r3
 8003ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	673b      	str	r3, [r7, #112]	; 0x70
 8003ec4:	677a      	str	r2, [r7, #116]	; 0x74
 8003ec6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003eca:	4642      	mov	r2, r8
 8003ecc:	464b      	mov	r3, r9
 8003ece:	1891      	adds	r1, r2, r2
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	415b      	adcs	r3, r3
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eda:	4641      	mov	r1, r8
 8003edc:	1851      	adds	r1, r2, r1
 8003ede:	6039      	str	r1, [r7, #0]
 8003ee0:	4649      	mov	r1, r9
 8003ee2:	414b      	adcs	r3, r1
 8003ee4:	607b      	str	r3, [r7, #4]
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ef2:	4659      	mov	r1, fp
 8003ef4:	00cb      	lsls	r3, r1, #3
 8003ef6:	4651      	mov	r1, sl
 8003ef8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003efc:	4651      	mov	r1, sl
 8003efe:	00ca      	lsls	r2, r1, #3
 8003f00:	4610      	mov	r0, r2
 8003f02:	4619      	mov	r1, r3
 8003f04:	4603      	mov	r3, r0
 8003f06:	4642      	mov	r2, r8
 8003f08:	189b      	adds	r3, r3, r2
 8003f0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f0c:	464b      	mov	r3, r9
 8003f0e:	460a      	mov	r2, r1
 8003f10:	eb42 0303 	adc.w	r3, r2, r3
 8003f14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	663b      	str	r3, [r7, #96]	; 0x60
 8003f20:	667a      	str	r2, [r7, #100]	; 0x64
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f2e:	4649      	mov	r1, r9
 8003f30:	008b      	lsls	r3, r1, #2
 8003f32:	4641      	mov	r1, r8
 8003f34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f38:	4641      	mov	r1, r8
 8003f3a:	008a      	lsls	r2, r1, #2
 8003f3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f40:	f7fc f960 	bl	8000204 <__aeabi_uldivmod>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <UART_SetConfig+0x4e4>)
 8003f4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	2164      	movs	r1, #100	; 0x64
 8003f52:	fb01 f303 	mul.w	r3, r1, r3
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	3332      	adds	r3, #50	; 0x32
 8003f5c:	4a08      	ldr	r2, [pc, #32]	; (8003f80 <UART_SetConfig+0x4e4>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	f003 020f 	and.w	r2, r3, #15
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4422      	add	r2, r4
 8003f70:	609a      	str	r2, [r3, #8]
}
 8003f72:	bf00      	nop
 8003f74:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f7e:	bf00      	nop
 8003f80:	51eb851f 	.word	0x51eb851f

08003f84 <__errno>:
 8003f84:	4b01      	ldr	r3, [pc, #4]	; (8003f8c <__errno+0x8>)
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	2000000c 	.word	0x2000000c

08003f90 <__libc_init_array>:
 8003f90:	b570      	push	{r4, r5, r6, lr}
 8003f92:	4d0d      	ldr	r5, [pc, #52]	; (8003fc8 <__libc_init_array+0x38>)
 8003f94:	4c0d      	ldr	r4, [pc, #52]	; (8003fcc <__libc_init_array+0x3c>)
 8003f96:	1b64      	subs	r4, r4, r5
 8003f98:	10a4      	asrs	r4, r4, #2
 8003f9a:	2600      	movs	r6, #0
 8003f9c:	42a6      	cmp	r6, r4
 8003f9e:	d109      	bne.n	8003fb4 <__libc_init_array+0x24>
 8003fa0:	4d0b      	ldr	r5, [pc, #44]	; (8003fd0 <__libc_init_array+0x40>)
 8003fa2:	4c0c      	ldr	r4, [pc, #48]	; (8003fd4 <__libc_init_array+0x44>)
 8003fa4:	f000 fd1e 	bl	80049e4 <_init>
 8003fa8:	1b64      	subs	r4, r4, r5
 8003faa:	10a4      	asrs	r4, r4, #2
 8003fac:	2600      	movs	r6, #0
 8003fae:	42a6      	cmp	r6, r4
 8003fb0:	d105      	bne.n	8003fbe <__libc_init_array+0x2e>
 8003fb2:	bd70      	pop	{r4, r5, r6, pc}
 8003fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb8:	4798      	blx	r3
 8003fba:	3601      	adds	r6, #1
 8003fbc:	e7ee      	b.n	8003f9c <__libc_init_array+0xc>
 8003fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc2:	4798      	blx	r3
 8003fc4:	3601      	adds	r6, #1
 8003fc6:	e7f2      	b.n	8003fae <__libc_init_array+0x1e>
 8003fc8:	08004ac0 	.word	0x08004ac0
 8003fcc:	08004ac0 	.word	0x08004ac0
 8003fd0:	08004ac0 	.word	0x08004ac0
 8003fd4:	08004ac4 	.word	0x08004ac4

08003fd8 <memset>:
 8003fd8:	4402      	add	r2, r0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d100      	bne.n	8003fe2 <memset+0xa>
 8003fe0:	4770      	bx	lr
 8003fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fe6:	e7f9      	b.n	8003fdc <memset+0x4>

08003fe8 <_puts_r>:
 8003fe8:	b570      	push	{r4, r5, r6, lr}
 8003fea:	460e      	mov	r6, r1
 8003fec:	4605      	mov	r5, r0
 8003fee:	b118      	cbz	r0, 8003ff8 <_puts_r+0x10>
 8003ff0:	6983      	ldr	r3, [r0, #24]
 8003ff2:	b90b      	cbnz	r3, 8003ff8 <_puts_r+0x10>
 8003ff4:	f000 fa48 	bl	8004488 <__sinit>
 8003ff8:	69ab      	ldr	r3, [r5, #24]
 8003ffa:	68ac      	ldr	r4, [r5, #8]
 8003ffc:	b913      	cbnz	r3, 8004004 <_puts_r+0x1c>
 8003ffe:	4628      	mov	r0, r5
 8004000:	f000 fa42 	bl	8004488 <__sinit>
 8004004:	4b2c      	ldr	r3, [pc, #176]	; (80040b8 <_puts_r+0xd0>)
 8004006:	429c      	cmp	r4, r3
 8004008:	d120      	bne.n	800404c <_puts_r+0x64>
 800400a:	686c      	ldr	r4, [r5, #4]
 800400c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800400e:	07db      	lsls	r3, r3, #31
 8004010:	d405      	bmi.n	800401e <_puts_r+0x36>
 8004012:	89a3      	ldrh	r3, [r4, #12]
 8004014:	0598      	lsls	r0, r3, #22
 8004016:	d402      	bmi.n	800401e <_puts_r+0x36>
 8004018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800401a:	f000 fad3 	bl	80045c4 <__retarget_lock_acquire_recursive>
 800401e:	89a3      	ldrh	r3, [r4, #12]
 8004020:	0719      	lsls	r1, r3, #28
 8004022:	d51d      	bpl.n	8004060 <_puts_r+0x78>
 8004024:	6923      	ldr	r3, [r4, #16]
 8004026:	b1db      	cbz	r3, 8004060 <_puts_r+0x78>
 8004028:	3e01      	subs	r6, #1
 800402a:	68a3      	ldr	r3, [r4, #8]
 800402c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004030:	3b01      	subs	r3, #1
 8004032:	60a3      	str	r3, [r4, #8]
 8004034:	bb39      	cbnz	r1, 8004086 <_puts_r+0x9e>
 8004036:	2b00      	cmp	r3, #0
 8004038:	da38      	bge.n	80040ac <_puts_r+0xc4>
 800403a:	4622      	mov	r2, r4
 800403c:	210a      	movs	r1, #10
 800403e:	4628      	mov	r0, r5
 8004040:	f000 f848 	bl	80040d4 <__swbuf_r>
 8004044:	3001      	adds	r0, #1
 8004046:	d011      	beq.n	800406c <_puts_r+0x84>
 8004048:	250a      	movs	r5, #10
 800404a:	e011      	b.n	8004070 <_puts_r+0x88>
 800404c:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <_puts_r+0xd4>)
 800404e:	429c      	cmp	r4, r3
 8004050:	d101      	bne.n	8004056 <_puts_r+0x6e>
 8004052:	68ac      	ldr	r4, [r5, #8]
 8004054:	e7da      	b.n	800400c <_puts_r+0x24>
 8004056:	4b1a      	ldr	r3, [pc, #104]	; (80040c0 <_puts_r+0xd8>)
 8004058:	429c      	cmp	r4, r3
 800405a:	bf08      	it	eq
 800405c:	68ec      	ldreq	r4, [r5, #12]
 800405e:	e7d5      	b.n	800400c <_puts_r+0x24>
 8004060:	4621      	mov	r1, r4
 8004062:	4628      	mov	r0, r5
 8004064:	f000 f888 	bl	8004178 <__swsetup_r>
 8004068:	2800      	cmp	r0, #0
 800406a:	d0dd      	beq.n	8004028 <_puts_r+0x40>
 800406c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004070:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004072:	07da      	lsls	r2, r3, #31
 8004074:	d405      	bmi.n	8004082 <_puts_r+0x9a>
 8004076:	89a3      	ldrh	r3, [r4, #12]
 8004078:	059b      	lsls	r3, r3, #22
 800407a:	d402      	bmi.n	8004082 <_puts_r+0x9a>
 800407c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800407e:	f000 faa2 	bl	80045c6 <__retarget_lock_release_recursive>
 8004082:	4628      	mov	r0, r5
 8004084:	bd70      	pop	{r4, r5, r6, pc}
 8004086:	2b00      	cmp	r3, #0
 8004088:	da04      	bge.n	8004094 <_puts_r+0xac>
 800408a:	69a2      	ldr	r2, [r4, #24]
 800408c:	429a      	cmp	r2, r3
 800408e:	dc06      	bgt.n	800409e <_puts_r+0xb6>
 8004090:	290a      	cmp	r1, #10
 8004092:	d004      	beq.n	800409e <_puts_r+0xb6>
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	6022      	str	r2, [r4, #0]
 800409a:	7019      	strb	r1, [r3, #0]
 800409c:	e7c5      	b.n	800402a <_puts_r+0x42>
 800409e:	4622      	mov	r2, r4
 80040a0:	4628      	mov	r0, r5
 80040a2:	f000 f817 	bl	80040d4 <__swbuf_r>
 80040a6:	3001      	adds	r0, #1
 80040a8:	d1bf      	bne.n	800402a <_puts_r+0x42>
 80040aa:	e7df      	b.n	800406c <_puts_r+0x84>
 80040ac:	6823      	ldr	r3, [r4, #0]
 80040ae:	250a      	movs	r5, #10
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	6022      	str	r2, [r4, #0]
 80040b4:	701d      	strb	r5, [r3, #0]
 80040b6:	e7db      	b.n	8004070 <_puts_r+0x88>
 80040b8:	08004a78 	.word	0x08004a78
 80040bc:	08004a98 	.word	0x08004a98
 80040c0:	08004a58 	.word	0x08004a58

080040c4 <puts>:
 80040c4:	4b02      	ldr	r3, [pc, #8]	; (80040d0 <puts+0xc>)
 80040c6:	4601      	mov	r1, r0
 80040c8:	6818      	ldr	r0, [r3, #0]
 80040ca:	f7ff bf8d 	b.w	8003fe8 <_puts_r>
 80040ce:	bf00      	nop
 80040d0:	2000000c 	.word	0x2000000c

080040d4 <__swbuf_r>:
 80040d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d6:	460e      	mov	r6, r1
 80040d8:	4614      	mov	r4, r2
 80040da:	4605      	mov	r5, r0
 80040dc:	b118      	cbz	r0, 80040e6 <__swbuf_r+0x12>
 80040de:	6983      	ldr	r3, [r0, #24]
 80040e0:	b90b      	cbnz	r3, 80040e6 <__swbuf_r+0x12>
 80040e2:	f000 f9d1 	bl	8004488 <__sinit>
 80040e6:	4b21      	ldr	r3, [pc, #132]	; (800416c <__swbuf_r+0x98>)
 80040e8:	429c      	cmp	r4, r3
 80040ea:	d12b      	bne.n	8004144 <__swbuf_r+0x70>
 80040ec:	686c      	ldr	r4, [r5, #4]
 80040ee:	69a3      	ldr	r3, [r4, #24]
 80040f0:	60a3      	str	r3, [r4, #8]
 80040f2:	89a3      	ldrh	r3, [r4, #12]
 80040f4:	071a      	lsls	r2, r3, #28
 80040f6:	d52f      	bpl.n	8004158 <__swbuf_r+0x84>
 80040f8:	6923      	ldr	r3, [r4, #16]
 80040fa:	b36b      	cbz	r3, 8004158 <__swbuf_r+0x84>
 80040fc:	6923      	ldr	r3, [r4, #16]
 80040fe:	6820      	ldr	r0, [r4, #0]
 8004100:	1ac0      	subs	r0, r0, r3
 8004102:	6963      	ldr	r3, [r4, #20]
 8004104:	b2f6      	uxtb	r6, r6
 8004106:	4283      	cmp	r3, r0
 8004108:	4637      	mov	r7, r6
 800410a:	dc04      	bgt.n	8004116 <__swbuf_r+0x42>
 800410c:	4621      	mov	r1, r4
 800410e:	4628      	mov	r0, r5
 8004110:	f000 f926 	bl	8004360 <_fflush_r>
 8004114:	bb30      	cbnz	r0, 8004164 <__swbuf_r+0x90>
 8004116:	68a3      	ldr	r3, [r4, #8]
 8004118:	3b01      	subs	r3, #1
 800411a:	60a3      	str	r3, [r4, #8]
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	6022      	str	r2, [r4, #0]
 8004122:	701e      	strb	r6, [r3, #0]
 8004124:	6963      	ldr	r3, [r4, #20]
 8004126:	3001      	adds	r0, #1
 8004128:	4283      	cmp	r3, r0
 800412a:	d004      	beq.n	8004136 <__swbuf_r+0x62>
 800412c:	89a3      	ldrh	r3, [r4, #12]
 800412e:	07db      	lsls	r3, r3, #31
 8004130:	d506      	bpl.n	8004140 <__swbuf_r+0x6c>
 8004132:	2e0a      	cmp	r6, #10
 8004134:	d104      	bne.n	8004140 <__swbuf_r+0x6c>
 8004136:	4621      	mov	r1, r4
 8004138:	4628      	mov	r0, r5
 800413a:	f000 f911 	bl	8004360 <_fflush_r>
 800413e:	b988      	cbnz	r0, 8004164 <__swbuf_r+0x90>
 8004140:	4638      	mov	r0, r7
 8004142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004144:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <__swbuf_r+0x9c>)
 8004146:	429c      	cmp	r4, r3
 8004148:	d101      	bne.n	800414e <__swbuf_r+0x7a>
 800414a:	68ac      	ldr	r4, [r5, #8]
 800414c:	e7cf      	b.n	80040ee <__swbuf_r+0x1a>
 800414e:	4b09      	ldr	r3, [pc, #36]	; (8004174 <__swbuf_r+0xa0>)
 8004150:	429c      	cmp	r4, r3
 8004152:	bf08      	it	eq
 8004154:	68ec      	ldreq	r4, [r5, #12]
 8004156:	e7ca      	b.n	80040ee <__swbuf_r+0x1a>
 8004158:	4621      	mov	r1, r4
 800415a:	4628      	mov	r0, r5
 800415c:	f000 f80c 	bl	8004178 <__swsetup_r>
 8004160:	2800      	cmp	r0, #0
 8004162:	d0cb      	beq.n	80040fc <__swbuf_r+0x28>
 8004164:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004168:	e7ea      	b.n	8004140 <__swbuf_r+0x6c>
 800416a:	bf00      	nop
 800416c:	08004a78 	.word	0x08004a78
 8004170:	08004a98 	.word	0x08004a98
 8004174:	08004a58 	.word	0x08004a58

08004178 <__swsetup_r>:
 8004178:	4b32      	ldr	r3, [pc, #200]	; (8004244 <__swsetup_r+0xcc>)
 800417a:	b570      	push	{r4, r5, r6, lr}
 800417c:	681d      	ldr	r5, [r3, #0]
 800417e:	4606      	mov	r6, r0
 8004180:	460c      	mov	r4, r1
 8004182:	b125      	cbz	r5, 800418e <__swsetup_r+0x16>
 8004184:	69ab      	ldr	r3, [r5, #24]
 8004186:	b913      	cbnz	r3, 800418e <__swsetup_r+0x16>
 8004188:	4628      	mov	r0, r5
 800418a:	f000 f97d 	bl	8004488 <__sinit>
 800418e:	4b2e      	ldr	r3, [pc, #184]	; (8004248 <__swsetup_r+0xd0>)
 8004190:	429c      	cmp	r4, r3
 8004192:	d10f      	bne.n	80041b4 <__swsetup_r+0x3c>
 8004194:	686c      	ldr	r4, [r5, #4]
 8004196:	89a3      	ldrh	r3, [r4, #12]
 8004198:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800419c:	0719      	lsls	r1, r3, #28
 800419e:	d42c      	bmi.n	80041fa <__swsetup_r+0x82>
 80041a0:	06dd      	lsls	r5, r3, #27
 80041a2:	d411      	bmi.n	80041c8 <__swsetup_r+0x50>
 80041a4:	2309      	movs	r3, #9
 80041a6:	6033      	str	r3, [r6, #0]
 80041a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041ac:	81a3      	strh	r3, [r4, #12]
 80041ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041b2:	e03e      	b.n	8004232 <__swsetup_r+0xba>
 80041b4:	4b25      	ldr	r3, [pc, #148]	; (800424c <__swsetup_r+0xd4>)
 80041b6:	429c      	cmp	r4, r3
 80041b8:	d101      	bne.n	80041be <__swsetup_r+0x46>
 80041ba:	68ac      	ldr	r4, [r5, #8]
 80041bc:	e7eb      	b.n	8004196 <__swsetup_r+0x1e>
 80041be:	4b24      	ldr	r3, [pc, #144]	; (8004250 <__swsetup_r+0xd8>)
 80041c0:	429c      	cmp	r4, r3
 80041c2:	bf08      	it	eq
 80041c4:	68ec      	ldreq	r4, [r5, #12]
 80041c6:	e7e6      	b.n	8004196 <__swsetup_r+0x1e>
 80041c8:	0758      	lsls	r0, r3, #29
 80041ca:	d512      	bpl.n	80041f2 <__swsetup_r+0x7a>
 80041cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041ce:	b141      	cbz	r1, 80041e2 <__swsetup_r+0x6a>
 80041d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041d4:	4299      	cmp	r1, r3
 80041d6:	d002      	beq.n	80041de <__swsetup_r+0x66>
 80041d8:	4630      	mov	r0, r6
 80041da:	f000 fa5b 	bl	8004694 <_free_r>
 80041de:	2300      	movs	r3, #0
 80041e0:	6363      	str	r3, [r4, #52]	; 0x34
 80041e2:	89a3      	ldrh	r3, [r4, #12]
 80041e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041e8:	81a3      	strh	r3, [r4, #12]
 80041ea:	2300      	movs	r3, #0
 80041ec:	6063      	str	r3, [r4, #4]
 80041ee:	6923      	ldr	r3, [r4, #16]
 80041f0:	6023      	str	r3, [r4, #0]
 80041f2:	89a3      	ldrh	r3, [r4, #12]
 80041f4:	f043 0308 	orr.w	r3, r3, #8
 80041f8:	81a3      	strh	r3, [r4, #12]
 80041fa:	6923      	ldr	r3, [r4, #16]
 80041fc:	b94b      	cbnz	r3, 8004212 <__swsetup_r+0x9a>
 80041fe:	89a3      	ldrh	r3, [r4, #12]
 8004200:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004208:	d003      	beq.n	8004212 <__swsetup_r+0x9a>
 800420a:	4621      	mov	r1, r4
 800420c:	4630      	mov	r0, r6
 800420e:	f000 fa01 	bl	8004614 <__smakebuf_r>
 8004212:	89a0      	ldrh	r0, [r4, #12]
 8004214:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004218:	f010 0301 	ands.w	r3, r0, #1
 800421c:	d00a      	beq.n	8004234 <__swsetup_r+0xbc>
 800421e:	2300      	movs	r3, #0
 8004220:	60a3      	str	r3, [r4, #8]
 8004222:	6963      	ldr	r3, [r4, #20]
 8004224:	425b      	negs	r3, r3
 8004226:	61a3      	str	r3, [r4, #24]
 8004228:	6923      	ldr	r3, [r4, #16]
 800422a:	b943      	cbnz	r3, 800423e <__swsetup_r+0xc6>
 800422c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004230:	d1ba      	bne.n	80041a8 <__swsetup_r+0x30>
 8004232:	bd70      	pop	{r4, r5, r6, pc}
 8004234:	0781      	lsls	r1, r0, #30
 8004236:	bf58      	it	pl
 8004238:	6963      	ldrpl	r3, [r4, #20]
 800423a:	60a3      	str	r3, [r4, #8]
 800423c:	e7f4      	b.n	8004228 <__swsetup_r+0xb0>
 800423e:	2000      	movs	r0, #0
 8004240:	e7f7      	b.n	8004232 <__swsetup_r+0xba>
 8004242:	bf00      	nop
 8004244:	2000000c 	.word	0x2000000c
 8004248:	08004a78 	.word	0x08004a78
 800424c:	08004a98 	.word	0x08004a98
 8004250:	08004a58 	.word	0x08004a58

08004254 <__sflush_r>:
 8004254:	898a      	ldrh	r2, [r1, #12]
 8004256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800425a:	4605      	mov	r5, r0
 800425c:	0710      	lsls	r0, r2, #28
 800425e:	460c      	mov	r4, r1
 8004260:	d458      	bmi.n	8004314 <__sflush_r+0xc0>
 8004262:	684b      	ldr	r3, [r1, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	dc05      	bgt.n	8004274 <__sflush_r+0x20>
 8004268:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	dc02      	bgt.n	8004274 <__sflush_r+0x20>
 800426e:	2000      	movs	r0, #0
 8004270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004274:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004276:	2e00      	cmp	r6, #0
 8004278:	d0f9      	beq.n	800426e <__sflush_r+0x1a>
 800427a:	2300      	movs	r3, #0
 800427c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004280:	682f      	ldr	r7, [r5, #0]
 8004282:	602b      	str	r3, [r5, #0]
 8004284:	d032      	beq.n	80042ec <__sflush_r+0x98>
 8004286:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004288:	89a3      	ldrh	r3, [r4, #12]
 800428a:	075a      	lsls	r2, r3, #29
 800428c:	d505      	bpl.n	800429a <__sflush_r+0x46>
 800428e:	6863      	ldr	r3, [r4, #4]
 8004290:	1ac0      	subs	r0, r0, r3
 8004292:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004294:	b10b      	cbz	r3, 800429a <__sflush_r+0x46>
 8004296:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004298:	1ac0      	subs	r0, r0, r3
 800429a:	2300      	movs	r3, #0
 800429c:	4602      	mov	r2, r0
 800429e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042a0:	6a21      	ldr	r1, [r4, #32]
 80042a2:	4628      	mov	r0, r5
 80042a4:	47b0      	blx	r6
 80042a6:	1c43      	adds	r3, r0, #1
 80042a8:	89a3      	ldrh	r3, [r4, #12]
 80042aa:	d106      	bne.n	80042ba <__sflush_r+0x66>
 80042ac:	6829      	ldr	r1, [r5, #0]
 80042ae:	291d      	cmp	r1, #29
 80042b0:	d82c      	bhi.n	800430c <__sflush_r+0xb8>
 80042b2:	4a2a      	ldr	r2, [pc, #168]	; (800435c <__sflush_r+0x108>)
 80042b4:	40ca      	lsrs	r2, r1
 80042b6:	07d6      	lsls	r6, r2, #31
 80042b8:	d528      	bpl.n	800430c <__sflush_r+0xb8>
 80042ba:	2200      	movs	r2, #0
 80042bc:	6062      	str	r2, [r4, #4]
 80042be:	04d9      	lsls	r1, r3, #19
 80042c0:	6922      	ldr	r2, [r4, #16]
 80042c2:	6022      	str	r2, [r4, #0]
 80042c4:	d504      	bpl.n	80042d0 <__sflush_r+0x7c>
 80042c6:	1c42      	adds	r2, r0, #1
 80042c8:	d101      	bne.n	80042ce <__sflush_r+0x7a>
 80042ca:	682b      	ldr	r3, [r5, #0]
 80042cc:	b903      	cbnz	r3, 80042d0 <__sflush_r+0x7c>
 80042ce:	6560      	str	r0, [r4, #84]	; 0x54
 80042d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042d2:	602f      	str	r7, [r5, #0]
 80042d4:	2900      	cmp	r1, #0
 80042d6:	d0ca      	beq.n	800426e <__sflush_r+0x1a>
 80042d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042dc:	4299      	cmp	r1, r3
 80042de:	d002      	beq.n	80042e6 <__sflush_r+0x92>
 80042e0:	4628      	mov	r0, r5
 80042e2:	f000 f9d7 	bl	8004694 <_free_r>
 80042e6:	2000      	movs	r0, #0
 80042e8:	6360      	str	r0, [r4, #52]	; 0x34
 80042ea:	e7c1      	b.n	8004270 <__sflush_r+0x1c>
 80042ec:	6a21      	ldr	r1, [r4, #32]
 80042ee:	2301      	movs	r3, #1
 80042f0:	4628      	mov	r0, r5
 80042f2:	47b0      	blx	r6
 80042f4:	1c41      	adds	r1, r0, #1
 80042f6:	d1c7      	bne.n	8004288 <__sflush_r+0x34>
 80042f8:	682b      	ldr	r3, [r5, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0c4      	beq.n	8004288 <__sflush_r+0x34>
 80042fe:	2b1d      	cmp	r3, #29
 8004300:	d001      	beq.n	8004306 <__sflush_r+0xb2>
 8004302:	2b16      	cmp	r3, #22
 8004304:	d101      	bne.n	800430a <__sflush_r+0xb6>
 8004306:	602f      	str	r7, [r5, #0]
 8004308:	e7b1      	b.n	800426e <__sflush_r+0x1a>
 800430a:	89a3      	ldrh	r3, [r4, #12]
 800430c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004310:	81a3      	strh	r3, [r4, #12]
 8004312:	e7ad      	b.n	8004270 <__sflush_r+0x1c>
 8004314:	690f      	ldr	r7, [r1, #16]
 8004316:	2f00      	cmp	r7, #0
 8004318:	d0a9      	beq.n	800426e <__sflush_r+0x1a>
 800431a:	0793      	lsls	r3, r2, #30
 800431c:	680e      	ldr	r6, [r1, #0]
 800431e:	bf08      	it	eq
 8004320:	694b      	ldreq	r3, [r1, #20]
 8004322:	600f      	str	r7, [r1, #0]
 8004324:	bf18      	it	ne
 8004326:	2300      	movne	r3, #0
 8004328:	eba6 0807 	sub.w	r8, r6, r7
 800432c:	608b      	str	r3, [r1, #8]
 800432e:	f1b8 0f00 	cmp.w	r8, #0
 8004332:	dd9c      	ble.n	800426e <__sflush_r+0x1a>
 8004334:	6a21      	ldr	r1, [r4, #32]
 8004336:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004338:	4643      	mov	r3, r8
 800433a:	463a      	mov	r2, r7
 800433c:	4628      	mov	r0, r5
 800433e:	47b0      	blx	r6
 8004340:	2800      	cmp	r0, #0
 8004342:	dc06      	bgt.n	8004352 <__sflush_r+0xfe>
 8004344:	89a3      	ldrh	r3, [r4, #12]
 8004346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800434a:	81a3      	strh	r3, [r4, #12]
 800434c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004350:	e78e      	b.n	8004270 <__sflush_r+0x1c>
 8004352:	4407      	add	r7, r0
 8004354:	eba8 0800 	sub.w	r8, r8, r0
 8004358:	e7e9      	b.n	800432e <__sflush_r+0xda>
 800435a:	bf00      	nop
 800435c:	20400001 	.word	0x20400001

08004360 <_fflush_r>:
 8004360:	b538      	push	{r3, r4, r5, lr}
 8004362:	690b      	ldr	r3, [r1, #16]
 8004364:	4605      	mov	r5, r0
 8004366:	460c      	mov	r4, r1
 8004368:	b913      	cbnz	r3, 8004370 <_fflush_r+0x10>
 800436a:	2500      	movs	r5, #0
 800436c:	4628      	mov	r0, r5
 800436e:	bd38      	pop	{r3, r4, r5, pc}
 8004370:	b118      	cbz	r0, 800437a <_fflush_r+0x1a>
 8004372:	6983      	ldr	r3, [r0, #24]
 8004374:	b90b      	cbnz	r3, 800437a <_fflush_r+0x1a>
 8004376:	f000 f887 	bl	8004488 <__sinit>
 800437a:	4b14      	ldr	r3, [pc, #80]	; (80043cc <_fflush_r+0x6c>)
 800437c:	429c      	cmp	r4, r3
 800437e:	d11b      	bne.n	80043b8 <_fflush_r+0x58>
 8004380:	686c      	ldr	r4, [r5, #4]
 8004382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0ef      	beq.n	800436a <_fflush_r+0xa>
 800438a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800438c:	07d0      	lsls	r0, r2, #31
 800438e:	d404      	bmi.n	800439a <_fflush_r+0x3a>
 8004390:	0599      	lsls	r1, r3, #22
 8004392:	d402      	bmi.n	800439a <_fflush_r+0x3a>
 8004394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004396:	f000 f915 	bl	80045c4 <__retarget_lock_acquire_recursive>
 800439a:	4628      	mov	r0, r5
 800439c:	4621      	mov	r1, r4
 800439e:	f7ff ff59 	bl	8004254 <__sflush_r>
 80043a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043a4:	07da      	lsls	r2, r3, #31
 80043a6:	4605      	mov	r5, r0
 80043a8:	d4e0      	bmi.n	800436c <_fflush_r+0xc>
 80043aa:	89a3      	ldrh	r3, [r4, #12]
 80043ac:	059b      	lsls	r3, r3, #22
 80043ae:	d4dd      	bmi.n	800436c <_fflush_r+0xc>
 80043b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043b2:	f000 f908 	bl	80045c6 <__retarget_lock_release_recursive>
 80043b6:	e7d9      	b.n	800436c <_fflush_r+0xc>
 80043b8:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <_fflush_r+0x70>)
 80043ba:	429c      	cmp	r4, r3
 80043bc:	d101      	bne.n	80043c2 <_fflush_r+0x62>
 80043be:	68ac      	ldr	r4, [r5, #8]
 80043c0:	e7df      	b.n	8004382 <_fflush_r+0x22>
 80043c2:	4b04      	ldr	r3, [pc, #16]	; (80043d4 <_fflush_r+0x74>)
 80043c4:	429c      	cmp	r4, r3
 80043c6:	bf08      	it	eq
 80043c8:	68ec      	ldreq	r4, [r5, #12]
 80043ca:	e7da      	b.n	8004382 <_fflush_r+0x22>
 80043cc:	08004a78 	.word	0x08004a78
 80043d0:	08004a98 	.word	0x08004a98
 80043d4:	08004a58 	.word	0x08004a58

080043d8 <std>:
 80043d8:	2300      	movs	r3, #0
 80043da:	b510      	push	{r4, lr}
 80043dc:	4604      	mov	r4, r0
 80043de:	e9c0 3300 	strd	r3, r3, [r0]
 80043e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043e6:	6083      	str	r3, [r0, #8]
 80043e8:	8181      	strh	r1, [r0, #12]
 80043ea:	6643      	str	r3, [r0, #100]	; 0x64
 80043ec:	81c2      	strh	r2, [r0, #14]
 80043ee:	6183      	str	r3, [r0, #24]
 80043f0:	4619      	mov	r1, r3
 80043f2:	2208      	movs	r2, #8
 80043f4:	305c      	adds	r0, #92	; 0x5c
 80043f6:	f7ff fdef 	bl	8003fd8 <memset>
 80043fa:	4b05      	ldr	r3, [pc, #20]	; (8004410 <std+0x38>)
 80043fc:	6263      	str	r3, [r4, #36]	; 0x24
 80043fe:	4b05      	ldr	r3, [pc, #20]	; (8004414 <std+0x3c>)
 8004400:	62a3      	str	r3, [r4, #40]	; 0x28
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <std+0x40>)
 8004404:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004406:	4b05      	ldr	r3, [pc, #20]	; (800441c <std+0x44>)
 8004408:	6224      	str	r4, [r4, #32]
 800440a:	6323      	str	r3, [r4, #48]	; 0x30
 800440c:	bd10      	pop	{r4, pc}
 800440e:	bf00      	nop
 8004410:	08004875 	.word	0x08004875
 8004414:	08004897 	.word	0x08004897
 8004418:	080048cf 	.word	0x080048cf
 800441c:	080048f3 	.word	0x080048f3

08004420 <_cleanup_r>:
 8004420:	4901      	ldr	r1, [pc, #4]	; (8004428 <_cleanup_r+0x8>)
 8004422:	f000 b8af 	b.w	8004584 <_fwalk_reent>
 8004426:	bf00      	nop
 8004428:	08004361 	.word	0x08004361

0800442c <__sfmoreglue>:
 800442c:	b570      	push	{r4, r5, r6, lr}
 800442e:	2268      	movs	r2, #104	; 0x68
 8004430:	1e4d      	subs	r5, r1, #1
 8004432:	4355      	muls	r5, r2
 8004434:	460e      	mov	r6, r1
 8004436:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800443a:	f000 f997 	bl	800476c <_malloc_r>
 800443e:	4604      	mov	r4, r0
 8004440:	b140      	cbz	r0, 8004454 <__sfmoreglue+0x28>
 8004442:	2100      	movs	r1, #0
 8004444:	e9c0 1600 	strd	r1, r6, [r0]
 8004448:	300c      	adds	r0, #12
 800444a:	60a0      	str	r0, [r4, #8]
 800444c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004450:	f7ff fdc2 	bl	8003fd8 <memset>
 8004454:	4620      	mov	r0, r4
 8004456:	bd70      	pop	{r4, r5, r6, pc}

08004458 <__sfp_lock_acquire>:
 8004458:	4801      	ldr	r0, [pc, #4]	; (8004460 <__sfp_lock_acquire+0x8>)
 800445a:	f000 b8b3 	b.w	80045c4 <__retarget_lock_acquire_recursive>
 800445e:	bf00      	nop
 8004460:	200001ad 	.word	0x200001ad

08004464 <__sfp_lock_release>:
 8004464:	4801      	ldr	r0, [pc, #4]	; (800446c <__sfp_lock_release+0x8>)
 8004466:	f000 b8ae 	b.w	80045c6 <__retarget_lock_release_recursive>
 800446a:	bf00      	nop
 800446c:	200001ad 	.word	0x200001ad

08004470 <__sinit_lock_acquire>:
 8004470:	4801      	ldr	r0, [pc, #4]	; (8004478 <__sinit_lock_acquire+0x8>)
 8004472:	f000 b8a7 	b.w	80045c4 <__retarget_lock_acquire_recursive>
 8004476:	bf00      	nop
 8004478:	200001ae 	.word	0x200001ae

0800447c <__sinit_lock_release>:
 800447c:	4801      	ldr	r0, [pc, #4]	; (8004484 <__sinit_lock_release+0x8>)
 800447e:	f000 b8a2 	b.w	80045c6 <__retarget_lock_release_recursive>
 8004482:	bf00      	nop
 8004484:	200001ae 	.word	0x200001ae

08004488 <__sinit>:
 8004488:	b510      	push	{r4, lr}
 800448a:	4604      	mov	r4, r0
 800448c:	f7ff fff0 	bl	8004470 <__sinit_lock_acquire>
 8004490:	69a3      	ldr	r3, [r4, #24]
 8004492:	b11b      	cbz	r3, 800449c <__sinit+0x14>
 8004494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004498:	f7ff bff0 	b.w	800447c <__sinit_lock_release>
 800449c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80044a0:	6523      	str	r3, [r4, #80]	; 0x50
 80044a2:	4b13      	ldr	r3, [pc, #76]	; (80044f0 <__sinit+0x68>)
 80044a4:	4a13      	ldr	r2, [pc, #76]	; (80044f4 <__sinit+0x6c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80044aa:	42a3      	cmp	r3, r4
 80044ac:	bf04      	itt	eq
 80044ae:	2301      	moveq	r3, #1
 80044b0:	61a3      	streq	r3, [r4, #24]
 80044b2:	4620      	mov	r0, r4
 80044b4:	f000 f820 	bl	80044f8 <__sfp>
 80044b8:	6060      	str	r0, [r4, #4]
 80044ba:	4620      	mov	r0, r4
 80044bc:	f000 f81c 	bl	80044f8 <__sfp>
 80044c0:	60a0      	str	r0, [r4, #8]
 80044c2:	4620      	mov	r0, r4
 80044c4:	f000 f818 	bl	80044f8 <__sfp>
 80044c8:	2200      	movs	r2, #0
 80044ca:	60e0      	str	r0, [r4, #12]
 80044cc:	2104      	movs	r1, #4
 80044ce:	6860      	ldr	r0, [r4, #4]
 80044d0:	f7ff ff82 	bl	80043d8 <std>
 80044d4:	68a0      	ldr	r0, [r4, #8]
 80044d6:	2201      	movs	r2, #1
 80044d8:	2109      	movs	r1, #9
 80044da:	f7ff ff7d 	bl	80043d8 <std>
 80044de:	68e0      	ldr	r0, [r4, #12]
 80044e0:	2202      	movs	r2, #2
 80044e2:	2112      	movs	r1, #18
 80044e4:	f7ff ff78 	bl	80043d8 <std>
 80044e8:	2301      	movs	r3, #1
 80044ea:	61a3      	str	r3, [r4, #24]
 80044ec:	e7d2      	b.n	8004494 <__sinit+0xc>
 80044ee:	bf00      	nop
 80044f0:	08004a54 	.word	0x08004a54
 80044f4:	08004421 	.word	0x08004421

080044f8 <__sfp>:
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fa:	4607      	mov	r7, r0
 80044fc:	f7ff ffac 	bl	8004458 <__sfp_lock_acquire>
 8004500:	4b1e      	ldr	r3, [pc, #120]	; (800457c <__sfp+0x84>)
 8004502:	681e      	ldr	r6, [r3, #0]
 8004504:	69b3      	ldr	r3, [r6, #24]
 8004506:	b913      	cbnz	r3, 800450e <__sfp+0x16>
 8004508:	4630      	mov	r0, r6
 800450a:	f7ff ffbd 	bl	8004488 <__sinit>
 800450e:	3648      	adds	r6, #72	; 0x48
 8004510:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004514:	3b01      	subs	r3, #1
 8004516:	d503      	bpl.n	8004520 <__sfp+0x28>
 8004518:	6833      	ldr	r3, [r6, #0]
 800451a:	b30b      	cbz	r3, 8004560 <__sfp+0x68>
 800451c:	6836      	ldr	r6, [r6, #0]
 800451e:	e7f7      	b.n	8004510 <__sfp+0x18>
 8004520:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004524:	b9d5      	cbnz	r5, 800455c <__sfp+0x64>
 8004526:	4b16      	ldr	r3, [pc, #88]	; (8004580 <__sfp+0x88>)
 8004528:	60e3      	str	r3, [r4, #12]
 800452a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800452e:	6665      	str	r5, [r4, #100]	; 0x64
 8004530:	f000 f847 	bl	80045c2 <__retarget_lock_init_recursive>
 8004534:	f7ff ff96 	bl	8004464 <__sfp_lock_release>
 8004538:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800453c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004540:	6025      	str	r5, [r4, #0]
 8004542:	61a5      	str	r5, [r4, #24]
 8004544:	2208      	movs	r2, #8
 8004546:	4629      	mov	r1, r5
 8004548:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800454c:	f7ff fd44 	bl	8003fd8 <memset>
 8004550:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004554:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004558:	4620      	mov	r0, r4
 800455a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800455c:	3468      	adds	r4, #104	; 0x68
 800455e:	e7d9      	b.n	8004514 <__sfp+0x1c>
 8004560:	2104      	movs	r1, #4
 8004562:	4638      	mov	r0, r7
 8004564:	f7ff ff62 	bl	800442c <__sfmoreglue>
 8004568:	4604      	mov	r4, r0
 800456a:	6030      	str	r0, [r6, #0]
 800456c:	2800      	cmp	r0, #0
 800456e:	d1d5      	bne.n	800451c <__sfp+0x24>
 8004570:	f7ff ff78 	bl	8004464 <__sfp_lock_release>
 8004574:	230c      	movs	r3, #12
 8004576:	603b      	str	r3, [r7, #0]
 8004578:	e7ee      	b.n	8004558 <__sfp+0x60>
 800457a:	bf00      	nop
 800457c:	08004a54 	.word	0x08004a54
 8004580:	ffff0001 	.word	0xffff0001

08004584 <_fwalk_reent>:
 8004584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004588:	4606      	mov	r6, r0
 800458a:	4688      	mov	r8, r1
 800458c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004590:	2700      	movs	r7, #0
 8004592:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004596:	f1b9 0901 	subs.w	r9, r9, #1
 800459a:	d505      	bpl.n	80045a8 <_fwalk_reent+0x24>
 800459c:	6824      	ldr	r4, [r4, #0]
 800459e:	2c00      	cmp	r4, #0
 80045a0:	d1f7      	bne.n	8004592 <_fwalk_reent+0xe>
 80045a2:	4638      	mov	r0, r7
 80045a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045a8:	89ab      	ldrh	r3, [r5, #12]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d907      	bls.n	80045be <_fwalk_reent+0x3a>
 80045ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045b2:	3301      	adds	r3, #1
 80045b4:	d003      	beq.n	80045be <_fwalk_reent+0x3a>
 80045b6:	4629      	mov	r1, r5
 80045b8:	4630      	mov	r0, r6
 80045ba:	47c0      	blx	r8
 80045bc:	4307      	orrs	r7, r0
 80045be:	3568      	adds	r5, #104	; 0x68
 80045c0:	e7e9      	b.n	8004596 <_fwalk_reent+0x12>

080045c2 <__retarget_lock_init_recursive>:
 80045c2:	4770      	bx	lr

080045c4 <__retarget_lock_acquire_recursive>:
 80045c4:	4770      	bx	lr

080045c6 <__retarget_lock_release_recursive>:
 80045c6:	4770      	bx	lr

080045c8 <__swhatbuf_r>:
 80045c8:	b570      	push	{r4, r5, r6, lr}
 80045ca:	460e      	mov	r6, r1
 80045cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045d0:	2900      	cmp	r1, #0
 80045d2:	b096      	sub	sp, #88	; 0x58
 80045d4:	4614      	mov	r4, r2
 80045d6:	461d      	mov	r5, r3
 80045d8:	da08      	bge.n	80045ec <__swhatbuf_r+0x24>
 80045da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	602a      	str	r2, [r5, #0]
 80045e2:	061a      	lsls	r2, r3, #24
 80045e4:	d410      	bmi.n	8004608 <__swhatbuf_r+0x40>
 80045e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045ea:	e00e      	b.n	800460a <__swhatbuf_r+0x42>
 80045ec:	466a      	mov	r2, sp
 80045ee:	f000 f9a7 	bl	8004940 <_fstat_r>
 80045f2:	2800      	cmp	r0, #0
 80045f4:	dbf1      	blt.n	80045da <__swhatbuf_r+0x12>
 80045f6:	9a01      	ldr	r2, [sp, #4]
 80045f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80045fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004600:	425a      	negs	r2, r3
 8004602:	415a      	adcs	r2, r3
 8004604:	602a      	str	r2, [r5, #0]
 8004606:	e7ee      	b.n	80045e6 <__swhatbuf_r+0x1e>
 8004608:	2340      	movs	r3, #64	; 0x40
 800460a:	2000      	movs	r0, #0
 800460c:	6023      	str	r3, [r4, #0]
 800460e:	b016      	add	sp, #88	; 0x58
 8004610:	bd70      	pop	{r4, r5, r6, pc}
	...

08004614 <__smakebuf_r>:
 8004614:	898b      	ldrh	r3, [r1, #12]
 8004616:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004618:	079d      	lsls	r5, r3, #30
 800461a:	4606      	mov	r6, r0
 800461c:	460c      	mov	r4, r1
 800461e:	d507      	bpl.n	8004630 <__smakebuf_r+0x1c>
 8004620:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	6123      	str	r3, [r4, #16]
 8004628:	2301      	movs	r3, #1
 800462a:	6163      	str	r3, [r4, #20]
 800462c:	b002      	add	sp, #8
 800462e:	bd70      	pop	{r4, r5, r6, pc}
 8004630:	ab01      	add	r3, sp, #4
 8004632:	466a      	mov	r2, sp
 8004634:	f7ff ffc8 	bl	80045c8 <__swhatbuf_r>
 8004638:	9900      	ldr	r1, [sp, #0]
 800463a:	4605      	mov	r5, r0
 800463c:	4630      	mov	r0, r6
 800463e:	f000 f895 	bl	800476c <_malloc_r>
 8004642:	b948      	cbnz	r0, 8004658 <__smakebuf_r+0x44>
 8004644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004648:	059a      	lsls	r2, r3, #22
 800464a:	d4ef      	bmi.n	800462c <__smakebuf_r+0x18>
 800464c:	f023 0303 	bic.w	r3, r3, #3
 8004650:	f043 0302 	orr.w	r3, r3, #2
 8004654:	81a3      	strh	r3, [r4, #12]
 8004656:	e7e3      	b.n	8004620 <__smakebuf_r+0xc>
 8004658:	4b0d      	ldr	r3, [pc, #52]	; (8004690 <__smakebuf_r+0x7c>)
 800465a:	62b3      	str	r3, [r6, #40]	; 0x28
 800465c:	89a3      	ldrh	r3, [r4, #12]
 800465e:	6020      	str	r0, [r4, #0]
 8004660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004664:	81a3      	strh	r3, [r4, #12]
 8004666:	9b00      	ldr	r3, [sp, #0]
 8004668:	6163      	str	r3, [r4, #20]
 800466a:	9b01      	ldr	r3, [sp, #4]
 800466c:	6120      	str	r0, [r4, #16]
 800466e:	b15b      	cbz	r3, 8004688 <__smakebuf_r+0x74>
 8004670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004674:	4630      	mov	r0, r6
 8004676:	f000 f975 	bl	8004964 <_isatty_r>
 800467a:	b128      	cbz	r0, 8004688 <__smakebuf_r+0x74>
 800467c:	89a3      	ldrh	r3, [r4, #12]
 800467e:	f023 0303 	bic.w	r3, r3, #3
 8004682:	f043 0301 	orr.w	r3, r3, #1
 8004686:	81a3      	strh	r3, [r4, #12]
 8004688:	89a0      	ldrh	r0, [r4, #12]
 800468a:	4305      	orrs	r5, r0
 800468c:	81a5      	strh	r5, [r4, #12]
 800468e:	e7cd      	b.n	800462c <__smakebuf_r+0x18>
 8004690:	08004421 	.word	0x08004421

08004694 <_free_r>:
 8004694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004696:	2900      	cmp	r1, #0
 8004698:	d044      	beq.n	8004724 <_free_r+0x90>
 800469a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800469e:	9001      	str	r0, [sp, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f1a1 0404 	sub.w	r4, r1, #4
 80046a6:	bfb8      	it	lt
 80046a8:	18e4      	addlt	r4, r4, r3
 80046aa:	f000 f97d 	bl	80049a8 <__malloc_lock>
 80046ae:	4a1e      	ldr	r2, [pc, #120]	; (8004728 <_free_r+0x94>)
 80046b0:	9801      	ldr	r0, [sp, #4]
 80046b2:	6813      	ldr	r3, [r2, #0]
 80046b4:	b933      	cbnz	r3, 80046c4 <_free_r+0x30>
 80046b6:	6063      	str	r3, [r4, #4]
 80046b8:	6014      	str	r4, [r2, #0]
 80046ba:	b003      	add	sp, #12
 80046bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046c0:	f000 b978 	b.w	80049b4 <__malloc_unlock>
 80046c4:	42a3      	cmp	r3, r4
 80046c6:	d908      	bls.n	80046da <_free_r+0x46>
 80046c8:	6825      	ldr	r5, [r4, #0]
 80046ca:	1961      	adds	r1, r4, r5
 80046cc:	428b      	cmp	r3, r1
 80046ce:	bf01      	itttt	eq
 80046d0:	6819      	ldreq	r1, [r3, #0]
 80046d2:	685b      	ldreq	r3, [r3, #4]
 80046d4:	1949      	addeq	r1, r1, r5
 80046d6:	6021      	streq	r1, [r4, #0]
 80046d8:	e7ed      	b.n	80046b6 <_free_r+0x22>
 80046da:	461a      	mov	r2, r3
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	b10b      	cbz	r3, 80046e4 <_free_r+0x50>
 80046e0:	42a3      	cmp	r3, r4
 80046e2:	d9fa      	bls.n	80046da <_free_r+0x46>
 80046e4:	6811      	ldr	r1, [r2, #0]
 80046e6:	1855      	adds	r5, r2, r1
 80046e8:	42a5      	cmp	r5, r4
 80046ea:	d10b      	bne.n	8004704 <_free_r+0x70>
 80046ec:	6824      	ldr	r4, [r4, #0]
 80046ee:	4421      	add	r1, r4
 80046f0:	1854      	adds	r4, r2, r1
 80046f2:	42a3      	cmp	r3, r4
 80046f4:	6011      	str	r1, [r2, #0]
 80046f6:	d1e0      	bne.n	80046ba <_free_r+0x26>
 80046f8:	681c      	ldr	r4, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	6053      	str	r3, [r2, #4]
 80046fe:	4421      	add	r1, r4
 8004700:	6011      	str	r1, [r2, #0]
 8004702:	e7da      	b.n	80046ba <_free_r+0x26>
 8004704:	d902      	bls.n	800470c <_free_r+0x78>
 8004706:	230c      	movs	r3, #12
 8004708:	6003      	str	r3, [r0, #0]
 800470a:	e7d6      	b.n	80046ba <_free_r+0x26>
 800470c:	6825      	ldr	r5, [r4, #0]
 800470e:	1961      	adds	r1, r4, r5
 8004710:	428b      	cmp	r3, r1
 8004712:	bf04      	itt	eq
 8004714:	6819      	ldreq	r1, [r3, #0]
 8004716:	685b      	ldreq	r3, [r3, #4]
 8004718:	6063      	str	r3, [r4, #4]
 800471a:	bf04      	itt	eq
 800471c:	1949      	addeq	r1, r1, r5
 800471e:	6021      	streq	r1, [r4, #0]
 8004720:	6054      	str	r4, [r2, #4]
 8004722:	e7ca      	b.n	80046ba <_free_r+0x26>
 8004724:	b003      	add	sp, #12
 8004726:	bd30      	pop	{r4, r5, pc}
 8004728:	200001b0 	.word	0x200001b0

0800472c <sbrk_aligned>:
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	4e0e      	ldr	r6, [pc, #56]	; (8004768 <sbrk_aligned+0x3c>)
 8004730:	460c      	mov	r4, r1
 8004732:	6831      	ldr	r1, [r6, #0]
 8004734:	4605      	mov	r5, r0
 8004736:	b911      	cbnz	r1, 800473e <sbrk_aligned+0x12>
 8004738:	f000 f88c 	bl	8004854 <_sbrk_r>
 800473c:	6030      	str	r0, [r6, #0]
 800473e:	4621      	mov	r1, r4
 8004740:	4628      	mov	r0, r5
 8004742:	f000 f887 	bl	8004854 <_sbrk_r>
 8004746:	1c43      	adds	r3, r0, #1
 8004748:	d00a      	beq.n	8004760 <sbrk_aligned+0x34>
 800474a:	1cc4      	adds	r4, r0, #3
 800474c:	f024 0403 	bic.w	r4, r4, #3
 8004750:	42a0      	cmp	r0, r4
 8004752:	d007      	beq.n	8004764 <sbrk_aligned+0x38>
 8004754:	1a21      	subs	r1, r4, r0
 8004756:	4628      	mov	r0, r5
 8004758:	f000 f87c 	bl	8004854 <_sbrk_r>
 800475c:	3001      	adds	r0, #1
 800475e:	d101      	bne.n	8004764 <sbrk_aligned+0x38>
 8004760:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004764:	4620      	mov	r0, r4
 8004766:	bd70      	pop	{r4, r5, r6, pc}
 8004768:	200001b4 	.word	0x200001b4

0800476c <_malloc_r>:
 800476c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004770:	1ccd      	adds	r5, r1, #3
 8004772:	f025 0503 	bic.w	r5, r5, #3
 8004776:	3508      	adds	r5, #8
 8004778:	2d0c      	cmp	r5, #12
 800477a:	bf38      	it	cc
 800477c:	250c      	movcc	r5, #12
 800477e:	2d00      	cmp	r5, #0
 8004780:	4607      	mov	r7, r0
 8004782:	db01      	blt.n	8004788 <_malloc_r+0x1c>
 8004784:	42a9      	cmp	r1, r5
 8004786:	d905      	bls.n	8004794 <_malloc_r+0x28>
 8004788:	230c      	movs	r3, #12
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	2600      	movs	r6, #0
 800478e:	4630      	mov	r0, r6
 8004790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004794:	4e2e      	ldr	r6, [pc, #184]	; (8004850 <_malloc_r+0xe4>)
 8004796:	f000 f907 	bl	80049a8 <__malloc_lock>
 800479a:	6833      	ldr	r3, [r6, #0]
 800479c:	461c      	mov	r4, r3
 800479e:	bb34      	cbnz	r4, 80047ee <_malloc_r+0x82>
 80047a0:	4629      	mov	r1, r5
 80047a2:	4638      	mov	r0, r7
 80047a4:	f7ff ffc2 	bl	800472c <sbrk_aligned>
 80047a8:	1c43      	adds	r3, r0, #1
 80047aa:	4604      	mov	r4, r0
 80047ac:	d14d      	bne.n	800484a <_malloc_r+0xde>
 80047ae:	6834      	ldr	r4, [r6, #0]
 80047b0:	4626      	mov	r6, r4
 80047b2:	2e00      	cmp	r6, #0
 80047b4:	d140      	bne.n	8004838 <_malloc_r+0xcc>
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	4631      	mov	r1, r6
 80047ba:	4638      	mov	r0, r7
 80047bc:	eb04 0803 	add.w	r8, r4, r3
 80047c0:	f000 f848 	bl	8004854 <_sbrk_r>
 80047c4:	4580      	cmp	r8, r0
 80047c6:	d13a      	bne.n	800483e <_malloc_r+0xd2>
 80047c8:	6821      	ldr	r1, [r4, #0]
 80047ca:	3503      	adds	r5, #3
 80047cc:	1a6d      	subs	r5, r5, r1
 80047ce:	f025 0503 	bic.w	r5, r5, #3
 80047d2:	3508      	adds	r5, #8
 80047d4:	2d0c      	cmp	r5, #12
 80047d6:	bf38      	it	cc
 80047d8:	250c      	movcc	r5, #12
 80047da:	4629      	mov	r1, r5
 80047dc:	4638      	mov	r0, r7
 80047de:	f7ff ffa5 	bl	800472c <sbrk_aligned>
 80047e2:	3001      	adds	r0, #1
 80047e4:	d02b      	beq.n	800483e <_malloc_r+0xd2>
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	442b      	add	r3, r5
 80047ea:	6023      	str	r3, [r4, #0]
 80047ec:	e00e      	b.n	800480c <_malloc_r+0xa0>
 80047ee:	6822      	ldr	r2, [r4, #0]
 80047f0:	1b52      	subs	r2, r2, r5
 80047f2:	d41e      	bmi.n	8004832 <_malloc_r+0xc6>
 80047f4:	2a0b      	cmp	r2, #11
 80047f6:	d916      	bls.n	8004826 <_malloc_r+0xba>
 80047f8:	1961      	adds	r1, r4, r5
 80047fa:	42a3      	cmp	r3, r4
 80047fc:	6025      	str	r5, [r4, #0]
 80047fe:	bf18      	it	ne
 8004800:	6059      	strne	r1, [r3, #4]
 8004802:	6863      	ldr	r3, [r4, #4]
 8004804:	bf08      	it	eq
 8004806:	6031      	streq	r1, [r6, #0]
 8004808:	5162      	str	r2, [r4, r5]
 800480a:	604b      	str	r3, [r1, #4]
 800480c:	4638      	mov	r0, r7
 800480e:	f104 060b 	add.w	r6, r4, #11
 8004812:	f000 f8cf 	bl	80049b4 <__malloc_unlock>
 8004816:	f026 0607 	bic.w	r6, r6, #7
 800481a:	1d23      	adds	r3, r4, #4
 800481c:	1af2      	subs	r2, r6, r3
 800481e:	d0b6      	beq.n	800478e <_malloc_r+0x22>
 8004820:	1b9b      	subs	r3, r3, r6
 8004822:	50a3      	str	r3, [r4, r2]
 8004824:	e7b3      	b.n	800478e <_malloc_r+0x22>
 8004826:	6862      	ldr	r2, [r4, #4]
 8004828:	42a3      	cmp	r3, r4
 800482a:	bf0c      	ite	eq
 800482c:	6032      	streq	r2, [r6, #0]
 800482e:	605a      	strne	r2, [r3, #4]
 8004830:	e7ec      	b.n	800480c <_malloc_r+0xa0>
 8004832:	4623      	mov	r3, r4
 8004834:	6864      	ldr	r4, [r4, #4]
 8004836:	e7b2      	b.n	800479e <_malloc_r+0x32>
 8004838:	4634      	mov	r4, r6
 800483a:	6876      	ldr	r6, [r6, #4]
 800483c:	e7b9      	b.n	80047b2 <_malloc_r+0x46>
 800483e:	230c      	movs	r3, #12
 8004840:	603b      	str	r3, [r7, #0]
 8004842:	4638      	mov	r0, r7
 8004844:	f000 f8b6 	bl	80049b4 <__malloc_unlock>
 8004848:	e7a1      	b.n	800478e <_malloc_r+0x22>
 800484a:	6025      	str	r5, [r4, #0]
 800484c:	e7de      	b.n	800480c <_malloc_r+0xa0>
 800484e:	bf00      	nop
 8004850:	200001b0 	.word	0x200001b0

08004854 <_sbrk_r>:
 8004854:	b538      	push	{r3, r4, r5, lr}
 8004856:	4d06      	ldr	r5, [pc, #24]	; (8004870 <_sbrk_r+0x1c>)
 8004858:	2300      	movs	r3, #0
 800485a:	4604      	mov	r4, r0
 800485c:	4608      	mov	r0, r1
 800485e:	602b      	str	r3, [r5, #0]
 8004860:	f7fc fa62 	bl	8000d28 <_sbrk>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	d102      	bne.n	800486e <_sbrk_r+0x1a>
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	b103      	cbz	r3, 800486e <_sbrk_r+0x1a>
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	bd38      	pop	{r3, r4, r5, pc}
 8004870:	200001b8 	.word	0x200001b8

08004874 <__sread>:
 8004874:	b510      	push	{r4, lr}
 8004876:	460c      	mov	r4, r1
 8004878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800487c:	f000 f8a0 	bl	80049c0 <_read_r>
 8004880:	2800      	cmp	r0, #0
 8004882:	bfab      	itete	ge
 8004884:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004886:	89a3      	ldrhlt	r3, [r4, #12]
 8004888:	181b      	addge	r3, r3, r0
 800488a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800488e:	bfac      	ite	ge
 8004890:	6563      	strge	r3, [r4, #84]	; 0x54
 8004892:	81a3      	strhlt	r3, [r4, #12]
 8004894:	bd10      	pop	{r4, pc}

08004896 <__swrite>:
 8004896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800489a:	461f      	mov	r7, r3
 800489c:	898b      	ldrh	r3, [r1, #12]
 800489e:	05db      	lsls	r3, r3, #23
 80048a0:	4605      	mov	r5, r0
 80048a2:	460c      	mov	r4, r1
 80048a4:	4616      	mov	r6, r2
 80048a6:	d505      	bpl.n	80048b4 <__swrite+0x1e>
 80048a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ac:	2302      	movs	r3, #2
 80048ae:	2200      	movs	r2, #0
 80048b0:	f000 f868 	bl	8004984 <_lseek_r>
 80048b4:	89a3      	ldrh	r3, [r4, #12]
 80048b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048be:	81a3      	strh	r3, [r4, #12]
 80048c0:	4632      	mov	r2, r6
 80048c2:	463b      	mov	r3, r7
 80048c4:	4628      	mov	r0, r5
 80048c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048ca:	f000 b817 	b.w	80048fc <_write_r>

080048ce <__sseek>:
 80048ce:	b510      	push	{r4, lr}
 80048d0:	460c      	mov	r4, r1
 80048d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048d6:	f000 f855 	bl	8004984 <_lseek_r>
 80048da:	1c43      	adds	r3, r0, #1
 80048dc:	89a3      	ldrh	r3, [r4, #12]
 80048de:	bf15      	itete	ne
 80048e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80048e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80048e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80048ea:	81a3      	strheq	r3, [r4, #12]
 80048ec:	bf18      	it	ne
 80048ee:	81a3      	strhne	r3, [r4, #12]
 80048f0:	bd10      	pop	{r4, pc}

080048f2 <__sclose>:
 80048f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048f6:	f000 b813 	b.w	8004920 <_close_r>
	...

080048fc <_write_r>:
 80048fc:	b538      	push	{r3, r4, r5, lr}
 80048fe:	4d07      	ldr	r5, [pc, #28]	; (800491c <_write_r+0x20>)
 8004900:	4604      	mov	r4, r0
 8004902:	4608      	mov	r0, r1
 8004904:	4611      	mov	r1, r2
 8004906:	2200      	movs	r2, #0
 8004908:	602a      	str	r2, [r5, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	f7fc f83a 	bl	8000984 <_write>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	d102      	bne.n	800491a <_write_r+0x1e>
 8004914:	682b      	ldr	r3, [r5, #0]
 8004916:	b103      	cbz	r3, 800491a <_write_r+0x1e>
 8004918:	6023      	str	r3, [r4, #0]
 800491a:	bd38      	pop	{r3, r4, r5, pc}
 800491c:	200001b8 	.word	0x200001b8

08004920 <_close_r>:
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	4d06      	ldr	r5, [pc, #24]	; (800493c <_close_r+0x1c>)
 8004924:	2300      	movs	r3, #0
 8004926:	4604      	mov	r4, r0
 8004928:	4608      	mov	r0, r1
 800492a:	602b      	str	r3, [r5, #0]
 800492c:	f7fc f9c7 	bl	8000cbe <_close>
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	d102      	bne.n	800493a <_close_r+0x1a>
 8004934:	682b      	ldr	r3, [r5, #0]
 8004936:	b103      	cbz	r3, 800493a <_close_r+0x1a>
 8004938:	6023      	str	r3, [r4, #0]
 800493a:	bd38      	pop	{r3, r4, r5, pc}
 800493c:	200001b8 	.word	0x200001b8

08004940 <_fstat_r>:
 8004940:	b538      	push	{r3, r4, r5, lr}
 8004942:	4d07      	ldr	r5, [pc, #28]	; (8004960 <_fstat_r+0x20>)
 8004944:	2300      	movs	r3, #0
 8004946:	4604      	mov	r4, r0
 8004948:	4608      	mov	r0, r1
 800494a:	4611      	mov	r1, r2
 800494c:	602b      	str	r3, [r5, #0]
 800494e:	f7fc f9c2 	bl	8000cd6 <_fstat>
 8004952:	1c43      	adds	r3, r0, #1
 8004954:	d102      	bne.n	800495c <_fstat_r+0x1c>
 8004956:	682b      	ldr	r3, [r5, #0]
 8004958:	b103      	cbz	r3, 800495c <_fstat_r+0x1c>
 800495a:	6023      	str	r3, [r4, #0]
 800495c:	bd38      	pop	{r3, r4, r5, pc}
 800495e:	bf00      	nop
 8004960:	200001b8 	.word	0x200001b8

08004964 <_isatty_r>:
 8004964:	b538      	push	{r3, r4, r5, lr}
 8004966:	4d06      	ldr	r5, [pc, #24]	; (8004980 <_isatty_r+0x1c>)
 8004968:	2300      	movs	r3, #0
 800496a:	4604      	mov	r4, r0
 800496c:	4608      	mov	r0, r1
 800496e:	602b      	str	r3, [r5, #0]
 8004970:	f7fc f9c1 	bl	8000cf6 <_isatty>
 8004974:	1c43      	adds	r3, r0, #1
 8004976:	d102      	bne.n	800497e <_isatty_r+0x1a>
 8004978:	682b      	ldr	r3, [r5, #0]
 800497a:	b103      	cbz	r3, 800497e <_isatty_r+0x1a>
 800497c:	6023      	str	r3, [r4, #0]
 800497e:	bd38      	pop	{r3, r4, r5, pc}
 8004980:	200001b8 	.word	0x200001b8

08004984 <_lseek_r>:
 8004984:	b538      	push	{r3, r4, r5, lr}
 8004986:	4d07      	ldr	r5, [pc, #28]	; (80049a4 <_lseek_r+0x20>)
 8004988:	4604      	mov	r4, r0
 800498a:	4608      	mov	r0, r1
 800498c:	4611      	mov	r1, r2
 800498e:	2200      	movs	r2, #0
 8004990:	602a      	str	r2, [r5, #0]
 8004992:	461a      	mov	r2, r3
 8004994:	f7fc f9ba 	bl	8000d0c <_lseek>
 8004998:	1c43      	adds	r3, r0, #1
 800499a:	d102      	bne.n	80049a2 <_lseek_r+0x1e>
 800499c:	682b      	ldr	r3, [r5, #0]
 800499e:	b103      	cbz	r3, 80049a2 <_lseek_r+0x1e>
 80049a0:	6023      	str	r3, [r4, #0]
 80049a2:	bd38      	pop	{r3, r4, r5, pc}
 80049a4:	200001b8 	.word	0x200001b8

080049a8 <__malloc_lock>:
 80049a8:	4801      	ldr	r0, [pc, #4]	; (80049b0 <__malloc_lock+0x8>)
 80049aa:	f7ff be0b 	b.w	80045c4 <__retarget_lock_acquire_recursive>
 80049ae:	bf00      	nop
 80049b0:	200001ac 	.word	0x200001ac

080049b4 <__malloc_unlock>:
 80049b4:	4801      	ldr	r0, [pc, #4]	; (80049bc <__malloc_unlock+0x8>)
 80049b6:	f7ff be06 	b.w	80045c6 <__retarget_lock_release_recursive>
 80049ba:	bf00      	nop
 80049bc:	200001ac 	.word	0x200001ac

080049c0 <_read_r>:
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	4d07      	ldr	r5, [pc, #28]	; (80049e0 <_read_r+0x20>)
 80049c4:	4604      	mov	r4, r0
 80049c6:	4608      	mov	r0, r1
 80049c8:	4611      	mov	r1, r2
 80049ca:	2200      	movs	r2, #0
 80049cc:	602a      	str	r2, [r5, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	f7fc f958 	bl	8000c84 <_read>
 80049d4:	1c43      	adds	r3, r0, #1
 80049d6:	d102      	bne.n	80049de <_read_r+0x1e>
 80049d8:	682b      	ldr	r3, [r5, #0]
 80049da:	b103      	cbz	r3, 80049de <_read_r+0x1e>
 80049dc:	6023      	str	r3, [r4, #0]
 80049de:	bd38      	pop	{r3, r4, r5, pc}
 80049e0:	200001b8 	.word	0x200001b8

080049e4 <_init>:
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	bf00      	nop
 80049e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ea:	bc08      	pop	{r3}
 80049ec:	469e      	mov	lr, r3
 80049ee:	4770      	bx	lr

080049f0 <_fini>:
 80049f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f2:	bf00      	nop
 80049f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f6:	bc08      	pop	{r3}
 80049f8:	469e      	mov	lr, r3
 80049fa:	4770      	bx	lr
