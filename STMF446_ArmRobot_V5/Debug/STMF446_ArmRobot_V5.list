
STMF446_ArmRobot_V5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db5c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c98  0800dd30  0800dd30  0001dd30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9c8  0800e9c8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e9c8  0800e9c8  0001e9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9d0  0800e9d0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9d0  0800e9d0  0001e9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9d4  0800e9d4  0001e9d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800e9d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a3c  200001e8  0800ebc0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c24  0800ebc0  00020c24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013162  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b9  00000000  00000000  0003337a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  00035b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  00036c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024048  00000000  00000000  00037c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141b5  00000000  00000000  0005bc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8831  00000000  00000000  0006fe35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00148666  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ccc  00000000  00000000  001486b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800dd14 	.word	0x0800dd14

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800dd14 	.word	0x0800dd14

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <reset>:
{
	return TMC2209_CRC(data, length);
}

static uint8_t reset()
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	//StepDir_init(STEPDIR_PRECISION);
	//StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.DIAG);

	return tmc2209_reset(&TMC2209);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <reset+0x10>)
 8000f92:	f008 f9c3 	bl	800931c <tmc2209_reset>
 8000f96:	4603      	mov	r3, r0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000048c 	.word	0x2000048c

08000fa0 <restore>:

static uint8_t restore()
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	return tmc2209_restore(&TMC2209);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <restore+0x10>)
 8000fa6:	f008 f9f3 	bl	8009390 <tmc2209_restore>
 8000faa:	4603      	mov	r3, r0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2000048c 	.word	0x2000048c

08000fb4 <TMC2209_INIT>:
void TMC2209_INIT()
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	2007      	movs	r0, #7
 8000fc0:	f008 f880 	bl	80090c4 <tmc_fillCRC8Table>

	TMC2209_config.reset = reset;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <TMC2209_INIT+0x38>)
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <TMC2209_INIT+0x3c>)
 8000fc8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	TMC2209_config.restore = restore;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <TMC2209_INIT+0x38>)
 8000fce:	4a09      	ldr	r2, [pc, #36]	; (8000ff4 <TMC2209_INIT+0x40>)
 8000fd0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	tmc2209_init(&TMC2209, 0, 0, &TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <TMC2209_INIT+0x44>)
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <TMC2209_INIT+0x38>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4807      	ldr	r0, [pc, #28]	; (8000ffc <TMC2209_INIT+0x48>)
 8000fe0:	f008 f952 	bl	8009288 <tmc2209_init>
	//restore();
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000714 	.word	0x20000714
 8000ff0:	08000f8d 	.word	0x08000f8d
 8000ff4:	08000fa1 	.word	0x08000fa1
 8000ff8:	0800e10c 	.word	0x0800e10c
 8000ffc:	2000048c 	.word	0x2000048c

08001000 <sent_position>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//ここからUART//
void sent_position(RobotArm* robot_arm){
 8001000:	b5b0      	push	{r4, r5, r7, lr}
 8001002:	ed2d 8b02 	vpush	{d8}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	float current_coordinate[2];
	int16_t x1;
	int16_t y1;
	int16_t x2;
	int16_t y2;
	BLDC_FK(-(robot_arm->axis[0].position),-((robot_arm->axis[1].position)-M_PI),&current_coordinate[0],&current_coordinate[1]);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001012:	eeb1 8a67 	vneg.f32	s16, s15
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fab4 	bl	8000588 <__aeabi_f2d>
 8001020:	a372      	add	r3, pc, #456	; (adr r3, 80011ec <sent_position+0x1ec>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff f94f 	bl	80002c8 <__aeabi_dsub>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	f7ff fdd9 	bl	8000be8 <__aeabi_d2f>
 8001036:	4603      	mov	r3, r0
 8001038:	ee07 3a90 	vmov	s15, r3
 800103c:	eef1 7a67 	vneg.f32	s15, s15
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	1d1a      	adds	r2, r3, #4
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	eef0 0a67 	vmov.f32	s1, s15
 8001052:	eeb0 0a48 	vmov.f32	s0, s16
 8001056:	f002 fd51 	bl	8003afc <BLDC_FK>

	x1=round(l1*cos(-robot_arm->axis[0].position));
 800105a:	4b61      	ldr	r3, [pc, #388]	; (80011e0 <sent_position+0x1e0>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fa92 	bl	8000588 <__aeabi_f2d>
 8001064:	4604      	mov	r4, r0
 8001066:	460d      	mov	r5, r1
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	edd3 7a01 	vldr	s15, [r3, #4]
 800106e:	eef1 7a67 	vneg.f32	s15, s15
 8001072:	ee17 3a90 	vmov	r3, s15
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fa86 	bl	8000588 <__aeabi_f2d>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	ec43 2b10 	vmov	d0, r2, r3
 8001084:	f00b f914 	bl	800c2b0 <cos>
 8001088:	ec53 2b10 	vmov	r2, r3, d0
 800108c:	4620      	mov	r0, r4
 800108e:	4629      	mov	r1, r5
 8001090:	f7ff fad2 	bl	8000638 <__aeabi_dmul>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	ec43 2b17 	vmov	d7, r2, r3
 800109c:	eeb0 0a47 	vmov.f32	s0, s14
 80010a0:	eef0 0a67 	vmov.f32	s1, s15
 80010a4:	f00b f962 	bl	800c36c <round>
 80010a8:	ec53 2b10 	vmov	r2, r3, d0
 80010ac:	4610      	mov	r0, r2
 80010ae:	4619      	mov	r1, r3
 80010b0:	f7ff fd72 	bl	8000b98 <__aeabi_d2iz>
 80010b4:	4603      	mov	r3, r0
 80010b6:	82fb      	strh	r3, [r7, #22]
	y1=round(l1*sin(-robot_arm->axis[0].position));
 80010b8:	4b49      	ldr	r3, [pc, #292]	; (80011e0 <sent_position+0x1e0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fa63 	bl	8000588 <__aeabi_f2d>
 80010c2:	4604      	mov	r4, r0
 80010c4:	460d      	mov	r5, r1
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80010cc:	eef1 7a67 	vneg.f32	s15, s15
 80010d0:	ee17 3a90 	vmov	r3, s15
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fa57 	bl	8000588 <__aeabi_f2d>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	ec43 2b10 	vmov	d0, r2, r3
 80010e2:	f00b f989 	bl	800c3f8 <sin>
 80010e6:	ec53 2b10 	vmov	r2, r3, d0
 80010ea:	4620      	mov	r0, r4
 80010ec:	4629      	mov	r1, r5
 80010ee:	f7ff faa3 	bl	8000638 <__aeabi_dmul>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	ec43 2b17 	vmov	d7, r2, r3
 80010fa:	eeb0 0a47 	vmov.f32	s0, s14
 80010fe:	eef0 0a67 	vmov.f32	s1, s15
 8001102:	f00b f933 	bl	800c36c <round>
 8001106:	ec53 2b10 	vmov	r2, r3, d0
 800110a:	4610      	mov	r0, r2
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff fd43 	bl	8000b98 <__aeabi_d2iz>
 8001112:	4603      	mov	r3, r0
 8001114:	82bb      	strh	r3, [r7, #20]
	x2=round(current_coordinate[0]);	//手先座標系から機械座標系への変換
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fa35 	bl	8000588 <__aeabi_f2d>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	ec43 2b10 	vmov	d0, r2, r3
 8001126:	f00b f921 	bl	800c36c <round>
 800112a:	ec53 2b10 	vmov	r2, r3, d0
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	f7ff fd31 	bl	8000b98 <__aeabi_d2iz>
 8001136:	4603      	mov	r3, r0
 8001138:	827b      	strh	r3, [r7, #18]
	y2=round(current_coordinate[1]);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fa23 	bl	8000588 <__aeabi_f2d>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	ec43 2b10 	vmov	d0, r2, r3
 800114a:	f00b f90f 	bl	800c36c <round>
 800114e:	ec53 2b10 	vmov	r2, r3, d0
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
 8001156:	f7ff fd1f 	bl	8000b98 <__aeabi_d2iz>
 800115a:	4603      	mov	r3, r0
 800115c:	823b      	strh	r3, [r7, #16]
	TxData[0]=0xAA;
 800115e:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <sent_position+0x1e4>)
 8001160:	22aa      	movs	r2, #170	; 0xaa
 8001162:	701a      	strb	r2, [r3, #0]
	TxData[1]=x1&0xFF;
 8001164:	8afb      	ldrh	r3, [r7, #22]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <sent_position+0x1e4>)
 800116a:	705a      	strb	r2, [r3, #1]
	TxData[2]=(x1>>8)&0xFF;
 800116c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001170:	121b      	asrs	r3, r3, #8
 8001172:	b21b      	sxth	r3, r3
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <sent_position+0x1e4>)
 8001178:	709a      	strb	r2, [r3, #2]
	TxData[3]=y1&0xFF;
 800117a:	8abb      	ldrh	r3, [r7, #20]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <sent_position+0x1e4>)
 8001180:	70da      	strb	r2, [r3, #3]
	TxData[4]=(y1>>8)&0xFF;
 8001182:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001186:	121b      	asrs	r3, r3, #8
 8001188:	b21b      	sxth	r3, r3
 800118a:	b2da      	uxtb	r2, r3
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <sent_position+0x1e4>)
 800118e:	711a      	strb	r2, [r3, #4]
	TxData[5]=x2&0xFF;
 8001190:	8a7b      	ldrh	r3, [r7, #18]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <sent_position+0x1e4>)
 8001196:	715a      	strb	r2, [r3, #5]
	TxData[6]=(x2>>8)&0xFF;
 8001198:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800119c:	121b      	asrs	r3, r3, #8
 800119e:	b21b      	sxth	r3, r3
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <sent_position+0x1e4>)
 80011a4:	719a      	strb	r2, [r3, #6]
	TxData[7]=y2&0xFF;
 80011a6:	8a3b      	ldrh	r3, [r7, #16]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <sent_position+0x1e4>)
 80011ac:	71da      	strb	r2, [r3, #7]
	TxData[8]=(y2>>8)&0xFF;
 80011ae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011b2:	121b      	asrs	r3, r3, #8
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <sent_position+0x1e4>)
 80011ba:	721a      	strb	r2, [r3, #8]
	TxData[19]=0xAA;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <sent_position+0x1e4>)
 80011be:	22aa      	movs	r2, #170	; 0xaa
 80011c0:	74da      	strb	r2, [r3, #19]
	HAL_UART_Transmit(&huart2,TxData,sizeof(TxData),100);
 80011c2:	2364      	movs	r3, #100	; 0x64
 80011c4:	2214      	movs	r2, #20
 80011c6:	4907      	ldr	r1, [pc, #28]	; (80011e4 <sent_position+0x1e4>)
 80011c8:	4807      	ldr	r0, [pc, #28]	; (80011e8 <sent_position+0x1e8>)
 80011ca:	f006 ff0b 	bl	8007fe4 <HAL_UART_Transmit>
//	printf("x1:%d\r\n",x1);
//	printf("y1:%d\r\n",y1);
//	printf("x2:%d\r\n",x2);
//	printf("y2:%d\r\n",y2);
}
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	ecbd 8b02 	vpop	{d8}
 80011d8:	bdb0      	pop	{r4, r5, r7, pc}
 80011da:	bf00      	nop
 80011dc:	f3af 8000 	nop.w
 80011e0:	20000004 	.word	0x20000004
 80011e4:	200003a0 	.word	0x200003a0
 80011e8:	20000328 	.word	0x20000328
 80011ec:	54442d18 	.word	0x54442d18
 80011f0:	400921fb 	.word	0x400921fb

080011f4 <BLDC_CANTx>:
//ここからBLDC//
void BLDC_CANTx(BLDC_Motor* bldc){	//BLDCにcanを送る
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	TxHeader.StdId=bldc->can_id;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a11      	ldr	r2, [pc, #68]	; (8001248 <BLDC_CANTx+0x54>)
 8001202:	6013      	str	r3, [r2, #0]
	TxHeader.IDE = CAN_ID_STD;
 8001204:	4b10      	ldr	r3, [pc, #64]	; (8001248 <BLDC_CANTx+0x54>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 0x08;
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <BLDC_CANTx+0x54>)
 800120c:	2208      	movs	r2, #8
 800120e:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8001210:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <BLDC_CANTx+0x54>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <BLDC_CANTx+0x54>)
 8001218:	2200      	movs	r2, #0
 800121a:	751a      	strb	r2, [r3, #20]
	//HAL_CAN_GetTxMailboxesFreeLevelがあくまで待機
//	printf("StdId:%ld\r\n",robot_arm->axis[whichBLDC].can_id);
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan2)<3){}
 800121c:	bf00      	nop
 800121e:	480b      	ldr	r0, [pc, #44]	; (800124c <BLDC_CANTx+0x58>)
 8001220:	f004 f90d 	bl	800543e <HAL_CAN_GetTxMailboxesFreeLevel>
 8001224:	4603      	mov	r3, r0
 8001226:	2b02      	cmp	r3, #2
 8001228:	d9f9      	bls.n	800121e <BLDC_CANTx+0x2a>
	HAL_CAN_AddTxMessage(&hcan2,&TxHeader,bldc->txcan_data,&TxMailbox);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f103 0242 	add.w	r2, r3, #66	; 0x42
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <BLDC_CANTx+0x5c>)
 8001232:	4905      	ldr	r1, [pc, #20]	; (8001248 <BLDC_CANTx+0x54>)
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <BLDC_CANTx+0x58>)
 8001236:	f004 f827 	bl	8005288 <HAL_CAN_AddTxMessage>
	HAL_Delay(10);
 800123a:	200a      	movs	r0, #10
 800123c:	f003 fde0 	bl	8004e00 <HAL_Delay>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200003f0 	.word	0x200003f0
 800124c:	2000022c 	.word	0x2000022c
 8001250:	20000424 	.word	0x20000424

08001254 <RMD_CANTx>:

//ここからRMD//
void RMD_CANTx(RMD_Motor* rmd){	//BLDCにcanを送る
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	uint8_t complete_flag=0;
 800125c:	2300      	movs	r3, #0
 800125e:	73fb      	strb	r3, [r7, #15]
	TxHeader.StdId=0x141;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <RMD_CANTx+0x58>)
 8001262:	f240 1241 	movw	r2, #321	; 0x141
 8001266:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 8001268:	4b10      	ldr	r3, [pc, #64]	; (80012ac <RMD_CANTx+0x58>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 0x08;
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <RMD_CANTx+0x58>)
 8001270:	2208      	movs	r2, #8
 8001272:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8001274:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <RMD_CANTx+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <RMD_CANTx+0x58>)
 800127c:	2200      	movs	r2, #0
 800127e:	751a      	strb	r2, [r3, #20]
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)<3){}
 8001280:	bf00      	nop
 8001282:	480b      	ldr	r0, [pc, #44]	; (80012b0 <RMD_CANTx+0x5c>)
 8001284:	f004 f8db 	bl	800543e <HAL_CAN_GetTxMailboxesFreeLevel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b02      	cmp	r3, #2
 800128c:	d9f9      	bls.n	8001282 <RMD_CANTx+0x2e>
	HAL_CAN_AddTxMessage(&hcan1,&TxHeader,rmd->txcan_data,&TxMailbox);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <RMD_CANTx+0x60>)
 8001296:	4905      	ldr	r1, [pc, #20]	; (80012ac <RMD_CANTx+0x58>)
 8001298:	4805      	ldr	r0, [pc, #20]	; (80012b0 <RMD_CANTx+0x5c>)
 800129a:	f003 fff5 	bl	8005288 <HAL_CAN_AddTxMessage>
	HAL_Delay(10);
 800129e:	200a      	movs	r0, #10
 80012a0:	f003 fdae 	bl	8004e00 <HAL_Delay>
//	printf("txcan_data[0]:%x\r\n",robot_arm->axis2.txcan_data[0]);
//		printf("RMD_Still_start!\r\n");
}
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200003f0 	.word	0x200003f0
 80012b0:	20000204 	.word	0x20000204
 80012b4:	20000424 	.word	0x20000424

080012b8 <BLDC_calculatuin>:
void BLDC_calculatuin(RobotArm* robot_arm){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	robot_arm->axis[0].target_val  = -(robot_arm->axis[0].target_position);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80012c6:	eef1 7a67 	vneg.f32	s15, s15
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	edc3 7a04 	vstr	s15, [r3, #16]
	robot_arm->axis[1].target_val=(-(robot_arm->axis[1].target_position-M_PI));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f957 	bl	8000588 <__aeabi_f2d>
 80012da:	a35c      	add	r3, pc, #368	; (adr r3, 800144c <BLDC_calculatuin+0x194>)
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	f7fe fff2 	bl	80002c8 <__aeabi_dsub>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	f7ff fc7c 	bl	8000be8 <__aeabi_d2f>
 80012f0:	4603      	mov	r3, r0
 80012f2:	ee07 3a90 	vmov	s15, r3
 80012f6:	eef1 7a67 	vneg.f32	s15, s15
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	robot_arm->axis[0].first_position=robot_arm->axis[0].position;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	639a      	str	r2, [r3, #56]	; 0x38
	robot_arm->axis[1].first_position=robot_arm->axis[1].position;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	robot_arm->axis[0].distance = fabsf(robot_arm->axis[0].target_val - robot_arm->axis[0].first_position);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	ed93 7a04 	vldr	s14, [r3, #16]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800131e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001322:	eef0 7ae7 	vabs.f32	s15, s15
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	robot_arm->axis[1].distance = fabsf(robot_arm->axis[1].target_val - robot_arm->axis[1].first_position);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001338:	ee77 7a67 	vsub.f32	s15, s14, s15
 800133c:	eef0 7ae7 	vabs.f32	s15, s15
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	robot_arm->axis[0].dir = ((robot_arm->axis[0].target_val - robot_arm->axis[0].position)>0)?1:-1;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	ed93 7a04 	vldr	s14, [r3, #16]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001352:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001356:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800135a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135e:	dd02      	ble.n	8001366 <BLDC_calculatuin+0xae>
 8001360:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001364:	e000      	b.n	8001368 <BLDC_calculatuin+0xb0>
 8001366:	4a32      	ldr	r2, [pc, #200]	; (8001430 <BLDC_calculatuin+0x178>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	635a      	str	r2, [r3, #52]	; 0x34
	robot_arm->axis[1].dir = ((robot_arm->axis[1].target_val - robot_arm->axis[1].position)>0)?1:-1;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001384:	dd02      	ble.n	800138c <BLDC_calculatuin+0xd4>
 8001386:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800138a:	e000      	b.n	800138e <BLDC_calculatuin+0xd6>
 800138c:	4a28      	ldr	r2, [pc, #160]	; (8001430 <BLDC_calculatuin+0x178>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	robot_arm->axis[0].flag=0;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	robot_arm->axis[1].flag=0;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	robot_arm->axis[0].end_state = 0;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	robot_arm->axis[1].end_state = 0;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97

	bldc_counter=0;
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <BLDC_calculatuin+0x17c>)
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
	pid_count=0;
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <BLDC_calculatuin+0x180>)
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
	printf("axis[0]first_position : %lf\r\n",robot_arm->axis[0].first_position);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f8dd 	bl	8000588 <__aeabi_f2d>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	481a      	ldr	r0, [pc, #104]	; (800143c <BLDC_calculatuin+0x184>)
 80013d4:	f008 fc92 	bl	8009cfc <iprintf>
	printf("axis[1]first_position : %lf\r\n",robot_arm->axis[1].first_position);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f8d2 	bl	8000588 <__aeabi_f2d>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4815      	ldr	r0, [pc, #84]	; (8001440 <BLDC_calculatuin+0x188>)
 80013ea:	f008 fc87 	bl	8009cfc <iprintf>
	printf("axis[0]target_position : %lf\r\n",robot_arm->axis[0].target_val);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f8c8 	bl	8000588 <__aeabi_f2d>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4811      	ldr	r0, [pc, #68]	; (8001444 <BLDC_calculatuin+0x18c>)
 80013fe:	f008 fc7d 	bl	8009cfc <iprintf>
	printf("axis[1]target_position : %lf\r\n",robot_arm->axis[1].target_val);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f8be 	bl	8000588 <__aeabi_f2d>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	480d      	ldr	r0, [pc, #52]	; (8001448 <BLDC_calculatuin+0x190>)
 8001412:	f008 fc73 	bl	8009cfc <iprintf>
	robot_arm->axis[0].state=1;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	robot_arm->axis[1].state=1;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	bf800000 	.word	0xbf800000
 8001434:	20000428 	.word	0x20000428
 8001438:	2000042c 	.word	0x2000042c
 800143c:	0800dd30 	.word	0x0800dd30
 8001440:	0800dd50 	.word	0x0800dd50
 8001444:	0800dd70 	.word	0x0800dd70
 8001448:	0800dd90 	.word	0x0800dd90
 800144c:	54442d18 	.word	0x54442d18
 8001450:	400921fb 	.word	0x400921fb
 8001454:	00000000 	.word	0x00000000

08001458 <RMD_calculatuin>:
void RMD_calculatuin(RobotArm* robot_arm){
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	robot_arm->axis2.state = 1;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	robot_arm->axis2.end_state = 0;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if(robot_arm->axis2.motion_state==1){
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8001476:	2b01      	cmp	r3, #1
 8001478:	f040 80a2 	bne.w	80015c0 <RMD_calculatuin+0x168>
		int motor_deg;
//		int axis2_l;
		motor_deg=(int)(((-(robot_arm->axis[0].position)+(-(robot_arm->axis[1].position)+M_PI))*180)/M_PI);	//RMDをどれだけ回せば垂直になるか
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001482:	eef1 7a67 	vneg.f32	s15, s15
 8001486:	ee17 3a90 	vmov	r3, s15
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f87c 	bl	8000588 <__aeabi_f2d>
 8001490:	4604      	mov	r4, r0
 8001492:	460d      	mov	r5, r1
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800149a:	eef1 7a67 	vneg.f32	s15, s15
 800149e:	ee17 3a90 	vmov	r3, s15
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f870 	bl	8000588 <__aeabi_f2d>
 80014a8:	a369      	add	r3, pc, #420	; (adr r3, 8001650 <RMD_calculatuin+0x1f8>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	f7fe ff0d 	bl	80002cc <__adddf3>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4620      	mov	r0, r4
 80014b8:	4629      	mov	r1, r5
 80014ba:	f7fe ff07 	bl	80002cc <__adddf3>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4610      	mov	r0, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	4b63      	ldr	r3, [pc, #396]	; (8001658 <RMD_calculatuin+0x200>)
 80014cc:	f7ff f8b4 	bl	8000638 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	a35d      	add	r3, pc, #372	; (adr r3, 8001650 <RMD_calculatuin+0x1f8>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7ff f9d5 	bl	800088c <__aeabi_ddiv>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff fb55 	bl	8000b98 <__aeabi_d2iz>
 80014ee:	4603      	mov	r3, r0
 80014f0:	60fb      	str	r3, [r7, #12]
		robot_arm->axis2.zero=(int)round(robot_arm->axis2.firstpos+100*motor_deg);	//RMDの垂直ポディション
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2264      	movs	r2, #100	; 0x64
 80014fc:	fb02 f303 	mul.w	r3, r2, r3
 8001500:	ee07 3a90 	vmov	s15, r3
 8001504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150c:	ee17 0a90 	vmov	r0, s15
 8001510:	f7ff f83a 	bl	8000588 <__aeabi_f2d>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	ec43 2b10 	vmov	d0, r2, r3
 800151c:	f00a ff26 	bl	800c36c <round>
 8001520:	ec53 2b10 	vmov	r2, r3, d0
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	f7ff fb36 	bl	8000b98 <__aeabi_d2iz>
 800152c:	4602      	mov	r2, r0
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		printf("motor_deg:%d\r\n",motor_deg);
 8001534:	68f9      	ldr	r1, [r7, #12]
 8001536:	4849      	ldr	r0, [pc, #292]	; (800165c <RMD_calculatuin+0x204>)
 8001538:	f008 fbe0 	bl	8009cfc <iprintf>
		printf("RMDzero:%d\r\n",robot_arm->axis2.zero);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001542:	4619      	mov	r1, r3
 8001544:	4846      	ldr	r0, [pc, #280]	; (8001660 <RMD_calculatuin+0x208>)
 8001546:	f008 fbd9 	bl	8009cfc <iprintf>
//		robot_arm->axis2.zero=9000;
		printf("input_target_position:%d\r\n",robot_arm->axis2.target_position);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001550:	4619      	mov	r1, r3
 8001552:	4844      	ldr	r0, [pc, #272]	; (8001664 <RMD_calculatuin+0x20c>)
 8001554:	f008 fbd2 	bl	8009cfc <iprintf>
		robot_arm->axis2.target_position = robot_arm->axis2.zero+(-90*100) + robot_arm->axis2.target_position;	//垂直から90deg引いた値、水平を0degとしてそこから入力された角度だけRMDを回転させる
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800155e:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 8001562:	3b28      	subs	r3, #40	; 0x28
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 800156a:	441a      	add	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		printf("target_position:%d\r\n",robot_arm->axis2.target_position);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001578:	4619      	mov	r1, r3
 800157a:	483b      	ldr	r0, [pc, #236]	; (8001668 <RMD_calculatuin+0x210>)
 800157c:	f008 fbbe 	bl	8009cfc <iprintf>
		robot_arm->axis2.txcan_data[0] = 0xA4;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	22a4      	movs	r2, #164	; 0xa4
 8001584:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		robot_arm->axis2.txcan_data[2] = 0x64;	//speed low
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2264      	movs	r2, #100	; 0x64
 800158c:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
		robot_arm->axis2.txcan_data[3] = 0x00;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		robot_arm->axis2.txcan_data[4] =(robot_arm->axis2.target_position&0xFF);	//poslow
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		robot_arm->axis2.txcan_data[5] =(robot_arm->axis2.target_position>>8)&0xFF;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80015ac:	121b      	asrs	r3, r3, #8
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
		robot_arm->axis2.motion_state=0;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
		robot_arm->axis2.txcan_data[0] = 0x91;
		robot_arm->axis2.txcan_data[6] = robot_arm->axis2.offset&0xFF;	//position_offset
		robot_arm->axis2.txcan_data[7] = robot_arm->axis2.offset>>8;
		robot_arm->axis2.offset_state=0;
	}
}
 80015be:	e041      	b.n	8001644 <RMD_calculatuin+0x1ec>
	}else if(robot_arm->axis2.PID_state==1){
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d120      	bne.n	800160c <RMD_calculatuin+0x1b4>
		robot_arm->axis2.txcan_data[0] = 0x32;	//PI設定
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2232      	movs	r2, #50	; 0x32
 80015ce:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		robot_arm->axis2.txcan_data[2] = 0x64;	//anglePidKp
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2264      	movs	r2, #100	; 0x64
 80015d6:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
		robot_arm->axis2.txcan_data[3] = 0xC8;	//anglePidKi
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	22c8      	movs	r2, #200	; 0xc8
 80015de:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		robot_arm->axis2.txcan_data[4] = 0x64;	//speedPidKp
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2264      	movs	r2, #100	; 0x64
 80015e6:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		robot_arm->axis2.txcan_data[5] = 0x14;	//speedPidKi
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2214      	movs	r2, #20
 80015ee:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
		robot_arm->axis2.txcan_data[6] = 0x50;	//iqPidKp
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2250      	movs	r2, #80	; 0x50
 80015f6:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		robot_arm->axis2.txcan_data[7] = 0x1E;	//iqPidKi
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	221e      	movs	r2, #30
 80015fe:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
		robot_arm->axis2.PID_state=0;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
}
 800160a:	e01b      	b.n	8001644 <RMD_calculatuin+0x1ec>
	}else if(robot_arm->axis2.offset_state==1){
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8001612:	2b01      	cmp	r3, #1
 8001614:	d116      	bne.n	8001644 <RMD_calculatuin+0x1ec>
		robot_arm->axis2.txcan_data[0] = 0x91;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2291      	movs	r2, #145	; 0x91
 800161a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		robot_arm->axis2.txcan_data[6] = robot_arm->axis2.offset&0xFF;	//position_offset
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001624:	b2da      	uxtb	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		robot_arm->axis2.txcan_data[7] = robot_arm->axis2.offset>>8;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001632:	121b      	asrs	r3, r3, #8
 8001634:	b2da      	uxtb	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
		robot_arm->axis2.offset_state=0;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bdb0      	pop	{r4, r5, r7, pc}
 800164c:	f3af 8000 	nop.w
 8001650:	54442d18 	.word	0x54442d18
 8001654:	400921fb 	.word	0x400921fb
 8001658:	40668000 	.word	0x40668000
 800165c:	0800ddb0 	.word	0x0800ddb0
 8001660:	0800ddc0 	.word	0x0800ddc0
 8001664:	0800ddd0 	.word	0x0800ddd0
 8001668:	0800ddec 	.word	0x0800ddec
 800166c:	00000000 	.word	0x00000000

08001670 <SendAll>:
//canにて全ての関節のデータを送信//
void SendAll(RobotArm* robot_arm)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	if(!(motion_stop_flag)){
 8001678:	4ba7      	ldr	r3, [pc, #668]	; (8001918 <SendAll+0x2a8>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	f040 82a3 	bne.w	8001bc8 <SendAll+0x558>
		if(robot_arm->axis[0].state_change == 1 && robot_arm->axis[1].state_change == 1){	//モーターONorOFF時に使用
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001688:	2b01      	cmp	r3, #1
 800168a:	d14c      	bne.n	8001726 <SendAll+0xb6>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001692:	2b01      	cmp	r3, #1
 8001694:	d147      	bne.n	8001726 <SendAll+0xb6>
			if(robot_arm->axis[0].state == 1){	//アームモーター1のON/OFF
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800169c:	2b01      	cmp	r3, #1
 800169e:	d105      	bne.n	80016ac <SendAll+0x3c>
				EnterMotorMode(robot_arm->axis[0].txcan_data);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3342      	adds	r3, #66	; 0x42
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 fae1 	bl	8001c6c <EnterMotorMode>
 80016aa:	e004      	b.n	80016b6 <SendAll+0x46>
			}else{
				ExitMotorMode(robot_arm->axis[0].txcan_data);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3342      	adds	r3, #66	; 0x42
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 fb04 	bl	8001cbe <ExitMotorMode>
			}
			robot_arm->axis[0].can_id=0x01;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
			BLDC_CANTx(&robot_arm->axis[0]);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fd98 	bl	80011f4 <BLDC_CANTx>
			if(robot_arm->axis[1].state == 1){	//アームモーターのON/OFF
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d105      	bne.n	80016da <SendAll+0x6a>
				EnterMotorMode(robot_arm->axis[1].txcan_data);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	338e      	adds	r3, #142	; 0x8e
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 faca 	bl	8001c6c <EnterMotorMode>
 80016d8:	e004      	b.n	80016e4 <SendAll+0x74>
			}else{
				ExitMotorMode(robot_arm->axis[1].txcan_data);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	338e      	adds	r3, #142	; 0x8e
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 faed 	bl	8001cbe <ExitMotorMode>
			}
			robot_arm->axis[1].can_id=0x02;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2202      	movs	r2, #2
 80016e8:	64da      	str	r2, [r3, #76]	; 0x4c
			BLDC_CANTx(&robot_arm->axis[1]);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	334c      	adds	r3, #76	; 0x4c
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fd80 	bl	80011f4 <BLDC_CANTx>
			robot_arm->axis[0].state = 0;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			robot_arm->axis[1].state = 0;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
			robot_arm->axis[0].state_change = 0;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			robot_arm->axis[1].state_change = 0;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
			robot_arm->axis[0].end_state = 1;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
			robot_arm->axis[1].end_state = 1;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 8001724:	e26a      	b.n	8001bfc <SendAll+0x58c>
		}else if(robot_arm->axis[0].state == 1 && robot_arm->axis[1].state == 1){	//M1とM2を動かす時に使用
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800172c:	2b01      	cmp	r3, #1
 800172e:	f040 819c 	bne.w	8001a6a <SendAll+0x3fa>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001738:	2b01      	cmp	r3, #1
 800173a:	f040 8196 	bne.w	8001a6a <SendAll+0x3fa>
			float far_dis,near_dis;
			float far_firstpos,near_firstpos;
			uint32_t BLDC_select_far,BLDC_select_near;
			float far_dis_dir,near_dis_dir;
			if(robot_arm->axis[0].distance  > robot_arm->axis[1].distance ){
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800174a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800174e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001752:	dd04      	ble.n	800175e <SendAll+0xee>
				BLDC_select_far=0;
 8001754:	2300      	movs	r3, #0
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
				BLDC_select_near=1;
 8001758:	2301      	movs	r3, #1
 800175a:	623b      	str	r3, [r7, #32]
 800175c:	e00e      	b.n	800177c <SendAll+0x10c>
			}else if(robot_arm->axis[0].distance  < robot_arm->axis[1].distance ){
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800176a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800176e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001772:	d503      	bpl.n	800177c <SendAll+0x10c>
				BLDC_select_far=1;
 8001774:	2301      	movs	r3, #1
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
				BLDC_select_near=0;
 8001778:	2300      	movs	r3, #0
 800177a:	623b      	str	r3, [r7, #32]
			}
			far_dis=robot_arm->axis[BLDC_select_far].distance;
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	214c      	movs	r1, #76	; 0x4c
 8001782:	fb01 f303 	mul.w	r3, r1, r3
 8001786:	4413      	add	r3, r2
 8001788:	332c      	adds	r3, #44	; 0x2c
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	61fb      	str	r3, [r7, #28]
			near_dis=robot_arm->axis[BLDC_select_near].distance;
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6a3b      	ldr	r3, [r7, #32]
 8001792:	214c      	movs	r1, #76	; 0x4c
 8001794:	fb01 f303 	mul.w	r3, r1, r3
 8001798:	4413      	add	r3, r2
 800179a:	332c      	adds	r3, #44	; 0x2c
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	61bb      	str	r3, [r7, #24]
			far_dis_dir=robot_arm->axis[BLDC_select_far].dir;
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	214c      	movs	r1, #76	; 0x4c
 80017a6:	fb01 f303 	mul.w	r3, r1, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	3334      	adds	r3, #52	; 0x34
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	617b      	str	r3, [r7, #20]
			near_dis_dir=robot_arm->axis[BLDC_select_near].dir;
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	214c      	movs	r1, #76	; 0x4c
 80017b8:	fb01 f303 	mul.w	r3, r1, r3
 80017bc:	4413      	add	r3, r2
 80017be:	3334      	adds	r3, #52	; 0x34
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	613b      	str	r3, [r7, #16]
			far_firstpos=robot_arm->axis[BLDC_select_far].first_position;
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	214c      	movs	r1, #76	; 0x4c
 80017ca:	fb01 f303 	mul.w	r3, r1, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	3338      	adds	r3, #56	; 0x38
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	60fb      	str	r3, [r7, #12]
			near_firstpos=robot_arm->axis[BLDC_select_near].first_position;
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	214c      	movs	r1, #76	; 0x4c
 80017dc:	fb01 f303 	mul.w	r3, r1, r3
 80017e0:	4413      	add	r3, r2
 80017e2:	3338      	adds	r3, #56	; 0x38
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	60bb      	str	r3, [r7, #8]
			if (far_dis>(float)count_rad){
 80017e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80017ec:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800191c <SendAll+0x2ac>
 80017f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f8:	f340 8098 	ble.w	800192c <SendAll+0x2bc>
				bldc_counter+=(far_dis_dir*(float)count_rad);
 80017fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001800:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800191c <SendAll+0x2ac>
 8001804:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001808:	4b45      	ldr	r3, [pc, #276]	; (8001920 <SendAll+0x2b0>)
 800180a:	edd3 7a00 	vldr	s15, [r3]
 800180e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001812:	4b43      	ldr	r3, [pc, #268]	; (8001920 <SendAll+0x2b0>)
 8001814:	edc3 7a00 	vstr	s15, [r3]
				if(fabsf(bldc_counter)<far_dis){
 8001818:	4b41      	ldr	r3, [pc, #260]	; (8001920 <SendAll+0x2b0>)
 800181a:	edd3 7a00 	vldr	s15, [r3]
 800181e:	eef0 7ae7 	vabs.f32	s15, s15
 8001822:	ed97 7a07 	vldr	s14, [r7, #28]
 8001826:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800182a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182e:	dd69      	ble.n	8001904 <SendAll+0x294>
					pack_cmd(&robot_arm->axis[BLDC_select_far],far_firstpos+bldc_counter, 0.0, Motion_KP, Motion_KI, 0.0);	//現在の場所の所得
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	224c      	movs	r2, #76	; 0x4c
 8001834:	fb02 f303 	mul.w	r3, r2, r3
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	4413      	add	r3, r2
 800183c:	4a38      	ldr	r2, [pc, #224]	; (8001920 <SendAll+0x2b0>)
 800183e:	ed92 7a00 	vldr	s14, [r2]
 8001842:	edd7 7a03 	vldr	s15, [r7, #12]
 8001846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800184a:	ed9f 2a36 	vldr	s4, [pc, #216]	; 8001924 <SendAll+0x2b4>
 800184e:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8001852:	ed9f 1a35 	vldr	s2, [pc, #212]	; 8001928 <SendAll+0x2b8>
 8001856:	eddf 0a33 	vldr	s1, [pc, #204]	; 8001924 <SendAll+0x2b4>
 800185a:	eeb0 0a67 	vmov.f32	s0, s15
 800185e:	4618      	mov	r0, r3
 8001860:	f000 fa56 	bl	8001d10 <pack_cmd>
					BLDC_CANTx(&robot_arm->axis[BLDC_select_far]);
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	224c      	movs	r2, #76	; 0x4c
 8001868:	fb02 f303 	mul.w	r3, r2, r3
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	4413      	add	r3, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fcbf 	bl	80011f4 <BLDC_CANTx>
					unpack_reply(&robot_arm->axis[BLDC_select_far]);
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	224c      	movs	r2, #76	; 0x4c
 800187a:	fb02 f303 	mul.w	r3, r2, r3
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	4618      	mov	r0, r3
 8001884:	f000 fb24 	bl	8001ed0 <unpack_reply>
					pack_cmd(&robot_arm->axis[BLDC_select_near],near_firstpos+fabsf(bldc_counter)*(near_dis/far_dis)*near_dis_dir, 0.0, Motion_KP, Motion_KI, 0.0);	//現在の場所の所得
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	224c      	movs	r2, #76	; 0x4c
 800188c:	fb02 f303 	mul.w	r3, r2, r3
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	4413      	add	r3, r2
 8001894:	4a22      	ldr	r2, [pc, #136]	; (8001920 <SendAll+0x2b0>)
 8001896:	edd2 7a00 	vldr	s15, [r2]
 800189a:	eeb0 7ae7 	vabs.f32	s14, s15
 800189e:	ed97 6a06 	vldr	s12, [r7, #24]
 80018a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80018a6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80018aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80018b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80018ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018be:	ed9f 2a19 	vldr	s4, [pc, #100]	; 8001924 <SendAll+0x2b4>
 80018c2:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 80018c6:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8001928 <SendAll+0x2b8>
 80018ca:	eddf 0a16 	vldr	s1, [pc, #88]	; 8001924 <SendAll+0x2b4>
 80018ce:	eeb0 0a67 	vmov.f32	s0, s15
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 fa1c 	bl	8001d10 <pack_cmd>
					BLDC_CANTx(&robot_arm->axis[BLDC_select_near]);
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	224c      	movs	r2, #76	; 0x4c
 80018dc:	fb02 f303 	mul.w	r3, r2, r3
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	4413      	add	r3, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fc85 	bl	80011f4 <BLDC_CANTx>
					unpack_reply(&robot_arm->axis[BLDC_select_near]);
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	224c      	movs	r2, #76	; 0x4c
 80018ee:	fb02 f303 	mul.w	r3, r2, r3
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 faea 	bl	8001ed0 <unpack_reply>
					sent_position(robot_arm);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff fb7f 	bl	8001000 <sent_position>
 8001902:	e01b      	b.n	800193c <SendAll+0x2cc>
				}else{
					robot_arm->axis[0].flag= 1;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					robot_arm->axis[1].flag= 1;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
 8001914:	e012      	b.n	800193c <SendAll+0x2cc>
 8001916:	bf00      	nop
 8001918:	200003c3 	.word	0x200003c3
 800191c:	3d4ccccd 	.word	0x3d4ccccd
 8001920:	20000428 	.word	0x20000428
 8001924:	00000000 	.word	0x00000000
 8001928:	42480000 	.word	0x42480000
				}
			}else{
				robot_arm->axis[0].flag= 1;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				robot_arm->axis[1].flag= 1;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
			}
			if(robot_arm->axis[0].flag==1&&robot_arm->axis[1].flag==1){
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001942:	2b01      	cmp	r3, #1
 8001944:	f040 8159 	bne.w	8001bfa <SendAll+0x58a>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800194e:	2b01      	cmp	r3, #1
 8001950:	f040 8153 	bne.w	8001bfa <SendAll+0x58a>
				pid_count++;
 8001954:	4bb0      	ldr	r3, [pc, #704]	; (8001c18 <SendAll+0x5a8>)
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800195e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001962:	4bad      	ldr	r3, [pc, #692]	; (8001c18 <SendAll+0x5a8>)
 8001964:	edc3 7a00 	vstr	s15, [r3]
				if((Motion_KP+pid_count*10 <= MAX_KP) && !motion_stop_flag){
 8001968:	4bab      	ldr	r3, [pc, #684]	; (8001c18 <SendAll+0x5a8>)
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001972:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001976:	ee17 0a90 	vmov	r0, s15
 800197a:	f7fe fe05 	bl	8000588 <__aeabi_f2d>
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	4ba6      	ldr	r3, [pc, #664]	; (8001c1c <SendAll+0x5ac>)
 8001984:	f7fe fca2 	bl	80002cc <__adddf3>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	4ba2      	ldr	r3, [pc, #648]	; (8001c20 <SendAll+0x5b0>)
 8001996:	f7ff f8cb 	bl	8000b30 <__aeabi_dcmple>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d050      	beq.n	8001a42 <SendAll+0x3d2>
 80019a0:	4ba0      	ldr	r3, [pc, #640]	; (8001c24 <SendAll+0x5b4>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d14c      	bne.n	8001a42 <SendAll+0x3d2>
					pack_cmd(&robot_arm->axis[0],robot_arm->axis[0].target_val, 0.0, Motion_KP+pid_count*10, Motion_KI, 0.0);	//現在の場所の所得
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	ed93 7a04 	vldr	s14, [r3, #16]
 80019b0:	4b99      	ldr	r3, [pc, #612]	; (8001c18 <SendAll+0x5a8>)
 80019b2:	edd3 7a00 	vldr	s15, [r3]
 80019b6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80019ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019be:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8001c28 <SendAll+0x5b8>
 80019c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80019c6:	ed9f 2a99 	vldr	s4, [pc, #612]	; 8001c2c <SendAll+0x5bc>
 80019ca:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 80019ce:	eeb0 1a67 	vmov.f32	s2, s15
 80019d2:	eddf 0a96 	vldr	s1, [pc, #600]	; 8001c2c <SendAll+0x5bc>
 80019d6:	eeb0 0a47 	vmov.f32	s0, s14
 80019da:	4610      	mov	r0, r2
 80019dc:	f000 f998 	bl	8001d10 <pack_cmd>
					BLDC_CANTx(&robot_arm->axis[0]);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fc06 	bl	80011f4 <BLDC_CANTx>
					unpack_reply(&robot_arm->axis[0]);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 fa70 	bl	8001ed0 <unpack_reply>
					pack_cmd(&robot_arm->axis[1],robot_arm->axis[1].target_val, 0.0, Motion_KP+pid_count*10, Motion_KI, 0.0);	//現在の場所の所得
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80019fc:	4b86      	ldr	r3, [pc, #536]	; (8001c18 <SendAll+0x5a8>)
 80019fe:	edd3 7a00 	vldr	s15, [r3]
 8001a02:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001a06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a0a:	eddf 6a87 	vldr	s13, [pc, #540]	; 8001c28 <SendAll+0x5b8>
 8001a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a12:	ed9f 2a86 	vldr	s4, [pc, #536]	; 8001c2c <SendAll+0x5bc>
 8001a16:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8001a1a:	eeb0 1a67 	vmov.f32	s2, s15
 8001a1e:	eddf 0a83 	vldr	s1, [pc, #524]	; 8001c2c <SendAll+0x5bc>
 8001a22:	eeb0 0a47 	vmov.f32	s0, s14
 8001a26:	4610      	mov	r0, r2
 8001a28:	f000 f972 	bl	8001d10 <pack_cmd>
					BLDC_CANTx(&robot_arm->axis[1]);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	334c      	adds	r3, #76	; 0x4c
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fbdf 	bl	80011f4 <BLDC_CANTx>
					unpack_reply(&robot_arm->axis[1]);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	334c      	adds	r3, #76	; 0x4c
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 fa48 	bl	8001ed0 <unpack_reply>
		}else if(robot_arm->axis[0].state == 1 && robot_arm->axis[1].state == 1){	//M1とM2を動かす時に使用
 8001a40:	e0db      	b.n	8001bfa <SendAll+0x58a>
				}else{
					sent_position(robot_arm);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fadc 	bl	8001000 <sent_position>
					robot_arm->axis[0].state = 0;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
					robot_arm->axis[1].state = 0;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
					robot_arm->axis[0].end_state = 1;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
					robot_arm->axis[1].end_state = 1;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
		}else if(robot_arm->axis[0].state == 1 && robot_arm->axis[1].state == 1){	//M1とM2を動かす時に使用
 8001a68:	e0c7      	b.n	8001bfa <SendAll+0x58a>
				}
			}
		}else if(robot_arm->axis2.state==1){	//RMDの動作
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	f040 80c3 	bne.w	8001bfc <SendAll+0x58c>
			robot_arm->axis2.reply=((RMDRx_can_data[6] & 0xFF)|((RMDRx_can_data[7] & 0xFF) << 8));
 8001a76:	4b6e      	ldr	r3, [pc, #440]	; (8001c30 <SendAll+0x5c0>)
 8001a78:	799b      	ldrb	r3, [r3, #6]
 8001a7a:	b21a      	sxth	r2, r3
 8001a7c:	4b6c      	ldr	r3, [pc, #432]	; (8001c30 <SendAll+0x5c0>)
 8001a7e:	79db      	ldrb	r3, [r3, #7]
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	4313      	orrs	r3, r2
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
			if(robot_arm->axis2.txcan_data[0]==0xA4){
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001a96:	2ba4      	cmp	r3, #164	; 0xa4
 8001a98:	d141      	bne.n	8001b1e <SendAll+0x4ae>
				robot_arm->axis2.comparison = (int)round((robot_arm->axis2.reply/65535.0)*36000.0);	//返ってきたエンコーダー値をdegに変換
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fd5f 	bl	8000564 <__aeabi_i2d>
 8001aa6:	a358      	add	r3, pc, #352	; (adr r3, 8001c08 <SendAll+0x598>)
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	f7fe feee 	bl	800088c <__aeabi_ddiv>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	a355      	add	r3, pc, #340	; (adr r3, 8001c10 <SendAll+0x5a0>)
 8001aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abe:	f7fe fdbb 	bl	8000638 <__aeabi_dmul>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	ec43 2b17 	vmov	d7, r2, r3
 8001aca:	eeb0 0a47 	vmov.f32	s0, s14
 8001ace:	eef0 0a67 	vmov.f32	s1, s15
 8001ad2:	f00a fc4b 	bl	800c36c <round>
 8001ad6:	ec53 2b10 	vmov	r2, r3, d0
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7ff f85b 	bl	8000b98 <__aeabi_d2iz>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
				robot_arm->axis2.target_val = robot_arm->axis2.target_position;	//0x91使用する場合
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
				if(robot_arm->axis2.target_val >= 36000){
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8001b00:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d92a      	bls.n	8001b5e <SendAll+0x4ee>
					robot_arm->axis2.comparison=robot_arm->axis2.comparison+36000;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 8001b0e:	f5a3 43e6 	sub.w	r3, r3, #29440	; 0x7300
 8001b12:	3b60      	subs	r3, #96	; 0x60
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 8001b1c:	e01f      	b.n	8001b5e <SendAll+0x4ee>
				}
	//			robot_arm->axis2.target_val=robot_arm->axis2.target_position + robot_arm->axis2.firstpos + robot_arm->axis2.offset;	//0x91使用しない場合
		//		printf("rmddis:%d\r\n",robot_arm->axis2.target_val-robot_arm->axis2.comparison);
//				printf("motion_target_val : %d\r\n",robot_arm->axis2.target_val);
//				printf("motion_comparison : %d\r\n",robot_arm->axis2.comparison);
			}else if(robot_arm->axis2.txcan_data[0]==0x91){
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001b24:	2b91      	cmp	r3, #145	; 0x91
 8001b26:	d11a      	bne.n	8001b5e <SendAll+0x4ee>
				robot_arm->axis2.comparison = robot_arm->axis2.reply;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
				robot_arm->axis2.target_val = robot_arm->axis2.offset;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
				printf("offset_target_val : %d\r\n",robot_arm->axis2.target_val);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	483a      	ldr	r0, [pc, #232]	; (8001c34 <SendAll+0x5c4>)
 8001b4c:	f008 f8d6 	bl	8009cfc <iprintf>
				printf("offset_comparison : %d\r\n",robot_arm->axis2.comparison);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 8001b56:	4619      	mov	r1, r3
 8001b58:	4837      	ldr	r0, [pc, #220]	; (8001c38 <SendAll+0x5c8>)
 8001b5a:	f008 f8cf 	bl	8009cfc <iprintf>
			}
			RMD_CANTx(&robot_arm->axis2);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3398      	adds	r3, #152	; 0x98
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fb76 	bl	8001254 <RMD_CANTx>
			if((abs(robot_arm->axis2.target_val - robot_arm->axis2.comparison)<10)){
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8001b6e:	461a      	mov	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	f113 0f09 	cmn.w	r3, #9
 8001b7c:	db3e      	blt.n	8001bfc <SendAll+0x58c>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8001b84:	461a      	mov	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b09      	cmp	r3, #9
 8001b90:	dc34      	bgt.n	8001bfc <SendAll+0x58c>
				robot_arm->axis2.state=0;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
				robot_arm->axis2.end_state=1;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
				robot_arm->axis2.motion_state=0;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
				robot_arm->axis2.offset_state=0;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				memset(robot_arm->axis2.txcan_data, 0, sizeof(robot_arm->axis2.txcan_data));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	33c4      	adds	r3, #196	; 0xc4
 8001bb6:	2208      	movs	r2, #8
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f007 fc2c 	bl	8009418 <memset>
				printf("RMD_OK!\r\n");
 8001bc0:	481e      	ldr	r0, [pc, #120]	; (8001c3c <SendAll+0x5cc>)
 8001bc2:	f008 f921 	bl	8009e08 <puts>
		robot_arm->axis2.state=0;
		robot_arm->axis[0].end_state = 1;
		robot_arm->axis[1].end_state = 1;
		robot_arm->axis2.end_state=1;
	}
}
 8001bc6:	e019      	b.n	8001bfc <SendAll+0x58c>
		robot_arm->axis[0].state = 0;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		robot_arm->axis[1].state = 0;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		robot_arm->axis2.state=0;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		robot_arm->axis[0].end_state = 1;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		robot_arm->axis[1].end_state = 1;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
		robot_arm->axis2.end_state=1;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
}
 8001bf8:	e000      	b.n	8001bfc <SendAll+0x58c>
		}else if(robot_arm->axis[0].state == 1 && robot_arm->axis[1].state == 1){	//M1とM2を動かす時に使用
 8001bfa:	bf00      	nop
}
 8001bfc:	bf00      	nop
 8001bfe:	3728      	adds	r7, #40	; 0x28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	f3af 8000 	nop.w
 8001c08:	00000000 	.word	0x00000000
 8001c0c:	40efffe0 	.word	0x40efffe0
 8001c10:	00000000 	.word	0x00000000
 8001c14:	40e19400 	.word	0x40e19400
 8001c18:	2000042c 	.word	0x2000042c
 8001c1c:	40490000 	.word	0x40490000
 8001c20:	406f4000 	.word	0x406f4000
 8001c24:	200003c3 	.word	0x200003c3
 8001c28:	42480000 	.word	0x42480000
 8001c2c:	00000000 	.word	0x00000000
 8001c30:	20000430 	.word	0x20000430
 8001c34:	0800de04 	.word	0x0800de04
 8001c38:	0800de20 	.word	0x0800de20
 8001c3c:	0800de3c 	.word	0x0800de3c

08001c40 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
    if (htim == &htim2){
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a06      	ldr	r2, [pc, #24]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d104      	bne.n	8001c5a <HAL_TIM_PeriodElapsedCallback+0x1a>
    	RobotArm *robot_arm= &ra;
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001c52:	60fb      	str	r3, [r7, #12]
    	SendAll(robot_arm);
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f7ff fd0b 	bl	8001670 <SendAll>
    }
}
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000254 	.word	0x20000254
 8001c68:	20000928 	.word	0x20000928

08001c6c <EnterMotorMode>:

//BLDC ON
void EnterMotorMode(uint8_t *can_data){
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	can_data[0] = 0xFF;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	22ff      	movs	r2, #255	; 0xff
 8001c78:	701a      	strb	r2, [r3, #0]
	can_data[1] = 0xFF;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	22ff      	movs	r2, #255	; 0xff
 8001c80:	701a      	strb	r2, [r3, #0]
	can_data[2] = 0xFF;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3302      	adds	r3, #2
 8001c86:	22ff      	movs	r2, #255	; 0xff
 8001c88:	701a      	strb	r2, [r3, #0]
	can_data[3] = 0xFF;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3303      	adds	r3, #3
 8001c8e:	22ff      	movs	r2, #255	; 0xff
 8001c90:	701a      	strb	r2, [r3, #0]
	can_data[4] = 0xFF;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3304      	adds	r3, #4
 8001c96:	22ff      	movs	r2, #255	; 0xff
 8001c98:	701a      	strb	r2, [r3, #0]
	can_data[5] = 0xFF;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3305      	adds	r3, #5
 8001c9e:	22ff      	movs	r2, #255	; 0xff
 8001ca0:	701a      	strb	r2, [r3, #0]
	can_data[6] = 0xFF;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3306      	adds	r3, #6
 8001ca6:	22ff      	movs	r2, #255	; 0xff
 8001ca8:	701a      	strb	r2, [r3, #0]
	can_data[7] = 0xFC;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3307      	adds	r3, #7
 8001cae:	22fc      	movs	r2, #252	; 0xfc
 8001cb0:	701a      	strb	r2, [r3, #0]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <ExitMotorMode>:

//BLDC OFF
void ExitMotorMode(uint8_t *can_data){
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
	can_data[0] = 0xFF;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	22ff      	movs	r2, #255	; 0xff
 8001cca:	701a      	strb	r2, [r3, #0]
	can_data[1] = 0xFF;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	22ff      	movs	r2, #255	; 0xff
 8001cd2:	701a      	strb	r2, [r3, #0]
	can_data[2] = 0xFF;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	22ff      	movs	r2, #255	; 0xff
 8001cda:	701a      	strb	r2, [r3, #0]
	can_data[3] = 0xFF;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3303      	adds	r3, #3
 8001ce0:	22ff      	movs	r2, #255	; 0xff
 8001ce2:	701a      	strb	r2, [r3, #0]
	can_data[4] = 0xFF;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	22ff      	movs	r2, #255	; 0xff
 8001cea:	701a      	strb	r2, [r3, #0]
	can_data[5] = 0xFF;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3305      	adds	r3, #5
 8001cf0:	22ff      	movs	r2, #255	; 0xff
 8001cf2:	701a      	strb	r2, [r3, #0]
	can_data[6] = 0xFF;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3306      	adds	r3, #6
 8001cf8:	22ff      	movs	r2, #255	; 0xff
 8001cfa:	701a      	strb	r2, [r3, #0]
	can_data[7] = 0xFD;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3307      	adds	r3, #7
 8001d00:	22fd      	movs	r2, #253	; 0xfd
 8001d02:	701a      	strb	r2, [r3, #0]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <pack_cmd>:
//void pack_cmd(CANMessage * msg, float _p_des, float _v_des, float _kp, float _kd, float _t_ff){
void pack_cmd(BLDC_Motor* bldc,float _p_des, float _v_des, float _kp, float _kd, float _t_ff){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08e      	sub	sp, #56	; 0x38
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6178      	str	r0, [r7, #20]
 8001d18:	ed87 0a04 	vstr	s0, [r7, #16]
 8001d1c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001d20:	ed87 1a02 	vstr	s2, [r7, #8]
 8001d24:	edc7 1a01 	vstr	s3, [r7, #4]
 8001d28:	ed87 2a00 	vstr	s4, [r7]
	/// limit data to be within bounds ///
	float p_des = fminf(fmaxf(P_MIN, _p_des), P_MAX);
 8001d2c:	edd7 0a04 	vldr	s1, [r7, #16]
 8001d30:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 8001d34:	f002 fc07 	bl	8004546 <fmaxf>
 8001d38:	eef0 7a40 	vmov.f32	s15, s0
 8001d3c:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 8001d40:	eeb0 0a67 	vmov.f32	s0, s15
 8001d44:	f002 fc1b 	bl	800457e <fminf>
 8001d48:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	float v_des = fminf(fmaxf(V_MIN, _v_des), V_MAX);
 8001d4c:	edd7 0a03 	vldr	s1, [r7, #12]
 8001d50:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8001ec0 <pack_cmd+0x1b0>
 8001d54:	f002 fbf7 	bl	8004546 <fmaxf>
 8001d58:	eef0 7a40 	vmov.f32	s15, s0
 8001d5c:	eddf 0a59 	vldr	s1, [pc, #356]	; 8001ec4 <pack_cmd+0x1b4>
 8001d60:	eeb0 0a67 	vmov.f32	s0, s15
 8001d64:	f002 fc0b 	bl	800457e <fminf>
 8001d68:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	float kp = fminf(fmaxf(KP_MIN, _kp), KP_MAX);
 8001d6c:	edd7 0a02 	vldr	s1, [r7, #8]
 8001d70:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8001ec8 <pack_cmd+0x1b8>
 8001d74:	f002 fbe7 	bl	8004546 <fmaxf>
 8001d78:	eef0 7a40 	vmov.f32	s15, s0
 8001d7c:	eddf 0a53 	vldr	s1, [pc, #332]	; 8001ecc <pack_cmd+0x1bc>
 8001d80:	eeb0 0a67 	vmov.f32	s0, s15
 8001d84:	f002 fbfb 	bl	800457e <fminf>
 8001d88:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float kd = fminf(fmaxf(KD_MIN, _kd), KD_MAX);
 8001d8c:	edd7 0a01 	vldr	s1, [r7, #4]
 8001d90:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8001ec8 <pack_cmd+0x1b8>
 8001d94:	f002 fbd7 	bl	8004546 <fmaxf>
 8001d98:	eef0 7a40 	vmov.f32	s15, s0
 8001d9c:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001da0:	eeb0 0a67 	vmov.f32	s0, s15
 8001da4:	f002 fbeb 	bl	800457e <fminf>
 8001da8:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	float t_ff = fminf(fmaxf(T_MIN, _t_ff), T_MAX);
 8001dac:	edd7 0a00 	vldr	s1, [r7]
 8001db0:	eebb 0a02 	vmov.f32	s0, #178	; 0xc1900000 -18.0
 8001db4:	f002 fbc7 	bl	8004546 <fmaxf>
 8001db8:	eef0 7a40 	vmov.f32	s15, s0
 8001dbc:	eef3 0a02 	vmov.f32	s1, #50	; 0x41900000  18.0
 8001dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc4:	f002 fbdb 	bl	800457e <fminf>
 8001dc8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	/// convert floats to unsigned ints ///
	uint16_t p_int = float_to_uint(p_des, P_MIN, P_MAX, 16);
 8001dcc:	2010      	movs	r0, #16
 8001dce:	eeb2 1a09 	vmov.f32	s2, #41	; 0x41480000  12.5
 8001dd2:	eefa 0a09 	vmov.f32	s1, #169	; 0xc1480000 -12.5
 8001dd6:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001dda:	f002 fbec 	bl	80045b6 <float_to_uint>
 8001dde:	4603      	mov	r3, r0
 8001de0:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t v_int = float_to_uint(v_des, V_MIN, V_MAX, 12);
 8001de2:	200c      	movs	r0, #12
 8001de4:	ed9f 1a37 	vldr	s2, [pc, #220]	; 8001ec4 <pack_cmd+0x1b4>
 8001de8:	eddf 0a35 	vldr	s1, [pc, #212]	; 8001ec0 <pack_cmd+0x1b0>
 8001dec:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8001df0:	f002 fbe1 	bl	80045b6 <float_to_uint>
 8001df4:	4603      	mov	r3, r0
 8001df6:	843b      	strh	r3, [r7, #32]
	uint16_t kp_int = float_to_uint(kp, KP_MIN, KP_MAX, 12);
 8001df8:	200c      	movs	r0, #12
 8001dfa:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8001ecc <pack_cmd+0x1bc>
 8001dfe:	eddf 0a32 	vldr	s1, [pc, #200]	; 8001ec8 <pack_cmd+0x1b8>
 8001e02:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001e06:	f002 fbd6 	bl	80045b6 <float_to_uint>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	83fb      	strh	r3, [r7, #30]
	uint16_t kd_int = float_to_uint(kd, KD_MIN, KD_MAX, 12);
 8001e0e:	200c      	movs	r0, #12
 8001e10:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8001e14:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8001ec8 <pack_cmd+0x1b8>
 8001e18:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001e1c:	f002 fbcb 	bl	80045b6 <float_to_uint>
 8001e20:	4603      	mov	r3, r0
 8001e22:	83bb      	strh	r3, [r7, #28]
	uint16_t t_int = float_to_uint(t_ff, T_MIN, T_MAX, 12);
 8001e24:	200c      	movs	r0, #12
 8001e26:	eeb3 1a02 	vmov.f32	s2, #50	; 0x41900000  18.0
 8001e2a:	eefb 0a02 	vmov.f32	s1, #178	; 0xc1900000 -18.0
 8001e2e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001e32:	f002 fbc0 	bl	80045b6 <float_to_uint>
 8001e36:	4603      	mov	r3, r0
 8001e38:	837b      	strh	r3, [r7, #26]
	/// pack ints into the can buffer ///
	bldc->txcan_data[0] = p_int>>8;
 8001e3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e3c:	0a1b      	lsrs	r3, r3, #8
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	bldc->txcan_data[1] = p_int&0xFF;
 8001e48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	bldc->txcan_data[2] = v_int>>4;
 8001e52:	8c3b      	ldrh	r3, [r7, #32]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	bldc->txcan_data[3] = ((v_int&0xF)<<4)|(kp_int>>8);
 8001e60:	8c3b      	ldrh	r3, [r7, #32]
 8001e62:	011b      	lsls	r3, r3, #4
 8001e64:	b25a      	sxtb	r2, r3
 8001e66:	8bfb      	ldrh	r3, [r7, #30]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	b25b      	sxtb	r3, r3
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	b25b      	sxtb	r3, r3
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	bldc->txcan_data[4] = kp_int&0xFF;
 8001e7a:	8bfb      	ldrh	r3, [r7, #30]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	bldc->txcan_data[5] = kd_int>>4;
 8001e84:	8bbb      	ldrh	r3, [r7, #28]
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	bldc->txcan_data[6] = ((kd_int&0xF)<<4)|(t_int>>8);
 8001e92:	8bbb      	ldrh	r3, [r7, #28]
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	b25a      	sxtb	r2, r3
 8001e98:	8b7b      	ldrh	r3, [r7, #26]
 8001e9a:	0a1b      	lsrs	r3, r3, #8
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	b25b      	sxtb	r3, r3
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	b25b      	sxtb	r3, r3
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	bldc->txcan_data[7] = t_int&0xff;
 8001eac:	8b7b      	ldrh	r3, [r7, #26]
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
//	if(whichBLDC==0){
//		si->can_id=0x01;
//	}else if(whichBLDC==1){
//		si->can_id=0x02;
//	}
}
 8001eb6:	bf00      	nop
 8001eb8:	3738      	adds	r7, #56	; 0x38
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	c2820000 	.word	0xc2820000
 8001ec4:	42820000 	.word	0x42820000
 8001ec8:	00000000 	.word	0x00000000
 8001ecc:	43fa0000 	.word	0x43fa0000

08001ed0 <unpack_reply>:

void unpack_reply(BLDC_Motor* bldc){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
//	RobotArm* robot_arm;
    /// unpack ints from can buffer ///
    uint16_t id = BLDC_canRxdata[0];
 8001ed8:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <unpack_reply+0xa4>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	83fb      	strh	r3, [r7, #30]
    uint16_t p_int = (BLDC_canRxdata[1]<<8)|BLDC_canRxdata[2];
 8001ede:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <unpack_reply+0xa4>)
 8001ee0:	785b      	ldrb	r3, [r3, #1]
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	b21a      	sxth	r2, r3
 8001ee6:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <unpack_reply+0xa4>)
 8001ee8:	789b      	ldrb	r3, [r3, #2]
 8001eea:	b21b      	sxth	r3, r3
 8001eec:	4313      	orrs	r3, r2
 8001eee:	b21b      	sxth	r3, r3
 8001ef0:	83bb      	strh	r3, [r7, #28]
    uint16_t v_int = (BLDC_canRxdata[3]<<4)|(BLDC_canRxdata[4]>>4);
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <unpack_reply+0xa4>)
 8001ef4:	78db      	ldrb	r3, [r3, #3]
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	b21a      	sxth	r2, r3
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <unpack_reply+0xa4>)
 8001efc:	791b      	ldrb	r3, [r3, #4]
 8001efe:	091b      	lsrs	r3, r3, #4
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	b21b      	sxth	r3, r3
 8001f04:	4313      	orrs	r3, r2
 8001f06:	b21b      	sxth	r3, r3
 8001f08:	837b      	strh	r3, [r7, #26]
    uint16_t i_int = ((BLDC_canRxdata[4]&0xF)<<8)|BLDC_canRxdata[5];
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <unpack_reply+0xa4>)
 8001f0c:	791b      	ldrb	r3, [r3, #4]
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	b21b      	sxth	r3, r3
 8001f12:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001f16:	b21a      	sxth	r2, r3
 8001f18:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <unpack_reply+0xa4>)
 8001f1a:	795b      	ldrb	r3, [r3, #5]
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	b21b      	sxth	r3, r3
 8001f22:	833b      	strh	r3, [r7, #24]
    /// convert uints to floats ///
    float p = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001f24:	8bbb      	ldrh	r3, [r7, #28]
 8001f26:	2110      	movs	r1, #16
 8001f28:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 8001f2c:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 8001f30:	4618      	mov	r0, r3
 8001f32:	f002 fb73 	bl	800461c <uint_to_float>
 8001f36:	ed87 0a05 	vstr	s0, [r7, #20]
    float v = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8001f3a:	8b7b      	ldrh	r3, [r7, #26]
 8001f3c:	210c      	movs	r1, #12
 8001f3e:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8001f78 <unpack_reply+0xa8>
 8001f42:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001f7c <unpack_reply+0xac>
 8001f46:	4618      	mov	r0, r3
 8001f48:	f002 fb68 	bl	800461c <uint_to_float>
 8001f4c:	ed87 0a04 	vstr	s0, [r7, #16]
    float t = uint_to_float(i_int, -T_MAX, T_MAX, 12);
 8001f50:	8b3b      	ldrh	r3, [r7, #24]
 8001f52:	210c      	movs	r1, #12
 8001f54:	eef3 0a02 	vmov.f32	s1, #50	; 0x41900000  18.0
 8001f58:	eebb 0a02 	vmov.f32	s0, #178	; 0xc1900000 -18.0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f002 fb5d 	bl	800461c <uint_to_float>
 8001f62:	ed87 0a03 	vstr	s0, [r7, #12]

    bldc->position=p;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	605a      	str	r2, [r3, #4]
}
 8001f6c:	bf00      	nop
 8001f6e:	3720      	adds	r7, #32
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200003bc 	.word	0x200003bc
 8001f78:	42820000 	.word	0x42820000
 8001f7c:	c2820000 	.word	0xc2820000

08001f80 <Step0>:

//ここからステッピングモータ//


void Step0(){
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
	//pull+
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001f84:	2200      	movs	r2, #0
 8001f86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f8a:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <Step0+0x20>)
 8001f8c:	f004 f954 	bl	8006238 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001f90:	2201      	movs	r2, #1
 8001f92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f96:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <Step0+0x20>)
 8001f98:	f004 f94e 	bl	8006238 <HAL_GPIO_WritePin>
	/*
	 * pull-
	 * HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
	 * HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
	 */
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40020400 	.word	0x40020400

08001fa4 <Dir0>:

void Dir0(int dir){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, dir);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fb6:	4803      	ldr	r0, [pc, #12]	; (8001fc4 <Dir0+0x20>)
 8001fb8:	f004 f93e 	bl	8006238 <HAL_GPIO_WritePin>
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40020400 	.word	0x40020400

08001fc8 <resetStepper>:
	si->rampUpStepCount = 0;
	si->totalSteps = 0;
	si->stepPosition = 0;
	si->movementDone = 0;
}
void resetStepper(volatile stepperInfo* si){
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	si->c0 = si->acceleration;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fda:	ee17 2a90 	vmov	r2, s15
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	615a      	str	r2, [r3, #20]
	si->d = si->c0;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	ee07 3a90 	vmov	s15, r3
 8001fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	si->di = si->d;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ffe:	ee17 2a90 	vmov	r2, s15
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	645a      	str	r2, [r3, #68]	; 0x44
	si->stepCount = 0;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	649a      	str	r2, [r3, #72]	; 0x48
	si->n = 0;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	63da      	str	r2, [r3, #60]	; 0x3c
	si->rampUpStepCount = 0;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	639a      	str	r2, [r3, #56]	; 0x38
	si->movementDone = 0;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <prepareMovement>:

volatile uint8_t remainingSteppersFlag = 0;

void prepareMovement(int whichMotor, int steps){
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
	if(steps == 0){
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d045      	beq.n	80020c8 <prepareMovement+0x9c>
		return;
	}
	volatile stepperInfo* si = &steppers[whichMotor];
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	4a22      	ldr	r2, [pc, #136]	; (80020d0 <prepareMovement+0xa4>)
 8002048:	4413      	add	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
	if(si->dir_inv){
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d011      	beq.n	8002078 <prepareMovement+0x4c>
		si->dirFunc( steps < 0 ? 0 : 1);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	43d2      	mvns	r2, r2
 800205c:	0fd2      	lsrs	r2, r2, #31
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	4610      	mov	r0, r2
 8002062:	4798      	blx	r3
		si->dir = steps > 0 ? -1:1;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	dd02      	ble.n	8002070 <prepareMovement+0x44>
 800206a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800206e:	e000      	b.n	8002072 <prepareMovement+0x46>
 8002070:	2201      	movs	r2, #1
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	61da      	str	r2, [r3, #28]
 8002076:	e00e      	b.n	8002096 <prepareMovement+0x6a>
	}else{
		si->dirFunc( steps < 0 ? 1 : 0);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	0fd2      	lsrs	r2, r2, #31
 8002080:	4610      	mov	r0, r2
 8002082:	4798      	blx	r3
		si->dir = steps > 0 ? 1:-1;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	dd01      	ble.n	800208e <prepareMovement+0x62>
 800208a:	2201      	movs	r2, #1
 800208c:	e001      	b.n	8002092 <prepareMovement+0x66>
 800208e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	61da      	str	r2, [r3, #28]
	}
	si->totalSteps = abs(steps);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	bfb8      	it	lt
 800209c:	425b      	neglt	r3, r3
 800209e:	461a      	mov	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	631a      	str	r2, [r3, #48]	; 0x30
	resetStepper(si);
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f7ff ff8f 	bl	8001fc8 <resetStepper>
	remainingSteppersFlag |= (1 << whichMotor);
 80020aa:	2201      	movs	r2, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	b25a      	sxtb	r2, r3
 80020b4:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <prepareMovement+0xa8>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	b25b      	sxtb	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b25b      	sxtb	r3, r3
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <prepareMovement+0xa8>)
 80020c4:	701a      	strb	r2, [r3, #0]
 80020c6:	e000      	b.n	80020ca <prepareMovement+0x9e>
		return;
 80020c8:	bf00      	nop
}
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000438 	.word	0x20000438
 80020d4:	20000a00 	.word	0x20000a00

080020d8 <prepareAbsoluteMovement>:

void prepareAbsoluteMovement(int whichMotor, int absolute_steps){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
	volatile stepperInfo* si = &steppers[whichMotor];
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	4a1b      	ldr	r2, [pc, #108]	; (800215c <prepareAbsoluteMovement+0x84>)
 80020ee:	4413      	add	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
	int steps = absolute_steps - si->stepPosition;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	60bb      	str	r3, [r7, #8]
	if(steps == 0){
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d027      	beq.n	8002152 <prepareAbsoluteMovement+0x7a>
		return;
	}
	si->dirFunc( steps < 0 ? 1 : 0);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	0fd2      	lsrs	r2, r2, #31
 800210a:	4610      	mov	r0, r2
 800210c:	4798      	blx	r3
	si->dir = steps > 0 ? 1:-1;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	dd01      	ble.n	8002118 <prepareAbsoluteMovement+0x40>
 8002114:	2201      	movs	r2, #1
 8002116:	e001      	b.n	800211c <prepareAbsoluteMovement+0x44>
 8002118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	61da      	str	r2, [r3, #28]
	si->totalSteps = abs(steps);
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	bfb8      	it	lt
 8002126:	425b      	neglt	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	631a      	str	r2, [r3, #48]	; 0x30
	resetStepper(si);
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f7ff ff4a 	bl	8001fc8 <resetStepper>
	remainingSteppersFlag |= (1 << whichMotor);
 8002134:	2201      	movs	r2, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	b25a      	sxtb	r2, r3
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <prepareAbsoluteMovement+0x88>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	b25b      	sxtb	r3, r3
 8002146:	4313      	orrs	r3, r2
 8002148:	b25b      	sxtb	r3, r3
 800214a:	b2da      	uxtb	r2, r3
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <prepareAbsoluteMovement+0x88>)
 800214e:	701a      	strb	r2, [r3, #0]
 8002150:	e000      	b.n	8002154 <prepareAbsoluteMovement+0x7c>
		return;
 8002152:	bf00      	nop
}
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000438 	.word	0x20000438
 8002160:	20000a00 	.word	0x20000a00

08002164 <setNextInterruptInterval>:


volatile uint8_t nextStepperFlag = 0;

void setNextInterruptInterval(){
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0

	unsigned int mind = 999999;
 800216a:	4b38      	ldr	r3, [pc, #224]	; (800224c <setNextInterruptInterval+0xe8>)
 800216c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < NUM_STEPPERS; i++){
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	e023      	b.n	80021bc <setNextInterruptInterval+0x58>
		if( ((1 << i) & remainingSteppersFlag) && steppers[i].di < mind ){
 8002174:	4b36      	ldr	r3, [pc, #216]	; (8002250 <setNextInterruptInterval+0xec>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	fa42 f303 	asr.w	r3, r2, r3
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d015      	beq.n	80021b6 <setNextInterruptInterval+0x52>
 800218a:	4932      	ldr	r1, [pc, #200]	; (8002254 <setNextInterruptInterval+0xf0>)
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	440b      	add	r3, r1
 8002198:	3344      	adds	r3, #68	; 0x44
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d909      	bls.n	80021b6 <setNextInterruptInterval+0x52>
			mind = steppers[i].di;
 80021a2:	492c      	ldr	r1, [pc, #176]	; (8002254 <setNextInterruptInterval+0xf0>)
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	440b      	add	r3, r1
 80021b0:	3344      	adds	r3, #68	; 0x44
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < NUM_STEPPERS; i++){
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	3301      	adds	r3, #1
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	ddd8      	ble.n	8002174 <setNextInterruptInterval+0x10>
		}
	}

	nextStepperFlag = 0;
 80021c2:	4b25      	ldr	r3, [pc, #148]	; (8002258 <setNextInterruptInterval+0xf4>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_STEPPERS; i ++){
 80021c8:	2300      	movs	r3, #0
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	e027      	b.n	800221e <setNextInterruptInterval+0xba>
		if( ((1 << i) & remainingSteppersFlag) && steppers[i].di == mind )
 80021ce:	4b20      	ldr	r3, [pc, #128]	; (8002250 <setNextInterruptInterval+0xec>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	fa42 f303 	asr.w	r3, r2, r3
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d019      	beq.n	8002218 <setNextInterruptInterval+0xb4>
 80021e4:	491b      	ldr	r1, [pc, #108]	; (8002254 <setNextInterruptInterval+0xf0>)
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	440b      	add	r3, r1
 80021f2:	3344      	adds	r3, #68	; 0x44
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d10d      	bne.n	8002218 <setNextInterruptInterval+0xb4>
			nextStepperFlag |= (1 << i);
 80021fc:	2201      	movs	r2, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	b25a      	sxtb	r2, r3
 8002206:	4b14      	ldr	r3, [pc, #80]	; (8002258 <setNextInterruptInterval+0xf4>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	b25b      	sxtb	r3, r3
 800220e:	4313      	orrs	r3, r2
 8002210:	b25b      	sxtb	r3, r3
 8002212:	b2da      	uxtb	r2, r3
 8002214:	4b10      	ldr	r3, [pc, #64]	; (8002258 <setNextInterruptInterval+0xf4>)
 8002216:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_STEPPERS; i ++){
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3301      	adds	r3, #1
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	ddd4      	ble.n	80021ce <setNextInterruptInterval+0x6a>
	}

	if (remainingSteppersFlag == 0){
 8002224:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <setNextInterruptInterval+0xec>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d104      	bne.n	8002238 <setNextInterruptInterval+0xd4>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <setNextInterruptInterval+0xf8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8002236:	635a      	str	r2, [r3, #52]	; 0x34
	}

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <setNextInterruptInterval+0xf8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	635a      	str	r2, [r3, #52]	; 0x34

}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	000f423f 	.word	0x000f423f
 8002250:	20000a00 	.word	0x20000a00
 8002254:	20000438 	.word	0x20000438
 8002258:	20000a01 	.word	0x20000a01
 800225c:	2000029c 	.word	0x2000029c

08002260 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	//HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
	unsigned int tmpCtr = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1);
 8002268:	4b8f      	ldr	r3, [pc, #572]	; (80024a8 <HAL_TIM_OC_DelayElapsedCallback+0x248>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226e:	613b      	str	r3, [r7, #16]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);
 8002270:	4b8d      	ldr	r3, [pc, #564]	; (80024a8 <HAL_TIM_OC_DelayElapsedCallback+0x248>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8002278:	635a      	str	r2, [r3, #52]	; 0x34


	for (int i = 0; i < NUM_STEPPERS; i++){
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	e104      	b.n	800248a <HAL_TIM_OC_DelayElapsedCallback+0x22a>
		if ( ! ( (1 << i) & remainingSteppersFlag )){
 8002280:	4b8a      	ldr	r3, [pc, #552]	; (80024ac <HAL_TIM_OC_DelayElapsedCallback+0x24c>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	fa42 f303 	asr.w	r3, r2, r3
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80f5 	beq.w	8002482 <HAL_TIM_OC_DelayElapsedCallback+0x222>
			continue;
		}

		if( homing_flag & (1 << i)){
 8002298:	4b85      	ldr	r3, [pc, #532]	; (80024b0 <HAL_TIM_OC_DelayElapsedCallback+0x250>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	fa42 f303 	asr.w	r3, r2, r3
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d01a      	beq.n	80022e2 <HAL_TIM_OC_DelayElapsedCallback+0x82>
			if(zhome_endstop_state & (1 << i)){
 80022ac:	4b81      	ldr	r3, [pc, #516]	; (80024b4 <HAL_TIM_OC_DelayElapsedCallback+0x254>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	fa42 f303 	asr.w	r3, r2, r3
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d010      	beq.n	80022e2 <HAL_TIM_OC_DelayElapsedCallback+0x82>
				remainingSteppersFlag &= ~(1 << i);
 80022c0:	2201      	movs	r2, #1
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	b25b      	sxtb	r3, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	b25a      	sxtb	r2, r3
 80022ce:	4b77      	ldr	r3, [pc, #476]	; (80024ac <HAL_TIM_OC_DelayElapsedCallback+0x24c>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	b25b      	sxtb	r3, r3
 80022d6:	4013      	ands	r3, r2
 80022d8:	b25b      	sxtb	r3, r3
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	4b73      	ldr	r3, [pc, #460]	; (80024ac <HAL_TIM_OC_DelayElapsedCallback+0x24c>)
 80022de:	701a      	strb	r2, [r3, #0]
				continue;
 80022e0:	e0d0      	b.n	8002484 <HAL_TIM_OC_DelayElapsedCallback+0x224>
			}
		}

		if ( ! (nextStepperFlag & (1 << i)) ){
 80022e2:	4b75      	ldr	r3, [pc, #468]	; (80024b8 <HAL_TIM_OC_DelayElapsedCallback+0x258>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	fa42 f303 	asr.w	r3, r2, r3
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d114      	bne.n	8002322 <HAL_TIM_OC_DelayElapsedCallback+0xc2>
			steppers[i].di -= tmpCtr;
 80022f8:	4970      	ldr	r1, [pc, #448]	; (80024bc <HAL_TIM_OC_DelayElapsedCallback+0x25c>)
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	440b      	add	r3, r1
 8002306:	3344      	adds	r3, #68	; 0x44
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad1      	subs	r1, r2, r3
 800230e:	486b      	ldr	r0, [pc, #428]	; (80024bc <HAL_TIM_OC_DelayElapsedCallback+0x25c>)
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	4403      	add	r3, r0
 800231c:	3344      	adds	r3, #68	; 0x44
 800231e:	6019      	str	r1, [r3, #0]
			continue;
 8002320:	e0b0      	b.n	8002484 <HAL_TIM_OC_DelayElapsedCallback+0x224>
		}

		volatile stepperInfo* s = &steppers[i];
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	4a63      	ldr	r2, [pc, #396]	; (80024bc <HAL_TIM_OC_DelayElapsedCallback+0x25c>)
 800232e:	4413      	add	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]

		if( (s->stepCount) < (s->totalSteps)){
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	429a      	cmp	r2, r3
 800233c:	d228      	bcs.n	8002390 <HAL_TIM_OC_DelayElapsedCallback+0x130>
			s->stepFunc();
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	4798      	blx	r3
			s->stepCount++;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	649a      	str	r2, [r3, #72]	; 0x48
			s->stepPosition += s->dir;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	69da      	ldr	r2, [r3, #28]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	441a      	add	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	619a      	str	r2, [r3, #24]
			if ( (s->stepCount) >= (s->totalSteps) ){
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	429a      	cmp	r2, r3
 8002366:	d313      	bcc.n	8002390 <HAL_TIM_OC_DelayElapsedCallback+0x130>
				s->movementDone = 1;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				remainingSteppersFlag &= ~(1 << i);
 8002370:	2201      	movs	r2, #1
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	b25b      	sxtb	r3, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	b25a      	sxtb	r2, r3
 800237e:	4b4b      	ldr	r3, [pc, #300]	; (80024ac <HAL_TIM_OC_DelayElapsedCallback+0x24c>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	b25b      	sxtb	r3, r3
 8002386:	4013      	ands	r3, r2
 8002388:	b25b      	sxtb	r3, r3
 800238a:	b2da      	uxtb	r2, r3
 800238c:	4b47      	ldr	r3, [pc, #284]	; (80024ac <HAL_TIM_OC_DelayElapsedCallback+0x24c>)
 800238e:	701a      	strb	r2, [r3, #0]
			}
		}

		if (s->rampUpStepCount == 0){
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002394:	2b00      	cmp	r3, #0
 8002396:	d142      	bne.n	800241e <HAL_TIM_OC_DelayElapsedCallback+0x1be>
			s->n++;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	63da      	str	r2, [r3, #60]	; 0x3c
			s->d = s->d - (2*s->d) / (4*s->n +1);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80023ae:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	3301      	adds	r3, #1
 80023ba:	ee07 3a90 	vmov	s15, r3
 80023be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023c2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80023c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			if (s->d <= s->minStepInterval ){
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	ee07 3a90 	vmov	s15, r3
 80023de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ea:	d80c      	bhi.n	8002406 <HAL_TIM_OC_DelayElapsedCallback+0x1a6>
				s->d = s->minStepInterval;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	ee07 3a90 	vmov	s15, r3
 80023f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
				s->rampUpStepCount = s->stepCount;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	639a      	str	r2, [r3, #56]	; 0x38
			}
			if (s->stepCount >= (s->totalSteps / 2) ){
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	085b      	lsrs	r3, r3, #1
 8002410:	429a      	cmp	r2, r3
 8002412:	d32c      	bcc.n	800246e <HAL_TIM_OC_DelayElapsedCallback+0x20e>
				s->rampUpStepCount = s->stepCount;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	639a      	str	r2, [r3, #56]	; 0x38
 800241c:	e027      	b.n	800246e <HAL_TIM_OC_DelayElapsedCallback+0x20e>
			}
		} else if ( s->stepCount >= s->totalSteps - s->rampUpStepCount) {
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242a:	1acb      	subs	r3, r1, r3
 800242c:	429a      	cmp	r2, r3
 800242e:	d31e      	bcc.n	800246e <HAL_TIM_OC_DelayElapsedCallback+0x20e>
			s->d = (s->d * (4 * s->n + 1)) / (4 * s->n + 1 -2);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	3301      	adds	r3, #1
 800243e:	ee07 3a90 	vmov	s15, r3
 8002442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002446:	ee67 6a27 	vmul.f32	s13, s14, s15
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	3b01      	subs	r3, #1
 8002452:	ee07 3a90 	vmov	s15, r3
 8002456:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800245a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			s->n--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002468:	1e5a      	subs	r2, r3, #1
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		s->di = s->d;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002478:	ee17 2a90 	vmov	r2, s15
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	645a      	str	r2, [r3, #68]	; 0x44
 8002480:	e000      	b.n	8002484 <HAL_TIM_OC_DelayElapsedCallback+0x224>
			continue;
 8002482:	bf00      	nop
	for (int i = 0; i < NUM_STEPPERS; i++){
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	3301      	adds	r3, #1
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2b00      	cmp	r3, #0
 800248e:	f77f aef7 	ble.w	8002280 <HAL_TIM_OC_DelayElapsedCallback+0x20>
	}

	setNextInterruptInterval();
 8002492:	f7ff fe67 	bl	8002164 <setNextInterruptInterval>

	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002496:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <HAL_TIM_OC_DelayElapsedCallback+0x248>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2200      	movs	r2, #0
 800249c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800249e:	bf00      	nop
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	2000029c 	.word	0x2000029c
 80024ac:	20000a00 	.word	0x20000a00
 80024b0:	20000489 	.word	0x20000489
 80024b4:	20000488 	.word	0x20000488
 80024b8:	20000a01 	.word	0x20000a01
 80024bc:	20000438 	.word	0x20000438

080024c0 <runAndWait>:
//	if( ! HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9)){
//		zhome_endstop_state |= 1;
//	}
//}

void runAndWait(){
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
	setNextInterruptInterval();
 80024c4:	f7ff fe4e 	bl	8002164 <setNextInterruptInterval>
	while(remainingSteppersFlag);
 80024c8:	bf00      	nop
 80024ca:	4b04      	ldr	r3, [pc, #16]	; (80024dc <runAndWait+0x1c>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1fa      	bne.n	80024ca <runAndWait+0xa>
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000a00 	.word	0x20000a00

080024e0 <stepperHoming>:

void stepperHoming(int whichMotor){
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	homing_flag |= (1 << whichMotor);
 80024e8:	2201      	movs	r2, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	b25a      	sxtb	r2, r3
 80024f2:	4b5a      	ldr	r3, [pc, #360]	; (800265c <stepperHoming+0x17c>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	b25b      	sxtb	r3, r3
 80024f8:	4313      	orrs	r3, r2
 80024fa:	b25b      	sxtb	r3, r3
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4b57      	ldr	r3, [pc, #348]	; (800265c <stepperHoming+0x17c>)
 8002500:	701a      	strb	r2, [r3, #0]
	//seeking
	steppers[whichMotor].minStepInterval = steppers[whichMotor].seeking_vel;
 8002502:	4957      	ldr	r1, [pc, #348]	; (8002660 <stepperHoming+0x180>)
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	440b      	add	r3, r1
 8002510:	3328      	adds	r3, #40	; 0x28
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	4952      	ldr	r1, [pc, #328]	; (8002660 <stepperHoming+0x180>)
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	440b      	add	r3, r1
 8002524:	3304      	adds	r3, #4
 8002526:	6018      	str	r0, [r3, #0]
	prepareMovement(whichMotor, -100000000);
 8002528:	494e      	ldr	r1, [pc, #312]	; (8002664 <stepperHoming+0x184>)
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff fd7e 	bl	800202c <prepareMovement>
	runAndWait();
 8002530:	f7ff ffc6 	bl	80024c0 <runAndWait>
	HAL_Delay(500);
 8002534:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002538:	f002 fc62 	bl	8004e00 <HAL_Delay>
	//pull-off

	homing_flag &= ~(1 << whichMotor);
 800253c:	2201      	movs	r2, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	b25b      	sxtb	r3, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	b25a      	sxtb	r2, r3
 800254a:	4b44      	ldr	r3, [pc, #272]	; (800265c <stepperHoming+0x17c>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	b25b      	sxtb	r3, r3
 8002550:	4013      	ands	r3, r2
 8002552:	b25b      	sxtb	r3, r3
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4b41      	ldr	r3, [pc, #260]	; (800265c <stepperHoming+0x17c>)
 8002558:	701a      	strb	r2, [r3, #0]
	prepareMovement(whichMotor, steppers[whichMotor].pull_off);
 800255a:	4941      	ldr	r1, [pc, #260]	; (8002660 <stepperHoming+0x180>)
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	440b      	add	r3, r1
 8002568:	3324      	adds	r3, #36	; 0x24
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4619      	mov	r1, r3
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff fd5c 	bl	800202c <prepareMovement>
	runAndWait();
 8002574:	f7ff ffa4 	bl	80024c0 <runAndWait>
	HAL_Delay(500);
 8002578:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800257c:	f002 fc40 	bl	8004e00 <HAL_Delay>
	//homing

	homing_flag |= (1 << whichMotor);
 8002580:	2201      	movs	r2, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	b25a      	sxtb	r2, r3
 800258a:	4b34      	ldr	r3, [pc, #208]	; (800265c <stepperHoming+0x17c>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	b25b      	sxtb	r3, r3
 8002590:	4313      	orrs	r3, r2
 8002592:	b25b      	sxtb	r3, r3
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4b31      	ldr	r3, [pc, #196]	; (800265c <stepperHoming+0x17c>)
 8002598:	701a      	strb	r2, [r3, #0]
	steppers[whichMotor].minStepInterval = steppers[whichMotor].homing_vel;
 800259a:	4931      	ldr	r1, [pc, #196]	; (8002660 <stepperHoming+0x180>)
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	4613      	mov	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	440b      	add	r3, r1
 80025a8:	332c      	adds	r3, #44	; 0x2c
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	492c      	ldr	r1, [pc, #176]	; (8002660 <stepperHoming+0x180>)
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	440b      	add	r3, r1
 80025bc:	3304      	adds	r3, #4
 80025be:	6018      	str	r0, [r3, #0]
	prepareMovement(whichMotor, -100000000);
 80025c0:	4928      	ldr	r1, [pc, #160]	; (8002664 <stepperHoming+0x184>)
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff fd32 	bl	800202c <prepareMovement>
	runAndWait();
 80025c8:	f7ff ff7a 	bl	80024c0 <runAndWait>
	HAL_Delay(500);
 80025cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025d0:	f002 fc16 	bl	8004e00 <HAL_Delay>
	//pull-off
	homing_flag &= ~(1 << whichMotor);
 80025d4:	2201      	movs	r2, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	b25b      	sxtb	r3, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	b25a      	sxtb	r2, r3
 80025e2:	4b1e      	ldr	r3, [pc, #120]	; (800265c <stepperHoming+0x17c>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	b25b      	sxtb	r3, r3
 80025e8:	4013      	ands	r3, r2
 80025ea:	b25b      	sxtb	r3, r3
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4b1b      	ldr	r3, [pc, #108]	; (800265c <stepperHoming+0x17c>)
 80025f0:	701a      	strb	r2, [r3, #0]
	prepareMovement(whichMotor, steppers[whichMotor].pull_off);
 80025f2:	491b      	ldr	r1, [pc, #108]	; (8002660 <stepperHoming+0x180>)
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	440b      	add	r3, r1
 8002600:	3324      	adds	r3, #36	; 0x24
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4619      	mov	r1, r3
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff fd10 	bl	800202c <prepareMovement>
	runAndWait();
 800260c:	f7ff ff58 	bl	80024c0 <runAndWait>
	HAL_Delay(500);
 8002610:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002614:	f002 fbf4 	bl	8004e00 <HAL_Delay>

	steppers[whichMotor].stepPosition = 0;
 8002618:	4911      	ldr	r1, [pc, #68]	; (8002660 <stepperHoming+0x180>)
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	440b      	add	r3, r1
 8002626:	3318      	adds	r3, #24
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
	steppers[whichMotor].homing = 1;
 800262c:	490c      	ldr	r1, [pc, #48]	; (8002660 <stepperHoming+0x180>)
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	440b      	add	r3, r1
 800263a:	3310      	adds	r3, #16
 800263c:	2201      	movs	r2, #1
 800263e:	701a      	strb	r2, [r3, #0]
	steppers[whichMotor].minStepInterval = 100;
 8002640:	4907      	ldr	r1, [pc, #28]	; (8002660 <stepperHoming+0x180>)
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	440b      	add	r3, r1
 800264e:	3304      	adds	r3, #4
 8002650:	2264      	movs	r2, #100	; 0x64
 8002652:	601a      	str	r2, [r3, #0]
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000489 	.word	0x20000489
 8002660:	20000438 	.word	0x20000438
 8002664:	fa0a1f00 	.word	0xfa0a1f00

08002668 <ReceiveData_Transmit>:

//ここからコミュニケーション//
void ReceiveData_Transmit(uint8_t *rd){
 8002668:	b580      	push	{r7, lr}
 800266a:	b090      	sub	sp, #64	; 0x40
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	volatile UART_data* ud = &data;
 8002670:	4b9a      	ldr	r3, [pc, #616]	; (80028dc <ReceiveData_Transmit+0x274>)
 8002672:	633b      	str	r3, [r7, #48]	; 0x30
	volatile stepperInfo* si = &steppers[0];
 8002674:	4b9a      	ldr	r3, [pc, #616]	; (80028e0 <ReceiveData_Transmit+0x278>)
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
	RobotArm *robot_arm = &ra;
 8002678:	4b9a      	ldr	r3, [pc, #616]	; (80028e4 <ReceiveData_Transmit+0x27c>)
 800267a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t com_select[20];
	int count=0;
 800267c:	2300      	movs	r3, #0
 800267e:	63fb      	str	r3, [r7, #60]	; 0x3c
	 for(int i=0;i<buffersize;i++){
 8002680:	2300      	movs	r3, #0
 8002682:	63bb      	str	r3, [r7, #56]	; 0x38
 8002684:	e00e      	b.n	80026a4 <ReceiveData_Transmit+0x3c>
		 com_select[i]=~(rd[i]);
 8002686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	4413      	add	r3, r2
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	43db      	mvns	r3, r3
 8002690:	b2d9      	uxtb	r1, r3
 8002692:	f107 0214 	add.w	r2, r7, #20
 8002696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002698:	4413      	add	r3, r2
 800269a:	460a      	mov	r2, r1
 800269c:	701a      	strb	r2, [r3, #0]
	 for(int i=0;i<buffersize;i++){
 800269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a0:	3301      	adds	r3, #1
 80026a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80026a4:	4b90      	ldr	r3, [pc, #576]	; (80028e8 <ReceiveData_Transmit+0x280>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ac:	4293      	cmp	r3, r2
 80026ae:	dbea      	blt.n	8002686 <ReceiveData_Transmit+0x1e>
		  	}
	for(uint8_t i=0; i<buffersize ;i++){
 80026b0:	2300      	movs	r3, #0
 80026b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80026b6:	e00f      	b.n	80026d8 <ReceiveData_Transmit+0x70>
		if(com_select[i]==0){
 80026b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026bc:	3340      	adds	r3, #64	; 0x40
 80026be:	443b      	add	r3, r7
 80026c0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d102      	bne.n	80026ce <ReceiveData_Transmit+0x66>
			count++;
 80026c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ca:	3301      	adds	r3, #1
 80026cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(uint8_t i=0; i<buffersize ;i++){
 80026ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026d2:	3301      	adds	r3, #1
 80026d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80026d8:	4b83      	ldr	r3, [pc, #524]	; (80028e8 <ReceiveData_Transmit+0x280>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d3e9      	bcc.n	80026b8 <ReceiveData_Transmit+0x50>
		}
	}
	if(rd[0]!=0xAA && rd[(buffersize-1)]!=0xAA){
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2baa      	cmp	r3, #170	; 0xaa
 80026ea:	d00b      	beq.n	8002704 <ReceiveData_Transmit+0x9c>
 80026ec:	4b7e      	ldr	r3, [pc, #504]	; (80028e8 <ReceiveData_Transmit+0x280>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2baa      	cmp	r3, #170	; 0xaa
 80026fa:	d003      	beq.n	8002704 <ReceiveData_Transmit+0x9c>
		ud->error_state=1;
 80026fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fe:	2201      	movs	r2, #1
 8002700:	70da      	strb	r2, [r3, #3]
 8002702:	e10b      	b.n	800291c <ReceiveData_Transmit+0x2b4>
	}
	else if(count<(buffersize-3)){	//動作モード,各パラメータに数値を入れる
 8002704:	4b78      	ldr	r3, [pc, #480]	; (80028e8 <ReceiveData_Transmit+0x280>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	3b03      	subs	r3, #3
 800270a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800270c:	429a      	cmp	r2, r3
 800270e:	f280 80f7 	bge.w	8002900 <ReceiveData_Transmit+0x298>
		ud->fc=rd[0]&0xFF;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	781a      	ldrb	r2, [r3, #0]
 8002716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002718:	71da      	strb	r2, [r3, #7]
		ud->x1=(rd[1]&0xFF)|((rd[2]&0xFF)<<8);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3301      	adds	r3, #1
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	b21a      	sxth	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3302      	adds	r3, #2
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	021b      	lsls	r3, r3, #8
 800272a:	b21b      	sxth	r3, r3
 800272c:	4313      	orrs	r3, r2
 800272e:	b21a      	sxth	r2, r3
 8002730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002732:	815a      	strh	r2, [r3, #10]
		ud->y1=(rd[3]&0xFF)|((rd[4]&0xFF)<<8);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3303      	adds	r3, #3
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	b21a      	sxth	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3304      	adds	r3, #4
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	b21b      	sxth	r3, r3
 8002746:	4313      	orrs	r3, r2
 8002748:	b21a      	sxth	r2, r3
 800274a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274c:	81da      	strh	r2, [r3, #14]
		ud->x2=(rd[5]&0xFF)|((rd[6]&0xFF)<<8);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3305      	adds	r3, #5
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	b21a      	sxth	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3306      	adds	r3, #6
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	b21b      	sxth	r3, r3
 8002760:	4313      	orrs	r3, r2
 8002762:	b21a      	sxth	r2, r3
 8002764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002766:	819a      	strh	r2, [r3, #12]
		ud->y2=(rd[7]&0xFF)|((rd[8]&0xFF)<<8);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3307      	adds	r3, #7
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	b21a      	sxth	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3308      	adds	r3, #8
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	021b      	lsls	r3, r3, #8
 8002778:	b21b      	sxth	r3, r3
 800277a:	4313      	orrs	r3, r2
 800277c:	b21a      	sxth	r2, r3
 800277e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002780:	821a      	strh	r2, [r3, #16]
		ud->z=(rd[9]&0xFF)|((rd[10]&0xFF)<<8);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3309      	adds	r3, #9
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	b21a      	sxth	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	330a      	adds	r3, #10
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	021b      	lsls	r3, r3, #8
 8002792:	b21b      	sxth	r3, r3
 8002794:	4313      	orrs	r3, r2
 8002796:	b21b      	sxth	r3, r3
 8002798:	b29a      	uxth	r2, r3
 800279a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279c:	825a      	strh	r2, [r3, #18]
		ud->a1=(rd[11]&0xFF)|((rd[12]&0xFF)<<8);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	330b      	adds	r3, #11
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	b21a      	sxth	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	330c      	adds	r3, #12
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	021b      	lsls	r3, r3, #8
 80027ae:	b21b      	sxth	r3, r3
 80027b0:	4313      	orrs	r3, r2
 80027b2:	b21b      	sxth	r3, r3
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b8:	829a      	strh	r2, [r3, #20]
		ud->a2=(rd[13]&0xFF)|((rd[14]&0xFF)<<8);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	330d      	adds	r3, #13
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	b21a      	sxth	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	330e      	adds	r3, #14
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	b21b      	sxth	r3, r3
 80027cc:	4313      	orrs	r3, r2
 80027ce:	b21b      	sxth	r3, r3
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d4:	82da      	strh	r2, [r3, #22]
		ud->l1=(rd[15]&0xFF)|((rd[16]&0xFF)<<8);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	330f      	adds	r3, #15
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	b21a      	sxth	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3310      	adds	r3, #16
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	b21b      	sxth	r3, r3
 80027e8:	4313      	orrs	r3, r2
 80027ea:	b21b      	sxth	r3, r3
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f0:	831a      	strh	r2, [r3, #24]
		ud->l2=(rd[17]&0xFF)|((rd[18]&0xFF)<<8);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3311      	adds	r3, #17
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	b21a      	sxth	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3312      	adds	r3, #18
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	021b      	lsls	r3, r3, #8
 8002802:	b21b      	sxth	r3, r3
 8002804:	4313      	orrs	r3, r2
 8002806:	b21b      	sxth	r3, r3
 8002808:	b29a      	uxth	r2, r3
 800280a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280c:	835a      	strh	r2, [r3, #26]
		ud->lc=rd[19]&0xFF;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3313      	adds	r3, #19
 8002812:	781a      	ldrb	r2, [r3, #0]
 8002814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002816:	721a      	strb	r2, [r3, #8]
		ud->coordinate_state=1;
 8002818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281a:	2201      	movs	r2, #1
 800281c:	701a      	strb	r2, [r3, #0]
		BLDC_IK(ud->x2,ud->y2,&robot_arm->axis[0].target_position,&robot_arm->axis[1].target_position);
 800281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002820:	899b      	ldrh	r3, [r3, #12]
 8002822:	b21b      	sxth	r3, r3
 8002824:	ee07 3a90 	vmov	s15, r3
 8002828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800282c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282e:	8a1b      	ldrh	r3, [r3, #16]
 8002830:	b21b      	sxth	r3, r3
 8002832:	ee07 3a10 	vmov	s14, r3
 8002836:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283c:	f103 020c 	add.w	r2, r3, #12
 8002840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002842:	3358      	adds	r3, #88	; 0x58
 8002844:	4619      	mov	r1, r3
 8002846:	4610      	mov	r0, r2
 8002848:	eef0 0a47 	vmov.f32	s1, s14
 800284c:	eeb0 0a67 	vmov.f32	s0, s15
 8002850:	f001 f9fe 	bl	8003c50 <BLDC_IK>
		si->sending_step=(ud->z/10)*1600;	//1/10してmm/revに変換
 8002854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002856:	8a5b      	ldrh	r3, [r3, #18]
 8002858:	b29b      	uxth	r3, r3
 800285a:	4a24      	ldr	r2, [pc, #144]	; (80028ec <ReceiveData_Transmit+0x284>)
 800285c:	fba2 2303 	umull	r2, r3, r2, r3
 8002860:	08db      	lsrs	r3, r3, #3
 8002862:	b29b      	uxth	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800286a:	fb03 f202 	mul.w	r2, r3, r2
 800286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002870:	64da      	str	r2, [r3, #76]	; 0x4c
		robot_arm->axis2.a1=ud->a1*10;	//10倍して36000deg/revに変換
 8002872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002874:	8a9b      	ldrh	r3, [r3, #20]
 8002876:	b29b      	uxth	r3, r3
 8002878:	461a      	mov	r2, r3
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	461a      	mov	r2, r3
 8002884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002886:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		robot_arm->axis2.a2=ud->a2*10;	//10倍して36000deg/revに変換
 800288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288c:	8adb      	ldrh	r3, [r3, #22]
 800288e:	b29b      	uxth	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	461a      	mov	r2, r3
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		printf("x: %d\r\n",ud->x2);
 80028a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a4:	899b      	ldrh	r3, [r3, #12]
 80028a6:	b21b      	sxth	r3, r3
 80028a8:	4619      	mov	r1, r3
 80028aa:	4811      	ldr	r0, [pc, #68]	; (80028f0 <ReceiveData_Transmit+0x288>)
 80028ac:	f007 fa26 	bl	8009cfc <iprintf>
		printf("y: %d\r\n",ud->y2);
 80028b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b2:	8a1b      	ldrh	r3, [r3, #16]
 80028b4:	b21b      	sxth	r3, r3
 80028b6:	4619      	mov	r1, r3
 80028b8:	480e      	ldr	r0, [pc, #56]	; (80028f4 <ReceiveData_Transmit+0x28c>)
 80028ba:	f007 fa1f 	bl	8009cfc <iprintf>
		printf("a1: %d\r\n",robot_arm->axis2.a1);
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028c4:	4619      	mov	r1, r3
 80028c6:	480c      	ldr	r0, [pc, #48]	; (80028f8 <ReceiveData_Transmit+0x290>)
 80028c8:	f007 fa18 	bl	8009cfc <iprintf>
		printf("a2: %d\r\n",robot_arm->axis2.a2);
 80028cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80028d2:	4619      	mov	r1, r3
 80028d4:	4809      	ldr	r0, [pc, #36]	; (80028fc <ReceiveData_Transmit+0x294>)
 80028d6:	f007 fa11 	bl	8009cfc <iprintf>
 80028da:	e01f      	b.n	800291c <ReceiveData_Transmit+0x2b4>
 80028dc:	2000036c 	.word	0x2000036c
 80028e0:	20000438 	.word	0x20000438
 80028e4:	20000928 	.word	0x20000928
 80028e8:	20000000 	.word	0x20000000
 80028ec:	cccccccd 	.word	0xcccccccd
 80028f0:	0800de58 	.word	0x0800de58
 80028f4:	0800de60 	.word	0x0800de60
 80028f8:	0800de68 	.word	0x0800de68
 80028fc:	0800de74 	.word	0x0800de74
	}
	else if(count==(buffersize-3)){	//コマンドモード,9byte com_selectが0だったら
 8002900:	4b9f      	ldr	r3, [pc, #636]	; (8002b80 <ReceiveData_Transmit+0x518>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	3b03      	subs	r3, #3
 8002906:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002908:	429a      	cmp	r2, r3
 800290a:	d107      	bne.n	800291c <ReceiveData_Transmit+0x2b4>
		ud->cmd=rd[1]&0xFF;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3301      	adds	r3, #1
 8002910:	781a      	ldrb	r2, [r3, #0]
 8002912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002914:	725a      	strb	r2, [r3, #9]
		ud->mode_state=1;
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	2201      	movs	r2, #1
 800291a:	709a      	strb	r2, [r3, #2]
	}
	switch(ud->cmd){
 800291c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291e:	7a5b      	ldrb	r3, [r3, #9]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b0d      	cmp	r3, #13
 8002924:	dc38      	bgt.n	8002998 <ReceiveData_Transmit+0x330>
 8002926:	2b00      	cmp	r3, #0
 8002928:	dc14      	bgt.n	8002954 <ReceiveData_Transmit+0x2ec>
			RMD_calculatuin(robot_arm);
		}
		break;

	default:
		break;
 800292a:	f000 bcd7 	b.w	80032dc <ReceiveData_Transmit+0xc74>
	switch(ud->cmd){
 800292e:	3bc1      	subs	r3, #193	; 0xc1
 8002930:	2b05      	cmp	r3, #5
 8002932:	f200 84d3 	bhi.w	80032dc <ReceiveData_Transmit+0xc74>
 8002936:	a201      	add	r2, pc, #4	; (adr r2, 800293c <ReceiveData_Transmit+0x2d4>)
 8002938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293c:	08003139 	.word	0x08003139
 8002940:	080031eb 	.word	0x080031eb
 8002944:	0800321d 	.word	0x0800321d
 8002948:	08003245 	.word	0x08003245
 800294c:	08003277 	.word	0x08003277
 8002950:	080032ab 	.word	0x080032ab
 8002954:	3b01      	subs	r3, #1
 8002956:	2b0c      	cmp	r3, #12
 8002958:	f200 84c0 	bhi.w	80032dc <ReceiveData_Transmit+0xc74>
 800295c:	a201      	add	r2, pc, #4	; (adr r2, 8002964 <ReceiveData_Transmit+0x2fc>)
 800295e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002962:	bf00      	nop
 8002964:	080029a7 	.word	0x080029a7
 8002968:	08002b39 	.word	0x08002b39
 800296c:	08002ba5 	.word	0x08002ba5
 8002970:	08002c53 	.word	0x08002c53
 8002974:	08002da5 	.word	0x08002da5
 8002978:	08002e71 	.word	0x08002e71
 800297c:	08002f0f 	.word	0x08002f0f
 8002980:	08002f2f 	.word	0x08002f2f
 8002984:	08002f4f 	.word	0x08002f4f
 8002988:	08002f8f 	.word	0x08002f8f
 800298c:	08002ff9 	.word	0x08002ff9
 8002990:	080030b3 	.word	0x080030b3
 8002994:	080030e9 	.word	0x080030e9
 8002998:	2bc6      	cmp	r3, #198	; 0xc6
 800299a:	f300 849f 	bgt.w	80032dc <ReceiveData_Transmit+0xc74>
 800299e:	2bc1      	cmp	r3, #193	; 0xc1
 80029a0:	dac5      	bge.n	800292e <ReceiveData_Transmit+0x2c6>
		break;
 80029a2:	f000 bc9b 	b.w	80032dc <ReceiveData_Transmit+0xc74>
		printf("case : 0x01\r\n");
 80029a6:	4877      	ldr	r0, [pc, #476]	; (8002b84 <ReceiveData_Transmit+0x51c>)
 80029a8:	f007 fa2e 	bl	8009e08 <puts>
		if(ud->mode_state==1 && ud->run_state==0){
 80029ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ae:	789b      	ldrb	r3, [r3, #2]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	f040 8494 	bne.w	80032e0 <ReceiveData_Transmit+0xc78>
 80029b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ba:	795b      	ldrb	r3, [r3, #5]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f040 848e 	bne.w	80032e0 <ReceiveData_Transmit+0xc78>
			robot_arm->axis[0].state_change = 1;
 80029c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			robot_arm->axis[1].state_change = 1;
 80029cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
			robot_arm->axis[0].state = 1;
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			robot_arm->axis[1].state = 1;
 80029dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
			while(!(robot_arm->axis[0].end_state) && !(robot_arm->axis[1].end_state)){}
 80029e4:	bf00      	nop
 80029e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e8:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d104      	bne.n	80029fa <ReceiveData_Transmit+0x392>
 80029f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f2:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f5      	beq.n	80029e6 <ReceiveData_Transmit+0x37e>
			pack_cmd(&robot_arm->axis[0],0.0, 0.0, 0.0, Motion_KI, 0.0);
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	ed9f 2a62 	vldr	s4, [pc, #392]	; 8002b88 <ReceiveData_Transmit+0x520>
 8002a00:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8002a04:	ed9f 1a60 	vldr	s2, [pc, #384]	; 8002b88 <ReceiveData_Transmit+0x520>
 8002a08:	eddf 0a5f 	vldr	s1, [pc, #380]	; 8002b88 <ReceiveData_Transmit+0x520>
 8002a0c:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8002b88 <ReceiveData_Transmit+0x520>
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff f97d 	bl	8001d10 <pack_cmd>
			BLDC_CANTx(&robot_arm->axis[0]);
 8002a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fe fbeb 	bl	80011f4 <BLDC_CANTx>
			unpack_reply(&robot_arm->axis[0]);
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fa55 	bl	8001ed0 <unpack_reply>
			printf("axis[0]_getpos : %lf\r\n",robot_arm->axis[0].position);
 8002a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fd fdac 	bl	8000588 <__aeabi_f2d>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4855      	ldr	r0, [pc, #340]	; (8002b8c <ReceiveData_Transmit+0x524>)
 8002a36:	f007 f961 	bl	8009cfc <iprintf>
			pack_cmd(&robot_arm->axis[0],robot_arm->axis[0].position, 0.0, MAX_KP, Motion_KI, 0.0);
 8002a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a42:	ed9f 2a51 	vldr	s4, [pc, #324]	; 8002b88 <ReceiveData_Transmit+0x520>
 8002a46:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8002a4a:	ed9f 1a51 	vldr	s2, [pc, #324]	; 8002b90 <ReceiveData_Transmit+0x528>
 8002a4e:	eddf 0a4e 	vldr	s1, [pc, #312]	; 8002b88 <ReceiveData_Transmit+0x520>
 8002a52:	eeb0 0a67 	vmov.f32	s0, s15
 8002a56:	4610      	mov	r0, r2
 8002a58:	f7ff f95a 	bl	8001d10 <pack_cmd>
			BLDC_CANTx(&robot_arm->axis[0]);
 8002a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe fbc8 	bl	80011f4 <BLDC_CANTx>
			pack_cmd(&robot_arm->axis[1],0.0, 0.0, 0.0, Motion_KI, 0.0);
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	334c      	adds	r3, #76	; 0x4c
 8002a68:	ed9f 2a47 	vldr	s4, [pc, #284]	; 8002b88 <ReceiveData_Transmit+0x520>
 8002a6c:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8002a70:	ed9f 1a45 	vldr	s2, [pc, #276]	; 8002b88 <ReceiveData_Transmit+0x520>
 8002a74:	eddf 0a44 	vldr	s1, [pc, #272]	; 8002b88 <ReceiveData_Transmit+0x520>
 8002a78:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8002b88 <ReceiveData_Transmit+0x520>
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff f947 	bl	8001d10 <pack_cmd>
			BLDC_CANTx(&robot_arm->axis[1]);
 8002a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a84:	334c      	adds	r3, #76	; 0x4c
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fe fbb4 	bl	80011f4 <BLDC_CANTx>
			unpack_reply(&robot_arm->axis[1]);
 8002a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8e:	334c      	adds	r3, #76	; 0x4c
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fa1d 	bl	8001ed0 <unpack_reply>
			printf("axis[1]_getpos : %lf\r\n",robot_arm->axis[1].position);
 8002a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fd fd74 	bl	8000588 <__aeabi_f2d>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	483b      	ldr	r0, [pc, #236]	; (8002b94 <ReceiveData_Transmit+0x52c>)
 8002aa6:	f007 f929 	bl	8009cfc <iprintf>
			pack_cmd(&robot_arm->axis[1],robot_arm->axis[1].position, 0.0, MAX_KP, Motion_KI, 0.0);
 8002aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aac:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8002ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002ab6:	ed9f 2a34 	vldr	s4, [pc, #208]	; 8002b88 <ReceiveData_Transmit+0x520>
 8002aba:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8002abe:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8002b90 <ReceiveData_Transmit+0x528>
 8002ac2:	eddf 0a31 	vldr	s1, [pc, #196]	; 8002b88 <ReceiveData_Transmit+0x520>
 8002ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8002aca:	4610      	mov	r0, r2
 8002acc:	f7ff f920 	bl	8001d10 <pack_cmd>
			BLDC_CANTx(&robot_arm->axis[1]);
 8002ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad2:	334c      	adds	r3, #76	; 0x4c
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe fb8d 	bl	80011f4 <BLDC_CANTx>
			HAL_Delay(100);
 8002ada:	2064      	movs	r0, #100	; 0x64
 8002adc:	f002 f990 	bl	8004e00 <HAL_Delay>
			robot_arm->axis2.firstpos=180*100;
 8002ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae2:	4a2d      	ldr	r2, [pc, #180]	; (8002b98 <ReceiveData_Transmit+0x530>)
 8002ae4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
			robot_arm->axis2.target_position=90*100;
 8002ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aea:	f242 3228 	movw	r2, #9000	; 0x2328
 8002aee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			robot_arm->axis2.motion_state=1;
 8002af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			RMD_calculatuin(robot_arm);
 8002afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002afc:	f7fe fcac 	bl	8001458 <RMD_calculatuin>
			while(!(robot_arm->axis2.end_state)){}
 8002b00:	bf00      	nop
 8002b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b04:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0fa      	beq.n	8002b02 <ReceiveData_Transmit+0x49a>
			printf("MotionOK\r\n");
 8002b0c:	4823      	ldr	r0, [pc, #140]	; (8002b9c <ReceiveData_Transmit+0x534>)
 8002b0e:	f007 f97b 	bl	8009e08 <puts>
			robot_arm->axis2.offset=(int)round((100.0/360.0)*65535.0);
 8002b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b14:	f244 721c 	movw	r2, #18204	; 0x471c
 8002b18:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			robot_arm->axis2.offset_state = 1;
 8002b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
			RMD_calculatuin(robot_arm);
 8002b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b26:	f7fe fc97 	bl	8001458 <RMD_calculatuin>
			ud->stanby_state = 1;
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	719a      	strb	r2, [r3, #6]
			ud->run_state = 1;
 8002b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b32:	2201      	movs	r2, #1
 8002b34:	715a      	strb	r2, [r3, #5]
		break;
 8002b36:	e3d3      	b.n	80032e0 <ReceiveData_Transmit+0xc78>
		if(ud->mode_state==1 && ud->stanby_state==1){
 8002b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3a:	789b      	ldrb	r3, [r3, #2]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	f040 83d0 	bne.w	80032e4 <ReceiveData_Transmit+0xc7c>
 8002b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b46:	799b      	ldrb	r3, [r3, #6]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	f040 83ca 	bne.w	80032e4 <ReceiveData_Transmit+0xc7c>
			printf("case : 0x02\r\n");
 8002b50:	4813      	ldr	r0, [pc, #76]	; (8002ba0 <ReceiveData_Transmit+0x538>)
 8002b52:	f007 f959 	bl	8009e08 <puts>
			robot_arm->axis[0].state_change = 1;
 8002b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			robot_arm->axis[1].state_change = 1;
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
			robot_arm->axis[0].state = 0;
 8002b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			robot_arm->axis[1].state = 0;
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
			ud->run_state = 0;
 8002b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b78:	2200      	movs	r2, #0
 8002b7a:	715a      	strb	r2, [r3, #5]
		break;
 8002b7c:	e3b2      	b.n	80032e4 <ReceiveData_Transmit+0xc7c>
 8002b7e:	bf00      	nop
 8002b80:	20000000 	.word	0x20000000
 8002b84:	0800de80 	.word	0x0800de80
 8002b88:	00000000 	.word	0x00000000
 8002b8c:	0800de90 	.word	0x0800de90
 8002b90:	437a0000 	.word	0x437a0000
 8002b94:	0800dea8 	.word	0x0800dea8
 8002b98:	468ca000 	.word	0x468ca000
 8002b9c:	0800dec0 	.word	0x0800dec0
 8002ba0:	0800decc 	.word	0x0800decc
		printf("case : 0x03\r\n");
 8002ba4:	48a3      	ldr	r0, [pc, #652]	; (8002e34 <ReceiveData_Transmit+0x7cc>)
 8002ba6:	f007 f92f 	bl	8009e08 <puts>
		if(ud->coordinate_state==1 && ud->mode_wait_flag==1 && ud->run_state==1 && ud->stanby_state==0){
 8002baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d12e      	bne.n	8002c12 <ReceiveData_Transmit+0x5aa>
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb6:	791b      	ldrb	r3, [r3, #4]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d129      	bne.n	8002c12 <ReceiveData_Transmit+0x5aa>
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc0:	795b      	ldrb	r3, [r3, #5]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d124      	bne.n	8002c12 <ReceiveData_Transmit+0x5aa>
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	799b      	ldrb	r3, [r3, #6]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d11f      	bne.n	8002c12 <ReceiveData_Transmit+0x5aa>
			printf("arm_running\r\n");
 8002bd2:	4899      	ldr	r0, [pc, #612]	; (8002e38 <ReceiveData_Transmit+0x7d0>)
 8002bd4:	f007 f918 	bl	8009e08 <puts>
			BLDC_calculatuin(robot_arm);
 8002bd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bda:	f7fe fb6d 	bl	80012b8 <BLDC_calculatuin>
			while(!(robot_arm->axis[0].end_state) && !(robot_arm->axis[1].end_state)){}
 8002bde:	bf00      	nop
 8002be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d104      	bne.n	8002bf4 <ReceiveData_Transmit+0x58c>
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f5      	beq.n	8002be0 <ReceiveData_Transmit+0x578>
			robot_arm->axis2.target_position=90*100;
 8002bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf6:	f242 3228 	movw	r2, #9000	; 0x2328
 8002bfa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			robot_arm->axis2.motion_state = 1;
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			RMD_calculatuin(robot_arm);
 8002c06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c08:	f7fe fc26 	bl	8001458 <RMD_calculatuin>
			ud->coordinate_run = 1;
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0e:	2201      	movs	r2, #1
 8002c10:	705a      	strb	r2, [r3, #1]
		printf("motion_state : %d\r\n",ud->coordinate_state);
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4888      	ldr	r0, [pc, #544]	; (8002e3c <ReceiveData_Transmit+0x7d4>)
 8002c1c:	f007 f86e 	bl	8009cfc <iprintf>
		printf("mode_wait_flag : %d\r\n",ud->mode_wait_flag);
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	791b      	ldrb	r3, [r3, #4]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	4619      	mov	r1, r3
 8002c28:	4885      	ldr	r0, [pc, #532]	; (8002e40 <ReceiveData_Transmit+0x7d8>)
 8002c2a:	f007 f867 	bl	8009cfc <iprintf>
		printf("run_state : %d\r\n",ud->run_state);
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c30:	795b      	ldrb	r3, [r3, #5]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	4619      	mov	r1, r3
 8002c36:	4883      	ldr	r0, [pc, #524]	; (8002e44 <ReceiveData_Transmit+0x7dc>)
 8002c38:	f007 f860 	bl	8009cfc <iprintf>
		printf("stanby_state : %d\r\n",ud->stanby_state);
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3e:	799b      	ldrb	r3, [r3, #6]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	4619      	mov	r1, r3
 8002c44:	4880      	ldr	r0, [pc, #512]	; (8002e48 <ReceiveData_Transmit+0x7e0>)
 8002c46:	f007 f859 	bl	8009cfc <iprintf>
		ud->mode_wait_flag=1;
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	711a      	strb	r2, [r3, #4]
		break;
 8002c50:	e365      	b.n	800331e <ReceiveData_Transmit+0xcb6>
		if(ud->mode_state==1 && ud->run_state==1){
 8002c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c54:	789b      	ldrb	r3, [r3, #2]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	f040 8345 	bne.w	80032e8 <ReceiveData_Transmit+0xc80>
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c60:	795b      	ldrb	r3, [r3, #5]
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	f040 833f 	bne.w	80032e8 <ReceiveData_Transmit+0xc80>
			printf("case : 0x04\r\n");
 8002c6a:	4878      	ldr	r0, [pc, #480]	; (8002e4c <ReceiveData_Transmit+0x7e4>)
 8002c6c:	f007 f8cc 	bl	8009e08 <puts>
			if(ud->stanby_state==1){
 8002c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c72:	799b      	ldrb	r3, [r3, #6]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d141      	bne.n	8002cfe <ReceiveData_Transmit+0x696>
				robot_arm->axis[0].target_position=(-robot_arm->axis[0].position);
 8002c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c80:	eef1 7a67 	vneg.f32	s15, s15
 8002c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c86:	edc3 7a03 	vstr	s15, [r3, #12]
				robot_arm->axis[1].target_position=0.0;
 8002c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	659a      	str	r2, [r3, #88]	; 0x58
				printf("axis[0]target_position : %lf\r\n",robot_arm->axis[0].target_position);
 8002c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fc76 	bl	8000588 <__aeabi_f2d>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	486b      	ldr	r0, [pc, #428]	; (8002e50 <ReceiveData_Transmit+0x7e8>)
 8002ca2:	f007 f82b 	bl	8009cfc <iprintf>
				printf("axis[1]target_position : %lf\r\n",robot_arm->axis[1].target_position);
 8002ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fd fc6c 	bl	8000588 <__aeabi_f2d>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4867      	ldr	r0, [pc, #412]	; (8002e54 <ReceiveData_Transmit+0x7ec>)
 8002cb6:	f007 f821 	bl	8009cfc <iprintf>
				printf("axis[0]position : %lf\r\n",robot_arm->axis[0].position);
 8002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd fc62 	bl	8000588 <__aeabi_f2d>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4863      	ldr	r0, [pc, #396]	; (8002e58 <ReceiveData_Transmit+0x7f0>)
 8002cca:	f007 f817 	bl	8009cfc <iprintf>
				printf("axis[1]position : %lf\r\n",robot_arm->axis[1].position);
 8002cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fd fc58 	bl	8000588 <__aeabi_f2d>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	485f      	ldr	r0, [pc, #380]	; (8002e5c <ReceiveData_Transmit+0x7f4>)
 8002cde:	f007 f80d 	bl	8009cfc <iprintf>
				BLDC_calculatuin(robot_arm);
 8002ce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ce4:	f7fe fae8 	bl	80012b8 <BLDC_calculatuin>
				while(!(robot_arm->axis[0].end_state) && !(robot_arm->axis[1].end_state)){}
 8002ce8:	bf00      	nop
 8002cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cec:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d104      	bne.n	8002cfe <ReceiveData_Transmit+0x696>
 8002cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf6:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f5      	beq.n	8002cea <ReceiveData_Transmit+0x682>
			BLDC_IK((float)origin_x,(float)origin_y,&robot_arm->axis[0].target_position,&robot_arm->axis[1].target_position);
 8002cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d00:	f103 020c 	add.w	r2, r3, #12
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d06:	3358      	adds	r3, #88	; 0x58
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	eddf 0a54 	vldr	s1, [pc, #336]	; 8002e60 <ReceiveData_Transmit+0x7f8>
 8002d10:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8002e64 <ReceiveData_Transmit+0x7fc>
 8002d14:	f000 ff9c 	bl	8003c50 <BLDC_IK>
			BLDC_calculatuin(robot_arm);
 8002d18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d1a:	f7fe facd 	bl	80012b8 <BLDC_calculatuin>
			printf("axis[0]target_position : %lf\r\n",robot_arm->axis[0].target_position);
 8002d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd fc30 	bl	8000588 <__aeabi_f2d>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4848      	ldr	r0, [pc, #288]	; (8002e50 <ReceiveData_Transmit+0x7e8>)
 8002d2e:	f006 ffe5 	bl	8009cfc <iprintf>
			printf("axis[1]target_position : %lf\r\n",robot_arm->axis[1].target_position);
 8002d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fd fc26 	bl	8000588 <__aeabi_f2d>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4844      	ldr	r0, [pc, #272]	; (8002e54 <ReceiveData_Transmit+0x7ec>)
 8002d42:	f006 ffdb 	bl	8009cfc <iprintf>
			printf("axis[0]position : %lf\r\n",robot_arm->axis[0].position);
 8002d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd fc1c 	bl	8000588 <__aeabi_f2d>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4840      	ldr	r0, [pc, #256]	; (8002e58 <ReceiveData_Transmit+0x7f0>)
 8002d56:	f006 ffd1 	bl	8009cfc <iprintf>
			printf("axis[1]position : %lf\r\n",robot_arm->axis[1].position);
 8002d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fd fc12 	bl	8000588 <__aeabi_f2d>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	483c      	ldr	r0, [pc, #240]	; (8002e5c <ReceiveData_Transmit+0x7f4>)
 8002d6a:	f006 ffc7 	bl	8009cfc <iprintf>
			while(!(robot_arm->axis[0].end_state) && !(robot_arm->axis[1].end_state)){}
 8002d6e:	bf00      	nop
 8002d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d72:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d104      	bne.n	8002d84 <ReceiveData_Transmit+0x71c>
 8002d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7c:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f5      	beq.n	8002d70 <ReceiveData_Transmit+0x708>
			robot_arm->axis2.target_position=90*100;
 8002d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d86:	f242 3228 	movw	r2, #9000	; 0x2328
 8002d8a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			robot_arm->axis2.motion_state=1;
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			RMD_calculatuin(robot_arm);
 8002d96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d98:	f7fe fb5e 	bl	8001458 <RMD_calculatuin>
			ud->stanby_state = 0;
 8002d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9e:	2200      	movs	r2, #0
 8002da0:	719a      	strb	r2, [r3, #6]
		break;
 8002da2:	e2a1      	b.n	80032e8 <ReceiveData_Transmit+0xc80>
		if(ud->mode_state==1 && ud->run_state==1){
 8002da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da6:	789b      	ldrb	r3, [r3, #2]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	f040 829e 	bne.w	80032ec <ReceiveData_Transmit+0xc84>
 8002db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db2:	795b      	ldrb	r3, [r3, #5]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	f040 8298 	bne.w	80032ec <ReceiveData_Transmit+0xc84>
			printf("case : 0x05\r\n");
 8002dbc:	482a      	ldr	r0, [pc, #168]	; (8002e68 <ReceiveData_Transmit+0x800>)
 8002dbe:	f007 f823 	bl	8009e08 <puts>
			robot_arm->axis[0].target_position=0.0;
 8002dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	60da      	str	r2, [r3, #12]
			robot_arm->axis[1].target_position=M_PI;
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	4a27      	ldr	r2, [pc, #156]	; (8002e6c <ReceiveData_Transmit+0x804>)
 8002dce:	659a      	str	r2, [r3, #88]	; 0x58
			BLDC_calculatuin(robot_arm);
 8002dd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dd2:	f7fe fa71 	bl	80012b8 <BLDC_calculatuin>
			while(!(robot_arm->axis[0].end_state) && !(robot_arm->axis[1].end_state)){}
 8002dd6:	bf00      	nop
 8002dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dda:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d104      	bne.n	8002dec <ReceiveData_Transmit+0x784>
 8002de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de4:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f5      	beq.n	8002dd8 <ReceiveData_Transmit+0x770>
			robot_arm->axis2.target_position=90*100;
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	f242 3228 	movw	r2, #9000	; 0x2328
 8002df2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			robot_arm->axis2.motion_state=1;
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			RMD_calculatuin(robot_arm);
 8002dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e00:	f7fe fb2a 	bl	8001458 <RMD_calculatuin>
			printf("axis[0]target_position : %lf\r\n",robot_arm->axis[0].target_position);
 8002e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fd fbbd 	bl	8000588 <__aeabi_f2d>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	480f      	ldr	r0, [pc, #60]	; (8002e50 <ReceiveData_Transmit+0x7e8>)
 8002e14:	f006 ff72 	bl	8009cfc <iprintf>
			printf("axis[1]target_position : %lf\r\n",robot_arm->axis[1].target_position);
 8002e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd fbb3 	bl	8000588 <__aeabi_f2d>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	480b      	ldr	r0, [pc, #44]	; (8002e54 <ReceiveData_Transmit+0x7ec>)
 8002e28:	f006 ff68 	bl	8009cfc <iprintf>
			ud->stanby_state = 1;
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2e:	2201      	movs	r2, #1
 8002e30:	719a      	strb	r2, [r3, #6]
		break;
 8002e32:	e25b      	b.n	80032ec <ReceiveData_Transmit+0xc84>
 8002e34:	0800dedc 	.word	0x0800dedc
 8002e38:	0800deec 	.word	0x0800deec
 8002e3c:	0800defc 	.word	0x0800defc
 8002e40:	0800df10 	.word	0x0800df10
 8002e44:	0800df28 	.word	0x0800df28
 8002e48:	0800df3c 	.word	0x0800df3c
 8002e4c:	0800df50 	.word	0x0800df50
 8002e50:	0800dd70 	.word	0x0800dd70
 8002e54:	0800dd90 	.word	0x0800dd90
 8002e58:	0800df60 	.word	0x0800df60
 8002e5c:	0800df78 	.word	0x0800df78
 8002e60:	43960000 	.word	0x43960000
 8002e64:	00000000 	.word	0x00000000
 8002e68:	0800df90 	.word	0x0800df90
 8002e6c:	40490fdb 	.word	0x40490fdb
		if(ud->mode_state==1 && ud->run_state==1 && ud->stanby_state == 1){
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	789b      	ldrb	r3, [r3, #2]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	f040 823a 	bne.w	80032f0 <ReceiveData_Transmit+0xc88>
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	795b      	ldrb	r3, [r3, #5]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	f040 8234 	bne.w	80032f0 <ReceiveData_Transmit+0xc88>
 8002e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8a:	799b      	ldrb	r3, [r3, #6]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	f040 822e 	bne.w	80032f0 <ReceiveData_Transmit+0xc88>
			printf("case : 0x06\r\n");
 8002e94:	489f      	ldr	r0, [pc, #636]	; (8003114 <ReceiveData_Transmit+0xaac>)
 8002e96:	f006 ffb7 	bl	8009e08 <puts>
			robot_arm->axis[0].target_position=0.0;
 8002e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	60da      	str	r2, [r3, #12]
			robot_arm->axis[1].target_position=0.0;
 8002ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	659a      	str	r2, [r3, #88]	; 0x58
			BLDC_calculatuin(robot_arm);
 8002eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eac:	f7fe fa04 	bl	80012b8 <BLDC_calculatuin>
			while(!(robot_arm->axis[0].end_state) && !(robot_arm->axis[1].end_state)){}
 8002eb0:	bf00      	nop
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d104      	bne.n	8002ec6 <ReceiveData_Transmit+0x85e>
 8002ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebe:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f5      	beq.n	8002eb2 <ReceiveData_Transmit+0x84a>
			robot_arm->axis2.target_position=90*100;
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	f242 3228 	movw	r2, #9000	; 0x2328
 8002ecc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			robot_arm->axis2.motion_state=1;
 8002ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			RMD_calculatuin(robot_arm);
 8002ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eda:	f7fe fabd 	bl	8001458 <RMD_calculatuin>
			printf("axis[0]target_position : %lf\r\n",robot_arm->axis[0].target_position);
 8002ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fd fb50 	bl	8000588 <__aeabi_f2d>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	488a      	ldr	r0, [pc, #552]	; (8003118 <ReceiveData_Transmit+0xab0>)
 8002eee:	f006 ff05 	bl	8009cfc <iprintf>
			printf("axis[1]target_position : %lf\r\n",robot_arm->axis[1].target_position);
 8002ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd fb46 	bl	8000588 <__aeabi_f2d>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4886      	ldr	r0, [pc, #536]	; (800311c <ReceiveData_Transmit+0xab4>)
 8002f02:	f006 fefb 	bl	8009cfc <iprintf>
			ud->stanby_state = 0;
 8002f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f08:	2200      	movs	r2, #0
 8002f0a:	719a      	strb	r2, [r3, #6]
		break;
 8002f0c:	e1f0      	b.n	80032f0 <ReceiveData_Transmit+0xc88>
		if(ud->mode_state==1 && ud->run_state==1){
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f10:	789b      	ldrb	r3, [r3, #2]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	f040 81ed 	bne.w	80032f4 <ReceiveData_Transmit+0xc8c>
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	795b      	ldrb	r3, [r3, #5]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	f040 81e7 	bne.w	80032f4 <ReceiveData_Transmit+0xc8c>
			ud->stanby_state = 0;
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f28:	2200      	movs	r2, #0
 8002f2a:	719a      	strb	r2, [r3, #6]
		break;
 8002f2c:	e1e2      	b.n	80032f4 <ReceiveData_Transmit+0xc8c>
		if(ud->mode_state==1 && ud->run_state==1){
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f30:	789b      	ldrb	r3, [r3, #2]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	f040 81df 	bne.w	80032f8 <ReceiveData_Transmit+0xc90>
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3c:	795b      	ldrb	r3, [r3, #5]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	f040 81d9 	bne.w	80032f8 <ReceiveData_Transmit+0xc90>
			ud->stanby_state = 0;
 8002f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f48:	2200      	movs	r2, #0
 8002f4a:	719a      	strb	r2, [r3, #6]
		break;
 8002f4c:	e1d4      	b.n	80032f8 <ReceiveData_Transmit+0xc90>
		if(ud->mode_state==1 && ud->run_state==1){
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f50:	789b      	ldrb	r3, [r3, #2]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	f040 81d1 	bne.w	80032fc <ReceiveData_Transmit+0xc94>
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	795b      	ldrb	r3, [r3, #5]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	f040 81cb 	bne.w	80032fc <ReceiveData_Transmit+0xc94>
			BLDC_IK((float)origin_x,(float)origin_y,&robot_arm->axis[0].target_position,&robot_arm->axis[1].target_position);
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	f103 020c 	add.w	r2, r3, #12
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	3358      	adds	r3, #88	; 0x58
 8002f70:	4619      	mov	r1, r3
 8002f72:	4610      	mov	r0, r2
 8002f74:	eddf 0a6a 	vldr	s1, [pc, #424]	; 8003120 <ReceiveData_Transmit+0xab8>
 8002f78:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8003124 <ReceiveData_Transmit+0xabc>
 8002f7c:	f000 fe68 	bl	8003c50 <BLDC_IK>
			BLDC_calculatuin(robot_arm);
 8002f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f82:	f7fe f999 	bl	80012b8 <BLDC_calculatuin>
			ud->stanby_state = 1;
 8002f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f88:	2201      	movs	r2, #1
 8002f8a:	719a      	strb	r2, [r3, #6]
		break;
 8002f8c:	e1b6      	b.n	80032fc <ReceiveData_Transmit+0xc94>
		if(ud->coordinate_state==1 && ud->mode_wait_flag==1 && ud->run_state==1){
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d12b      	bne.n	8002ff0 <ReceiveData_Transmit+0x988>
 8002f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9a:	791b      	ldrb	r3, [r3, #4]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d126      	bne.n	8002ff0 <ReceiveData_Transmit+0x988>
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa4:	795b      	ldrb	r3, [r3, #5]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d121      	bne.n	8002ff0 <ReceiveData_Transmit+0x988>
			printf("case : 0x0A\r\n");
 8002fac:	485e      	ldr	r0, [pc, #376]	; (8003128 <ReceiveData_Transmit+0xac0>)
 8002fae:	f006 ff2b 	bl	8009e08 <puts>
			BLDC_calculatuin(robot_arm);
 8002fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fb4:	f7fe f980 	bl	80012b8 <BLDC_calculatuin>
			while(!(robot_arm->axis[0].end_state) && !(robot_arm->axis[1].end_state)){}
 8002fb8:	bf00      	nop
 8002fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbc:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d104      	bne.n	8002fce <ReceiveData_Transmit+0x966>
 8002fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc6:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f5      	beq.n	8002fba <ReceiveData_Transmit+0x952>
			prepareAbsoluteMovement(0, si->sending_step);
 8002fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f7ff f87f 	bl	80020d8 <prepareAbsoluteMovement>
			runAndWait();
 8002fda:	f7ff fa71 	bl	80024c0 <runAndWait>
			stepperHoming(0);
 8002fde:	2000      	movs	r0, #0
 8002fe0:	f7ff fa7e 	bl	80024e0 <stepperHoming>
			ud->stanby_state = 0;
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	719a      	strb	r2, [r3, #6]
			ud->coordinate_run = 1;
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	2201      	movs	r2, #1
 8002fee:	705a      	strb	r2, [r3, #1]
		ud->mode_wait_flag=1;
 8002ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	711a      	strb	r2, [r3, #4]
		break;
 8002ff6:	e192      	b.n	800331e <ReceiveData_Transmit+0xcb6>
		if(ud->coordinate_state==1 && ud->mode_wait_flag==1 && ud->run_state==1){
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d153      	bne.n	80030aa <ReceiveData_Transmit+0xa42>
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	791b      	ldrb	r3, [r3, #4]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b01      	cmp	r3, #1
 800300a:	d14e      	bne.n	80030aa <ReceiveData_Transmit+0xa42>
 800300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300e:	795b      	ldrb	r3, [r3, #5]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b01      	cmp	r3, #1
 8003014:	d149      	bne.n	80030aa <ReceiveData_Transmit+0xa42>
			printf("case : 0x0B\r\n");
 8003016:	4845      	ldr	r0, [pc, #276]	; (800312c <ReceiveData_Transmit+0xac4>)
 8003018:	f006 fef6 	bl	8009e08 <puts>
			BLDC_calculatuin(robot_arm);
 800301c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800301e:	f7fe f94b 	bl	80012b8 <BLDC_calculatuin>
			while(!(robot_arm->axis[0].end_state) && !(robot_arm->axis[1].end_state)){}
 8003022:	bf00      	nop
 8003024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003026:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800302a:	2b00      	cmp	r3, #0
 800302c:	d104      	bne.n	8003038 <ReceiveData_Transmit+0x9d0>
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003030:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0f5      	beq.n	8003024 <ReceiveData_Transmit+0x9bc>
			robot_arm->axis2.target_position=robot_arm->axis2.a1;
 8003038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800303e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003040:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			robot_arm->axis2.motion_state=1;
 8003044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003046:	2201      	movs	r2, #1
 8003048:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			RMD_calculatuin(robot_arm);
 800304c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800304e:	f7fe fa03 	bl	8001458 <RMD_calculatuin>
			while(!(robot_arm->axis2.end_state)){}
 8003052:	bf00      	nop
 8003054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003056:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0fa      	beq.n	8003054 <ReceiveData_Transmit+0x9ec>
			prepareAbsoluteMovement(0, si->sending_step);
 800305e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003062:	4619      	mov	r1, r3
 8003064:	2000      	movs	r0, #0
 8003066:	f7ff f837 	bl	80020d8 <prepareAbsoluteMovement>
			runAndWait();
 800306a:	f7ff fa29 	bl	80024c0 <runAndWait>
			robot_arm->axis2.target_position=robot_arm->axis2.a2;
 800306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003070:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8003074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003076:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			robot_arm->axis2.motion_state=1;
 800307a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307c:	2201      	movs	r2, #1
 800307e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			RMD_calculatuin(robot_arm);
 8003082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003084:	f7fe f9e8 	bl	8001458 <RMD_calculatuin>
			while(!(robot_arm->axis2.end_state)){}
 8003088:	bf00      	nop
 800308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308c:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0fa      	beq.n	800308a <ReceiveData_Transmit+0xa22>
			stepperHoming(0);
 8003094:	2000      	movs	r0, #0
 8003096:	f7ff fa23 	bl	80024e0 <stepperHoming>
			runAndWait();
 800309a:	f7ff fa11 	bl	80024c0 <runAndWait>
			ud->stanby_state = 0;
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a0:	2200      	movs	r2, #0
 80030a2:	719a      	strb	r2, [r3, #6]
			ud->coordinate_run = 1;
 80030a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a6:	2201      	movs	r2, #1
 80030a8:	705a      	strb	r2, [r3, #1]
		ud->mode_wait_flag=1;
 80030aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ac:	2201      	movs	r2, #1
 80030ae:	711a      	strb	r2, [r3, #4]
		break;
 80030b0:	e135      	b.n	800331e <ReceiveData_Transmit+0xcb6>
		if(ud->mode_state==1 && ud->run_state==1){
 80030b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b4:	789b      	ldrb	r3, [r3, #2]
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	f040 8121 	bne.w	8003300 <ReceiveData_Transmit+0xc98>
 80030be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c0:	795b      	ldrb	r3, [r3, #5]
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	f040 811b 	bne.w	8003300 <ReceiveData_Transmit+0xc98>
			printf("case : 0x0C\r\n");
 80030ca:	4819      	ldr	r0, [pc, #100]	; (8003130 <ReceiveData_Transmit+0xac8>)
 80030cc:	f006 fe9c 	bl	8009e08 <puts>
			prepareAbsoluteMovement(0, si->sending_step);
 80030d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d4:	4619      	mov	r1, r3
 80030d6:	2000      	movs	r0, #0
 80030d8:	f7fe fffe 	bl	80020d8 <prepareAbsoluteMovement>
			runAndWait();
 80030dc:	f7ff f9f0 	bl	80024c0 <runAndWait>
			ud->stanby_state = 0;
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	2200      	movs	r2, #0
 80030e4:	719a      	strb	r2, [r3, #6]
		break;
 80030e6:	e10b      	b.n	8003300 <ReceiveData_Transmit+0xc98>
		if(ud->mode_state==1 && ud->run_state==1){
 80030e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ea:	789b      	ldrb	r3, [r3, #2]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	f040 8108 	bne.w	8003304 <ReceiveData_Transmit+0xc9c>
 80030f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f6:	795b      	ldrb	r3, [r3, #5]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	f040 8102 	bne.w	8003304 <ReceiveData_Transmit+0xc9c>
			printf("case : 0x0D\r\n");
 8003100:	480c      	ldr	r0, [pc, #48]	; (8003134 <ReceiveData_Transmit+0xacc>)
 8003102:	f006 fe81 	bl	8009e08 <puts>
			stepperHoming(0);
 8003106:	2000      	movs	r0, #0
 8003108:	f7ff f9ea 	bl	80024e0 <stepperHoming>
			ud->stanby_state = 0;
 800310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310e:	2200      	movs	r2, #0
 8003110:	719a      	strb	r2, [r3, #6]
		break;
 8003112:	e0f7      	b.n	8003304 <ReceiveData_Transmit+0xc9c>
 8003114:	0800dfa0 	.word	0x0800dfa0
 8003118:	0800dd70 	.word	0x0800dd70
 800311c:	0800dd90 	.word	0x0800dd90
 8003120:	43960000 	.word	0x43960000
 8003124:	00000000 	.word	0x00000000
 8003128:	0800dfb0 	.word	0x0800dfb0
 800312c:	0800dfc0 	.word	0x0800dfc0
 8003130:	0800dfd0 	.word	0x0800dfd0
 8003134:	0800dfe0 	.word	0x0800dfe0
		if(ud->mode_state==1 && ud->run_state==1){
 8003138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313a:	789b      	ldrb	r3, [r3, #2]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b01      	cmp	r3, #1
 8003140:	f040 80e2 	bne.w	8003308 <ReceiveData_Transmit+0xca0>
 8003144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003146:	795b      	ldrb	r3, [r3, #5]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b01      	cmp	r3, #1
 800314c:	f040 80dc 	bne.w	8003308 <ReceiveData_Transmit+0xca0>
			printf("case : 0xC1\r\n");
 8003150:	4886      	ldr	r0, [pc, #536]	; (800336c <ReceiveData_Transmit+0xd04>)
 8003152:	f006 fe59 	bl	8009e08 <puts>
			BLDC_IK((float)1000.0,(float)1000.0,&robot_arm->axis[0].target_position,&robot_arm->axis[1].target_position);
 8003156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003158:	f103 020c 	add.w	r2, r3, #12
 800315c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315e:	3358      	adds	r3, #88	; 0x58
 8003160:	4619      	mov	r1, r3
 8003162:	4610      	mov	r0, r2
 8003164:	eddf 0a82 	vldr	s1, [pc, #520]	; 8003370 <ReceiveData_Transmit+0xd08>
 8003168:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8003370 <ReceiveData_Transmit+0xd08>
 800316c:	f000 fd70 	bl	8003c50 <BLDC_IK>
			printf("axis[0]target_position : %lf\r\n",robot_arm->axis[0].target_position);
 8003170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd fa07 	bl	8000588 <__aeabi_f2d>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	487d      	ldr	r0, [pc, #500]	; (8003374 <ReceiveData_Transmit+0xd0c>)
 8003180:	f006 fdbc 	bl	8009cfc <iprintf>
			printf("axis[1]target_position : %lf\r\n",robot_arm->axis[1].target_position);
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003188:	4618      	mov	r0, r3
 800318a:	f7fd f9fd 	bl	8000588 <__aeabi_f2d>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4879      	ldr	r0, [pc, #484]	; (8003378 <ReceiveData_Transmit+0xd10>)
 8003194:	f006 fdb2 	bl	8009cfc <iprintf>
			BLDC_FK(robot_arm->axis[0].target_position,robot_arm->axis[1].target_position,&fkrd[0],&fkrd[1]);
 8003198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319a:	edd3 7a03 	vldr	s15, [r3, #12]
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a0:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80031a4:	f107 030c 	add.w	r3, r7, #12
 80031a8:	1d1a      	adds	r2, r3, #4
 80031aa:	f107 030c 	add.w	r3, r7, #12
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	eef0 0a47 	vmov.f32	s1, s14
 80031b6:	eeb0 0a67 	vmov.f32	s0, s15
 80031ba:	f000 fc9f 	bl	8003afc <BLDC_FK>
			printf("fkrd[0] : %lf\r\n",fkrd[0]);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fd f9e1 	bl	8000588 <__aeabi_f2d>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	486c      	ldr	r0, [pc, #432]	; (800337c <ReceiveData_Transmit+0xd14>)
 80031cc:	f006 fd96 	bl	8009cfc <iprintf>
			printf("fkrd[1] : %lf\r\n",fkrd[1]);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd f9d8 	bl	8000588 <__aeabi_f2d>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4868      	ldr	r0, [pc, #416]	; (8003380 <ReceiveData_Transmit+0xd18>)
 80031de:	f006 fd8d 	bl	8009cfc <iprintf>
			BLDC_calculatuin(robot_arm);
 80031e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031e4:	f7fe f868 	bl	80012b8 <BLDC_calculatuin>
		break;
 80031e8:	e08e      	b.n	8003308 <ReceiveData_Transmit+0xca0>
		if(ud->mode_state==1 && ud->run_state==1){
 80031ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ec:	789b      	ldrb	r3, [r3, #2]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	f040 808b 	bne.w	800330c <ReceiveData_Transmit+0xca4>
 80031f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f8:	795b      	ldrb	r3, [r3, #5]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	f040 8085 	bne.w	800330c <ReceiveData_Transmit+0xca4>
			printf("case : 0xC2\r\n");
 8003202:	4860      	ldr	r0, [pc, #384]	; (8003384 <ReceiveData_Transmit+0xd1c>)
 8003204:	f006 fe00 	bl	8009e08 <puts>
			prepareAbsoluteMovement(0, -10000);
 8003208:	495f      	ldr	r1, [pc, #380]	; (8003388 <ReceiveData_Transmit+0xd20>)
 800320a:	2000      	movs	r0, #0
 800320c:	f7fe ff64 	bl	80020d8 <prepareAbsoluteMovement>
			runAndWait();
 8003210:	f7ff f956 	bl	80024c0 <runAndWait>
			HAL_Delay(100);
 8003214:	2064      	movs	r0, #100	; 0x64
 8003216:	f001 fdf3 	bl	8004e00 <HAL_Delay>
		break;
 800321a:	e077      	b.n	800330c <ReceiveData_Transmit+0xca4>
		if(ud->mode_state==1 && ud->run_state==1){
 800321c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321e:	789b      	ldrb	r3, [r3, #2]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b01      	cmp	r3, #1
 8003224:	d174      	bne.n	8003310 <ReceiveData_Transmit+0xca8>
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	795b      	ldrb	r3, [r3, #5]
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b01      	cmp	r3, #1
 800322e:	d16f      	bne.n	8003310 <ReceiveData_Transmit+0xca8>
			printf("case : 0xC3\r\n");
 8003230:	4856      	ldr	r0, [pc, #344]	; (800338c <ReceiveData_Transmit+0xd24>)
 8003232:	f006 fde9 	bl	8009e08 <puts>
			printf("case:1\r\n");
 8003236:	4856      	ldr	r0, [pc, #344]	; (8003390 <ReceiveData_Transmit+0xd28>)
 8003238:	f006 fde6 	bl	8009e08 <puts>
			stepperHoming(0);
 800323c:	2000      	movs	r0, #0
 800323e:	f7ff f94f 	bl	80024e0 <stepperHoming>
		break;
 8003242:	e065      	b.n	8003310 <ReceiveData_Transmit+0xca8>
		if(ud->mode_state==1 && ud->run_state==1){
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	789b      	ldrb	r3, [r3, #2]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d162      	bne.n	8003314 <ReceiveData_Transmit+0xcac>
 800324e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003250:	795b      	ldrb	r3, [r3, #5]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b01      	cmp	r3, #1
 8003256:	d15d      	bne.n	8003314 <ReceiveData_Transmit+0xcac>
			printf("case : 0xC4\r\n");
 8003258:	484e      	ldr	r0, [pc, #312]	; (8003394 <ReceiveData_Transmit+0xd2c>)
 800325a:	f006 fdd5 	bl	8009e08 <puts>
			robot_arm->axis2.target_position=0;
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	2200      	movs	r2, #0
 8003262:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			robot_arm->axis2.motion_state=1;
 8003266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003268:	2201      	movs	r2, #1
 800326a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			RMD_calculatuin(robot_arm);
 800326e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003270:	f7fe f8f2 	bl	8001458 <RMD_calculatuin>
		break;
 8003274:	e04e      	b.n	8003314 <ReceiveData_Transmit+0xcac>
		if(ud->mode_state==1 && ud->run_state==1){
 8003276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003278:	789b      	ldrb	r3, [r3, #2]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b01      	cmp	r3, #1
 800327e:	d14b      	bne.n	8003318 <ReceiveData_Transmit+0xcb0>
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	795b      	ldrb	r3, [r3, #5]
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b01      	cmp	r3, #1
 8003288:	d146      	bne.n	8003318 <ReceiveData_Transmit+0xcb0>
			printf("case : 0xC5\r\n");
 800328a:	4843      	ldr	r0, [pc, #268]	; (8003398 <ReceiveData_Transmit+0xd30>)
 800328c:	f006 fdbc 	bl	8009e08 <puts>
			robot_arm->axis2.target_position=10000;
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	f242 7210 	movw	r2, #10000	; 0x2710
 8003296:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			robot_arm->axis2.motion_state=1;
 800329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329c:	2201      	movs	r2, #1
 800329e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			RMD_calculatuin(robot_arm);
 80032a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032a4:	f7fe f8d8 	bl	8001458 <RMD_calculatuin>
		break;
 80032a8:	e036      	b.n	8003318 <ReceiveData_Transmit+0xcb0>
		if(ud->mode_state==1 && ud->run_state==1){
 80032aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ac:	789b      	ldrb	r3, [r3, #2]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d133      	bne.n	800331c <ReceiveData_Transmit+0xcb4>
 80032b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b6:	795b      	ldrb	r3, [r3, #5]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d12e      	bne.n	800331c <ReceiveData_Transmit+0xcb4>
			printf("case : 0xC6\r\n");
 80032be:	4837      	ldr	r0, [pc, #220]	; (800339c <ReceiveData_Transmit+0xd34>)
 80032c0:	f006 fda2 	bl	8009e08 <puts>
			robot_arm->axis2.motion_state=1;
 80032c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			robot_arm->axis2.PID_state=1;
 80032cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
			RMD_calculatuin(robot_arm);
 80032d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032d6:	f7fe f8bf 	bl	8001458 <RMD_calculatuin>
		break;
 80032da:	e01f      	b.n	800331c <ReceiveData_Transmit+0xcb4>
		break;
 80032dc:	bf00      	nop
 80032de:	e01e      	b.n	800331e <ReceiveData_Transmit+0xcb6>
		break;
 80032e0:	bf00      	nop
 80032e2:	e01c      	b.n	800331e <ReceiveData_Transmit+0xcb6>
		break;
 80032e4:	bf00      	nop
 80032e6:	e01a      	b.n	800331e <ReceiveData_Transmit+0xcb6>
		break;
 80032e8:	bf00      	nop
 80032ea:	e018      	b.n	800331e <ReceiveData_Transmit+0xcb6>
		break;
 80032ec:	bf00      	nop
 80032ee:	e016      	b.n	800331e <ReceiveData_Transmit+0xcb6>
		break;
 80032f0:	bf00      	nop
 80032f2:	e014      	b.n	800331e <ReceiveData_Transmit+0xcb6>
		break;
 80032f4:	bf00      	nop
 80032f6:	e012      	b.n	800331e <ReceiveData_Transmit+0xcb6>
		break;
 80032f8:	bf00      	nop
 80032fa:	e010      	b.n	800331e <ReceiveData_Transmit+0xcb6>
		break;
 80032fc:	bf00      	nop
 80032fe:	e00e      	b.n	800331e <ReceiveData_Transmit+0xcb6>
		break;
 8003300:	bf00      	nop
 8003302:	e00c      	b.n	800331e <ReceiveData_Transmit+0xcb6>
		break;
 8003304:	bf00      	nop
 8003306:	e00a      	b.n	800331e <ReceiveData_Transmit+0xcb6>
		break;
 8003308:	bf00      	nop
 800330a:	e008      	b.n	800331e <ReceiveData_Transmit+0xcb6>
		break;
 800330c:	bf00      	nop
 800330e:	e006      	b.n	800331e <ReceiveData_Transmit+0xcb6>
		break;
 8003310:	bf00      	nop
 8003312:	e004      	b.n	800331e <ReceiveData_Transmit+0xcb6>
		break;
 8003314:	bf00      	nop
 8003316:	e002      	b.n	800331e <ReceiveData_Transmit+0xcb6>
		break;
 8003318:	bf00      	nop
 800331a:	e000      	b.n	800331e <ReceiveData_Transmit+0xcb6>
		break;
 800331c:	bf00      	nop
	}
	if(ud->mode_wait_flag!=1){	//コマンドモードだけでの実行
 800331e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003320:	791b      	ldrb	r3, [r3, #4]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d003      	beq.n	8003330 <ReceiveData_Transmit+0xcc8>
		ud->mode_state=0;
 8003328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332a:	2200      	movs	r2, #0
 800332c:	709a      	strb	r2, [r3, #2]
	}else if(ud->coordinate_run != 1){
		ud->coordinate_state=0;	//座標への動作を実行する前に送られた座標は無視する
	}
//	SendAll(robot_arm);

}
 800332e:	e019      	b.n	8003364 <ReceiveData_Transmit+0xcfc>
	}else if(ud->coordinate_run == 1){	//コマンド＋座標での実行
 8003330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003332:	785b      	ldrb	r3, [r3, #1]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b01      	cmp	r3, #1
 8003338:	d10c      	bne.n	8003354 <ReceiveData_Transmit+0xcec>
		ud->mode_wait_flag=0;
 800333a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333c:	2200      	movs	r2, #0
 800333e:	711a      	strb	r2, [r3, #4]
		ud->mode_state=0;
 8003340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003342:	2200      	movs	r2, #0
 8003344:	709a      	strb	r2, [r3, #2]
		ud->coordinate_state=0;
 8003346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003348:	2200      	movs	r2, #0
 800334a:	701a      	strb	r2, [r3, #0]
		ud->coordinate_run=0;
 800334c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334e:	2200      	movs	r2, #0
 8003350:	705a      	strb	r2, [r3, #1]
}
 8003352:	e007      	b.n	8003364 <ReceiveData_Transmit+0xcfc>
	}else if(ud->coordinate_run != 1){
 8003354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003356:	785b      	ldrb	r3, [r3, #1]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b01      	cmp	r3, #1
 800335c:	d002      	beq.n	8003364 <ReceiveData_Transmit+0xcfc>
		ud->coordinate_state=0;	//座標への動作を実行する前に送られた座標は無視する
 800335e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]
}
 8003364:	bf00      	nop
 8003366:	3740      	adds	r7, #64	; 0x40
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	0800dff0 	.word	0x0800dff0
 8003370:	447a0000 	.word	0x447a0000
 8003374:	0800dd70 	.word	0x0800dd70
 8003378:	0800dd90 	.word	0x0800dd90
 800337c:	0800e000 	.word	0x0800e000
 8003380:	0800e010 	.word	0x0800e010
 8003384:	0800e020 	.word	0x0800e020
 8003388:	ffffd8f0 	.word	0xffffd8f0
 800338c:	0800e030 	.word	0x0800e030
 8003390:	0800e040 	.word	0x0800e040
 8003394:	0800e048 	.word	0x0800e048
 8003398:	0800e058 	.word	0x0800e058
 800339c:	0800e068 	.word	0x0800e068

080033a0 <SentData_Transmit>:
void SentData_Transmit(uint8_t sd[20]){
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	volatile UART_data* ud = &data;
 80033a8:	4b14      	ldr	r3, [pc, #80]	; (80033fc <SentData_Transmit+0x5c>)
 80033aa:	60bb      	str	r3, [r7, #8]
	sd[0]=0xAA;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	22aa      	movs	r2, #170	; 0xaa
 80033b0:	701a      	strb	r2, [r3, #0]
	sd[1]=ud->cmd;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3301      	adds	r3, #1
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	7a52      	ldrb	r2, [r2, #9]
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]
	sd[buffersize-1]=0xAA;
 80033be:	4b10      	ldr	r3, [pc, #64]	; (8003400 <SentData_Transmit+0x60>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	4413      	add	r3, r2
 80033c8:	22aa      	movs	r2, #170	; 0xaa
 80033ca:	701a      	strb	r2, [r3, #0]
	for(int i=2;i<buffersize-1;i++){
 80033cc:	2302      	movs	r3, #2
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	e007      	b.n	80033e2 <SentData_Transmit+0x42>
		sd[i]=0xFF;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	4413      	add	r3, r2
 80033d8:	22ff      	movs	r2, #255	; 0xff
 80033da:	701a      	strb	r2, [r3, #0]
	for(int i=2;i<buffersize-1;i++){
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3301      	adds	r3, #1
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	4b07      	ldr	r3, [pc, #28]	; (8003400 <SentData_Transmit+0x60>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	dbf1      	blt.n	80033d2 <SentData_Transmit+0x32>
	}
//	  return sd;
}
 80033ee:	bf00      	nop
 80033f0:	bf00      	nop
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	2000036c 	.word	0x2000036c
 8003400:	20000000 	.word	0x20000000

08003404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003408:	f001 fc88 	bl	8004d1c <HAL_Init>
//	setbuf(stdout, NULL);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800340c:	f000 f8ee 	bl	80035ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003410:	f000 fada 	bl	80039c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003414:	f000 faae 	bl	8003974 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8003418:	f000 f954 	bl	80036c4 <MX_CAN1_Init>
  MX_TIM3_Init();
 800341c:	f000 fa0c 	bl	8003838 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003420:	f000 fa7e 	bl	8003920 <MX_USART1_UART_Init>
  MX_CAN2_Init();
 8003424:	f000 f984 	bl	8003730 <MX_CAN2_Init>
  MX_TIM2_Init();
 8003428:	f000 f9b8 	bl	800379c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 800342c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003430:	f001 fce6 	bl	8004e00 <HAL_Delay>
  //Set stepper 1

  steppers[0].dirFunc = Dir0;
 8003434:	4b5e      	ldr	r3, [pc, #376]	; (80035b0 <main+0x1ac>)
 8003436:	4a5f      	ldr	r2, [pc, #380]	; (80035b4 <main+0x1b0>)
 8003438:	609a      	str	r2, [r3, #8]
  steppers[0].stepFunc = Step0;
 800343a:	4b5d      	ldr	r3, [pc, #372]	; (80035b0 <main+0x1ac>)
 800343c:	4a5e      	ldr	r2, [pc, #376]	; (80035b8 <main+0x1b4>)
 800343e:	60da      	str	r2, [r3, #12]
  steppers[0].acceleration = 3000;
 8003440:	4b5b      	ldr	r3, [pc, #364]	; (80035b0 <main+0x1ac>)
 8003442:	4a5e      	ldr	r2, [pc, #376]	; (80035bc <main+0x1b8>)
 8003444:	601a      	str	r2, [r3, #0]
  steppers[0].minStepInterval = 100;
 8003446:	4b5a      	ldr	r3, [pc, #360]	; (80035b0 <main+0x1ac>)
 8003448:	2264      	movs	r2, #100	; 0x64
 800344a:	605a      	str	r2, [r3, #4]
  steppers[0].homing = 0;
 800344c:	4b58      	ldr	r3, [pc, #352]	; (80035b0 <main+0x1ac>)
 800344e:	2200      	movs	r2, #0
 8003450:	741a      	strb	r2, [r3, #16]
  steppers[0].dir_inv = 0;
 8003452:	4b57      	ldr	r3, [pc, #348]	; (80035b0 <main+0x1ac>)
 8003454:	2200      	movs	r2, #0
 8003456:	621a      	str	r2, [r3, #32]
  steppers[0].seeking_vel = 100;
 8003458:	4b55      	ldr	r3, [pc, #340]	; (80035b0 <main+0x1ac>)
 800345a:	2264      	movs	r2, #100	; 0x64
 800345c:	629a      	str	r2, [r3, #40]	; 0x28
  steppers[0].homing_vel = 100;
 800345e:	4b54      	ldr	r3, [pc, #336]	; (80035b0 <main+0x1ac>)
 8003460:	2264      	movs	r2, #100	; 0x64
 8003462:	62da      	str	r2, [r3, #44]	; 0x2c
  steppers[0].pull_off = 200;
 8003464:	4b52      	ldr	r3, [pc, #328]	; (80035b0 <main+0x1ac>)
 8003466:	22c8      	movs	r2, #200	; 0xc8
 8003468:	625a      	str	r2, [r3, #36]	; 0x24

  sFilterConfig.FilterBank = 0;
 800346a:	4b55      	ldr	r3, [pc, #340]	; (80035c0 <main+0x1bc>)
 800346c:	2200      	movs	r2, #0
 800346e:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003470:	4b53      	ldr	r3, [pc, #332]	; (80035c0 <main+0x1bc>)
 8003472:	2200      	movs	r2, #0
 8003474:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003476:	4b52      	ldr	r3, [pc, #328]	; (80035c0 <main+0x1bc>)
 8003478:	2201      	movs	r2, #1
 800347a:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800347c:	4b50      	ldr	r3, [pc, #320]	; (80035c0 <main+0x1bc>)
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8003482:	4b4f      	ldr	r3, [pc, #316]	; (80035c0 <main+0x1bc>)
 8003484:	2200      	movs	r2, #0
 8003486:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8003488:	4b4d      	ldr	r3, [pc, #308]	; (80035c0 <main+0x1bc>)
 800348a:	2200      	movs	r2, #0
 800348c:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800348e:	4b4c      	ldr	r3, [pc, #304]	; (80035c0 <main+0x1bc>)
 8003490:	2200      	movs	r2, #0
 8003492:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003494:	4b4a      	ldr	r3, [pc, #296]	; (80035c0 <main+0x1bc>)
 8003496:	2200      	movs	r2, #0
 8003498:	611a      	str	r2, [r3, #16]
  //	sFilterConfig.FilterFIFOAssignment =CAN_FILTER_FIFO0;
  sFilterConfig.FilterActivation=ENABLE;
 800349a:	4b49      	ldr	r3, [pc, #292]	; (80035c0 <main+0x1bc>)
 800349c:	2201      	movs	r2, #1
 800349e:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank=14;
 80034a0:	4b47      	ldr	r3, [pc, #284]	; (80035c0 <main+0x1bc>)
 80034a2:	220e      	movs	r2, #14
 80034a4:	625a      	str	r2, [r3, #36]	; 0x24

  if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 80034a6:	4946      	ldr	r1, [pc, #280]	; (80035c0 <main+0x1bc>)
 80034a8:	4846      	ldr	r0, [pc, #280]	; (80035c4 <main+0x1c0>)
 80034aa:	f001 fdc9 	bl	8005040 <HAL_CAN_ConfigFilter>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <main+0xb4>
  {
	  Error_Handler();
 80034b4:	f001 f842 	bl	800453c <Error_Handler>
  }
  if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 80034b8:	4842      	ldr	r0, [pc, #264]	; (80035c4 <main+0x1c0>)
 80034ba:	f001 fea1 	bl	8005200 <HAL_CAN_Start>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <main+0xc4>
  {
	  Error_Handler();
 80034c4:	f001 f83a 	bl	800453c <Error_Handler>
  }

  if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80034c8:	2103      	movs	r1, #3
 80034ca:	483e      	ldr	r0, [pc, #248]	; (80035c4 <main+0x1c0>)
 80034cc:	f002 f8fe 	bl	80056cc <HAL_CAN_ActivateNotification>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <main+0xd6>
  {
	  Error_Handler();
 80034d6:	f001 f831 	bl	800453c <Error_Handler>
  }

  sFilterConfig.FilterBank = 14;
 80034da:	4b39      	ldr	r3, [pc, #228]	; (80035c0 <main+0x1bc>)
 80034dc:	220e      	movs	r2, #14
 80034de:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80034e0:	4b37      	ldr	r3, [pc, #220]	; (80035c0 <main+0x1bc>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80034e6:	4b36      	ldr	r3, [pc, #216]	; (80035c0 <main+0x1bc>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80034ec:	4b34      	ldr	r3, [pc, #208]	; (80035c0 <main+0x1bc>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80034f2:	4b33      	ldr	r3, [pc, #204]	; (80035c0 <main+0x1bc>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80034f8:	4b31      	ldr	r3, [pc, #196]	; (80035c0 <main+0x1bc>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80034fe:	4b30      	ldr	r3, [pc, #192]	; (80035c0 <main+0x1bc>)
 8003500:	2200      	movs	r2, #0
 8003502:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003504:	4b2e      	ldr	r3, [pc, #184]	; (80035c0 <main+0x1bc>)
 8003506:	2200      	movs	r2, #0
 8003508:	611a      	str	r2, [r3, #16]
   //	sFilterConfig.FilterFIFOAssignment =CAN_FILTER_FIFO0;
  sFilterConfig.FilterActivation=ENABLE;
 800350a:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <main+0x1bc>)
 800350c:	2201      	movs	r2, #1
 800350e:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank=14;
 8003510:	4b2b      	ldr	r3, [pc, #172]	; (80035c0 <main+0x1bc>)
 8003512:	220e      	movs	r2, #14
 8003514:	625a      	str	r2, [r3, #36]	; 0x24

  if(HAL_CAN_ConfigFilter(&hcan2,&sFilterConfig) != HAL_OK)
 8003516:	492a      	ldr	r1, [pc, #168]	; (80035c0 <main+0x1bc>)
 8003518:	482b      	ldr	r0, [pc, #172]	; (80035c8 <main+0x1c4>)
 800351a:	f001 fd91 	bl	8005040 <HAL_CAN_ConfigFilter>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <main+0x124>
  {
	  Error_Handler();
 8003524:	f001 f80a 	bl	800453c <Error_Handler>
  }
  if(HAL_CAN_Start(&hcan2)!=HAL_OK)
 8003528:	4827      	ldr	r0, [pc, #156]	; (80035c8 <main+0x1c4>)
 800352a:	f001 fe69 	bl	8005200 <HAL_CAN_Start>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <main+0x134>
  {
	  Error_Handler();
 8003534:	f001 f802 	bl	800453c <Error_Handler>
  }

  if(HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8003538:	2103      	movs	r1, #3
 800353a:	4823      	ldr	r0, [pc, #140]	; (80035c8 <main+0x1c4>)
 800353c:	f002 f8c6 	bl	80056cc <HAL_CAN_ActivateNotification>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <main+0x146>
  {
	  Error_Handler();
 8003546:	f000 fff9 	bl	800453c <Error_Handler>
  }
  TMC2209_INIT();
 800354a:	f7fd fd33 	bl	8000fb4 <TMC2209_INIT>
//  TMCsetup();
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 800354e:	2100      	movs	r1, #0
 8003550:	481e      	ldr	r0, [pc, #120]	; (80035cc <main+0x1c8>)
 8003552:	f003 fda5 	bl	80070a0 <HAL_TIM_OC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8003556:	481e      	ldr	r0, [pc, #120]	; (80035d0 <main+0x1cc>)
 8003558:	f003 fcd8 	bl	8006f0c <HAL_TIM_Base_Start_IT>
  printf("init_OK\r\n");
 800355c:	481d      	ldr	r0, [pc, #116]	; (80035d4 <main+0x1d0>)
 800355e:	f006 fc53 	bl	8009e08 <puts>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)RxData, buffersize);
 8003562:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <main+0x1d4>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	461a      	mov	r2, r3
 800356a:	491c      	ldr	r1, [pc, #112]	; (80035dc <main+0x1d8>)
 800356c:	481c      	ldr	r0, [pc, #112]	; (80035e0 <main+0x1dc>)
 800356e:	f004 fe10 	bl	8008192 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_uart_flag=0;
 8003572:	4b1c      	ldr	r3, [pc, #112]	; (80035e4 <main+0x1e0>)
 8003574:	2200      	movs	r2, #0
 8003576:	701a      	strb	r2, [r3, #0]
	 	  while(!get_uart_flag){}
 8003578:	bf00      	nop
 800357a:	4b1a      	ldr	r3, [pc, #104]	; (80035e4 <main+0x1e0>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0fb      	beq.n	800357a <main+0x176>
//	 	  keycommand(RxData);
	 	  ReceiveData_Transmit(RxData);
 8003582:	4816      	ldr	r0, [pc, #88]	; (80035dc <main+0x1d8>)
 8003584:	f7ff f870 	bl	8002668 <ReceiveData_Transmit>
	 	  SentData_Transmit(TxData);
 8003588:	4817      	ldr	r0, [pc, #92]	; (80035e8 <main+0x1e4>)
 800358a:	f7ff ff09 	bl	80033a0 <SentData_Transmit>
	 //	  for(int i=0;i<buffersize;i++){
	 //		  printf("Txdata : %x\r\n",TxData[i]);
	 //
	 //	  	}

	 	  HAL_UART_Transmit(&huart2,(uint8_t *)TxData,sizeof(TxData),100);
 800358e:	2364      	movs	r3, #100	; 0x64
 8003590:	2214      	movs	r2, #20
 8003592:	4915      	ldr	r1, [pc, #84]	; (80035e8 <main+0x1e4>)
 8003594:	4812      	ldr	r0, [pc, #72]	; (80035e0 <main+0x1dc>)
 8003596:	f004 fd25 	bl	8007fe4 <HAL_UART_Transmit>
	 	  memset(RxData, 0, sizeof(RxData));
 800359a:	2214      	movs	r2, #20
 800359c:	2100      	movs	r1, #0
 800359e:	480f      	ldr	r0, [pc, #60]	; (80035dc <main+0x1d8>)
 80035a0:	f005 ff3a 	bl	8009418 <memset>
	 	  memset(TxData, 0, sizeof(TxData));
 80035a4:	2214      	movs	r2, #20
 80035a6:	2100      	movs	r1, #0
 80035a8:	480f      	ldr	r0, [pc, #60]	; (80035e8 <main+0x1e4>)
 80035aa:	f005 ff35 	bl	8009418 <memset>
	  get_uart_flag=0;
 80035ae:	e7e0      	b.n	8003572 <main+0x16e>
 80035b0:	20000438 	.word	0x20000438
 80035b4:	08001fa5 	.word	0x08001fa5
 80035b8:	08001f81 	.word	0x08001f81
 80035bc:	453b8000 	.word	0x453b8000
 80035c0:	200003c8 	.word	0x200003c8
 80035c4:	20000204 	.word	0x20000204
 80035c8:	2000022c 	.word	0x2000022c
 80035cc:	2000029c 	.word	0x2000029c
 80035d0:	20000254 	.word	0x20000254
 80035d4:	0800e0a0 	.word	0x0800e0a0
 80035d8:	20000000 	.word	0x20000000
 80035dc:	2000038c 	.word	0x2000038c
 80035e0:	20000328 	.word	0x20000328
 80035e4:	200003c2 	.word	0x200003c2
 80035e8:	200003a0 	.word	0x200003a0

080035ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b094      	sub	sp, #80	; 0x50
 80035f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035f2:	f107 031c 	add.w	r3, r7, #28
 80035f6:	2234      	movs	r2, #52	; 0x34
 80035f8:	2100      	movs	r1, #0
 80035fa:	4618      	mov	r0, r3
 80035fc:	f005 ff0c 	bl	8009418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003600:	f107 0308 	add.w	r3, r7, #8
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003610:	2300      	movs	r3, #0
 8003612:	607b      	str	r3, [r7, #4]
 8003614:	4b29      	ldr	r3, [pc, #164]	; (80036bc <SystemClock_Config+0xd0>)
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	4a28      	ldr	r2, [pc, #160]	; (80036bc <SystemClock_Config+0xd0>)
 800361a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361e:	6413      	str	r3, [r2, #64]	; 0x40
 8003620:	4b26      	ldr	r3, [pc, #152]	; (80036bc <SystemClock_Config+0xd0>)
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800362c:	2300      	movs	r3, #0
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	4b23      	ldr	r3, [pc, #140]	; (80036c0 <SystemClock_Config+0xd4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a22      	ldr	r2, [pc, #136]	; (80036c0 <SystemClock_Config+0xd4>)
 8003636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <SystemClock_Config+0xd4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003644:	603b      	str	r3, [r7, #0]
 8003646:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003648:	2302      	movs	r3, #2
 800364a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800364c:	2301      	movs	r3, #1
 800364e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003650:	2310      	movs	r3, #16
 8003652:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003654:	2302      	movs	r3, #2
 8003656:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003658:	2300      	movs	r3, #0
 800365a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800365c:	2308      	movs	r3, #8
 800365e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8003660:	23a0      	movs	r3, #160	; 0xa0
 8003662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003664:	2302      	movs	r3, #2
 8003666:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003668:	2302      	movs	r3, #2
 800366a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800366c:	2302      	movs	r3, #2
 800366e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003670:	f107 031c 	add.w	r3, r7, #28
 8003674:	4618      	mov	r0, r3
 8003676:	f003 f95b 	bl	8006930 <HAL_RCC_OscConfig>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003680:	f000 ff5c 	bl	800453c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003684:	230f      	movs	r3, #15
 8003686:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003688:	2302      	movs	r3, #2
 800368a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800368c:	2300      	movs	r3, #0
 800368e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003690:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003694:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800369a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800369c:	f107 0308 	add.w	r3, r7, #8
 80036a0:	2105      	movs	r1, #5
 80036a2:	4618      	mov	r0, r3
 80036a4:	f002 fdfa 	bl	800629c <HAL_RCC_ClockConfig>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80036ae:	f000 ff45 	bl	800453c <Error_Handler>
  }
}
 80036b2:	bf00      	nop
 80036b4:	3750      	adds	r7, #80	; 0x50
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40007000 	.word	0x40007000

080036c4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80036c8:	4b17      	ldr	r3, [pc, #92]	; (8003728 <MX_CAN1_Init+0x64>)
 80036ca:	4a18      	ldr	r2, [pc, #96]	; (800372c <MX_CAN1_Init+0x68>)
 80036cc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80036ce:	4b16      	ldr	r3, [pc, #88]	; (8003728 <MX_CAN1_Init+0x64>)
 80036d0:	2204      	movs	r2, #4
 80036d2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80036d4:	4b14      	ldr	r3, [pc, #80]	; (8003728 <MX_CAN1_Init+0x64>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80036da:	4b13      	ldr	r3, [pc, #76]	; (8003728 <MX_CAN1_Init+0x64>)
 80036dc:	2200      	movs	r2, #0
 80036de:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80036e0:	4b11      	ldr	r3, [pc, #68]	; (8003728 <MX_CAN1_Init+0x64>)
 80036e2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80036e6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80036e8:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <MX_CAN1_Init+0x64>)
 80036ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80036ee:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80036f0:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <MX_CAN1_Init+0x64>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80036f6:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <MX_CAN1_Init+0x64>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80036fc:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <MX_CAN1_Init+0x64>)
 80036fe:	2200      	movs	r2, #0
 8003700:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8003702:	4b09      	ldr	r3, [pc, #36]	; (8003728 <MX_CAN1_Init+0x64>)
 8003704:	2201      	movs	r2, #1
 8003706:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003708:	4b07      	ldr	r3, [pc, #28]	; (8003728 <MX_CAN1_Init+0x64>)
 800370a:	2200      	movs	r2, #0
 800370c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800370e:	4b06      	ldr	r3, [pc, #24]	; (8003728 <MX_CAN1_Init+0x64>)
 8003710:	2200      	movs	r2, #0
 8003712:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003714:	4804      	ldr	r0, [pc, #16]	; (8003728 <MX_CAN1_Init+0x64>)
 8003716:	f001 fb97 	bl	8004e48 <HAL_CAN_Init>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8003720:	f000 ff0c 	bl	800453c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003724:	bf00      	nop
 8003726:	bd80      	pop	{r7, pc}
 8003728:	20000204 	.word	0x20000204
 800372c:	40006400 	.word	0x40006400

08003730 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003734:	4b17      	ldr	r3, [pc, #92]	; (8003794 <MX_CAN2_Init+0x64>)
 8003736:	4a18      	ldr	r2, [pc, #96]	; (8003798 <MX_CAN2_Init+0x68>)
 8003738:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 800373a:	4b16      	ldr	r3, [pc, #88]	; (8003794 <MX_CAN2_Init+0x64>)
 800373c:	2204      	movs	r2, #4
 800373e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003740:	4b14      	ldr	r3, [pc, #80]	; (8003794 <MX_CAN2_Init+0x64>)
 8003742:	2200      	movs	r2, #0
 8003744:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003746:	4b13      	ldr	r3, [pc, #76]	; (8003794 <MX_CAN2_Init+0x64>)
 8003748:	2200      	movs	r2, #0
 800374a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <MX_CAN2_Init+0x64>)
 800374e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8003752:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8003754:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <MX_CAN2_Init+0x64>)
 8003756:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800375a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800375c:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <MX_CAN2_Init+0x64>)
 800375e:	2200      	movs	r2, #0
 8003760:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8003762:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <MX_CAN2_Init+0x64>)
 8003764:	2200      	movs	r2, #0
 8003766:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003768:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <MX_CAN2_Init+0x64>)
 800376a:	2200      	movs	r2, #0
 800376c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <MX_CAN2_Init+0x64>)
 8003770:	2201      	movs	r2, #1
 8003772:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003774:	4b07      	ldr	r3, [pc, #28]	; (8003794 <MX_CAN2_Init+0x64>)
 8003776:	2200      	movs	r2, #0
 8003778:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <MX_CAN2_Init+0x64>)
 800377c:	2200      	movs	r2, #0
 800377e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8003780:	4804      	ldr	r0, [pc, #16]	; (8003794 <MX_CAN2_Init+0x64>)
 8003782:	f001 fb61 	bl	8004e48 <HAL_CAN_Init>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800378c:	f000 fed6 	bl	800453c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8003790:	bf00      	nop
 8003792:	bd80      	pop	{r7, pc}
 8003794:	2000022c 	.word	0x2000022c
 8003798:	40006800 	.word	0x40006800

0800379c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037a2:	f107 0308 	add.w	r3, r7, #8
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	605a      	str	r2, [r3, #4]
 80037ac:	609a      	str	r2, [r3, #8]
 80037ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037b0:	463b      	mov	r3, r7
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037b8:	4b1e      	ldr	r3, [pc, #120]	; (8003834 <MX_TIM2_Init+0x98>)
 80037ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 80037c0:	4b1c      	ldr	r3, [pc, #112]	; (8003834 <MX_TIM2_Init+0x98>)
 80037c2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80037c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037c8:	4b1a      	ldr	r3, [pc, #104]	; (8003834 <MX_TIM2_Init+0x98>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 80037ce:	4b19      	ldr	r3, [pc, #100]	; (8003834 <MX_TIM2_Init+0x98>)
 80037d0:	f240 128f 	movw	r2, #399	; 0x18f
 80037d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037d6:	4b17      	ldr	r3, [pc, #92]	; (8003834 <MX_TIM2_Init+0x98>)
 80037d8:	2200      	movs	r2, #0
 80037da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037dc:	4b15      	ldr	r3, [pc, #84]	; (8003834 <MX_TIM2_Init+0x98>)
 80037de:	2280      	movs	r2, #128	; 0x80
 80037e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037e2:	4814      	ldr	r0, [pc, #80]	; (8003834 <MX_TIM2_Init+0x98>)
 80037e4:	f003 fb42 	bl	8006e6c <HAL_TIM_Base_Init>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80037ee:	f000 fea5 	bl	800453c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037f8:	f107 0308 	add.w	r3, r7, #8
 80037fc:	4619      	mov	r1, r3
 80037fe:	480d      	ldr	r0, [pc, #52]	; (8003834 <MX_TIM2_Init+0x98>)
 8003800:	f003 fec8 	bl	8007594 <HAL_TIM_ConfigClockSource>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800380a:	f000 fe97 	bl	800453c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800380e:	2300      	movs	r3, #0
 8003810:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003812:	2300      	movs	r3, #0
 8003814:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003816:	463b      	mov	r3, r7
 8003818:	4619      	mov	r1, r3
 800381a:	4806      	ldr	r0, [pc, #24]	; (8003834 <MX_TIM2_Init+0x98>)
 800381c:	f004 fab0 	bl	8007d80 <HAL_TIMEx_MasterConfigSynchronization>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003826:	f000 fe89 	bl	800453c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800382a:	bf00      	nop
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000254 	.word	0x20000254

08003838 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08e      	sub	sp, #56	; 0x38
 800383c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800383e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	605a      	str	r2, [r3, #4]
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800384c:	f107 0320 	add.w	r3, r7, #32
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003856:	1d3b      	adds	r3, r7, #4
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	605a      	str	r2, [r3, #4]
 800385e:	609a      	str	r2, [r3, #8]
 8003860:	60da      	str	r2, [r3, #12]
 8003862:	611a      	str	r2, [r3, #16]
 8003864:	615a      	str	r2, [r3, #20]
 8003866:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003868:	4b2b      	ldr	r3, [pc, #172]	; (8003918 <MX_TIM3_Init+0xe0>)
 800386a:	4a2c      	ldr	r2, [pc, #176]	; (800391c <MX_TIM3_Init+0xe4>)
 800386c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160-1;
 800386e:	4b2a      	ldr	r3, [pc, #168]	; (8003918 <MX_TIM3_Init+0xe0>)
 8003870:	229f      	movs	r2, #159	; 0x9f
 8003872:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003874:	4b28      	ldr	r3, [pc, #160]	; (8003918 <MX_TIM3_Init+0xe0>)
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800387a:	4b27      	ldr	r3, [pc, #156]	; (8003918 <MX_TIM3_Init+0xe0>)
 800387c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003880:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003882:	4b25      	ldr	r3, [pc, #148]	; (8003918 <MX_TIM3_Init+0xe0>)
 8003884:	2200      	movs	r2, #0
 8003886:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003888:	4b23      	ldr	r3, [pc, #140]	; (8003918 <MX_TIM3_Init+0xe0>)
 800388a:	2200      	movs	r2, #0
 800388c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800388e:	4822      	ldr	r0, [pc, #136]	; (8003918 <MX_TIM3_Init+0xe0>)
 8003890:	f003 faec 	bl	8006e6c <HAL_TIM_Base_Init>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800389a:	f000 fe4f 	bl	800453c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800389e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80038a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038a8:	4619      	mov	r1, r3
 80038aa:	481b      	ldr	r0, [pc, #108]	; (8003918 <MX_TIM3_Init+0xe0>)
 80038ac:	f003 fe72 	bl	8007594 <HAL_TIM_ConfigClockSource>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80038b6:	f000 fe41 	bl	800453c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80038ba:	4817      	ldr	r0, [pc, #92]	; (8003918 <MX_TIM3_Init+0xe0>)
 80038bc:	f003 fb96 	bl	8006fec <HAL_TIM_OC_Init>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80038c6:	f000 fe39 	bl	800453c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038ca:	2300      	movs	r3, #0
 80038cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ce:	2300      	movs	r3, #0
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038d2:	f107 0320 	add.w	r3, r7, #32
 80038d6:	4619      	mov	r1, r3
 80038d8:	480f      	ldr	r0, [pc, #60]	; (8003918 <MX_TIM3_Init+0xe0>)
 80038da:	f004 fa51 	bl	8007d80 <HAL_TIMEx_MasterConfigSynchronization>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80038e4:	f000 fe2a 	bl	800453c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80038e8:	2300      	movs	r3, #0
 80038ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038f8:	1d3b      	adds	r3, r7, #4
 80038fa:	2200      	movs	r2, #0
 80038fc:	4619      	mov	r1, r3
 80038fe:	4806      	ldr	r0, [pc, #24]	; (8003918 <MX_TIM3_Init+0xe0>)
 8003900:	f003 fdec 	bl	80074dc <HAL_TIM_OC_ConfigChannel>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800390a:	f000 fe17 	bl	800453c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800390e:	bf00      	nop
 8003910:	3738      	adds	r7, #56	; 0x38
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	2000029c 	.word	0x2000029c
 800391c:	40000400 	.word	0x40000400

08003920 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003924:	4b10      	ldr	r3, [pc, #64]	; (8003968 <MX_USART1_UART_Init+0x48>)
 8003926:	4a11      	ldr	r2, [pc, #68]	; (800396c <MX_USART1_UART_Init+0x4c>)
 8003928:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 800392a:	4b0f      	ldr	r3, [pc, #60]	; (8003968 <MX_USART1_UART_Init+0x48>)
 800392c:	4a10      	ldr	r2, [pc, #64]	; (8003970 <MX_USART1_UART_Init+0x50>)
 800392e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003930:	4b0d      	ldr	r3, [pc, #52]	; (8003968 <MX_USART1_UART_Init+0x48>)
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003936:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <MX_USART1_UART_Init+0x48>)
 8003938:	2200      	movs	r2, #0
 800393a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800393c:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <MX_USART1_UART_Init+0x48>)
 800393e:	2200      	movs	r2, #0
 8003940:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003942:	4b09      	ldr	r3, [pc, #36]	; (8003968 <MX_USART1_UART_Init+0x48>)
 8003944:	220c      	movs	r2, #12
 8003946:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003948:	4b07      	ldr	r3, [pc, #28]	; (8003968 <MX_USART1_UART_Init+0x48>)
 800394a:	2200      	movs	r2, #0
 800394c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800394e:	4b06      	ldr	r3, [pc, #24]	; (8003968 <MX_USART1_UART_Init+0x48>)
 8003950:	2200      	movs	r2, #0
 8003952:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8003954:	4804      	ldr	r0, [pc, #16]	; (8003968 <MX_USART1_UART_Init+0x48>)
 8003956:	f004 faf0 	bl	8007f3a <HAL_HalfDuplex_Init>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8003960:	f000 fdec 	bl	800453c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003964:	bf00      	nop
 8003966:	bd80      	pop	{r7, pc}
 8003968:	200002e4 	.word	0x200002e4
 800396c:	40011000 	.word	0x40011000
 8003970:	0007a120 	.word	0x0007a120

08003974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003978:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <MX_USART2_UART_Init+0x4c>)
 800397a:	4a12      	ldr	r2, [pc, #72]	; (80039c4 <MX_USART2_UART_Init+0x50>)
 800397c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800397e:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <MX_USART2_UART_Init+0x4c>)
 8003980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003986:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <MX_USART2_UART_Init+0x4c>)
 8003988:	2200      	movs	r2, #0
 800398a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800398c:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <MX_USART2_UART_Init+0x4c>)
 800398e:	2200      	movs	r2, #0
 8003990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003992:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <MX_USART2_UART_Init+0x4c>)
 8003994:	2200      	movs	r2, #0
 8003996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003998:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <MX_USART2_UART_Init+0x4c>)
 800399a:	220c      	movs	r2, #12
 800399c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800399e:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <MX_USART2_UART_Init+0x4c>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <MX_USART2_UART_Init+0x4c>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039aa:	4805      	ldr	r0, [pc, #20]	; (80039c0 <MX_USART2_UART_Init+0x4c>)
 80039ac:	f004 fa78 	bl	8007ea0 <HAL_UART_Init>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80039b6:	f000 fdc1 	bl	800453c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20000328 	.word	0x20000328
 80039c4:	40004400 	.word	0x40004400

080039c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08a      	sub	sp, #40	; 0x28
 80039cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ce:	f107 0314 	add.w	r3, r7, #20
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	605a      	str	r2, [r3, #4]
 80039d8:	609a      	str	r2, [r3, #8]
 80039da:	60da      	str	r2, [r3, #12]
 80039dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039de:	2300      	movs	r3, #0
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	4b42      	ldr	r3, [pc, #264]	; (8003aec <MX_GPIO_Init+0x124>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	4a41      	ldr	r2, [pc, #260]	; (8003aec <MX_GPIO_Init+0x124>)
 80039e8:	f043 0304 	orr.w	r3, r3, #4
 80039ec:	6313      	str	r3, [r2, #48]	; 0x30
 80039ee:	4b3f      	ldr	r3, [pc, #252]	; (8003aec <MX_GPIO_Init+0x124>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	4b3b      	ldr	r3, [pc, #236]	; (8003aec <MX_GPIO_Init+0x124>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	4a3a      	ldr	r2, [pc, #232]	; (8003aec <MX_GPIO_Init+0x124>)
 8003a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a08:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0a:	4b38      	ldr	r3, [pc, #224]	; (8003aec <MX_GPIO_Init+0x124>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a16:	2300      	movs	r3, #0
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	4b34      	ldr	r3, [pc, #208]	; (8003aec <MX_GPIO_Init+0x124>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	4a33      	ldr	r2, [pc, #204]	; (8003aec <MX_GPIO_Init+0x124>)
 8003a20:	f043 0301 	orr.w	r3, r3, #1
 8003a24:	6313      	str	r3, [r2, #48]	; 0x30
 8003a26:	4b31      	ldr	r3, [pc, #196]	; (8003aec <MX_GPIO_Init+0x124>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	60bb      	str	r3, [r7, #8]
 8003a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	607b      	str	r3, [r7, #4]
 8003a36:	4b2d      	ldr	r3, [pc, #180]	; (8003aec <MX_GPIO_Init+0x124>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	4a2c      	ldr	r2, [pc, #176]	; (8003aec <MX_GPIO_Init+0x124>)
 8003a3c:	f043 0302 	orr.w	r3, r3, #2
 8003a40:	6313      	str	r3, [r2, #48]	; 0x30
 8003a42:	4b2a      	ldr	r3, [pc, #168]	; (8003aec <MX_GPIO_Init+0x124>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	607b      	str	r3, [r7, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2120      	movs	r1, #32
 8003a52:	4827      	ldr	r0, [pc, #156]	; (8003af0 <MX_GPIO_Init+0x128>)
 8003a54:	f002 fbf0 	bl	8006238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003a5e:	4825      	ldr	r0, [pc, #148]	; (8003af4 <MX_GPIO_Init+0x12c>)
 8003a60:	f002 fbea 	bl	8006238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003a6a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a70:	2300      	movs	r3, #0
 8003a72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003a74:	f107 0314 	add.w	r3, r7, #20
 8003a78:	4619      	mov	r1, r3
 8003a7a:	481f      	ldr	r0, [pc, #124]	; (8003af8 <MX_GPIO_Init+0x130>)
 8003a7c:	f002 fa30 	bl	8005ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003a80:	2320      	movs	r3, #32
 8003a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a84:	2301      	movs	r3, #1
 8003a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003a90:	f107 0314 	add.w	r3, r7, #20
 8003a94:	4619      	mov	r1, r3
 8003a96:	4816      	ldr	r0, [pc, #88]	; (8003af0 <MX_GPIO_Init+0x128>)
 8003a98:	f002 fa22 	bl	8005ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003a9c:	2340      	movs	r3, #64	; 0x40
 8003a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003aa0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aaa:	f107 0314 	add.w	r3, r7, #20
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4810      	ldr	r0, [pc, #64]	; (8003af4 <MX_GPIO_Init+0x12c>)
 8003ab2:	f002 fa15 	bl	8005ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003ab6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003abc:	2301      	movs	r3, #1
 8003abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ac8:	f107 0314 	add.w	r3, r7, #20
 8003acc:	4619      	mov	r1, r3
 8003ace:	4809      	ldr	r0, [pc, #36]	; (8003af4 <MX_GPIO_Init+0x12c>)
 8003ad0:	f002 fa06 	bl	8005ee0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	2017      	movs	r0, #23
 8003ada:	f002 f934 	bl	8005d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003ade:	2017      	movs	r0, #23
 8003ae0:	f002 f94d 	bl	8005d7e <HAL_NVIC_EnableIRQ>

}
 8003ae4:	bf00      	nop
 8003ae6:	3728      	adds	r7, #40	; 0x28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40023800 	.word	0x40023800
 8003af0:	40020000 	.word	0x40020000
 8003af4:	40020400 	.word	0x40020400
 8003af8:	40020800 	.word	0x40020800

08003afc <BLDC_FK>:

/* USER CODE BEGIN 4 */
void BLDC_FK(float s1,float s2,float* xp,float* yp){
 8003afc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b00:	b086      	sub	sp, #24
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	ed87 0a03 	vstr	s0, [r7, #12]
 8003b08:	edc7 0a02 	vstr	s1, [r7, #8]
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	6039      	str	r1, [r7, #0]
	float x=0.0;
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]
	float y=0.0;
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	613b      	str	r3, [r7, #16]
	x=l1*cos(s1)+l2*cos(s1+s2);
 8003b1c:	4b4a      	ldr	r3, [pc, #296]	; (8003c48 <BLDC_FK+0x14c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fc fd31 	bl	8000588 <__aeabi_f2d>
 8003b26:	4604      	mov	r4, r0
 8003b28:	460d      	mov	r5, r1
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f7fc fd2c 	bl	8000588 <__aeabi_f2d>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	ec43 2b10 	vmov	d0, r2, r3
 8003b38:	f008 fbba 	bl	800c2b0 <cos>
 8003b3c:	ec53 2b10 	vmov	r2, r3, d0
 8003b40:	4620      	mov	r0, r4
 8003b42:	4629      	mov	r1, r5
 8003b44:	f7fc fd78 	bl	8000638 <__aeabi_dmul>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4690      	mov	r8, r2
 8003b4e:	4699      	mov	r9, r3
 8003b50:	4b3e      	ldr	r3, [pc, #248]	; (8003c4c <BLDC_FK+0x150>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fc fd17 	bl	8000588 <__aeabi_f2d>
 8003b5a:	4604      	mov	r4, r0
 8003b5c:	460d      	mov	r5, r1
 8003b5e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b62:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b6a:	ee17 0a90 	vmov	r0, s15
 8003b6e:	f7fc fd0b 	bl	8000588 <__aeabi_f2d>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	ec43 2b10 	vmov	d0, r2, r3
 8003b7a:	f008 fb99 	bl	800c2b0 <cos>
 8003b7e:	ec53 2b10 	vmov	r2, r3, d0
 8003b82:	4620      	mov	r0, r4
 8003b84:	4629      	mov	r1, r5
 8003b86:	f7fc fd57 	bl	8000638 <__aeabi_dmul>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4640      	mov	r0, r8
 8003b90:	4649      	mov	r1, r9
 8003b92:	f7fc fb9b 	bl	80002cc <__adddf3>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	f7fd f823 	bl	8000be8 <__aeabi_d2f>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	617b      	str	r3, [r7, #20]
	y=l1*sin(s1)+l2*sin(s1+s2);
 8003ba6:	4b28      	ldr	r3, [pc, #160]	; (8003c48 <BLDC_FK+0x14c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fc fcec 	bl	8000588 <__aeabi_f2d>
 8003bb0:	4604      	mov	r4, r0
 8003bb2:	460d      	mov	r5, r1
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f7fc fce7 	bl	8000588 <__aeabi_f2d>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	ec43 2b10 	vmov	d0, r2, r3
 8003bc2:	f008 fc19 	bl	800c3f8 <sin>
 8003bc6:	ec53 2b10 	vmov	r2, r3, d0
 8003bca:	4620      	mov	r0, r4
 8003bcc:	4629      	mov	r1, r5
 8003bce:	f7fc fd33 	bl	8000638 <__aeabi_dmul>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4690      	mov	r8, r2
 8003bd8:	4699      	mov	r9, r3
 8003bda:	4b1c      	ldr	r3, [pc, #112]	; (8003c4c <BLDC_FK+0x150>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fc fcd2 	bl	8000588 <__aeabi_f2d>
 8003be4:	4604      	mov	r4, r0
 8003be6:	460d      	mov	r5, r1
 8003be8:	ed97 7a03 	vldr	s14, [r7, #12]
 8003bec:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bf4:	ee17 0a90 	vmov	r0, s15
 8003bf8:	f7fc fcc6 	bl	8000588 <__aeabi_f2d>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	ec43 2b10 	vmov	d0, r2, r3
 8003c04:	f008 fbf8 	bl	800c3f8 <sin>
 8003c08:	ec53 2b10 	vmov	r2, r3, d0
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	4629      	mov	r1, r5
 8003c10:	f7fc fd12 	bl	8000638 <__aeabi_dmul>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4640      	mov	r0, r8
 8003c1a:	4649      	mov	r1, r9
 8003c1c:	f7fc fb56 	bl	80002cc <__adddf3>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4610      	mov	r0, r2
 8003c26:	4619      	mov	r1, r3
 8003c28:	f7fc ffde 	bl	8000be8 <__aeabi_d2f>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	613b      	str	r3, [r7, #16]
	*xp=x;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	601a      	str	r2, [r3, #0]
	*yp=y;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	601a      	str	r2, [r3, #0]
}
 8003c3c:	bf00      	nop
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c46:	bf00      	nop
 8003c48:	20000004 	.word	0x20000004
 8003c4c:	20000008 	.word	0x20000008

08003c50 <BLDC_IK>:
void BLDC_IK(float x,float y,float* s1p,float* s2p){
 8003c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c54:	ed2d 8b02 	vpush	{d8}
 8003c58:	b08c      	sub	sp, #48	; 0x30
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	ed87 0a03 	vstr	s0, [r7, #12]
 8003c60:	edc7 0a02 	vstr	s1, [r7, #8]
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	6039      	str	r1, [r7, #0]
	float s1=0.0;
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	623b      	str	r3, [r7, #32]
	float s2=0.0;
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	61fb      	str	r3, [r7, #28]
	float ns=0.0;
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	61bb      	str	r3, [r7, #24]
	float nx=0.0;
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	float ny=0.0;
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	62bb      	str	r3, [r7, #40]	; 0x28
	float al=590.0;
 8003c86:	4baa      	ldr	r3, [pc, #680]	; (8003f30 <BLDC_IK+0x2e0>)
 8003c88:	617b      	str	r3, [r7, #20]
	s2=-acos((x*x+y*y-l1*l1-l2*l2)/(2*l1*l2));
 8003c8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c8e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003c92:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c96:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c9e:	4ba5      	ldr	r3, [pc, #660]	; (8003f34 <BLDC_IK+0x2e4>)
 8003ca0:	edd3 6a00 	vldr	s13, [r3]
 8003ca4:	4ba3      	ldr	r3, [pc, #652]	; (8003f34 <BLDC_IK+0x2e4>)
 8003ca6:	edd3 7a00 	vldr	s15, [r3]
 8003caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cb2:	4ba1      	ldr	r3, [pc, #644]	; (8003f38 <BLDC_IK+0x2e8>)
 8003cb4:	edd3 6a00 	vldr	s13, [r3]
 8003cb8:	4b9f      	ldr	r3, [pc, #636]	; (8003f38 <BLDC_IK+0x2e8>)
 8003cba:	edd3 7a00 	vldr	s15, [r3]
 8003cbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cc2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cc6:	4b9b      	ldr	r3, [pc, #620]	; (8003f34 <BLDC_IK+0x2e4>)
 8003cc8:	edd3 7a00 	vldr	s15, [r3]
 8003ccc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003cd0:	4b99      	ldr	r3, [pc, #612]	; (8003f38 <BLDC_IK+0x2e8>)
 8003cd2:	edd3 7a00 	vldr	s15, [r3]
 8003cd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cda:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003cde:	ee16 0a90 	vmov	r0, s13
 8003ce2:	f7fc fc51 	bl	8000588 <__aeabi_f2d>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	ec43 2b10 	vmov	d0, r2, r3
 8003cee:	f008 fbdb 	bl	800c4a8 <acos>
 8003cf2:	ec53 2b10 	vmov	r2, r3, d0
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	f7fc ff75 	bl	8000be8 <__aeabi_d2f>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	ee07 3a90 	vmov	s15, r3
 8003d04:	eef1 7a67 	vneg.f32	s15, s15
 8003d08:	edc7 7a07 	vstr	s15, [r7, #28]
	s1=atan2((-l2*sin(s2)*x+(l1+l2*cos(s2))*y),((l1+l2*cos(s2))*x+l2*sin(s2)*y));
 8003d0c:	4b8a      	ldr	r3, [pc, #552]	; (8003f38 <BLDC_IK+0x2e8>)
 8003d0e:	edd3 7a00 	vldr	s15, [r3]
 8003d12:	eef1 7a67 	vneg.f32	s15, s15
 8003d16:	ee17 3a90 	vmov	r3, s15
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fc fc34 	bl	8000588 <__aeabi_f2d>
 8003d20:	4604      	mov	r4, r0
 8003d22:	460d      	mov	r5, r1
 8003d24:	69f8      	ldr	r0, [r7, #28]
 8003d26:	f7fc fc2f 	bl	8000588 <__aeabi_f2d>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	ec43 2b10 	vmov	d0, r2, r3
 8003d32:	f008 fb61 	bl	800c3f8 <sin>
 8003d36:	ec53 2b10 	vmov	r2, r3, d0
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	f7fc fc7b 	bl	8000638 <__aeabi_dmul>
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4614      	mov	r4, r2
 8003d48:	461d      	mov	r5, r3
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f7fc fc1c 	bl	8000588 <__aeabi_f2d>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4620      	mov	r0, r4
 8003d56:	4629      	mov	r1, r5
 8003d58:	f7fc fc6e 	bl	8000638 <__aeabi_dmul>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4692      	mov	sl, r2
 8003d62:	469b      	mov	fp, r3
 8003d64:	4b73      	ldr	r3, [pc, #460]	; (8003f34 <BLDC_IK+0x2e4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fc fc0d 	bl	8000588 <__aeabi_f2d>
 8003d6e:	4604      	mov	r4, r0
 8003d70:	460d      	mov	r5, r1
 8003d72:	4b71      	ldr	r3, [pc, #452]	; (8003f38 <BLDC_IK+0x2e8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fc fc06 	bl	8000588 <__aeabi_f2d>
 8003d7c:	4680      	mov	r8, r0
 8003d7e:	4689      	mov	r9, r1
 8003d80:	69f8      	ldr	r0, [r7, #28]
 8003d82:	f7fc fc01 	bl	8000588 <__aeabi_f2d>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	ec43 2b10 	vmov	d0, r2, r3
 8003d8e:	f008 fa8f 	bl	800c2b0 <cos>
 8003d92:	ec53 2b10 	vmov	r2, r3, d0
 8003d96:	4640      	mov	r0, r8
 8003d98:	4649      	mov	r1, r9
 8003d9a:	f7fc fc4d 	bl	8000638 <__aeabi_dmul>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4620      	mov	r0, r4
 8003da4:	4629      	mov	r1, r5
 8003da6:	f7fc fa91 	bl	80002cc <__adddf3>
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4614      	mov	r4, r2
 8003db0:	461d      	mov	r5, r3
 8003db2:	68b8      	ldr	r0, [r7, #8]
 8003db4:	f7fc fbe8 	bl	8000588 <__aeabi_f2d>
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	4629      	mov	r1, r5
 8003dc0:	f7fc fc3a 	bl	8000638 <__aeabi_dmul>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4650      	mov	r0, sl
 8003dca:	4659      	mov	r1, fp
 8003dcc:	f7fc fa7e 	bl	80002cc <__adddf3>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	ec43 2b18 	vmov	d8, r2, r3
 8003dd8:	4b56      	ldr	r3, [pc, #344]	; (8003f34 <BLDC_IK+0x2e4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fc fbd3 	bl	8000588 <__aeabi_f2d>
 8003de2:	4604      	mov	r4, r0
 8003de4:	460d      	mov	r5, r1
 8003de6:	4b54      	ldr	r3, [pc, #336]	; (8003f38 <BLDC_IK+0x2e8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fc fbcc 	bl	8000588 <__aeabi_f2d>
 8003df0:	4680      	mov	r8, r0
 8003df2:	4689      	mov	r9, r1
 8003df4:	69f8      	ldr	r0, [r7, #28]
 8003df6:	f7fc fbc7 	bl	8000588 <__aeabi_f2d>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	ec43 2b10 	vmov	d0, r2, r3
 8003e02:	f008 fa55 	bl	800c2b0 <cos>
 8003e06:	ec53 2b10 	vmov	r2, r3, d0
 8003e0a:	4640      	mov	r0, r8
 8003e0c:	4649      	mov	r1, r9
 8003e0e:	f7fc fc13 	bl	8000638 <__aeabi_dmul>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4620      	mov	r0, r4
 8003e18:	4629      	mov	r1, r5
 8003e1a:	f7fc fa57 	bl	80002cc <__adddf3>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4614      	mov	r4, r2
 8003e24:	461d      	mov	r5, r3
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f7fc fbae 	bl	8000588 <__aeabi_f2d>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4620      	mov	r0, r4
 8003e32:	4629      	mov	r1, r5
 8003e34:	f7fc fc00 	bl	8000638 <__aeabi_dmul>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4690      	mov	r8, r2
 8003e3e:	4699      	mov	r9, r3
 8003e40:	4b3d      	ldr	r3, [pc, #244]	; (8003f38 <BLDC_IK+0x2e8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fc fb9f 	bl	8000588 <__aeabi_f2d>
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	460d      	mov	r5, r1
 8003e4e:	69f8      	ldr	r0, [r7, #28]
 8003e50:	f7fc fb9a 	bl	8000588 <__aeabi_f2d>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	ec43 2b10 	vmov	d0, r2, r3
 8003e5c:	f008 facc 	bl	800c3f8 <sin>
 8003e60:	ec53 2b10 	vmov	r2, r3, d0
 8003e64:	4620      	mov	r0, r4
 8003e66:	4629      	mov	r1, r5
 8003e68:	f7fc fbe6 	bl	8000638 <__aeabi_dmul>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4614      	mov	r4, r2
 8003e72:	461d      	mov	r5, r3
 8003e74:	68b8      	ldr	r0, [r7, #8]
 8003e76:	f7fc fb87 	bl	8000588 <__aeabi_f2d>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4620      	mov	r0, r4
 8003e80:	4629      	mov	r1, r5
 8003e82:	f7fc fbd9 	bl	8000638 <__aeabi_dmul>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4640      	mov	r0, r8
 8003e8c:	4649      	mov	r1, r9
 8003e8e:	f7fc fa1d 	bl	80002cc <__adddf3>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	ec43 2b17 	vmov	d7, r2, r3
 8003e9a:	eeb0 1a47 	vmov.f32	s2, s14
 8003e9e:	eef0 1a67 	vmov.f32	s3, s15
 8003ea2:	eeb0 0a48 	vmov.f32	s0, s16
 8003ea6:	eef0 0a68 	vmov.f32	s1, s17
 8003eaa:	f008 fb31 	bl	800c510 <atan2>
 8003eae:	ec53 2b10 	vmov	r2, r3, d0
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	f7fc fe97 	bl	8000be8 <__aeabi_d2f>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	623b      	str	r3, [r7, #32]
	if((-M_PI<=s2 && s2<=0) && (0<=s1 && s1<=M_PI)){
 8003ebe:	69f8      	ldr	r0, [r7, #28]
 8003ec0:	f7fc fb62 	bl	8000588 <__aeabi_f2d>
 8003ec4:	a316      	add	r3, pc, #88	; (adr r3, 8003f20 <BLDC_IK+0x2d0>)
 8003ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eca:	f7fc fe3b 	bl	8000b44 <__aeabi_dcmpge>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d035      	beq.n	8003f40 <BLDC_IK+0x2f0>
 8003ed4:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ed8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee0:	d82e      	bhi.n	8003f40 <BLDC_IK+0x2f0>
 8003ee2:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ee6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eee:	db27      	blt.n	8003f40 <BLDC_IK+0x2f0>
 8003ef0:	6a38      	ldr	r0, [r7, #32]
 8003ef2:	f7fc fb49 	bl	8000588 <__aeabi_f2d>
 8003ef6:	a30c      	add	r3, pc, #48	; (adr r3, 8003f28 <BLDC_IK+0x2d8>)
 8003ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efc:	f7fc fe18 	bl	8000b30 <__aeabi_dcmple>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d01c      	beq.n	8003f40 <BLDC_IK+0x2f0>
		*s1p=s1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a3a      	ldr	r2, [r7, #32]
 8003f0a:	601a      	str	r2, [r3, #0]
		*s2p=s2;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	601a      	str	r2, [r3, #0]
		printf("coordinate OK!!\r\n");
 8003f12:	480a      	ldr	r0, [pc, #40]	; (8003f3c <BLDC_IK+0x2ec>)
 8003f14:	f005 ff78 	bl	8009e08 <puts>
			TxData[i]=0xFF;
		}
		printf("coordinate error!!\r\n");
		HAL_UART_Transmit_IT(&huart2,(uint8_t *)TxData,sizeof(TxData));
	}
}
 8003f18:	e244      	b.n	80043a4 <BLDC_IK+0x754>
 8003f1a:	bf00      	nop
 8003f1c:	f3af 8000 	nop.w
 8003f20:	54442d18 	.word	0x54442d18
 8003f24:	c00921fb 	.word	0xc00921fb
 8003f28:	54442d18 	.word	0x54442d18
 8003f2c:	400921fb 	.word	0x400921fb
 8003f30:	44138000 	.word	0x44138000
 8003f34:	20000004 	.word	0x20000004
 8003f38:	20000008 	.word	0x20000008
 8003f3c:	0800e0ac 	.word	0x0800e0ac
	else if(sqrt(fabsf(x*x+y+y))>=al){
 8003f40:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f44:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003f48:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f50:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f58:	eef0 7ae7 	vabs.f32	s15, s15
 8003f5c:	ee17 0a90 	vmov	r0, s15
 8003f60:	f7fc fb12 	bl	8000588 <__aeabi_f2d>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	ec43 2b10 	vmov	d0, r2, r3
 8003f6c:	f008 fad2 	bl	800c514 <sqrt>
 8003f70:	ec55 4b10 	vmov	r4, r5, d0
 8003f74:	6978      	ldr	r0, [r7, #20]
 8003f76:	f7fc fb07 	bl	8000588 <__aeabi_f2d>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4620      	mov	r0, r4
 8003f80:	4629      	mov	r1, r5
 8003f82:	f7fc fddf 	bl	8000b44 <__aeabi_dcmpge>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 81e6 	beq.w	800435a <BLDC_IK+0x70a>
		if(x >= 0){
 8003f8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f9a:	db50      	blt.n	800403e <BLDC_IK+0x3ee>
			ns=atan(y/x);
 8003f9c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003fa0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fa4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003fa8:	ee16 0a90 	vmov	r0, s13
 8003fac:	f7fc faec 	bl	8000588 <__aeabi_f2d>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	ec43 2b10 	vmov	d0, r2, r3
 8003fb8:	f007 ffda 	bl	800bf70 <atan>
 8003fbc:	ec53 2b10 	vmov	r2, r3, d0
 8003fc0:	4610      	mov	r0, r2
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	f7fc fe10 	bl	8000be8 <__aeabi_d2f>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	61bb      	str	r3, [r7, #24]
			nx=al*cos(ns);
 8003fcc:	6978      	ldr	r0, [r7, #20]
 8003fce:	f7fc fadb 	bl	8000588 <__aeabi_f2d>
 8003fd2:	4604      	mov	r4, r0
 8003fd4:	460d      	mov	r5, r1
 8003fd6:	69b8      	ldr	r0, [r7, #24]
 8003fd8:	f7fc fad6 	bl	8000588 <__aeabi_f2d>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	ec43 2b10 	vmov	d0, r2, r3
 8003fe4:	f008 f964 	bl	800c2b0 <cos>
 8003fe8:	ec53 2b10 	vmov	r2, r3, d0
 8003fec:	4620      	mov	r0, r4
 8003fee:	4629      	mov	r1, r5
 8003ff0:	f7fc fb22 	bl	8000638 <__aeabi_dmul>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	f7fc fdf4 	bl	8000be8 <__aeabi_d2f>
 8004000:	4603      	mov	r3, r0
 8004002:	62fb      	str	r3, [r7, #44]	; 0x2c
			ny=al*sin(ns);
 8004004:	6978      	ldr	r0, [r7, #20]
 8004006:	f7fc fabf 	bl	8000588 <__aeabi_f2d>
 800400a:	4604      	mov	r4, r0
 800400c:	460d      	mov	r5, r1
 800400e:	69b8      	ldr	r0, [r7, #24]
 8004010:	f7fc faba 	bl	8000588 <__aeabi_f2d>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	ec43 2b10 	vmov	d0, r2, r3
 800401c:	f008 f9ec 	bl	800c3f8 <sin>
 8004020:	ec53 2b10 	vmov	r2, r3, d0
 8004024:	4620      	mov	r0, r4
 8004026:	4629      	mov	r1, r5
 8004028:	f7fc fb06 	bl	8000638 <__aeabi_dmul>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4610      	mov	r0, r2
 8004032:	4619      	mov	r1, r3
 8004034:	f7fc fdd8 	bl	8000be8 <__aeabi_d2f>
 8004038:	4603      	mov	r3, r0
 800403a:	62bb      	str	r3, [r7, #40]	; 0x28
 800403c:	e05c      	b.n	80040f8 <BLDC_IK+0x4a8>
		}else if(x < 0){
 800403e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004042:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800404a:	d555      	bpl.n	80040f8 <BLDC_IK+0x4a8>
			ns=atan(y/x);
 800404c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004050:	edd7 7a03 	vldr	s15, [r7, #12]
 8004054:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004058:	ee16 0a90 	vmov	r0, s13
 800405c:	f7fc fa94 	bl	8000588 <__aeabi_f2d>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	ec43 2b10 	vmov	d0, r2, r3
 8004068:	f007 ff82 	bl	800bf70 <atan>
 800406c:	ec53 2b10 	vmov	r2, r3, d0
 8004070:	4610      	mov	r0, r2
 8004072:	4619      	mov	r1, r3
 8004074:	f7fc fdb8 	bl	8000be8 <__aeabi_d2f>
 8004078:	4603      	mov	r3, r0
 800407a:	61bb      	str	r3, [r7, #24]
			nx=-al*cos(ns);
 800407c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004080:	eef1 7a67 	vneg.f32	s15, s15
 8004084:	ee17 3a90 	vmov	r3, s15
 8004088:	4618      	mov	r0, r3
 800408a:	f7fc fa7d 	bl	8000588 <__aeabi_f2d>
 800408e:	4604      	mov	r4, r0
 8004090:	460d      	mov	r5, r1
 8004092:	69b8      	ldr	r0, [r7, #24]
 8004094:	f7fc fa78 	bl	8000588 <__aeabi_f2d>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	ec43 2b10 	vmov	d0, r2, r3
 80040a0:	f008 f906 	bl	800c2b0 <cos>
 80040a4:	ec53 2b10 	vmov	r2, r3, d0
 80040a8:	4620      	mov	r0, r4
 80040aa:	4629      	mov	r1, r5
 80040ac:	f7fc fac4 	bl	8000638 <__aeabi_dmul>
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4610      	mov	r0, r2
 80040b6:	4619      	mov	r1, r3
 80040b8:	f7fc fd96 	bl	8000be8 <__aeabi_d2f>
 80040bc:	4603      	mov	r3, r0
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c
			ny=al*sin(ns);
 80040c0:	6978      	ldr	r0, [r7, #20]
 80040c2:	f7fc fa61 	bl	8000588 <__aeabi_f2d>
 80040c6:	4604      	mov	r4, r0
 80040c8:	460d      	mov	r5, r1
 80040ca:	69b8      	ldr	r0, [r7, #24]
 80040cc:	f7fc fa5c 	bl	8000588 <__aeabi_f2d>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	ec43 2b10 	vmov	d0, r2, r3
 80040d8:	f008 f98e 	bl	800c3f8 <sin>
 80040dc:	ec53 2b10 	vmov	r2, r3, d0
 80040e0:	4620      	mov	r0, r4
 80040e2:	4629      	mov	r1, r5
 80040e4:	f7fc faa8 	bl	8000638 <__aeabi_dmul>
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	4610      	mov	r0, r2
 80040ee:	4619      	mov	r1, r3
 80040f0:	f7fc fd7a 	bl	8000be8 <__aeabi_d2f>
 80040f4:	4603      	mov	r3, r0
 80040f6:	62bb      	str	r3, [r7, #40]	; 0x28
			s2=-acos((nx*nx+ny*ny-l1*l1-l2*l2)/(2*l1*l2));
 80040f8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80040fc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004100:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004104:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004108:	ee37 7a27 	vadd.f32	s14, s14, s15
 800410c:	4ba9      	ldr	r3, [pc, #676]	; (80043b4 <BLDC_IK+0x764>)
 800410e:	edd3 6a00 	vldr	s13, [r3]
 8004112:	4ba8      	ldr	r3, [pc, #672]	; (80043b4 <BLDC_IK+0x764>)
 8004114:	edd3 7a00 	vldr	s15, [r3]
 8004118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800411c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004120:	4ba5      	ldr	r3, [pc, #660]	; (80043b8 <BLDC_IK+0x768>)
 8004122:	edd3 6a00 	vldr	s13, [r3]
 8004126:	4ba4      	ldr	r3, [pc, #656]	; (80043b8 <BLDC_IK+0x768>)
 8004128:	edd3 7a00 	vldr	s15, [r3]
 800412c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004130:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004134:	4b9f      	ldr	r3, [pc, #636]	; (80043b4 <BLDC_IK+0x764>)
 8004136:	edd3 7a00 	vldr	s15, [r3]
 800413a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800413e:	4b9e      	ldr	r3, [pc, #632]	; (80043b8 <BLDC_IK+0x768>)
 8004140:	edd3 7a00 	vldr	s15, [r3]
 8004144:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004148:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800414c:	ee16 0a90 	vmov	r0, s13
 8004150:	f7fc fa1a 	bl	8000588 <__aeabi_f2d>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	ec43 2b10 	vmov	d0, r2, r3
 800415c:	f008 f9a4 	bl	800c4a8 <acos>
 8004160:	ec53 2b10 	vmov	r2, r3, d0
 8004164:	4610      	mov	r0, r2
 8004166:	4619      	mov	r1, r3
 8004168:	f7fc fd3e 	bl	8000be8 <__aeabi_d2f>
 800416c:	4603      	mov	r3, r0
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef1 7a67 	vneg.f32	s15, s15
 8004176:	edc7 7a07 	vstr	s15, [r7, #28]
			s1=atan2((-l2*sin(s2)*nx+(l1+l2*cos(s2))*ny),((l1+l2*cos(s2))*nx+l2*sin(s2)*ny));
 800417a:	4b8f      	ldr	r3, [pc, #572]	; (80043b8 <BLDC_IK+0x768>)
 800417c:	edd3 7a00 	vldr	s15, [r3]
 8004180:	eef1 7a67 	vneg.f32	s15, s15
 8004184:	ee17 3a90 	vmov	r3, s15
 8004188:	4618      	mov	r0, r3
 800418a:	f7fc f9fd 	bl	8000588 <__aeabi_f2d>
 800418e:	4604      	mov	r4, r0
 8004190:	460d      	mov	r5, r1
 8004192:	69f8      	ldr	r0, [r7, #28]
 8004194:	f7fc f9f8 	bl	8000588 <__aeabi_f2d>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	ec43 2b10 	vmov	d0, r2, r3
 80041a0:	f008 f92a 	bl	800c3f8 <sin>
 80041a4:	ec53 2b10 	vmov	r2, r3, d0
 80041a8:	4620      	mov	r0, r4
 80041aa:	4629      	mov	r1, r5
 80041ac:	f7fc fa44 	bl	8000638 <__aeabi_dmul>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4614      	mov	r4, r2
 80041b6:	461d      	mov	r5, r3
 80041b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80041ba:	f7fc f9e5 	bl	8000588 <__aeabi_f2d>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	4620      	mov	r0, r4
 80041c4:	4629      	mov	r1, r5
 80041c6:	f7fc fa37 	bl	8000638 <__aeabi_dmul>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4692      	mov	sl, r2
 80041d0:	469b      	mov	fp, r3
 80041d2:	4b78      	ldr	r3, [pc, #480]	; (80043b4 <BLDC_IK+0x764>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fc f9d6 	bl	8000588 <__aeabi_f2d>
 80041dc:	4604      	mov	r4, r0
 80041de:	460d      	mov	r5, r1
 80041e0:	4b75      	ldr	r3, [pc, #468]	; (80043b8 <BLDC_IK+0x768>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fc f9cf 	bl	8000588 <__aeabi_f2d>
 80041ea:	4680      	mov	r8, r0
 80041ec:	4689      	mov	r9, r1
 80041ee:	69f8      	ldr	r0, [r7, #28]
 80041f0:	f7fc f9ca 	bl	8000588 <__aeabi_f2d>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	ec43 2b10 	vmov	d0, r2, r3
 80041fc:	f008 f858 	bl	800c2b0 <cos>
 8004200:	ec53 2b10 	vmov	r2, r3, d0
 8004204:	4640      	mov	r0, r8
 8004206:	4649      	mov	r1, r9
 8004208:	f7fc fa16 	bl	8000638 <__aeabi_dmul>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4620      	mov	r0, r4
 8004212:	4629      	mov	r1, r5
 8004214:	f7fc f85a 	bl	80002cc <__adddf3>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4614      	mov	r4, r2
 800421e:	461d      	mov	r5, r3
 8004220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004222:	f7fc f9b1 	bl	8000588 <__aeabi_f2d>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4620      	mov	r0, r4
 800422c:	4629      	mov	r1, r5
 800422e:	f7fc fa03 	bl	8000638 <__aeabi_dmul>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	4650      	mov	r0, sl
 8004238:	4659      	mov	r1, fp
 800423a:	f7fc f847 	bl	80002cc <__adddf3>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	ec43 2b18 	vmov	d8, r2, r3
 8004246:	4b5b      	ldr	r3, [pc, #364]	; (80043b4 <BLDC_IK+0x764>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f7fc f99c 	bl	8000588 <__aeabi_f2d>
 8004250:	4604      	mov	r4, r0
 8004252:	460d      	mov	r5, r1
 8004254:	4b58      	ldr	r3, [pc, #352]	; (80043b8 <BLDC_IK+0x768>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f7fc f995 	bl	8000588 <__aeabi_f2d>
 800425e:	4680      	mov	r8, r0
 8004260:	4689      	mov	r9, r1
 8004262:	69f8      	ldr	r0, [r7, #28]
 8004264:	f7fc f990 	bl	8000588 <__aeabi_f2d>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	ec43 2b10 	vmov	d0, r2, r3
 8004270:	f008 f81e 	bl	800c2b0 <cos>
 8004274:	ec53 2b10 	vmov	r2, r3, d0
 8004278:	4640      	mov	r0, r8
 800427a:	4649      	mov	r1, r9
 800427c:	f7fc f9dc 	bl	8000638 <__aeabi_dmul>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4620      	mov	r0, r4
 8004286:	4629      	mov	r1, r5
 8004288:	f7fc f820 	bl	80002cc <__adddf3>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4614      	mov	r4, r2
 8004292:	461d      	mov	r5, r3
 8004294:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004296:	f7fc f977 	bl	8000588 <__aeabi_f2d>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	4620      	mov	r0, r4
 80042a0:	4629      	mov	r1, r5
 80042a2:	f7fc f9c9 	bl	8000638 <__aeabi_dmul>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4690      	mov	r8, r2
 80042ac:	4699      	mov	r9, r3
 80042ae:	4b42      	ldr	r3, [pc, #264]	; (80043b8 <BLDC_IK+0x768>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fc f968 	bl	8000588 <__aeabi_f2d>
 80042b8:	4604      	mov	r4, r0
 80042ba:	460d      	mov	r5, r1
 80042bc:	69f8      	ldr	r0, [r7, #28]
 80042be:	f7fc f963 	bl	8000588 <__aeabi_f2d>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	ec43 2b10 	vmov	d0, r2, r3
 80042ca:	f008 f895 	bl	800c3f8 <sin>
 80042ce:	ec53 2b10 	vmov	r2, r3, d0
 80042d2:	4620      	mov	r0, r4
 80042d4:	4629      	mov	r1, r5
 80042d6:	f7fc f9af 	bl	8000638 <__aeabi_dmul>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4614      	mov	r4, r2
 80042e0:	461d      	mov	r5, r3
 80042e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042e4:	f7fc f950 	bl	8000588 <__aeabi_f2d>
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	4620      	mov	r0, r4
 80042ee:	4629      	mov	r1, r5
 80042f0:	f7fc f9a2 	bl	8000638 <__aeabi_dmul>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4640      	mov	r0, r8
 80042fa:	4649      	mov	r1, r9
 80042fc:	f7fb ffe6 	bl	80002cc <__adddf3>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	ec43 2b17 	vmov	d7, r2, r3
 8004308:	eeb0 1a47 	vmov.f32	s2, s14
 800430c:	eef0 1a67 	vmov.f32	s3, s15
 8004310:	eeb0 0a48 	vmov.f32	s0, s16
 8004314:	eef0 0a68 	vmov.f32	s1, s17
 8004318:	f008 f8fa 	bl	800c510 <atan2>
 800431c:	ec53 2b10 	vmov	r2, r3, d0
 8004320:	4610      	mov	r0, r2
 8004322:	4619      	mov	r1, r3
 8004324:	f7fc fc60 	bl	8000be8 <__aeabi_d2f>
 8004328:	4603      	mov	r3, r0
 800432a:	623b      	str	r3, [r7, #32]
			*s1p=s1;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a3a      	ldr	r2, [r7, #32]
 8004330:	601a      	str	r2, [r3, #0]
			*s2p=s2;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	69fa      	ldr	r2, [r7, #28]
 8004336:	601a      	str	r2, [r3, #0]
			printf("coordinate hosei x :%f \r\n",nx);
 8004338:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800433a:	f7fc f925 	bl	8000588 <__aeabi_f2d>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	481e      	ldr	r0, [pc, #120]	; (80043bc <BLDC_IK+0x76c>)
 8004344:	f005 fcda 	bl	8009cfc <iprintf>
			printf("coordinate hosei y :%f \r\n",ny);
 8004348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800434a:	f7fc f91d 	bl	8000588 <__aeabi_f2d>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	481b      	ldr	r0, [pc, #108]	; (80043c0 <BLDC_IK+0x770>)
 8004354:	f005 fcd2 	bl	8009cfc <iprintf>
}
 8004358:	e024      	b.n	80043a4 <BLDC_IK+0x754>
		TxData[0]=0xAA;
 800435a:	4b1a      	ldr	r3, [pc, #104]	; (80043c4 <BLDC_IK+0x774>)
 800435c:	22aa      	movs	r2, #170	; 0xaa
 800435e:	701a      	strb	r2, [r3, #0]
		TxData[1]=0x61;
 8004360:	4b18      	ldr	r3, [pc, #96]	; (80043c4 <BLDC_IK+0x774>)
 8004362:	2261      	movs	r2, #97	; 0x61
 8004364:	705a      	strb	r2, [r3, #1]
		TxData[buffersize-1]=0xAA;
 8004366:	4b18      	ldr	r3, [pc, #96]	; (80043c8 <BLDC_IK+0x778>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	3b01      	subs	r3, #1
 800436c:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <BLDC_IK+0x774>)
 800436e:	21aa      	movs	r1, #170	; 0xaa
 8004370:	54d1      	strb	r1, [r2, r3]
		for(int i=2;i<buffersize-1;i++){
 8004372:	2302      	movs	r3, #2
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
 8004376:	e007      	b.n	8004388 <BLDC_IK+0x738>
			TxData[i]=0xFF;
 8004378:	4a12      	ldr	r2, [pc, #72]	; (80043c4 <BLDC_IK+0x774>)
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	4413      	add	r3, r2
 800437e:	22ff      	movs	r2, #255	; 0xff
 8004380:	701a      	strb	r2, [r3, #0]
		for(int i=2;i<buffersize-1;i++){
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	3301      	adds	r3, #1
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
 8004388:	4b0f      	ldr	r3, [pc, #60]	; (80043c8 <BLDC_IK+0x778>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	3b01      	subs	r3, #1
 800438e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004390:	429a      	cmp	r2, r3
 8004392:	dbf1      	blt.n	8004378 <BLDC_IK+0x728>
		printf("coordinate error!!\r\n");
 8004394:	480d      	ldr	r0, [pc, #52]	; (80043cc <BLDC_IK+0x77c>)
 8004396:	f005 fd37 	bl	8009e08 <puts>
		HAL_UART_Transmit_IT(&huart2,(uint8_t *)TxData,sizeof(TxData));
 800439a:	2214      	movs	r2, #20
 800439c:	4909      	ldr	r1, [pc, #36]	; (80043c4 <BLDC_IK+0x774>)
 800439e:	480c      	ldr	r0, [pc, #48]	; (80043d0 <BLDC_IK+0x780>)
 80043a0:	f003 feb2 	bl	8008108 <HAL_UART_Transmit_IT>
}
 80043a4:	bf00      	nop
 80043a6:	3730      	adds	r7, #48	; 0x30
 80043a8:	46bd      	mov	sp, r7
 80043aa:	ecbd 8b02 	vpop	{d8}
 80043ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043b2:	bf00      	nop
 80043b4:	20000004 	.word	0x20000004
 80043b8:	20000008 	.word	0x20000008
 80043bc:	0800e0c0 	.word	0x0800e0c0
 80043c0:	0800e0dc 	.word	0x0800e0dc
 80043c4:	200003a0 	.word	0x200003a0
 80043c8:	20000000 	.word	0x20000000
 80043cc:	0800e0f8 	.word	0x0800e0f8
 80043d0:	20000328 	.word	0x20000328

080043d4 <HAL_UART_RxCpltCallback>:
//{
//  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
//  return len;
//}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef*UartHandle)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	get_uart_flag=1;
 80043dc:	4b21      	ldr	r3, [pc, #132]	; (8004464 <HAL_UART_RxCpltCallback+0x90>)
 80043de:	2201      	movs	r2, #1
 80043e0:	701a      	strb	r2, [r3, #0]
//	HAL_UART_Receive_IT(&huart2, (uint8_t *)RxData, 1);
	HAL_UART_Receive_IT(&huart2, (uint8_t *)RxData, buffersize);
 80043e2:	4b21      	ldr	r3, [pc, #132]	; (8004468 <HAL_UART_RxCpltCallback+0x94>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	461a      	mov	r2, r3
 80043ea:	4920      	ldr	r1, [pc, #128]	; (800446c <HAL_UART_RxCpltCallback+0x98>)
 80043ec:	4820      	ldr	r0, [pc, #128]	; (8004470 <HAL_UART_RxCpltCallback+0x9c>)
 80043ee:	f003 fed0 	bl	8008192 <HAL_UART_Receive_IT>
	flag_count=0;
 80043f2:	4b20      	ldr	r3, [pc, #128]	; (8004474 <HAL_UART_RxCpltCallback+0xa0>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	701a      	strb	r2, [r3, #0]
	motion_stop_flag=0;
 80043f8:	4b1f      	ldr	r3, [pc, #124]	; (8004478 <HAL_UART_RxCpltCallback+0xa4>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<buffersize; i++){
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	e00e      	b.n	8004422 <HAL_UART_RxCpltCallback+0x4e>
		if(RxData[i]!=0xFF){
 8004404:	4a19      	ldr	r2, [pc, #100]	; (800446c <HAL_UART_RxCpltCallback+0x98>)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4413      	add	r3, r2
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2bff      	cmp	r3, #255	; 0xff
 800440e:	d005      	beq.n	800441c <HAL_UART_RxCpltCallback+0x48>
			flag_count++;
 8004410:	4b18      	ldr	r3, [pc, #96]	; (8004474 <HAL_UART_RxCpltCallback+0xa0>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	3301      	adds	r3, #1
 8004416:	b2da      	uxtb	r2, r3
 8004418:	4b16      	ldr	r3, [pc, #88]	; (8004474 <HAL_UART_RxCpltCallback+0xa0>)
 800441a:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<buffersize; i++){
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	3301      	adds	r3, #1
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	4b11      	ldr	r3, [pc, #68]	; (8004468 <HAL_UART_RxCpltCallback+0x94>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4293      	cmp	r3, r2
 800442c:	dbea      	blt.n	8004404 <HAL_UART_RxCpltCallback+0x30>
		}
	}

	if(flag_count==3 && RxData[1]==0x63){
 800442e:	4b11      	ldr	r3, [pc, #68]	; (8004474 <HAL_UART_RxCpltCallback+0xa0>)
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b03      	cmp	r3, #3
 8004434:	d107      	bne.n	8004446 <HAL_UART_RxCpltCallback+0x72>
 8004436:	4b0d      	ldr	r3, [pc, #52]	; (800446c <HAL_UART_RxCpltCallback+0x98>)
 8004438:	785b      	ldrb	r3, [r3, #1]
 800443a:	2b63      	cmp	r3, #99	; 0x63
 800443c:	d103      	bne.n	8004446 <HAL_UART_RxCpltCallback+0x72>
		motion_stop_flag=1;
 800443e:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <HAL_UART_RxCpltCallback+0xa4>)
 8004440:	2201      	movs	r2, #1
 8004442:	701a      	strb	r2, [r3, #0]
	}
//	if(flag_count==3&&RxData[1]==0x08){
//		teaching_flag=1;
//	}

}
 8004444:	e009      	b.n	800445a <HAL_UART_RxCpltCallback+0x86>
	else if(flag_count==3 && RxData[1]==0x62){
 8004446:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <HAL_UART_RxCpltCallback+0xa0>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b03      	cmp	r3, #3
 800444c:	d105      	bne.n	800445a <HAL_UART_RxCpltCallback+0x86>
 800444e:	4b07      	ldr	r3, [pc, #28]	; (800446c <HAL_UART_RxCpltCallback+0x98>)
 8004450:	785b      	ldrb	r3, [r3, #1]
 8004452:	2b62      	cmp	r3, #98	; 0x62
 8004454:	d101      	bne.n	800445a <HAL_UART_RxCpltCallback+0x86>
		HAL_NVIC_SystemReset();
 8004456:	f001 fca0 	bl	8005d9a <HAL_NVIC_SystemReset>
}
 800445a:	bf00      	nop
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	200003c2 	.word	0x200003c2
 8004468:	20000000 	.word	0x20000000
 800446c:	2000038c 	.word	0x2000038c
 8004470:	20000328 	.word	0x20000328
 8004474:	200003c4 	.word	0x200003c4
 8004478:	200003c3 	.word	0x200003c3

0800447c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	80fb      	strh	r3, [r7, #6]
//		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
//			home_position_state &= ~1;
//		}
//	}
	//stepper 0 end stop sensor
	if(GPIO_Pin == GPIO_PIN_6 ){
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	2b40      	cmp	r3, #64	; 0x40
 800448a:	d10d      	bne.n	80044a8 <HAL_GPIO_EXTI_Callback+0x2c>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 800448c:	2140      	movs	r1, #64	; 0x40
 800448e:	4808      	ldr	r0, [pc, #32]	; (80044b0 <HAL_GPIO_EXTI_Callback+0x34>)
 8004490:	f001 feba 	bl	8006208 <HAL_GPIO_ReadPin>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d103      	bne.n	80044a2 <HAL_GPIO_EXTI_Callback+0x26>
			zhome_endstop_state = 0;
 800449a:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <HAL_GPIO_EXTI_Callback+0x38>)
 800449c:	2200      	movs	r2, #0
 800449e:	701a      	strb	r2, [r3, #0]
//		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){
//			current_stall = 1;
////			stallguard_error();
//		}
//	}
}
 80044a0:	e002      	b.n	80044a8 <HAL_GPIO_EXTI_Callback+0x2c>
			zhome_endstop_state = 1;
 80044a2:	4b04      	ldr	r3, [pc, #16]	; (80044b4 <HAL_GPIO_EXTI_Callback+0x38>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	701a      	strb	r2, [r3, #0]
}
 80044a8:	bf00      	nop
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40020400 	.word	0x40020400
 80044b4:	20000488 	.word	0x20000488

080044b8 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]

}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0, &RxHeader, canRxdata);
 80044d4:	4b13      	ldr	r3, [pc, #76]	; (8004524 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80044d6:	4a14      	ldr	r2, [pc, #80]	; (8004528 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80044d8:	2100      	movs	r1, #0
 80044da:	4814      	ldr	r0, [pc, #80]	; (800452c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80044dc:	f000 ffe4 	bl	80054a8 <HAL_CAN_GetRxMessage>
	if(RxHeader.StdId==0x141){
 80044e0:	4b11      	ldr	r3, [pc, #68]	; (8004528 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f240 1241 	movw	r2, #321	; 0x141
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d105      	bne.n	80044f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
		memcpy(RMDRx_can_data, canRxdata, 8);
 80044ec:	4b10      	ldr	r3, [pc, #64]	; (8004530 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80044ee:	4a0d      	ldr	r2, [pc, #52]	; (8004524 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80044f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044f4:	e883 0003 	stmia.w	r3, {r0, r1}
	}

	HAL_CAN_GetRxMessage(&hcan2,CAN_RX_FIFO0, &RxHeader, canRxdata);
 80044f8:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80044fa:	4a0b      	ldr	r2, [pc, #44]	; (8004528 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80044fc:	2100      	movs	r1, #0
 80044fe:	480d      	ldr	r0, [pc, #52]	; (8004534 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8004500:	f000 ffd2 	bl	80054a8 <HAL_CAN_GetRxMessage>
	if(RxHeader.StdId==0x00){
 8004504:	4b08      	ldr	r3, [pc, #32]	; (8004528 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d106      	bne.n	800451a <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
			//memcpy(m1Rx_can_data,Rx_can_data,sizeof(Rx_can_data));
		memcpy(BLDC_canRxdata, canRxdata, 6);
 800450c:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800450e:	4a05      	ldr	r2, [pc, #20]	; (8004524 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8004510:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004514:	6018      	str	r0, [r3, #0]
 8004516:	3304      	adds	r3, #4
 8004518:	8019      	strh	r1, [r3, #0]
	}
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	200003b4 	.word	0x200003b4
 8004528:	20000408 	.word	0x20000408
 800452c:	20000204 	.word	0x20000204
 8004530:	20000430 	.word	0x20000430
 8004534:	2000022c 	.word	0x2000022c
 8004538:	200003bc 	.word	0x200003bc

0800453c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004540:	b672      	cpsid	i
}
 8004542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004544:	e7fe      	b.n	8004544 <Error_Handler+0x8>

08004546 <fmaxf>:
#include "math_ops.h"


float fmaxf(float x, float y){
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	ed87 0a01 	vstr	s0, [r7, #4]
 8004550:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8004554:	ed97 7a01 	vldr	s14, [r7, #4]
 8004558:	edd7 7a00 	vldr	s15, [r7]
 800455c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004564:	dd01      	ble.n	800456a <fmaxf+0x24>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	e000      	b.n	800456c <fmaxf+0x26>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	ee07 3a90 	vmov	s15, r3
    }
 8004570:	eeb0 0a67 	vmov.f32	s0, s15
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <fminf>:

float fminf(float x, float y){
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	ed87 0a01 	vstr	s0, [r7, #4]
 8004588:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 800458c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004590:	edd7 7a00 	vldr	s15, [r7]
 8004594:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800459c:	d501      	bpl.n	80045a2 <fminf+0x24>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	e000      	b.n	80045a4 <fminf+0x26>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	ee07 3a90 	vmov	s15, r3
    }
 80045a8:	eeb0 0a67 	vmov.f32	s0, s15
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <float_to_uint>:
        *y = *y * limit/norm;
        }
    }


int float_to_uint(float x, float x_min, float x_max, int bits){
 80045b6:	b480      	push	{r7}
 80045b8:	b087      	sub	sp, #28
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	ed87 0a03 	vstr	s0, [r7, #12]
 80045c0:	edc7 0a02 	vstr	s1, [r7, #8]
 80045c4:	ed87 1a01 	vstr	s2, [r7, #4]
 80045c8:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 80045ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80045ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80045d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045d6:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 80045de:	ed97 7a03 	vldr	s14, [r7, #12]
 80045e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80045e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045ea:	2201      	movs	r2, #1
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	ee07 3a90 	vmov	s15, r3
 80045f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045fc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004600:	ed97 7a05 	vldr	s14, [r7, #20]
 8004604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004608:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800460c:	ee17 3a90 	vmov	r3, s15
    }
 8004610:	4618      	mov	r0, r3
 8004612:	371c      	adds	r7, #28
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <uint_to_float>:


float uint_to_float(int x_int, float x_min, float x_max, int bits){
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	ed87 0a02 	vstr	s0, [r7, #8]
 8004628:	edc7 0a01 	vstr	s1, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 800462e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004632:	edd7 7a02 	vldr	s15, [r7, #8]
 8004636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800463a:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	ee07 3a90 	vmov	s15, r3
 8004648:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800464c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004650:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004654:	2201      	movs	r2, #1
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800466a:	edd7 7a04 	vldr	s15, [r7, #16]
 800466e:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8004672:	eeb0 0a67 	vmov.f32	s0, s15
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004686:	2300      	movs	r3, #0
 8004688:	607b      	str	r3, [r7, #4]
 800468a:	4b10      	ldr	r3, [pc, #64]	; (80046cc <HAL_MspInit+0x4c>)
 800468c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468e:	4a0f      	ldr	r2, [pc, #60]	; (80046cc <HAL_MspInit+0x4c>)
 8004690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004694:	6453      	str	r3, [r2, #68]	; 0x44
 8004696:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <HAL_MspInit+0x4c>)
 8004698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800469e:	607b      	str	r3, [r7, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046a2:	2300      	movs	r3, #0
 80046a4:	603b      	str	r3, [r7, #0]
 80046a6:	4b09      	ldr	r3, [pc, #36]	; (80046cc <HAL_MspInit+0x4c>)
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	4a08      	ldr	r2, [pc, #32]	; (80046cc <HAL_MspInit+0x4c>)
 80046ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b0:	6413      	str	r3, [r2, #64]	; 0x40
 80046b2:	4b06      	ldr	r3, [pc, #24]	; (80046cc <HAL_MspInit+0x4c>)
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40023800 	.word	0x40023800

080046d0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08c      	sub	sp, #48	; 0x30
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d8:	f107 031c 	add.w	r3, r7, #28
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	605a      	str	r2, [r3, #4]
 80046e2:	609a      	str	r2, [r3, #8]
 80046e4:	60da      	str	r2, [r3, #12]
 80046e6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a64      	ldr	r2, [pc, #400]	; (8004880 <HAL_CAN_MspInit+0x1b0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d157      	bne.n	80047a2 <HAL_CAN_MspInit+0xd2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80046f2:	4b64      	ldr	r3, [pc, #400]	; (8004884 <HAL_CAN_MspInit+0x1b4>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3301      	adds	r3, #1
 80046f8:	4a62      	ldr	r2, [pc, #392]	; (8004884 <HAL_CAN_MspInit+0x1b4>)
 80046fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80046fc:	4b61      	ldr	r3, [pc, #388]	; (8004884 <HAL_CAN_MspInit+0x1b4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d10d      	bne.n	8004720 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004704:	2300      	movs	r3, #0
 8004706:	61bb      	str	r3, [r7, #24]
 8004708:	4b5f      	ldr	r3, [pc, #380]	; (8004888 <HAL_CAN_MspInit+0x1b8>)
 800470a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470c:	4a5e      	ldr	r2, [pc, #376]	; (8004888 <HAL_CAN_MspInit+0x1b8>)
 800470e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004712:	6413      	str	r3, [r2, #64]	; 0x40
 8004714:	4b5c      	ldr	r3, [pc, #368]	; (8004888 <HAL_CAN_MspInit+0x1b8>)
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471c:	61bb      	str	r3, [r7, #24]
 800471e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004720:	2300      	movs	r3, #0
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	4b58      	ldr	r3, [pc, #352]	; (8004888 <HAL_CAN_MspInit+0x1b8>)
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	4a57      	ldr	r2, [pc, #348]	; (8004888 <HAL_CAN_MspInit+0x1b8>)
 800472a:	f043 0301 	orr.w	r3, r3, #1
 800472e:	6313      	str	r3, [r2, #48]	; 0x30
 8004730:	4b55      	ldr	r3, [pc, #340]	; (8004888 <HAL_CAN_MspInit+0x1b8>)
 8004732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800473c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004742:	2302      	movs	r3, #2
 8004744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004746:	2300      	movs	r3, #0
 8004748:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800474a:	2303      	movs	r3, #3
 800474c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800474e:	2309      	movs	r3, #9
 8004750:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004752:	f107 031c 	add.w	r3, r7, #28
 8004756:	4619      	mov	r1, r3
 8004758:	484c      	ldr	r0, [pc, #304]	; (800488c <HAL_CAN_MspInit+0x1bc>)
 800475a:	f001 fbc1 	bl	8005ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800475e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004764:	2302      	movs	r3, #2
 8004766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004768:	2301      	movs	r3, #1
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800476c:	2303      	movs	r3, #3
 800476e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004770:	2309      	movs	r3, #9
 8004772:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004774:	f107 031c 	add.w	r3, r7, #28
 8004778:	4619      	mov	r1, r3
 800477a:	4844      	ldr	r0, [pc, #272]	; (800488c <HAL_CAN_MspInit+0x1bc>)
 800477c:	f001 fbb0 	bl	8005ee0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8004780:	2200      	movs	r2, #0
 8004782:	2100      	movs	r1, #0
 8004784:	2013      	movs	r0, #19
 8004786:	f001 fade 	bl	8005d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800478a:	2013      	movs	r0, #19
 800478c:	f001 faf7 	bl	8005d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8004790:	2200      	movs	r2, #0
 8004792:	2100      	movs	r1, #0
 8004794:	2014      	movs	r0, #20
 8004796:	f001 fad6 	bl	8005d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800479a:	2014      	movs	r0, #20
 800479c:	f001 faef 	bl	8005d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80047a0:	e069      	b.n	8004876 <HAL_CAN_MspInit+0x1a6>
  else if(hcan->Instance==CAN2)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a3a      	ldr	r2, [pc, #232]	; (8004890 <HAL_CAN_MspInit+0x1c0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d164      	bne.n	8004876 <HAL_CAN_MspInit+0x1a6>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80047ac:	2300      	movs	r3, #0
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	4b35      	ldr	r3, [pc, #212]	; (8004888 <HAL_CAN_MspInit+0x1b8>)
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	4a34      	ldr	r2, [pc, #208]	; (8004888 <HAL_CAN_MspInit+0x1b8>)
 80047b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047ba:	6413      	str	r3, [r2, #64]	; 0x40
 80047bc:	4b32      	ldr	r3, [pc, #200]	; (8004888 <HAL_CAN_MspInit+0x1b8>)
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80047c8:	4b2e      	ldr	r3, [pc, #184]	; (8004884 <HAL_CAN_MspInit+0x1b4>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3301      	adds	r3, #1
 80047ce:	4a2d      	ldr	r2, [pc, #180]	; (8004884 <HAL_CAN_MspInit+0x1b4>)
 80047d0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80047d2:	4b2c      	ldr	r3, [pc, #176]	; (8004884 <HAL_CAN_MspInit+0x1b4>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d10d      	bne.n	80047f6 <HAL_CAN_MspInit+0x126>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80047da:	2300      	movs	r3, #0
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	4b2a      	ldr	r3, [pc, #168]	; (8004888 <HAL_CAN_MspInit+0x1b8>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	4a29      	ldr	r2, [pc, #164]	; (8004888 <HAL_CAN_MspInit+0x1b8>)
 80047e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047e8:	6413      	str	r3, [r2, #64]	; 0x40
 80047ea:	4b27      	ldr	r3, [pc, #156]	; (8004888 <HAL_CAN_MspInit+0x1b8>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047f6:	2300      	movs	r3, #0
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	4b23      	ldr	r3, [pc, #140]	; (8004888 <HAL_CAN_MspInit+0x1b8>)
 80047fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fe:	4a22      	ldr	r2, [pc, #136]	; (8004888 <HAL_CAN_MspInit+0x1b8>)
 8004800:	f043 0302 	orr.w	r3, r3, #2
 8004804:	6313      	str	r3, [r2, #48]	; 0x30
 8004806:	4b20      	ldr	r3, [pc, #128]	; (8004888 <HAL_CAN_MspInit+0x1b8>)
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	60bb      	str	r3, [r7, #8]
 8004810:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004818:	2302      	movs	r3, #2
 800481a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481c:	2300      	movs	r3, #0
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004820:	2303      	movs	r3, #3
 8004822:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8004824:	2309      	movs	r3, #9
 8004826:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004828:	f107 031c 	add.w	r3, r7, #28
 800482c:	4619      	mov	r1, r3
 800482e:	4819      	ldr	r0, [pc, #100]	; (8004894 <HAL_CAN_MspInit+0x1c4>)
 8004830:	f001 fb56 	bl	8005ee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483a:	2302      	movs	r3, #2
 800483c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800483e:	2301      	movs	r3, #1
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004842:	2303      	movs	r3, #3
 8004844:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8004846:	2309      	movs	r3, #9
 8004848:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800484a:	f107 031c 	add.w	r3, r7, #28
 800484e:	4619      	mov	r1, r3
 8004850:	4810      	ldr	r0, [pc, #64]	; (8004894 <HAL_CAN_MspInit+0x1c4>)
 8004852:	f001 fb45 	bl	8005ee0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8004856:	2200      	movs	r2, #0
 8004858:	2100      	movs	r1, #0
 800485a:	203f      	movs	r0, #63	; 0x3f
 800485c:	f001 fa73 	bl	8005d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8004860:	203f      	movs	r0, #63	; 0x3f
 8004862:	f001 fa8c 	bl	8005d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8004866:	2200      	movs	r2, #0
 8004868:	2100      	movs	r1, #0
 800486a:	2040      	movs	r0, #64	; 0x40
 800486c:	f001 fa6b 	bl	8005d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8004870:	2040      	movs	r0, #64	; 0x40
 8004872:	f001 fa84 	bl	8005d7e <HAL_NVIC_EnableIRQ>
}
 8004876:	bf00      	nop
 8004878:	3730      	adds	r7, #48	; 0x30
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40006400 	.word	0x40006400
 8004884:	20000a04 	.word	0x20000a04
 8004888:	40023800 	.word	0x40023800
 800488c:	40020000 	.word	0x40020000
 8004890:	40006800 	.word	0x40006800
 8004894:	40020400 	.word	0x40020400

08004898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a8:	d116      	bne.n	80048d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	4b1a      	ldr	r3, [pc, #104]	; (8004918 <HAL_TIM_Base_MspInit+0x80>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	4a19      	ldr	r2, [pc, #100]	; (8004918 <HAL_TIM_Base_MspInit+0x80>)
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ba:	4b17      	ldr	r3, [pc, #92]	; (8004918 <HAL_TIM_Base_MspInit+0x80>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80048c6:	2200      	movs	r2, #0
 80048c8:	2101      	movs	r1, #1
 80048ca:	201c      	movs	r0, #28
 80048cc:	f001 fa3b 	bl	8005d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80048d0:	201c      	movs	r0, #28
 80048d2:	f001 fa54 	bl	8005d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80048d6:	e01a      	b.n	800490e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a0f      	ldr	r2, [pc, #60]	; (800491c <HAL_TIM_Base_MspInit+0x84>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d115      	bne.n	800490e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	4b0c      	ldr	r3, [pc, #48]	; (8004918 <HAL_TIM_Base_MspInit+0x80>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	4a0b      	ldr	r2, [pc, #44]	; (8004918 <HAL_TIM_Base_MspInit+0x80>)
 80048ec:	f043 0302 	orr.w	r3, r3, #2
 80048f0:	6413      	str	r3, [r2, #64]	; 0x40
 80048f2:	4b09      	ldr	r3, [pc, #36]	; (8004918 <HAL_TIM_Base_MspInit+0x80>)
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	60bb      	str	r3, [r7, #8]
 80048fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80048fe:	2200      	movs	r2, #0
 8004900:	2101      	movs	r1, #1
 8004902:	201d      	movs	r0, #29
 8004904:	f001 fa1f 	bl	8005d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004908:	201d      	movs	r0, #29
 800490a:	f001 fa38 	bl	8005d7e <HAL_NVIC_EnableIRQ>
}
 800490e:	bf00      	nop
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	40023800 	.word	0x40023800
 800491c:	40000400 	.word	0x40000400

08004920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08c      	sub	sp, #48	; 0x30
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004928:	f107 031c 	add.w	r3, r7, #28
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	605a      	str	r2, [r3, #4]
 8004932:	609a      	str	r2, [r3, #8]
 8004934:	60da      	str	r2, [r3, #12]
 8004936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a36      	ldr	r2, [pc, #216]	; (8004a18 <HAL_UART_MspInit+0xf8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d12d      	bne.n	800499e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004942:	2300      	movs	r3, #0
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	4b35      	ldr	r3, [pc, #212]	; (8004a1c <HAL_UART_MspInit+0xfc>)
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	4a34      	ldr	r2, [pc, #208]	; (8004a1c <HAL_UART_MspInit+0xfc>)
 800494c:	f043 0310 	orr.w	r3, r3, #16
 8004950:	6453      	str	r3, [r2, #68]	; 0x44
 8004952:	4b32      	ldr	r3, [pc, #200]	; (8004a1c <HAL_UART_MspInit+0xfc>)
 8004954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004956:	f003 0310 	and.w	r3, r3, #16
 800495a:	61bb      	str	r3, [r7, #24]
 800495c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800495e:	2300      	movs	r3, #0
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	4b2e      	ldr	r3, [pc, #184]	; (8004a1c <HAL_UART_MspInit+0xfc>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004966:	4a2d      	ldr	r2, [pc, #180]	; (8004a1c <HAL_UART_MspInit+0xfc>)
 8004968:	f043 0301 	orr.w	r3, r3, #1
 800496c:	6313      	str	r3, [r2, #48]	; 0x30
 800496e:	4b2b      	ldr	r3, [pc, #172]	; (8004a1c <HAL_UART_MspInit+0xfc>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800497a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800497e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004980:	2312      	movs	r3, #18
 8004982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004984:	2300      	movs	r3, #0
 8004986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004988:	2303      	movs	r3, #3
 800498a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800498c:	2307      	movs	r3, #7
 800498e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004990:	f107 031c 	add.w	r3, r7, #28
 8004994:	4619      	mov	r1, r3
 8004996:	4822      	ldr	r0, [pc, #136]	; (8004a20 <HAL_UART_MspInit+0x100>)
 8004998:	f001 faa2 	bl	8005ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800499c:	e038      	b.n	8004a10 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a20      	ldr	r2, [pc, #128]	; (8004a24 <HAL_UART_MspInit+0x104>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d133      	bne.n	8004a10 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80049a8:	2300      	movs	r3, #0
 80049aa:	613b      	str	r3, [r7, #16]
 80049ac:	4b1b      	ldr	r3, [pc, #108]	; (8004a1c <HAL_UART_MspInit+0xfc>)
 80049ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b0:	4a1a      	ldr	r2, [pc, #104]	; (8004a1c <HAL_UART_MspInit+0xfc>)
 80049b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049b6:	6413      	str	r3, [r2, #64]	; 0x40
 80049b8:	4b18      	ldr	r3, [pc, #96]	; (8004a1c <HAL_UART_MspInit+0xfc>)
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	4b14      	ldr	r3, [pc, #80]	; (8004a1c <HAL_UART_MspInit+0xfc>)
 80049ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049cc:	4a13      	ldr	r2, [pc, #76]	; (8004a1c <HAL_UART_MspInit+0xfc>)
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	6313      	str	r3, [r2, #48]	; 0x30
 80049d4:	4b11      	ldr	r3, [pc, #68]	; (8004a1c <HAL_UART_MspInit+0xfc>)
 80049d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80049e0:	230c      	movs	r3, #12
 80049e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049e4:	2302      	movs	r3, #2
 80049e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e8:	2300      	movs	r3, #0
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ec:	2303      	movs	r3, #3
 80049ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80049f0:	2307      	movs	r3, #7
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049f4:	f107 031c 	add.w	r3, r7, #28
 80049f8:	4619      	mov	r1, r3
 80049fa:	4809      	ldr	r0, [pc, #36]	; (8004a20 <HAL_UART_MspInit+0x100>)
 80049fc:	f001 fa70 	bl	8005ee0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004a00:	2200      	movs	r2, #0
 8004a02:	2100      	movs	r1, #0
 8004a04:	2026      	movs	r0, #38	; 0x26
 8004a06:	f001 f99e 	bl	8005d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004a0a:	2026      	movs	r0, #38	; 0x26
 8004a0c:	f001 f9b7 	bl	8005d7e <HAL_NVIC_EnableIRQ>
}
 8004a10:	bf00      	nop
 8004a12:	3730      	adds	r7, #48	; 0x30
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40011000 	.word	0x40011000
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	40020000 	.word	0x40020000
 8004a24:	40004400 	.word	0x40004400

08004a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a2c:	e7fe      	b.n	8004a2c <NMI_Handler+0x4>

08004a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a32:	e7fe      	b.n	8004a32 <HardFault_Handler+0x4>

08004a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a38:	e7fe      	b.n	8004a38 <MemManage_Handler+0x4>

08004a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a3e:	e7fe      	b.n	8004a3e <BusFault_Handler+0x4>

08004a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a44:	e7fe      	b.n	8004a44 <UsageFault_Handler+0x4>

08004a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a46:	b480      	push	{r7}
 8004a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a4a:	bf00      	nop
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a58:	bf00      	nop
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a62:	b480      	push	{r7}
 8004a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a66:	bf00      	nop
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a74:	f000 f9a4 	bl	8004dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a78:	bf00      	nop
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004a80:	4802      	ldr	r0, [pc, #8]	; (8004a8c <CAN1_TX_IRQHandler+0x10>)
 8004a82:	f000 fe49 	bl	8005718 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8004a86:	bf00      	nop
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000204 	.word	0x20000204

08004a90 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004a94:	4802      	ldr	r0, [pc, #8]	; (8004aa0 <CAN1_RX0_IRQHandler+0x10>)
 8004a96:	f000 fe3f 	bl	8005718 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004a9a:	bf00      	nop
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000204 	.word	0x20000204

08004aa4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004aa8:	2040      	movs	r0, #64	; 0x40
 8004aaa:	f001 fbdf 	bl	800626c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004aae:	bf00      	nop
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004ab8:	4802      	ldr	r0, [pc, #8]	; (8004ac4 <TIM2_IRQHandler+0x10>)
 8004aba:	f002 fc07 	bl	80072cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004abe:	bf00      	nop
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000254 	.word	0x20000254

08004ac8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004acc:	4802      	ldr	r0, [pc, #8]	; (8004ad8 <TIM3_IRQHandler+0x10>)
 8004ace:	f002 fbfd 	bl	80072cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004ad2:	bf00      	nop
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	2000029c 	.word	0x2000029c

08004adc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004ae0:	4802      	ldr	r0, [pc, #8]	; (8004aec <USART2_IRQHandler+0x10>)
 8004ae2:	f003 fb87 	bl	80081f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004ae6:	bf00      	nop
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	20000328 	.word	0x20000328

08004af0 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004af4:	4802      	ldr	r0, [pc, #8]	; (8004b00 <CAN2_TX_IRQHandler+0x10>)
 8004af6:	f000 fe0f 	bl	8005718 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8004afa:	bf00      	nop
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	2000022c 	.word	0x2000022c

08004b04 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004b08:	4802      	ldr	r0, [pc, #8]	; (8004b14 <CAN2_RX0_IRQHandler+0x10>)
 8004b0a:	f000 fe05 	bl	8005718 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004b0e:	bf00      	nop
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	2000022c 	.word	0x2000022c

08004b18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
	return 1;
 8004b1c:	2301      	movs	r3, #1
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <_kill>:

int _kill(int pid, int sig)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004b32:	f004 fc47 	bl	80093c4 <__errno>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2216      	movs	r2, #22
 8004b3a:	601a      	str	r2, [r3, #0]
	return -1;
 8004b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <_exit>:

void _exit (int status)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004b50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff ffe7 	bl	8004b28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004b5a:	e7fe      	b.n	8004b5a <_exit+0x12>

08004b5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b68:	2300      	movs	r3, #0
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	e00a      	b.n	8004b84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004b6e:	f3af 8000 	nop.w
 8004b72:	4601      	mov	r1, r0
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	60ba      	str	r2, [r7, #8]
 8004b7a:	b2ca      	uxtb	r2, r1
 8004b7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	3301      	adds	r3, #1
 8004b82:	617b      	str	r3, [r7, #20]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	dbf0      	blt.n	8004b6e <_read+0x12>
	}

return len;
 8004b8c:	687b      	ldr	r3, [r7, #4]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b086      	sub	sp, #24
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	e009      	b.n	8004bbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	60ba      	str	r2, [r7, #8]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	dbf1      	blt.n	8004ba8 <_write+0x12>
	}
	return len;
 8004bc4:	687b      	ldr	r3, [r7, #4]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <_close>:

int _close(int file)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
	return -1;
 8004bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004bf6:	605a      	str	r2, [r3, #4]
	return 0;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <_isatty>:

int _isatty(int file)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
	return 1;
 8004c0e:	2301      	movs	r3, #1
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
	return 0;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
	...

08004c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c40:	4a14      	ldr	r2, [pc, #80]	; (8004c94 <_sbrk+0x5c>)
 8004c42:	4b15      	ldr	r3, [pc, #84]	; (8004c98 <_sbrk+0x60>)
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c4c:	4b13      	ldr	r3, [pc, #76]	; (8004c9c <_sbrk+0x64>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c54:	4b11      	ldr	r3, [pc, #68]	; (8004c9c <_sbrk+0x64>)
 8004c56:	4a12      	ldr	r2, [pc, #72]	; (8004ca0 <_sbrk+0x68>)
 8004c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c5a:	4b10      	ldr	r3, [pc, #64]	; (8004c9c <_sbrk+0x64>)
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4413      	add	r3, r2
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d207      	bcs.n	8004c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c68:	f004 fbac 	bl	80093c4 <__errno>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	220c      	movs	r2, #12
 8004c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c76:	e009      	b.n	8004c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c78:	4b08      	ldr	r3, [pc, #32]	; (8004c9c <_sbrk+0x64>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c7e:	4b07      	ldr	r3, [pc, #28]	; (8004c9c <_sbrk+0x64>)
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4413      	add	r3, r2
 8004c86:	4a05      	ldr	r2, [pc, #20]	; (8004c9c <_sbrk+0x64>)
 8004c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	20020000 	.word	0x20020000
 8004c98:	00000400 	.word	0x00000400
 8004c9c:	20000a08 	.word	0x20000a08
 8004ca0:	20000c28 	.word	0x20000c28

08004ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ca8:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <SystemInit+0x20>)
 8004caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cae:	4a05      	ldr	r2, [pc, #20]	; (8004cc4 <SystemInit+0x20>)
 8004cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004cb8:	bf00      	nop
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	e000ed00 	.word	0xe000ed00

08004cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ccc:	480d      	ldr	r0, [pc, #52]	; (8004d04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004cce:	490e      	ldr	r1, [pc, #56]	; (8004d08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004cd0:	4a0e      	ldr	r2, [pc, #56]	; (8004d0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004cd4:	e002      	b.n	8004cdc <LoopCopyDataInit>

08004cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cda:	3304      	adds	r3, #4

08004cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ce0:	d3f9      	bcc.n	8004cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ce2:	4a0b      	ldr	r2, [pc, #44]	; (8004d10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004ce4:	4c0b      	ldr	r4, [pc, #44]	; (8004d14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ce8:	e001      	b.n	8004cee <LoopFillZerobss>

08004cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cec:	3204      	adds	r2, #4

08004cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cf0:	d3fb      	bcc.n	8004cea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004cf2:	f7ff ffd7 	bl	8004ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004cf6:	f004 fb6b 	bl	80093d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cfa:	f7fe fb83 	bl	8003404 <main>
  bx  lr    
 8004cfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004d00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d08:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8004d0c:	0800e9d8 	.word	0x0800e9d8
  ldr r2, =_sbss
 8004d10:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8004d14:	20000c24 	.word	0x20000c24

08004d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d18:	e7fe      	b.n	8004d18 <ADC_IRQHandler>
	...

08004d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d20:	4b0e      	ldr	r3, [pc, #56]	; (8004d5c <HAL_Init+0x40>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a0d      	ldr	r2, [pc, #52]	; (8004d5c <HAL_Init+0x40>)
 8004d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d2c:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <HAL_Init+0x40>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a0a      	ldr	r2, [pc, #40]	; (8004d5c <HAL_Init+0x40>)
 8004d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d38:	4b08      	ldr	r3, [pc, #32]	; (8004d5c <HAL_Init+0x40>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a07      	ldr	r2, [pc, #28]	; (8004d5c <HAL_Init+0x40>)
 8004d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d44:	2003      	movs	r0, #3
 8004d46:	f000 fff3 	bl	8005d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	f000 f808 	bl	8004d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d50:	f7ff fc96 	bl	8004680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40023c00 	.word	0x40023c00

08004d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d68:	4b12      	ldr	r3, [pc, #72]	; (8004db4 <HAL_InitTick+0x54>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	4b12      	ldr	r3, [pc, #72]	; (8004db8 <HAL_InitTick+0x58>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	4619      	mov	r1, r3
 8004d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f001 f80f 	bl	8005da2 <HAL_SYSTICK_Config>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e00e      	b.n	8004dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b0f      	cmp	r3, #15
 8004d92:	d80a      	bhi.n	8004daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d94:	2200      	movs	r2, #0
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d9c:	f000 ffd3 	bl	8005d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004da0:	4a06      	ldr	r2, [pc, #24]	; (8004dbc <HAL_InitTick+0x5c>)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	e000      	b.n	8004dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	2000000c 	.word	0x2000000c
 8004db8:	20000014 	.word	0x20000014
 8004dbc:	20000010 	.word	0x20000010

08004dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004dc4:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <HAL_IncTick+0x20>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <HAL_IncTick+0x24>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4413      	add	r3, r2
 8004dd0:	4a04      	ldr	r2, [pc, #16]	; (8004de4 <HAL_IncTick+0x24>)
 8004dd2:	6013      	str	r3, [r2, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	20000014 	.word	0x20000014
 8004de4:	20000a0c 	.word	0x20000a0c

08004de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  return uwTick;
 8004dec:	4b03      	ldr	r3, [pc, #12]	; (8004dfc <HAL_GetTick+0x14>)
 8004dee:	681b      	ldr	r3, [r3, #0]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20000a0c 	.word	0x20000a0c

08004e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e08:	f7ff ffee 	bl	8004de8 <HAL_GetTick>
 8004e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e18:	d005      	beq.n	8004e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e1a:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <HAL_Delay+0x44>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4413      	add	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004e26:	bf00      	nop
 8004e28:	f7ff ffde 	bl	8004de8 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d8f7      	bhi.n	8004e28 <HAL_Delay+0x28>
  {
  }
}
 8004e38:	bf00      	nop
 8004e3a:	bf00      	nop
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20000014 	.word	0x20000014

08004e48 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e0ed      	b.n	8005036 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d102      	bne.n	8004e6c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff fc32 	bl	80046d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0201 	orr.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e7c:	f7ff ffb4 	bl	8004de8 <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004e82:	e012      	b.n	8004eaa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e84:	f7ff ffb0 	bl	8004de8 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b0a      	cmp	r3, #10
 8004e90:	d90b      	bls.n	8004eaa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2205      	movs	r2, #5
 8004ea2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e0c5      	b.n	8005036 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0e5      	beq.n	8004e84 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0202 	bic.w	r2, r2, #2
 8004ec6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ec8:	f7ff ff8e 	bl	8004de8 <HAL_GetTick>
 8004ecc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004ece:	e012      	b.n	8004ef6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004ed0:	f7ff ff8a 	bl	8004de8 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b0a      	cmp	r3, #10
 8004edc:	d90b      	bls.n	8004ef6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2205      	movs	r2, #5
 8004eee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e09f      	b.n	8005036 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e5      	bne.n	8004ed0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	7e1b      	ldrb	r3, [r3, #24]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d108      	bne.n	8004f1e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	e007      	b.n	8004f2e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	7e5b      	ldrb	r3, [r3, #25]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d108      	bne.n	8004f48 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	e007      	b.n	8004f58 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f56:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	7e9b      	ldrb	r3, [r3, #26]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d108      	bne.n	8004f72 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0220 	orr.w	r2, r2, #32
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	e007      	b.n	8004f82 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0220 	bic.w	r2, r2, #32
 8004f80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	7edb      	ldrb	r3, [r3, #27]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d108      	bne.n	8004f9c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0210 	bic.w	r2, r2, #16
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	e007      	b.n	8004fac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0210 	orr.w	r2, r2, #16
 8004faa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	7f1b      	ldrb	r3, [r3, #28]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d108      	bne.n	8004fc6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0208 	orr.w	r2, r2, #8
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	e007      	b.n	8004fd6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0208 	bic.w	r2, r2, #8
 8004fd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	7f5b      	ldrb	r3, [r3, #29]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d108      	bne.n	8004ff0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f042 0204 	orr.w	r2, r2, #4
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	e007      	b.n	8005000 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0204 	bic.w	r2, r2, #4
 8004ffe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	431a      	orrs	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	ea42 0103 	orr.w	r1, r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	1e5a      	subs	r2, r3, #1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005056:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005058:	7cfb      	ldrb	r3, [r7, #19]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d003      	beq.n	8005066 <HAL_CAN_ConfigFilter+0x26>
 800505e:	7cfb      	ldrb	r3, [r7, #19]
 8005060:	2b02      	cmp	r3, #2
 8005062:	f040 80be 	bne.w	80051e2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005066:	4b65      	ldr	r3, [pc, #404]	; (80051fc <HAL_CAN_ConfigFilter+0x1bc>)
 8005068:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005070:	f043 0201 	orr.w	r2, r3, #1
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005080:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	021b      	lsls	r3, r3, #8
 8005096:	431a      	orrs	r2, r3
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	f003 031f 	and.w	r3, r3, #31
 80050a6:	2201      	movs	r2, #1
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	43db      	mvns	r3, r3
 80050b8:	401a      	ands	r2, r3
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d123      	bne.n	8005110 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	43db      	mvns	r3, r3
 80050d2:	401a      	ands	r2, r3
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80050ea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	3248      	adds	r2, #72	; 0x48
 80050f0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005104:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005106:	6979      	ldr	r1, [r7, #20]
 8005108:	3348      	adds	r3, #72	; 0x48
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	440b      	add	r3, r1
 800510e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d122      	bne.n	800515e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	431a      	orrs	r2, r3
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005138:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	3248      	adds	r2, #72	; 0x48
 800513e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005152:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005154:	6979      	ldr	r1, [r7, #20]
 8005156:	3348      	adds	r3, #72	; 0x48
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	440b      	add	r3, r1
 800515c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d109      	bne.n	800517a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	43db      	mvns	r3, r3
 8005170:	401a      	ands	r2, r3
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005178:	e007      	b.n	800518a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	431a      	orrs	r2, r3
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d109      	bne.n	80051a6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	43db      	mvns	r3, r3
 800519c:	401a      	ands	r2, r3
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80051a4:	e007      	b.n	80051b6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	431a      	orrs	r2, r3
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d107      	bne.n	80051ce <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	431a      	orrs	r2, r3
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80051d4:	f023 0201 	bic.w	r2, r3, #1
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	e006      	b.n	80051f0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
  }
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	40006400 	.word	0x40006400

08005200 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b01      	cmp	r3, #1
 8005212:	d12e      	bne.n	8005272 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0201 	bic.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800522c:	f7ff fddc 	bl	8004de8 <HAL_GetTick>
 8005230:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005232:	e012      	b.n	800525a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005234:	f7ff fdd8 	bl	8004de8 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b0a      	cmp	r3, #10
 8005240:	d90b      	bls.n	800525a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2205      	movs	r2, #5
 8005252:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e012      	b.n	8005280 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1e5      	bne.n	8005234 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	e006      	b.n	8005280 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
  }
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005288:	b480      	push	{r7}
 800528a:	b089      	sub	sp, #36	; 0x24
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800529c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80052a6:	7ffb      	ldrb	r3, [r7, #31]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d003      	beq.n	80052b4 <HAL_CAN_AddTxMessage+0x2c>
 80052ac:	7ffb      	ldrb	r3, [r7, #31]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	f040 80b8 	bne.w	8005424 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10a      	bne.n	80052d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d105      	bne.n	80052d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 80a0 	beq.w	8005414 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	0e1b      	lsrs	r3, r3, #24
 80052d8:	f003 0303 	and.w	r3, r3, #3
 80052dc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d907      	bls.n	80052f4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e09e      	b.n	8005432 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80052f4:	2201      	movs	r2, #1
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	409a      	lsls	r2, r3
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10d      	bne.n	8005322 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005310:	68f9      	ldr	r1, [r7, #12]
 8005312:	6809      	ldr	r1, [r1, #0]
 8005314:	431a      	orrs	r2, r3
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	3318      	adds	r3, #24
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	440b      	add	r3, r1
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	e00f      	b.n	8005342 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800532c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005332:	68f9      	ldr	r1, [r7, #12]
 8005334:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005336:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	3318      	adds	r3, #24
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	440b      	add	r3, r1
 8005340:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6819      	ldr	r1, [r3, #0]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	691a      	ldr	r2, [r3, #16]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	3318      	adds	r3, #24
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	440b      	add	r3, r1
 8005352:	3304      	adds	r3, #4
 8005354:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	7d1b      	ldrb	r3, [r3, #20]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d111      	bne.n	8005382 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	3318      	adds	r3, #24
 8005366:	011b      	lsls	r3, r3, #4
 8005368:	4413      	add	r3, r2
 800536a:	3304      	adds	r3, #4
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	6811      	ldr	r1, [r2, #0]
 8005372:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	3318      	adds	r3, #24
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	440b      	add	r3, r1
 800537e:	3304      	adds	r3, #4
 8005380:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	3307      	adds	r3, #7
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	061a      	lsls	r2, r3, #24
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	3306      	adds	r3, #6
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	041b      	lsls	r3, r3, #16
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3305      	adds	r3, #5
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	4313      	orrs	r3, r2
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	3204      	adds	r2, #4
 80053a2:	7812      	ldrb	r2, [r2, #0]
 80053a4:	4610      	mov	r0, r2
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	6811      	ldr	r1, [r2, #0]
 80053aa:	ea43 0200 	orr.w	r2, r3, r0
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	440b      	add	r3, r1
 80053b4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80053b8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3303      	adds	r3, #3
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	061a      	lsls	r2, r3, #24
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	3302      	adds	r3, #2
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	041b      	lsls	r3, r3, #16
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3301      	adds	r3, #1
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	021b      	lsls	r3, r3, #8
 80053d4:	4313      	orrs	r3, r2
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	7812      	ldrb	r2, [r2, #0]
 80053da:	4610      	mov	r0, r2
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	6811      	ldr	r1, [r2, #0]
 80053e0:	ea43 0200 	orr.w	r2, r3, r0
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	440b      	add	r3, r1
 80053ea:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80053ee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	3318      	adds	r3, #24
 80053f8:	011b      	lsls	r3, r3, #4
 80053fa:	4413      	add	r3, r2
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	6811      	ldr	r1, [r2, #0]
 8005402:	f043 0201 	orr.w	r2, r3, #1
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	3318      	adds	r3, #24
 800540a:	011b      	lsls	r3, r3, #4
 800540c:	440b      	add	r3, r1
 800540e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005410:	2300      	movs	r3, #0
 8005412:	e00e      	b.n	8005432 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e006      	b.n	8005432 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
  }
}
 8005432:	4618      	mov	r0, r3
 8005434:	3724      	adds	r7, #36	; 0x24
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800543e:	b480      	push	{r7}
 8005440:	b085      	sub	sp, #20
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005450:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8005452:	7afb      	ldrb	r3, [r7, #11]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d002      	beq.n	800545e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8005458:	7afb      	ldrb	r3, [r7, #11]
 800545a:	2b02      	cmp	r3, #2
 800545c:	d11d      	bne.n	800549a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	3301      	adds	r3, #1
 8005470:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3301      	adds	r3, #1
 8005484:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	3301      	adds	r3, #1
 8005498:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800549a:	68fb      	ldr	r3, [r7, #12]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
 80054b4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054bc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80054be:	7dfb      	ldrb	r3, [r7, #23]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d003      	beq.n	80054cc <HAL_CAN_GetRxMessage+0x24>
 80054c4:	7dfb      	ldrb	r3, [r7, #23]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	f040 80f3 	bne.w	80056b2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10e      	bne.n	80054f0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f003 0303 	and.w	r3, r3, #3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d116      	bne.n	800550e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e0e7      	b.n	80056c0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d107      	bne.n	800550e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e0d8      	b.n	80056c0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	331b      	adds	r3, #27
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	4413      	add	r3, r2
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0204 	and.w	r2, r3, #4
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10c      	bne.n	8005546 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	331b      	adds	r3, #27
 8005534:	011b      	lsls	r3, r3, #4
 8005536:	4413      	add	r3, r2
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	0d5b      	lsrs	r3, r3, #21
 800553c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	e00b      	b.n	800555e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	331b      	adds	r3, #27
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	4413      	add	r3, r2
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	08db      	lsrs	r3, r3, #3
 8005556:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	331b      	adds	r3, #27
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	4413      	add	r3, r2
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0202 	and.w	r2, r3, #2
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	331b      	adds	r3, #27
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	4413      	add	r3, r2
 8005580:	3304      	adds	r3, #4
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 020f 	and.w	r2, r3, #15
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	331b      	adds	r3, #27
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	4413      	add	r3, r2
 8005598:	3304      	adds	r3, #4
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	0a1b      	lsrs	r3, r3, #8
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	331b      	adds	r3, #27
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	4413      	add	r3, r2
 80055b0:	3304      	adds	r3, #4
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	0c1b      	lsrs	r3, r3, #16
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	4413      	add	r3, r2
 80055dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	0a1a      	lsrs	r2, r3, #8
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	3301      	adds	r3, #1
 80055e8:	b2d2      	uxtb	r2, r2
 80055ea:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	0c1a      	lsrs	r2, r3, #16
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	3302      	adds	r3, #2
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	4413      	add	r3, r2
 8005610:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	0e1a      	lsrs	r2, r3, #24
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	3303      	adds	r3, #3
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	4413      	add	r3, r2
 800562a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	3304      	adds	r3, #4
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	4413      	add	r3, r2
 8005642:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	0a1a      	lsrs	r2, r3, #8
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	3305      	adds	r3, #5
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	4413      	add	r3, r2
 800565c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	0c1a      	lsrs	r2, r3, #16
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	3306      	adds	r3, #6
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	4413      	add	r3, r2
 8005676:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	0e1a      	lsrs	r2, r3, #24
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	3307      	adds	r3, #7
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d108      	bne.n	800569e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0220 	orr.w	r2, r2, #32
 800569a:	60da      	str	r2, [r3, #12]
 800569c:	e007      	b.n	80056ae <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	691a      	ldr	r2, [r3, #16]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f042 0220 	orr.w	r2, r2, #32
 80056ac:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	e006      	b.n	80056c0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
  }
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	371c      	adds	r7, #28
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056dc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80056de:	7bfb      	ldrb	r3, [r7, #15]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d002      	beq.n	80056ea <HAL_CAN_ActivateNotification+0x1e>
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d109      	bne.n	80056fe <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6959      	ldr	r1, [r3, #20]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	e006      	b.n	800570c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
  }
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08a      	sub	sp, #40	; 0x28
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005720:	2300      	movs	r3, #0
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d07c      	beq.n	8005858 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d023      	beq.n	80057b0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2201      	movs	r2, #1
 800576e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7fe fe9c 	bl	80044b8 <HAL_CAN_TxMailbox0CompleteCallback>
 8005780:	e016      	b.n	80057b0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b00      	cmp	r3, #0
 800578a:	d004      	beq.n	8005796 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005792:	627b      	str	r3, [r7, #36]	; 0x24
 8005794:	e00c      	b.n	80057b0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	f003 0308 	and.w	r3, r3, #8
 800579c:	2b00      	cmp	r3, #0
 800579e:	d004      	beq.n	80057aa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057a6:	627b      	str	r3, [r7, #36]	; 0x24
 80057a8:	e002      	b.n	80057b0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f97f 	bl	8005aae <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d024      	beq.n	8005804 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f959 	bl	8005a86 <HAL_CAN_TxMailbox1CompleteCallback>
 80057d4:	e016      	b.n	8005804 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d004      	beq.n	80057ea <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
 80057e8:	e00c      	b.n	8005804 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d004      	beq.n	80057fe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
 80057fc:	e002      	b.n	8005804 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f95f 	bl	8005ac2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d024      	beq.n	8005858 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005816:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f939 	bl	8005a9a <HAL_CAN_TxMailbox2CompleteCallback>
 8005828:	e016      	b.n	8005858 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d004      	beq.n	800583e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800583a:	627b      	str	r3, [r7, #36]	; 0x24
 800583c:	e00c      	b.n	8005858 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d004      	beq.n	8005852 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800584e:	627b      	str	r3, [r7, #36]	; 0x24
 8005850:	e002      	b.n	8005858 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f93f 	bl	8005ad6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	f003 0308 	and.w	r3, r3, #8
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00c      	beq.n	800587c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f003 0310 	and.w	r3, r3, #16
 8005868:	2b00      	cmp	r3, #0
 800586a:	d007      	beq.n	800587c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005872:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2210      	movs	r2, #16
 800587a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00b      	beq.n	800589e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f003 0308 	and.w	r3, r3, #8
 800588c:	2b00      	cmp	r3, #0
 800588e:	d006      	beq.n	800589e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2208      	movs	r2, #8
 8005896:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f926 	bl	8005aea <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d009      	beq.n	80058bc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d002      	beq.n	80058bc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fe fe08 	bl	80044cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00c      	beq.n	80058e0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d007      	beq.n	80058e0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2210      	movs	r2, #16
 80058de:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00b      	beq.n	8005902 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f003 0308 	and.w	r3, r3, #8
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d006      	beq.n	8005902 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2208      	movs	r2, #8
 80058fa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f908 	bl	8005b12 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	f003 0310 	and.w	r3, r3, #16
 8005908:	2b00      	cmp	r3, #0
 800590a:	d009      	beq.n	8005920 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f8ef 	bl	8005afe <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00b      	beq.n	8005942 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b00      	cmp	r3, #0
 8005932:	d006      	beq.n	8005942 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2210      	movs	r2, #16
 800593a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f8f2 	bl	8005b26 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00b      	beq.n	8005964 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	f003 0308 	and.w	r3, r3, #8
 8005952:	2b00      	cmp	r3, #0
 8005954:	d006      	beq.n	8005964 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2208      	movs	r2, #8
 800595c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f8eb 	bl	8005b3a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d07b      	beq.n	8005a66 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b00      	cmp	r3, #0
 8005976:	d072      	beq.n	8005a5e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597e:	2b00      	cmp	r3, #0
 8005980:	d008      	beq.n	8005994 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	f043 0301 	orr.w	r3, r3, #1
 8005992:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800599a:	2b00      	cmp	r3, #0
 800599c:	d008      	beq.n	80059b0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	f043 0302 	orr.w	r3, r3, #2
 80059ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d008      	beq.n	80059cc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	f043 0304 	orr.w	r3, r3, #4
 80059ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d043      	beq.n	8005a5e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d03e      	beq.n	8005a5e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059e6:	2b60      	cmp	r3, #96	; 0x60
 80059e8:	d02b      	beq.n	8005a42 <HAL_CAN_IRQHandler+0x32a>
 80059ea:	2b60      	cmp	r3, #96	; 0x60
 80059ec:	d82e      	bhi.n	8005a4c <HAL_CAN_IRQHandler+0x334>
 80059ee:	2b50      	cmp	r3, #80	; 0x50
 80059f0:	d022      	beq.n	8005a38 <HAL_CAN_IRQHandler+0x320>
 80059f2:	2b50      	cmp	r3, #80	; 0x50
 80059f4:	d82a      	bhi.n	8005a4c <HAL_CAN_IRQHandler+0x334>
 80059f6:	2b40      	cmp	r3, #64	; 0x40
 80059f8:	d019      	beq.n	8005a2e <HAL_CAN_IRQHandler+0x316>
 80059fa:	2b40      	cmp	r3, #64	; 0x40
 80059fc:	d826      	bhi.n	8005a4c <HAL_CAN_IRQHandler+0x334>
 80059fe:	2b30      	cmp	r3, #48	; 0x30
 8005a00:	d010      	beq.n	8005a24 <HAL_CAN_IRQHandler+0x30c>
 8005a02:	2b30      	cmp	r3, #48	; 0x30
 8005a04:	d822      	bhi.n	8005a4c <HAL_CAN_IRQHandler+0x334>
 8005a06:	2b10      	cmp	r3, #16
 8005a08:	d002      	beq.n	8005a10 <HAL_CAN_IRQHandler+0x2f8>
 8005a0a:	2b20      	cmp	r3, #32
 8005a0c:	d005      	beq.n	8005a1a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005a0e:	e01d      	b.n	8005a4c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	f043 0308 	orr.w	r3, r3, #8
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005a18:	e019      	b.n	8005a4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	f043 0310 	orr.w	r3, r3, #16
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005a22:	e014      	b.n	8005a4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	f043 0320 	orr.w	r3, r3, #32
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005a2c:	e00f      	b.n	8005a4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005a36:	e00a      	b.n	8005a4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005a40:	e005      	b.n	8005a4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005a4a:	e000      	b.n	8005a4e <HAL_CAN_IRQHandler+0x336>
            break;
 8005a4c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	699a      	ldr	r2, [r3, #24]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005a5c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2204      	movs	r2, #4
 8005a64:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d008      	beq.n	8005a7e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f868 	bl	8005b4e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005a7e:	bf00      	nop
 8005a80:	3728      	adds	r7, #40	; 0x28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005b42:	bf00      	nop
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b74:	4b0c      	ldr	r3, [pc, #48]	; (8005ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b80:	4013      	ands	r3, r2
 8005b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b96:	4a04      	ldr	r2, [pc, #16]	; (8005ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	60d3      	str	r3, [r2, #12]
}
 8005b9c:	bf00      	nop
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	e000ed00 	.word	0xe000ed00

08005bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bb0:	4b04      	ldr	r3, [pc, #16]	; (8005bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	0a1b      	lsrs	r3, r3, #8
 8005bb6:	f003 0307 	and.w	r3, r3, #7
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	e000ed00 	.word	0xe000ed00

08005bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	4603      	mov	r3, r0
 8005bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	db0b      	blt.n	8005bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bda:	79fb      	ldrb	r3, [r7, #7]
 8005bdc:	f003 021f 	and.w	r2, r3, #31
 8005be0:	4907      	ldr	r1, [pc, #28]	; (8005c00 <__NVIC_EnableIRQ+0x38>)
 8005be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005be6:	095b      	lsrs	r3, r3, #5
 8005be8:	2001      	movs	r0, #1
 8005bea:	fa00 f202 	lsl.w	r2, r0, r2
 8005bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	e000e100 	.word	0xe000e100

08005c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	6039      	str	r1, [r7, #0]
 8005c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	db0a      	blt.n	8005c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	490c      	ldr	r1, [pc, #48]	; (8005c50 <__NVIC_SetPriority+0x4c>)
 8005c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c22:	0112      	lsls	r2, r2, #4
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	440b      	add	r3, r1
 8005c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c2c:	e00a      	b.n	8005c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	4908      	ldr	r1, [pc, #32]	; (8005c54 <__NVIC_SetPriority+0x50>)
 8005c34:	79fb      	ldrb	r3, [r7, #7]
 8005c36:	f003 030f 	and.w	r3, r3, #15
 8005c3a:	3b04      	subs	r3, #4
 8005c3c:	0112      	lsls	r2, r2, #4
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	440b      	add	r3, r1
 8005c42:	761a      	strb	r2, [r3, #24]
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	e000e100 	.word	0xe000e100
 8005c54:	e000ed00 	.word	0xe000ed00

08005c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b089      	sub	sp, #36	; 0x24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	f1c3 0307 	rsb	r3, r3, #7
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	bf28      	it	cs
 8005c76:	2304      	movcs	r3, #4
 8005c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	2b06      	cmp	r3, #6
 8005c80:	d902      	bls.n	8005c88 <NVIC_EncodePriority+0x30>
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	3b03      	subs	r3, #3
 8005c86:	e000      	b.n	8005c8a <NVIC_EncodePriority+0x32>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	fa02 f303 	lsl.w	r3, r2, r3
 8005c96:	43da      	mvns	r2, r3
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	401a      	ands	r2, r3
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ca0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8005caa:	43d9      	mvns	r1, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cb0:	4313      	orrs	r3, r2
         );
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3724      	adds	r7, #36	; 0x24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
	...

08005cc0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005cc4:	f3bf 8f4f 	dsb	sy
}
 8005cc8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005cca:	4b06      	ldr	r3, [pc, #24]	; (8005ce4 <__NVIC_SystemReset+0x24>)
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005cd2:	4904      	ldr	r1, [pc, #16]	; (8005ce4 <__NVIC_SystemReset+0x24>)
 8005cd4:	4b04      	ldr	r3, [pc, #16]	; (8005ce8 <__NVIC_SystemReset+0x28>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005cda:	f3bf 8f4f 	dsb	sy
}
 8005cde:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005ce0:	bf00      	nop
 8005ce2:	e7fd      	b.n	8005ce0 <__NVIC_SystemReset+0x20>
 8005ce4:	e000ed00 	.word	0xe000ed00
 8005ce8:	05fa0004 	.word	0x05fa0004

08005cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cfc:	d301      	bcc.n	8005d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e00f      	b.n	8005d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d02:	4a0a      	ldr	r2, [pc, #40]	; (8005d2c <SysTick_Config+0x40>)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d0a:	210f      	movs	r1, #15
 8005d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d10:	f7ff ff78 	bl	8005c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d14:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <SysTick_Config+0x40>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d1a:	4b04      	ldr	r3, [pc, #16]	; (8005d2c <SysTick_Config+0x40>)
 8005d1c:	2207      	movs	r2, #7
 8005d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	e000e010 	.word	0xe000e010

08005d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7ff ff13 	bl	8005b64 <__NVIC_SetPriorityGrouping>
}
 8005d3e:	bf00      	nop
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b086      	sub	sp, #24
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	607a      	str	r2, [r7, #4]
 8005d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d58:	f7ff ff28 	bl	8005bac <__NVIC_GetPriorityGrouping>
 8005d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	68b9      	ldr	r1, [r7, #8]
 8005d62:	6978      	ldr	r0, [r7, #20]
 8005d64:	f7ff ff78 	bl	8005c58 <NVIC_EncodePriority>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d6e:	4611      	mov	r1, r2
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7ff ff47 	bl	8005c04 <__NVIC_SetPriority>
}
 8005d76:	bf00      	nop
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b082      	sub	sp, #8
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	4603      	mov	r3, r0
 8005d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7ff ff1b 	bl	8005bc8 <__NVIC_EnableIRQ>
}
 8005d92:	bf00      	nop
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005d9e:	f7ff ff8f 	bl	8005cc0 <__NVIC_SystemReset>

08005da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b082      	sub	sp, #8
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7ff ff9e 	bl	8005cec <SysTick_Config>
 8005db0:	4603      	mov	r3, r0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b084      	sub	sp, #16
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005dc8:	f7ff f80e 	bl	8004de8 <HAL_GetTick>
 8005dcc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d008      	beq.n	8005dec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2280      	movs	r2, #128	; 0x80
 8005dde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e052      	b.n	8005e92 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0216 	bic.w	r2, r2, #22
 8005dfa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695a      	ldr	r2, [r3, #20]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e0a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d103      	bne.n	8005e1c <HAL_DMA_Abort+0x62>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d007      	beq.n	8005e2c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0208 	bic.w	r2, r2, #8
 8005e2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 0201 	bic.w	r2, r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e3c:	e013      	b.n	8005e66 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e3e:	f7fe ffd3 	bl	8004de8 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b05      	cmp	r3, #5
 8005e4a:	d90c      	bls.n	8005e66 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2203      	movs	r2, #3
 8005e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e015      	b.n	8005e92 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1e4      	bne.n	8005e3e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e78:	223f      	movs	r2, #63	; 0x3f
 8005e7a:	409a      	lsls	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b083      	sub	sp, #12
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d004      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2280      	movs	r2, #128	; 0x80
 8005eb2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e00c      	b.n	8005ed2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2205      	movs	r2, #5
 8005ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0201 	bic.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
	...

08005ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b089      	sub	sp, #36	; 0x24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	61fb      	str	r3, [r7, #28]
 8005efa:	e165      	b.n	80061c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005efc:	2201      	movs	r2, #1
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	f040 8154 	bne.w	80061c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f003 0303 	and.w	r3, r3, #3
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d005      	beq.n	8005f32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d130      	bne.n	8005f94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	2203      	movs	r2, #3
 8005f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f42:	43db      	mvns	r3, r3
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	4013      	ands	r3, r2
 8005f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	fa02 f303 	lsl.w	r3, r2, r3
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f68:	2201      	movs	r2, #1
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f70:	43db      	mvns	r3, r3
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	4013      	ands	r3, r2
 8005f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	091b      	lsrs	r3, r3, #4
 8005f7e:	f003 0201 	and.w	r2, r3, #1
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	fa02 f303 	lsl.w	r3, r2, r3
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	69ba      	ldr	r2, [r7, #24]
 8005f92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f003 0303 	and.w	r3, r3, #3
 8005f9c:	2b03      	cmp	r3, #3
 8005f9e:	d017      	beq.n	8005fd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	2203      	movs	r2, #3
 8005fac:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f003 0303 	and.w	r3, r3, #3
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d123      	bne.n	8006024 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	08da      	lsrs	r2, r3, #3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3208      	adds	r2, #8
 8005fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	220f      	movs	r2, #15
 8005ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	fa02 f303 	lsl.w	r3, r2, r3
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	4313      	orrs	r3, r2
 8006014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	08da      	lsrs	r2, r3, #3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	3208      	adds	r2, #8
 800601e:	69b9      	ldr	r1, [r7, #24]
 8006020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	2203      	movs	r2, #3
 8006030:	fa02 f303 	lsl.w	r3, r2, r3
 8006034:	43db      	mvns	r3, r3
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	4013      	ands	r3, r2
 800603a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f003 0203 	and.w	r2, r3, #3
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	fa02 f303 	lsl.w	r3, r2, r3
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	4313      	orrs	r3, r2
 8006050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 80ae 	beq.w	80061c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006066:	2300      	movs	r3, #0
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	4b5d      	ldr	r3, [pc, #372]	; (80061e0 <HAL_GPIO_Init+0x300>)
 800606c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606e:	4a5c      	ldr	r2, [pc, #368]	; (80061e0 <HAL_GPIO_Init+0x300>)
 8006070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006074:	6453      	str	r3, [r2, #68]	; 0x44
 8006076:	4b5a      	ldr	r3, [pc, #360]	; (80061e0 <HAL_GPIO_Init+0x300>)
 8006078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800607e:	60fb      	str	r3, [r7, #12]
 8006080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006082:	4a58      	ldr	r2, [pc, #352]	; (80061e4 <HAL_GPIO_Init+0x304>)
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	089b      	lsrs	r3, r3, #2
 8006088:	3302      	adds	r3, #2
 800608a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800608e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	f003 0303 	and.w	r3, r3, #3
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	220f      	movs	r2, #15
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	43db      	mvns	r3, r3
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	4013      	ands	r3, r2
 80060a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a4f      	ldr	r2, [pc, #316]	; (80061e8 <HAL_GPIO_Init+0x308>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d025      	beq.n	80060fa <HAL_GPIO_Init+0x21a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a4e      	ldr	r2, [pc, #312]	; (80061ec <HAL_GPIO_Init+0x30c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d01f      	beq.n	80060f6 <HAL_GPIO_Init+0x216>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a4d      	ldr	r2, [pc, #308]	; (80061f0 <HAL_GPIO_Init+0x310>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d019      	beq.n	80060f2 <HAL_GPIO_Init+0x212>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a4c      	ldr	r2, [pc, #304]	; (80061f4 <HAL_GPIO_Init+0x314>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d013      	beq.n	80060ee <HAL_GPIO_Init+0x20e>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a4b      	ldr	r2, [pc, #300]	; (80061f8 <HAL_GPIO_Init+0x318>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d00d      	beq.n	80060ea <HAL_GPIO_Init+0x20a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a4a      	ldr	r2, [pc, #296]	; (80061fc <HAL_GPIO_Init+0x31c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d007      	beq.n	80060e6 <HAL_GPIO_Init+0x206>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a49      	ldr	r2, [pc, #292]	; (8006200 <HAL_GPIO_Init+0x320>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d101      	bne.n	80060e2 <HAL_GPIO_Init+0x202>
 80060de:	2306      	movs	r3, #6
 80060e0:	e00c      	b.n	80060fc <HAL_GPIO_Init+0x21c>
 80060e2:	2307      	movs	r3, #7
 80060e4:	e00a      	b.n	80060fc <HAL_GPIO_Init+0x21c>
 80060e6:	2305      	movs	r3, #5
 80060e8:	e008      	b.n	80060fc <HAL_GPIO_Init+0x21c>
 80060ea:	2304      	movs	r3, #4
 80060ec:	e006      	b.n	80060fc <HAL_GPIO_Init+0x21c>
 80060ee:	2303      	movs	r3, #3
 80060f0:	e004      	b.n	80060fc <HAL_GPIO_Init+0x21c>
 80060f2:	2302      	movs	r3, #2
 80060f4:	e002      	b.n	80060fc <HAL_GPIO_Init+0x21c>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e000      	b.n	80060fc <HAL_GPIO_Init+0x21c>
 80060fa:	2300      	movs	r3, #0
 80060fc:	69fa      	ldr	r2, [r7, #28]
 80060fe:	f002 0203 	and.w	r2, r2, #3
 8006102:	0092      	lsls	r2, r2, #2
 8006104:	4093      	lsls	r3, r2
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	4313      	orrs	r3, r2
 800610a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800610c:	4935      	ldr	r1, [pc, #212]	; (80061e4 <HAL_GPIO_Init+0x304>)
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	089b      	lsrs	r3, r3, #2
 8006112:	3302      	adds	r3, #2
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800611a:	4b3a      	ldr	r3, [pc, #232]	; (8006204 <HAL_GPIO_Init+0x324>)
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	43db      	mvns	r3, r3
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	4013      	ands	r3, r2
 8006128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	4313      	orrs	r3, r2
 800613c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800613e:	4a31      	ldr	r2, [pc, #196]	; (8006204 <HAL_GPIO_Init+0x324>)
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006144:	4b2f      	ldr	r3, [pc, #188]	; (8006204 <HAL_GPIO_Init+0x324>)
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	43db      	mvns	r3, r3
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	4013      	ands	r3, r2
 8006152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	4313      	orrs	r3, r2
 8006166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006168:	4a26      	ldr	r2, [pc, #152]	; (8006204 <HAL_GPIO_Init+0x324>)
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800616e:	4b25      	ldr	r3, [pc, #148]	; (8006204 <HAL_GPIO_Init+0x324>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	43db      	mvns	r3, r3
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	4013      	ands	r3, r2
 800617c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006192:	4a1c      	ldr	r2, [pc, #112]	; (8006204 <HAL_GPIO_Init+0x324>)
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006198:	4b1a      	ldr	r3, [pc, #104]	; (8006204 <HAL_GPIO_Init+0x324>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	43db      	mvns	r3, r3
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	4013      	ands	r3, r2
 80061a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80061bc:	4a11      	ldr	r2, [pc, #68]	; (8006204 <HAL_GPIO_Init+0x324>)
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	3301      	adds	r3, #1
 80061c6:	61fb      	str	r3, [r7, #28]
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	2b0f      	cmp	r3, #15
 80061cc:	f67f ae96 	bls.w	8005efc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80061d0:	bf00      	nop
 80061d2:	bf00      	nop
 80061d4:	3724      	adds	r7, #36	; 0x24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	40023800 	.word	0x40023800
 80061e4:	40013800 	.word	0x40013800
 80061e8:	40020000 	.word	0x40020000
 80061ec:	40020400 	.word	0x40020400
 80061f0:	40020800 	.word	0x40020800
 80061f4:	40020c00 	.word	0x40020c00
 80061f8:	40021000 	.word	0x40021000
 80061fc:	40021400 	.word	0x40021400
 8006200:	40021800 	.word	0x40021800
 8006204:	40013c00 	.word	0x40013c00

08006208 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	691a      	ldr	r2, [r3, #16]
 8006218:	887b      	ldrh	r3, [r7, #2]
 800621a:	4013      	ands	r3, r2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006220:	2301      	movs	r3, #1
 8006222:	73fb      	strb	r3, [r7, #15]
 8006224:	e001      	b.n	800622a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006226:	2300      	movs	r3, #0
 8006228:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800622a:	7bfb      	ldrb	r3, [r7, #15]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	460b      	mov	r3, r1
 8006242:	807b      	strh	r3, [r7, #2]
 8006244:	4613      	mov	r3, r2
 8006246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006248:	787b      	ldrb	r3, [r7, #1]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800624e:	887a      	ldrh	r2, [r7, #2]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006254:	e003      	b.n	800625e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006256:	887b      	ldrh	r3, [r7, #2]
 8006258:	041a      	lsls	r2, r3, #16
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	619a      	str	r2, [r3, #24]
}
 800625e:	bf00      	nop
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
	...

0800626c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	4603      	mov	r3, r0
 8006274:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006276:	4b08      	ldr	r3, [pc, #32]	; (8006298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006278:	695a      	ldr	r2, [r3, #20]
 800627a:	88fb      	ldrh	r3, [r7, #6]
 800627c:	4013      	ands	r3, r2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d006      	beq.n	8006290 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006282:	4a05      	ldr	r2, [pc, #20]	; (8006298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006284:	88fb      	ldrh	r3, [r7, #6]
 8006286:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006288:	88fb      	ldrh	r3, [r7, #6]
 800628a:	4618      	mov	r0, r3
 800628c:	f7fe f8f6 	bl	800447c <HAL_GPIO_EXTI_Callback>
  }
}
 8006290:	bf00      	nop
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	40013c00 	.word	0x40013c00

0800629c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e0cc      	b.n	800644a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062b0:	4b68      	ldr	r3, [pc, #416]	; (8006454 <HAL_RCC_ClockConfig+0x1b8>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 030f 	and.w	r3, r3, #15
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d90c      	bls.n	80062d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062be:	4b65      	ldr	r3, [pc, #404]	; (8006454 <HAL_RCC_ClockConfig+0x1b8>)
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	b2d2      	uxtb	r2, r2
 80062c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062c6:	4b63      	ldr	r3, [pc, #396]	; (8006454 <HAL_RCC_ClockConfig+0x1b8>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 030f 	and.w	r3, r3, #15
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d001      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e0b8      	b.n	800644a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d020      	beq.n	8006326 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d005      	beq.n	80062fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062f0:	4b59      	ldr	r3, [pc, #356]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	4a58      	ldr	r2, [pc, #352]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 80062f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0308 	and.w	r3, r3, #8
 8006304:	2b00      	cmp	r3, #0
 8006306:	d005      	beq.n	8006314 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006308:	4b53      	ldr	r3, [pc, #332]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	4a52      	ldr	r2, [pc, #328]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 800630e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006312:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006314:	4b50      	ldr	r3, [pc, #320]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	494d      	ldr	r1, [pc, #308]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 8006322:	4313      	orrs	r3, r2
 8006324:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d044      	beq.n	80063bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d107      	bne.n	800634a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800633a:	4b47      	ldr	r3, [pc, #284]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d119      	bne.n	800637a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e07f      	b.n	800644a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2b02      	cmp	r3, #2
 8006350:	d003      	beq.n	800635a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006356:	2b03      	cmp	r3, #3
 8006358:	d107      	bne.n	800636a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800635a:	4b3f      	ldr	r3, [pc, #252]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d109      	bne.n	800637a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e06f      	b.n	800644a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800636a:	4b3b      	ldr	r3, [pc, #236]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e067      	b.n	800644a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800637a:	4b37      	ldr	r3, [pc, #220]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f023 0203 	bic.w	r2, r3, #3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	4934      	ldr	r1, [pc, #208]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 8006388:	4313      	orrs	r3, r2
 800638a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800638c:	f7fe fd2c 	bl	8004de8 <HAL_GetTick>
 8006390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006392:	e00a      	b.n	80063aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006394:	f7fe fd28 	bl	8004de8 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	f241 3288 	movw	r2, #5000	; 0x1388
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e04f      	b.n	800644a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063aa:	4b2b      	ldr	r3, [pc, #172]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f003 020c 	and.w	r2, r3, #12
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d1eb      	bne.n	8006394 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063bc:	4b25      	ldr	r3, [pc, #148]	; (8006454 <HAL_RCC_ClockConfig+0x1b8>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 030f 	and.w	r3, r3, #15
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d20c      	bcs.n	80063e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ca:	4b22      	ldr	r3, [pc, #136]	; (8006454 <HAL_RCC_ClockConfig+0x1b8>)
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	b2d2      	uxtb	r2, r2
 80063d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063d2:	4b20      	ldr	r3, [pc, #128]	; (8006454 <HAL_RCC_ClockConfig+0x1b8>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 030f 	and.w	r3, r3, #15
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d001      	beq.n	80063e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e032      	b.n	800644a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d008      	beq.n	8006402 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063f0:	4b19      	ldr	r3, [pc, #100]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	4916      	ldr	r1, [pc, #88]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0308 	and.w	r3, r3, #8
 800640a:	2b00      	cmp	r3, #0
 800640c:	d009      	beq.n	8006422 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800640e:	4b12      	ldr	r3, [pc, #72]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	490e      	ldr	r1, [pc, #56]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 800641e:	4313      	orrs	r3, r2
 8006420:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006422:	f000 f855 	bl	80064d0 <HAL_RCC_GetSysClockFreq>
 8006426:	4602      	mov	r2, r0
 8006428:	4b0b      	ldr	r3, [pc, #44]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	091b      	lsrs	r3, r3, #4
 800642e:	f003 030f 	and.w	r3, r3, #15
 8006432:	490a      	ldr	r1, [pc, #40]	; (800645c <HAL_RCC_ClockConfig+0x1c0>)
 8006434:	5ccb      	ldrb	r3, [r1, r3]
 8006436:	fa22 f303 	lsr.w	r3, r2, r3
 800643a:	4a09      	ldr	r2, [pc, #36]	; (8006460 <HAL_RCC_ClockConfig+0x1c4>)
 800643c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800643e:	4b09      	ldr	r3, [pc, #36]	; (8006464 <HAL_RCC_ClockConfig+0x1c8>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4618      	mov	r0, r3
 8006444:	f7fe fc8c 	bl	8004d60 <HAL_InitTick>

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	40023c00 	.word	0x40023c00
 8006458:	40023800 	.word	0x40023800
 800645c:	0800e30c 	.word	0x0800e30c
 8006460:	2000000c 	.word	0x2000000c
 8006464:	20000010 	.word	0x20000010

08006468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800646c:	4b03      	ldr	r3, [pc, #12]	; (800647c <HAL_RCC_GetHCLKFreq+0x14>)
 800646e:	681b      	ldr	r3, [r3, #0]
}
 8006470:	4618      	mov	r0, r3
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	2000000c 	.word	0x2000000c

08006480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006484:	f7ff fff0 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 8006488:	4602      	mov	r2, r0
 800648a:	4b05      	ldr	r3, [pc, #20]	; (80064a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	0a9b      	lsrs	r3, r3, #10
 8006490:	f003 0307 	and.w	r3, r3, #7
 8006494:	4903      	ldr	r1, [pc, #12]	; (80064a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006496:	5ccb      	ldrb	r3, [r1, r3]
 8006498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800649c:	4618      	mov	r0, r3
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	40023800 	.word	0x40023800
 80064a4:	0800e31c 	.word	0x0800e31c

080064a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80064ac:	f7ff ffdc 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 80064b0:	4602      	mov	r2, r0
 80064b2:	4b05      	ldr	r3, [pc, #20]	; (80064c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	0b5b      	lsrs	r3, r3, #13
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	4903      	ldr	r1, [pc, #12]	; (80064cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80064be:	5ccb      	ldrb	r3, [r1, r3]
 80064c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	40023800 	.word	0x40023800
 80064cc:	0800e31c 	.word	0x0800e31c

080064d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064d4:	b0ae      	sub	sp, #184	; 0xb8
 80064d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80064de:	2300      	movs	r3, #0
 80064e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064f6:	4bcb      	ldr	r3, [pc, #812]	; (8006824 <HAL_RCC_GetSysClockFreq+0x354>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f003 030c 	and.w	r3, r3, #12
 80064fe:	2b0c      	cmp	r3, #12
 8006500:	f200 8206 	bhi.w	8006910 <HAL_RCC_GetSysClockFreq+0x440>
 8006504:	a201      	add	r2, pc, #4	; (adr r2, 800650c <HAL_RCC_GetSysClockFreq+0x3c>)
 8006506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650a:	bf00      	nop
 800650c:	08006541 	.word	0x08006541
 8006510:	08006911 	.word	0x08006911
 8006514:	08006911 	.word	0x08006911
 8006518:	08006911 	.word	0x08006911
 800651c:	08006549 	.word	0x08006549
 8006520:	08006911 	.word	0x08006911
 8006524:	08006911 	.word	0x08006911
 8006528:	08006911 	.word	0x08006911
 800652c:	08006551 	.word	0x08006551
 8006530:	08006911 	.word	0x08006911
 8006534:	08006911 	.word	0x08006911
 8006538:	08006911 	.word	0x08006911
 800653c:	08006741 	.word	0x08006741
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006540:	4bb9      	ldr	r3, [pc, #740]	; (8006828 <HAL_RCC_GetSysClockFreq+0x358>)
 8006542:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006546:	e1e7      	b.n	8006918 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006548:	4bb8      	ldr	r3, [pc, #736]	; (800682c <HAL_RCC_GetSysClockFreq+0x35c>)
 800654a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800654e:	e1e3      	b.n	8006918 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006550:	4bb4      	ldr	r3, [pc, #720]	; (8006824 <HAL_RCC_GetSysClockFreq+0x354>)
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800655c:	4bb1      	ldr	r3, [pc, #708]	; (8006824 <HAL_RCC_GetSysClockFreq+0x354>)
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d071      	beq.n	800664c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006568:	4bae      	ldr	r3, [pc, #696]	; (8006824 <HAL_RCC_GetSysClockFreq+0x354>)
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	099b      	lsrs	r3, r3, #6
 800656e:	2200      	movs	r2, #0
 8006570:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006574:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006578:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800657c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006580:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006584:	2300      	movs	r3, #0
 8006586:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800658a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800658e:	4622      	mov	r2, r4
 8006590:	462b      	mov	r3, r5
 8006592:	f04f 0000 	mov.w	r0, #0
 8006596:	f04f 0100 	mov.w	r1, #0
 800659a:	0159      	lsls	r1, r3, #5
 800659c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065a0:	0150      	lsls	r0, r2, #5
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	4621      	mov	r1, r4
 80065a8:	1a51      	subs	r1, r2, r1
 80065aa:	6439      	str	r1, [r7, #64]	; 0x40
 80065ac:	4629      	mov	r1, r5
 80065ae:	eb63 0301 	sbc.w	r3, r3, r1
 80065b2:	647b      	str	r3, [r7, #68]	; 0x44
 80065b4:	f04f 0200 	mov.w	r2, #0
 80065b8:	f04f 0300 	mov.w	r3, #0
 80065bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80065c0:	4649      	mov	r1, r9
 80065c2:	018b      	lsls	r3, r1, #6
 80065c4:	4641      	mov	r1, r8
 80065c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80065ca:	4641      	mov	r1, r8
 80065cc:	018a      	lsls	r2, r1, #6
 80065ce:	4641      	mov	r1, r8
 80065d0:	1a51      	subs	r1, r2, r1
 80065d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80065d4:	4649      	mov	r1, r9
 80065d6:	eb63 0301 	sbc.w	r3, r3, r1
 80065da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065dc:	f04f 0200 	mov.w	r2, #0
 80065e0:	f04f 0300 	mov.w	r3, #0
 80065e4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80065e8:	4649      	mov	r1, r9
 80065ea:	00cb      	lsls	r3, r1, #3
 80065ec:	4641      	mov	r1, r8
 80065ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065f2:	4641      	mov	r1, r8
 80065f4:	00ca      	lsls	r2, r1, #3
 80065f6:	4610      	mov	r0, r2
 80065f8:	4619      	mov	r1, r3
 80065fa:	4603      	mov	r3, r0
 80065fc:	4622      	mov	r2, r4
 80065fe:	189b      	adds	r3, r3, r2
 8006600:	633b      	str	r3, [r7, #48]	; 0x30
 8006602:	462b      	mov	r3, r5
 8006604:	460a      	mov	r2, r1
 8006606:	eb42 0303 	adc.w	r3, r2, r3
 800660a:	637b      	str	r3, [r7, #52]	; 0x34
 800660c:	f04f 0200 	mov.w	r2, #0
 8006610:	f04f 0300 	mov.w	r3, #0
 8006614:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006618:	4629      	mov	r1, r5
 800661a:	024b      	lsls	r3, r1, #9
 800661c:	4621      	mov	r1, r4
 800661e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006622:	4621      	mov	r1, r4
 8006624:	024a      	lsls	r2, r1, #9
 8006626:	4610      	mov	r0, r2
 8006628:	4619      	mov	r1, r3
 800662a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800662e:	2200      	movs	r2, #0
 8006630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006634:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006638:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800663c:	f7fa fb24 	bl	8000c88 <__aeabi_uldivmod>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	4613      	mov	r3, r2
 8006646:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800664a:	e067      	b.n	800671c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800664c:	4b75      	ldr	r3, [pc, #468]	; (8006824 <HAL_RCC_GetSysClockFreq+0x354>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	099b      	lsrs	r3, r3, #6
 8006652:	2200      	movs	r2, #0
 8006654:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006658:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800665c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006664:	67bb      	str	r3, [r7, #120]	; 0x78
 8006666:	2300      	movs	r3, #0
 8006668:	67fb      	str	r3, [r7, #124]	; 0x7c
 800666a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800666e:	4622      	mov	r2, r4
 8006670:	462b      	mov	r3, r5
 8006672:	f04f 0000 	mov.w	r0, #0
 8006676:	f04f 0100 	mov.w	r1, #0
 800667a:	0159      	lsls	r1, r3, #5
 800667c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006680:	0150      	lsls	r0, r2, #5
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	4621      	mov	r1, r4
 8006688:	1a51      	subs	r1, r2, r1
 800668a:	62b9      	str	r1, [r7, #40]	; 0x28
 800668c:	4629      	mov	r1, r5
 800668e:	eb63 0301 	sbc.w	r3, r3, r1
 8006692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006694:	f04f 0200 	mov.w	r2, #0
 8006698:	f04f 0300 	mov.w	r3, #0
 800669c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80066a0:	4649      	mov	r1, r9
 80066a2:	018b      	lsls	r3, r1, #6
 80066a4:	4641      	mov	r1, r8
 80066a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066aa:	4641      	mov	r1, r8
 80066ac:	018a      	lsls	r2, r1, #6
 80066ae:	4641      	mov	r1, r8
 80066b0:	ebb2 0a01 	subs.w	sl, r2, r1
 80066b4:	4649      	mov	r1, r9
 80066b6:	eb63 0b01 	sbc.w	fp, r3, r1
 80066ba:	f04f 0200 	mov.w	r2, #0
 80066be:	f04f 0300 	mov.w	r3, #0
 80066c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066ce:	4692      	mov	sl, r2
 80066d0:	469b      	mov	fp, r3
 80066d2:	4623      	mov	r3, r4
 80066d4:	eb1a 0303 	adds.w	r3, sl, r3
 80066d8:	623b      	str	r3, [r7, #32]
 80066da:	462b      	mov	r3, r5
 80066dc:	eb4b 0303 	adc.w	r3, fp, r3
 80066e0:	627b      	str	r3, [r7, #36]	; 0x24
 80066e2:	f04f 0200 	mov.w	r2, #0
 80066e6:	f04f 0300 	mov.w	r3, #0
 80066ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80066ee:	4629      	mov	r1, r5
 80066f0:	028b      	lsls	r3, r1, #10
 80066f2:	4621      	mov	r1, r4
 80066f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80066f8:	4621      	mov	r1, r4
 80066fa:	028a      	lsls	r2, r1, #10
 80066fc:	4610      	mov	r0, r2
 80066fe:	4619      	mov	r1, r3
 8006700:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006704:	2200      	movs	r2, #0
 8006706:	673b      	str	r3, [r7, #112]	; 0x70
 8006708:	677a      	str	r2, [r7, #116]	; 0x74
 800670a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800670e:	f7fa fabb 	bl	8000c88 <__aeabi_uldivmod>
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	4613      	mov	r3, r2
 8006718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800671c:	4b41      	ldr	r3, [pc, #260]	; (8006824 <HAL_RCC_GetSysClockFreq+0x354>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	0c1b      	lsrs	r3, r3, #16
 8006722:	f003 0303 	and.w	r3, r3, #3
 8006726:	3301      	adds	r3, #1
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800672e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006732:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006736:	fbb2 f3f3 	udiv	r3, r2, r3
 800673a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800673e:	e0eb      	b.n	8006918 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006740:	4b38      	ldr	r3, [pc, #224]	; (8006824 <HAL_RCC_GetSysClockFreq+0x354>)
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800674c:	4b35      	ldr	r3, [pc, #212]	; (8006824 <HAL_RCC_GetSysClockFreq+0x354>)
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d06b      	beq.n	8006830 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006758:	4b32      	ldr	r3, [pc, #200]	; (8006824 <HAL_RCC_GetSysClockFreq+0x354>)
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	099b      	lsrs	r3, r3, #6
 800675e:	2200      	movs	r2, #0
 8006760:	66bb      	str	r3, [r7, #104]	; 0x68
 8006762:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006764:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800676a:	663b      	str	r3, [r7, #96]	; 0x60
 800676c:	2300      	movs	r3, #0
 800676e:	667b      	str	r3, [r7, #100]	; 0x64
 8006770:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006774:	4622      	mov	r2, r4
 8006776:	462b      	mov	r3, r5
 8006778:	f04f 0000 	mov.w	r0, #0
 800677c:	f04f 0100 	mov.w	r1, #0
 8006780:	0159      	lsls	r1, r3, #5
 8006782:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006786:	0150      	lsls	r0, r2, #5
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4621      	mov	r1, r4
 800678e:	1a51      	subs	r1, r2, r1
 8006790:	61b9      	str	r1, [r7, #24]
 8006792:	4629      	mov	r1, r5
 8006794:	eb63 0301 	sbc.w	r3, r3, r1
 8006798:	61fb      	str	r3, [r7, #28]
 800679a:	f04f 0200 	mov.w	r2, #0
 800679e:	f04f 0300 	mov.w	r3, #0
 80067a2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80067a6:	4659      	mov	r1, fp
 80067a8:	018b      	lsls	r3, r1, #6
 80067aa:	4651      	mov	r1, sl
 80067ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067b0:	4651      	mov	r1, sl
 80067b2:	018a      	lsls	r2, r1, #6
 80067b4:	4651      	mov	r1, sl
 80067b6:	ebb2 0801 	subs.w	r8, r2, r1
 80067ba:	4659      	mov	r1, fp
 80067bc:	eb63 0901 	sbc.w	r9, r3, r1
 80067c0:	f04f 0200 	mov.w	r2, #0
 80067c4:	f04f 0300 	mov.w	r3, #0
 80067c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067d4:	4690      	mov	r8, r2
 80067d6:	4699      	mov	r9, r3
 80067d8:	4623      	mov	r3, r4
 80067da:	eb18 0303 	adds.w	r3, r8, r3
 80067de:	613b      	str	r3, [r7, #16]
 80067e0:	462b      	mov	r3, r5
 80067e2:	eb49 0303 	adc.w	r3, r9, r3
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	f04f 0300 	mov.w	r3, #0
 80067f0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80067f4:	4629      	mov	r1, r5
 80067f6:	024b      	lsls	r3, r1, #9
 80067f8:	4621      	mov	r1, r4
 80067fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80067fe:	4621      	mov	r1, r4
 8006800:	024a      	lsls	r2, r1, #9
 8006802:	4610      	mov	r0, r2
 8006804:	4619      	mov	r1, r3
 8006806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800680a:	2200      	movs	r2, #0
 800680c:	65bb      	str	r3, [r7, #88]	; 0x58
 800680e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006810:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006814:	f7fa fa38 	bl	8000c88 <__aeabi_uldivmod>
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	4613      	mov	r3, r2
 800681e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006822:	e065      	b.n	80068f0 <HAL_RCC_GetSysClockFreq+0x420>
 8006824:	40023800 	.word	0x40023800
 8006828:	00f42400 	.word	0x00f42400
 800682c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006830:	4b3d      	ldr	r3, [pc, #244]	; (8006928 <HAL_RCC_GetSysClockFreq+0x458>)
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	099b      	lsrs	r3, r3, #6
 8006836:	2200      	movs	r2, #0
 8006838:	4618      	mov	r0, r3
 800683a:	4611      	mov	r1, r2
 800683c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006840:	653b      	str	r3, [r7, #80]	; 0x50
 8006842:	2300      	movs	r3, #0
 8006844:	657b      	str	r3, [r7, #84]	; 0x54
 8006846:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800684a:	4642      	mov	r2, r8
 800684c:	464b      	mov	r3, r9
 800684e:	f04f 0000 	mov.w	r0, #0
 8006852:	f04f 0100 	mov.w	r1, #0
 8006856:	0159      	lsls	r1, r3, #5
 8006858:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800685c:	0150      	lsls	r0, r2, #5
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	4641      	mov	r1, r8
 8006864:	1a51      	subs	r1, r2, r1
 8006866:	60b9      	str	r1, [r7, #8]
 8006868:	4649      	mov	r1, r9
 800686a:	eb63 0301 	sbc.w	r3, r3, r1
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	f04f 0200 	mov.w	r2, #0
 8006874:	f04f 0300 	mov.w	r3, #0
 8006878:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800687c:	4659      	mov	r1, fp
 800687e:	018b      	lsls	r3, r1, #6
 8006880:	4651      	mov	r1, sl
 8006882:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006886:	4651      	mov	r1, sl
 8006888:	018a      	lsls	r2, r1, #6
 800688a:	4651      	mov	r1, sl
 800688c:	1a54      	subs	r4, r2, r1
 800688e:	4659      	mov	r1, fp
 8006890:	eb63 0501 	sbc.w	r5, r3, r1
 8006894:	f04f 0200 	mov.w	r2, #0
 8006898:	f04f 0300 	mov.w	r3, #0
 800689c:	00eb      	lsls	r3, r5, #3
 800689e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068a2:	00e2      	lsls	r2, r4, #3
 80068a4:	4614      	mov	r4, r2
 80068a6:	461d      	mov	r5, r3
 80068a8:	4643      	mov	r3, r8
 80068aa:	18e3      	adds	r3, r4, r3
 80068ac:	603b      	str	r3, [r7, #0]
 80068ae:	464b      	mov	r3, r9
 80068b0:	eb45 0303 	adc.w	r3, r5, r3
 80068b4:	607b      	str	r3, [r7, #4]
 80068b6:	f04f 0200 	mov.w	r2, #0
 80068ba:	f04f 0300 	mov.w	r3, #0
 80068be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068c2:	4629      	mov	r1, r5
 80068c4:	028b      	lsls	r3, r1, #10
 80068c6:	4621      	mov	r1, r4
 80068c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068cc:	4621      	mov	r1, r4
 80068ce:	028a      	lsls	r2, r1, #10
 80068d0:	4610      	mov	r0, r2
 80068d2:	4619      	mov	r1, r3
 80068d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068d8:	2200      	movs	r2, #0
 80068da:	64bb      	str	r3, [r7, #72]	; 0x48
 80068dc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80068de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80068e2:	f7fa f9d1 	bl	8000c88 <__aeabi_uldivmod>
 80068e6:	4602      	mov	r2, r0
 80068e8:	460b      	mov	r3, r1
 80068ea:	4613      	mov	r3, r2
 80068ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80068f0:	4b0d      	ldr	r3, [pc, #52]	; (8006928 <HAL_RCC_GetSysClockFreq+0x458>)
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	0f1b      	lsrs	r3, r3, #28
 80068f6:	f003 0307 	and.w	r3, r3, #7
 80068fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80068fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006902:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006906:	fbb2 f3f3 	udiv	r3, r2, r3
 800690a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800690e:	e003      	b.n	8006918 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006910:	4b06      	ldr	r3, [pc, #24]	; (800692c <HAL_RCC_GetSysClockFreq+0x45c>)
 8006912:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006916:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006918:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800691c:	4618      	mov	r0, r3
 800691e:	37b8      	adds	r7, #184	; 0xb8
 8006920:	46bd      	mov	sp, r7
 8006922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006926:	bf00      	nop
 8006928:	40023800 	.word	0x40023800
 800692c:	00f42400 	.word	0x00f42400

08006930 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e28d      	b.n	8006e5e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 8083 	beq.w	8006a56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006950:	4b94      	ldr	r3, [pc, #592]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f003 030c 	and.w	r3, r3, #12
 8006958:	2b04      	cmp	r3, #4
 800695a:	d019      	beq.n	8006990 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800695c:	4b91      	ldr	r3, [pc, #580]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006964:	2b08      	cmp	r3, #8
 8006966:	d106      	bne.n	8006976 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006968:	4b8e      	ldr	r3, [pc, #568]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006970:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006974:	d00c      	beq.n	8006990 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006976:	4b8b      	ldr	r3, [pc, #556]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800697e:	2b0c      	cmp	r3, #12
 8006980:	d112      	bne.n	80069a8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006982:	4b88      	ldr	r3, [pc, #544]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800698a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800698e:	d10b      	bne.n	80069a8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006990:	4b84      	ldr	r3, [pc, #528]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d05b      	beq.n	8006a54 <HAL_RCC_OscConfig+0x124>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d157      	bne.n	8006a54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e25a      	b.n	8006e5e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b0:	d106      	bne.n	80069c0 <HAL_RCC_OscConfig+0x90>
 80069b2:	4b7c      	ldr	r3, [pc, #496]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a7b      	ldr	r2, [pc, #492]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 80069b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	e01d      	b.n	80069fc <HAL_RCC_OscConfig+0xcc>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069c8:	d10c      	bne.n	80069e4 <HAL_RCC_OscConfig+0xb4>
 80069ca:	4b76      	ldr	r3, [pc, #472]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a75      	ldr	r2, [pc, #468]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 80069d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	4b73      	ldr	r3, [pc, #460]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a72      	ldr	r2, [pc, #456]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 80069dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	e00b      	b.n	80069fc <HAL_RCC_OscConfig+0xcc>
 80069e4:	4b6f      	ldr	r3, [pc, #444]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a6e      	ldr	r2, [pc, #440]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 80069ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ee:	6013      	str	r3, [r2, #0]
 80069f0:	4b6c      	ldr	r3, [pc, #432]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a6b      	ldr	r2, [pc, #428]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 80069f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d013      	beq.n	8006a2c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a04:	f7fe f9f0 	bl	8004de8 <HAL_GetTick>
 8006a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a0a:	e008      	b.n	8006a1e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a0c:	f7fe f9ec 	bl	8004de8 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b64      	cmp	r3, #100	; 0x64
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e21f      	b.n	8006e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a1e:	4b61      	ldr	r3, [pc, #388]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0f0      	beq.n	8006a0c <HAL_RCC_OscConfig+0xdc>
 8006a2a:	e014      	b.n	8006a56 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2c:	f7fe f9dc 	bl	8004de8 <HAL_GetTick>
 8006a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a34:	f7fe f9d8 	bl	8004de8 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b64      	cmp	r3, #100	; 0x64
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e20b      	b.n	8006e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a46:	4b57      	ldr	r3, [pc, #348]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1f0      	bne.n	8006a34 <HAL_RCC_OscConfig+0x104>
 8006a52:	e000      	b.n	8006a56 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d06f      	beq.n	8006b42 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006a62:	4b50      	ldr	r3, [pc, #320]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f003 030c 	and.w	r3, r3, #12
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d017      	beq.n	8006a9e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006a6e:	4b4d      	ldr	r3, [pc, #308]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006a76:	2b08      	cmp	r3, #8
 8006a78:	d105      	bne.n	8006a86 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006a7a:	4b4a      	ldr	r3, [pc, #296]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00b      	beq.n	8006a9e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a86:	4b47      	ldr	r3, [pc, #284]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006a8e:	2b0c      	cmp	r3, #12
 8006a90:	d11c      	bne.n	8006acc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a92:	4b44      	ldr	r3, [pc, #272]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d116      	bne.n	8006acc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a9e:	4b41      	ldr	r3, [pc, #260]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d005      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x186>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d001      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e1d3      	b.n	8006e5e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ab6:	4b3b      	ldr	r3, [pc, #236]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	4937      	ldr	r1, [pc, #220]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aca:	e03a      	b.n	8006b42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d020      	beq.n	8006b16 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ad4:	4b34      	ldr	r3, [pc, #208]	; (8006ba8 <HAL_RCC_OscConfig+0x278>)
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ada:	f7fe f985 	bl	8004de8 <HAL_GetTick>
 8006ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ae0:	e008      	b.n	8006af4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ae2:	f7fe f981 	bl	8004de8 <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d901      	bls.n	8006af4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e1b4      	b.n	8006e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006af4:	4b2b      	ldr	r3, [pc, #172]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0302 	and.w	r3, r3, #2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d0f0      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b00:	4b28      	ldr	r3, [pc, #160]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	4925      	ldr	r1, [pc, #148]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	600b      	str	r3, [r1, #0]
 8006b14:	e015      	b.n	8006b42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b16:	4b24      	ldr	r3, [pc, #144]	; (8006ba8 <HAL_RCC_OscConfig+0x278>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b1c:	f7fe f964 	bl	8004de8 <HAL_GetTick>
 8006b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b22:	e008      	b.n	8006b36 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b24:	f7fe f960 	bl	8004de8 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e193      	b.n	8006e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b36:	4b1b      	ldr	r3, [pc, #108]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1f0      	bne.n	8006b24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0308 	and.w	r3, r3, #8
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d036      	beq.n	8006bbc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d016      	beq.n	8006b84 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b56:	4b15      	ldr	r3, [pc, #84]	; (8006bac <HAL_RCC_OscConfig+0x27c>)
 8006b58:	2201      	movs	r2, #1
 8006b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b5c:	f7fe f944 	bl	8004de8 <HAL_GetTick>
 8006b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b62:	e008      	b.n	8006b76 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b64:	f7fe f940 	bl	8004de8 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e173      	b.n	8006e5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b76:	4b0b      	ldr	r3, [pc, #44]	; (8006ba4 <HAL_RCC_OscConfig+0x274>)
 8006b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0f0      	beq.n	8006b64 <HAL_RCC_OscConfig+0x234>
 8006b82:	e01b      	b.n	8006bbc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b84:	4b09      	ldr	r3, [pc, #36]	; (8006bac <HAL_RCC_OscConfig+0x27c>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b8a:	f7fe f92d 	bl	8004de8 <HAL_GetTick>
 8006b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b90:	e00e      	b.n	8006bb0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b92:	f7fe f929 	bl	8004de8 <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d907      	bls.n	8006bb0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e15c      	b.n	8006e5e <HAL_RCC_OscConfig+0x52e>
 8006ba4:	40023800 	.word	0x40023800
 8006ba8:	42470000 	.word	0x42470000
 8006bac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bb0:	4b8a      	ldr	r3, [pc, #552]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1ea      	bne.n	8006b92 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0304 	and.w	r3, r3, #4
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 8097 	beq.w	8006cf8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bce:	4b83      	ldr	r3, [pc, #524]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10f      	bne.n	8006bfa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60bb      	str	r3, [r7, #8]
 8006bde:	4b7f      	ldr	r3, [pc, #508]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	4a7e      	ldr	r2, [pc, #504]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006be8:	6413      	str	r3, [r2, #64]	; 0x40
 8006bea:	4b7c      	ldr	r3, [pc, #496]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bf2:	60bb      	str	r3, [r7, #8]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bfa:	4b79      	ldr	r3, [pc, #484]	; (8006de0 <HAL_RCC_OscConfig+0x4b0>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d118      	bne.n	8006c38 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c06:	4b76      	ldr	r3, [pc, #472]	; (8006de0 <HAL_RCC_OscConfig+0x4b0>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a75      	ldr	r2, [pc, #468]	; (8006de0 <HAL_RCC_OscConfig+0x4b0>)
 8006c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c12:	f7fe f8e9 	bl	8004de8 <HAL_GetTick>
 8006c16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c18:	e008      	b.n	8006c2c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c1a:	f7fe f8e5 	bl	8004de8 <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d901      	bls.n	8006c2c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e118      	b.n	8006e5e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c2c:	4b6c      	ldr	r3, [pc, #432]	; (8006de0 <HAL_RCC_OscConfig+0x4b0>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0f0      	beq.n	8006c1a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d106      	bne.n	8006c4e <HAL_RCC_OscConfig+0x31e>
 8006c40:	4b66      	ldr	r3, [pc, #408]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c44:	4a65      	ldr	r2, [pc, #404]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006c46:	f043 0301 	orr.w	r3, r3, #1
 8006c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c4c:	e01c      	b.n	8006c88 <HAL_RCC_OscConfig+0x358>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	2b05      	cmp	r3, #5
 8006c54:	d10c      	bne.n	8006c70 <HAL_RCC_OscConfig+0x340>
 8006c56:	4b61      	ldr	r3, [pc, #388]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5a:	4a60      	ldr	r2, [pc, #384]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006c5c:	f043 0304 	orr.w	r3, r3, #4
 8006c60:	6713      	str	r3, [r2, #112]	; 0x70
 8006c62:	4b5e      	ldr	r3, [pc, #376]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c66:	4a5d      	ldr	r2, [pc, #372]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006c68:	f043 0301 	orr.w	r3, r3, #1
 8006c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c6e:	e00b      	b.n	8006c88 <HAL_RCC_OscConfig+0x358>
 8006c70:	4b5a      	ldr	r3, [pc, #360]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c74:	4a59      	ldr	r2, [pc, #356]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006c76:	f023 0301 	bic.w	r3, r3, #1
 8006c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c7c:	4b57      	ldr	r3, [pc, #348]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c80:	4a56      	ldr	r2, [pc, #344]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006c82:	f023 0304 	bic.w	r3, r3, #4
 8006c86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d015      	beq.n	8006cbc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c90:	f7fe f8aa 	bl	8004de8 <HAL_GetTick>
 8006c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c96:	e00a      	b.n	8006cae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c98:	f7fe f8a6 	bl	8004de8 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e0d7      	b.n	8006e5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cae:	4b4b      	ldr	r3, [pc, #300]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d0ee      	beq.n	8006c98 <HAL_RCC_OscConfig+0x368>
 8006cba:	e014      	b.n	8006ce6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cbc:	f7fe f894 	bl	8004de8 <HAL_GetTick>
 8006cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cc2:	e00a      	b.n	8006cda <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cc4:	f7fe f890 	bl	8004de8 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e0c1      	b.n	8006e5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cda:	4b40      	ldr	r3, [pc, #256]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1ee      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ce6:	7dfb      	ldrb	r3, [r7, #23]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d105      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cec:	4b3b      	ldr	r3, [pc, #236]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf0:	4a3a      	ldr	r2, [pc, #232]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cf6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 80ad 	beq.w	8006e5c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d02:	4b36      	ldr	r3, [pc, #216]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f003 030c 	and.w	r3, r3, #12
 8006d0a:	2b08      	cmp	r3, #8
 8006d0c:	d060      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d145      	bne.n	8006da2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d16:	4b33      	ldr	r3, [pc, #204]	; (8006de4 <HAL_RCC_OscConfig+0x4b4>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d1c:	f7fe f864 	bl	8004de8 <HAL_GetTick>
 8006d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d22:	e008      	b.n	8006d36 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d24:	f7fe f860 	bl	8004de8 <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e093      	b.n	8006e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d36:	4b29      	ldr	r3, [pc, #164]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1f0      	bne.n	8006d24 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	69da      	ldr	r2, [r3, #28]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	019b      	lsls	r3, r3, #6
 8006d52:	431a      	orrs	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d58:	085b      	lsrs	r3, r3, #1
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	041b      	lsls	r3, r3, #16
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d64:	061b      	lsls	r3, r3, #24
 8006d66:	431a      	orrs	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6c:	071b      	lsls	r3, r3, #28
 8006d6e:	491b      	ldr	r1, [pc, #108]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006d70:	4313      	orrs	r3, r2
 8006d72:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d74:	4b1b      	ldr	r3, [pc, #108]	; (8006de4 <HAL_RCC_OscConfig+0x4b4>)
 8006d76:	2201      	movs	r2, #1
 8006d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d7a:	f7fe f835 	bl	8004de8 <HAL_GetTick>
 8006d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d80:	e008      	b.n	8006d94 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d82:	f7fe f831 	bl	8004de8 <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d901      	bls.n	8006d94 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e064      	b.n	8006e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d94:	4b11      	ldr	r3, [pc, #68]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d0f0      	beq.n	8006d82 <HAL_RCC_OscConfig+0x452>
 8006da0:	e05c      	b.n	8006e5c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006da2:	4b10      	ldr	r3, [pc, #64]	; (8006de4 <HAL_RCC_OscConfig+0x4b4>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da8:	f7fe f81e 	bl	8004de8 <HAL_GetTick>
 8006dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dae:	e008      	b.n	8006dc2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006db0:	f7fe f81a 	bl	8004de8 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d901      	bls.n	8006dc2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e04d      	b.n	8006e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dc2:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <HAL_RCC_OscConfig+0x4ac>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1f0      	bne.n	8006db0 <HAL_RCC_OscConfig+0x480>
 8006dce:	e045      	b.n	8006e5c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d107      	bne.n	8006de8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e040      	b.n	8006e5e <HAL_RCC_OscConfig+0x52e>
 8006ddc:	40023800 	.word	0x40023800
 8006de0:	40007000 	.word	0x40007000
 8006de4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006de8:	4b1f      	ldr	r3, [pc, #124]	; (8006e68 <HAL_RCC_OscConfig+0x538>)
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d030      	beq.n	8006e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d129      	bne.n	8006e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d122      	bne.n	8006e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e18:	4013      	ands	r3, r2
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d119      	bne.n	8006e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2e:	085b      	lsrs	r3, r3, #1
 8006e30:	3b01      	subs	r3, #1
 8006e32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d10f      	bne.n	8006e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d107      	bne.n	8006e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e52:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d001      	beq.n	8006e5c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e000      	b.n	8006e5e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	40023800 	.word	0x40023800

08006e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e041      	b.n	8006f02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d106      	bne.n	8006e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7fd fd00 	bl	8004898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	4610      	mov	r0, r2
 8006eac:	f000 fc58 	bl	8007760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
	...

08006f0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d001      	beq.n	8006f24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e04e      	b.n	8006fc2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2202      	movs	r2, #2
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68da      	ldr	r2, [r3, #12]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f042 0201 	orr.w	r2, r2, #1
 8006f3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a23      	ldr	r2, [pc, #140]	; (8006fd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d022      	beq.n	8006f8c <HAL_TIM_Base_Start_IT+0x80>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f4e:	d01d      	beq.n	8006f8c <HAL_TIM_Base_Start_IT+0x80>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a1f      	ldr	r2, [pc, #124]	; (8006fd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d018      	beq.n	8006f8c <HAL_TIM_Base_Start_IT+0x80>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a1e      	ldr	r2, [pc, #120]	; (8006fd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d013      	beq.n	8006f8c <HAL_TIM_Base_Start_IT+0x80>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a1c      	ldr	r2, [pc, #112]	; (8006fdc <HAL_TIM_Base_Start_IT+0xd0>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d00e      	beq.n	8006f8c <HAL_TIM_Base_Start_IT+0x80>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a1b      	ldr	r2, [pc, #108]	; (8006fe0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d009      	beq.n	8006f8c <HAL_TIM_Base_Start_IT+0x80>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a19      	ldr	r2, [pc, #100]	; (8006fe4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d004      	beq.n	8006f8c <HAL_TIM_Base_Start_IT+0x80>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a18      	ldr	r2, [pc, #96]	; (8006fe8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d111      	bne.n	8006fb0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f003 0307 	and.w	r3, r3, #7
 8006f96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2b06      	cmp	r3, #6
 8006f9c:	d010      	beq.n	8006fc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f042 0201 	orr.w	r2, r2, #1
 8006fac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fae:	e007      	b.n	8006fc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f042 0201 	orr.w	r2, r2, #1
 8006fbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	40010000 	.word	0x40010000
 8006fd4:	40000400 	.word	0x40000400
 8006fd8:	40000800 	.word	0x40000800
 8006fdc:	40000c00 	.word	0x40000c00
 8006fe0:	40010400 	.word	0x40010400
 8006fe4:	40014000 	.word	0x40014000
 8006fe8:	40001800 	.word	0x40001800

08006fec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e041      	b.n	8007082 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	d106      	bne.n	8007018 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f839 	bl	800708a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	3304      	adds	r3, #4
 8007028:	4619      	mov	r1, r3
 800702a:	4610      	mov	r0, r2
 800702c:	f000 fb98 	bl	8007760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800708a:	b480      	push	{r7}
 800708c:	b083      	sub	sp, #12
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007092:	bf00      	nop
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
	...

080070a0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d109      	bne.n	80070c8 <HAL_TIM_OC_Start_IT+0x28>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b01      	cmp	r3, #1
 80070be:	bf14      	ite	ne
 80070c0:	2301      	movne	r3, #1
 80070c2:	2300      	moveq	r3, #0
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	e022      	b.n	800710e <HAL_TIM_OC_Start_IT+0x6e>
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	2b04      	cmp	r3, #4
 80070cc:	d109      	bne.n	80070e2 <HAL_TIM_OC_Start_IT+0x42>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	bf14      	ite	ne
 80070da:	2301      	movne	r3, #1
 80070dc:	2300      	moveq	r3, #0
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	e015      	b.n	800710e <HAL_TIM_OC_Start_IT+0x6e>
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	2b08      	cmp	r3, #8
 80070e6:	d109      	bne.n	80070fc <HAL_TIM_OC_Start_IT+0x5c>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	bf14      	ite	ne
 80070f4:	2301      	movne	r3, #1
 80070f6:	2300      	moveq	r3, #0
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	e008      	b.n	800710e <HAL_TIM_OC_Start_IT+0x6e>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b01      	cmp	r3, #1
 8007106:	bf14      	ite	ne
 8007108:	2301      	movne	r3, #1
 800710a:	2300      	moveq	r3, #0
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e0c7      	b.n	80072a6 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d104      	bne.n	8007126 <HAL_TIM_OC_Start_IT+0x86>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007124:	e013      	b.n	800714e <HAL_TIM_OC_Start_IT+0xae>
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	2b04      	cmp	r3, #4
 800712a:	d104      	bne.n	8007136 <HAL_TIM_OC_Start_IT+0x96>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2202      	movs	r2, #2
 8007130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007134:	e00b      	b.n	800714e <HAL_TIM_OC_Start_IT+0xae>
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	2b08      	cmp	r3, #8
 800713a:	d104      	bne.n	8007146 <HAL_TIM_OC_Start_IT+0xa6>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2202      	movs	r2, #2
 8007140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007144:	e003      	b.n	800714e <HAL_TIM_OC_Start_IT+0xae>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2202      	movs	r2, #2
 800714a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b0c      	cmp	r3, #12
 8007152:	d841      	bhi.n	80071d8 <HAL_TIM_OC_Start_IT+0x138>
 8007154:	a201      	add	r2, pc, #4	; (adr r2, 800715c <HAL_TIM_OC_Start_IT+0xbc>)
 8007156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715a:	bf00      	nop
 800715c:	08007191 	.word	0x08007191
 8007160:	080071d9 	.word	0x080071d9
 8007164:	080071d9 	.word	0x080071d9
 8007168:	080071d9 	.word	0x080071d9
 800716c:	080071a3 	.word	0x080071a3
 8007170:	080071d9 	.word	0x080071d9
 8007174:	080071d9 	.word	0x080071d9
 8007178:	080071d9 	.word	0x080071d9
 800717c:	080071b5 	.word	0x080071b5
 8007180:	080071d9 	.word	0x080071d9
 8007184:	080071d9 	.word	0x080071d9
 8007188:	080071d9 	.word	0x080071d9
 800718c:	080071c7 	.word	0x080071c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68da      	ldr	r2, [r3, #12]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f042 0202 	orr.w	r2, r2, #2
 800719e:	60da      	str	r2, [r3, #12]
      break;
 80071a0:	e01d      	b.n	80071de <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68da      	ldr	r2, [r3, #12]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f042 0204 	orr.w	r2, r2, #4
 80071b0:	60da      	str	r2, [r3, #12]
      break;
 80071b2:	e014      	b.n	80071de <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68da      	ldr	r2, [r3, #12]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0208 	orr.w	r2, r2, #8
 80071c2:	60da      	str	r2, [r3, #12]
      break;
 80071c4:	e00b      	b.n	80071de <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68da      	ldr	r2, [r3, #12]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f042 0210 	orr.w	r2, r2, #16
 80071d4:	60da      	str	r2, [r3, #12]
      break;
 80071d6:	e002      	b.n	80071de <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	73fb      	strb	r3, [r7, #15]
      break;
 80071dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80071de:	7bfb      	ldrb	r3, [r7, #15]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d15f      	bne.n	80072a4 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2201      	movs	r2, #1
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 fda1 	bl	8007d34 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a2e      	ldr	r2, [pc, #184]	; (80072b0 <HAL_TIM_OC_Start_IT+0x210>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d004      	beq.n	8007206 <HAL_TIM_OC_Start_IT+0x166>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a2c      	ldr	r2, [pc, #176]	; (80072b4 <HAL_TIM_OC_Start_IT+0x214>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d101      	bne.n	800720a <HAL_TIM_OC_Start_IT+0x16a>
 8007206:	2301      	movs	r3, #1
 8007208:	e000      	b.n	800720c <HAL_TIM_OC_Start_IT+0x16c>
 800720a:	2300      	movs	r3, #0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d007      	beq.n	8007220 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800721e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a22      	ldr	r2, [pc, #136]	; (80072b0 <HAL_TIM_OC_Start_IT+0x210>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d022      	beq.n	8007270 <HAL_TIM_OC_Start_IT+0x1d0>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007232:	d01d      	beq.n	8007270 <HAL_TIM_OC_Start_IT+0x1d0>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a1f      	ldr	r2, [pc, #124]	; (80072b8 <HAL_TIM_OC_Start_IT+0x218>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d018      	beq.n	8007270 <HAL_TIM_OC_Start_IT+0x1d0>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a1e      	ldr	r2, [pc, #120]	; (80072bc <HAL_TIM_OC_Start_IT+0x21c>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d013      	beq.n	8007270 <HAL_TIM_OC_Start_IT+0x1d0>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a1c      	ldr	r2, [pc, #112]	; (80072c0 <HAL_TIM_OC_Start_IT+0x220>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d00e      	beq.n	8007270 <HAL_TIM_OC_Start_IT+0x1d0>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a17      	ldr	r2, [pc, #92]	; (80072b4 <HAL_TIM_OC_Start_IT+0x214>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d009      	beq.n	8007270 <HAL_TIM_OC_Start_IT+0x1d0>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a18      	ldr	r2, [pc, #96]	; (80072c4 <HAL_TIM_OC_Start_IT+0x224>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d004      	beq.n	8007270 <HAL_TIM_OC_Start_IT+0x1d0>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a17      	ldr	r2, [pc, #92]	; (80072c8 <HAL_TIM_OC_Start_IT+0x228>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d111      	bne.n	8007294 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f003 0307 	and.w	r3, r3, #7
 800727a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	2b06      	cmp	r3, #6
 8007280:	d010      	beq.n	80072a4 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f042 0201 	orr.w	r2, r2, #1
 8007290:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007292:	e007      	b.n	80072a4 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f042 0201 	orr.w	r2, r2, #1
 80072a2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	40010000 	.word	0x40010000
 80072b4:	40010400 	.word	0x40010400
 80072b8:	40000400 	.word	0x40000400
 80072bc:	40000800 	.word	0x40000800
 80072c0:	40000c00 	.word	0x40000c00
 80072c4:	40014000 	.word	0x40014000
 80072c8:	40001800 	.word	0x40001800

080072cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	f003 0302 	and.w	r3, r3, #2
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d122      	bne.n	8007328 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	f003 0302 	and.w	r3, r3, #2
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d11b      	bne.n	8007328 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f06f 0202 	mvn.w	r2, #2
 80072f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	f003 0303 	and.w	r3, r3, #3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fa07 	bl	8007722 <HAL_TIM_IC_CaptureCallback>
 8007314:	e005      	b.n	8007322 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7fa ffa2 	bl	8002260 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fa0a 	bl	8007736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	f003 0304 	and.w	r3, r3, #4
 8007332:	2b04      	cmp	r3, #4
 8007334:	d122      	bne.n	800737c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f003 0304 	and.w	r3, r3, #4
 8007340:	2b04      	cmp	r3, #4
 8007342:	d11b      	bne.n	800737c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f06f 0204 	mvn.w	r2, #4
 800734c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2202      	movs	r2, #2
 8007352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f9dd 	bl	8007722 <HAL_TIM_IC_CaptureCallback>
 8007368:	e005      	b.n	8007376 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7fa ff78 	bl	8002260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f9e0 	bl	8007736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	f003 0308 	and.w	r3, r3, #8
 8007386:	2b08      	cmp	r3, #8
 8007388:	d122      	bne.n	80073d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	f003 0308 	and.w	r3, r3, #8
 8007394:	2b08      	cmp	r3, #8
 8007396:	d11b      	bne.n	80073d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f06f 0208 	mvn.w	r2, #8
 80073a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2204      	movs	r2, #4
 80073a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	f003 0303 	and.w	r3, r3, #3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f9b3 	bl	8007722 <HAL_TIM_IC_CaptureCallback>
 80073bc:	e005      	b.n	80073ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7fa ff4e 	bl	8002260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f9b6 	bl	8007736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	f003 0310 	and.w	r3, r3, #16
 80073da:	2b10      	cmp	r3, #16
 80073dc:	d122      	bne.n	8007424 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	f003 0310 	and.w	r3, r3, #16
 80073e8:	2b10      	cmp	r3, #16
 80073ea:	d11b      	bne.n	8007424 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f06f 0210 	mvn.w	r2, #16
 80073f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2208      	movs	r2, #8
 80073fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f989 	bl	8007722 <HAL_TIM_IC_CaptureCallback>
 8007410:	e005      	b.n	800741e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7fa ff24 	bl	8002260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f98c 	bl	8007736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	2b01      	cmp	r3, #1
 8007430:	d10e      	bne.n	8007450 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b01      	cmp	r3, #1
 800743e:	d107      	bne.n	8007450 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f06f 0201 	mvn.w	r2, #1
 8007448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7fa fbf8 	bl	8001c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800745a:	2b80      	cmp	r3, #128	; 0x80
 800745c:	d10e      	bne.n	800747c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007468:	2b80      	cmp	r3, #128	; 0x80
 800746a:	d107      	bne.n	800747c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fd08 	bl	8007e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007486:	2b40      	cmp	r3, #64	; 0x40
 8007488:	d10e      	bne.n	80074a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007494:	2b40      	cmp	r3, #64	; 0x40
 8007496:	d107      	bne.n	80074a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f951 	bl	800774a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	f003 0320 	and.w	r3, r3, #32
 80074b2:	2b20      	cmp	r3, #32
 80074b4:	d10e      	bne.n	80074d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	f003 0320 	and.w	r3, r3, #32
 80074c0:	2b20      	cmp	r3, #32
 80074c2:	d107      	bne.n	80074d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f06f 0220 	mvn.w	r2, #32
 80074cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fcd2 	bl	8007e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074d4:	bf00      	nop
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d101      	bne.n	80074fa <HAL_TIM_OC_ConfigChannel+0x1e>
 80074f6:	2302      	movs	r3, #2
 80074f8:	e048      	b.n	800758c <HAL_TIM_OC_ConfigChannel+0xb0>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2b0c      	cmp	r3, #12
 8007506:	d839      	bhi.n	800757c <HAL_TIM_OC_ConfigChannel+0xa0>
 8007508:	a201      	add	r2, pc, #4	; (adr r2, 8007510 <HAL_TIM_OC_ConfigChannel+0x34>)
 800750a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750e:	bf00      	nop
 8007510:	08007545 	.word	0x08007545
 8007514:	0800757d 	.word	0x0800757d
 8007518:	0800757d 	.word	0x0800757d
 800751c:	0800757d 	.word	0x0800757d
 8007520:	08007553 	.word	0x08007553
 8007524:	0800757d 	.word	0x0800757d
 8007528:	0800757d 	.word	0x0800757d
 800752c:	0800757d 	.word	0x0800757d
 8007530:	08007561 	.word	0x08007561
 8007534:	0800757d 	.word	0x0800757d
 8007538:	0800757d 	.word	0x0800757d
 800753c:	0800757d 	.word	0x0800757d
 8007540:	0800756f 	.word	0x0800756f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68b9      	ldr	r1, [r7, #8]
 800754a:	4618      	mov	r0, r3
 800754c:	f000 f9a8 	bl	80078a0 <TIM_OC1_SetConfig>
      break;
 8007550:	e017      	b.n	8007582 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68b9      	ldr	r1, [r7, #8]
 8007558:	4618      	mov	r0, r3
 800755a:	f000 fa11 	bl	8007980 <TIM_OC2_SetConfig>
      break;
 800755e:	e010      	b.n	8007582 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68b9      	ldr	r1, [r7, #8]
 8007566:	4618      	mov	r0, r3
 8007568:	f000 fa80 	bl	8007a6c <TIM_OC3_SetConfig>
      break;
 800756c:	e009      	b.n	8007582 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68b9      	ldr	r1, [r7, #8]
 8007574:	4618      	mov	r0, r3
 8007576:	f000 faed 	bl	8007b54 <TIM_OC4_SetConfig>
      break;
 800757a:	e002      	b.n	8007582 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	75fb      	strb	r3, [r7, #23]
      break;
 8007580:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800758a:	7dfb      	ldrb	r3, [r7, #23]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3718      	adds	r7, #24
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d101      	bne.n	80075b0 <HAL_TIM_ConfigClockSource+0x1c>
 80075ac:	2302      	movs	r3, #2
 80075ae:	e0b4      	b.n	800771a <HAL_TIM_ConfigClockSource+0x186>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2202      	movs	r2, #2
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80075ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075e8:	d03e      	beq.n	8007668 <HAL_TIM_ConfigClockSource+0xd4>
 80075ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075ee:	f200 8087 	bhi.w	8007700 <HAL_TIM_ConfigClockSource+0x16c>
 80075f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075f6:	f000 8086 	beq.w	8007706 <HAL_TIM_ConfigClockSource+0x172>
 80075fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075fe:	d87f      	bhi.n	8007700 <HAL_TIM_ConfigClockSource+0x16c>
 8007600:	2b70      	cmp	r3, #112	; 0x70
 8007602:	d01a      	beq.n	800763a <HAL_TIM_ConfigClockSource+0xa6>
 8007604:	2b70      	cmp	r3, #112	; 0x70
 8007606:	d87b      	bhi.n	8007700 <HAL_TIM_ConfigClockSource+0x16c>
 8007608:	2b60      	cmp	r3, #96	; 0x60
 800760a:	d050      	beq.n	80076ae <HAL_TIM_ConfigClockSource+0x11a>
 800760c:	2b60      	cmp	r3, #96	; 0x60
 800760e:	d877      	bhi.n	8007700 <HAL_TIM_ConfigClockSource+0x16c>
 8007610:	2b50      	cmp	r3, #80	; 0x50
 8007612:	d03c      	beq.n	800768e <HAL_TIM_ConfigClockSource+0xfa>
 8007614:	2b50      	cmp	r3, #80	; 0x50
 8007616:	d873      	bhi.n	8007700 <HAL_TIM_ConfigClockSource+0x16c>
 8007618:	2b40      	cmp	r3, #64	; 0x40
 800761a:	d058      	beq.n	80076ce <HAL_TIM_ConfigClockSource+0x13a>
 800761c:	2b40      	cmp	r3, #64	; 0x40
 800761e:	d86f      	bhi.n	8007700 <HAL_TIM_ConfigClockSource+0x16c>
 8007620:	2b30      	cmp	r3, #48	; 0x30
 8007622:	d064      	beq.n	80076ee <HAL_TIM_ConfigClockSource+0x15a>
 8007624:	2b30      	cmp	r3, #48	; 0x30
 8007626:	d86b      	bhi.n	8007700 <HAL_TIM_ConfigClockSource+0x16c>
 8007628:	2b20      	cmp	r3, #32
 800762a:	d060      	beq.n	80076ee <HAL_TIM_ConfigClockSource+0x15a>
 800762c:	2b20      	cmp	r3, #32
 800762e:	d867      	bhi.n	8007700 <HAL_TIM_ConfigClockSource+0x16c>
 8007630:	2b00      	cmp	r3, #0
 8007632:	d05c      	beq.n	80076ee <HAL_TIM_ConfigClockSource+0x15a>
 8007634:	2b10      	cmp	r3, #16
 8007636:	d05a      	beq.n	80076ee <HAL_TIM_ConfigClockSource+0x15a>
 8007638:	e062      	b.n	8007700 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6818      	ldr	r0, [r3, #0]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	6899      	ldr	r1, [r3, #8]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	685a      	ldr	r2, [r3, #4]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	f000 fb53 	bl	8007cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800765c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	609a      	str	r2, [r3, #8]
      break;
 8007666:	e04f      	b.n	8007708 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6818      	ldr	r0, [r3, #0]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	6899      	ldr	r1, [r3, #8]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685a      	ldr	r2, [r3, #4]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	f000 fb3c 	bl	8007cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689a      	ldr	r2, [r3, #8]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800768a:	609a      	str	r2, [r3, #8]
      break;
 800768c:	e03c      	b.n	8007708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6818      	ldr	r0, [r3, #0]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	6859      	ldr	r1, [r3, #4]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	461a      	mov	r2, r3
 800769c:	f000 fab0 	bl	8007c00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2150      	movs	r1, #80	; 0x50
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 fb09 	bl	8007cbe <TIM_ITRx_SetConfig>
      break;
 80076ac:	e02c      	b.n	8007708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6818      	ldr	r0, [r3, #0]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	6859      	ldr	r1, [r3, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	461a      	mov	r2, r3
 80076bc:	f000 facf 	bl	8007c5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2160      	movs	r1, #96	; 0x60
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 faf9 	bl	8007cbe <TIM_ITRx_SetConfig>
      break;
 80076cc:	e01c      	b.n	8007708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6818      	ldr	r0, [r3, #0]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	6859      	ldr	r1, [r3, #4]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	461a      	mov	r2, r3
 80076dc:	f000 fa90 	bl	8007c00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2140      	movs	r1, #64	; 0x40
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 fae9 	bl	8007cbe <TIM_ITRx_SetConfig>
      break;
 80076ec:	e00c      	b.n	8007708 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4619      	mov	r1, r3
 80076f8:	4610      	mov	r0, r2
 80076fa:	f000 fae0 	bl	8007cbe <TIM_ITRx_SetConfig>
      break;
 80076fe:	e003      	b.n	8007708 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	73fb      	strb	r3, [r7, #15]
      break;
 8007704:	e000      	b.n	8007708 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007706:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007718:	7bfb      	ldrb	r3, [r7, #15]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007722:	b480      	push	{r7}
 8007724:	b083      	sub	sp, #12
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800772a:	bf00      	nop
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800773e:	bf00      	nop
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007752:	bf00      	nop
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
	...

08007760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a40      	ldr	r2, [pc, #256]	; (8007874 <TIM_Base_SetConfig+0x114>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d013      	beq.n	80077a0 <TIM_Base_SetConfig+0x40>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800777e:	d00f      	beq.n	80077a0 <TIM_Base_SetConfig+0x40>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a3d      	ldr	r2, [pc, #244]	; (8007878 <TIM_Base_SetConfig+0x118>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d00b      	beq.n	80077a0 <TIM_Base_SetConfig+0x40>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a3c      	ldr	r2, [pc, #240]	; (800787c <TIM_Base_SetConfig+0x11c>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d007      	beq.n	80077a0 <TIM_Base_SetConfig+0x40>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a3b      	ldr	r2, [pc, #236]	; (8007880 <TIM_Base_SetConfig+0x120>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d003      	beq.n	80077a0 <TIM_Base_SetConfig+0x40>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a3a      	ldr	r2, [pc, #232]	; (8007884 <TIM_Base_SetConfig+0x124>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d108      	bne.n	80077b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a2f      	ldr	r2, [pc, #188]	; (8007874 <TIM_Base_SetConfig+0x114>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d02b      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c0:	d027      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a2c      	ldr	r2, [pc, #176]	; (8007878 <TIM_Base_SetConfig+0x118>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d023      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a2b      	ldr	r2, [pc, #172]	; (800787c <TIM_Base_SetConfig+0x11c>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d01f      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a2a      	ldr	r2, [pc, #168]	; (8007880 <TIM_Base_SetConfig+0x120>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d01b      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a29      	ldr	r2, [pc, #164]	; (8007884 <TIM_Base_SetConfig+0x124>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d017      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a28      	ldr	r2, [pc, #160]	; (8007888 <TIM_Base_SetConfig+0x128>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d013      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a27      	ldr	r2, [pc, #156]	; (800788c <TIM_Base_SetConfig+0x12c>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d00f      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a26      	ldr	r2, [pc, #152]	; (8007890 <TIM_Base_SetConfig+0x130>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d00b      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a25      	ldr	r2, [pc, #148]	; (8007894 <TIM_Base_SetConfig+0x134>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d007      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a24      	ldr	r2, [pc, #144]	; (8007898 <TIM_Base_SetConfig+0x138>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d003      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a23      	ldr	r2, [pc, #140]	; (800789c <TIM_Base_SetConfig+0x13c>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d108      	bne.n	8007824 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	4313      	orrs	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	4313      	orrs	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	689a      	ldr	r2, [r3, #8]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a0a      	ldr	r2, [pc, #40]	; (8007874 <TIM_Base_SetConfig+0x114>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d003      	beq.n	8007858 <TIM_Base_SetConfig+0xf8>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a0c      	ldr	r2, [pc, #48]	; (8007884 <TIM_Base_SetConfig+0x124>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d103      	bne.n	8007860 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	691a      	ldr	r2, [r3, #16]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	615a      	str	r2, [r3, #20]
}
 8007866:	bf00      	nop
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	40010000 	.word	0x40010000
 8007878:	40000400 	.word	0x40000400
 800787c:	40000800 	.word	0x40000800
 8007880:	40000c00 	.word	0x40000c00
 8007884:	40010400 	.word	0x40010400
 8007888:	40014000 	.word	0x40014000
 800788c:	40014400 	.word	0x40014400
 8007890:	40014800 	.word	0x40014800
 8007894:	40001800 	.word	0x40001800
 8007898:	40001c00 	.word	0x40001c00
 800789c:	40002000 	.word	0x40002000

080078a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b087      	sub	sp, #28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	f023 0201 	bic.w	r2, r3, #1
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f023 0303 	bic.w	r3, r3, #3
 80078d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	4313      	orrs	r3, r2
 80078e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	f023 0302 	bic.w	r3, r3, #2
 80078e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a20      	ldr	r2, [pc, #128]	; (8007978 <TIM_OC1_SetConfig+0xd8>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d003      	beq.n	8007904 <TIM_OC1_SetConfig+0x64>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a1f      	ldr	r2, [pc, #124]	; (800797c <TIM_OC1_SetConfig+0xdc>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d10c      	bne.n	800791e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	f023 0308 	bic.w	r3, r3, #8
 800790a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	4313      	orrs	r3, r2
 8007914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f023 0304 	bic.w	r3, r3, #4
 800791c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a15      	ldr	r2, [pc, #84]	; (8007978 <TIM_OC1_SetConfig+0xd8>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d003      	beq.n	800792e <TIM_OC1_SetConfig+0x8e>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a14      	ldr	r2, [pc, #80]	; (800797c <TIM_OC1_SetConfig+0xdc>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d111      	bne.n	8007952 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800793c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	4313      	orrs	r3, r2
 8007946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	4313      	orrs	r3, r2
 8007950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	621a      	str	r2, [r3, #32]
}
 800796c:	bf00      	nop
 800796e:	371c      	adds	r7, #28
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr
 8007978:	40010000 	.word	0x40010000
 800797c:	40010400 	.word	0x40010400

08007980 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	f023 0210 	bic.w	r2, r3, #16
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	021b      	lsls	r3, r3, #8
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f023 0320 	bic.w	r3, r3, #32
 80079ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	011b      	lsls	r3, r3, #4
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a22      	ldr	r2, [pc, #136]	; (8007a64 <TIM_OC2_SetConfig+0xe4>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d003      	beq.n	80079e8 <TIM_OC2_SetConfig+0x68>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a21      	ldr	r2, [pc, #132]	; (8007a68 <TIM_OC2_SetConfig+0xe8>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d10d      	bne.n	8007a04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	011b      	lsls	r3, r3, #4
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a17      	ldr	r2, [pc, #92]	; (8007a64 <TIM_OC2_SetConfig+0xe4>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d003      	beq.n	8007a14 <TIM_OC2_SetConfig+0x94>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a16      	ldr	r2, [pc, #88]	; (8007a68 <TIM_OC2_SetConfig+0xe8>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d113      	bne.n	8007a3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	621a      	str	r2, [r3, #32]
}
 8007a56:	bf00      	nop
 8007a58:	371c      	adds	r7, #28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	40010000 	.word	0x40010000
 8007a68:	40010400 	.word	0x40010400

08007a6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b087      	sub	sp, #28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f023 0303 	bic.w	r3, r3, #3
 8007aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	021b      	lsls	r3, r3, #8
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a21      	ldr	r2, [pc, #132]	; (8007b4c <TIM_OC3_SetConfig+0xe0>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d003      	beq.n	8007ad2 <TIM_OC3_SetConfig+0x66>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a20      	ldr	r2, [pc, #128]	; (8007b50 <TIM_OC3_SetConfig+0xe4>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d10d      	bne.n	8007aee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	021b      	lsls	r3, r3, #8
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a16      	ldr	r2, [pc, #88]	; (8007b4c <TIM_OC3_SetConfig+0xe0>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d003      	beq.n	8007afe <TIM_OC3_SetConfig+0x92>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a15      	ldr	r2, [pc, #84]	; (8007b50 <TIM_OC3_SetConfig+0xe4>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d113      	bne.n	8007b26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	011b      	lsls	r3, r3, #4
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	011b      	lsls	r3, r3, #4
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	685a      	ldr	r2, [r3, #4]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	621a      	str	r2, [r3, #32]
}
 8007b40:	bf00      	nop
 8007b42:	371c      	adds	r7, #28
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	40010000 	.word	0x40010000
 8007b50:	40010400 	.word	0x40010400

08007b54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b087      	sub	sp, #28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	021b      	lsls	r3, r3, #8
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	031b      	lsls	r3, r3, #12
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a12      	ldr	r2, [pc, #72]	; (8007bf8 <TIM_OC4_SetConfig+0xa4>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d003      	beq.n	8007bbc <TIM_OC4_SetConfig+0x68>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a11      	ldr	r2, [pc, #68]	; (8007bfc <TIM_OC4_SetConfig+0xa8>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d109      	bne.n	8007bd0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	019b      	lsls	r3, r3, #6
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	621a      	str	r2, [r3, #32]
}
 8007bea:	bf00      	nop
 8007bec:	371c      	adds	r7, #28
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	40010000 	.word	0x40010000
 8007bfc:	40010400 	.word	0x40010400

08007c00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	f023 0201 	bic.w	r2, r3, #1
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	011b      	lsls	r3, r3, #4
 8007c30:	693a      	ldr	r2, [r7, #16]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	f023 030a 	bic.w	r3, r3, #10
 8007c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c3e:	697a      	ldr	r2, [r7, #20]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	621a      	str	r2, [r3, #32]
}
 8007c52:	bf00      	nop
 8007c54:	371c      	adds	r7, #28
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b087      	sub	sp, #28
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	60f8      	str	r0, [r7, #12]
 8007c66:	60b9      	str	r1, [r7, #8]
 8007c68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	f023 0210 	bic.w	r2, r3, #16
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
 8007c80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	031b      	lsls	r3, r3, #12
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	011b      	lsls	r3, r3, #4
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	621a      	str	r2, [r3, #32]
}
 8007cb2:	bf00      	nop
 8007cb4:	371c      	adds	r7, #28
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b085      	sub	sp, #20
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	f043 0307 	orr.w	r3, r3, #7
 8007ce0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	609a      	str	r2, [r3, #8]
}
 8007ce8:	bf00      	nop
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
 8007d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	021a      	lsls	r2, r3, #8
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	431a      	orrs	r2, r3
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	609a      	str	r2, [r3, #8]
}
 8007d28:	bf00      	nop
 8007d2a:	371c      	adds	r7, #28
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	f003 031f 	and.w	r3, r3, #31
 8007d46:	2201      	movs	r2, #1
 8007d48:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6a1a      	ldr	r2, [r3, #32]
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	43db      	mvns	r3, r3
 8007d56:	401a      	ands	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6a1a      	ldr	r2, [r3, #32]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f003 031f 	and.w	r3, r3, #31
 8007d66:	6879      	ldr	r1, [r7, #4]
 8007d68:	fa01 f303 	lsl.w	r3, r1, r3
 8007d6c:	431a      	orrs	r2, r3
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	621a      	str	r2, [r3, #32]
}
 8007d72:	bf00      	nop
 8007d74:	371c      	adds	r7, #28
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
	...

08007d80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d101      	bne.n	8007d98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d94:	2302      	movs	r3, #2
 8007d96:	e05a      	b.n	8007e4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a21      	ldr	r2, [pc, #132]	; (8007e5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d022      	beq.n	8007e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007de4:	d01d      	beq.n	8007e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a1d      	ldr	r2, [pc, #116]	; (8007e60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d018      	beq.n	8007e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a1b      	ldr	r2, [pc, #108]	; (8007e64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d013      	beq.n	8007e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a1a      	ldr	r2, [pc, #104]	; (8007e68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d00e      	beq.n	8007e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a18      	ldr	r2, [pc, #96]	; (8007e6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d009      	beq.n	8007e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a17      	ldr	r2, [pc, #92]	; (8007e70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d004      	beq.n	8007e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a15      	ldr	r2, [pc, #84]	; (8007e74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d10c      	bne.n	8007e3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3714      	adds	r7, #20
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	40010000 	.word	0x40010000
 8007e60:	40000400 	.word	0x40000400
 8007e64:	40000800 	.word	0x40000800
 8007e68:	40000c00 	.word	0x40000c00
 8007e6c:	40010400 	.word	0x40010400
 8007e70:	40014000 	.word	0x40014000
 8007e74:	40001800 	.word	0x40001800

08007e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e03f      	b.n	8007f32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d106      	bne.n	8007ecc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7fc fd2a 	bl	8004920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2224      	movs	r2, #36	; 0x24
 8007ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68da      	ldr	r2, [r3, #12]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ee2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fe79 	bl	8008bdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	691a      	ldr	r2, [r3, #16]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	695a      	ldr	r2, [r3, #20]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68da      	ldr	r2, [r3, #12]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2220      	movs	r2, #32
 8007f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b082      	sub	sp, #8
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d101      	bne.n	8007f4c <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e047      	b.n	8007fdc <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d106      	bne.n	8007f66 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f7fc fcdd 	bl	8004920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2224      	movs	r2, #36	; 0x24
 8007f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68da      	ldr	r2, [r3, #12]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f7c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fe2c 	bl	8008bdc <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	691a      	ldr	r2, [r3, #16]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f92:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	695a      	ldr	r2, [r3, #20]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8007fa2:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	695a      	ldr	r2, [r3, #20]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f042 0208 	orr.w	r2, r2, #8
 8007fb2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68da      	ldr	r2, [r3, #12]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fc2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b08a      	sub	sp, #40	; 0x28
 8007fe8:	af02      	add	r7, sp, #8
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	603b      	str	r3, [r7, #0]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	2b20      	cmp	r3, #32
 8008002:	d17c      	bne.n	80080fe <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d002      	beq.n	8008010 <HAL_UART_Transmit+0x2c>
 800800a:	88fb      	ldrh	r3, [r7, #6]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d101      	bne.n	8008014 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e075      	b.n	8008100 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800801a:	2b01      	cmp	r3, #1
 800801c:	d101      	bne.n	8008022 <HAL_UART_Transmit+0x3e>
 800801e:	2302      	movs	r3, #2
 8008020:	e06e      	b.n	8008100 <HAL_UART_Transmit+0x11c>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2221      	movs	r2, #33	; 0x21
 8008034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008038:	f7fc fed6 	bl	8004de8 <HAL_GetTick>
 800803c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	88fa      	ldrh	r2, [r7, #6]
 8008042:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	88fa      	ldrh	r2, [r7, #6]
 8008048:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008052:	d108      	bne.n	8008066 <HAL_UART_Transmit+0x82>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d104      	bne.n	8008066 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800805c:	2300      	movs	r3, #0
 800805e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	61bb      	str	r3, [r7, #24]
 8008064:	e003      	b.n	800806e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800806a:	2300      	movs	r3, #0
 800806c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008076:	e02a      	b.n	80080ce <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	2200      	movs	r2, #0
 8008080:	2180      	movs	r1, #128	; 0x80
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f000 fb64 	bl	8008750 <UART_WaitOnFlagUntilTimeout>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e036      	b.n	8008100 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10b      	bne.n	80080b0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	461a      	mov	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080a6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	3302      	adds	r3, #2
 80080ac:	61bb      	str	r3, [r7, #24]
 80080ae:	e007      	b.n	80080c0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	781a      	ldrb	r2, [r3, #0]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	3301      	adds	r3, #1
 80080be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	3b01      	subs	r3, #1
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1cf      	bne.n	8008078 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	2200      	movs	r2, #0
 80080e0:	2140      	movs	r1, #64	; 0x40
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 fb34 	bl	8008750 <UART_WaitOnFlagUntilTimeout>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e006      	b.n	8008100 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2220      	movs	r2, #32
 80080f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	e000      	b.n	8008100 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80080fe:	2302      	movs	r3, #2
  }
}
 8008100:	4618      	mov	r0, r3
 8008102:	3720      	adds	r7, #32
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	4613      	mov	r3, r2
 8008114:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b20      	cmp	r3, #32
 8008120:	d130      	bne.n	8008184 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d002      	beq.n	800812e <HAL_UART_Transmit_IT+0x26>
 8008128:	88fb      	ldrh	r3, [r7, #6]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e029      	b.n	8008186 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008138:	2b01      	cmp	r3, #1
 800813a:	d101      	bne.n	8008140 <HAL_UART_Transmit_IT+0x38>
 800813c:	2302      	movs	r3, #2
 800813e:	e022      	b.n	8008186 <HAL_UART_Transmit_IT+0x7e>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	88fa      	ldrh	r2, [r7, #6]
 8008152:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	88fa      	ldrh	r2, [r7, #6]
 8008158:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2221      	movs	r2, #33	; 0x21
 8008164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68da      	ldr	r2, [r3, #12]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800817e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	e000      	b.n	8008186 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008184:	2302      	movs	r3, #2
  }
}
 8008186:	4618      	mov	r0, r3
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b084      	sub	sp, #16
 8008196:	af00      	add	r7, sp, #0
 8008198:	60f8      	str	r0, [r7, #12]
 800819a:	60b9      	str	r1, [r7, #8]
 800819c:	4613      	mov	r3, r2
 800819e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b20      	cmp	r3, #32
 80081aa:	d11d      	bne.n	80081e8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d002      	beq.n	80081b8 <HAL_UART_Receive_IT+0x26>
 80081b2:	88fb      	ldrh	r3, [r7, #6]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e016      	b.n	80081ea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d101      	bne.n	80081ca <HAL_UART_Receive_IT+0x38>
 80081c6:	2302      	movs	r3, #2
 80081c8:	e00f      	b.n	80081ea <HAL_UART_Receive_IT+0x58>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80081d8:	88fb      	ldrh	r3, [r7, #6]
 80081da:	461a      	mov	r2, r3
 80081dc:	68b9      	ldr	r1, [r7, #8]
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f000 fb24 	bl	800882c <UART_Start_Receive_IT>
 80081e4:	4603      	mov	r3, r0
 80081e6:	e000      	b.n	80081ea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80081e8:	2302      	movs	r3, #2
  }
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
	...

080081f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b0ba      	sub	sp, #232	; 0xe8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800821a:	2300      	movs	r3, #0
 800821c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008220:	2300      	movs	r3, #0
 8008222:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800822a:	f003 030f 	and.w	r3, r3, #15
 800822e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10f      	bne.n	800825a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800823a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800823e:	f003 0320 	and.w	r3, r3, #32
 8008242:	2b00      	cmp	r3, #0
 8008244:	d009      	beq.n	800825a <HAL_UART_IRQHandler+0x66>
 8008246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800824a:	f003 0320 	and.w	r3, r3, #32
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fc07 	bl	8008a66 <UART_Receive_IT>
      return;
 8008258:	e256      	b.n	8008708 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800825a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 80de 	beq.w	8008420 <HAL_UART_IRQHandler+0x22c>
 8008264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008268:	f003 0301 	and.w	r3, r3, #1
 800826c:	2b00      	cmp	r3, #0
 800826e:	d106      	bne.n	800827e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008274:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 80d1 	beq.w	8008420 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800827e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00b      	beq.n	80082a2 <HAL_UART_IRQHandler+0xae>
 800828a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800828e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008292:	2b00      	cmp	r3, #0
 8008294:	d005      	beq.n	80082a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829a:	f043 0201 	orr.w	r2, r3, #1
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a6:	f003 0304 	and.w	r3, r3, #4
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00b      	beq.n	80082c6 <HAL_UART_IRQHandler+0xd2>
 80082ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d005      	beq.n	80082c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	f043 0202 	orr.w	r2, r3, #2
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ca:	f003 0302 	and.w	r3, r3, #2
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00b      	beq.n	80082ea <HAL_UART_IRQHandler+0xf6>
 80082d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d005      	beq.n	80082ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e2:	f043 0204 	orr.w	r2, r3, #4
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80082ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ee:	f003 0308 	and.w	r3, r3, #8
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d011      	beq.n	800831a <HAL_UART_IRQHandler+0x126>
 80082f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082fa:	f003 0320 	and.w	r3, r3, #32
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d105      	bne.n	800830e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	2b00      	cmp	r3, #0
 800830c:	d005      	beq.n	800831a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008312:	f043 0208 	orr.w	r2, r3, #8
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831e:	2b00      	cmp	r3, #0
 8008320:	f000 81ed 	beq.w	80086fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008328:	f003 0320 	and.w	r3, r3, #32
 800832c:	2b00      	cmp	r3, #0
 800832e:	d008      	beq.n	8008342 <HAL_UART_IRQHandler+0x14e>
 8008330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008334:	f003 0320 	and.w	r3, r3, #32
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fb92 	bl	8008a66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800834c:	2b40      	cmp	r3, #64	; 0x40
 800834e:	bf0c      	ite	eq
 8008350:	2301      	moveq	r3, #1
 8008352:	2300      	movne	r3, #0
 8008354:	b2db      	uxtb	r3, r3
 8008356:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835e:	f003 0308 	and.w	r3, r3, #8
 8008362:	2b00      	cmp	r3, #0
 8008364:	d103      	bne.n	800836e <HAL_UART_IRQHandler+0x17a>
 8008366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800836a:	2b00      	cmp	r3, #0
 800836c:	d04f      	beq.n	800840e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fa9a 	bl	80088a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837e:	2b40      	cmp	r3, #64	; 0x40
 8008380:	d141      	bne.n	8008406 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3314      	adds	r3, #20
 8008388:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008390:	e853 3f00 	ldrex	r3, [r3]
 8008394:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008398:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800839c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	3314      	adds	r3, #20
 80083aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80083ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80083b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80083ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80083be:	e841 2300 	strex	r3, r2, [r1]
 80083c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80083c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1d9      	bne.n	8008382 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d013      	beq.n	80083fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083da:	4a7d      	ldr	r2, [pc, #500]	; (80085d0 <HAL_UART_IRQHandler+0x3dc>)
 80083dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fd fd59 	bl	8005e9a <HAL_DMA_Abort_IT>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d016      	beq.n	800841c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80083f8:	4610      	mov	r0, r2
 80083fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083fc:	e00e      	b.n	800841c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f990 	bl	8008724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008404:	e00a      	b.n	800841c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f98c 	bl	8008724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800840c:	e006      	b.n	800841c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f988 	bl	8008724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800841a:	e170      	b.n	80086fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800841c:	bf00      	nop
    return;
 800841e:	e16e      	b.n	80086fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008424:	2b01      	cmp	r3, #1
 8008426:	f040 814a 	bne.w	80086be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800842a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800842e:	f003 0310 	and.w	r3, r3, #16
 8008432:	2b00      	cmp	r3, #0
 8008434:	f000 8143 	beq.w	80086be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800843c:	f003 0310 	and.w	r3, r3, #16
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 813c 	beq.w	80086be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008446:	2300      	movs	r3, #0
 8008448:	60bb      	str	r3, [r7, #8]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	60bb      	str	r3, [r7, #8]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	60bb      	str	r3, [r7, #8]
 800845a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008466:	2b40      	cmp	r3, #64	; 0x40
 8008468:	f040 80b4 	bne.w	80085d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008478:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 8140 	beq.w	8008702 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008486:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800848a:	429a      	cmp	r2, r3
 800848c:	f080 8139 	bcs.w	8008702 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008496:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849c:	69db      	ldr	r3, [r3, #28]
 800849e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084a2:	f000 8088 	beq.w	80085b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	330c      	adds	r3, #12
 80084ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084b4:	e853 3f00 	ldrex	r3, [r3]
 80084b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80084bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	330c      	adds	r3, #12
 80084ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80084d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80084de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084e2:	e841 2300 	strex	r3, r2, [r1]
 80084e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80084ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1d9      	bne.n	80084a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	3314      	adds	r3, #20
 80084f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084fc:	e853 3f00 	ldrex	r3, [r3]
 8008500:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008502:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008504:	f023 0301 	bic.w	r3, r3, #1
 8008508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	3314      	adds	r3, #20
 8008512:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008516:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800851a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800851e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008522:	e841 2300 	strex	r3, r2, [r1]
 8008526:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1e1      	bne.n	80084f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3314      	adds	r3, #20
 8008534:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008538:	e853 3f00 	ldrex	r3, [r3]
 800853c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800853e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008544:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3314      	adds	r3, #20
 800854e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008552:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008554:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008556:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008558:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800855a:	e841 2300 	strex	r3, r2, [r1]
 800855e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1e3      	bne.n	800852e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2220      	movs	r2, #32
 800856a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	330c      	adds	r3, #12
 800857a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800857e:	e853 3f00 	ldrex	r3, [r3]
 8008582:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008586:	f023 0310 	bic.w	r3, r3, #16
 800858a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	330c      	adds	r3, #12
 8008594:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008598:	65ba      	str	r2, [r7, #88]	; 0x58
 800859a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800859e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085a0:	e841 2300 	strex	r3, r2, [r1]
 80085a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1e3      	bne.n	8008574 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fd fc02 	bl	8005dba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085be:	b29b      	uxth	r3, r3
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	4619      	mov	r1, r3
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f8b6 	bl	8008738 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085cc:	e099      	b.n	8008702 <HAL_UART_IRQHandler+0x50e>
 80085ce:	bf00      	nop
 80085d0:	0800896f 	.word	0x0800896f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085dc:	b29b      	uxth	r3, r3
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f000 808b 	beq.w	8008706 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80085f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f000 8086 	beq.w	8008706 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	330c      	adds	r3, #12
 8008600:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008604:	e853 3f00 	ldrex	r3, [r3]
 8008608:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800860a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800860c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008610:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	330c      	adds	r3, #12
 800861a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800861e:	647a      	str	r2, [r7, #68]	; 0x44
 8008620:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008622:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008624:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008626:	e841 2300 	strex	r3, r2, [r1]
 800862a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800862c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1e3      	bne.n	80085fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	3314      	adds	r3, #20
 8008638:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	e853 3f00 	ldrex	r3, [r3]
 8008640:	623b      	str	r3, [r7, #32]
   return(result);
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	f023 0301 	bic.w	r3, r3, #1
 8008648:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	3314      	adds	r3, #20
 8008652:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008656:	633a      	str	r2, [r7, #48]	; 0x30
 8008658:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800865c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800865e:	e841 2300 	strex	r3, r2, [r1]
 8008662:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1e3      	bne.n	8008632 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2220      	movs	r2, #32
 800866e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	330c      	adds	r3, #12
 800867e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	e853 3f00 	ldrex	r3, [r3]
 8008686:	60fb      	str	r3, [r7, #12]
   return(result);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f023 0310 	bic.w	r3, r3, #16
 800868e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	330c      	adds	r3, #12
 8008698:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800869c:	61fa      	str	r2, [r7, #28]
 800869e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a0:	69b9      	ldr	r1, [r7, #24]
 80086a2:	69fa      	ldr	r2, [r7, #28]
 80086a4:	e841 2300 	strex	r3, r2, [r1]
 80086a8:	617b      	str	r3, [r7, #20]
   return(result);
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1e3      	bne.n	8008678 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f83e 	bl	8008738 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086bc:	e023      	b.n	8008706 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80086be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d009      	beq.n	80086de <HAL_UART_IRQHandler+0x4ea>
 80086ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f95d 	bl	8008996 <UART_Transmit_IT>
    return;
 80086dc:	e014      	b.n	8008708 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80086de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00e      	beq.n	8008708 <HAL_UART_IRQHandler+0x514>
 80086ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d008      	beq.n	8008708 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f99d 	bl	8008a36 <UART_EndTransmit_IT>
    return;
 80086fc:	e004      	b.n	8008708 <HAL_UART_IRQHandler+0x514>
    return;
 80086fe:	bf00      	nop
 8008700:	e002      	b.n	8008708 <HAL_UART_IRQHandler+0x514>
      return;
 8008702:	bf00      	nop
 8008704:	e000      	b.n	8008708 <HAL_UART_IRQHandler+0x514>
      return;
 8008706:	bf00      	nop
  }
}
 8008708:	37e8      	adds	r7, #232	; 0xe8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop

08008710 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	460b      	mov	r3, r1
 8008742:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008744:	bf00      	nop
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b090      	sub	sp, #64	; 0x40
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	603b      	str	r3, [r7, #0]
 800875c:	4613      	mov	r3, r2
 800875e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008760:	e050      	b.n	8008804 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008768:	d04c      	beq.n	8008804 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800876a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800876c:	2b00      	cmp	r3, #0
 800876e:	d007      	beq.n	8008780 <UART_WaitOnFlagUntilTimeout+0x30>
 8008770:	f7fc fb3a 	bl	8004de8 <HAL_GetTick>
 8008774:	4602      	mov	r2, r0
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800877c:	429a      	cmp	r2, r3
 800877e:	d241      	bcs.n	8008804 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	330c      	adds	r3, #12
 8008786:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878a:	e853 3f00 	ldrex	r3, [r3]
 800878e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008796:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	330c      	adds	r3, #12
 800879e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80087a0:	637a      	str	r2, [r7, #52]	; 0x34
 80087a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80087a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087a8:	e841 2300 	strex	r3, r2, [r1]
 80087ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80087ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1e5      	bne.n	8008780 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	3314      	adds	r3, #20
 80087ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	e853 3f00 	ldrex	r3, [r3]
 80087c2:	613b      	str	r3, [r7, #16]
   return(result);
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	f023 0301 	bic.w	r3, r3, #1
 80087ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3314      	adds	r3, #20
 80087d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087d4:	623a      	str	r2, [r7, #32]
 80087d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d8:	69f9      	ldr	r1, [r7, #28]
 80087da:	6a3a      	ldr	r2, [r7, #32]
 80087dc:	e841 2300 	strex	r3, r2, [r1]
 80087e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1e5      	bne.n	80087b4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2220      	movs	r2, #32
 80087ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2220      	movs	r2, #32
 80087f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	e00f      	b.n	8008824 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	4013      	ands	r3, r2
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	429a      	cmp	r2, r3
 8008812:	bf0c      	ite	eq
 8008814:	2301      	moveq	r3, #1
 8008816:	2300      	movne	r3, #0
 8008818:	b2db      	uxtb	r3, r3
 800881a:	461a      	mov	r2, r3
 800881c:	79fb      	ldrb	r3, [r7, #7]
 800881e:	429a      	cmp	r2, r3
 8008820:	d09f      	beq.n	8008762 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3740      	adds	r7, #64	; 0x40
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	4613      	mov	r3, r2
 8008838:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	88fa      	ldrh	r2, [r7, #6]
 8008844:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	88fa      	ldrh	r2, [r7, #6]
 800884a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2222      	movs	r2, #34	; 0x22
 8008856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d007      	beq.n	800887a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68da      	ldr	r2, [r3, #12]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008878:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	695a      	ldr	r2, [r3, #20]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f042 0201 	orr.w	r2, r2, #1
 8008888:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68da      	ldr	r2, [r3, #12]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f042 0220 	orr.w	r2, r2, #32
 8008898:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3714      	adds	r7, #20
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b095      	sub	sp, #84	; 0x54
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	330c      	adds	r3, #12
 80088b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ba:	e853 3f00 	ldrex	r3, [r3]
 80088be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	330c      	adds	r3, #12
 80088ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088d0:	643a      	str	r2, [r7, #64]	; 0x40
 80088d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088d8:	e841 2300 	strex	r3, r2, [r1]
 80088dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1e5      	bne.n	80088b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	3314      	adds	r3, #20
 80088ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ec:	6a3b      	ldr	r3, [r7, #32]
 80088ee:	e853 3f00 	ldrex	r3, [r3]
 80088f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	f023 0301 	bic.w	r3, r3, #1
 80088fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	3314      	adds	r3, #20
 8008902:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008904:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008906:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008908:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800890a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800890c:	e841 2300 	strex	r3, r2, [r1]
 8008910:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1e5      	bne.n	80088e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891c:	2b01      	cmp	r3, #1
 800891e:	d119      	bne.n	8008954 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	330c      	adds	r3, #12
 8008926:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	e853 3f00 	ldrex	r3, [r3]
 800892e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	f023 0310 	bic.w	r3, r3, #16
 8008936:	647b      	str	r3, [r7, #68]	; 0x44
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	330c      	adds	r3, #12
 800893e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008940:	61ba      	str	r2, [r7, #24]
 8008942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008944:	6979      	ldr	r1, [r7, #20]
 8008946:	69ba      	ldr	r2, [r7, #24]
 8008948:	e841 2300 	strex	r3, r2, [r1]
 800894c:	613b      	str	r3, [r7, #16]
   return(result);
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1e5      	bne.n	8008920 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2220      	movs	r2, #32
 8008958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008962:	bf00      	nop
 8008964:	3754      	adds	r7, #84	; 0x54
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b084      	sub	sp, #16
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f7ff fecb 	bl	8008724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800898e:	bf00      	nop
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008996:	b480      	push	{r7}
 8008998:	b085      	sub	sp, #20
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b21      	cmp	r3, #33	; 0x21
 80089a8:	d13e      	bne.n	8008a28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089b2:	d114      	bne.n	80089de <UART_Transmit_IT+0x48>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d110      	bne.n	80089de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6a1b      	ldr	r3, [r3, #32]
 80089c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	881b      	ldrh	r3, [r3, #0]
 80089c6:	461a      	mov	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a1b      	ldr	r3, [r3, #32]
 80089d6:	1c9a      	adds	r2, r3, #2
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	621a      	str	r2, [r3, #32]
 80089dc:	e008      	b.n	80089f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a1b      	ldr	r3, [r3, #32]
 80089e2:	1c59      	adds	r1, r3, #1
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	6211      	str	r1, [r2, #32]
 80089e8:	781a      	ldrb	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	3b01      	subs	r3, #1
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	4619      	mov	r1, r3
 80089fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10f      	bne.n	8008a24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68da      	ldr	r2, [r3, #12]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68da      	ldr	r2, [r3, #12]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	e000      	b.n	8008a2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a28:	2302      	movs	r3, #2
  }
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3714      	adds	r7, #20
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b082      	sub	sp, #8
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68da      	ldr	r2, [r3, #12]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2220      	movs	r2, #32
 8008a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7ff fe5a 	bl	8008710 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b08c      	sub	sp, #48	; 0x30
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	2b22      	cmp	r3, #34	; 0x22
 8008a78:	f040 80ab 	bne.w	8008bd2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a84:	d117      	bne.n	8008ab6 <UART_Receive_IT+0x50>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d113      	bne.n	8008ab6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a96:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aae:	1c9a      	adds	r2, r3, #2
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	629a      	str	r2, [r3, #40]	; 0x28
 8008ab4:	e026      	b.n	8008b04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008abc:	2300      	movs	r3, #0
 8008abe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ac8:	d007      	beq.n	8008ada <UART_Receive_IT+0x74>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10a      	bne.n	8008ae8 <UART_Receive_IT+0x82>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d106      	bne.n	8008ae8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae4:	701a      	strb	r2, [r3, #0]
 8008ae6:	e008      	b.n	8008afa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afe:	1c5a      	adds	r2, r3, #1
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	4619      	mov	r1, r3
 8008b12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d15a      	bne.n	8008bce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68da      	ldr	r2, [r3, #12]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f022 0220 	bic.w	r2, r2, #32
 8008b26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68da      	ldr	r2, [r3, #12]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	695a      	ldr	r2, [r3, #20]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f022 0201 	bic.w	r2, r2, #1
 8008b46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d135      	bne.n	8008bc4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	330c      	adds	r3, #12
 8008b64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	e853 3f00 	ldrex	r3, [r3]
 8008b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	f023 0310 	bic.w	r3, r3, #16
 8008b74:	627b      	str	r3, [r7, #36]	; 0x24
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	330c      	adds	r3, #12
 8008b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b7e:	623a      	str	r2, [r7, #32]
 8008b80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b82:	69f9      	ldr	r1, [r7, #28]
 8008b84:	6a3a      	ldr	r2, [r7, #32]
 8008b86:	e841 2300 	strex	r3, r2, [r1]
 8008b8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1e5      	bne.n	8008b5e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0310 	and.w	r3, r3, #16
 8008b9c:	2b10      	cmp	r3, #16
 8008b9e:	d10a      	bne.n	8008bb6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	60fb      	str	r3, [r7, #12]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	60fb      	str	r3, [r7, #12]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008bba:	4619      	mov	r1, r3
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7ff fdbb 	bl	8008738 <HAL_UARTEx_RxEventCallback>
 8008bc2:	e002      	b.n	8008bca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f7fb fc05 	bl	80043d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	e002      	b.n	8008bd4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	e000      	b.n	8008bd4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008bd2:	2302      	movs	r3, #2
  }
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3730      	adds	r7, #48	; 0x30
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008be0:	b0c0      	sub	sp, #256	; 0x100
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bf8:	68d9      	ldr	r1, [r3, #12]
 8008bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	ea40 0301 	orr.w	r3, r0, r1
 8008c04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c0a:	689a      	ldr	r2, [r3, #8]
 8008c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	431a      	orrs	r2, r3
 8008c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	431a      	orrs	r2, r3
 8008c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c20:	69db      	ldr	r3, [r3, #28]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008c34:	f021 010c 	bic.w	r1, r1, #12
 8008c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c42:	430b      	orrs	r3, r1
 8008c44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c56:	6999      	ldr	r1, [r3, #24]
 8008c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	ea40 0301 	orr.w	r3, r0, r1
 8008c62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	4b8f      	ldr	r3, [pc, #572]	; (8008ea8 <UART_SetConfig+0x2cc>)
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d005      	beq.n	8008c7c <UART_SetConfig+0xa0>
 8008c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	4b8d      	ldr	r3, [pc, #564]	; (8008eac <UART_SetConfig+0x2d0>)
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d104      	bne.n	8008c86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c7c:	f7fd fc14 	bl	80064a8 <HAL_RCC_GetPCLK2Freq>
 8008c80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008c84:	e003      	b.n	8008c8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c86:	f7fd fbfb 	bl	8006480 <HAL_RCC_GetPCLK1Freq>
 8008c8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c92:	69db      	ldr	r3, [r3, #28]
 8008c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c98:	f040 810c 	bne.w	8008eb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ca6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008caa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008cae:	4622      	mov	r2, r4
 8008cb0:	462b      	mov	r3, r5
 8008cb2:	1891      	adds	r1, r2, r2
 8008cb4:	65b9      	str	r1, [r7, #88]	; 0x58
 8008cb6:	415b      	adcs	r3, r3
 8008cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	eb12 0801 	adds.w	r8, r2, r1
 8008cc4:	4629      	mov	r1, r5
 8008cc6:	eb43 0901 	adc.w	r9, r3, r1
 8008cca:	f04f 0200 	mov.w	r2, #0
 8008cce:	f04f 0300 	mov.w	r3, #0
 8008cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cde:	4690      	mov	r8, r2
 8008ce0:	4699      	mov	r9, r3
 8008ce2:	4623      	mov	r3, r4
 8008ce4:	eb18 0303 	adds.w	r3, r8, r3
 8008ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008cec:	462b      	mov	r3, r5
 8008cee:	eb49 0303 	adc.w	r3, r9, r3
 8008cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008d06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	18db      	adds	r3, r3, r3
 8008d0e:	653b      	str	r3, [r7, #80]	; 0x50
 8008d10:	4613      	mov	r3, r2
 8008d12:	eb42 0303 	adc.w	r3, r2, r3
 8008d16:	657b      	str	r3, [r7, #84]	; 0x54
 8008d18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008d1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008d20:	f7f7 ffb2 	bl	8000c88 <__aeabi_uldivmod>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	4b61      	ldr	r3, [pc, #388]	; (8008eb0 <UART_SetConfig+0x2d4>)
 8008d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d2e:	095b      	lsrs	r3, r3, #5
 8008d30:	011c      	lsls	r4, r3, #4
 8008d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d36:	2200      	movs	r2, #0
 8008d38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008d40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008d44:	4642      	mov	r2, r8
 8008d46:	464b      	mov	r3, r9
 8008d48:	1891      	adds	r1, r2, r2
 8008d4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008d4c:	415b      	adcs	r3, r3
 8008d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008d54:	4641      	mov	r1, r8
 8008d56:	eb12 0a01 	adds.w	sl, r2, r1
 8008d5a:	4649      	mov	r1, r9
 8008d5c:	eb43 0b01 	adc.w	fp, r3, r1
 8008d60:	f04f 0200 	mov.w	r2, #0
 8008d64:	f04f 0300 	mov.w	r3, #0
 8008d68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d74:	4692      	mov	sl, r2
 8008d76:	469b      	mov	fp, r3
 8008d78:	4643      	mov	r3, r8
 8008d7a:	eb1a 0303 	adds.w	r3, sl, r3
 8008d7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d82:	464b      	mov	r3, r9
 8008d84:	eb4b 0303 	adc.w	r3, fp, r3
 8008d88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008d9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008da0:	460b      	mov	r3, r1
 8008da2:	18db      	adds	r3, r3, r3
 8008da4:	643b      	str	r3, [r7, #64]	; 0x40
 8008da6:	4613      	mov	r3, r2
 8008da8:	eb42 0303 	adc.w	r3, r2, r3
 8008dac:	647b      	str	r3, [r7, #68]	; 0x44
 8008dae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008db2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008db6:	f7f7 ff67 	bl	8000c88 <__aeabi_uldivmod>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	4b3b      	ldr	r3, [pc, #236]	; (8008eb0 <UART_SetConfig+0x2d4>)
 8008dc2:	fba3 2301 	umull	r2, r3, r3, r1
 8008dc6:	095b      	lsrs	r3, r3, #5
 8008dc8:	2264      	movs	r2, #100	; 0x64
 8008dca:	fb02 f303 	mul.w	r3, r2, r3
 8008dce:	1acb      	subs	r3, r1, r3
 8008dd0:	00db      	lsls	r3, r3, #3
 8008dd2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008dd6:	4b36      	ldr	r3, [pc, #216]	; (8008eb0 <UART_SetConfig+0x2d4>)
 8008dd8:	fba3 2302 	umull	r2, r3, r3, r2
 8008ddc:	095b      	lsrs	r3, r3, #5
 8008dde:	005b      	lsls	r3, r3, #1
 8008de0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008de4:	441c      	add	r4, r3
 8008de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dea:	2200      	movs	r2, #0
 8008dec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008df0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008df4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008df8:	4642      	mov	r2, r8
 8008dfa:	464b      	mov	r3, r9
 8008dfc:	1891      	adds	r1, r2, r2
 8008dfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8008e00:	415b      	adcs	r3, r3
 8008e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008e08:	4641      	mov	r1, r8
 8008e0a:	1851      	adds	r1, r2, r1
 8008e0c:	6339      	str	r1, [r7, #48]	; 0x30
 8008e0e:	4649      	mov	r1, r9
 8008e10:	414b      	adcs	r3, r1
 8008e12:	637b      	str	r3, [r7, #52]	; 0x34
 8008e14:	f04f 0200 	mov.w	r2, #0
 8008e18:	f04f 0300 	mov.w	r3, #0
 8008e1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008e20:	4659      	mov	r1, fp
 8008e22:	00cb      	lsls	r3, r1, #3
 8008e24:	4651      	mov	r1, sl
 8008e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e2a:	4651      	mov	r1, sl
 8008e2c:	00ca      	lsls	r2, r1, #3
 8008e2e:	4610      	mov	r0, r2
 8008e30:	4619      	mov	r1, r3
 8008e32:	4603      	mov	r3, r0
 8008e34:	4642      	mov	r2, r8
 8008e36:	189b      	adds	r3, r3, r2
 8008e38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e3c:	464b      	mov	r3, r9
 8008e3e:	460a      	mov	r2, r1
 8008e40:	eb42 0303 	adc.w	r3, r2, r3
 8008e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008e58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	18db      	adds	r3, r3, r3
 8008e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e62:	4613      	mov	r3, r2
 8008e64:	eb42 0303 	adc.w	r3, r2, r3
 8008e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008e72:	f7f7 ff09 	bl	8000c88 <__aeabi_uldivmod>
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4b0d      	ldr	r3, [pc, #52]	; (8008eb0 <UART_SetConfig+0x2d4>)
 8008e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e80:	095b      	lsrs	r3, r3, #5
 8008e82:	2164      	movs	r1, #100	; 0x64
 8008e84:	fb01 f303 	mul.w	r3, r1, r3
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	00db      	lsls	r3, r3, #3
 8008e8c:	3332      	adds	r3, #50	; 0x32
 8008e8e:	4a08      	ldr	r2, [pc, #32]	; (8008eb0 <UART_SetConfig+0x2d4>)
 8008e90:	fba2 2303 	umull	r2, r3, r2, r3
 8008e94:	095b      	lsrs	r3, r3, #5
 8008e96:	f003 0207 	and.w	r2, r3, #7
 8008e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4422      	add	r2, r4
 8008ea2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ea4:	e105      	b.n	80090b2 <UART_SetConfig+0x4d6>
 8008ea6:	bf00      	nop
 8008ea8:	40011000 	.word	0x40011000
 8008eac:	40011400 	.word	0x40011400
 8008eb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008ebe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008ec2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008ec6:	4642      	mov	r2, r8
 8008ec8:	464b      	mov	r3, r9
 8008eca:	1891      	adds	r1, r2, r2
 8008ecc:	6239      	str	r1, [r7, #32]
 8008ece:	415b      	adcs	r3, r3
 8008ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ed2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ed6:	4641      	mov	r1, r8
 8008ed8:	1854      	adds	r4, r2, r1
 8008eda:	4649      	mov	r1, r9
 8008edc:	eb43 0501 	adc.w	r5, r3, r1
 8008ee0:	f04f 0200 	mov.w	r2, #0
 8008ee4:	f04f 0300 	mov.w	r3, #0
 8008ee8:	00eb      	lsls	r3, r5, #3
 8008eea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008eee:	00e2      	lsls	r2, r4, #3
 8008ef0:	4614      	mov	r4, r2
 8008ef2:	461d      	mov	r5, r3
 8008ef4:	4643      	mov	r3, r8
 8008ef6:	18e3      	adds	r3, r4, r3
 8008ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008efc:	464b      	mov	r3, r9
 8008efe:	eb45 0303 	adc.w	r3, r5, r3
 8008f02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f16:	f04f 0200 	mov.w	r2, #0
 8008f1a:	f04f 0300 	mov.w	r3, #0
 8008f1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008f22:	4629      	mov	r1, r5
 8008f24:	008b      	lsls	r3, r1, #2
 8008f26:	4621      	mov	r1, r4
 8008f28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f2c:	4621      	mov	r1, r4
 8008f2e:	008a      	lsls	r2, r1, #2
 8008f30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008f34:	f7f7 fea8 	bl	8000c88 <__aeabi_uldivmod>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	4b60      	ldr	r3, [pc, #384]	; (80090c0 <UART_SetConfig+0x4e4>)
 8008f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f42:	095b      	lsrs	r3, r3, #5
 8008f44:	011c      	lsls	r4, r3, #4
 8008f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008f58:	4642      	mov	r2, r8
 8008f5a:	464b      	mov	r3, r9
 8008f5c:	1891      	adds	r1, r2, r2
 8008f5e:	61b9      	str	r1, [r7, #24]
 8008f60:	415b      	adcs	r3, r3
 8008f62:	61fb      	str	r3, [r7, #28]
 8008f64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f68:	4641      	mov	r1, r8
 8008f6a:	1851      	adds	r1, r2, r1
 8008f6c:	6139      	str	r1, [r7, #16]
 8008f6e:	4649      	mov	r1, r9
 8008f70:	414b      	adcs	r3, r1
 8008f72:	617b      	str	r3, [r7, #20]
 8008f74:	f04f 0200 	mov.w	r2, #0
 8008f78:	f04f 0300 	mov.w	r3, #0
 8008f7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f80:	4659      	mov	r1, fp
 8008f82:	00cb      	lsls	r3, r1, #3
 8008f84:	4651      	mov	r1, sl
 8008f86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f8a:	4651      	mov	r1, sl
 8008f8c:	00ca      	lsls	r2, r1, #3
 8008f8e:	4610      	mov	r0, r2
 8008f90:	4619      	mov	r1, r3
 8008f92:	4603      	mov	r3, r0
 8008f94:	4642      	mov	r2, r8
 8008f96:	189b      	adds	r3, r3, r2
 8008f98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f9c:	464b      	mov	r3, r9
 8008f9e:	460a      	mov	r2, r1
 8008fa0:	eb42 0303 	adc.w	r3, r2, r3
 8008fa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008fb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008fb4:	f04f 0200 	mov.w	r2, #0
 8008fb8:	f04f 0300 	mov.w	r3, #0
 8008fbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008fc0:	4649      	mov	r1, r9
 8008fc2:	008b      	lsls	r3, r1, #2
 8008fc4:	4641      	mov	r1, r8
 8008fc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fca:	4641      	mov	r1, r8
 8008fcc:	008a      	lsls	r2, r1, #2
 8008fce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008fd2:	f7f7 fe59 	bl	8000c88 <__aeabi_uldivmod>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4b39      	ldr	r3, [pc, #228]	; (80090c0 <UART_SetConfig+0x4e4>)
 8008fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8008fe0:	095b      	lsrs	r3, r3, #5
 8008fe2:	2164      	movs	r1, #100	; 0x64
 8008fe4:	fb01 f303 	mul.w	r3, r1, r3
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	011b      	lsls	r3, r3, #4
 8008fec:	3332      	adds	r3, #50	; 0x32
 8008fee:	4a34      	ldr	r2, [pc, #208]	; (80090c0 <UART_SetConfig+0x4e4>)
 8008ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff4:	095b      	lsrs	r3, r3, #5
 8008ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ffa:	441c      	add	r4, r3
 8008ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009000:	2200      	movs	r2, #0
 8009002:	673b      	str	r3, [r7, #112]	; 0x70
 8009004:	677a      	str	r2, [r7, #116]	; 0x74
 8009006:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800900a:	4642      	mov	r2, r8
 800900c:	464b      	mov	r3, r9
 800900e:	1891      	adds	r1, r2, r2
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	415b      	adcs	r3, r3
 8009014:	60fb      	str	r3, [r7, #12]
 8009016:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800901a:	4641      	mov	r1, r8
 800901c:	1851      	adds	r1, r2, r1
 800901e:	6039      	str	r1, [r7, #0]
 8009020:	4649      	mov	r1, r9
 8009022:	414b      	adcs	r3, r1
 8009024:	607b      	str	r3, [r7, #4]
 8009026:	f04f 0200 	mov.w	r2, #0
 800902a:	f04f 0300 	mov.w	r3, #0
 800902e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009032:	4659      	mov	r1, fp
 8009034:	00cb      	lsls	r3, r1, #3
 8009036:	4651      	mov	r1, sl
 8009038:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800903c:	4651      	mov	r1, sl
 800903e:	00ca      	lsls	r2, r1, #3
 8009040:	4610      	mov	r0, r2
 8009042:	4619      	mov	r1, r3
 8009044:	4603      	mov	r3, r0
 8009046:	4642      	mov	r2, r8
 8009048:	189b      	adds	r3, r3, r2
 800904a:	66bb      	str	r3, [r7, #104]	; 0x68
 800904c:	464b      	mov	r3, r9
 800904e:	460a      	mov	r2, r1
 8009050:	eb42 0303 	adc.w	r3, r2, r3
 8009054:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	663b      	str	r3, [r7, #96]	; 0x60
 8009060:	667a      	str	r2, [r7, #100]	; 0x64
 8009062:	f04f 0200 	mov.w	r2, #0
 8009066:	f04f 0300 	mov.w	r3, #0
 800906a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800906e:	4649      	mov	r1, r9
 8009070:	008b      	lsls	r3, r1, #2
 8009072:	4641      	mov	r1, r8
 8009074:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009078:	4641      	mov	r1, r8
 800907a:	008a      	lsls	r2, r1, #2
 800907c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009080:	f7f7 fe02 	bl	8000c88 <__aeabi_uldivmod>
 8009084:	4602      	mov	r2, r0
 8009086:	460b      	mov	r3, r1
 8009088:	4b0d      	ldr	r3, [pc, #52]	; (80090c0 <UART_SetConfig+0x4e4>)
 800908a:	fba3 1302 	umull	r1, r3, r3, r2
 800908e:	095b      	lsrs	r3, r3, #5
 8009090:	2164      	movs	r1, #100	; 0x64
 8009092:	fb01 f303 	mul.w	r3, r1, r3
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	011b      	lsls	r3, r3, #4
 800909a:	3332      	adds	r3, #50	; 0x32
 800909c:	4a08      	ldr	r2, [pc, #32]	; (80090c0 <UART_SetConfig+0x4e4>)
 800909e:	fba2 2303 	umull	r2, r3, r2, r3
 80090a2:	095b      	lsrs	r3, r3, #5
 80090a4:	f003 020f 	and.w	r2, r3, #15
 80090a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4422      	add	r2, r4
 80090b0:	609a      	str	r2, [r3, #8]
}
 80090b2:	bf00      	nop
 80090b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80090b8:	46bd      	mov	sp, r7
 80090ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090be:	bf00      	nop
 80090c0:	51eb851f 	.word	0x51eb851f

080090c4 <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b088      	sub	sp, #32
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	4603      	mov	r3, r0
 80090cc:	71fb      	strb	r3, [r7, #7]
 80090ce:	460b      	mov	r3, r1
 80090d0:	71bb      	strb	r3, [r7, #6]
 80090d2:	4613      	mov	r3, r2
 80090d4:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 80090d6:	797b      	ldrb	r3, [r7, #5]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d901      	bls.n	80090e0 <tmc_fillCRC8Table+0x1c>
		return 0;
 80090dc:	2300      	movs	r3, #0
 80090de:	e09e      	b.n	800921e <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 80090e0:	797a      	ldrb	r2, [r7, #5]
 80090e2:	4951      	ldr	r1, [pc, #324]	; (8009228 <tmc_fillCRC8Table+0x164>)
 80090e4:	4613      	mov	r3, r2
 80090e6:	01db      	lsls	r3, r3, #7
 80090e8:	4413      	add	r3, r2
 80090ea:	005b      	lsls	r3, r3, #1
 80090ec:	440b      	add	r3, r1
 80090ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80090f2:	79fa      	ldrb	r2, [r7, #7]
 80090f4:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 80090f6:	797a      	ldrb	r2, [r7, #5]
 80090f8:	494b      	ldr	r1, [pc, #300]	; (8009228 <tmc_fillCRC8Table+0x164>)
 80090fa:	4613      	mov	r3, r2
 80090fc:	01db      	lsls	r3, r3, #7
 80090fe:	4413      	add	r3, r2
 8009100:	005b      	lsls	r3, r3, #1
 8009102:	440b      	add	r3, r1
 8009104:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009108:	79ba      	ldrb	r2, [r7, #6]
 800910a:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 800910c:	797a      	ldrb	r2, [r7, #5]
 800910e:	4613      	mov	r3, r2
 8009110:	01db      	lsls	r3, r3, #7
 8009112:	4413      	add	r3, r2
 8009114:	005b      	lsls	r3, r3, #1
 8009116:	4a44      	ldr	r2, [pc, #272]	; (8009228 <tmc_fillCRC8Table+0x164>)
 8009118:	4413      	add	r3, r2
 800911a:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 800911c:	79fb      	ldrb	r3, [r7, #7]
 800911e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009122:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8009124:	4b41      	ldr	r3, [pc, #260]	; (800922c <tmc_fillCRC8Table+0x168>)
 8009126:	617b      	str	r3, [r7, #20]
 8009128:	e074      	b.n	8009214 <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 800912a:	79bb      	ldrb	r3, [r7, #6]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d004      	beq.n	800913a <tmc_fillCRC8Table+0x76>
 8009130:	6978      	ldr	r0, [r7, #20]
 8009132:	f000 f87f 	bl	8009234 <flipBitsInBytes>
 8009136:	4603      	mov	r3, r0
 8009138:	e000      	b.n	800913c <tmc_fillCRC8Table+0x78>
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 800913e:	2300      	movs	r3, #0
 8009140:	613b      	str	r3, [r7, #16]
 8009142:	e035      	b.n	80091b0 <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	0fdb      	lsrs	r3, r3, #31
 8009148:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	005b      	lsls	r3, r3, #1
 800914e:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009156:	2b00      	cmp	r3, #0
 8009158:	d001      	beq.n	800915e <tmc_fillCRC8Table+0x9a>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	e000      	b.n	8009160 <tmc_fillCRC8Table+0x9c>
 800915e:	2300      	movs	r3, #0
 8009160:	69fa      	ldr	r2, [r7, #28]
 8009162:	4053      	eors	r3, r2
 8009164:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d002      	beq.n	8009176 <tmc_fillCRC8Table+0xb2>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	021b      	lsls	r3, r3, #8
 8009174:	e000      	b.n	8009178 <tmc_fillCRC8Table+0xb4>
 8009176:	2300      	movs	r3, #0
 8009178:	69fa      	ldr	r2, [r7, #28]
 800917a:	4053      	eors	r3, r2
 800917c:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009184:	2b00      	cmp	r3, #0
 8009186:	d002      	beq.n	800918e <tmc_fillCRC8Table+0xca>
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	041b      	lsls	r3, r3, #16
 800918c:	e000      	b.n	8009190 <tmc_fillCRC8Table+0xcc>
 800918e:	2300      	movs	r3, #0
 8009190:	69fa      	ldr	r2, [r7, #28]
 8009192:	4053      	eors	r3, r2
 8009194:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 8009196:	7afb      	ldrb	r3, [r7, #11]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d002      	beq.n	80091a2 <tmc_fillCRC8Table+0xde>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	061b      	lsls	r3, r3, #24
 80091a0:	e000      	b.n	80091a4 <tmc_fillCRC8Table+0xe0>
 80091a2:	2300      	movs	r3, #0
 80091a4:	69fa      	ldr	r2, [r7, #28]
 80091a6:	4053      	eors	r3, r2
 80091a8:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	3301      	adds	r3, #1
 80091ae:	613b      	str	r3, [r7, #16]
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	2b07      	cmp	r3, #7
 80091b4:	ddc6      	ble.n	8009144 <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 80091b6:	79bb      	ldrb	r3, [r7, #6]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d004      	beq.n	80091c6 <tmc_fillCRC8Table+0x102>
 80091bc:	69f8      	ldr	r0, [r7, #28]
 80091be:	f000 f839 	bl	8009234 <flipBitsInBytes>
 80091c2:	4603      	mov	r3, r0
 80091c4:	e000      	b.n	80091c8 <tmc_fillCRC8Table+0x104>
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	1c5a      	adds	r2, r3, #1
 80091ce:	61ba      	str	r2, [r7, #24]
 80091d0:	69fa      	ldr	r2, [r7, #28]
 80091d2:	b2d2      	uxtb	r2, r2
 80091d4:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	0a1b      	lsrs	r3, r3, #8
 80091da:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	1c5a      	adds	r2, r3, #1
 80091e0:	61ba      	str	r2, [r7, #24]
 80091e2:	69fa      	ldr	r2, [r7, #28]
 80091e4:	b2d2      	uxtb	r2, r2
 80091e6:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	0a1b      	lsrs	r3, r3, #8
 80091ec:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	1c5a      	adds	r2, r3, #1
 80091f2:	61ba      	str	r2, [r7, #24]
 80091f4:	69fa      	ldr	r2, [r7, #28]
 80091f6:	b2d2      	uxtb	r2, r2
 80091f8:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	0a1b      	lsrs	r3, r3, #8
 80091fe:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	1c5a      	adds	r2, r3, #1
 8009204:	61ba      	str	r2, [r7, #24]
 8009206:	69fa      	ldr	r2, [r7, #28]
 8009208:	b2d2      	uxtb	r2, r2
 800920a:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 8009212:	617b      	str	r3, [r7, #20]
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	4a06      	ldr	r2, [pc, #24]	; (8009230 <tmc_fillCRC8Table+0x16c>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d186      	bne.n	800912a <tmc_fillCRC8Table+0x66>
	}

	return 1;
 800921c:	2301      	movs	r3, #1
}
 800921e:	4618      	mov	r0, r3
 8009220:	3720      	adds	r7, #32
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	20000a10 	.word	0x20000a10
 800922c:	03020100 	.word	0x03020100
 8009230:	04030200 	.word	0x04030200

08009234 <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	085b      	lsrs	r3, r3, #1
 8009240:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	005b      	lsls	r3, r3, #1
 8009248:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800924c:	4313      	orrs	r3, r2
 800924e:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	089b      	lsrs	r3, r3, #2
 8009254:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 8009260:	4313      	orrs	r3, r2
 8009262:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	091b      	lsrs	r3, r3, #4
 8009268:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	011b      	lsls	r3, r3, #4
 8009270:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8009274:	4313      	orrs	r3, r2
 8009276:	607b      	str	r3, [r7, #4]

	return value;
 8009278:	687b      	ldr	r3, [r7, #4]
}
 800927a:	4618      	mov	r0, r3
 800927c:	370c      	adds	r7, #12
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
	...

08009288 <tmc2209_init>:

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
}

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 8009288:	b480      	push	{r7}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	607b      	str	r3, [r7, #4]
 8009292:	460b      	mov	r3, r1
 8009294:	72fb      	strb	r3, [r7, #11]
 8009296:	4613      	mov	r3, r2
 8009298:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	7aba      	ldrb	r2, [r7, #10]
 800929e:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	7afa      	ldrb	r2, [r7, #11]
 80092b8:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2200      	movs	r2, #0
 80092c2:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2200      	movs	r2, #0
 80092ca:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80092cc:	2300      	movs	r3, #0
 80092ce:	617b      	str	r3, [r7, #20]
 80092d0:	e017      	b.n	8009302 <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 80092d2:	4a11      	ldr	r2, [pc, #68]	; (8009318 <tmc2209_init+0x90>)
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	4413      	add	r3, r2
 80092d8:	7819      	ldrb	r1, [r3, #0]
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	4413      	add	r3, r2
 80092e0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80092e4:	460a      	mov	r2, r1
 80092e6:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	6a3a      	ldr	r2, [r7, #32]
 80092ee:	4413      	add	r3, r2
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	68f9      	ldr	r1, [r7, #12]
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	440b      	add	r3, r1
 80092fa:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	3301      	adds	r3, #1
 8009300:	617b      	str	r3, [r7, #20]
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	2b7f      	cmp	r3, #127	; 0x7f
 8009306:	d9e4      	bls.n	80092d2 <tmc2209_init+0x4a>
	}
}
 8009308:	bf00      	nop
 800930a:	bf00      	nop
 800930c:	371c      	adds	r7, #28
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	0800e324 	.word	0x0800e324

0800931c <tmc2209_reset>:
{
	tmc2209->config->callback = (tmc_callback_config) callback;
}

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d001      	beq.n	8009332 <tmc2209_reset+0x16>
		return false;
 800932e:	2300      	movs	r3, #0
 8009330:	e028      	b.n	8009384 <tmc2209_reset+0x68>

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8009332:	2300      	movs	r3, #0
 8009334:	60fb      	str	r3, [r7, #12]
 8009336:	e019      	b.n	800936c <tmc2209_reset+0x50>
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	4413      	add	r3, r2
 800933e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	f023 0308 	bic.w	r3, r3, #8
 8009348:	b2d9      	uxtb	r1, r3
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	4413      	add	r3, r2
 8009350:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009354:	460a      	mov	r2, r1
 8009356:	701a      	strb	r2, [r3, #0]
		tmc2209->config->shadowRegister[i] = 0;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	2200      	movs	r2, #0
 8009364:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	3301      	adds	r3, #1
 800936a:	60fb      	str	r3, [r7, #12]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2b7f      	cmp	r3, #127	; 0x7f
 8009370:	d9e2      	bls.n	8009338 <tmc2209_reset+0x1c>
	}

	tmc2209->config->state        = CONFIG_RESET;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2201      	movs	r2, #1
 8009378:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2200      	movs	r2, #0
 8009380:	705a      	strb	r2, [r3, #1]

	return true;
 8009382:	2301      	movs	r3, #1
}
 8009384:	4618      	mov	r0, r3
 8009386:	3714      	adds	r7, #20
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <tmc2209_restore+0x16>
		return false;
 80093a2:	2300      	movs	r3, #0
 80093a4:	e008      	b.n	80093b8 <tmc2209_restore+0x28>

	tmc2209->config->state        = CONFIG_RESTORE;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2202      	movs	r2, #2
 80093ac:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2200      	movs	r2, #0
 80093b4:	705a      	strb	r2, [r3, #1]

	return true;
 80093b6:	2301      	movs	r3, #1
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <__errno>:
 80093c4:	4b01      	ldr	r3, [pc, #4]	; (80093cc <__errno+0x8>)
 80093c6:	6818      	ldr	r0, [r3, #0]
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	20000018 	.word	0x20000018

080093d0 <__libc_init_array>:
 80093d0:	b570      	push	{r4, r5, r6, lr}
 80093d2:	4d0d      	ldr	r5, [pc, #52]	; (8009408 <__libc_init_array+0x38>)
 80093d4:	4c0d      	ldr	r4, [pc, #52]	; (800940c <__libc_init_array+0x3c>)
 80093d6:	1b64      	subs	r4, r4, r5
 80093d8:	10a4      	asrs	r4, r4, #2
 80093da:	2600      	movs	r6, #0
 80093dc:	42a6      	cmp	r6, r4
 80093de:	d109      	bne.n	80093f4 <__libc_init_array+0x24>
 80093e0:	4d0b      	ldr	r5, [pc, #44]	; (8009410 <__libc_init_array+0x40>)
 80093e2:	4c0c      	ldr	r4, [pc, #48]	; (8009414 <__libc_init_array+0x44>)
 80093e4:	f004 fc96 	bl	800dd14 <_init>
 80093e8:	1b64      	subs	r4, r4, r5
 80093ea:	10a4      	asrs	r4, r4, #2
 80093ec:	2600      	movs	r6, #0
 80093ee:	42a6      	cmp	r6, r4
 80093f0:	d105      	bne.n	80093fe <__libc_init_array+0x2e>
 80093f2:	bd70      	pop	{r4, r5, r6, pc}
 80093f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80093f8:	4798      	blx	r3
 80093fa:	3601      	adds	r6, #1
 80093fc:	e7ee      	b.n	80093dc <__libc_init_array+0xc>
 80093fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009402:	4798      	blx	r3
 8009404:	3601      	adds	r6, #1
 8009406:	e7f2      	b.n	80093ee <__libc_init_array+0x1e>
 8009408:	0800e9d0 	.word	0x0800e9d0
 800940c:	0800e9d0 	.word	0x0800e9d0
 8009410:	0800e9d0 	.word	0x0800e9d0
 8009414:	0800e9d4 	.word	0x0800e9d4

08009418 <memset>:
 8009418:	4402      	add	r2, r0
 800941a:	4603      	mov	r3, r0
 800941c:	4293      	cmp	r3, r2
 800941e:	d100      	bne.n	8009422 <memset+0xa>
 8009420:	4770      	bx	lr
 8009422:	f803 1b01 	strb.w	r1, [r3], #1
 8009426:	e7f9      	b.n	800941c <memset+0x4>

08009428 <__cvt>:
 8009428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800942c:	ec55 4b10 	vmov	r4, r5, d0
 8009430:	2d00      	cmp	r5, #0
 8009432:	460e      	mov	r6, r1
 8009434:	4619      	mov	r1, r3
 8009436:	462b      	mov	r3, r5
 8009438:	bfbb      	ittet	lt
 800943a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800943e:	461d      	movlt	r5, r3
 8009440:	2300      	movge	r3, #0
 8009442:	232d      	movlt	r3, #45	; 0x2d
 8009444:	700b      	strb	r3, [r1, #0]
 8009446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009448:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800944c:	4691      	mov	r9, r2
 800944e:	f023 0820 	bic.w	r8, r3, #32
 8009452:	bfbc      	itt	lt
 8009454:	4622      	movlt	r2, r4
 8009456:	4614      	movlt	r4, r2
 8009458:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800945c:	d005      	beq.n	800946a <__cvt+0x42>
 800945e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009462:	d100      	bne.n	8009466 <__cvt+0x3e>
 8009464:	3601      	adds	r6, #1
 8009466:	2102      	movs	r1, #2
 8009468:	e000      	b.n	800946c <__cvt+0x44>
 800946a:	2103      	movs	r1, #3
 800946c:	ab03      	add	r3, sp, #12
 800946e:	9301      	str	r3, [sp, #4]
 8009470:	ab02      	add	r3, sp, #8
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	ec45 4b10 	vmov	d0, r4, r5
 8009478:	4653      	mov	r3, sl
 800947a:	4632      	mov	r2, r6
 800947c:	f000 fe18 	bl	800a0b0 <_dtoa_r>
 8009480:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009484:	4607      	mov	r7, r0
 8009486:	d102      	bne.n	800948e <__cvt+0x66>
 8009488:	f019 0f01 	tst.w	r9, #1
 800948c:	d022      	beq.n	80094d4 <__cvt+0xac>
 800948e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009492:	eb07 0906 	add.w	r9, r7, r6
 8009496:	d110      	bne.n	80094ba <__cvt+0x92>
 8009498:	783b      	ldrb	r3, [r7, #0]
 800949a:	2b30      	cmp	r3, #48	; 0x30
 800949c:	d10a      	bne.n	80094b4 <__cvt+0x8c>
 800949e:	2200      	movs	r2, #0
 80094a0:	2300      	movs	r3, #0
 80094a2:	4620      	mov	r0, r4
 80094a4:	4629      	mov	r1, r5
 80094a6:	f7f7 fb2f 	bl	8000b08 <__aeabi_dcmpeq>
 80094aa:	b918      	cbnz	r0, 80094b4 <__cvt+0x8c>
 80094ac:	f1c6 0601 	rsb	r6, r6, #1
 80094b0:	f8ca 6000 	str.w	r6, [sl]
 80094b4:	f8da 3000 	ldr.w	r3, [sl]
 80094b8:	4499      	add	r9, r3
 80094ba:	2200      	movs	r2, #0
 80094bc:	2300      	movs	r3, #0
 80094be:	4620      	mov	r0, r4
 80094c0:	4629      	mov	r1, r5
 80094c2:	f7f7 fb21 	bl	8000b08 <__aeabi_dcmpeq>
 80094c6:	b108      	cbz	r0, 80094cc <__cvt+0xa4>
 80094c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80094cc:	2230      	movs	r2, #48	; 0x30
 80094ce:	9b03      	ldr	r3, [sp, #12]
 80094d0:	454b      	cmp	r3, r9
 80094d2:	d307      	bcc.n	80094e4 <__cvt+0xbc>
 80094d4:	9b03      	ldr	r3, [sp, #12]
 80094d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094d8:	1bdb      	subs	r3, r3, r7
 80094da:	4638      	mov	r0, r7
 80094dc:	6013      	str	r3, [r2, #0]
 80094de:	b004      	add	sp, #16
 80094e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e4:	1c59      	adds	r1, r3, #1
 80094e6:	9103      	str	r1, [sp, #12]
 80094e8:	701a      	strb	r2, [r3, #0]
 80094ea:	e7f0      	b.n	80094ce <__cvt+0xa6>

080094ec <__exponent>:
 80094ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094ee:	4603      	mov	r3, r0
 80094f0:	2900      	cmp	r1, #0
 80094f2:	bfb8      	it	lt
 80094f4:	4249      	neglt	r1, r1
 80094f6:	f803 2b02 	strb.w	r2, [r3], #2
 80094fa:	bfb4      	ite	lt
 80094fc:	222d      	movlt	r2, #45	; 0x2d
 80094fe:	222b      	movge	r2, #43	; 0x2b
 8009500:	2909      	cmp	r1, #9
 8009502:	7042      	strb	r2, [r0, #1]
 8009504:	dd2a      	ble.n	800955c <__exponent+0x70>
 8009506:	f10d 0407 	add.w	r4, sp, #7
 800950a:	46a4      	mov	ip, r4
 800950c:	270a      	movs	r7, #10
 800950e:	46a6      	mov	lr, r4
 8009510:	460a      	mov	r2, r1
 8009512:	fb91 f6f7 	sdiv	r6, r1, r7
 8009516:	fb07 1516 	mls	r5, r7, r6, r1
 800951a:	3530      	adds	r5, #48	; 0x30
 800951c:	2a63      	cmp	r2, #99	; 0x63
 800951e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009522:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009526:	4631      	mov	r1, r6
 8009528:	dcf1      	bgt.n	800950e <__exponent+0x22>
 800952a:	3130      	adds	r1, #48	; 0x30
 800952c:	f1ae 0502 	sub.w	r5, lr, #2
 8009530:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009534:	1c44      	adds	r4, r0, #1
 8009536:	4629      	mov	r1, r5
 8009538:	4561      	cmp	r1, ip
 800953a:	d30a      	bcc.n	8009552 <__exponent+0x66>
 800953c:	f10d 0209 	add.w	r2, sp, #9
 8009540:	eba2 020e 	sub.w	r2, r2, lr
 8009544:	4565      	cmp	r5, ip
 8009546:	bf88      	it	hi
 8009548:	2200      	movhi	r2, #0
 800954a:	4413      	add	r3, r2
 800954c:	1a18      	subs	r0, r3, r0
 800954e:	b003      	add	sp, #12
 8009550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009556:	f804 2f01 	strb.w	r2, [r4, #1]!
 800955a:	e7ed      	b.n	8009538 <__exponent+0x4c>
 800955c:	2330      	movs	r3, #48	; 0x30
 800955e:	3130      	adds	r1, #48	; 0x30
 8009560:	7083      	strb	r3, [r0, #2]
 8009562:	70c1      	strb	r1, [r0, #3]
 8009564:	1d03      	adds	r3, r0, #4
 8009566:	e7f1      	b.n	800954c <__exponent+0x60>

08009568 <_printf_float>:
 8009568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800956c:	ed2d 8b02 	vpush	{d8}
 8009570:	b08d      	sub	sp, #52	; 0x34
 8009572:	460c      	mov	r4, r1
 8009574:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009578:	4616      	mov	r6, r2
 800957a:	461f      	mov	r7, r3
 800957c:	4605      	mov	r5, r0
 800957e:	f001 fd3d 	bl	800affc <_localeconv_r>
 8009582:	f8d0 a000 	ldr.w	sl, [r0]
 8009586:	4650      	mov	r0, sl
 8009588:	f7f6 fe42 	bl	8000210 <strlen>
 800958c:	2300      	movs	r3, #0
 800958e:	930a      	str	r3, [sp, #40]	; 0x28
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	9305      	str	r3, [sp, #20]
 8009594:	f8d8 3000 	ldr.w	r3, [r8]
 8009598:	f894 b018 	ldrb.w	fp, [r4, #24]
 800959c:	3307      	adds	r3, #7
 800959e:	f023 0307 	bic.w	r3, r3, #7
 80095a2:	f103 0208 	add.w	r2, r3, #8
 80095a6:	f8c8 2000 	str.w	r2, [r8]
 80095aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80095b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80095b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80095ba:	9307      	str	r3, [sp, #28]
 80095bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80095c0:	ee08 0a10 	vmov	s16, r0
 80095c4:	4b9f      	ldr	r3, [pc, #636]	; (8009844 <_printf_float+0x2dc>)
 80095c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095ce:	f7f7 facd 	bl	8000b6c <__aeabi_dcmpun>
 80095d2:	bb88      	cbnz	r0, 8009638 <_printf_float+0xd0>
 80095d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095d8:	4b9a      	ldr	r3, [pc, #616]	; (8009844 <_printf_float+0x2dc>)
 80095da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095de:	f7f7 faa7 	bl	8000b30 <__aeabi_dcmple>
 80095e2:	bb48      	cbnz	r0, 8009638 <_printf_float+0xd0>
 80095e4:	2200      	movs	r2, #0
 80095e6:	2300      	movs	r3, #0
 80095e8:	4640      	mov	r0, r8
 80095ea:	4649      	mov	r1, r9
 80095ec:	f7f7 fa96 	bl	8000b1c <__aeabi_dcmplt>
 80095f0:	b110      	cbz	r0, 80095f8 <_printf_float+0x90>
 80095f2:	232d      	movs	r3, #45	; 0x2d
 80095f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095f8:	4b93      	ldr	r3, [pc, #588]	; (8009848 <_printf_float+0x2e0>)
 80095fa:	4894      	ldr	r0, [pc, #592]	; (800984c <_printf_float+0x2e4>)
 80095fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009600:	bf94      	ite	ls
 8009602:	4698      	movls	r8, r3
 8009604:	4680      	movhi	r8, r0
 8009606:	2303      	movs	r3, #3
 8009608:	6123      	str	r3, [r4, #16]
 800960a:	9b05      	ldr	r3, [sp, #20]
 800960c:	f023 0204 	bic.w	r2, r3, #4
 8009610:	6022      	str	r2, [r4, #0]
 8009612:	f04f 0900 	mov.w	r9, #0
 8009616:	9700      	str	r7, [sp, #0]
 8009618:	4633      	mov	r3, r6
 800961a:	aa0b      	add	r2, sp, #44	; 0x2c
 800961c:	4621      	mov	r1, r4
 800961e:	4628      	mov	r0, r5
 8009620:	f000 f9d8 	bl	80099d4 <_printf_common>
 8009624:	3001      	adds	r0, #1
 8009626:	f040 8090 	bne.w	800974a <_printf_float+0x1e2>
 800962a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800962e:	b00d      	add	sp, #52	; 0x34
 8009630:	ecbd 8b02 	vpop	{d8}
 8009634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009638:	4642      	mov	r2, r8
 800963a:	464b      	mov	r3, r9
 800963c:	4640      	mov	r0, r8
 800963e:	4649      	mov	r1, r9
 8009640:	f7f7 fa94 	bl	8000b6c <__aeabi_dcmpun>
 8009644:	b140      	cbz	r0, 8009658 <_printf_float+0xf0>
 8009646:	464b      	mov	r3, r9
 8009648:	2b00      	cmp	r3, #0
 800964a:	bfbc      	itt	lt
 800964c:	232d      	movlt	r3, #45	; 0x2d
 800964e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009652:	487f      	ldr	r0, [pc, #508]	; (8009850 <_printf_float+0x2e8>)
 8009654:	4b7f      	ldr	r3, [pc, #508]	; (8009854 <_printf_float+0x2ec>)
 8009656:	e7d1      	b.n	80095fc <_printf_float+0x94>
 8009658:	6863      	ldr	r3, [r4, #4]
 800965a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800965e:	9206      	str	r2, [sp, #24]
 8009660:	1c5a      	adds	r2, r3, #1
 8009662:	d13f      	bne.n	80096e4 <_printf_float+0x17c>
 8009664:	2306      	movs	r3, #6
 8009666:	6063      	str	r3, [r4, #4]
 8009668:	9b05      	ldr	r3, [sp, #20]
 800966a:	6861      	ldr	r1, [r4, #4]
 800966c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009670:	2300      	movs	r3, #0
 8009672:	9303      	str	r3, [sp, #12]
 8009674:	ab0a      	add	r3, sp, #40	; 0x28
 8009676:	e9cd b301 	strd	fp, r3, [sp, #4]
 800967a:	ab09      	add	r3, sp, #36	; 0x24
 800967c:	ec49 8b10 	vmov	d0, r8, r9
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	6022      	str	r2, [r4, #0]
 8009684:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009688:	4628      	mov	r0, r5
 800968a:	f7ff fecd 	bl	8009428 <__cvt>
 800968e:	9b06      	ldr	r3, [sp, #24]
 8009690:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009692:	2b47      	cmp	r3, #71	; 0x47
 8009694:	4680      	mov	r8, r0
 8009696:	d108      	bne.n	80096aa <_printf_float+0x142>
 8009698:	1cc8      	adds	r0, r1, #3
 800969a:	db02      	blt.n	80096a2 <_printf_float+0x13a>
 800969c:	6863      	ldr	r3, [r4, #4]
 800969e:	4299      	cmp	r1, r3
 80096a0:	dd41      	ble.n	8009726 <_printf_float+0x1be>
 80096a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80096a6:	fa5f fb8b 	uxtb.w	fp, fp
 80096aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80096ae:	d820      	bhi.n	80096f2 <_printf_float+0x18a>
 80096b0:	3901      	subs	r1, #1
 80096b2:	465a      	mov	r2, fp
 80096b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80096b8:	9109      	str	r1, [sp, #36]	; 0x24
 80096ba:	f7ff ff17 	bl	80094ec <__exponent>
 80096be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096c0:	1813      	adds	r3, r2, r0
 80096c2:	2a01      	cmp	r2, #1
 80096c4:	4681      	mov	r9, r0
 80096c6:	6123      	str	r3, [r4, #16]
 80096c8:	dc02      	bgt.n	80096d0 <_printf_float+0x168>
 80096ca:	6822      	ldr	r2, [r4, #0]
 80096cc:	07d2      	lsls	r2, r2, #31
 80096ce:	d501      	bpl.n	80096d4 <_printf_float+0x16c>
 80096d0:	3301      	adds	r3, #1
 80096d2:	6123      	str	r3, [r4, #16]
 80096d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d09c      	beq.n	8009616 <_printf_float+0xae>
 80096dc:	232d      	movs	r3, #45	; 0x2d
 80096de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096e2:	e798      	b.n	8009616 <_printf_float+0xae>
 80096e4:	9a06      	ldr	r2, [sp, #24]
 80096e6:	2a47      	cmp	r2, #71	; 0x47
 80096e8:	d1be      	bne.n	8009668 <_printf_float+0x100>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1bc      	bne.n	8009668 <_printf_float+0x100>
 80096ee:	2301      	movs	r3, #1
 80096f0:	e7b9      	b.n	8009666 <_printf_float+0xfe>
 80096f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80096f6:	d118      	bne.n	800972a <_printf_float+0x1c2>
 80096f8:	2900      	cmp	r1, #0
 80096fa:	6863      	ldr	r3, [r4, #4]
 80096fc:	dd0b      	ble.n	8009716 <_printf_float+0x1ae>
 80096fe:	6121      	str	r1, [r4, #16]
 8009700:	b913      	cbnz	r3, 8009708 <_printf_float+0x1a0>
 8009702:	6822      	ldr	r2, [r4, #0]
 8009704:	07d0      	lsls	r0, r2, #31
 8009706:	d502      	bpl.n	800970e <_printf_float+0x1a6>
 8009708:	3301      	adds	r3, #1
 800970a:	440b      	add	r3, r1
 800970c:	6123      	str	r3, [r4, #16]
 800970e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009710:	f04f 0900 	mov.w	r9, #0
 8009714:	e7de      	b.n	80096d4 <_printf_float+0x16c>
 8009716:	b913      	cbnz	r3, 800971e <_printf_float+0x1b6>
 8009718:	6822      	ldr	r2, [r4, #0]
 800971a:	07d2      	lsls	r2, r2, #31
 800971c:	d501      	bpl.n	8009722 <_printf_float+0x1ba>
 800971e:	3302      	adds	r3, #2
 8009720:	e7f4      	b.n	800970c <_printf_float+0x1a4>
 8009722:	2301      	movs	r3, #1
 8009724:	e7f2      	b.n	800970c <_printf_float+0x1a4>
 8009726:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800972a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800972c:	4299      	cmp	r1, r3
 800972e:	db05      	blt.n	800973c <_printf_float+0x1d4>
 8009730:	6823      	ldr	r3, [r4, #0]
 8009732:	6121      	str	r1, [r4, #16]
 8009734:	07d8      	lsls	r0, r3, #31
 8009736:	d5ea      	bpl.n	800970e <_printf_float+0x1a6>
 8009738:	1c4b      	adds	r3, r1, #1
 800973a:	e7e7      	b.n	800970c <_printf_float+0x1a4>
 800973c:	2900      	cmp	r1, #0
 800973e:	bfd4      	ite	le
 8009740:	f1c1 0202 	rsble	r2, r1, #2
 8009744:	2201      	movgt	r2, #1
 8009746:	4413      	add	r3, r2
 8009748:	e7e0      	b.n	800970c <_printf_float+0x1a4>
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	055a      	lsls	r2, r3, #21
 800974e:	d407      	bmi.n	8009760 <_printf_float+0x1f8>
 8009750:	6923      	ldr	r3, [r4, #16]
 8009752:	4642      	mov	r2, r8
 8009754:	4631      	mov	r1, r6
 8009756:	4628      	mov	r0, r5
 8009758:	47b8      	blx	r7
 800975a:	3001      	adds	r0, #1
 800975c:	d12c      	bne.n	80097b8 <_printf_float+0x250>
 800975e:	e764      	b.n	800962a <_printf_float+0xc2>
 8009760:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009764:	f240 80e0 	bls.w	8009928 <_printf_float+0x3c0>
 8009768:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800976c:	2200      	movs	r2, #0
 800976e:	2300      	movs	r3, #0
 8009770:	f7f7 f9ca 	bl	8000b08 <__aeabi_dcmpeq>
 8009774:	2800      	cmp	r0, #0
 8009776:	d034      	beq.n	80097e2 <_printf_float+0x27a>
 8009778:	4a37      	ldr	r2, [pc, #220]	; (8009858 <_printf_float+0x2f0>)
 800977a:	2301      	movs	r3, #1
 800977c:	4631      	mov	r1, r6
 800977e:	4628      	mov	r0, r5
 8009780:	47b8      	blx	r7
 8009782:	3001      	adds	r0, #1
 8009784:	f43f af51 	beq.w	800962a <_printf_float+0xc2>
 8009788:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800978c:	429a      	cmp	r2, r3
 800978e:	db02      	blt.n	8009796 <_printf_float+0x22e>
 8009790:	6823      	ldr	r3, [r4, #0]
 8009792:	07d8      	lsls	r0, r3, #31
 8009794:	d510      	bpl.n	80097b8 <_printf_float+0x250>
 8009796:	ee18 3a10 	vmov	r3, s16
 800979a:	4652      	mov	r2, sl
 800979c:	4631      	mov	r1, r6
 800979e:	4628      	mov	r0, r5
 80097a0:	47b8      	blx	r7
 80097a2:	3001      	adds	r0, #1
 80097a4:	f43f af41 	beq.w	800962a <_printf_float+0xc2>
 80097a8:	f04f 0800 	mov.w	r8, #0
 80097ac:	f104 091a 	add.w	r9, r4, #26
 80097b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097b2:	3b01      	subs	r3, #1
 80097b4:	4543      	cmp	r3, r8
 80097b6:	dc09      	bgt.n	80097cc <_printf_float+0x264>
 80097b8:	6823      	ldr	r3, [r4, #0]
 80097ba:	079b      	lsls	r3, r3, #30
 80097bc:	f100 8105 	bmi.w	80099ca <_printf_float+0x462>
 80097c0:	68e0      	ldr	r0, [r4, #12]
 80097c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097c4:	4298      	cmp	r0, r3
 80097c6:	bfb8      	it	lt
 80097c8:	4618      	movlt	r0, r3
 80097ca:	e730      	b.n	800962e <_printf_float+0xc6>
 80097cc:	2301      	movs	r3, #1
 80097ce:	464a      	mov	r2, r9
 80097d0:	4631      	mov	r1, r6
 80097d2:	4628      	mov	r0, r5
 80097d4:	47b8      	blx	r7
 80097d6:	3001      	adds	r0, #1
 80097d8:	f43f af27 	beq.w	800962a <_printf_float+0xc2>
 80097dc:	f108 0801 	add.w	r8, r8, #1
 80097e0:	e7e6      	b.n	80097b0 <_printf_float+0x248>
 80097e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	dc39      	bgt.n	800985c <_printf_float+0x2f4>
 80097e8:	4a1b      	ldr	r2, [pc, #108]	; (8009858 <_printf_float+0x2f0>)
 80097ea:	2301      	movs	r3, #1
 80097ec:	4631      	mov	r1, r6
 80097ee:	4628      	mov	r0, r5
 80097f0:	47b8      	blx	r7
 80097f2:	3001      	adds	r0, #1
 80097f4:	f43f af19 	beq.w	800962a <_printf_float+0xc2>
 80097f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097fc:	4313      	orrs	r3, r2
 80097fe:	d102      	bne.n	8009806 <_printf_float+0x29e>
 8009800:	6823      	ldr	r3, [r4, #0]
 8009802:	07d9      	lsls	r1, r3, #31
 8009804:	d5d8      	bpl.n	80097b8 <_printf_float+0x250>
 8009806:	ee18 3a10 	vmov	r3, s16
 800980a:	4652      	mov	r2, sl
 800980c:	4631      	mov	r1, r6
 800980e:	4628      	mov	r0, r5
 8009810:	47b8      	blx	r7
 8009812:	3001      	adds	r0, #1
 8009814:	f43f af09 	beq.w	800962a <_printf_float+0xc2>
 8009818:	f04f 0900 	mov.w	r9, #0
 800981c:	f104 0a1a 	add.w	sl, r4, #26
 8009820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009822:	425b      	negs	r3, r3
 8009824:	454b      	cmp	r3, r9
 8009826:	dc01      	bgt.n	800982c <_printf_float+0x2c4>
 8009828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800982a:	e792      	b.n	8009752 <_printf_float+0x1ea>
 800982c:	2301      	movs	r3, #1
 800982e:	4652      	mov	r2, sl
 8009830:	4631      	mov	r1, r6
 8009832:	4628      	mov	r0, r5
 8009834:	47b8      	blx	r7
 8009836:	3001      	adds	r0, #1
 8009838:	f43f aef7 	beq.w	800962a <_printf_float+0xc2>
 800983c:	f109 0901 	add.w	r9, r9, #1
 8009840:	e7ee      	b.n	8009820 <_printf_float+0x2b8>
 8009842:	bf00      	nop
 8009844:	7fefffff 	.word	0x7fefffff
 8009848:	0800e3a8 	.word	0x0800e3a8
 800984c:	0800e3ac 	.word	0x0800e3ac
 8009850:	0800e3b4 	.word	0x0800e3b4
 8009854:	0800e3b0 	.word	0x0800e3b0
 8009858:	0800e3b8 	.word	0x0800e3b8
 800985c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800985e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009860:	429a      	cmp	r2, r3
 8009862:	bfa8      	it	ge
 8009864:	461a      	movge	r2, r3
 8009866:	2a00      	cmp	r2, #0
 8009868:	4691      	mov	r9, r2
 800986a:	dc37      	bgt.n	80098dc <_printf_float+0x374>
 800986c:	f04f 0b00 	mov.w	fp, #0
 8009870:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009874:	f104 021a 	add.w	r2, r4, #26
 8009878:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800987a:	9305      	str	r3, [sp, #20]
 800987c:	eba3 0309 	sub.w	r3, r3, r9
 8009880:	455b      	cmp	r3, fp
 8009882:	dc33      	bgt.n	80098ec <_printf_float+0x384>
 8009884:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009888:	429a      	cmp	r2, r3
 800988a:	db3b      	blt.n	8009904 <_printf_float+0x39c>
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	07da      	lsls	r2, r3, #31
 8009890:	d438      	bmi.n	8009904 <_printf_float+0x39c>
 8009892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009894:	9a05      	ldr	r2, [sp, #20]
 8009896:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009898:	1a9a      	subs	r2, r3, r2
 800989a:	eba3 0901 	sub.w	r9, r3, r1
 800989e:	4591      	cmp	r9, r2
 80098a0:	bfa8      	it	ge
 80098a2:	4691      	movge	r9, r2
 80098a4:	f1b9 0f00 	cmp.w	r9, #0
 80098a8:	dc35      	bgt.n	8009916 <_printf_float+0x3ae>
 80098aa:	f04f 0800 	mov.w	r8, #0
 80098ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098b2:	f104 0a1a 	add.w	sl, r4, #26
 80098b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098ba:	1a9b      	subs	r3, r3, r2
 80098bc:	eba3 0309 	sub.w	r3, r3, r9
 80098c0:	4543      	cmp	r3, r8
 80098c2:	f77f af79 	ble.w	80097b8 <_printf_float+0x250>
 80098c6:	2301      	movs	r3, #1
 80098c8:	4652      	mov	r2, sl
 80098ca:	4631      	mov	r1, r6
 80098cc:	4628      	mov	r0, r5
 80098ce:	47b8      	blx	r7
 80098d0:	3001      	adds	r0, #1
 80098d2:	f43f aeaa 	beq.w	800962a <_printf_float+0xc2>
 80098d6:	f108 0801 	add.w	r8, r8, #1
 80098da:	e7ec      	b.n	80098b6 <_printf_float+0x34e>
 80098dc:	4613      	mov	r3, r2
 80098de:	4631      	mov	r1, r6
 80098e0:	4642      	mov	r2, r8
 80098e2:	4628      	mov	r0, r5
 80098e4:	47b8      	blx	r7
 80098e6:	3001      	adds	r0, #1
 80098e8:	d1c0      	bne.n	800986c <_printf_float+0x304>
 80098ea:	e69e      	b.n	800962a <_printf_float+0xc2>
 80098ec:	2301      	movs	r3, #1
 80098ee:	4631      	mov	r1, r6
 80098f0:	4628      	mov	r0, r5
 80098f2:	9205      	str	r2, [sp, #20]
 80098f4:	47b8      	blx	r7
 80098f6:	3001      	adds	r0, #1
 80098f8:	f43f ae97 	beq.w	800962a <_printf_float+0xc2>
 80098fc:	9a05      	ldr	r2, [sp, #20]
 80098fe:	f10b 0b01 	add.w	fp, fp, #1
 8009902:	e7b9      	b.n	8009878 <_printf_float+0x310>
 8009904:	ee18 3a10 	vmov	r3, s16
 8009908:	4652      	mov	r2, sl
 800990a:	4631      	mov	r1, r6
 800990c:	4628      	mov	r0, r5
 800990e:	47b8      	blx	r7
 8009910:	3001      	adds	r0, #1
 8009912:	d1be      	bne.n	8009892 <_printf_float+0x32a>
 8009914:	e689      	b.n	800962a <_printf_float+0xc2>
 8009916:	9a05      	ldr	r2, [sp, #20]
 8009918:	464b      	mov	r3, r9
 800991a:	4442      	add	r2, r8
 800991c:	4631      	mov	r1, r6
 800991e:	4628      	mov	r0, r5
 8009920:	47b8      	blx	r7
 8009922:	3001      	adds	r0, #1
 8009924:	d1c1      	bne.n	80098aa <_printf_float+0x342>
 8009926:	e680      	b.n	800962a <_printf_float+0xc2>
 8009928:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800992a:	2a01      	cmp	r2, #1
 800992c:	dc01      	bgt.n	8009932 <_printf_float+0x3ca>
 800992e:	07db      	lsls	r3, r3, #31
 8009930:	d538      	bpl.n	80099a4 <_printf_float+0x43c>
 8009932:	2301      	movs	r3, #1
 8009934:	4642      	mov	r2, r8
 8009936:	4631      	mov	r1, r6
 8009938:	4628      	mov	r0, r5
 800993a:	47b8      	blx	r7
 800993c:	3001      	adds	r0, #1
 800993e:	f43f ae74 	beq.w	800962a <_printf_float+0xc2>
 8009942:	ee18 3a10 	vmov	r3, s16
 8009946:	4652      	mov	r2, sl
 8009948:	4631      	mov	r1, r6
 800994a:	4628      	mov	r0, r5
 800994c:	47b8      	blx	r7
 800994e:	3001      	adds	r0, #1
 8009950:	f43f ae6b 	beq.w	800962a <_printf_float+0xc2>
 8009954:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009958:	2200      	movs	r2, #0
 800995a:	2300      	movs	r3, #0
 800995c:	f7f7 f8d4 	bl	8000b08 <__aeabi_dcmpeq>
 8009960:	b9d8      	cbnz	r0, 800999a <_printf_float+0x432>
 8009962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009964:	f108 0201 	add.w	r2, r8, #1
 8009968:	3b01      	subs	r3, #1
 800996a:	4631      	mov	r1, r6
 800996c:	4628      	mov	r0, r5
 800996e:	47b8      	blx	r7
 8009970:	3001      	adds	r0, #1
 8009972:	d10e      	bne.n	8009992 <_printf_float+0x42a>
 8009974:	e659      	b.n	800962a <_printf_float+0xc2>
 8009976:	2301      	movs	r3, #1
 8009978:	4652      	mov	r2, sl
 800997a:	4631      	mov	r1, r6
 800997c:	4628      	mov	r0, r5
 800997e:	47b8      	blx	r7
 8009980:	3001      	adds	r0, #1
 8009982:	f43f ae52 	beq.w	800962a <_printf_float+0xc2>
 8009986:	f108 0801 	add.w	r8, r8, #1
 800998a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800998c:	3b01      	subs	r3, #1
 800998e:	4543      	cmp	r3, r8
 8009990:	dcf1      	bgt.n	8009976 <_printf_float+0x40e>
 8009992:	464b      	mov	r3, r9
 8009994:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009998:	e6dc      	b.n	8009754 <_printf_float+0x1ec>
 800999a:	f04f 0800 	mov.w	r8, #0
 800999e:	f104 0a1a 	add.w	sl, r4, #26
 80099a2:	e7f2      	b.n	800998a <_printf_float+0x422>
 80099a4:	2301      	movs	r3, #1
 80099a6:	4642      	mov	r2, r8
 80099a8:	e7df      	b.n	800996a <_printf_float+0x402>
 80099aa:	2301      	movs	r3, #1
 80099ac:	464a      	mov	r2, r9
 80099ae:	4631      	mov	r1, r6
 80099b0:	4628      	mov	r0, r5
 80099b2:	47b8      	blx	r7
 80099b4:	3001      	adds	r0, #1
 80099b6:	f43f ae38 	beq.w	800962a <_printf_float+0xc2>
 80099ba:	f108 0801 	add.w	r8, r8, #1
 80099be:	68e3      	ldr	r3, [r4, #12]
 80099c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80099c2:	1a5b      	subs	r3, r3, r1
 80099c4:	4543      	cmp	r3, r8
 80099c6:	dcf0      	bgt.n	80099aa <_printf_float+0x442>
 80099c8:	e6fa      	b.n	80097c0 <_printf_float+0x258>
 80099ca:	f04f 0800 	mov.w	r8, #0
 80099ce:	f104 0919 	add.w	r9, r4, #25
 80099d2:	e7f4      	b.n	80099be <_printf_float+0x456>

080099d4 <_printf_common>:
 80099d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099d8:	4616      	mov	r6, r2
 80099da:	4699      	mov	r9, r3
 80099dc:	688a      	ldr	r2, [r1, #8]
 80099de:	690b      	ldr	r3, [r1, #16]
 80099e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099e4:	4293      	cmp	r3, r2
 80099e6:	bfb8      	it	lt
 80099e8:	4613      	movlt	r3, r2
 80099ea:	6033      	str	r3, [r6, #0]
 80099ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099f0:	4607      	mov	r7, r0
 80099f2:	460c      	mov	r4, r1
 80099f4:	b10a      	cbz	r2, 80099fa <_printf_common+0x26>
 80099f6:	3301      	adds	r3, #1
 80099f8:	6033      	str	r3, [r6, #0]
 80099fa:	6823      	ldr	r3, [r4, #0]
 80099fc:	0699      	lsls	r1, r3, #26
 80099fe:	bf42      	ittt	mi
 8009a00:	6833      	ldrmi	r3, [r6, #0]
 8009a02:	3302      	addmi	r3, #2
 8009a04:	6033      	strmi	r3, [r6, #0]
 8009a06:	6825      	ldr	r5, [r4, #0]
 8009a08:	f015 0506 	ands.w	r5, r5, #6
 8009a0c:	d106      	bne.n	8009a1c <_printf_common+0x48>
 8009a0e:	f104 0a19 	add.w	sl, r4, #25
 8009a12:	68e3      	ldr	r3, [r4, #12]
 8009a14:	6832      	ldr	r2, [r6, #0]
 8009a16:	1a9b      	subs	r3, r3, r2
 8009a18:	42ab      	cmp	r3, r5
 8009a1a:	dc26      	bgt.n	8009a6a <_printf_common+0x96>
 8009a1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a20:	1e13      	subs	r3, r2, #0
 8009a22:	6822      	ldr	r2, [r4, #0]
 8009a24:	bf18      	it	ne
 8009a26:	2301      	movne	r3, #1
 8009a28:	0692      	lsls	r2, r2, #26
 8009a2a:	d42b      	bmi.n	8009a84 <_printf_common+0xb0>
 8009a2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a30:	4649      	mov	r1, r9
 8009a32:	4638      	mov	r0, r7
 8009a34:	47c0      	blx	r8
 8009a36:	3001      	adds	r0, #1
 8009a38:	d01e      	beq.n	8009a78 <_printf_common+0xa4>
 8009a3a:	6823      	ldr	r3, [r4, #0]
 8009a3c:	68e5      	ldr	r5, [r4, #12]
 8009a3e:	6832      	ldr	r2, [r6, #0]
 8009a40:	f003 0306 	and.w	r3, r3, #6
 8009a44:	2b04      	cmp	r3, #4
 8009a46:	bf08      	it	eq
 8009a48:	1aad      	subeq	r5, r5, r2
 8009a4a:	68a3      	ldr	r3, [r4, #8]
 8009a4c:	6922      	ldr	r2, [r4, #16]
 8009a4e:	bf0c      	ite	eq
 8009a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a54:	2500      	movne	r5, #0
 8009a56:	4293      	cmp	r3, r2
 8009a58:	bfc4      	itt	gt
 8009a5a:	1a9b      	subgt	r3, r3, r2
 8009a5c:	18ed      	addgt	r5, r5, r3
 8009a5e:	2600      	movs	r6, #0
 8009a60:	341a      	adds	r4, #26
 8009a62:	42b5      	cmp	r5, r6
 8009a64:	d11a      	bne.n	8009a9c <_printf_common+0xc8>
 8009a66:	2000      	movs	r0, #0
 8009a68:	e008      	b.n	8009a7c <_printf_common+0xa8>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	4652      	mov	r2, sl
 8009a6e:	4649      	mov	r1, r9
 8009a70:	4638      	mov	r0, r7
 8009a72:	47c0      	blx	r8
 8009a74:	3001      	adds	r0, #1
 8009a76:	d103      	bne.n	8009a80 <_printf_common+0xac>
 8009a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a80:	3501      	adds	r5, #1
 8009a82:	e7c6      	b.n	8009a12 <_printf_common+0x3e>
 8009a84:	18e1      	adds	r1, r4, r3
 8009a86:	1c5a      	adds	r2, r3, #1
 8009a88:	2030      	movs	r0, #48	; 0x30
 8009a8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a8e:	4422      	add	r2, r4
 8009a90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a98:	3302      	adds	r3, #2
 8009a9a:	e7c7      	b.n	8009a2c <_printf_common+0x58>
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	4622      	mov	r2, r4
 8009aa0:	4649      	mov	r1, r9
 8009aa2:	4638      	mov	r0, r7
 8009aa4:	47c0      	blx	r8
 8009aa6:	3001      	adds	r0, #1
 8009aa8:	d0e6      	beq.n	8009a78 <_printf_common+0xa4>
 8009aaa:	3601      	adds	r6, #1
 8009aac:	e7d9      	b.n	8009a62 <_printf_common+0x8e>
	...

08009ab0 <_printf_i>:
 8009ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab4:	7e0f      	ldrb	r7, [r1, #24]
 8009ab6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ab8:	2f78      	cmp	r7, #120	; 0x78
 8009aba:	4691      	mov	r9, r2
 8009abc:	4680      	mov	r8, r0
 8009abe:	460c      	mov	r4, r1
 8009ac0:	469a      	mov	sl, r3
 8009ac2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009ac6:	d807      	bhi.n	8009ad8 <_printf_i+0x28>
 8009ac8:	2f62      	cmp	r7, #98	; 0x62
 8009aca:	d80a      	bhi.n	8009ae2 <_printf_i+0x32>
 8009acc:	2f00      	cmp	r7, #0
 8009ace:	f000 80d8 	beq.w	8009c82 <_printf_i+0x1d2>
 8009ad2:	2f58      	cmp	r7, #88	; 0x58
 8009ad4:	f000 80a3 	beq.w	8009c1e <_printf_i+0x16e>
 8009ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009adc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ae0:	e03a      	b.n	8009b58 <_printf_i+0xa8>
 8009ae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ae6:	2b15      	cmp	r3, #21
 8009ae8:	d8f6      	bhi.n	8009ad8 <_printf_i+0x28>
 8009aea:	a101      	add	r1, pc, #4	; (adr r1, 8009af0 <_printf_i+0x40>)
 8009aec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009af0:	08009b49 	.word	0x08009b49
 8009af4:	08009b5d 	.word	0x08009b5d
 8009af8:	08009ad9 	.word	0x08009ad9
 8009afc:	08009ad9 	.word	0x08009ad9
 8009b00:	08009ad9 	.word	0x08009ad9
 8009b04:	08009ad9 	.word	0x08009ad9
 8009b08:	08009b5d 	.word	0x08009b5d
 8009b0c:	08009ad9 	.word	0x08009ad9
 8009b10:	08009ad9 	.word	0x08009ad9
 8009b14:	08009ad9 	.word	0x08009ad9
 8009b18:	08009ad9 	.word	0x08009ad9
 8009b1c:	08009c69 	.word	0x08009c69
 8009b20:	08009b8d 	.word	0x08009b8d
 8009b24:	08009c4b 	.word	0x08009c4b
 8009b28:	08009ad9 	.word	0x08009ad9
 8009b2c:	08009ad9 	.word	0x08009ad9
 8009b30:	08009c8b 	.word	0x08009c8b
 8009b34:	08009ad9 	.word	0x08009ad9
 8009b38:	08009b8d 	.word	0x08009b8d
 8009b3c:	08009ad9 	.word	0x08009ad9
 8009b40:	08009ad9 	.word	0x08009ad9
 8009b44:	08009c53 	.word	0x08009c53
 8009b48:	682b      	ldr	r3, [r5, #0]
 8009b4a:	1d1a      	adds	r2, r3, #4
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	602a      	str	r2, [r5, #0]
 8009b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e0a3      	b.n	8009ca4 <_printf_i+0x1f4>
 8009b5c:	6820      	ldr	r0, [r4, #0]
 8009b5e:	6829      	ldr	r1, [r5, #0]
 8009b60:	0606      	lsls	r6, r0, #24
 8009b62:	f101 0304 	add.w	r3, r1, #4
 8009b66:	d50a      	bpl.n	8009b7e <_printf_i+0xce>
 8009b68:	680e      	ldr	r6, [r1, #0]
 8009b6a:	602b      	str	r3, [r5, #0]
 8009b6c:	2e00      	cmp	r6, #0
 8009b6e:	da03      	bge.n	8009b78 <_printf_i+0xc8>
 8009b70:	232d      	movs	r3, #45	; 0x2d
 8009b72:	4276      	negs	r6, r6
 8009b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b78:	485e      	ldr	r0, [pc, #376]	; (8009cf4 <_printf_i+0x244>)
 8009b7a:	230a      	movs	r3, #10
 8009b7c:	e019      	b.n	8009bb2 <_printf_i+0x102>
 8009b7e:	680e      	ldr	r6, [r1, #0]
 8009b80:	602b      	str	r3, [r5, #0]
 8009b82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b86:	bf18      	it	ne
 8009b88:	b236      	sxthne	r6, r6
 8009b8a:	e7ef      	b.n	8009b6c <_printf_i+0xbc>
 8009b8c:	682b      	ldr	r3, [r5, #0]
 8009b8e:	6820      	ldr	r0, [r4, #0]
 8009b90:	1d19      	adds	r1, r3, #4
 8009b92:	6029      	str	r1, [r5, #0]
 8009b94:	0601      	lsls	r1, r0, #24
 8009b96:	d501      	bpl.n	8009b9c <_printf_i+0xec>
 8009b98:	681e      	ldr	r6, [r3, #0]
 8009b9a:	e002      	b.n	8009ba2 <_printf_i+0xf2>
 8009b9c:	0646      	lsls	r6, r0, #25
 8009b9e:	d5fb      	bpl.n	8009b98 <_printf_i+0xe8>
 8009ba0:	881e      	ldrh	r6, [r3, #0]
 8009ba2:	4854      	ldr	r0, [pc, #336]	; (8009cf4 <_printf_i+0x244>)
 8009ba4:	2f6f      	cmp	r7, #111	; 0x6f
 8009ba6:	bf0c      	ite	eq
 8009ba8:	2308      	moveq	r3, #8
 8009baa:	230a      	movne	r3, #10
 8009bac:	2100      	movs	r1, #0
 8009bae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bb2:	6865      	ldr	r5, [r4, #4]
 8009bb4:	60a5      	str	r5, [r4, #8]
 8009bb6:	2d00      	cmp	r5, #0
 8009bb8:	bfa2      	ittt	ge
 8009bba:	6821      	ldrge	r1, [r4, #0]
 8009bbc:	f021 0104 	bicge.w	r1, r1, #4
 8009bc0:	6021      	strge	r1, [r4, #0]
 8009bc2:	b90e      	cbnz	r6, 8009bc8 <_printf_i+0x118>
 8009bc4:	2d00      	cmp	r5, #0
 8009bc6:	d04d      	beq.n	8009c64 <_printf_i+0x1b4>
 8009bc8:	4615      	mov	r5, r2
 8009bca:	fbb6 f1f3 	udiv	r1, r6, r3
 8009bce:	fb03 6711 	mls	r7, r3, r1, r6
 8009bd2:	5dc7      	ldrb	r7, [r0, r7]
 8009bd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009bd8:	4637      	mov	r7, r6
 8009bda:	42bb      	cmp	r3, r7
 8009bdc:	460e      	mov	r6, r1
 8009bde:	d9f4      	bls.n	8009bca <_printf_i+0x11a>
 8009be0:	2b08      	cmp	r3, #8
 8009be2:	d10b      	bne.n	8009bfc <_printf_i+0x14c>
 8009be4:	6823      	ldr	r3, [r4, #0]
 8009be6:	07de      	lsls	r6, r3, #31
 8009be8:	d508      	bpl.n	8009bfc <_printf_i+0x14c>
 8009bea:	6923      	ldr	r3, [r4, #16]
 8009bec:	6861      	ldr	r1, [r4, #4]
 8009bee:	4299      	cmp	r1, r3
 8009bf0:	bfde      	ittt	le
 8009bf2:	2330      	movle	r3, #48	; 0x30
 8009bf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bf8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009bfc:	1b52      	subs	r2, r2, r5
 8009bfe:	6122      	str	r2, [r4, #16]
 8009c00:	f8cd a000 	str.w	sl, [sp]
 8009c04:	464b      	mov	r3, r9
 8009c06:	aa03      	add	r2, sp, #12
 8009c08:	4621      	mov	r1, r4
 8009c0a:	4640      	mov	r0, r8
 8009c0c:	f7ff fee2 	bl	80099d4 <_printf_common>
 8009c10:	3001      	adds	r0, #1
 8009c12:	d14c      	bne.n	8009cae <_printf_i+0x1fe>
 8009c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c18:	b004      	add	sp, #16
 8009c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c1e:	4835      	ldr	r0, [pc, #212]	; (8009cf4 <_printf_i+0x244>)
 8009c20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c24:	6829      	ldr	r1, [r5, #0]
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c2c:	6029      	str	r1, [r5, #0]
 8009c2e:	061d      	lsls	r5, r3, #24
 8009c30:	d514      	bpl.n	8009c5c <_printf_i+0x1ac>
 8009c32:	07df      	lsls	r7, r3, #31
 8009c34:	bf44      	itt	mi
 8009c36:	f043 0320 	orrmi.w	r3, r3, #32
 8009c3a:	6023      	strmi	r3, [r4, #0]
 8009c3c:	b91e      	cbnz	r6, 8009c46 <_printf_i+0x196>
 8009c3e:	6823      	ldr	r3, [r4, #0]
 8009c40:	f023 0320 	bic.w	r3, r3, #32
 8009c44:	6023      	str	r3, [r4, #0]
 8009c46:	2310      	movs	r3, #16
 8009c48:	e7b0      	b.n	8009bac <_printf_i+0xfc>
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	f043 0320 	orr.w	r3, r3, #32
 8009c50:	6023      	str	r3, [r4, #0]
 8009c52:	2378      	movs	r3, #120	; 0x78
 8009c54:	4828      	ldr	r0, [pc, #160]	; (8009cf8 <_printf_i+0x248>)
 8009c56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c5a:	e7e3      	b.n	8009c24 <_printf_i+0x174>
 8009c5c:	0659      	lsls	r1, r3, #25
 8009c5e:	bf48      	it	mi
 8009c60:	b2b6      	uxthmi	r6, r6
 8009c62:	e7e6      	b.n	8009c32 <_printf_i+0x182>
 8009c64:	4615      	mov	r5, r2
 8009c66:	e7bb      	b.n	8009be0 <_printf_i+0x130>
 8009c68:	682b      	ldr	r3, [r5, #0]
 8009c6a:	6826      	ldr	r6, [r4, #0]
 8009c6c:	6961      	ldr	r1, [r4, #20]
 8009c6e:	1d18      	adds	r0, r3, #4
 8009c70:	6028      	str	r0, [r5, #0]
 8009c72:	0635      	lsls	r5, r6, #24
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	d501      	bpl.n	8009c7c <_printf_i+0x1cc>
 8009c78:	6019      	str	r1, [r3, #0]
 8009c7a:	e002      	b.n	8009c82 <_printf_i+0x1d2>
 8009c7c:	0670      	lsls	r0, r6, #25
 8009c7e:	d5fb      	bpl.n	8009c78 <_printf_i+0x1c8>
 8009c80:	8019      	strh	r1, [r3, #0]
 8009c82:	2300      	movs	r3, #0
 8009c84:	6123      	str	r3, [r4, #16]
 8009c86:	4615      	mov	r5, r2
 8009c88:	e7ba      	b.n	8009c00 <_printf_i+0x150>
 8009c8a:	682b      	ldr	r3, [r5, #0]
 8009c8c:	1d1a      	adds	r2, r3, #4
 8009c8e:	602a      	str	r2, [r5, #0]
 8009c90:	681d      	ldr	r5, [r3, #0]
 8009c92:	6862      	ldr	r2, [r4, #4]
 8009c94:	2100      	movs	r1, #0
 8009c96:	4628      	mov	r0, r5
 8009c98:	f7f6 fac2 	bl	8000220 <memchr>
 8009c9c:	b108      	cbz	r0, 8009ca2 <_printf_i+0x1f2>
 8009c9e:	1b40      	subs	r0, r0, r5
 8009ca0:	6060      	str	r0, [r4, #4]
 8009ca2:	6863      	ldr	r3, [r4, #4]
 8009ca4:	6123      	str	r3, [r4, #16]
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cac:	e7a8      	b.n	8009c00 <_printf_i+0x150>
 8009cae:	6923      	ldr	r3, [r4, #16]
 8009cb0:	462a      	mov	r2, r5
 8009cb2:	4649      	mov	r1, r9
 8009cb4:	4640      	mov	r0, r8
 8009cb6:	47d0      	blx	sl
 8009cb8:	3001      	adds	r0, #1
 8009cba:	d0ab      	beq.n	8009c14 <_printf_i+0x164>
 8009cbc:	6823      	ldr	r3, [r4, #0]
 8009cbe:	079b      	lsls	r3, r3, #30
 8009cc0:	d413      	bmi.n	8009cea <_printf_i+0x23a>
 8009cc2:	68e0      	ldr	r0, [r4, #12]
 8009cc4:	9b03      	ldr	r3, [sp, #12]
 8009cc6:	4298      	cmp	r0, r3
 8009cc8:	bfb8      	it	lt
 8009cca:	4618      	movlt	r0, r3
 8009ccc:	e7a4      	b.n	8009c18 <_printf_i+0x168>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	4632      	mov	r2, r6
 8009cd2:	4649      	mov	r1, r9
 8009cd4:	4640      	mov	r0, r8
 8009cd6:	47d0      	blx	sl
 8009cd8:	3001      	adds	r0, #1
 8009cda:	d09b      	beq.n	8009c14 <_printf_i+0x164>
 8009cdc:	3501      	adds	r5, #1
 8009cde:	68e3      	ldr	r3, [r4, #12]
 8009ce0:	9903      	ldr	r1, [sp, #12]
 8009ce2:	1a5b      	subs	r3, r3, r1
 8009ce4:	42ab      	cmp	r3, r5
 8009ce6:	dcf2      	bgt.n	8009cce <_printf_i+0x21e>
 8009ce8:	e7eb      	b.n	8009cc2 <_printf_i+0x212>
 8009cea:	2500      	movs	r5, #0
 8009cec:	f104 0619 	add.w	r6, r4, #25
 8009cf0:	e7f5      	b.n	8009cde <_printf_i+0x22e>
 8009cf2:	bf00      	nop
 8009cf4:	0800e3ba 	.word	0x0800e3ba
 8009cf8:	0800e3cb 	.word	0x0800e3cb

08009cfc <iprintf>:
 8009cfc:	b40f      	push	{r0, r1, r2, r3}
 8009cfe:	4b0a      	ldr	r3, [pc, #40]	; (8009d28 <iprintf+0x2c>)
 8009d00:	b513      	push	{r0, r1, r4, lr}
 8009d02:	681c      	ldr	r4, [r3, #0]
 8009d04:	b124      	cbz	r4, 8009d10 <iprintf+0x14>
 8009d06:	69a3      	ldr	r3, [r4, #24]
 8009d08:	b913      	cbnz	r3, 8009d10 <iprintf+0x14>
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f001 f8d8 	bl	800aec0 <__sinit>
 8009d10:	ab05      	add	r3, sp, #20
 8009d12:	9a04      	ldr	r2, [sp, #16]
 8009d14:	68a1      	ldr	r1, [r4, #8]
 8009d16:	9301      	str	r3, [sp, #4]
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f001 fe95 	bl	800ba48 <_vfiprintf_r>
 8009d1e:	b002      	add	sp, #8
 8009d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d24:	b004      	add	sp, #16
 8009d26:	4770      	bx	lr
 8009d28:	20000018 	.word	0x20000018

08009d2c <_puts_r>:
 8009d2c:	b570      	push	{r4, r5, r6, lr}
 8009d2e:	460e      	mov	r6, r1
 8009d30:	4605      	mov	r5, r0
 8009d32:	b118      	cbz	r0, 8009d3c <_puts_r+0x10>
 8009d34:	6983      	ldr	r3, [r0, #24]
 8009d36:	b90b      	cbnz	r3, 8009d3c <_puts_r+0x10>
 8009d38:	f001 f8c2 	bl	800aec0 <__sinit>
 8009d3c:	69ab      	ldr	r3, [r5, #24]
 8009d3e:	68ac      	ldr	r4, [r5, #8]
 8009d40:	b913      	cbnz	r3, 8009d48 <_puts_r+0x1c>
 8009d42:	4628      	mov	r0, r5
 8009d44:	f001 f8bc 	bl	800aec0 <__sinit>
 8009d48:	4b2c      	ldr	r3, [pc, #176]	; (8009dfc <_puts_r+0xd0>)
 8009d4a:	429c      	cmp	r4, r3
 8009d4c:	d120      	bne.n	8009d90 <_puts_r+0x64>
 8009d4e:	686c      	ldr	r4, [r5, #4]
 8009d50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d52:	07db      	lsls	r3, r3, #31
 8009d54:	d405      	bmi.n	8009d62 <_puts_r+0x36>
 8009d56:	89a3      	ldrh	r3, [r4, #12]
 8009d58:	0598      	lsls	r0, r3, #22
 8009d5a:	d402      	bmi.n	8009d62 <_puts_r+0x36>
 8009d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d5e:	f001 f952 	bl	800b006 <__retarget_lock_acquire_recursive>
 8009d62:	89a3      	ldrh	r3, [r4, #12]
 8009d64:	0719      	lsls	r1, r3, #28
 8009d66:	d51d      	bpl.n	8009da4 <_puts_r+0x78>
 8009d68:	6923      	ldr	r3, [r4, #16]
 8009d6a:	b1db      	cbz	r3, 8009da4 <_puts_r+0x78>
 8009d6c:	3e01      	subs	r6, #1
 8009d6e:	68a3      	ldr	r3, [r4, #8]
 8009d70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d74:	3b01      	subs	r3, #1
 8009d76:	60a3      	str	r3, [r4, #8]
 8009d78:	bb39      	cbnz	r1, 8009dca <_puts_r+0x9e>
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	da38      	bge.n	8009df0 <_puts_r+0xc4>
 8009d7e:	4622      	mov	r2, r4
 8009d80:	210a      	movs	r1, #10
 8009d82:	4628      	mov	r0, r5
 8009d84:	f000 f848 	bl	8009e18 <__swbuf_r>
 8009d88:	3001      	adds	r0, #1
 8009d8a:	d011      	beq.n	8009db0 <_puts_r+0x84>
 8009d8c:	250a      	movs	r5, #10
 8009d8e:	e011      	b.n	8009db4 <_puts_r+0x88>
 8009d90:	4b1b      	ldr	r3, [pc, #108]	; (8009e00 <_puts_r+0xd4>)
 8009d92:	429c      	cmp	r4, r3
 8009d94:	d101      	bne.n	8009d9a <_puts_r+0x6e>
 8009d96:	68ac      	ldr	r4, [r5, #8]
 8009d98:	e7da      	b.n	8009d50 <_puts_r+0x24>
 8009d9a:	4b1a      	ldr	r3, [pc, #104]	; (8009e04 <_puts_r+0xd8>)
 8009d9c:	429c      	cmp	r4, r3
 8009d9e:	bf08      	it	eq
 8009da0:	68ec      	ldreq	r4, [r5, #12]
 8009da2:	e7d5      	b.n	8009d50 <_puts_r+0x24>
 8009da4:	4621      	mov	r1, r4
 8009da6:	4628      	mov	r0, r5
 8009da8:	f000 f888 	bl	8009ebc <__swsetup_r>
 8009dac:	2800      	cmp	r0, #0
 8009dae:	d0dd      	beq.n	8009d6c <_puts_r+0x40>
 8009db0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009db4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009db6:	07da      	lsls	r2, r3, #31
 8009db8:	d405      	bmi.n	8009dc6 <_puts_r+0x9a>
 8009dba:	89a3      	ldrh	r3, [r4, #12]
 8009dbc:	059b      	lsls	r3, r3, #22
 8009dbe:	d402      	bmi.n	8009dc6 <_puts_r+0x9a>
 8009dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dc2:	f001 f921 	bl	800b008 <__retarget_lock_release_recursive>
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	bd70      	pop	{r4, r5, r6, pc}
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	da04      	bge.n	8009dd8 <_puts_r+0xac>
 8009dce:	69a2      	ldr	r2, [r4, #24]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	dc06      	bgt.n	8009de2 <_puts_r+0xb6>
 8009dd4:	290a      	cmp	r1, #10
 8009dd6:	d004      	beq.n	8009de2 <_puts_r+0xb6>
 8009dd8:	6823      	ldr	r3, [r4, #0]
 8009dda:	1c5a      	adds	r2, r3, #1
 8009ddc:	6022      	str	r2, [r4, #0]
 8009dde:	7019      	strb	r1, [r3, #0]
 8009de0:	e7c5      	b.n	8009d6e <_puts_r+0x42>
 8009de2:	4622      	mov	r2, r4
 8009de4:	4628      	mov	r0, r5
 8009de6:	f000 f817 	bl	8009e18 <__swbuf_r>
 8009dea:	3001      	adds	r0, #1
 8009dec:	d1bf      	bne.n	8009d6e <_puts_r+0x42>
 8009dee:	e7df      	b.n	8009db0 <_puts_r+0x84>
 8009df0:	6823      	ldr	r3, [r4, #0]
 8009df2:	250a      	movs	r5, #10
 8009df4:	1c5a      	adds	r2, r3, #1
 8009df6:	6022      	str	r2, [r4, #0]
 8009df8:	701d      	strb	r5, [r3, #0]
 8009dfa:	e7db      	b.n	8009db4 <_puts_r+0x88>
 8009dfc:	0800e48c 	.word	0x0800e48c
 8009e00:	0800e4ac 	.word	0x0800e4ac
 8009e04:	0800e46c 	.word	0x0800e46c

08009e08 <puts>:
 8009e08:	4b02      	ldr	r3, [pc, #8]	; (8009e14 <puts+0xc>)
 8009e0a:	4601      	mov	r1, r0
 8009e0c:	6818      	ldr	r0, [r3, #0]
 8009e0e:	f7ff bf8d 	b.w	8009d2c <_puts_r>
 8009e12:	bf00      	nop
 8009e14:	20000018 	.word	0x20000018

08009e18 <__swbuf_r>:
 8009e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1a:	460e      	mov	r6, r1
 8009e1c:	4614      	mov	r4, r2
 8009e1e:	4605      	mov	r5, r0
 8009e20:	b118      	cbz	r0, 8009e2a <__swbuf_r+0x12>
 8009e22:	6983      	ldr	r3, [r0, #24]
 8009e24:	b90b      	cbnz	r3, 8009e2a <__swbuf_r+0x12>
 8009e26:	f001 f84b 	bl	800aec0 <__sinit>
 8009e2a:	4b21      	ldr	r3, [pc, #132]	; (8009eb0 <__swbuf_r+0x98>)
 8009e2c:	429c      	cmp	r4, r3
 8009e2e:	d12b      	bne.n	8009e88 <__swbuf_r+0x70>
 8009e30:	686c      	ldr	r4, [r5, #4]
 8009e32:	69a3      	ldr	r3, [r4, #24]
 8009e34:	60a3      	str	r3, [r4, #8]
 8009e36:	89a3      	ldrh	r3, [r4, #12]
 8009e38:	071a      	lsls	r2, r3, #28
 8009e3a:	d52f      	bpl.n	8009e9c <__swbuf_r+0x84>
 8009e3c:	6923      	ldr	r3, [r4, #16]
 8009e3e:	b36b      	cbz	r3, 8009e9c <__swbuf_r+0x84>
 8009e40:	6923      	ldr	r3, [r4, #16]
 8009e42:	6820      	ldr	r0, [r4, #0]
 8009e44:	1ac0      	subs	r0, r0, r3
 8009e46:	6963      	ldr	r3, [r4, #20]
 8009e48:	b2f6      	uxtb	r6, r6
 8009e4a:	4283      	cmp	r3, r0
 8009e4c:	4637      	mov	r7, r6
 8009e4e:	dc04      	bgt.n	8009e5a <__swbuf_r+0x42>
 8009e50:	4621      	mov	r1, r4
 8009e52:	4628      	mov	r0, r5
 8009e54:	f000 ffa0 	bl	800ad98 <_fflush_r>
 8009e58:	bb30      	cbnz	r0, 8009ea8 <__swbuf_r+0x90>
 8009e5a:	68a3      	ldr	r3, [r4, #8]
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	60a3      	str	r3, [r4, #8]
 8009e60:	6823      	ldr	r3, [r4, #0]
 8009e62:	1c5a      	adds	r2, r3, #1
 8009e64:	6022      	str	r2, [r4, #0]
 8009e66:	701e      	strb	r6, [r3, #0]
 8009e68:	6963      	ldr	r3, [r4, #20]
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	4283      	cmp	r3, r0
 8009e6e:	d004      	beq.n	8009e7a <__swbuf_r+0x62>
 8009e70:	89a3      	ldrh	r3, [r4, #12]
 8009e72:	07db      	lsls	r3, r3, #31
 8009e74:	d506      	bpl.n	8009e84 <__swbuf_r+0x6c>
 8009e76:	2e0a      	cmp	r6, #10
 8009e78:	d104      	bne.n	8009e84 <__swbuf_r+0x6c>
 8009e7a:	4621      	mov	r1, r4
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	f000 ff8b 	bl	800ad98 <_fflush_r>
 8009e82:	b988      	cbnz	r0, 8009ea8 <__swbuf_r+0x90>
 8009e84:	4638      	mov	r0, r7
 8009e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e88:	4b0a      	ldr	r3, [pc, #40]	; (8009eb4 <__swbuf_r+0x9c>)
 8009e8a:	429c      	cmp	r4, r3
 8009e8c:	d101      	bne.n	8009e92 <__swbuf_r+0x7a>
 8009e8e:	68ac      	ldr	r4, [r5, #8]
 8009e90:	e7cf      	b.n	8009e32 <__swbuf_r+0x1a>
 8009e92:	4b09      	ldr	r3, [pc, #36]	; (8009eb8 <__swbuf_r+0xa0>)
 8009e94:	429c      	cmp	r4, r3
 8009e96:	bf08      	it	eq
 8009e98:	68ec      	ldreq	r4, [r5, #12]
 8009e9a:	e7ca      	b.n	8009e32 <__swbuf_r+0x1a>
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	f000 f80c 	bl	8009ebc <__swsetup_r>
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	d0cb      	beq.n	8009e40 <__swbuf_r+0x28>
 8009ea8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009eac:	e7ea      	b.n	8009e84 <__swbuf_r+0x6c>
 8009eae:	bf00      	nop
 8009eb0:	0800e48c 	.word	0x0800e48c
 8009eb4:	0800e4ac 	.word	0x0800e4ac
 8009eb8:	0800e46c 	.word	0x0800e46c

08009ebc <__swsetup_r>:
 8009ebc:	4b32      	ldr	r3, [pc, #200]	; (8009f88 <__swsetup_r+0xcc>)
 8009ebe:	b570      	push	{r4, r5, r6, lr}
 8009ec0:	681d      	ldr	r5, [r3, #0]
 8009ec2:	4606      	mov	r6, r0
 8009ec4:	460c      	mov	r4, r1
 8009ec6:	b125      	cbz	r5, 8009ed2 <__swsetup_r+0x16>
 8009ec8:	69ab      	ldr	r3, [r5, #24]
 8009eca:	b913      	cbnz	r3, 8009ed2 <__swsetup_r+0x16>
 8009ecc:	4628      	mov	r0, r5
 8009ece:	f000 fff7 	bl	800aec0 <__sinit>
 8009ed2:	4b2e      	ldr	r3, [pc, #184]	; (8009f8c <__swsetup_r+0xd0>)
 8009ed4:	429c      	cmp	r4, r3
 8009ed6:	d10f      	bne.n	8009ef8 <__swsetup_r+0x3c>
 8009ed8:	686c      	ldr	r4, [r5, #4]
 8009eda:	89a3      	ldrh	r3, [r4, #12]
 8009edc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ee0:	0719      	lsls	r1, r3, #28
 8009ee2:	d42c      	bmi.n	8009f3e <__swsetup_r+0x82>
 8009ee4:	06dd      	lsls	r5, r3, #27
 8009ee6:	d411      	bmi.n	8009f0c <__swsetup_r+0x50>
 8009ee8:	2309      	movs	r3, #9
 8009eea:	6033      	str	r3, [r6, #0]
 8009eec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ef0:	81a3      	strh	r3, [r4, #12]
 8009ef2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ef6:	e03e      	b.n	8009f76 <__swsetup_r+0xba>
 8009ef8:	4b25      	ldr	r3, [pc, #148]	; (8009f90 <__swsetup_r+0xd4>)
 8009efa:	429c      	cmp	r4, r3
 8009efc:	d101      	bne.n	8009f02 <__swsetup_r+0x46>
 8009efe:	68ac      	ldr	r4, [r5, #8]
 8009f00:	e7eb      	b.n	8009eda <__swsetup_r+0x1e>
 8009f02:	4b24      	ldr	r3, [pc, #144]	; (8009f94 <__swsetup_r+0xd8>)
 8009f04:	429c      	cmp	r4, r3
 8009f06:	bf08      	it	eq
 8009f08:	68ec      	ldreq	r4, [r5, #12]
 8009f0a:	e7e6      	b.n	8009eda <__swsetup_r+0x1e>
 8009f0c:	0758      	lsls	r0, r3, #29
 8009f0e:	d512      	bpl.n	8009f36 <__swsetup_r+0x7a>
 8009f10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f12:	b141      	cbz	r1, 8009f26 <__swsetup_r+0x6a>
 8009f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f18:	4299      	cmp	r1, r3
 8009f1a:	d002      	beq.n	8009f22 <__swsetup_r+0x66>
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	f001 fc89 	bl	800b834 <_free_r>
 8009f22:	2300      	movs	r3, #0
 8009f24:	6363      	str	r3, [r4, #52]	; 0x34
 8009f26:	89a3      	ldrh	r3, [r4, #12]
 8009f28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f2c:	81a3      	strh	r3, [r4, #12]
 8009f2e:	2300      	movs	r3, #0
 8009f30:	6063      	str	r3, [r4, #4]
 8009f32:	6923      	ldr	r3, [r4, #16]
 8009f34:	6023      	str	r3, [r4, #0]
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	f043 0308 	orr.w	r3, r3, #8
 8009f3c:	81a3      	strh	r3, [r4, #12]
 8009f3e:	6923      	ldr	r3, [r4, #16]
 8009f40:	b94b      	cbnz	r3, 8009f56 <__swsetup_r+0x9a>
 8009f42:	89a3      	ldrh	r3, [r4, #12]
 8009f44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f4c:	d003      	beq.n	8009f56 <__swsetup_r+0x9a>
 8009f4e:	4621      	mov	r1, r4
 8009f50:	4630      	mov	r0, r6
 8009f52:	f001 f87f 	bl	800b054 <__smakebuf_r>
 8009f56:	89a0      	ldrh	r0, [r4, #12]
 8009f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f5c:	f010 0301 	ands.w	r3, r0, #1
 8009f60:	d00a      	beq.n	8009f78 <__swsetup_r+0xbc>
 8009f62:	2300      	movs	r3, #0
 8009f64:	60a3      	str	r3, [r4, #8]
 8009f66:	6963      	ldr	r3, [r4, #20]
 8009f68:	425b      	negs	r3, r3
 8009f6a:	61a3      	str	r3, [r4, #24]
 8009f6c:	6923      	ldr	r3, [r4, #16]
 8009f6e:	b943      	cbnz	r3, 8009f82 <__swsetup_r+0xc6>
 8009f70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f74:	d1ba      	bne.n	8009eec <__swsetup_r+0x30>
 8009f76:	bd70      	pop	{r4, r5, r6, pc}
 8009f78:	0781      	lsls	r1, r0, #30
 8009f7a:	bf58      	it	pl
 8009f7c:	6963      	ldrpl	r3, [r4, #20]
 8009f7e:	60a3      	str	r3, [r4, #8]
 8009f80:	e7f4      	b.n	8009f6c <__swsetup_r+0xb0>
 8009f82:	2000      	movs	r0, #0
 8009f84:	e7f7      	b.n	8009f76 <__swsetup_r+0xba>
 8009f86:	bf00      	nop
 8009f88:	20000018 	.word	0x20000018
 8009f8c:	0800e48c 	.word	0x0800e48c
 8009f90:	0800e4ac 	.word	0x0800e4ac
 8009f94:	0800e46c 	.word	0x0800e46c

08009f98 <quorem>:
 8009f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f9c:	6903      	ldr	r3, [r0, #16]
 8009f9e:	690c      	ldr	r4, [r1, #16]
 8009fa0:	42a3      	cmp	r3, r4
 8009fa2:	4607      	mov	r7, r0
 8009fa4:	f2c0 8081 	blt.w	800a0aa <quorem+0x112>
 8009fa8:	3c01      	subs	r4, #1
 8009faa:	f101 0814 	add.w	r8, r1, #20
 8009fae:	f100 0514 	add.w	r5, r0, #20
 8009fb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fb6:	9301      	str	r3, [sp, #4]
 8009fb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009fbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009fc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009fcc:	fbb2 f6f3 	udiv	r6, r2, r3
 8009fd0:	d331      	bcc.n	800a036 <quorem+0x9e>
 8009fd2:	f04f 0e00 	mov.w	lr, #0
 8009fd6:	4640      	mov	r0, r8
 8009fd8:	46ac      	mov	ip, r5
 8009fda:	46f2      	mov	sl, lr
 8009fdc:	f850 2b04 	ldr.w	r2, [r0], #4
 8009fe0:	b293      	uxth	r3, r2
 8009fe2:	fb06 e303 	mla	r3, r6, r3, lr
 8009fe6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	ebaa 0303 	sub.w	r3, sl, r3
 8009ff0:	f8dc a000 	ldr.w	sl, [ip]
 8009ff4:	0c12      	lsrs	r2, r2, #16
 8009ff6:	fa13 f38a 	uxtah	r3, r3, sl
 8009ffa:	fb06 e202 	mla	r2, r6, r2, lr
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	9b00      	ldr	r3, [sp, #0]
 800a002:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a006:	b292      	uxth	r2, r2
 800a008:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a00c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a010:	f8bd 3000 	ldrh.w	r3, [sp]
 800a014:	4581      	cmp	r9, r0
 800a016:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a01a:	f84c 3b04 	str.w	r3, [ip], #4
 800a01e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a022:	d2db      	bcs.n	8009fdc <quorem+0x44>
 800a024:	f855 300b 	ldr.w	r3, [r5, fp]
 800a028:	b92b      	cbnz	r3, 800a036 <quorem+0x9e>
 800a02a:	9b01      	ldr	r3, [sp, #4]
 800a02c:	3b04      	subs	r3, #4
 800a02e:	429d      	cmp	r5, r3
 800a030:	461a      	mov	r2, r3
 800a032:	d32e      	bcc.n	800a092 <quorem+0xfa>
 800a034:	613c      	str	r4, [r7, #16]
 800a036:	4638      	mov	r0, r7
 800a038:	f001 fae4 	bl	800b604 <__mcmp>
 800a03c:	2800      	cmp	r0, #0
 800a03e:	db24      	blt.n	800a08a <quorem+0xf2>
 800a040:	3601      	adds	r6, #1
 800a042:	4628      	mov	r0, r5
 800a044:	f04f 0c00 	mov.w	ip, #0
 800a048:	f858 2b04 	ldr.w	r2, [r8], #4
 800a04c:	f8d0 e000 	ldr.w	lr, [r0]
 800a050:	b293      	uxth	r3, r2
 800a052:	ebac 0303 	sub.w	r3, ip, r3
 800a056:	0c12      	lsrs	r2, r2, #16
 800a058:	fa13 f38e 	uxtah	r3, r3, lr
 800a05c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a060:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a064:	b29b      	uxth	r3, r3
 800a066:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a06a:	45c1      	cmp	r9, r8
 800a06c:	f840 3b04 	str.w	r3, [r0], #4
 800a070:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a074:	d2e8      	bcs.n	800a048 <quorem+0xb0>
 800a076:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a07a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a07e:	b922      	cbnz	r2, 800a08a <quorem+0xf2>
 800a080:	3b04      	subs	r3, #4
 800a082:	429d      	cmp	r5, r3
 800a084:	461a      	mov	r2, r3
 800a086:	d30a      	bcc.n	800a09e <quorem+0x106>
 800a088:	613c      	str	r4, [r7, #16]
 800a08a:	4630      	mov	r0, r6
 800a08c:	b003      	add	sp, #12
 800a08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a092:	6812      	ldr	r2, [r2, #0]
 800a094:	3b04      	subs	r3, #4
 800a096:	2a00      	cmp	r2, #0
 800a098:	d1cc      	bne.n	800a034 <quorem+0x9c>
 800a09a:	3c01      	subs	r4, #1
 800a09c:	e7c7      	b.n	800a02e <quorem+0x96>
 800a09e:	6812      	ldr	r2, [r2, #0]
 800a0a0:	3b04      	subs	r3, #4
 800a0a2:	2a00      	cmp	r2, #0
 800a0a4:	d1f0      	bne.n	800a088 <quorem+0xf0>
 800a0a6:	3c01      	subs	r4, #1
 800a0a8:	e7eb      	b.n	800a082 <quorem+0xea>
 800a0aa:	2000      	movs	r0, #0
 800a0ac:	e7ee      	b.n	800a08c <quorem+0xf4>
	...

0800a0b0 <_dtoa_r>:
 800a0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b4:	ed2d 8b04 	vpush	{d8-d9}
 800a0b8:	ec57 6b10 	vmov	r6, r7, d0
 800a0bc:	b093      	sub	sp, #76	; 0x4c
 800a0be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a0c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a0c4:	9106      	str	r1, [sp, #24]
 800a0c6:	ee10 aa10 	vmov	sl, s0
 800a0ca:	4604      	mov	r4, r0
 800a0cc:	9209      	str	r2, [sp, #36]	; 0x24
 800a0ce:	930c      	str	r3, [sp, #48]	; 0x30
 800a0d0:	46bb      	mov	fp, r7
 800a0d2:	b975      	cbnz	r5, 800a0f2 <_dtoa_r+0x42>
 800a0d4:	2010      	movs	r0, #16
 800a0d6:	f000 fffd 	bl	800b0d4 <malloc>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	6260      	str	r0, [r4, #36]	; 0x24
 800a0de:	b920      	cbnz	r0, 800a0ea <_dtoa_r+0x3a>
 800a0e0:	4ba7      	ldr	r3, [pc, #668]	; (800a380 <_dtoa_r+0x2d0>)
 800a0e2:	21ea      	movs	r1, #234	; 0xea
 800a0e4:	48a7      	ldr	r0, [pc, #668]	; (800a384 <_dtoa_r+0x2d4>)
 800a0e6:	f001 fe45 	bl	800bd74 <__assert_func>
 800a0ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a0ee:	6005      	str	r5, [r0, #0]
 800a0f0:	60c5      	str	r5, [r0, #12]
 800a0f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0f4:	6819      	ldr	r1, [r3, #0]
 800a0f6:	b151      	cbz	r1, 800a10e <_dtoa_r+0x5e>
 800a0f8:	685a      	ldr	r2, [r3, #4]
 800a0fa:	604a      	str	r2, [r1, #4]
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	4093      	lsls	r3, r2
 800a100:	608b      	str	r3, [r1, #8]
 800a102:	4620      	mov	r0, r4
 800a104:	f001 f83c 	bl	800b180 <_Bfree>
 800a108:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a10a:	2200      	movs	r2, #0
 800a10c:	601a      	str	r2, [r3, #0]
 800a10e:	1e3b      	subs	r3, r7, #0
 800a110:	bfaa      	itet	ge
 800a112:	2300      	movge	r3, #0
 800a114:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a118:	f8c8 3000 	strge.w	r3, [r8]
 800a11c:	4b9a      	ldr	r3, [pc, #616]	; (800a388 <_dtoa_r+0x2d8>)
 800a11e:	bfbc      	itt	lt
 800a120:	2201      	movlt	r2, #1
 800a122:	f8c8 2000 	strlt.w	r2, [r8]
 800a126:	ea33 030b 	bics.w	r3, r3, fp
 800a12a:	d11b      	bne.n	800a164 <_dtoa_r+0xb4>
 800a12c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a12e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a132:	6013      	str	r3, [r2, #0]
 800a134:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a138:	4333      	orrs	r3, r6
 800a13a:	f000 8592 	beq.w	800ac62 <_dtoa_r+0xbb2>
 800a13e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a140:	b963      	cbnz	r3, 800a15c <_dtoa_r+0xac>
 800a142:	4b92      	ldr	r3, [pc, #584]	; (800a38c <_dtoa_r+0x2dc>)
 800a144:	e022      	b.n	800a18c <_dtoa_r+0xdc>
 800a146:	4b92      	ldr	r3, [pc, #584]	; (800a390 <_dtoa_r+0x2e0>)
 800a148:	9301      	str	r3, [sp, #4]
 800a14a:	3308      	adds	r3, #8
 800a14c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a14e:	6013      	str	r3, [r2, #0]
 800a150:	9801      	ldr	r0, [sp, #4]
 800a152:	b013      	add	sp, #76	; 0x4c
 800a154:	ecbd 8b04 	vpop	{d8-d9}
 800a158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a15c:	4b8b      	ldr	r3, [pc, #556]	; (800a38c <_dtoa_r+0x2dc>)
 800a15e:	9301      	str	r3, [sp, #4]
 800a160:	3303      	adds	r3, #3
 800a162:	e7f3      	b.n	800a14c <_dtoa_r+0x9c>
 800a164:	2200      	movs	r2, #0
 800a166:	2300      	movs	r3, #0
 800a168:	4650      	mov	r0, sl
 800a16a:	4659      	mov	r1, fp
 800a16c:	f7f6 fccc 	bl	8000b08 <__aeabi_dcmpeq>
 800a170:	ec4b ab19 	vmov	d9, sl, fp
 800a174:	4680      	mov	r8, r0
 800a176:	b158      	cbz	r0, 800a190 <_dtoa_r+0xe0>
 800a178:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a17a:	2301      	movs	r3, #1
 800a17c:	6013      	str	r3, [r2, #0]
 800a17e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a180:	2b00      	cmp	r3, #0
 800a182:	f000 856b 	beq.w	800ac5c <_dtoa_r+0xbac>
 800a186:	4883      	ldr	r0, [pc, #524]	; (800a394 <_dtoa_r+0x2e4>)
 800a188:	6018      	str	r0, [r3, #0]
 800a18a:	1e43      	subs	r3, r0, #1
 800a18c:	9301      	str	r3, [sp, #4]
 800a18e:	e7df      	b.n	800a150 <_dtoa_r+0xa0>
 800a190:	ec4b ab10 	vmov	d0, sl, fp
 800a194:	aa10      	add	r2, sp, #64	; 0x40
 800a196:	a911      	add	r1, sp, #68	; 0x44
 800a198:	4620      	mov	r0, r4
 800a19a:	f001 fad9 	bl	800b750 <__d2b>
 800a19e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a1a2:	ee08 0a10 	vmov	s16, r0
 800a1a6:	2d00      	cmp	r5, #0
 800a1a8:	f000 8084 	beq.w	800a2b4 <_dtoa_r+0x204>
 800a1ac:	ee19 3a90 	vmov	r3, s19
 800a1b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a1b8:	4656      	mov	r6, sl
 800a1ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a1be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a1c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a1c6:	4b74      	ldr	r3, [pc, #464]	; (800a398 <_dtoa_r+0x2e8>)
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	4639      	mov	r1, r7
 800a1ce:	f7f6 f87b 	bl	80002c8 <__aeabi_dsub>
 800a1d2:	a365      	add	r3, pc, #404	; (adr r3, 800a368 <_dtoa_r+0x2b8>)
 800a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d8:	f7f6 fa2e 	bl	8000638 <__aeabi_dmul>
 800a1dc:	a364      	add	r3, pc, #400	; (adr r3, 800a370 <_dtoa_r+0x2c0>)
 800a1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e2:	f7f6 f873 	bl	80002cc <__adddf3>
 800a1e6:	4606      	mov	r6, r0
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	460f      	mov	r7, r1
 800a1ec:	f7f6 f9ba 	bl	8000564 <__aeabi_i2d>
 800a1f0:	a361      	add	r3, pc, #388	; (adr r3, 800a378 <_dtoa_r+0x2c8>)
 800a1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f6:	f7f6 fa1f 	bl	8000638 <__aeabi_dmul>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	4630      	mov	r0, r6
 800a200:	4639      	mov	r1, r7
 800a202:	f7f6 f863 	bl	80002cc <__adddf3>
 800a206:	4606      	mov	r6, r0
 800a208:	460f      	mov	r7, r1
 800a20a:	f7f6 fcc5 	bl	8000b98 <__aeabi_d2iz>
 800a20e:	2200      	movs	r2, #0
 800a210:	9000      	str	r0, [sp, #0]
 800a212:	2300      	movs	r3, #0
 800a214:	4630      	mov	r0, r6
 800a216:	4639      	mov	r1, r7
 800a218:	f7f6 fc80 	bl	8000b1c <__aeabi_dcmplt>
 800a21c:	b150      	cbz	r0, 800a234 <_dtoa_r+0x184>
 800a21e:	9800      	ldr	r0, [sp, #0]
 800a220:	f7f6 f9a0 	bl	8000564 <__aeabi_i2d>
 800a224:	4632      	mov	r2, r6
 800a226:	463b      	mov	r3, r7
 800a228:	f7f6 fc6e 	bl	8000b08 <__aeabi_dcmpeq>
 800a22c:	b910      	cbnz	r0, 800a234 <_dtoa_r+0x184>
 800a22e:	9b00      	ldr	r3, [sp, #0]
 800a230:	3b01      	subs	r3, #1
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	9b00      	ldr	r3, [sp, #0]
 800a236:	2b16      	cmp	r3, #22
 800a238:	d85a      	bhi.n	800a2f0 <_dtoa_r+0x240>
 800a23a:	9a00      	ldr	r2, [sp, #0]
 800a23c:	4b57      	ldr	r3, [pc, #348]	; (800a39c <_dtoa_r+0x2ec>)
 800a23e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a246:	ec51 0b19 	vmov	r0, r1, d9
 800a24a:	f7f6 fc67 	bl	8000b1c <__aeabi_dcmplt>
 800a24e:	2800      	cmp	r0, #0
 800a250:	d050      	beq.n	800a2f4 <_dtoa_r+0x244>
 800a252:	9b00      	ldr	r3, [sp, #0]
 800a254:	3b01      	subs	r3, #1
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	2300      	movs	r3, #0
 800a25a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a25c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a25e:	1b5d      	subs	r5, r3, r5
 800a260:	1e6b      	subs	r3, r5, #1
 800a262:	9305      	str	r3, [sp, #20]
 800a264:	bf45      	ittet	mi
 800a266:	f1c5 0301 	rsbmi	r3, r5, #1
 800a26a:	9304      	strmi	r3, [sp, #16]
 800a26c:	2300      	movpl	r3, #0
 800a26e:	2300      	movmi	r3, #0
 800a270:	bf4c      	ite	mi
 800a272:	9305      	strmi	r3, [sp, #20]
 800a274:	9304      	strpl	r3, [sp, #16]
 800a276:	9b00      	ldr	r3, [sp, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	db3d      	blt.n	800a2f8 <_dtoa_r+0x248>
 800a27c:	9b05      	ldr	r3, [sp, #20]
 800a27e:	9a00      	ldr	r2, [sp, #0]
 800a280:	920a      	str	r2, [sp, #40]	; 0x28
 800a282:	4413      	add	r3, r2
 800a284:	9305      	str	r3, [sp, #20]
 800a286:	2300      	movs	r3, #0
 800a288:	9307      	str	r3, [sp, #28]
 800a28a:	9b06      	ldr	r3, [sp, #24]
 800a28c:	2b09      	cmp	r3, #9
 800a28e:	f200 8089 	bhi.w	800a3a4 <_dtoa_r+0x2f4>
 800a292:	2b05      	cmp	r3, #5
 800a294:	bfc4      	itt	gt
 800a296:	3b04      	subgt	r3, #4
 800a298:	9306      	strgt	r3, [sp, #24]
 800a29a:	9b06      	ldr	r3, [sp, #24]
 800a29c:	f1a3 0302 	sub.w	r3, r3, #2
 800a2a0:	bfcc      	ite	gt
 800a2a2:	2500      	movgt	r5, #0
 800a2a4:	2501      	movle	r5, #1
 800a2a6:	2b03      	cmp	r3, #3
 800a2a8:	f200 8087 	bhi.w	800a3ba <_dtoa_r+0x30a>
 800a2ac:	e8df f003 	tbb	[pc, r3]
 800a2b0:	59383a2d 	.word	0x59383a2d
 800a2b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a2b8:	441d      	add	r5, r3
 800a2ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a2be:	2b20      	cmp	r3, #32
 800a2c0:	bfc1      	itttt	gt
 800a2c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a2c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a2ca:	fa0b f303 	lslgt.w	r3, fp, r3
 800a2ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a2d2:	bfda      	itte	le
 800a2d4:	f1c3 0320 	rsble	r3, r3, #32
 800a2d8:	fa06 f003 	lslle.w	r0, r6, r3
 800a2dc:	4318      	orrgt	r0, r3
 800a2de:	f7f6 f931 	bl	8000544 <__aeabi_ui2d>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	4606      	mov	r6, r0
 800a2e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a2ea:	3d01      	subs	r5, #1
 800a2ec:	930e      	str	r3, [sp, #56]	; 0x38
 800a2ee:	e76a      	b.n	800a1c6 <_dtoa_r+0x116>
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	e7b2      	b.n	800a25a <_dtoa_r+0x1aa>
 800a2f4:	900b      	str	r0, [sp, #44]	; 0x2c
 800a2f6:	e7b1      	b.n	800a25c <_dtoa_r+0x1ac>
 800a2f8:	9b04      	ldr	r3, [sp, #16]
 800a2fa:	9a00      	ldr	r2, [sp, #0]
 800a2fc:	1a9b      	subs	r3, r3, r2
 800a2fe:	9304      	str	r3, [sp, #16]
 800a300:	4253      	negs	r3, r2
 800a302:	9307      	str	r3, [sp, #28]
 800a304:	2300      	movs	r3, #0
 800a306:	930a      	str	r3, [sp, #40]	; 0x28
 800a308:	e7bf      	b.n	800a28a <_dtoa_r+0x1da>
 800a30a:	2300      	movs	r3, #0
 800a30c:	9308      	str	r3, [sp, #32]
 800a30e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a310:	2b00      	cmp	r3, #0
 800a312:	dc55      	bgt.n	800a3c0 <_dtoa_r+0x310>
 800a314:	2301      	movs	r3, #1
 800a316:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a31a:	461a      	mov	r2, r3
 800a31c:	9209      	str	r2, [sp, #36]	; 0x24
 800a31e:	e00c      	b.n	800a33a <_dtoa_r+0x28a>
 800a320:	2301      	movs	r3, #1
 800a322:	e7f3      	b.n	800a30c <_dtoa_r+0x25c>
 800a324:	2300      	movs	r3, #0
 800a326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a328:	9308      	str	r3, [sp, #32]
 800a32a:	9b00      	ldr	r3, [sp, #0]
 800a32c:	4413      	add	r3, r2
 800a32e:	9302      	str	r3, [sp, #8]
 800a330:	3301      	adds	r3, #1
 800a332:	2b01      	cmp	r3, #1
 800a334:	9303      	str	r3, [sp, #12]
 800a336:	bfb8      	it	lt
 800a338:	2301      	movlt	r3, #1
 800a33a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a33c:	2200      	movs	r2, #0
 800a33e:	6042      	str	r2, [r0, #4]
 800a340:	2204      	movs	r2, #4
 800a342:	f102 0614 	add.w	r6, r2, #20
 800a346:	429e      	cmp	r6, r3
 800a348:	6841      	ldr	r1, [r0, #4]
 800a34a:	d93d      	bls.n	800a3c8 <_dtoa_r+0x318>
 800a34c:	4620      	mov	r0, r4
 800a34e:	f000 fed7 	bl	800b100 <_Balloc>
 800a352:	9001      	str	r0, [sp, #4]
 800a354:	2800      	cmp	r0, #0
 800a356:	d13b      	bne.n	800a3d0 <_dtoa_r+0x320>
 800a358:	4b11      	ldr	r3, [pc, #68]	; (800a3a0 <_dtoa_r+0x2f0>)
 800a35a:	4602      	mov	r2, r0
 800a35c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a360:	e6c0      	b.n	800a0e4 <_dtoa_r+0x34>
 800a362:	2301      	movs	r3, #1
 800a364:	e7df      	b.n	800a326 <_dtoa_r+0x276>
 800a366:	bf00      	nop
 800a368:	636f4361 	.word	0x636f4361
 800a36c:	3fd287a7 	.word	0x3fd287a7
 800a370:	8b60c8b3 	.word	0x8b60c8b3
 800a374:	3fc68a28 	.word	0x3fc68a28
 800a378:	509f79fb 	.word	0x509f79fb
 800a37c:	3fd34413 	.word	0x3fd34413
 800a380:	0800e3e9 	.word	0x0800e3e9
 800a384:	0800e400 	.word	0x0800e400
 800a388:	7ff00000 	.word	0x7ff00000
 800a38c:	0800e3e5 	.word	0x0800e3e5
 800a390:	0800e3dc 	.word	0x0800e3dc
 800a394:	0800e3b9 	.word	0x0800e3b9
 800a398:	3ff80000 	.word	0x3ff80000
 800a39c:	0800e550 	.word	0x0800e550
 800a3a0:	0800e45b 	.word	0x0800e45b
 800a3a4:	2501      	movs	r5, #1
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	9306      	str	r3, [sp, #24]
 800a3aa:	9508      	str	r5, [sp, #32]
 800a3ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	2312      	movs	r3, #18
 800a3b8:	e7b0      	b.n	800a31c <_dtoa_r+0x26c>
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	9308      	str	r3, [sp, #32]
 800a3be:	e7f5      	b.n	800a3ac <_dtoa_r+0x2fc>
 800a3c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a3c6:	e7b8      	b.n	800a33a <_dtoa_r+0x28a>
 800a3c8:	3101      	adds	r1, #1
 800a3ca:	6041      	str	r1, [r0, #4]
 800a3cc:	0052      	lsls	r2, r2, #1
 800a3ce:	e7b8      	b.n	800a342 <_dtoa_r+0x292>
 800a3d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3d2:	9a01      	ldr	r2, [sp, #4]
 800a3d4:	601a      	str	r2, [r3, #0]
 800a3d6:	9b03      	ldr	r3, [sp, #12]
 800a3d8:	2b0e      	cmp	r3, #14
 800a3da:	f200 809d 	bhi.w	800a518 <_dtoa_r+0x468>
 800a3de:	2d00      	cmp	r5, #0
 800a3e0:	f000 809a 	beq.w	800a518 <_dtoa_r+0x468>
 800a3e4:	9b00      	ldr	r3, [sp, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	dd32      	ble.n	800a450 <_dtoa_r+0x3a0>
 800a3ea:	4ab7      	ldr	r2, [pc, #732]	; (800a6c8 <_dtoa_r+0x618>)
 800a3ec:	f003 030f 	and.w	r3, r3, #15
 800a3f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a3f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3f8:	9b00      	ldr	r3, [sp, #0]
 800a3fa:	05d8      	lsls	r0, r3, #23
 800a3fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a400:	d516      	bpl.n	800a430 <_dtoa_r+0x380>
 800a402:	4bb2      	ldr	r3, [pc, #712]	; (800a6cc <_dtoa_r+0x61c>)
 800a404:	ec51 0b19 	vmov	r0, r1, d9
 800a408:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a40c:	f7f6 fa3e 	bl	800088c <__aeabi_ddiv>
 800a410:	f007 070f 	and.w	r7, r7, #15
 800a414:	4682      	mov	sl, r0
 800a416:	468b      	mov	fp, r1
 800a418:	2503      	movs	r5, #3
 800a41a:	4eac      	ldr	r6, [pc, #688]	; (800a6cc <_dtoa_r+0x61c>)
 800a41c:	b957      	cbnz	r7, 800a434 <_dtoa_r+0x384>
 800a41e:	4642      	mov	r2, r8
 800a420:	464b      	mov	r3, r9
 800a422:	4650      	mov	r0, sl
 800a424:	4659      	mov	r1, fp
 800a426:	f7f6 fa31 	bl	800088c <__aeabi_ddiv>
 800a42a:	4682      	mov	sl, r0
 800a42c:	468b      	mov	fp, r1
 800a42e:	e028      	b.n	800a482 <_dtoa_r+0x3d2>
 800a430:	2502      	movs	r5, #2
 800a432:	e7f2      	b.n	800a41a <_dtoa_r+0x36a>
 800a434:	07f9      	lsls	r1, r7, #31
 800a436:	d508      	bpl.n	800a44a <_dtoa_r+0x39a>
 800a438:	4640      	mov	r0, r8
 800a43a:	4649      	mov	r1, r9
 800a43c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a440:	f7f6 f8fa 	bl	8000638 <__aeabi_dmul>
 800a444:	3501      	adds	r5, #1
 800a446:	4680      	mov	r8, r0
 800a448:	4689      	mov	r9, r1
 800a44a:	107f      	asrs	r7, r7, #1
 800a44c:	3608      	adds	r6, #8
 800a44e:	e7e5      	b.n	800a41c <_dtoa_r+0x36c>
 800a450:	f000 809b 	beq.w	800a58a <_dtoa_r+0x4da>
 800a454:	9b00      	ldr	r3, [sp, #0]
 800a456:	4f9d      	ldr	r7, [pc, #628]	; (800a6cc <_dtoa_r+0x61c>)
 800a458:	425e      	negs	r6, r3
 800a45a:	4b9b      	ldr	r3, [pc, #620]	; (800a6c8 <_dtoa_r+0x618>)
 800a45c:	f006 020f 	and.w	r2, r6, #15
 800a460:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a468:	ec51 0b19 	vmov	r0, r1, d9
 800a46c:	f7f6 f8e4 	bl	8000638 <__aeabi_dmul>
 800a470:	1136      	asrs	r6, r6, #4
 800a472:	4682      	mov	sl, r0
 800a474:	468b      	mov	fp, r1
 800a476:	2300      	movs	r3, #0
 800a478:	2502      	movs	r5, #2
 800a47a:	2e00      	cmp	r6, #0
 800a47c:	d17a      	bne.n	800a574 <_dtoa_r+0x4c4>
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1d3      	bne.n	800a42a <_dtoa_r+0x37a>
 800a482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a484:	2b00      	cmp	r3, #0
 800a486:	f000 8082 	beq.w	800a58e <_dtoa_r+0x4de>
 800a48a:	4b91      	ldr	r3, [pc, #580]	; (800a6d0 <_dtoa_r+0x620>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	4650      	mov	r0, sl
 800a490:	4659      	mov	r1, fp
 800a492:	f7f6 fb43 	bl	8000b1c <__aeabi_dcmplt>
 800a496:	2800      	cmp	r0, #0
 800a498:	d079      	beq.n	800a58e <_dtoa_r+0x4de>
 800a49a:	9b03      	ldr	r3, [sp, #12]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d076      	beq.n	800a58e <_dtoa_r+0x4de>
 800a4a0:	9b02      	ldr	r3, [sp, #8]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	dd36      	ble.n	800a514 <_dtoa_r+0x464>
 800a4a6:	9b00      	ldr	r3, [sp, #0]
 800a4a8:	4650      	mov	r0, sl
 800a4aa:	4659      	mov	r1, fp
 800a4ac:	1e5f      	subs	r7, r3, #1
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	4b88      	ldr	r3, [pc, #544]	; (800a6d4 <_dtoa_r+0x624>)
 800a4b2:	f7f6 f8c1 	bl	8000638 <__aeabi_dmul>
 800a4b6:	9e02      	ldr	r6, [sp, #8]
 800a4b8:	4682      	mov	sl, r0
 800a4ba:	468b      	mov	fp, r1
 800a4bc:	3501      	adds	r5, #1
 800a4be:	4628      	mov	r0, r5
 800a4c0:	f7f6 f850 	bl	8000564 <__aeabi_i2d>
 800a4c4:	4652      	mov	r2, sl
 800a4c6:	465b      	mov	r3, fp
 800a4c8:	f7f6 f8b6 	bl	8000638 <__aeabi_dmul>
 800a4cc:	4b82      	ldr	r3, [pc, #520]	; (800a6d8 <_dtoa_r+0x628>)
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f7f5 fefc 	bl	80002cc <__adddf3>
 800a4d4:	46d0      	mov	r8, sl
 800a4d6:	46d9      	mov	r9, fp
 800a4d8:	4682      	mov	sl, r0
 800a4da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a4de:	2e00      	cmp	r6, #0
 800a4e0:	d158      	bne.n	800a594 <_dtoa_r+0x4e4>
 800a4e2:	4b7e      	ldr	r3, [pc, #504]	; (800a6dc <_dtoa_r+0x62c>)
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	4640      	mov	r0, r8
 800a4e8:	4649      	mov	r1, r9
 800a4ea:	f7f5 feed 	bl	80002c8 <__aeabi_dsub>
 800a4ee:	4652      	mov	r2, sl
 800a4f0:	465b      	mov	r3, fp
 800a4f2:	4680      	mov	r8, r0
 800a4f4:	4689      	mov	r9, r1
 800a4f6:	f7f6 fb2f 	bl	8000b58 <__aeabi_dcmpgt>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	f040 8295 	bne.w	800aa2a <_dtoa_r+0x97a>
 800a500:	4652      	mov	r2, sl
 800a502:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a506:	4640      	mov	r0, r8
 800a508:	4649      	mov	r1, r9
 800a50a:	f7f6 fb07 	bl	8000b1c <__aeabi_dcmplt>
 800a50e:	2800      	cmp	r0, #0
 800a510:	f040 8289 	bne.w	800aa26 <_dtoa_r+0x976>
 800a514:	ec5b ab19 	vmov	sl, fp, d9
 800a518:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	f2c0 8148 	blt.w	800a7b0 <_dtoa_r+0x700>
 800a520:	9a00      	ldr	r2, [sp, #0]
 800a522:	2a0e      	cmp	r2, #14
 800a524:	f300 8144 	bgt.w	800a7b0 <_dtoa_r+0x700>
 800a528:	4b67      	ldr	r3, [pc, #412]	; (800a6c8 <_dtoa_r+0x618>)
 800a52a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a52e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a534:	2b00      	cmp	r3, #0
 800a536:	f280 80d5 	bge.w	800a6e4 <_dtoa_r+0x634>
 800a53a:	9b03      	ldr	r3, [sp, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f300 80d1 	bgt.w	800a6e4 <_dtoa_r+0x634>
 800a542:	f040 826f 	bne.w	800aa24 <_dtoa_r+0x974>
 800a546:	4b65      	ldr	r3, [pc, #404]	; (800a6dc <_dtoa_r+0x62c>)
 800a548:	2200      	movs	r2, #0
 800a54a:	4640      	mov	r0, r8
 800a54c:	4649      	mov	r1, r9
 800a54e:	f7f6 f873 	bl	8000638 <__aeabi_dmul>
 800a552:	4652      	mov	r2, sl
 800a554:	465b      	mov	r3, fp
 800a556:	f7f6 faf5 	bl	8000b44 <__aeabi_dcmpge>
 800a55a:	9e03      	ldr	r6, [sp, #12]
 800a55c:	4637      	mov	r7, r6
 800a55e:	2800      	cmp	r0, #0
 800a560:	f040 8245 	bne.w	800a9ee <_dtoa_r+0x93e>
 800a564:	9d01      	ldr	r5, [sp, #4]
 800a566:	2331      	movs	r3, #49	; 0x31
 800a568:	f805 3b01 	strb.w	r3, [r5], #1
 800a56c:	9b00      	ldr	r3, [sp, #0]
 800a56e:	3301      	adds	r3, #1
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	e240      	b.n	800a9f6 <_dtoa_r+0x946>
 800a574:	07f2      	lsls	r2, r6, #31
 800a576:	d505      	bpl.n	800a584 <_dtoa_r+0x4d4>
 800a578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a57c:	f7f6 f85c 	bl	8000638 <__aeabi_dmul>
 800a580:	3501      	adds	r5, #1
 800a582:	2301      	movs	r3, #1
 800a584:	1076      	asrs	r6, r6, #1
 800a586:	3708      	adds	r7, #8
 800a588:	e777      	b.n	800a47a <_dtoa_r+0x3ca>
 800a58a:	2502      	movs	r5, #2
 800a58c:	e779      	b.n	800a482 <_dtoa_r+0x3d2>
 800a58e:	9f00      	ldr	r7, [sp, #0]
 800a590:	9e03      	ldr	r6, [sp, #12]
 800a592:	e794      	b.n	800a4be <_dtoa_r+0x40e>
 800a594:	9901      	ldr	r1, [sp, #4]
 800a596:	4b4c      	ldr	r3, [pc, #304]	; (800a6c8 <_dtoa_r+0x618>)
 800a598:	4431      	add	r1, r6
 800a59a:	910d      	str	r1, [sp, #52]	; 0x34
 800a59c:	9908      	ldr	r1, [sp, #32]
 800a59e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a5a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a5a6:	2900      	cmp	r1, #0
 800a5a8:	d043      	beq.n	800a632 <_dtoa_r+0x582>
 800a5aa:	494d      	ldr	r1, [pc, #308]	; (800a6e0 <_dtoa_r+0x630>)
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	f7f6 f96d 	bl	800088c <__aeabi_ddiv>
 800a5b2:	4652      	mov	r2, sl
 800a5b4:	465b      	mov	r3, fp
 800a5b6:	f7f5 fe87 	bl	80002c8 <__aeabi_dsub>
 800a5ba:	9d01      	ldr	r5, [sp, #4]
 800a5bc:	4682      	mov	sl, r0
 800a5be:	468b      	mov	fp, r1
 800a5c0:	4649      	mov	r1, r9
 800a5c2:	4640      	mov	r0, r8
 800a5c4:	f7f6 fae8 	bl	8000b98 <__aeabi_d2iz>
 800a5c8:	4606      	mov	r6, r0
 800a5ca:	f7f5 ffcb 	bl	8000564 <__aeabi_i2d>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	4640      	mov	r0, r8
 800a5d4:	4649      	mov	r1, r9
 800a5d6:	f7f5 fe77 	bl	80002c8 <__aeabi_dsub>
 800a5da:	3630      	adds	r6, #48	; 0x30
 800a5dc:	f805 6b01 	strb.w	r6, [r5], #1
 800a5e0:	4652      	mov	r2, sl
 800a5e2:	465b      	mov	r3, fp
 800a5e4:	4680      	mov	r8, r0
 800a5e6:	4689      	mov	r9, r1
 800a5e8:	f7f6 fa98 	bl	8000b1c <__aeabi_dcmplt>
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	d163      	bne.n	800a6b8 <_dtoa_r+0x608>
 800a5f0:	4642      	mov	r2, r8
 800a5f2:	464b      	mov	r3, r9
 800a5f4:	4936      	ldr	r1, [pc, #216]	; (800a6d0 <_dtoa_r+0x620>)
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	f7f5 fe66 	bl	80002c8 <__aeabi_dsub>
 800a5fc:	4652      	mov	r2, sl
 800a5fe:	465b      	mov	r3, fp
 800a600:	f7f6 fa8c 	bl	8000b1c <__aeabi_dcmplt>
 800a604:	2800      	cmp	r0, #0
 800a606:	f040 80b5 	bne.w	800a774 <_dtoa_r+0x6c4>
 800a60a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a60c:	429d      	cmp	r5, r3
 800a60e:	d081      	beq.n	800a514 <_dtoa_r+0x464>
 800a610:	4b30      	ldr	r3, [pc, #192]	; (800a6d4 <_dtoa_r+0x624>)
 800a612:	2200      	movs	r2, #0
 800a614:	4650      	mov	r0, sl
 800a616:	4659      	mov	r1, fp
 800a618:	f7f6 f80e 	bl	8000638 <__aeabi_dmul>
 800a61c:	4b2d      	ldr	r3, [pc, #180]	; (800a6d4 <_dtoa_r+0x624>)
 800a61e:	4682      	mov	sl, r0
 800a620:	468b      	mov	fp, r1
 800a622:	4640      	mov	r0, r8
 800a624:	4649      	mov	r1, r9
 800a626:	2200      	movs	r2, #0
 800a628:	f7f6 f806 	bl	8000638 <__aeabi_dmul>
 800a62c:	4680      	mov	r8, r0
 800a62e:	4689      	mov	r9, r1
 800a630:	e7c6      	b.n	800a5c0 <_dtoa_r+0x510>
 800a632:	4650      	mov	r0, sl
 800a634:	4659      	mov	r1, fp
 800a636:	f7f5 ffff 	bl	8000638 <__aeabi_dmul>
 800a63a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a63c:	9d01      	ldr	r5, [sp, #4]
 800a63e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a640:	4682      	mov	sl, r0
 800a642:	468b      	mov	fp, r1
 800a644:	4649      	mov	r1, r9
 800a646:	4640      	mov	r0, r8
 800a648:	f7f6 faa6 	bl	8000b98 <__aeabi_d2iz>
 800a64c:	4606      	mov	r6, r0
 800a64e:	f7f5 ff89 	bl	8000564 <__aeabi_i2d>
 800a652:	3630      	adds	r6, #48	; 0x30
 800a654:	4602      	mov	r2, r0
 800a656:	460b      	mov	r3, r1
 800a658:	4640      	mov	r0, r8
 800a65a:	4649      	mov	r1, r9
 800a65c:	f7f5 fe34 	bl	80002c8 <__aeabi_dsub>
 800a660:	f805 6b01 	strb.w	r6, [r5], #1
 800a664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a666:	429d      	cmp	r5, r3
 800a668:	4680      	mov	r8, r0
 800a66a:	4689      	mov	r9, r1
 800a66c:	f04f 0200 	mov.w	r2, #0
 800a670:	d124      	bne.n	800a6bc <_dtoa_r+0x60c>
 800a672:	4b1b      	ldr	r3, [pc, #108]	; (800a6e0 <_dtoa_r+0x630>)
 800a674:	4650      	mov	r0, sl
 800a676:	4659      	mov	r1, fp
 800a678:	f7f5 fe28 	bl	80002cc <__adddf3>
 800a67c:	4602      	mov	r2, r0
 800a67e:	460b      	mov	r3, r1
 800a680:	4640      	mov	r0, r8
 800a682:	4649      	mov	r1, r9
 800a684:	f7f6 fa68 	bl	8000b58 <__aeabi_dcmpgt>
 800a688:	2800      	cmp	r0, #0
 800a68a:	d173      	bne.n	800a774 <_dtoa_r+0x6c4>
 800a68c:	4652      	mov	r2, sl
 800a68e:	465b      	mov	r3, fp
 800a690:	4913      	ldr	r1, [pc, #76]	; (800a6e0 <_dtoa_r+0x630>)
 800a692:	2000      	movs	r0, #0
 800a694:	f7f5 fe18 	bl	80002c8 <__aeabi_dsub>
 800a698:	4602      	mov	r2, r0
 800a69a:	460b      	mov	r3, r1
 800a69c:	4640      	mov	r0, r8
 800a69e:	4649      	mov	r1, r9
 800a6a0:	f7f6 fa3c 	bl	8000b1c <__aeabi_dcmplt>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	f43f af35 	beq.w	800a514 <_dtoa_r+0x464>
 800a6aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a6ac:	1e6b      	subs	r3, r5, #1
 800a6ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a6b4:	2b30      	cmp	r3, #48	; 0x30
 800a6b6:	d0f8      	beq.n	800a6aa <_dtoa_r+0x5fa>
 800a6b8:	9700      	str	r7, [sp, #0]
 800a6ba:	e049      	b.n	800a750 <_dtoa_r+0x6a0>
 800a6bc:	4b05      	ldr	r3, [pc, #20]	; (800a6d4 <_dtoa_r+0x624>)
 800a6be:	f7f5 ffbb 	bl	8000638 <__aeabi_dmul>
 800a6c2:	4680      	mov	r8, r0
 800a6c4:	4689      	mov	r9, r1
 800a6c6:	e7bd      	b.n	800a644 <_dtoa_r+0x594>
 800a6c8:	0800e550 	.word	0x0800e550
 800a6cc:	0800e528 	.word	0x0800e528
 800a6d0:	3ff00000 	.word	0x3ff00000
 800a6d4:	40240000 	.word	0x40240000
 800a6d8:	401c0000 	.word	0x401c0000
 800a6dc:	40140000 	.word	0x40140000
 800a6e0:	3fe00000 	.word	0x3fe00000
 800a6e4:	9d01      	ldr	r5, [sp, #4]
 800a6e6:	4656      	mov	r6, sl
 800a6e8:	465f      	mov	r7, fp
 800a6ea:	4642      	mov	r2, r8
 800a6ec:	464b      	mov	r3, r9
 800a6ee:	4630      	mov	r0, r6
 800a6f0:	4639      	mov	r1, r7
 800a6f2:	f7f6 f8cb 	bl	800088c <__aeabi_ddiv>
 800a6f6:	f7f6 fa4f 	bl	8000b98 <__aeabi_d2iz>
 800a6fa:	4682      	mov	sl, r0
 800a6fc:	f7f5 ff32 	bl	8000564 <__aeabi_i2d>
 800a700:	4642      	mov	r2, r8
 800a702:	464b      	mov	r3, r9
 800a704:	f7f5 ff98 	bl	8000638 <__aeabi_dmul>
 800a708:	4602      	mov	r2, r0
 800a70a:	460b      	mov	r3, r1
 800a70c:	4630      	mov	r0, r6
 800a70e:	4639      	mov	r1, r7
 800a710:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a714:	f7f5 fdd8 	bl	80002c8 <__aeabi_dsub>
 800a718:	f805 6b01 	strb.w	r6, [r5], #1
 800a71c:	9e01      	ldr	r6, [sp, #4]
 800a71e:	9f03      	ldr	r7, [sp, #12]
 800a720:	1bae      	subs	r6, r5, r6
 800a722:	42b7      	cmp	r7, r6
 800a724:	4602      	mov	r2, r0
 800a726:	460b      	mov	r3, r1
 800a728:	d135      	bne.n	800a796 <_dtoa_r+0x6e6>
 800a72a:	f7f5 fdcf 	bl	80002cc <__adddf3>
 800a72e:	4642      	mov	r2, r8
 800a730:	464b      	mov	r3, r9
 800a732:	4606      	mov	r6, r0
 800a734:	460f      	mov	r7, r1
 800a736:	f7f6 fa0f 	bl	8000b58 <__aeabi_dcmpgt>
 800a73a:	b9d0      	cbnz	r0, 800a772 <_dtoa_r+0x6c2>
 800a73c:	4642      	mov	r2, r8
 800a73e:	464b      	mov	r3, r9
 800a740:	4630      	mov	r0, r6
 800a742:	4639      	mov	r1, r7
 800a744:	f7f6 f9e0 	bl	8000b08 <__aeabi_dcmpeq>
 800a748:	b110      	cbz	r0, 800a750 <_dtoa_r+0x6a0>
 800a74a:	f01a 0f01 	tst.w	sl, #1
 800a74e:	d110      	bne.n	800a772 <_dtoa_r+0x6c2>
 800a750:	4620      	mov	r0, r4
 800a752:	ee18 1a10 	vmov	r1, s16
 800a756:	f000 fd13 	bl	800b180 <_Bfree>
 800a75a:	2300      	movs	r3, #0
 800a75c:	9800      	ldr	r0, [sp, #0]
 800a75e:	702b      	strb	r3, [r5, #0]
 800a760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a762:	3001      	adds	r0, #1
 800a764:	6018      	str	r0, [r3, #0]
 800a766:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f43f acf1 	beq.w	800a150 <_dtoa_r+0xa0>
 800a76e:	601d      	str	r5, [r3, #0]
 800a770:	e4ee      	b.n	800a150 <_dtoa_r+0xa0>
 800a772:	9f00      	ldr	r7, [sp, #0]
 800a774:	462b      	mov	r3, r5
 800a776:	461d      	mov	r5, r3
 800a778:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a77c:	2a39      	cmp	r2, #57	; 0x39
 800a77e:	d106      	bne.n	800a78e <_dtoa_r+0x6de>
 800a780:	9a01      	ldr	r2, [sp, #4]
 800a782:	429a      	cmp	r2, r3
 800a784:	d1f7      	bne.n	800a776 <_dtoa_r+0x6c6>
 800a786:	9901      	ldr	r1, [sp, #4]
 800a788:	2230      	movs	r2, #48	; 0x30
 800a78a:	3701      	adds	r7, #1
 800a78c:	700a      	strb	r2, [r1, #0]
 800a78e:	781a      	ldrb	r2, [r3, #0]
 800a790:	3201      	adds	r2, #1
 800a792:	701a      	strb	r2, [r3, #0]
 800a794:	e790      	b.n	800a6b8 <_dtoa_r+0x608>
 800a796:	4ba6      	ldr	r3, [pc, #664]	; (800aa30 <_dtoa_r+0x980>)
 800a798:	2200      	movs	r2, #0
 800a79a:	f7f5 ff4d 	bl	8000638 <__aeabi_dmul>
 800a79e:	2200      	movs	r2, #0
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	4606      	mov	r6, r0
 800a7a4:	460f      	mov	r7, r1
 800a7a6:	f7f6 f9af 	bl	8000b08 <__aeabi_dcmpeq>
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	d09d      	beq.n	800a6ea <_dtoa_r+0x63a>
 800a7ae:	e7cf      	b.n	800a750 <_dtoa_r+0x6a0>
 800a7b0:	9a08      	ldr	r2, [sp, #32]
 800a7b2:	2a00      	cmp	r2, #0
 800a7b4:	f000 80d7 	beq.w	800a966 <_dtoa_r+0x8b6>
 800a7b8:	9a06      	ldr	r2, [sp, #24]
 800a7ba:	2a01      	cmp	r2, #1
 800a7bc:	f300 80ba 	bgt.w	800a934 <_dtoa_r+0x884>
 800a7c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7c2:	2a00      	cmp	r2, #0
 800a7c4:	f000 80b2 	beq.w	800a92c <_dtoa_r+0x87c>
 800a7c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a7cc:	9e07      	ldr	r6, [sp, #28]
 800a7ce:	9d04      	ldr	r5, [sp, #16]
 800a7d0:	9a04      	ldr	r2, [sp, #16]
 800a7d2:	441a      	add	r2, r3
 800a7d4:	9204      	str	r2, [sp, #16]
 800a7d6:	9a05      	ldr	r2, [sp, #20]
 800a7d8:	2101      	movs	r1, #1
 800a7da:	441a      	add	r2, r3
 800a7dc:	4620      	mov	r0, r4
 800a7de:	9205      	str	r2, [sp, #20]
 800a7e0:	f000 fd86 	bl	800b2f0 <__i2b>
 800a7e4:	4607      	mov	r7, r0
 800a7e6:	2d00      	cmp	r5, #0
 800a7e8:	dd0c      	ble.n	800a804 <_dtoa_r+0x754>
 800a7ea:	9b05      	ldr	r3, [sp, #20]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	dd09      	ble.n	800a804 <_dtoa_r+0x754>
 800a7f0:	42ab      	cmp	r3, r5
 800a7f2:	9a04      	ldr	r2, [sp, #16]
 800a7f4:	bfa8      	it	ge
 800a7f6:	462b      	movge	r3, r5
 800a7f8:	1ad2      	subs	r2, r2, r3
 800a7fa:	9204      	str	r2, [sp, #16]
 800a7fc:	9a05      	ldr	r2, [sp, #20]
 800a7fe:	1aed      	subs	r5, r5, r3
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	9305      	str	r3, [sp, #20]
 800a804:	9b07      	ldr	r3, [sp, #28]
 800a806:	b31b      	cbz	r3, 800a850 <_dtoa_r+0x7a0>
 800a808:	9b08      	ldr	r3, [sp, #32]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	f000 80af 	beq.w	800a96e <_dtoa_r+0x8be>
 800a810:	2e00      	cmp	r6, #0
 800a812:	dd13      	ble.n	800a83c <_dtoa_r+0x78c>
 800a814:	4639      	mov	r1, r7
 800a816:	4632      	mov	r2, r6
 800a818:	4620      	mov	r0, r4
 800a81a:	f000 fe29 	bl	800b470 <__pow5mult>
 800a81e:	ee18 2a10 	vmov	r2, s16
 800a822:	4601      	mov	r1, r0
 800a824:	4607      	mov	r7, r0
 800a826:	4620      	mov	r0, r4
 800a828:	f000 fd78 	bl	800b31c <__multiply>
 800a82c:	ee18 1a10 	vmov	r1, s16
 800a830:	4680      	mov	r8, r0
 800a832:	4620      	mov	r0, r4
 800a834:	f000 fca4 	bl	800b180 <_Bfree>
 800a838:	ee08 8a10 	vmov	s16, r8
 800a83c:	9b07      	ldr	r3, [sp, #28]
 800a83e:	1b9a      	subs	r2, r3, r6
 800a840:	d006      	beq.n	800a850 <_dtoa_r+0x7a0>
 800a842:	ee18 1a10 	vmov	r1, s16
 800a846:	4620      	mov	r0, r4
 800a848:	f000 fe12 	bl	800b470 <__pow5mult>
 800a84c:	ee08 0a10 	vmov	s16, r0
 800a850:	2101      	movs	r1, #1
 800a852:	4620      	mov	r0, r4
 800a854:	f000 fd4c 	bl	800b2f0 <__i2b>
 800a858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	4606      	mov	r6, r0
 800a85e:	f340 8088 	ble.w	800a972 <_dtoa_r+0x8c2>
 800a862:	461a      	mov	r2, r3
 800a864:	4601      	mov	r1, r0
 800a866:	4620      	mov	r0, r4
 800a868:	f000 fe02 	bl	800b470 <__pow5mult>
 800a86c:	9b06      	ldr	r3, [sp, #24]
 800a86e:	2b01      	cmp	r3, #1
 800a870:	4606      	mov	r6, r0
 800a872:	f340 8081 	ble.w	800a978 <_dtoa_r+0x8c8>
 800a876:	f04f 0800 	mov.w	r8, #0
 800a87a:	6933      	ldr	r3, [r6, #16]
 800a87c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a880:	6918      	ldr	r0, [r3, #16]
 800a882:	f000 fce5 	bl	800b250 <__hi0bits>
 800a886:	f1c0 0020 	rsb	r0, r0, #32
 800a88a:	9b05      	ldr	r3, [sp, #20]
 800a88c:	4418      	add	r0, r3
 800a88e:	f010 001f 	ands.w	r0, r0, #31
 800a892:	f000 8092 	beq.w	800a9ba <_dtoa_r+0x90a>
 800a896:	f1c0 0320 	rsb	r3, r0, #32
 800a89a:	2b04      	cmp	r3, #4
 800a89c:	f340 808a 	ble.w	800a9b4 <_dtoa_r+0x904>
 800a8a0:	f1c0 001c 	rsb	r0, r0, #28
 800a8a4:	9b04      	ldr	r3, [sp, #16]
 800a8a6:	4403      	add	r3, r0
 800a8a8:	9304      	str	r3, [sp, #16]
 800a8aa:	9b05      	ldr	r3, [sp, #20]
 800a8ac:	4403      	add	r3, r0
 800a8ae:	4405      	add	r5, r0
 800a8b0:	9305      	str	r3, [sp, #20]
 800a8b2:	9b04      	ldr	r3, [sp, #16]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	dd07      	ble.n	800a8c8 <_dtoa_r+0x818>
 800a8b8:	ee18 1a10 	vmov	r1, s16
 800a8bc:	461a      	mov	r2, r3
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f000 fe30 	bl	800b524 <__lshift>
 800a8c4:	ee08 0a10 	vmov	s16, r0
 800a8c8:	9b05      	ldr	r3, [sp, #20]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	dd05      	ble.n	800a8da <_dtoa_r+0x82a>
 800a8ce:	4631      	mov	r1, r6
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	f000 fe26 	bl	800b524 <__lshift>
 800a8d8:	4606      	mov	r6, r0
 800a8da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d06e      	beq.n	800a9be <_dtoa_r+0x90e>
 800a8e0:	ee18 0a10 	vmov	r0, s16
 800a8e4:	4631      	mov	r1, r6
 800a8e6:	f000 fe8d 	bl	800b604 <__mcmp>
 800a8ea:	2800      	cmp	r0, #0
 800a8ec:	da67      	bge.n	800a9be <_dtoa_r+0x90e>
 800a8ee:	9b00      	ldr	r3, [sp, #0]
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	ee18 1a10 	vmov	r1, s16
 800a8f6:	9300      	str	r3, [sp, #0]
 800a8f8:	220a      	movs	r2, #10
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f000 fc61 	bl	800b1c4 <__multadd>
 800a902:	9b08      	ldr	r3, [sp, #32]
 800a904:	ee08 0a10 	vmov	s16, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	f000 81b1 	beq.w	800ac70 <_dtoa_r+0xbc0>
 800a90e:	2300      	movs	r3, #0
 800a910:	4639      	mov	r1, r7
 800a912:	220a      	movs	r2, #10
 800a914:	4620      	mov	r0, r4
 800a916:	f000 fc55 	bl	800b1c4 <__multadd>
 800a91a:	9b02      	ldr	r3, [sp, #8]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	4607      	mov	r7, r0
 800a920:	f300 808e 	bgt.w	800aa40 <_dtoa_r+0x990>
 800a924:	9b06      	ldr	r3, [sp, #24]
 800a926:	2b02      	cmp	r3, #2
 800a928:	dc51      	bgt.n	800a9ce <_dtoa_r+0x91e>
 800a92a:	e089      	b.n	800aa40 <_dtoa_r+0x990>
 800a92c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a92e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a932:	e74b      	b.n	800a7cc <_dtoa_r+0x71c>
 800a934:	9b03      	ldr	r3, [sp, #12]
 800a936:	1e5e      	subs	r6, r3, #1
 800a938:	9b07      	ldr	r3, [sp, #28]
 800a93a:	42b3      	cmp	r3, r6
 800a93c:	bfbf      	itttt	lt
 800a93e:	9b07      	ldrlt	r3, [sp, #28]
 800a940:	9607      	strlt	r6, [sp, #28]
 800a942:	1af2      	sublt	r2, r6, r3
 800a944:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a946:	bfb6      	itet	lt
 800a948:	189b      	addlt	r3, r3, r2
 800a94a:	1b9e      	subge	r6, r3, r6
 800a94c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a94e:	9b03      	ldr	r3, [sp, #12]
 800a950:	bfb8      	it	lt
 800a952:	2600      	movlt	r6, #0
 800a954:	2b00      	cmp	r3, #0
 800a956:	bfb7      	itett	lt
 800a958:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a95c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a960:	1a9d      	sublt	r5, r3, r2
 800a962:	2300      	movlt	r3, #0
 800a964:	e734      	b.n	800a7d0 <_dtoa_r+0x720>
 800a966:	9e07      	ldr	r6, [sp, #28]
 800a968:	9d04      	ldr	r5, [sp, #16]
 800a96a:	9f08      	ldr	r7, [sp, #32]
 800a96c:	e73b      	b.n	800a7e6 <_dtoa_r+0x736>
 800a96e:	9a07      	ldr	r2, [sp, #28]
 800a970:	e767      	b.n	800a842 <_dtoa_r+0x792>
 800a972:	9b06      	ldr	r3, [sp, #24]
 800a974:	2b01      	cmp	r3, #1
 800a976:	dc18      	bgt.n	800a9aa <_dtoa_r+0x8fa>
 800a978:	f1ba 0f00 	cmp.w	sl, #0
 800a97c:	d115      	bne.n	800a9aa <_dtoa_r+0x8fa>
 800a97e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a982:	b993      	cbnz	r3, 800a9aa <_dtoa_r+0x8fa>
 800a984:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a988:	0d1b      	lsrs	r3, r3, #20
 800a98a:	051b      	lsls	r3, r3, #20
 800a98c:	b183      	cbz	r3, 800a9b0 <_dtoa_r+0x900>
 800a98e:	9b04      	ldr	r3, [sp, #16]
 800a990:	3301      	adds	r3, #1
 800a992:	9304      	str	r3, [sp, #16]
 800a994:	9b05      	ldr	r3, [sp, #20]
 800a996:	3301      	adds	r3, #1
 800a998:	9305      	str	r3, [sp, #20]
 800a99a:	f04f 0801 	mov.w	r8, #1
 800a99e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f47f af6a 	bne.w	800a87a <_dtoa_r+0x7ca>
 800a9a6:	2001      	movs	r0, #1
 800a9a8:	e76f      	b.n	800a88a <_dtoa_r+0x7da>
 800a9aa:	f04f 0800 	mov.w	r8, #0
 800a9ae:	e7f6      	b.n	800a99e <_dtoa_r+0x8ee>
 800a9b0:	4698      	mov	r8, r3
 800a9b2:	e7f4      	b.n	800a99e <_dtoa_r+0x8ee>
 800a9b4:	f43f af7d 	beq.w	800a8b2 <_dtoa_r+0x802>
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	301c      	adds	r0, #28
 800a9bc:	e772      	b.n	800a8a4 <_dtoa_r+0x7f4>
 800a9be:	9b03      	ldr	r3, [sp, #12]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	dc37      	bgt.n	800aa34 <_dtoa_r+0x984>
 800a9c4:	9b06      	ldr	r3, [sp, #24]
 800a9c6:	2b02      	cmp	r3, #2
 800a9c8:	dd34      	ble.n	800aa34 <_dtoa_r+0x984>
 800a9ca:	9b03      	ldr	r3, [sp, #12]
 800a9cc:	9302      	str	r3, [sp, #8]
 800a9ce:	9b02      	ldr	r3, [sp, #8]
 800a9d0:	b96b      	cbnz	r3, 800a9ee <_dtoa_r+0x93e>
 800a9d2:	4631      	mov	r1, r6
 800a9d4:	2205      	movs	r2, #5
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	f000 fbf4 	bl	800b1c4 <__multadd>
 800a9dc:	4601      	mov	r1, r0
 800a9de:	4606      	mov	r6, r0
 800a9e0:	ee18 0a10 	vmov	r0, s16
 800a9e4:	f000 fe0e 	bl	800b604 <__mcmp>
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	f73f adbb 	bgt.w	800a564 <_dtoa_r+0x4b4>
 800a9ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9f0:	9d01      	ldr	r5, [sp, #4]
 800a9f2:	43db      	mvns	r3, r3
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	f04f 0800 	mov.w	r8, #0
 800a9fa:	4631      	mov	r1, r6
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	f000 fbbf 	bl	800b180 <_Bfree>
 800aa02:	2f00      	cmp	r7, #0
 800aa04:	f43f aea4 	beq.w	800a750 <_dtoa_r+0x6a0>
 800aa08:	f1b8 0f00 	cmp.w	r8, #0
 800aa0c:	d005      	beq.n	800aa1a <_dtoa_r+0x96a>
 800aa0e:	45b8      	cmp	r8, r7
 800aa10:	d003      	beq.n	800aa1a <_dtoa_r+0x96a>
 800aa12:	4641      	mov	r1, r8
 800aa14:	4620      	mov	r0, r4
 800aa16:	f000 fbb3 	bl	800b180 <_Bfree>
 800aa1a:	4639      	mov	r1, r7
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f000 fbaf 	bl	800b180 <_Bfree>
 800aa22:	e695      	b.n	800a750 <_dtoa_r+0x6a0>
 800aa24:	2600      	movs	r6, #0
 800aa26:	4637      	mov	r7, r6
 800aa28:	e7e1      	b.n	800a9ee <_dtoa_r+0x93e>
 800aa2a:	9700      	str	r7, [sp, #0]
 800aa2c:	4637      	mov	r7, r6
 800aa2e:	e599      	b.n	800a564 <_dtoa_r+0x4b4>
 800aa30:	40240000 	.word	0x40240000
 800aa34:	9b08      	ldr	r3, [sp, #32]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f000 80ca 	beq.w	800abd0 <_dtoa_r+0xb20>
 800aa3c:	9b03      	ldr	r3, [sp, #12]
 800aa3e:	9302      	str	r3, [sp, #8]
 800aa40:	2d00      	cmp	r5, #0
 800aa42:	dd05      	ble.n	800aa50 <_dtoa_r+0x9a0>
 800aa44:	4639      	mov	r1, r7
 800aa46:	462a      	mov	r2, r5
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f000 fd6b 	bl	800b524 <__lshift>
 800aa4e:	4607      	mov	r7, r0
 800aa50:	f1b8 0f00 	cmp.w	r8, #0
 800aa54:	d05b      	beq.n	800ab0e <_dtoa_r+0xa5e>
 800aa56:	6879      	ldr	r1, [r7, #4]
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f000 fb51 	bl	800b100 <_Balloc>
 800aa5e:	4605      	mov	r5, r0
 800aa60:	b928      	cbnz	r0, 800aa6e <_dtoa_r+0x9be>
 800aa62:	4b87      	ldr	r3, [pc, #540]	; (800ac80 <_dtoa_r+0xbd0>)
 800aa64:	4602      	mov	r2, r0
 800aa66:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aa6a:	f7ff bb3b 	b.w	800a0e4 <_dtoa_r+0x34>
 800aa6e:	693a      	ldr	r2, [r7, #16]
 800aa70:	3202      	adds	r2, #2
 800aa72:	0092      	lsls	r2, r2, #2
 800aa74:	f107 010c 	add.w	r1, r7, #12
 800aa78:	300c      	adds	r0, #12
 800aa7a:	f000 fb33 	bl	800b0e4 <memcpy>
 800aa7e:	2201      	movs	r2, #1
 800aa80:	4629      	mov	r1, r5
 800aa82:	4620      	mov	r0, r4
 800aa84:	f000 fd4e 	bl	800b524 <__lshift>
 800aa88:	9b01      	ldr	r3, [sp, #4]
 800aa8a:	f103 0901 	add.w	r9, r3, #1
 800aa8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800aa92:	4413      	add	r3, r2
 800aa94:	9305      	str	r3, [sp, #20]
 800aa96:	f00a 0301 	and.w	r3, sl, #1
 800aa9a:	46b8      	mov	r8, r7
 800aa9c:	9304      	str	r3, [sp, #16]
 800aa9e:	4607      	mov	r7, r0
 800aaa0:	4631      	mov	r1, r6
 800aaa2:	ee18 0a10 	vmov	r0, s16
 800aaa6:	f7ff fa77 	bl	8009f98 <quorem>
 800aaaa:	4641      	mov	r1, r8
 800aaac:	9002      	str	r0, [sp, #8]
 800aaae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aab2:	ee18 0a10 	vmov	r0, s16
 800aab6:	f000 fda5 	bl	800b604 <__mcmp>
 800aaba:	463a      	mov	r2, r7
 800aabc:	9003      	str	r0, [sp, #12]
 800aabe:	4631      	mov	r1, r6
 800aac0:	4620      	mov	r0, r4
 800aac2:	f000 fdbb 	bl	800b63c <__mdiff>
 800aac6:	68c2      	ldr	r2, [r0, #12]
 800aac8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800aacc:	4605      	mov	r5, r0
 800aace:	bb02      	cbnz	r2, 800ab12 <_dtoa_r+0xa62>
 800aad0:	4601      	mov	r1, r0
 800aad2:	ee18 0a10 	vmov	r0, s16
 800aad6:	f000 fd95 	bl	800b604 <__mcmp>
 800aada:	4602      	mov	r2, r0
 800aadc:	4629      	mov	r1, r5
 800aade:	4620      	mov	r0, r4
 800aae0:	9207      	str	r2, [sp, #28]
 800aae2:	f000 fb4d 	bl	800b180 <_Bfree>
 800aae6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800aaea:	ea43 0102 	orr.w	r1, r3, r2
 800aaee:	9b04      	ldr	r3, [sp, #16]
 800aaf0:	430b      	orrs	r3, r1
 800aaf2:	464d      	mov	r5, r9
 800aaf4:	d10f      	bne.n	800ab16 <_dtoa_r+0xa66>
 800aaf6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aafa:	d02a      	beq.n	800ab52 <_dtoa_r+0xaa2>
 800aafc:	9b03      	ldr	r3, [sp, #12]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	dd02      	ble.n	800ab08 <_dtoa_r+0xa58>
 800ab02:	9b02      	ldr	r3, [sp, #8]
 800ab04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ab08:	f88b a000 	strb.w	sl, [fp]
 800ab0c:	e775      	b.n	800a9fa <_dtoa_r+0x94a>
 800ab0e:	4638      	mov	r0, r7
 800ab10:	e7ba      	b.n	800aa88 <_dtoa_r+0x9d8>
 800ab12:	2201      	movs	r2, #1
 800ab14:	e7e2      	b.n	800aadc <_dtoa_r+0xa2c>
 800ab16:	9b03      	ldr	r3, [sp, #12]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	db04      	blt.n	800ab26 <_dtoa_r+0xa76>
 800ab1c:	9906      	ldr	r1, [sp, #24]
 800ab1e:	430b      	orrs	r3, r1
 800ab20:	9904      	ldr	r1, [sp, #16]
 800ab22:	430b      	orrs	r3, r1
 800ab24:	d122      	bne.n	800ab6c <_dtoa_r+0xabc>
 800ab26:	2a00      	cmp	r2, #0
 800ab28:	ddee      	ble.n	800ab08 <_dtoa_r+0xa58>
 800ab2a:	ee18 1a10 	vmov	r1, s16
 800ab2e:	2201      	movs	r2, #1
 800ab30:	4620      	mov	r0, r4
 800ab32:	f000 fcf7 	bl	800b524 <__lshift>
 800ab36:	4631      	mov	r1, r6
 800ab38:	ee08 0a10 	vmov	s16, r0
 800ab3c:	f000 fd62 	bl	800b604 <__mcmp>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	dc03      	bgt.n	800ab4c <_dtoa_r+0xa9c>
 800ab44:	d1e0      	bne.n	800ab08 <_dtoa_r+0xa58>
 800ab46:	f01a 0f01 	tst.w	sl, #1
 800ab4a:	d0dd      	beq.n	800ab08 <_dtoa_r+0xa58>
 800ab4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ab50:	d1d7      	bne.n	800ab02 <_dtoa_r+0xa52>
 800ab52:	2339      	movs	r3, #57	; 0x39
 800ab54:	f88b 3000 	strb.w	r3, [fp]
 800ab58:	462b      	mov	r3, r5
 800ab5a:	461d      	mov	r5, r3
 800ab5c:	3b01      	subs	r3, #1
 800ab5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ab62:	2a39      	cmp	r2, #57	; 0x39
 800ab64:	d071      	beq.n	800ac4a <_dtoa_r+0xb9a>
 800ab66:	3201      	adds	r2, #1
 800ab68:	701a      	strb	r2, [r3, #0]
 800ab6a:	e746      	b.n	800a9fa <_dtoa_r+0x94a>
 800ab6c:	2a00      	cmp	r2, #0
 800ab6e:	dd07      	ble.n	800ab80 <_dtoa_r+0xad0>
 800ab70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ab74:	d0ed      	beq.n	800ab52 <_dtoa_r+0xaa2>
 800ab76:	f10a 0301 	add.w	r3, sl, #1
 800ab7a:	f88b 3000 	strb.w	r3, [fp]
 800ab7e:	e73c      	b.n	800a9fa <_dtoa_r+0x94a>
 800ab80:	9b05      	ldr	r3, [sp, #20]
 800ab82:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ab86:	4599      	cmp	r9, r3
 800ab88:	d047      	beq.n	800ac1a <_dtoa_r+0xb6a>
 800ab8a:	ee18 1a10 	vmov	r1, s16
 800ab8e:	2300      	movs	r3, #0
 800ab90:	220a      	movs	r2, #10
 800ab92:	4620      	mov	r0, r4
 800ab94:	f000 fb16 	bl	800b1c4 <__multadd>
 800ab98:	45b8      	cmp	r8, r7
 800ab9a:	ee08 0a10 	vmov	s16, r0
 800ab9e:	f04f 0300 	mov.w	r3, #0
 800aba2:	f04f 020a 	mov.w	r2, #10
 800aba6:	4641      	mov	r1, r8
 800aba8:	4620      	mov	r0, r4
 800abaa:	d106      	bne.n	800abba <_dtoa_r+0xb0a>
 800abac:	f000 fb0a 	bl	800b1c4 <__multadd>
 800abb0:	4680      	mov	r8, r0
 800abb2:	4607      	mov	r7, r0
 800abb4:	f109 0901 	add.w	r9, r9, #1
 800abb8:	e772      	b.n	800aaa0 <_dtoa_r+0x9f0>
 800abba:	f000 fb03 	bl	800b1c4 <__multadd>
 800abbe:	4639      	mov	r1, r7
 800abc0:	4680      	mov	r8, r0
 800abc2:	2300      	movs	r3, #0
 800abc4:	220a      	movs	r2, #10
 800abc6:	4620      	mov	r0, r4
 800abc8:	f000 fafc 	bl	800b1c4 <__multadd>
 800abcc:	4607      	mov	r7, r0
 800abce:	e7f1      	b.n	800abb4 <_dtoa_r+0xb04>
 800abd0:	9b03      	ldr	r3, [sp, #12]
 800abd2:	9302      	str	r3, [sp, #8]
 800abd4:	9d01      	ldr	r5, [sp, #4]
 800abd6:	ee18 0a10 	vmov	r0, s16
 800abda:	4631      	mov	r1, r6
 800abdc:	f7ff f9dc 	bl	8009f98 <quorem>
 800abe0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800abe4:	9b01      	ldr	r3, [sp, #4]
 800abe6:	f805 ab01 	strb.w	sl, [r5], #1
 800abea:	1aea      	subs	r2, r5, r3
 800abec:	9b02      	ldr	r3, [sp, #8]
 800abee:	4293      	cmp	r3, r2
 800abf0:	dd09      	ble.n	800ac06 <_dtoa_r+0xb56>
 800abf2:	ee18 1a10 	vmov	r1, s16
 800abf6:	2300      	movs	r3, #0
 800abf8:	220a      	movs	r2, #10
 800abfa:	4620      	mov	r0, r4
 800abfc:	f000 fae2 	bl	800b1c4 <__multadd>
 800ac00:	ee08 0a10 	vmov	s16, r0
 800ac04:	e7e7      	b.n	800abd6 <_dtoa_r+0xb26>
 800ac06:	9b02      	ldr	r3, [sp, #8]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	bfc8      	it	gt
 800ac0c:	461d      	movgt	r5, r3
 800ac0e:	9b01      	ldr	r3, [sp, #4]
 800ac10:	bfd8      	it	le
 800ac12:	2501      	movle	r5, #1
 800ac14:	441d      	add	r5, r3
 800ac16:	f04f 0800 	mov.w	r8, #0
 800ac1a:	ee18 1a10 	vmov	r1, s16
 800ac1e:	2201      	movs	r2, #1
 800ac20:	4620      	mov	r0, r4
 800ac22:	f000 fc7f 	bl	800b524 <__lshift>
 800ac26:	4631      	mov	r1, r6
 800ac28:	ee08 0a10 	vmov	s16, r0
 800ac2c:	f000 fcea 	bl	800b604 <__mcmp>
 800ac30:	2800      	cmp	r0, #0
 800ac32:	dc91      	bgt.n	800ab58 <_dtoa_r+0xaa8>
 800ac34:	d102      	bne.n	800ac3c <_dtoa_r+0xb8c>
 800ac36:	f01a 0f01 	tst.w	sl, #1
 800ac3a:	d18d      	bne.n	800ab58 <_dtoa_r+0xaa8>
 800ac3c:	462b      	mov	r3, r5
 800ac3e:	461d      	mov	r5, r3
 800ac40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac44:	2a30      	cmp	r2, #48	; 0x30
 800ac46:	d0fa      	beq.n	800ac3e <_dtoa_r+0xb8e>
 800ac48:	e6d7      	b.n	800a9fa <_dtoa_r+0x94a>
 800ac4a:	9a01      	ldr	r2, [sp, #4]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d184      	bne.n	800ab5a <_dtoa_r+0xaaa>
 800ac50:	9b00      	ldr	r3, [sp, #0]
 800ac52:	3301      	adds	r3, #1
 800ac54:	9300      	str	r3, [sp, #0]
 800ac56:	2331      	movs	r3, #49	; 0x31
 800ac58:	7013      	strb	r3, [r2, #0]
 800ac5a:	e6ce      	b.n	800a9fa <_dtoa_r+0x94a>
 800ac5c:	4b09      	ldr	r3, [pc, #36]	; (800ac84 <_dtoa_r+0xbd4>)
 800ac5e:	f7ff ba95 	b.w	800a18c <_dtoa_r+0xdc>
 800ac62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f47f aa6e 	bne.w	800a146 <_dtoa_r+0x96>
 800ac6a:	4b07      	ldr	r3, [pc, #28]	; (800ac88 <_dtoa_r+0xbd8>)
 800ac6c:	f7ff ba8e 	b.w	800a18c <_dtoa_r+0xdc>
 800ac70:	9b02      	ldr	r3, [sp, #8]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	dcae      	bgt.n	800abd4 <_dtoa_r+0xb24>
 800ac76:	9b06      	ldr	r3, [sp, #24]
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	f73f aea8 	bgt.w	800a9ce <_dtoa_r+0x91e>
 800ac7e:	e7a9      	b.n	800abd4 <_dtoa_r+0xb24>
 800ac80:	0800e45b 	.word	0x0800e45b
 800ac84:	0800e3b8 	.word	0x0800e3b8
 800ac88:	0800e3dc 	.word	0x0800e3dc

0800ac8c <__sflush_r>:
 800ac8c:	898a      	ldrh	r2, [r1, #12]
 800ac8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac92:	4605      	mov	r5, r0
 800ac94:	0710      	lsls	r0, r2, #28
 800ac96:	460c      	mov	r4, r1
 800ac98:	d458      	bmi.n	800ad4c <__sflush_r+0xc0>
 800ac9a:	684b      	ldr	r3, [r1, #4]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	dc05      	bgt.n	800acac <__sflush_r+0x20>
 800aca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	dc02      	bgt.n	800acac <__sflush_r+0x20>
 800aca6:	2000      	movs	r0, #0
 800aca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acae:	2e00      	cmp	r6, #0
 800acb0:	d0f9      	beq.n	800aca6 <__sflush_r+0x1a>
 800acb2:	2300      	movs	r3, #0
 800acb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acb8:	682f      	ldr	r7, [r5, #0]
 800acba:	602b      	str	r3, [r5, #0]
 800acbc:	d032      	beq.n	800ad24 <__sflush_r+0x98>
 800acbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acc0:	89a3      	ldrh	r3, [r4, #12]
 800acc2:	075a      	lsls	r2, r3, #29
 800acc4:	d505      	bpl.n	800acd2 <__sflush_r+0x46>
 800acc6:	6863      	ldr	r3, [r4, #4]
 800acc8:	1ac0      	subs	r0, r0, r3
 800acca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800accc:	b10b      	cbz	r3, 800acd2 <__sflush_r+0x46>
 800acce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acd0:	1ac0      	subs	r0, r0, r3
 800acd2:	2300      	movs	r3, #0
 800acd4:	4602      	mov	r2, r0
 800acd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acd8:	6a21      	ldr	r1, [r4, #32]
 800acda:	4628      	mov	r0, r5
 800acdc:	47b0      	blx	r6
 800acde:	1c43      	adds	r3, r0, #1
 800ace0:	89a3      	ldrh	r3, [r4, #12]
 800ace2:	d106      	bne.n	800acf2 <__sflush_r+0x66>
 800ace4:	6829      	ldr	r1, [r5, #0]
 800ace6:	291d      	cmp	r1, #29
 800ace8:	d82c      	bhi.n	800ad44 <__sflush_r+0xb8>
 800acea:	4a2a      	ldr	r2, [pc, #168]	; (800ad94 <__sflush_r+0x108>)
 800acec:	40ca      	lsrs	r2, r1
 800acee:	07d6      	lsls	r6, r2, #31
 800acf0:	d528      	bpl.n	800ad44 <__sflush_r+0xb8>
 800acf2:	2200      	movs	r2, #0
 800acf4:	6062      	str	r2, [r4, #4]
 800acf6:	04d9      	lsls	r1, r3, #19
 800acf8:	6922      	ldr	r2, [r4, #16]
 800acfa:	6022      	str	r2, [r4, #0]
 800acfc:	d504      	bpl.n	800ad08 <__sflush_r+0x7c>
 800acfe:	1c42      	adds	r2, r0, #1
 800ad00:	d101      	bne.n	800ad06 <__sflush_r+0x7a>
 800ad02:	682b      	ldr	r3, [r5, #0]
 800ad04:	b903      	cbnz	r3, 800ad08 <__sflush_r+0x7c>
 800ad06:	6560      	str	r0, [r4, #84]	; 0x54
 800ad08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad0a:	602f      	str	r7, [r5, #0]
 800ad0c:	2900      	cmp	r1, #0
 800ad0e:	d0ca      	beq.n	800aca6 <__sflush_r+0x1a>
 800ad10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad14:	4299      	cmp	r1, r3
 800ad16:	d002      	beq.n	800ad1e <__sflush_r+0x92>
 800ad18:	4628      	mov	r0, r5
 800ad1a:	f000 fd8b 	bl	800b834 <_free_r>
 800ad1e:	2000      	movs	r0, #0
 800ad20:	6360      	str	r0, [r4, #52]	; 0x34
 800ad22:	e7c1      	b.n	800aca8 <__sflush_r+0x1c>
 800ad24:	6a21      	ldr	r1, [r4, #32]
 800ad26:	2301      	movs	r3, #1
 800ad28:	4628      	mov	r0, r5
 800ad2a:	47b0      	blx	r6
 800ad2c:	1c41      	adds	r1, r0, #1
 800ad2e:	d1c7      	bne.n	800acc0 <__sflush_r+0x34>
 800ad30:	682b      	ldr	r3, [r5, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d0c4      	beq.n	800acc0 <__sflush_r+0x34>
 800ad36:	2b1d      	cmp	r3, #29
 800ad38:	d001      	beq.n	800ad3e <__sflush_r+0xb2>
 800ad3a:	2b16      	cmp	r3, #22
 800ad3c:	d101      	bne.n	800ad42 <__sflush_r+0xb6>
 800ad3e:	602f      	str	r7, [r5, #0]
 800ad40:	e7b1      	b.n	800aca6 <__sflush_r+0x1a>
 800ad42:	89a3      	ldrh	r3, [r4, #12]
 800ad44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad48:	81a3      	strh	r3, [r4, #12]
 800ad4a:	e7ad      	b.n	800aca8 <__sflush_r+0x1c>
 800ad4c:	690f      	ldr	r7, [r1, #16]
 800ad4e:	2f00      	cmp	r7, #0
 800ad50:	d0a9      	beq.n	800aca6 <__sflush_r+0x1a>
 800ad52:	0793      	lsls	r3, r2, #30
 800ad54:	680e      	ldr	r6, [r1, #0]
 800ad56:	bf08      	it	eq
 800ad58:	694b      	ldreq	r3, [r1, #20]
 800ad5a:	600f      	str	r7, [r1, #0]
 800ad5c:	bf18      	it	ne
 800ad5e:	2300      	movne	r3, #0
 800ad60:	eba6 0807 	sub.w	r8, r6, r7
 800ad64:	608b      	str	r3, [r1, #8]
 800ad66:	f1b8 0f00 	cmp.w	r8, #0
 800ad6a:	dd9c      	ble.n	800aca6 <__sflush_r+0x1a>
 800ad6c:	6a21      	ldr	r1, [r4, #32]
 800ad6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad70:	4643      	mov	r3, r8
 800ad72:	463a      	mov	r2, r7
 800ad74:	4628      	mov	r0, r5
 800ad76:	47b0      	blx	r6
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	dc06      	bgt.n	800ad8a <__sflush_r+0xfe>
 800ad7c:	89a3      	ldrh	r3, [r4, #12]
 800ad7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad82:	81a3      	strh	r3, [r4, #12]
 800ad84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad88:	e78e      	b.n	800aca8 <__sflush_r+0x1c>
 800ad8a:	4407      	add	r7, r0
 800ad8c:	eba8 0800 	sub.w	r8, r8, r0
 800ad90:	e7e9      	b.n	800ad66 <__sflush_r+0xda>
 800ad92:	bf00      	nop
 800ad94:	20400001 	.word	0x20400001

0800ad98 <_fflush_r>:
 800ad98:	b538      	push	{r3, r4, r5, lr}
 800ad9a:	690b      	ldr	r3, [r1, #16]
 800ad9c:	4605      	mov	r5, r0
 800ad9e:	460c      	mov	r4, r1
 800ada0:	b913      	cbnz	r3, 800ada8 <_fflush_r+0x10>
 800ada2:	2500      	movs	r5, #0
 800ada4:	4628      	mov	r0, r5
 800ada6:	bd38      	pop	{r3, r4, r5, pc}
 800ada8:	b118      	cbz	r0, 800adb2 <_fflush_r+0x1a>
 800adaa:	6983      	ldr	r3, [r0, #24]
 800adac:	b90b      	cbnz	r3, 800adb2 <_fflush_r+0x1a>
 800adae:	f000 f887 	bl	800aec0 <__sinit>
 800adb2:	4b14      	ldr	r3, [pc, #80]	; (800ae04 <_fflush_r+0x6c>)
 800adb4:	429c      	cmp	r4, r3
 800adb6:	d11b      	bne.n	800adf0 <_fflush_r+0x58>
 800adb8:	686c      	ldr	r4, [r5, #4]
 800adba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d0ef      	beq.n	800ada2 <_fflush_r+0xa>
 800adc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800adc4:	07d0      	lsls	r0, r2, #31
 800adc6:	d404      	bmi.n	800add2 <_fflush_r+0x3a>
 800adc8:	0599      	lsls	r1, r3, #22
 800adca:	d402      	bmi.n	800add2 <_fflush_r+0x3a>
 800adcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adce:	f000 f91a 	bl	800b006 <__retarget_lock_acquire_recursive>
 800add2:	4628      	mov	r0, r5
 800add4:	4621      	mov	r1, r4
 800add6:	f7ff ff59 	bl	800ac8c <__sflush_r>
 800adda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800addc:	07da      	lsls	r2, r3, #31
 800adde:	4605      	mov	r5, r0
 800ade0:	d4e0      	bmi.n	800ada4 <_fflush_r+0xc>
 800ade2:	89a3      	ldrh	r3, [r4, #12]
 800ade4:	059b      	lsls	r3, r3, #22
 800ade6:	d4dd      	bmi.n	800ada4 <_fflush_r+0xc>
 800ade8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adea:	f000 f90d 	bl	800b008 <__retarget_lock_release_recursive>
 800adee:	e7d9      	b.n	800ada4 <_fflush_r+0xc>
 800adf0:	4b05      	ldr	r3, [pc, #20]	; (800ae08 <_fflush_r+0x70>)
 800adf2:	429c      	cmp	r4, r3
 800adf4:	d101      	bne.n	800adfa <_fflush_r+0x62>
 800adf6:	68ac      	ldr	r4, [r5, #8]
 800adf8:	e7df      	b.n	800adba <_fflush_r+0x22>
 800adfa:	4b04      	ldr	r3, [pc, #16]	; (800ae0c <_fflush_r+0x74>)
 800adfc:	429c      	cmp	r4, r3
 800adfe:	bf08      	it	eq
 800ae00:	68ec      	ldreq	r4, [r5, #12]
 800ae02:	e7da      	b.n	800adba <_fflush_r+0x22>
 800ae04:	0800e48c 	.word	0x0800e48c
 800ae08:	0800e4ac 	.word	0x0800e4ac
 800ae0c:	0800e46c 	.word	0x0800e46c

0800ae10 <std>:
 800ae10:	2300      	movs	r3, #0
 800ae12:	b510      	push	{r4, lr}
 800ae14:	4604      	mov	r4, r0
 800ae16:	e9c0 3300 	strd	r3, r3, [r0]
 800ae1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae1e:	6083      	str	r3, [r0, #8]
 800ae20:	8181      	strh	r1, [r0, #12]
 800ae22:	6643      	str	r3, [r0, #100]	; 0x64
 800ae24:	81c2      	strh	r2, [r0, #14]
 800ae26:	6183      	str	r3, [r0, #24]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	2208      	movs	r2, #8
 800ae2c:	305c      	adds	r0, #92	; 0x5c
 800ae2e:	f7fe faf3 	bl	8009418 <memset>
 800ae32:	4b05      	ldr	r3, [pc, #20]	; (800ae48 <std+0x38>)
 800ae34:	6263      	str	r3, [r4, #36]	; 0x24
 800ae36:	4b05      	ldr	r3, [pc, #20]	; (800ae4c <std+0x3c>)
 800ae38:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae3a:	4b05      	ldr	r3, [pc, #20]	; (800ae50 <std+0x40>)
 800ae3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae3e:	4b05      	ldr	r3, [pc, #20]	; (800ae54 <std+0x44>)
 800ae40:	6224      	str	r4, [r4, #32]
 800ae42:	6323      	str	r3, [r4, #48]	; 0x30
 800ae44:	bd10      	pop	{r4, pc}
 800ae46:	bf00      	nop
 800ae48:	0800bcc9 	.word	0x0800bcc9
 800ae4c:	0800bceb 	.word	0x0800bceb
 800ae50:	0800bd23 	.word	0x0800bd23
 800ae54:	0800bd47 	.word	0x0800bd47

0800ae58 <_cleanup_r>:
 800ae58:	4901      	ldr	r1, [pc, #4]	; (800ae60 <_cleanup_r+0x8>)
 800ae5a:	f000 b8af 	b.w	800afbc <_fwalk_reent>
 800ae5e:	bf00      	nop
 800ae60:	0800ad99 	.word	0x0800ad99

0800ae64 <__sfmoreglue>:
 800ae64:	b570      	push	{r4, r5, r6, lr}
 800ae66:	2268      	movs	r2, #104	; 0x68
 800ae68:	1e4d      	subs	r5, r1, #1
 800ae6a:	4355      	muls	r5, r2
 800ae6c:	460e      	mov	r6, r1
 800ae6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae72:	f000 fd4b 	bl	800b90c <_malloc_r>
 800ae76:	4604      	mov	r4, r0
 800ae78:	b140      	cbz	r0, 800ae8c <__sfmoreglue+0x28>
 800ae7a:	2100      	movs	r1, #0
 800ae7c:	e9c0 1600 	strd	r1, r6, [r0]
 800ae80:	300c      	adds	r0, #12
 800ae82:	60a0      	str	r0, [r4, #8]
 800ae84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae88:	f7fe fac6 	bl	8009418 <memset>
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	bd70      	pop	{r4, r5, r6, pc}

0800ae90 <__sfp_lock_acquire>:
 800ae90:	4801      	ldr	r0, [pc, #4]	; (800ae98 <__sfp_lock_acquire+0x8>)
 800ae92:	f000 b8b8 	b.w	800b006 <__retarget_lock_acquire_recursive>
 800ae96:	bf00      	nop
 800ae98:	20000c15 	.word	0x20000c15

0800ae9c <__sfp_lock_release>:
 800ae9c:	4801      	ldr	r0, [pc, #4]	; (800aea4 <__sfp_lock_release+0x8>)
 800ae9e:	f000 b8b3 	b.w	800b008 <__retarget_lock_release_recursive>
 800aea2:	bf00      	nop
 800aea4:	20000c15 	.word	0x20000c15

0800aea8 <__sinit_lock_acquire>:
 800aea8:	4801      	ldr	r0, [pc, #4]	; (800aeb0 <__sinit_lock_acquire+0x8>)
 800aeaa:	f000 b8ac 	b.w	800b006 <__retarget_lock_acquire_recursive>
 800aeae:	bf00      	nop
 800aeb0:	20000c16 	.word	0x20000c16

0800aeb4 <__sinit_lock_release>:
 800aeb4:	4801      	ldr	r0, [pc, #4]	; (800aebc <__sinit_lock_release+0x8>)
 800aeb6:	f000 b8a7 	b.w	800b008 <__retarget_lock_release_recursive>
 800aeba:	bf00      	nop
 800aebc:	20000c16 	.word	0x20000c16

0800aec0 <__sinit>:
 800aec0:	b510      	push	{r4, lr}
 800aec2:	4604      	mov	r4, r0
 800aec4:	f7ff fff0 	bl	800aea8 <__sinit_lock_acquire>
 800aec8:	69a3      	ldr	r3, [r4, #24]
 800aeca:	b11b      	cbz	r3, 800aed4 <__sinit+0x14>
 800aecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aed0:	f7ff bff0 	b.w	800aeb4 <__sinit_lock_release>
 800aed4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aed8:	6523      	str	r3, [r4, #80]	; 0x50
 800aeda:	4b13      	ldr	r3, [pc, #76]	; (800af28 <__sinit+0x68>)
 800aedc:	4a13      	ldr	r2, [pc, #76]	; (800af2c <__sinit+0x6c>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	62a2      	str	r2, [r4, #40]	; 0x28
 800aee2:	42a3      	cmp	r3, r4
 800aee4:	bf04      	itt	eq
 800aee6:	2301      	moveq	r3, #1
 800aee8:	61a3      	streq	r3, [r4, #24]
 800aeea:	4620      	mov	r0, r4
 800aeec:	f000 f820 	bl	800af30 <__sfp>
 800aef0:	6060      	str	r0, [r4, #4]
 800aef2:	4620      	mov	r0, r4
 800aef4:	f000 f81c 	bl	800af30 <__sfp>
 800aef8:	60a0      	str	r0, [r4, #8]
 800aefa:	4620      	mov	r0, r4
 800aefc:	f000 f818 	bl	800af30 <__sfp>
 800af00:	2200      	movs	r2, #0
 800af02:	60e0      	str	r0, [r4, #12]
 800af04:	2104      	movs	r1, #4
 800af06:	6860      	ldr	r0, [r4, #4]
 800af08:	f7ff ff82 	bl	800ae10 <std>
 800af0c:	68a0      	ldr	r0, [r4, #8]
 800af0e:	2201      	movs	r2, #1
 800af10:	2109      	movs	r1, #9
 800af12:	f7ff ff7d 	bl	800ae10 <std>
 800af16:	68e0      	ldr	r0, [r4, #12]
 800af18:	2202      	movs	r2, #2
 800af1a:	2112      	movs	r1, #18
 800af1c:	f7ff ff78 	bl	800ae10 <std>
 800af20:	2301      	movs	r3, #1
 800af22:	61a3      	str	r3, [r4, #24]
 800af24:	e7d2      	b.n	800aecc <__sinit+0xc>
 800af26:	bf00      	nop
 800af28:	0800e3a4 	.word	0x0800e3a4
 800af2c:	0800ae59 	.word	0x0800ae59

0800af30 <__sfp>:
 800af30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af32:	4607      	mov	r7, r0
 800af34:	f7ff ffac 	bl	800ae90 <__sfp_lock_acquire>
 800af38:	4b1e      	ldr	r3, [pc, #120]	; (800afb4 <__sfp+0x84>)
 800af3a:	681e      	ldr	r6, [r3, #0]
 800af3c:	69b3      	ldr	r3, [r6, #24]
 800af3e:	b913      	cbnz	r3, 800af46 <__sfp+0x16>
 800af40:	4630      	mov	r0, r6
 800af42:	f7ff ffbd 	bl	800aec0 <__sinit>
 800af46:	3648      	adds	r6, #72	; 0x48
 800af48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af4c:	3b01      	subs	r3, #1
 800af4e:	d503      	bpl.n	800af58 <__sfp+0x28>
 800af50:	6833      	ldr	r3, [r6, #0]
 800af52:	b30b      	cbz	r3, 800af98 <__sfp+0x68>
 800af54:	6836      	ldr	r6, [r6, #0]
 800af56:	e7f7      	b.n	800af48 <__sfp+0x18>
 800af58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af5c:	b9d5      	cbnz	r5, 800af94 <__sfp+0x64>
 800af5e:	4b16      	ldr	r3, [pc, #88]	; (800afb8 <__sfp+0x88>)
 800af60:	60e3      	str	r3, [r4, #12]
 800af62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af66:	6665      	str	r5, [r4, #100]	; 0x64
 800af68:	f000 f84c 	bl	800b004 <__retarget_lock_init_recursive>
 800af6c:	f7ff ff96 	bl	800ae9c <__sfp_lock_release>
 800af70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af78:	6025      	str	r5, [r4, #0]
 800af7a:	61a5      	str	r5, [r4, #24]
 800af7c:	2208      	movs	r2, #8
 800af7e:	4629      	mov	r1, r5
 800af80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af84:	f7fe fa48 	bl	8009418 <memset>
 800af88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af90:	4620      	mov	r0, r4
 800af92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af94:	3468      	adds	r4, #104	; 0x68
 800af96:	e7d9      	b.n	800af4c <__sfp+0x1c>
 800af98:	2104      	movs	r1, #4
 800af9a:	4638      	mov	r0, r7
 800af9c:	f7ff ff62 	bl	800ae64 <__sfmoreglue>
 800afa0:	4604      	mov	r4, r0
 800afa2:	6030      	str	r0, [r6, #0]
 800afa4:	2800      	cmp	r0, #0
 800afa6:	d1d5      	bne.n	800af54 <__sfp+0x24>
 800afa8:	f7ff ff78 	bl	800ae9c <__sfp_lock_release>
 800afac:	230c      	movs	r3, #12
 800afae:	603b      	str	r3, [r7, #0]
 800afb0:	e7ee      	b.n	800af90 <__sfp+0x60>
 800afb2:	bf00      	nop
 800afb4:	0800e3a4 	.word	0x0800e3a4
 800afb8:	ffff0001 	.word	0xffff0001

0800afbc <_fwalk_reent>:
 800afbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afc0:	4606      	mov	r6, r0
 800afc2:	4688      	mov	r8, r1
 800afc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800afc8:	2700      	movs	r7, #0
 800afca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afce:	f1b9 0901 	subs.w	r9, r9, #1
 800afd2:	d505      	bpl.n	800afe0 <_fwalk_reent+0x24>
 800afd4:	6824      	ldr	r4, [r4, #0]
 800afd6:	2c00      	cmp	r4, #0
 800afd8:	d1f7      	bne.n	800afca <_fwalk_reent+0xe>
 800afda:	4638      	mov	r0, r7
 800afdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afe0:	89ab      	ldrh	r3, [r5, #12]
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d907      	bls.n	800aff6 <_fwalk_reent+0x3a>
 800afe6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afea:	3301      	adds	r3, #1
 800afec:	d003      	beq.n	800aff6 <_fwalk_reent+0x3a>
 800afee:	4629      	mov	r1, r5
 800aff0:	4630      	mov	r0, r6
 800aff2:	47c0      	blx	r8
 800aff4:	4307      	orrs	r7, r0
 800aff6:	3568      	adds	r5, #104	; 0x68
 800aff8:	e7e9      	b.n	800afce <_fwalk_reent+0x12>
	...

0800affc <_localeconv_r>:
 800affc:	4800      	ldr	r0, [pc, #0]	; (800b000 <_localeconv_r+0x4>)
 800affe:	4770      	bx	lr
 800b000:	2000016c 	.word	0x2000016c

0800b004 <__retarget_lock_init_recursive>:
 800b004:	4770      	bx	lr

0800b006 <__retarget_lock_acquire_recursive>:
 800b006:	4770      	bx	lr

0800b008 <__retarget_lock_release_recursive>:
 800b008:	4770      	bx	lr

0800b00a <__swhatbuf_r>:
 800b00a:	b570      	push	{r4, r5, r6, lr}
 800b00c:	460e      	mov	r6, r1
 800b00e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b012:	2900      	cmp	r1, #0
 800b014:	b096      	sub	sp, #88	; 0x58
 800b016:	4614      	mov	r4, r2
 800b018:	461d      	mov	r5, r3
 800b01a:	da08      	bge.n	800b02e <__swhatbuf_r+0x24>
 800b01c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b020:	2200      	movs	r2, #0
 800b022:	602a      	str	r2, [r5, #0]
 800b024:	061a      	lsls	r2, r3, #24
 800b026:	d410      	bmi.n	800b04a <__swhatbuf_r+0x40>
 800b028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b02c:	e00e      	b.n	800b04c <__swhatbuf_r+0x42>
 800b02e:	466a      	mov	r2, sp
 800b030:	f000 fee0 	bl	800bdf4 <_fstat_r>
 800b034:	2800      	cmp	r0, #0
 800b036:	dbf1      	blt.n	800b01c <__swhatbuf_r+0x12>
 800b038:	9a01      	ldr	r2, [sp, #4]
 800b03a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b03e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b042:	425a      	negs	r2, r3
 800b044:	415a      	adcs	r2, r3
 800b046:	602a      	str	r2, [r5, #0]
 800b048:	e7ee      	b.n	800b028 <__swhatbuf_r+0x1e>
 800b04a:	2340      	movs	r3, #64	; 0x40
 800b04c:	2000      	movs	r0, #0
 800b04e:	6023      	str	r3, [r4, #0]
 800b050:	b016      	add	sp, #88	; 0x58
 800b052:	bd70      	pop	{r4, r5, r6, pc}

0800b054 <__smakebuf_r>:
 800b054:	898b      	ldrh	r3, [r1, #12]
 800b056:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b058:	079d      	lsls	r5, r3, #30
 800b05a:	4606      	mov	r6, r0
 800b05c:	460c      	mov	r4, r1
 800b05e:	d507      	bpl.n	800b070 <__smakebuf_r+0x1c>
 800b060:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	6123      	str	r3, [r4, #16]
 800b068:	2301      	movs	r3, #1
 800b06a:	6163      	str	r3, [r4, #20]
 800b06c:	b002      	add	sp, #8
 800b06e:	bd70      	pop	{r4, r5, r6, pc}
 800b070:	ab01      	add	r3, sp, #4
 800b072:	466a      	mov	r2, sp
 800b074:	f7ff ffc9 	bl	800b00a <__swhatbuf_r>
 800b078:	9900      	ldr	r1, [sp, #0]
 800b07a:	4605      	mov	r5, r0
 800b07c:	4630      	mov	r0, r6
 800b07e:	f000 fc45 	bl	800b90c <_malloc_r>
 800b082:	b948      	cbnz	r0, 800b098 <__smakebuf_r+0x44>
 800b084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b088:	059a      	lsls	r2, r3, #22
 800b08a:	d4ef      	bmi.n	800b06c <__smakebuf_r+0x18>
 800b08c:	f023 0303 	bic.w	r3, r3, #3
 800b090:	f043 0302 	orr.w	r3, r3, #2
 800b094:	81a3      	strh	r3, [r4, #12]
 800b096:	e7e3      	b.n	800b060 <__smakebuf_r+0xc>
 800b098:	4b0d      	ldr	r3, [pc, #52]	; (800b0d0 <__smakebuf_r+0x7c>)
 800b09a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b09c:	89a3      	ldrh	r3, [r4, #12]
 800b09e:	6020      	str	r0, [r4, #0]
 800b0a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0a4:	81a3      	strh	r3, [r4, #12]
 800b0a6:	9b00      	ldr	r3, [sp, #0]
 800b0a8:	6163      	str	r3, [r4, #20]
 800b0aa:	9b01      	ldr	r3, [sp, #4]
 800b0ac:	6120      	str	r0, [r4, #16]
 800b0ae:	b15b      	cbz	r3, 800b0c8 <__smakebuf_r+0x74>
 800b0b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0b4:	4630      	mov	r0, r6
 800b0b6:	f000 feaf 	bl	800be18 <_isatty_r>
 800b0ba:	b128      	cbz	r0, 800b0c8 <__smakebuf_r+0x74>
 800b0bc:	89a3      	ldrh	r3, [r4, #12]
 800b0be:	f023 0303 	bic.w	r3, r3, #3
 800b0c2:	f043 0301 	orr.w	r3, r3, #1
 800b0c6:	81a3      	strh	r3, [r4, #12]
 800b0c8:	89a0      	ldrh	r0, [r4, #12]
 800b0ca:	4305      	orrs	r5, r0
 800b0cc:	81a5      	strh	r5, [r4, #12]
 800b0ce:	e7cd      	b.n	800b06c <__smakebuf_r+0x18>
 800b0d0:	0800ae59 	.word	0x0800ae59

0800b0d4 <malloc>:
 800b0d4:	4b02      	ldr	r3, [pc, #8]	; (800b0e0 <malloc+0xc>)
 800b0d6:	4601      	mov	r1, r0
 800b0d8:	6818      	ldr	r0, [r3, #0]
 800b0da:	f000 bc17 	b.w	800b90c <_malloc_r>
 800b0de:	bf00      	nop
 800b0e0:	20000018 	.word	0x20000018

0800b0e4 <memcpy>:
 800b0e4:	440a      	add	r2, r1
 800b0e6:	4291      	cmp	r1, r2
 800b0e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b0ec:	d100      	bne.n	800b0f0 <memcpy+0xc>
 800b0ee:	4770      	bx	lr
 800b0f0:	b510      	push	{r4, lr}
 800b0f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0fa:	4291      	cmp	r1, r2
 800b0fc:	d1f9      	bne.n	800b0f2 <memcpy+0xe>
 800b0fe:	bd10      	pop	{r4, pc}

0800b100 <_Balloc>:
 800b100:	b570      	push	{r4, r5, r6, lr}
 800b102:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b104:	4604      	mov	r4, r0
 800b106:	460d      	mov	r5, r1
 800b108:	b976      	cbnz	r6, 800b128 <_Balloc+0x28>
 800b10a:	2010      	movs	r0, #16
 800b10c:	f7ff ffe2 	bl	800b0d4 <malloc>
 800b110:	4602      	mov	r2, r0
 800b112:	6260      	str	r0, [r4, #36]	; 0x24
 800b114:	b920      	cbnz	r0, 800b120 <_Balloc+0x20>
 800b116:	4b18      	ldr	r3, [pc, #96]	; (800b178 <_Balloc+0x78>)
 800b118:	4818      	ldr	r0, [pc, #96]	; (800b17c <_Balloc+0x7c>)
 800b11a:	2166      	movs	r1, #102	; 0x66
 800b11c:	f000 fe2a 	bl	800bd74 <__assert_func>
 800b120:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b124:	6006      	str	r6, [r0, #0]
 800b126:	60c6      	str	r6, [r0, #12]
 800b128:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b12a:	68f3      	ldr	r3, [r6, #12]
 800b12c:	b183      	cbz	r3, 800b150 <_Balloc+0x50>
 800b12e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b136:	b9b8      	cbnz	r0, 800b168 <_Balloc+0x68>
 800b138:	2101      	movs	r1, #1
 800b13a:	fa01 f605 	lsl.w	r6, r1, r5
 800b13e:	1d72      	adds	r2, r6, #5
 800b140:	0092      	lsls	r2, r2, #2
 800b142:	4620      	mov	r0, r4
 800b144:	f000 fb60 	bl	800b808 <_calloc_r>
 800b148:	b160      	cbz	r0, 800b164 <_Balloc+0x64>
 800b14a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b14e:	e00e      	b.n	800b16e <_Balloc+0x6e>
 800b150:	2221      	movs	r2, #33	; 0x21
 800b152:	2104      	movs	r1, #4
 800b154:	4620      	mov	r0, r4
 800b156:	f000 fb57 	bl	800b808 <_calloc_r>
 800b15a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b15c:	60f0      	str	r0, [r6, #12]
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d1e4      	bne.n	800b12e <_Balloc+0x2e>
 800b164:	2000      	movs	r0, #0
 800b166:	bd70      	pop	{r4, r5, r6, pc}
 800b168:	6802      	ldr	r2, [r0, #0]
 800b16a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b16e:	2300      	movs	r3, #0
 800b170:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b174:	e7f7      	b.n	800b166 <_Balloc+0x66>
 800b176:	bf00      	nop
 800b178:	0800e3e9 	.word	0x0800e3e9
 800b17c:	0800e4cc 	.word	0x0800e4cc

0800b180 <_Bfree>:
 800b180:	b570      	push	{r4, r5, r6, lr}
 800b182:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b184:	4605      	mov	r5, r0
 800b186:	460c      	mov	r4, r1
 800b188:	b976      	cbnz	r6, 800b1a8 <_Bfree+0x28>
 800b18a:	2010      	movs	r0, #16
 800b18c:	f7ff ffa2 	bl	800b0d4 <malloc>
 800b190:	4602      	mov	r2, r0
 800b192:	6268      	str	r0, [r5, #36]	; 0x24
 800b194:	b920      	cbnz	r0, 800b1a0 <_Bfree+0x20>
 800b196:	4b09      	ldr	r3, [pc, #36]	; (800b1bc <_Bfree+0x3c>)
 800b198:	4809      	ldr	r0, [pc, #36]	; (800b1c0 <_Bfree+0x40>)
 800b19a:	218a      	movs	r1, #138	; 0x8a
 800b19c:	f000 fdea 	bl	800bd74 <__assert_func>
 800b1a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1a4:	6006      	str	r6, [r0, #0]
 800b1a6:	60c6      	str	r6, [r0, #12]
 800b1a8:	b13c      	cbz	r4, 800b1ba <_Bfree+0x3a>
 800b1aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b1ac:	6862      	ldr	r2, [r4, #4]
 800b1ae:	68db      	ldr	r3, [r3, #12]
 800b1b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1b4:	6021      	str	r1, [r4, #0]
 800b1b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b1ba:	bd70      	pop	{r4, r5, r6, pc}
 800b1bc:	0800e3e9 	.word	0x0800e3e9
 800b1c0:	0800e4cc 	.word	0x0800e4cc

0800b1c4 <__multadd>:
 800b1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c8:	690d      	ldr	r5, [r1, #16]
 800b1ca:	4607      	mov	r7, r0
 800b1cc:	460c      	mov	r4, r1
 800b1ce:	461e      	mov	r6, r3
 800b1d0:	f101 0c14 	add.w	ip, r1, #20
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	f8dc 3000 	ldr.w	r3, [ip]
 800b1da:	b299      	uxth	r1, r3
 800b1dc:	fb02 6101 	mla	r1, r2, r1, r6
 800b1e0:	0c1e      	lsrs	r6, r3, #16
 800b1e2:	0c0b      	lsrs	r3, r1, #16
 800b1e4:	fb02 3306 	mla	r3, r2, r6, r3
 800b1e8:	b289      	uxth	r1, r1
 800b1ea:	3001      	adds	r0, #1
 800b1ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b1f0:	4285      	cmp	r5, r0
 800b1f2:	f84c 1b04 	str.w	r1, [ip], #4
 800b1f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b1fa:	dcec      	bgt.n	800b1d6 <__multadd+0x12>
 800b1fc:	b30e      	cbz	r6, 800b242 <__multadd+0x7e>
 800b1fe:	68a3      	ldr	r3, [r4, #8]
 800b200:	42ab      	cmp	r3, r5
 800b202:	dc19      	bgt.n	800b238 <__multadd+0x74>
 800b204:	6861      	ldr	r1, [r4, #4]
 800b206:	4638      	mov	r0, r7
 800b208:	3101      	adds	r1, #1
 800b20a:	f7ff ff79 	bl	800b100 <_Balloc>
 800b20e:	4680      	mov	r8, r0
 800b210:	b928      	cbnz	r0, 800b21e <__multadd+0x5a>
 800b212:	4602      	mov	r2, r0
 800b214:	4b0c      	ldr	r3, [pc, #48]	; (800b248 <__multadd+0x84>)
 800b216:	480d      	ldr	r0, [pc, #52]	; (800b24c <__multadd+0x88>)
 800b218:	21b5      	movs	r1, #181	; 0xb5
 800b21a:	f000 fdab 	bl	800bd74 <__assert_func>
 800b21e:	6922      	ldr	r2, [r4, #16]
 800b220:	3202      	adds	r2, #2
 800b222:	f104 010c 	add.w	r1, r4, #12
 800b226:	0092      	lsls	r2, r2, #2
 800b228:	300c      	adds	r0, #12
 800b22a:	f7ff ff5b 	bl	800b0e4 <memcpy>
 800b22e:	4621      	mov	r1, r4
 800b230:	4638      	mov	r0, r7
 800b232:	f7ff ffa5 	bl	800b180 <_Bfree>
 800b236:	4644      	mov	r4, r8
 800b238:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b23c:	3501      	adds	r5, #1
 800b23e:	615e      	str	r6, [r3, #20]
 800b240:	6125      	str	r5, [r4, #16]
 800b242:	4620      	mov	r0, r4
 800b244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b248:	0800e45b 	.word	0x0800e45b
 800b24c:	0800e4cc 	.word	0x0800e4cc

0800b250 <__hi0bits>:
 800b250:	0c03      	lsrs	r3, r0, #16
 800b252:	041b      	lsls	r3, r3, #16
 800b254:	b9d3      	cbnz	r3, 800b28c <__hi0bits+0x3c>
 800b256:	0400      	lsls	r0, r0, #16
 800b258:	2310      	movs	r3, #16
 800b25a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b25e:	bf04      	itt	eq
 800b260:	0200      	lsleq	r0, r0, #8
 800b262:	3308      	addeq	r3, #8
 800b264:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b268:	bf04      	itt	eq
 800b26a:	0100      	lsleq	r0, r0, #4
 800b26c:	3304      	addeq	r3, #4
 800b26e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b272:	bf04      	itt	eq
 800b274:	0080      	lsleq	r0, r0, #2
 800b276:	3302      	addeq	r3, #2
 800b278:	2800      	cmp	r0, #0
 800b27a:	db05      	blt.n	800b288 <__hi0bits+0x38>
 800b27c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b280:	f103 0301 	add.w	r3, r3, #1
 800b284:	bf08      	it	eq
 800b286:	2320      	moveq	r3, #32
 800b288:	4618      	mov	r0, r3
 800b28a:	4770      	bx	lr
 800b28c:	2300      	movs	r3, #0
 800b28e:	e7e4      	b.n	800b25a <__hi0bits+0xa>

0800b290 <__lo0bits>:
 800b290:	6803      	ldr	r3, [r0, #0]
 800b292:	f013 0207 	ands.w	r2, r3, #7
 800b296:	4601      	mov	r1, r0
 800b298:	d00b      	beq.n	800b2b2 <__lo0bits+0x22>
 800b29a:	07da      	lsls	r2, r3, #31
 800b29c:	d423      	bmi.n	800b2e6 <__lo0bits+0x56>
 800b29e:	0798      	lsls	r0, r3, #30
 800b2a0:	bf49      	itett	mi
 800b2a2:	085b      	lsrmi	r3, r3, #1
 800b2a4:	089b      	lsrpl	r3, r3, #2
 800b2a6:	2001      	movmi	r0, #1
 800b2a8:	600b      	strmi	r3, [r1, #0]
 800b2aa:	bf5c      	itt	pl
 800b2ac:	600b      	strpl	r3, [r1, #0]
 800b2ae:	2002      	movpl	r0, #2
 800b2b0:	4770      	bx	lr
 800b2b2:	b298      	uxth	r0, r3
 800b2b4:	b9a8      	cbnz	r0, 800b2e2 <__lo0bits+0x52>
 800b2b6:	0c1b      	lsrs	r3, r3, #16
 800b2b8:	2010      	movs	r0, #16
 800b2ba:	b2da      	uxtb	r2, r3
 800b2bc:	b90a      	cbnz	r2, 800b2c2 <__lo0bits+0x32>
 800b2be:	3008      	adds	r0, #8
 800b2c0:	0a1b      	lsrs	r3, r3, #8
 800b2c2:	071a      	lsls	r2, r3, #28
 800b2c4:	bf04      	itt	eq
 800b2c6:	091b      	lsreq	r3, r3, #4
 800b2c8:	3004      	addeq	r0, #4
 800b2ca:	079a      	lsls	r2, r3, #30
 800b2cc:	bf04      	itt	eq
 800b2ce:	089b      	lsreq	r3, r3, #2
 800b2d0:	3002      	addeq	r0, #2
 800b2d2:	07da      	lsls	r2, r3, #31
 800b2d4:	d403      	bmi.n	800b2de <__lo0bits+0x4e>
 800b2d6:	085b      	lsrs	r3, r3, #1
 800b2d8:	f100 0001 	add.w	r0, r0, #1
 800b2dc:	d005      	beq.n	800b2ea <__lo0bits+0x5a>
 800b2de:	600b      	str	r3, [r1, #0]
 800b2e0:	4770      	bx	lr
 800b2e2:	4610      	mov	r0, r2
 800b2e4:	e7e9      	b.n	800b2ba <__lo0bits+0x2a>
 800b2e6:	2000      	movs	r0, #0
 800b2e8:	4770      	bx	lr
 800b2ea:	2020      	movs	r0, #32
 800b2ec:	4770      	bx	lr
	...

0800b2f0 <__i2b>:
 800b2f0:	b510      	push	{r4, lr}
 800b2f2:	460c      	mov	r4, r1
 800b2f4:	2101      	movs	r1, #1
 800b2f6:	f7ff ff03 	bl	800b100 <_Balloc>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	b928      	cbnz	r0, 800b30a <__i2b+0x1a>
 800b2fe:	4b05      	ldr	r3, [pc, #20]	; (800b314 <__i2b+0x24>)
 800b300:	4805      	ldr	r0, [pc, #20]	; (800b318 <__i2b+0x28>)
 800b302:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b306:	f000 fd35 	bl	800bd74 <__assert_func>
 800b30a:	2301      	movs	r3, #1
 800b30c:	6144      	str	r4, [r0, #20]
 800b30e:	6103      	str	r3, [r0, #16]
 800b310:	bd10      	pop	{r4, pc}
 800b312:	bf00      	nop
 800b314:	0800e45b 	.word	0x0800e45b
 800b318:	0800e4cc 	.word	0x0800e4cc

0800b31c <__multiply>:
 800b31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b320:	4691      	mov	r9, r2
 800b322:	690a      	ldr	r2, [r1, #16]
 800b324:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b328:	429a      	cmp	r2, r3
 800b32a:	bfb8      	it	lt
 800b32c:	460b      	movlt	r3, r1
 800b32e:	460c      	mov	r4, r1
 800b330:	bfbc      	itt	lt
 800b332:	464c      	movlt	r4, r9
 800b334:	4699      	movlt	r9, r3
 800b336:	6927      	ldr	r7, [r4, #16]
 800b338:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b33c:	68a3      	ldr	r3, [r4, #8]
 800b33e:	6861      	ldr	r1, [r4, #4]
 800b340:	eb07 060a 	add.w	r6, r7, sl
 800b344:	42b3      	cmp	r3, r6
 800b346:	b085      	sub	sp, #20
 800b348:	bfb8      	it	lt
 800b34a:	3101      	addlt	r1, #1
 800b34c:	f7ff fed8 	bl	800b100 <_Balloc>
 800b350:	b930      	cbnz	r0, 800b360 <__multiply+0x44>
 800b352:	4602      	mov	r2, r0
 800b354:	4b44      	ldr	r3, [pc, #272]	; (800b468 <__multiply+0x14c>)
 800b356:	4845      	ldr	r0, [pc, #276]	; (800b46c <__multiply+0x150>)
 800b358:	f240 115d 	movw	r1, #349	; 0x15d
 800b35c:	f000 fd0a 	bl	800bd74 <__assert_func>
 800b360:	f100 0514 	add.w	r5, r0, #20
 800b364:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b368:	462b      	mov	r3, r5
 800b36a:	2200      	movs	r2, #0
 800b36c:	4543      	cmp	r3, r8
 800b36e:	d321      	bcc.n	800b3b4 <__multiply+0x98>
 800b370:	f104 0314 	add.w	r3, r4, #20
 800b374:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b378:	f109 0314 	add.w	r3, r9, #20
 800b37c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b380:	9202      	str	r2, [sp, #8]
 800b382:	1b3a      	subs	r2, r7, r4
 800b384:	3a15      	subs	r2, #21
 800b386:	f022 0203 	bic.w	r2, r2, #3
 800b38a:	3204      	adds	r2, #4
 800b38c:	f104 0115 	add.w	r1, r4, #21
 800b390:	428f      	cmp	r7, r1
 800b392:	bf38      	it	cc
 800b394:	2204      	movcc	r2, #4
 800b396:	9201      	str	r2, [sp, #4]
 800b398:	9a02      	ldr	r2, [sp, #8]
 800b39a:	9303      	str	r3, [sp, #12]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d80c      	bhi.n	800b3ba <__multiply+0x9e>
 800b3a0:	2e00      	cmp	r6, #0
 800b3a2:	dd03      	ble.n	800b3ac <__multiply+0x90>
 800b3a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d05a      	beq.n	800b462 <__multiply+0x146>
 800b3ac:	6106      	str	r6, [r0, #16]
 800b3ae:	b005      	add	sp, #20
 800b3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b4:	f843 2b04 	str.w	r2, [r3], #4
 800b3b8:	e7d8      	b.n	800b36c <__multiply+0x50>
 800b3ba:	f8b3 a000 	ldrh.w	sl, [r3]
 800b3be:	f1ba 0f00 	cmp.w	sl, #0
 800b3c2:	d024      	beq.n	800b40e <__multiply+0xf2>
 800b3c4:	f104 0e14 	add.w	lr, r4, #20
 800b3c8:	46a9      	mov	r9, r5
 800b3ca:	f04f 0c00 	mov.w	ip, #0
 800b3ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b3d2:	f8d9 1000 	ldr.w	r1, [r9]
 800b3d6:	fa1f fb82 	uxth.w	fp, r2
 800b3da:	b289      	uxth	r1, r1
 800b3dc:	fb0a 110b 	mla	r1, sl, fp, r1
 800b3e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b3e4:	f8d9 2000 	ldr.w	r2, [r9]
 800b3e8:	4461      	add	r1, ip
 800b3ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b3ee:	fb0a c20b 	mla	r2, sl, fp, ip
 800b3f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b3f6:	b289      	uxth	r1, r1
 800b3f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b3fc:	4577      	cmp	r7, lr
 800b3fe:	f849 1b04 	str.w	r1, [r9], #4
 800b402:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b406:	d8e2      	bhi.n	800b3ce <__multiply+0xb2>
 800b408:	9a01      	ldr	r2, [sp, #4]
 800b40a:	f845 c002 	str.w	ip, [r5, r2]
 800b40e:	9a03      	ldr	r2, [sp, #12]
 800b410:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b414:	3304      	adds	r3, #4
 800b416:	f1b9 0f00 	cmp.w	r9, #0
 800b41a:	d020      	beq.n	800b45e <__multiply+0x142>
 800b41c:	6829      	ldr	r1, [r5, #0]
 800b41e:	f104 0c14 	add.w	ip, r4, #20
 800b422:	46ae      	mov	lr, r5
 800b424:	f04f 0a00 	mov.w	sl, #0
 800b428:	f8bc b000 	ldrh.w	fp, [ip]
 800b42c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b430:	fb09 220b 	mla	r2, r9, fp, r2
 800b434:	4492      	add	sl, r2
 800b436:	b289      	uxth	r1, r1
 800b438:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b43c:	f84e 1b04 	str.w	r1, [lr], #4
 800b440:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b444:	f8be 1000 	ldrh.w	r1, [lr]
 800b448:	0c12      	lsrs	r2, r2, #16
 800b44a:	fb09 1102 	mla	r1, r9, r2, r1
 800b44e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b452:	4567      	cmp	r7, ip
 800b454:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b458:	d8e6      	bhi.n	800b428 <__multiply+0x10c>
 800b45a:	9a01      	ldr	r2, [sp, #4]
 800b45c:	50a9      	str	r1, [r5, r2]
 800b45e:	3504      	adds	r5, #4
 800b460:	e79a      	b.n	800b398 <__multiply+0x7c>
 800b462:	3e01      	subs	r6, #1
 800b464:	e79c      	b.n	800b3a0 <__multiply+0x84>
 800b466:	bf00      	nop
 800b468:	0800e45b 	.word	0x0800e45b
 800b46c:	0800e4cc 	.word	0x0800e4cc

0800b470 <__pow5mult>:
 800b470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b474:	4615      	mov	r5, r2
 800b476:	f012 0203 	ands.w	r2, r2, #3
 800b47a:	4606      	mov	r6, r0
 800b47c:	460f      	mov	r7, r1
 800b47e:	d007      	beq.n	800b490 <__pow5mult+0x20>
 800b480:	4c25      	ldr	r4, [pc, #148]	; (800b518 <__pow5mult+0xa8>)
 800b482:	3a01      	subs	r2, #1
 800b484:	2300      	movs	r3, #0
 800b486:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b48a:	f7ff fe9b 	bl	800b1c4 <__multadd>
 800b48e:	4607      	mov	r7, r0
 800b490:	10ad      	asrs	r5, r5, #2
 800b492:	d03d      	beq.n	800b510 <__pow5mult+0xa0>
 800b494:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b496:	b97c      	cbnz	r4, 800b4b8 <__pow5mult+0x48>
 800b498:	2010      	movs	r0, #16
 800b49a:	f7ff fe1b 	bl	800b0d4 <malloc>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	6270      	str	r0, [r6, #36]	; 0x24
 800b4a2:	b928      	cbnz	r0, 800b4b0 <__pow5mult+0x40>
 800b4a4:	4b1d      	ldr	r3, [pc, #116]	; (800b51c <__pow5mult+0xac>)
 800b4a6:	481e      	ldr	r0, [pc, #120]	; (800b520 <__pow5mult+0xb0>)
 800b4a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b4ac:	f000 fc62 	bl	800bd74 <__assert_func>
 800b4b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4b4:	6004      	str	r4, [r0, #0]
 800b4b6:	60c4      	str	r4, [r0, #12]
 800b4b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b4bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b4c0:	b94c      	cbnz	r4, 800b4d6 <__pow5mult+0x66>
 800b4c2:	f240 2171 	movw	r1, #625	; 0x271
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	f7ff ff12 	bl	800b2f0 <__i2b>
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	6003      	str	r3, [r0, #0]
 800b4d6:	f04f 0900 	mov.w	r9, #0
 800b4da:	07eb      	lsls	r3, r5, #31
 800b4dc:	d50a      	bpl.n	800b4f4 <__pow5mult+0x84>
 800b4de:	4639      	mov	r1, r7
 800b4e0:	4622      	mov	r2, r4
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	f7ff ff1a 	bl	800b31c <__multiply>
 800b4e8:	4639      	mov	r1, r7
 800b4ea:	4680      	mov	r8, r0
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	f7ff fe47 	bl	800b180 <_Bfree>
 800b4f2:	4647      	mov	r7, r8
 800b4f4:	106d      	asrs	r5, r5, #1
 800b4f6:	d00b      	beq.n	800b510 <__pow5mult+0xa0>
 800b4f8:	6820      	ldr	r0, [r4, #0]
 800b4fa:	b938      	cbnz	r0, 800b50c <__pow5mult+0x9c>
 800b4fc:	4622      	mov	r2, r4
 800b4fe:	4621      	mov	r1, r4
 800b500:	4630      	mov	r0, r6
 800b502:	f7ff ff0b 	bl	800b31c <__multiply>
 800b506:	6020      	str	r0, [r4, #0]
 800b508:	f8c0 9000 	str.w	r9, [r0]
 800b50c:	4604      	mov	r4, r0
 800b50e:	e7e4      	b.n	800b4da <__pow5mult+0x6a>
 800b510:	4638      	mov	r0, r7
 800b512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b516:	bf00      	nop
 800b518:	0800e618 	.word	0x0800e618
 800b51c:	0800e3e9 	.word	0x0800e3e9
 800b520:	0800e4cc 	.word	0x0800e4cc

0800b524 <__lshift>:
 800b524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b528:	460c      	mov	r4, r1
 800b52a:	6849      	ldr	r1, [r1, #4]
 800b52c:	6923      	ldr	r3, [r4, #16]
 800b52e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b532:	68a3      	ldr	r3, [r4, #8]
 800b534:	4607      	mov	r7, r0
 800b536:	4691      	mov	r9, r2
 800b538:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b53c:	f108 0601 	add.w	r6, r8, #1
 800b540:	42b3      	cmp	r3, r6
 800b542:	db0b      	blt.n	800b55c <__lshift+0x38>
 800b544:	4638      	mov	r0, r7
 800b546:	f7ff fddb 	bl	800b100 <_Balloc>
 800b54a:	4605      	mov	r5, r0
 800b54c:	b948      	cbnz	r0, 800b562 <__lshift+0x3e>
 800b54e:	4602      	mov	r2, r0
 800b550:	4b2a      	ldr	r3, [pc, #168]	; (800b5fc <__lshift+0xd8>)
 800b552:	482b      	ldr	r0, [pc, #172]	; (800b600 <__lshift+0xdc>)
 800b554:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b558:	f000 fc0c 	bl	800bd74 <__assert_func>
 800b55c:	3101      	adds	r1, #1
 800b55e:	005b      	lsls	r3, r3, #1
 800b560:	e7ee      	b.n	800b540 <__lshift+0x1c>
 800b562:	2300      	movs	r3, #0
 800b564:	f100 0114 	add.w	r1, r0, #20
 800b568:	f100 0210 	add.w	r2, r0, #16
 800b56c:	4618      	mov	r0, r3
 800b56e:	4553      	cmp	r3, sl
 800b570:	db37      	blt.n	800b5e2 <__lshift+0xbe>
 800b572:	6920      	ldr	r0, [r4, #16]
 800b574:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b578:	f104 0314 	add.w	r3, r4, #20
 800b57c:	f019 091f 	ands.w	r9, r9, #31
 800b580:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b584:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b588:	d02f      	beq.n	800b5ea <__lshift+0xc6>
 800b58a:	f1c9 0e20 	rsb	lr, r9, #32
 800b58e:	468a      	mov	sl, r1
 800b590:	f04f 0c00 	mov.w	ip, #0
 800b594:	681a      	ldr	r2, [r3, #0]
 800b596:	fa02 f209 	lsl.w	r2, r2, r9
 800b59a:	ea42 020c 	orr.w	r2, r2, ip
 800b59e:	f84a 2b04 	str.w	r2, [sl], #4
 800b5a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5a6:	4298      	cmp	r0, r3
 800b5a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b5ac:	d8f2      	bhi.n	800b594 <__lshift+0x70>
 800b5ae:	1b03      	subs	r3, r0, r4
 800b5b0:	3b15      	subs	r3, #21
 800b5b2:	f023 0303 	bic.w	r3, r3, #3
 800b5b6:	3304      	adds	r3, #4
 800b5b8:	f104 0215 	add.w	r2, r4, #21
 800b5bc:	4290      	cmp	r0, r2
 800b5be:	bf38      	it	cc
 800b5c0:	2304      	movcc	r3, #4
 800b5c2:	f841 c003 	str.w	ip, [r1, r3]
 800b5c6:	f1bc 0f00 	cmp.w	ip, #0
 800b5ca:	d001      	beq.n	800b5d0 <__lshift+0xac>
 800b5cc:	f108 0602 	add.w	r6, r8, #2
 800b5d0:	3e01      	subs	r6, #1
 800b5d2:	4638      	mov	r0, r7
 800b5d4:	612e      	str	r6, [r5, #16]
 800b5d6:	4621      	mov	r1, r4
 800b5d8:	f7ff fdd2 	bl	800b180 <_Bfree>
 800b5dc:	4628      	mov	r0, r5
 800b5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	e7c1      	b.n	800b56e <__lshift+0x4a>
 800b5ea:	3904      	subs	r1, #4
 800b5ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b5f4:	4298      	cmp	r0, r3
 800b5f6:	d8f9      	bhi.n	800b5ec <__lshift+0xc8>
 800b5f8:	e7ea      	b.n	800b5d0 <__lshift+0xac>
 800b5fa:	bf00      	nop
 800b5fc:	0800e45b 	.word	0x0800e45b
 800b600:	0800e4cc 	.word	0x0800e4cc

0800b604 <__mcmp>:
 800b604:	b530      	push	{r4, r5, lr}
 800b606:	6902      	ldr	r2, [r0, #16]
 800b608:	690c      	ldr	r4, [r1, #16]
 800b60a:	1b12      	subs	r2, r2, r4
 800b60c:	d10e      	bne.n	800b62c <__mcmp+0x28>
 800b60e:	f100 0314 	add.w	r3, r0, #20
 800b612:	3114      	adds	r1, #20
 800b614:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b618:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b61c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b620:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b624:	42a5      	cmp	r5, r4
 800b626:	d003      	beq.n	800b630 <__mcmp+0x2c>
 800b628:	d305      	bcc.n	800b636 <__mcmp+0x32>
 800b62a:	2201      	movs	r2, #1
 800b62c:	4610      	mov	r0, r2
 800b62e:	bd30      	pop	{r4, r5, pc}
 800b630:	4283      	cmp	r3, r0
 800b632:	d3f3      	bcc.n	800b61c <__mcmp+0x18>
 800b634:	e7fa      	b.n	800b62c <__mcmp+0x28>
 800b636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b63a:	e7f7      	b.n	800b62c <__mcmp+0x28>

0800b63c <__mdiff>:
 800b63c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b640:	460c      	mov	r4, r1
 800b642:	4606      	mov	r6, r0
 800b644:	4611      	mov	r1, r2
 800b646:	4620      	mov	r0, r4
 800b648:	4690      	mov	r8, r2
 800b64a:	f7ff ffdb 	bl	800b604 <__mcmp>
 800b64e:	1e05      	subs	r5, r0, #0
 800b650:	d110      	bne.n	800b674 <__mdiff+0x38>
 800b652:	4629      	mov	r1, r5
 800b654:	4630      	mov	r0, r6
 800b656:	f7ff fd53 	bl	800b100 <_Balloc>
 800b65a:	b930      	cbnz	r0, 800b66a <__mdiff+0x2e>
 800b65c:	4b3a      	ldr	r3, [pc, #232]	; (800b748 <__mdiff+0x10c>)
 800b65e:	4602      	mov	r2, r0
 800b660:	f240 2132 	movw	r1, #562	; 0x232
 800b664:	4839      	ldr	r0, [pc, #228]	; (800b74c <__mdiff+0x110>)
 800b666:	f000 fb85 	bl	800bd74 <__assert_func>
 800b66a:	2301      	movs	r3, #1
 800b66c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b670:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b674:	bfa4      	itt	ge
 800b676:	4643      	movge	r3, r8
 800b678:	46a0      	movge	r8, r4
 800b67a:	4630      	mov	r0, r6
 800b67c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b680:	bfa6      	itte	ge
 800b682:	461c      	movge	r4, r3
 800b684:	2500      	movge	r5, #0
 800b686:	2501      	movlt	r5, #1
 800b688:	f7ff fd3a 	bl	800b100 <_Balloc>
 800b68c:	b920      	cbnz	r0, 800b698 <__mdiff+0x5c>
 800b68e:	4b2e      	ldr	r3, [pc, #184]	; (800b748 <__mdiff+0x10c>)
 800b690:	4602      	mov	r2, r0
 800b692:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b696:	e7e5      	b.n	800b664 <__mdiff+0x28>
 800b698:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b69c:	6926      	ldr	r6, [r4, #16]
 800b69e:	60c5      	str	r5, [r0, #12]
 800b6a0:	f104 0914 	add.w	r9, r4, #20
 800b6a4:	f108 0514 	add.w	r5, r8, #20
 800b6a8:	f100 0e14 	add.w	lr, r0, #20
 800b6ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b6b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b6b4:	f108 0210 	add.w	r2, r8, #16
 800b6b8:	46f2      	mov	sl, lr
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b6c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b6c4:	fa1f f883 	uxth.w	r8, r3
 800b6c8:	fa11 f18b 	uxtah	r1, r1, fp
 800b6cc:	0c1b      	lsrs	r3, r3, #16
 800b6ce:	eba1 0808 	sub.w	r8, r1, r8
 800b6d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b6d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b6da:	fa1f f888 	uxth.w	r8, r8
 800b6de:	1419      	asrs	r1, r3, #16
 800b6e0:	454e      	cmp	r6, r9
 800b6e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b6e6:	f84a 3b04 	str.w	r3, [sl], #4
 800b6ea:	d8e7      	bhi.n	800b6bc <__mdiff+0x80>
 800b6ec:	1b33      	subs	r3, r6, r4
 800b6ee:	3b15      	subs	r3, #21
 800b6f0:	f023 0303 	bic.w	r3, r3, #3
 800b6f4:	3304      	adds	r3, #4
 800b6f6:	3415      	adds	r4, #21
 800b6f8:	42a6      	cmp	r6, r4
 800b6fa:	bf38      	it	cc
 800b6fc:	2304      	movcc	r3, #4
 800b6fe:	441d      	add	r5, r3
 800b700:	4473      	add	r3, lr
 800b702:	469e      	mov	lr, r3
 800b704:	462e      	mov	r6, r5
 800b706:	4566      	cmp	r6, ip
 800b708:	d30e      	bcc.n	800b728 <__mdiff+0xec>
 800b70a:	f10c 0203 	add.w	r2, ip, #3
 800b70e:	1b52      	subs	r2, r2, r5
 800b710:	f022 0203 	bic.w	r2, r2, #3
 800b714:	3d03      	subs	r5, #3
 800b716:	45ac      	cmp	ip, r5
 800b718:	bf38      	it	cc
 800b71a:	2200      	movcc	r2, #0
 800b71c:	441a      	add	r2, r3
 800b71e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b722:	b17b      	cbz	r3, 800b744 <__mdiff+0x108>
 800b724:	6107      	str	r7, [r0, #16]
 800b726:	e7a3      	b.n	800b670 <__mdiff+0x34>
 800b728:	f856 8b04 	ldr.w	r8, [r6], #4
 800b72c:	fa11 f288 	uxtah	r2, r1, r8
 800b730:	1414      	asrs	r4, r2, #16
 800b732:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b736:	b292      	uxth	r2, r2
 800b738:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b73c:	f84e 2b04 	str.w	r2, [lr], #4
 800b740:	1421      	asrs	r1, r4, #16
 800b742:	e7e0      	b.n	800b706 <__mdiff+0xca>
 800b744:	3f01      	subs	r7, #1
 800b746:	e7ea      	b.n	800b71e <__mdiff+0xe2>
 800b748:	0800e45b 	.word	0x0800e45b
 800b74c:	0800e4cc 	.word	0x0800e4cc

0800b750 <__d2b>:
 800b750:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b754:	4689      	mov	r9, r1
 800b756:	2101      	movs	r1, #1
 800b758:	ec57 6b10 	vmov	r6, r7, d0
 800b75c:	4690      	mov	r8, r2
 800b75e:	f7ff fccf 	bl	800b100 <_Balloc>
 800b762:	4604      	mov	r4, r0
 800b764:	b930      	cbnz	r0, 800b774 <__d2b+0x24>
 800b766:	4602      	mov	r2, r0
 800b768:	4b25      	ldr	r3, [pc, #148]	; (800b800 <__d2b+0xb0>)
 800b76a:	4826      	ldr	r0, [pc, #152]	; (800b804 <__d2b+0xb4>)
 800b76c:	f240 310a 	movw	r1, #778	; 0x30a
 800b770:	f000 fb00 	bl	800bd74 <__assert_func>
 800b774:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b778:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b77c:	bb35      	cbnz	r5, 800b7cc <__d2b+0x7c>
 800b77e:	2e00      	cmp	r6, #0
 800b780:	9301      	str	r3, [sp, #4]
 800b782:	d028      	beq.n	800b7d6 <__d2b+0x86>
 800b784:	4668      	mov	r0, sp
 800b786:	9600      	str	r6, [sp, #0]
 800b788:	f7ff fd82 	bl	800b290 <__lo0bits>
 800b78c:	9900      	ldr	r1, [sp, #0]
 800b78e:	b300      	cbz	r0, 800b7d2 <__d2b+0x82>
 800b790:	9a01      	ldr	r2, [sp, #4]
 800b792:	f1c0 0320 	rsb	r3, r0, #32
 800b796:	fa02 f303 	lsl.w	r3, r2, r3
 800b79a:	430b      	orrs	r3, r1
 800b79c:	40c2      	lsrs	r2, r0
 800b79e:	6163      	str	r3, [r4, #20]
 800b7a0:	9201      	str	r2, [sp, #4]
 800b7a2:	9b01      	ldr	r3, [sp, #4]
 800b7a4:	61a3      	str	r3, [r4, #24]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	bf14      	ite	ne
 800b7aa:	2202      	movne	r2, #2
 800b7ac:	2201      	moveq	r2, #1
 800b7ae:	6122      	str	r2, [r4, #16]
 800b7b0:	b1d5      	cbz	r5, 800b7e8 <__d2b+0x98>
 800b7b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b7b6:	4405      	add	r5, r0
 800b7b8:	f8c9 5000 	str.w	r5, [r9]
 800b7bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b7c0:	f8c8 0000 	str.w	r0, [r8]
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	b003      	add	sp, #12
 800b7c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7d0:	e7d5      	b.n	800b77e <__d2b+0x2e>
 800b7d2:	6161      	str	r1, [r4, #20]
 800b7d4:	e7e5      	b.n	800b7a2 <__d2b+0x52>
 800b7d6:	a801      	add	r0, sp, #4
 800b7d8:	f7ff fd5a 	bl	800b290 <__lo0bits>
 800b7dc:	9b01      	ldr	r3, [sp, #4]
 800b7de:	6163      	str	r3, [r4, #20]
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	6122      	str	r2, [r4, #16]
 800b7e4:	3020      	adds	r0, #32
 800b7e6:	e7e3      	b.n	800b7b0 <__d2b+0x60>
 800b7e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b7ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b7f0:	f8c9 0000 	str.w	r0, [r9]
 800b7f4:	6918      	ldr	r0, [r3, #16]
 800b7f6:	f7ff fd2b 	bl	800b250 <__hi0bits>
 800b7fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b7fe:	e7df      	b.n	800b7c0 <__d2b+0x70>
 800b800:	0800e45b 	.word	0x0800e45b
 800b804:	0800e4cc 	.word	0x0800e4cc

0800b808 <_calloc_r>:
 800b808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b80a:	fba1 2402 	umull	r2, r4, r1, r2
 800b80e:	b94c      	cbnz	r4, 800b824 <_calloc_r+0x1c>
 800b810:	4611      	mov	r1, r2
 800b812:	9201      	str	r2, [sp, #4]
 800b814:	f000 f87a 	bl	800b90c <_malloc_r>
 800b818:	9a01      	ldr	r2, [sp, #4]
 800b81a:	4605      	mov	r5, r0
 800b81c:	b930      	cbnz	r0, 800b82c <_calloc_r+0x24>
 800b81e:	4628      	mov	r0, r5
 800b820:	b003      	add	sp, #12
 800b822:	bd30      	pop	{r4, r5, pc}
 800b824:	220c      	movs	r2, #12
 800b826:	6002      	str	r2, [r0, #0]
 800b828:	2500      	movs	r5, #0
 800b82a:	e7f8      	b.n	800b81e <_calloc_r+0x16>
 800b82c:	4621      	mov	r1, r4
 800b82e:	f7fd fdf3 	bl	8009418 <memset>
 800b832:	e7f4      	b.n	800b81e <_calloc_r+0x16>

0800b834 <_free_r>:
 800b834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b836:	2900      	cmp	r1, #0
 800b838:	d044      	beq.n	800b8c4 <_free_r+0x90>
 800b83a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b83e:	9001      	str	r0, [sp, #4]
 800b840:	2b00      	cmp	r3, #0
 800b842:	f1a1 0404 	sub.w	r4, r1, #4
 800b846:	bfb8      	it	lt
 800b848:	18e4      	addlt	r4, r4, r3
 800b84a:	f000 fb19 	bl	800be80 <__malloc_lock>
 800b84e:	4a1e      	ldr	r2, [pc, #120]	; (800b8c8 <_free_r+0x94>)
 800b850:	9801      	ldr	r0, [sp, #4]
 800b852:	6813      	ldr	r3, [r2, #0]
 800b854:	b933      	cbnz	r3, 800b864 <_free_r+0x30>
 800b856:	6063      	str	r3, [r4, #4]
 800b858:	6014      	str	r4, [r2, #0]
 800b85a:	b003      	add	sp, #12
 800b85c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b860:	f000 bb14 	b.w	800be8c <__malloc_unlock>
 800b864:	42a3      	cmp	r3, r4
 800b866:	d908      	bls.n	800b87a <_free_r+0x46>
 800b868:	6825      	ldr	r5, [r4, #0]
 800b86a:	1961      	adds	r1, r4, r5
 800b86c:	428b      	cmp	r3, r1
 800b86e:	bf01      	itttt	eq
 800b870:	6819      	ldreq	r1, [r3, #0]
 800b872:	685b      	ldreq	r3, [r3, #4]
 800b874:	1949      	addeq	r1, r1, r5
 800b876:	6021      	streq	r1, [r4, #0]
 800b878:	e7ed      	b.n	800b856 <_free_r+0x22>
 800b87a:	461a      	mov	r2, r3
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	b10b      	cbz	r3, 800b884 <_free_r+0x50>
 800b880:	42a3      	cmp	r3, r4
 800b882:	d9fa      	bls.n	800b87a <_free_r+0x46>
 800b884:	6811      	ldr	r1, [r2, #0]
 800b886:	1855      	adds	r5, r2, r1
 800b888:	42a5      	cmp	r5, r4
 800b88a:	d10b      	bne.n	800b8a4 <_free_r+0x70>
 800b88c:	6824      	ldr	r4, [r4, #0]
 800b88e:	4421      	add	r1, r4
 800b890:	1854      	adds	r4, r2, r1
 800b892:	42a3      	cmp	r3, r4
 800b894:	6011      	str	r1, [r2, #0]
 800b896:	d1e0      	bne.n	800b85a <_free_r+0x26>
 800b898:	681c      	ldr	r4, [r3, #0]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	6053      	str	r3, [r2, #4]
 800b89e:	4421      	add	r1, r4
 800b8a0:	6011      	str	r1, [r2, #0]
 800b8a2:	e7da      	b.n	800b85a <_free_r+0x26>
 800b8a4:	d902      	bls.n	800b8ac <_free_r+0x78>
 800b8a6:	230c      	movs	r3, #12
 800b8a8:	6003      	str	r3, [r0, #0]
 800b8aa:	e7d6      	b.n	800b85a <_free_r+0x26>
 800b8ac:	6825      	ldr	r5, [r4, #0]
 800b8ae:	1961      	adds	r1, r4, r5
 800b8b0:	428b      	cmp	r3, r1
 800b8b2:	bf04      	itt	eq
 800b8b4:	6819      	ldreq	r1, [r3, #0]
 800b8b6:	685b      	ldreq	r3, [r3, #4]
 800b8b8:	6063      	str	r3, [r4, #4]
 800b8ba:	bf04      	itt	eq
 800b8bc:	1949      	addeq	r1, r1, r5
 800b8be:	6021      	streq	r1, [r4, #0]
 800b8c0:	6054      	str	r4, [r2, #4]
 800b8c2:	e7ca      	b.n	800b85a <_free_r+0x26>
 800b8c4:	b003      	add	sp, #12
 800b8c6:	bd30      	pop	{r4, r5, pc}
 800b8c8:	20000c18 	.word	0x20000c18

0800b8cc <sbrk_aligned>:
 800b8cc:	b570      	push	{r4, r5, r6, lr}
 800b8ce:	4e0e      	ldr	r6, [pc, #56]	; (800b908 <sbrk_aligned+0x3c>)
 800b8d0:	460c      	mov	r4, r1
 800b8d2:	6831      	ldr	r1, [r6, #0]
 800b8d4:	4605      	mov	r5, r0
 800b8d6:	b911      	cbnz	r1, 800b8de <sbrk_aligned+0x12>
 800b8d8:	f000 f9e6 	bl	800bca8 <_sbrk_r>
 800b8dc:	6030      	str	r0, [r6, #0]
 800b8de:	4621      	mov	r1, r4
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	f000 f9e1 	bl	800bca8 <_sbrk_r>
 800b8e6:	1c43      	adds	r3, r0, #1
 800b8e8:	d00a      	beq.n	800b900 <sbrk_aligned+0x34>
 800b8ea:	1cc4      	adds	r4, r0, #3
 800b8ec:	f024 0403 	bic.w	r4, r4, #3
 800b8f0:	42a0      	cmp	r0, r4
 800b8f2:	d007      	beq.n	800b904 <sbrk_aligned+0x38>
 800b8f4:	1a21      	subs	r1, r4, r0
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	f000 f9d6 	bl	800bca8 <_sbrk_r>
 800b8fc:	3001      	adds	r0, #1
 800b8fe:	d101      	bne.n	800b904 <sbrk_aligned+0x38>
 800b900:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b904:	4620      	mov	r0, r4
 800b906:	bd70      	pop	{r4, r5, r6, pc}
 800b908:	20000c1c 	.word	0x20000c1c

0800b90c <_malloc_r>:
 800b90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b910:	1ccd      	adds	r5, r1, #3
 800b912:	f025 0503 	bic.w	r5, r5, #3
 800b916:	3508      	adds	r5, #8
 800b918:	2d0c      	cmp	r5, #12
 800b91a:	bf38      	it	cc
 800b91c:	250c      	movcc	r5, #12
 800b91e:	2d00      	cmp	r5, #0
 800b920:	4607      	mov	r7, r0
 800b922:	db01      	blt.n	800b928 <_malloc_r+0x1c>
 800b924:	42a9      	cmp	r1, r5
 800b926:	d905      	bls.n	800b934 <_malloc_r+0x28>
 800b928:	230c      	movs	r3, #12
 800b92a:	603b      	str	r3, [r7, #0]
 800b92c:	2600      	movs	r6, #0
 800b92e:	4630      	mov	r0, r6
 800b930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b934:	4e2e      	ldr	r6, [pc, #184]	; (800b9f0 <_malloc_r+0xe4>)
 800b936:	f000 faa3 	bl	800be80 <__malloc_lock>
 800b93a:	6833      	ldr	r3, [r6, #0]
 800b93c:	461c      	mov	r4, r3
 800b93e:	bb34      	cbnz	r4, 800b98e <_malloc_r+0x82>
 800b940:	4629      	mov	r1, r5
 800b942:	4638      	mov	r0, r7
 800b944:	f7ff ffc2 	bl	800b8cc <sbrk_aligned>
 800b948:	1c43      	adds	r3, r0, #1
 800b94a:	4604      	mov	r4, r0
 800b94c:	d14d      	bne.n	800b9ea <_malloc_r+0xde>
 800b94e:	6834      	ldr	r4, [r6, #0]
 800b950:	4626      	mov	r6, r4
 800b952:	2e00      	cmp	r6, #0
 800b954:	d140      	bne.n	800b9d8 <_malloc_r+0xcc>
 800b956:	6823      	ldr	r3, [r4, #0]
 800b958:	4631      	mov	r1, r6
 800b95a:	4638      	mov	r0, r7
 800b95c:	eb04 0803 	add.w	r8, r4, r3
 800b960:	f000 f9a2 	bl	800bca8 <_sbrk_r>
 800b964:	4580      	cmp	r8, r0
 800b966:	d13a      	bne.n	800b9de <_malloc_r+0xd2>
 800b968:	6821      	ldr	r1, [r4, #0]
 800b96a:	3503      	adds	r5, #3
 800b96c:	1a6d      	subs	r5, r5, r1
 800b96e:	f025 0503 	bic.w	r5, r5, #3
 800b972:	3508      	adds	r5, #8
 800b974:	2d0c      	cmp	r5, #12
 800b976:	bf38      	it	cc
 800b978:	250c      	movcc	r5, #12
 800b97a:	4629      	mov	r1, r5
 800b97c:	4638      	mov	r0, r7
 800b97e:	f7ff ffa5 	bl	800b8cc <sbrk_aligned>
 800b982:	3001      	adds	r0, #1
 800b984:	d02b      	beq.n	800b9de <_malloc_r+0xd2>
 800b986:	6823      	ldr	r3, [r4, #0]
 800b988:	442b      	add	r3, r5
 800b98a:	6023      	str	r3, [r4, #0]
 800b98c:	e00e      	b.n	800b9ac <_malloc_r+0xa0>
 800b98e:	6822      	ldr	r2, [r4, #0]
 800b990:	1b52      	subs	r2, r2, r5
 800b992:	d41e      	bmi.n	800b9d2 <_malloc_r+0xc6>
 800b994:	2a0b      	cmp	r2, #11
 800b996:	d916      	bls.n	800b9c6 <_malloc_r+0xba>
 800b998:	1961      	adds	r1, r4, r5
 800b99a:	42a3      	cmp	r3, r4
 800b99c:	6025      	str	r5, [r4, #0]
 800b99e:	bf18      	it	ne
 800b9a0:	6059      	strne	r1, [r3, #4]
 800b9a2:	6863      	ldr	r3, [r4, #4]
 800b9a4:	bf08      	it	eq
 800b9a6:	6031      	streq	r1, [r6, #0]
 800b9a8:	5162      	str	r2, [r4, r5]
 800b9aa:	604b      	str	r3, [r1, #4]
 800b9ac:	4638      	mov	r0, r7
 800b9ae:	f104 060b 	add.w	r6, r4, #11
 800b9b2:	f000 fa6b 	bl	800be8c <__malloc_unlock>
 800b9b6:	f026 0607 	bic.w	r6, r6, #7
 800b9ba:	1d23      	adds	r3, r4, #4
 800b9bc:	1af2      	subs	r2, r6, r3
 800b9be:	d0b6      	beq.n	800b92e <_malloc_r+0x22>
 800b9c0:	1b9b      	subs	r3, r3, r6
 800b9c2:	50a3      	str	r3, [r4, r2]
 800b9c4:	e7b3      	b.n	800b92e <_malloc_r+0x22>
 800b9c6:	6862      	ldr	r2, [r4, #4]
 800b9c8:	42a3      	cmp	r3, r4
 800b9ca:	bf0c      	ite	eq
 800b9cc:	6032      	streq	r2, [r6, #0]
 800b9ce:	605a      	strne	r2, [r3, #4]
 800b9d0:	e7ec      	b.n	800b9ac <_malloc_r+0xa0>
 800b9d2:	4623      	mov	r3, r4
 800b9d4:	6864      	ldr	r4, [r4, #4]
 800b9d6:	e7b2      	b.n	800b93e <_malloc_r+0x32>
 800b9d8:	4634      	mov	r4, r6
 800b9da:	6876      	ldr	r6, [r6, #4]
 800b9dc:	e7b9      	b.n	800b952 <_malloc_r+0x46>
 800b9de:	230c      	movs	r3, #12
 800b9e0:	603b      	str	r3, [r7, #0]
 800b9e2:	4638      	mov	r0, r7
 800b9e4:	f000 fa52 	bl	800be8c <__malloc_unlock>
 800b9e8:	e7a1      	b.n	800b92e <_malloc_r+0x22>
 800b9ea:	6025      	str	r5, [r4, #0]
 800b9ec:	e7de      	b.n	800b9ac <_malloc_r+0xa0>
 800b9ee:	bf00      	nop
 800b9f0:	20000c18 	.word	0x20000c18

0800b9f4 <__sfputc_r>:
 800b9f4:	6893      	ldr	r3, [r2, #8]
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	b410      	push	{r4}
 800b9fc:	6093      	str	r3, [r2, #8]
 800b9fe:	da08      	bge.n	800ba12 <__sfputc_r+0x1e>
 800ba00:	6994      	ldr	r4, [r2, #24]
 800ba02:	42a3      	cmp	r3, r4
 800ba04:	db01      	blt.n	800ba0a <__sfputc_r+0x16>
 800ba06:	290a      	cmp	r1, #10
 800ba08:	d103      	bne.n	800ba12 <__sfputc_r+0x1e>
 800ba0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba0e:	f7fe ba03 	b.w	8009e18 <__swbuf_r>
 800ba12:	6813      	ldr	r3, [r2, #0]
 800ba14:	1c58      	adds	r0, r3, #1
 800ba16:	6010      	str	r0, [r2, #0]
 800ba18:	7019      	strb	r1, [r3, #0]
 800ba1a:	4608      	mov	r0, r1
 800ba1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <__sfputs_r>:
 800ba22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba24:	4606      	mov	r6, r0
 800ba26:	460f      	mov	r7, r1
 800ba28:	4614      	mov	r4, r2
 800ba2a:	18d5      	adds	r5, r2, r3
 800ba2c:	42ac      	cmp	r4, r5
 800ba2e:	d101      	bne.n	800ba34 <__sfputs_r+0x12>
 800ba30:	2000      	movs	r0, #0
 800ba32:	e007      	b.n	800ba44 <__sfputs_r+0x22>
 800ba34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba38:	463a      	mov	r2, r7
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	f7ff ffda 	bl	800b9f4 <__sfputc_r>
 800ba40:	1c43      	adds	r3, r0, #1
 800ba42:	d1f3      	bne.n	800ba2c <__sfputs_r+0xa>
 800ba44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba48 <_vfiprintf_r>:
 800ba48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba4c:	460d      	mov	r5, r1
 800ba4e:	b09d      	sub	sp, #116	; 0x74
 800ba50:	4614      	mov	r4, r2
 800ba52:	4698      	mov	r8, r3
 800ba54:	4606      	mov	r6, r0
 800ba56:	b118      	cbz	r0, 800ba60 <_vfiprintf_r+0x18>
 800ba58:	6983      	ldr	r3, [r0, #24]
 800ba5a:	b90b      	cbnz	r3, 800ba60 <_vfiprintf_r+0x18>
 800ba5c:	f7ff fa30 	bl	800aec0 <__sinit>
 800ba60:	4b89      	ldr	r3, [pc, #548]	; (800bc88 <_vfiprintf_r+0x240>)
 800ba62:	429d      	cmp	r5, r3
 800ba64:	d11b      	bne.n	800ba9e <_vfiprintf_r+0x56>
 800ba66:	6875      	ldr	r5, [r6, #4]
 800ba68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba6a:	07d9      	lsls	r1, r3, #31
 800ba6c:	d405      	bmi.n	800ba7a <_vfiprintf_r+0x32>
 800ba6e:	89ab      	ldrh	r3, [r5, #12]
 800ba70:	059a      	lsls	r2, r3, #22
 800ba72:	d402      	bmi.n	800ba7a <_vfiprintf_r+0x32>
 800ba74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba76:	f7ff fac6 	bl	800b006 <__retarget_lock_acquire_recursive>
 800ba7a:	89ab      	ldrh	r3, [r5, #12]
 800ba7c:	071b      	lsls	r3, r3, #28
 800ba7e:	d501      	bpl.n	800ba84 <_vfiprintf_r+0x3c>
 800ba80:	692b      	ldr	r3, [r5, #16]
 800ba82:	b9eb      	cbnz	r3, 800bac0 <_vfiprintf_r+0x78>
 800ba84:	4629      	mov	r1, r5
 800ba86:	4630      	mov	r0, r6
 800ba88:	f7fe fa18 	bl	8009ebc <__swsetup_r>
 800ba8c:	b1c0      	cbz	r0, 800bac0 <_vfiprintf_r+0x78>
 800ba8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba90:	07dc      	lsls	r4, r3, #31
 800ba92:	d50e      	bpl.n	800bab2 <_vfiprintf_r+0x6a>
 800ba94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba98:	b01d      	add	sp, #116	; 0x74
 800ba9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba9e:	4b7b      	ldr	r3, [pc, #492]	; (800bc8c <_vfiprintf_r+0x244>)
 800baa0:	429d      	cmp	r5, r3
 800baa2:	d101      	bne.n	800baa8 <_vfiprintf_r+0x60>
 800baa4:	68b5      	ldr	r5, [r6, #8]
 800baa6:	e7df      	b.n	800ba68 <_vfiprintf_r+0x20>
 800baa8:	4b79      	ldr	r3, [pc, #484]	; (800bc90 <_vfiprintf_r+0x248>)
 800baaa:	429d      	cmp	r5, r3
 800baac:	bf08      	it	eq
 800baae:	68f5      	ldreq	r5, [r6, #12]
 800bab0:	e7da      	b.n	800ba68 <_vfiprintf_r+0x20>
 800bab2:	89ab      	ldrh	r3, [r5, #12]
 800bab4:	0598      	lsls	r0, r3, #22
 800bab6:	d4ed      	bmi.n	800ba94 <_vfiprintf_r+0x4c>
 800bab8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baba:	f7ff faa5 	bl	800b008 <__retarget_lock_release_recursive>
 800babe:	e7e9      	b.n	800ba94 <_vfiprintf_r+0x4c>
 800bac0:	2300      	movs	r3, #0
 800bac2:	9309      	str	r3, [sp, #36]	; 0x24
 800bac4:	2320      	movs	r3, #32
 800bac6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800baca:	f8cd 800c 	str.w	r8, [sp, #12]
 800bace:	2330      	movs	r3, #48	; 0x30
 800bad0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bc94 <_vfiprintf_r+0x24c>
 800bad4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bad8:	f04f 0901 	mov.w	r9, #1
 800badc:	4623      	mov	r3, r4
 800bade:	469a      	mov	sl, r3
 800bae0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bae4:	b10a      	cbz	r2, 800baea <_vfiprintf_r+0xa2>
 800bae6:	2a25      	cmp	r2, #37	; 0x25
 800bae8:	d1f9      	bne.n	800bade <_vfiprintf_r+0x96>
 800baea:	ebba 0b04 	subs.w	fp, sl, r4
 800baee:	d00b      	beq.n	800bb08 <_vfiprintf_r+0xc0>
 800baf0:	465b      	mov	r3, fp
 800baf2:	4622      	mov	r2, r4
 800baf4:	4629      	mov	r1, r5
 800baf6:	4630      	mov	r0, r6
 800baf8:	f7ff ff93 	bl	800ba22 <__sfputs_r>
 800bafc:	3001      	adds	r0, #1
 800bafe:	f000 80aa 	beq.w	800bc56 <_vfiprintf_r+0x20e>
 800bb02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb04:	445a      	add	r2, fp
 800bb06:	9209      	str	r2, [sp, #36]	; 0x24
 800bb08:	f89a 3000 	ldrb.w	r3, [sl]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	f000 80a2 	beq.w	800bc56 <_vfiprintf_r+0x20e>
 800bb12:	2300      	movs	r3, #0
 800bb14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb1c:	f10a 0a01 	add.w	sl, sl, #1
 800bb20:	9304      	str	r3, [sp, #16]
 800bb22:	9307      	str	r3, [sp, #28]
 800bb24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb28:	931a      	str	r3, [sp, #104]	; 0x68
 800bb2a:	4654      	mov	r4, sl
 800bb2c:	2205      	movs	r2, #5
 800bb2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb32:	4858      	ldr	r0, [pc, #352]	; (800bc94 <_vfiprintf_r+0x24c>)
 800bb34:	f7f4 fb74 	bl	8000220 <memchr>
 800bb38:	9a04      	ldr	r2, [sp, #16]
 800bb3a:	b9d8      	cbnz	r0, 800bb74 <_vfiprintf_r+0x12c>
 800bb3c:	06d1      	lsls	r1, r2, #27
 800bb3e:	bf44      	itt	mi
 800bb40:	2320      	movmi	r3, #32
 800bb42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb46:	0713      	lsls	r3, r2, #28
 800bb48:	bf44      	itt	mi
 800bb4a:	232b      	movmi	r3, #43	; 0x2b
 800bb4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb50:	f89a 3000 	ldrb.w	r3, [sl]
 800bb54:	2b2a      	cmp	r3, #42	; 0x2a
 800bb56:	d015      	beq.n	800bb84 <_vfiprintf_r+0x13c>
 800bb58:	9a07      	ldr	r2, [sp, #28]
 800bb5a:	4654      	mov	r4, sl
 800bb5c:	2000      	movs	r0, #0
 800bb5e:	f04f 0c0a 	mov.w	ip, #10
 800bb62:	4621      	mov	r1, r4
 800bb64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb68:	3b30      	subs	r3, #48	; 0x30
 800bb6a:	2b09      	cmp	r3, #9
 800bb6c:	d94e      	bls.n	800bc0c <_vfiprintf_r+0x1c4>
 800bb6e:	b1b0      	cbz	r0, 800bb9e <_vfiprintf_r+0x156>
 800bb70:	9207      	str	r2, [sp, #28]
 800bb72:	e014      	b.n	800bb9e <_vfiprintf_r+0x156>
 800bb74:	eba0 0308 	sub.w	r3, r0, r8
 800bb78:	fa09 f303 	lsl.w	r3, r9, r3
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	9304      	str	r3, [sp, #16]
 800bb80:	46a2      	mov	sl, r4
 800bb82:	e7d2      	b.n	800bb2a <_vfiprintf_r+0xe2>
 800bb84:	9b03      	ldr	r3, [sp, #12]
 800bb86:	1d19      	adds	r1, r3, #4
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	9103      	str	r1, [sp, #12]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	bfbb      	ittet	lt
 800bb90:	425b      	neglt	r3, r3
 800bb92:	f042 0202 	orrlt.w	r2, r2, #2
 800bb96:	9307      	strge	r3, [sp, #28]
 800bb98:	9307      	strlt	r3, [sp, #28]
 800bb9a:	bfb8      	it	lt
 800bb9c:	9204      	strlt	r2, [sp, #16]
 800bb9e:	7823      	ldrb	r3, [r4, #0]
 800bba0:	2b2e      	cmp	r3, #46	; 0x2e
 800bba2:	d10c      	bne.n	800bbbe <_vfiprintf_r+0x176>
 800bba4:	7863      	ldrb	r3, [r4, #1]
 800bba6:	2b2a      	cmp	r3, #42	; 0x2a
 800bba8:	d135      	bne.n	800bc16 <_vfiprintf_r+0x1ce>
 800bbaa:	9b03      	ldr	r3, [sp, #12]
 800bbac:	1d1a      	adds	r2, r3, #4
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	9203      	str	r2, [sp, #12]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	bfb8      	it	lt
 800bbb6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bbba:	3402      	adds	r4, #2
 800bbbc:	9305      	str	r3, [sp, #20]
 800bbbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bca4 <_vfiprintf_r+0x25c>
 800bbc2:	7821      	ldrb	r1, [r4, #0]
 800bbc4:	2203      	movs	r2, #3
 800bbc6:	4650      	mov	r0, sl
 800bbc8:	f7f4 fb2a 	bl	8000220 <memchr>
 800bbcc:	b140      	cbz	r0, 800bbe0 <_vfiprintf_r+0x198>
 800bbce:	2340      	movs	r3, #64	; 0x40
 800bbd0:	eba0 000a 	sub.w	r0, r0, sl
 800bbd4:	fa03 f000 	lsl.w	r0, r3, r0
 800bbd8:	9b04      	ldr	r3, [sp, #16]
 800bbda:	4303      	orrs	r3, r0
 800bbdc:	3401      	adds	r4, #1
 800bbde:	9304      	str	r3, [sp, #16]
 800bbe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbe4:	482c      	ldr	r0, [pc, #176]	; (800bc98 <_vfiprintf_r+0x250>)
 800bbe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbea:	2206      	movs	r2, #6
 800bbec:	f7f4 fb18 	bl	8000220 <memchr>
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	d03f      	beq.n	800bc74 <_vfiprintf_r+0x22c>
 800bbf4:	4b29      	ldr	r3, [pc, #164]	; (800bc9c <_vfiprintf_r+0x254>)
 800bbf6:	bb1b      	cbnz	r3, 800bc40 <_vfiprintf_r+0x1f8>
 800bbf8:	9b03      	ldr	r3, [sp, #12]
 800bbfa:	3307      	adds	r3, #7
 800bbfc:	f023 0307 	bic.w	r3, r3, #7
 800bc00:	3308      	adds	r3, #8
 800bc02:	9303      	str	r3, [sp, #12]
 800bc04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc06:	443b      	add	r3, r7
 800bc08:	9309      	str	r3, [sp, #36]	; 0x24
 800bc0a:	e767      	b.n	800badc <_vfiprintf_r+0x94>
 800bc0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc10:	460c      	mov	r4, r1
 800bc12:	2001      	movs	r0, #1
 800bc14:	e7a5      	b.n	800bb62 <_vfiprintf_r+0x11a>
 800bc16:	2300      	movs	r3, #0
 800bc18:	3401      	adds	r4, #1
 800bc1a:	9305      	str	r3, [sp, #20]
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	f04f 0c0a 	mov.w	ip, #10
 800bc22:	4620      	mov	r0, r4
 800bc24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc28:	3a30      	subs	r2, #48	; 0x30
 800bc2a:	2a09      	cmp	r2, #9
 800bc2c:	d903      	bls.n	800bc36 <_vfiprintf_r+0x1ee>
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d0c5      	beq.n	800bbbe <_vfiprintf_r+0x176>
 800bc32:	9105      	str	r1, [sp, #20]
 800bc34:	e7c3      	b.n	800bbbe <_vfiprintf_r+0x176>
 800bc36:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	e7f0      	b.n	800bc22 <_vfiprintf_r+0x1da>
 800bc40:	ab03      	add	r3, sp, #12
 800bc42:	9300      	str	r3, [sp, #0]
 800bc44:	462a      	mov	r2, r5
 800bc46:	4b16      	ldr	r3, [pc, #88]	; (800bca0 <_vfiprintf_r+0x258>)
 800bc48:	a904      	add	r1, sp, #16
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	f7fd fc8c 	bl	8009568 <_printf_float>
 800bc50:	4607      	mov	r7, r0
 800bc52:	1c78      	adds	r0, r7, #1
 800bc54:	d1d6      	bne.n	800bc04 <_vfiprintf_r+0x1bc>
 800bc56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc58:	07d9      	lsls	r1, r3, #31
 800bc5a:	d405      	bmi.n	800bc68 <_vfiprintf_r+0x220>
 800bc5c:	89ab      	ldrh	r3, [r5, #12]
 800bc5e:	059a      	lsls	r2, r3, #22
 800bc60:	d402      	bmi.n	800bc68 <_vfiprintf_r+0x220>
 800bc62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc64:	f7ff f9d0 	bl	800b008 <__retarget_lock_release_recursive>
 800bc68:	89ab      	ldrh	r3, [r5, #12]
 800bc6a:	065b      	lsls	r3, r3, #25
 800bc6c:	f53f af12 	bmi.w	800ba94 <_vfiprintf_r+0x4c>
 800bc70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc72:	e711      	b.n	800ba98 <_vfiprintf_r+0x50>
 800bc74:	ab03      	add	r3, sp, #12
 800bc76:	9300      	str	r3, [sp, #0]
 800bc78:	462a      	mov	r2, r5
 800bc7a:	4b09      	ldr	r3, [pc, #36]	; (800bca0 <_vfiprintf_r+0x258>)
 800bc7c:	a904      	add	r1, sp, #16
 800bc7e:	4630      	mov	r0, r6
 800bc80:	f7fd ff16 	bl	8009ab0 <_printf_i>
 800bc84:	e7e4      	b.n	800bc50 <_vfiprintf_r+0x208>
 800bc86:	bf00      	nop
 800bc88:	0800e48c 	.word	0x0800e48c
 800bc8c:	0800e4ac 	.word	0x0800e4ac
 800bc90:	0800e46c 	.word	0x0800e46c
 800bc94:	0800e624 	.word	0x0800e624
 800bc98:	0800e62e 	.word	0x0800e62e
 800bc9c:	08009569 	.word	0x08009569
 800bca0:	0800ba23 	.word	0x0800ba23
 800bca4:	0800e62a 	.word	0x0800e62a

0800bca8 <_sbrk_r>:
 800bca8:	b538      	push	{r3, r4, r5, lr}
 800bcaa:	4d06      	ldr	r5, [pc, #24]	; (800bcc4 <_sbrk_r+0x1c>)
 800bcac:	2300      	movs	r3, #0
 800bcae:	4604      	mov	r4, r0
 800bcb0:	4608      	mov	r0, r1
 800bcb2:	602b      	str	r3, [r5, #0]
 800bcb4:	f7f8 ffc0 	bl	8004c38 <_sbrk>
 800bcb8:	1c43      	adds	r3, r0, #1
 800bcba:	d102      	bne.n	800bcc2 <_sbrk_r+0x1a>
 800bcbc:	682b      	ldr	r3, [r5, #0]
 800bcbe:	b103      	cbz	r3, 800bcc2 <_sbrk_r+0x1a>
 800bcc0:	6023      	str	r3, [r4, #0]
 800bcc2:	bd38      	pop	{r3, r4, r5, pc}
 800bcc4:	20000c20 	.word	0x20000c20

0800bcc8 <__sread>:
 800bcc8:	b510      	push	{r4, lr}
 800bcca:	460c      	mov	r4, r1
 800bccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcd0:	f000 f8e2 	bl	800be98 <_read_r>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	bfab      	itete	ge
 800bcd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bcda:	89a3      	ldrhlt	r3, [r4, #12]
 800bcdc:	181b      	addge	r3, r3, r0
 800bcde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bce2:	bfac      	ite	ge
 800bce4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bce6:	81a3      	strhlt	r3, [r4, #12]
 800bce8:	bd10      	pop	{r4, pc}

0800bcea <__swrite>:
 800bcea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcee:	461f      	mov	r7, r3
 800bcf0:	898b      	ldrh	r3, [r1, #12]
 800bcf2:	05db      	lsls	r3, r3, #23
 800bcf4:	4605      	mov	r5, r0
 800bcf6:	460c      	mov	r4, r1
 800bcf8:	4616      	mov	r6, r2
 800bcfa:	d505      	bpl.n	800bd08 <__swrite+0x1e>
 800bcfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd00:	2302      	movs	r3, #2
 800bd02:	2200      	movs	r2, #0
 800bd04:	f000 f898 	bl	800be38 <_lseek_r>
 800bd08:	89a3      	ldrh	r3, [r4, #12]
 800bd0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd12:	81a3      	strh	r3, [r4, #12]
 800bd14:	4632      	mov	r2, r6
 800bd16:	463b      	mov	r3, r7
 800bd18:	4628      	mov	r0, r5
 800bd1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd1e:	f000 b817 	b.w	800bd50 <_write_r>

0800bd22 <__sseek>:
 800bd22:	b510      	push	{r4, lr}
 800bd24:	460c      	mov	r4, r1
 800bd26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd2a:	f000 f885 	bl	800be38 <_lseek_r>
 800bd2e:	1c43      	adds	r3, r0, #1
 800bd30:	89a3      	ldrh	r3, [r4, #12]
 800bd32:	bf15      	itete	ne
 800bd34:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd3e:	81a3      	strheq	r3, [r4, #12]
 800bd40:	bf18      	it	ne
 800bd42:	81a3      	strhne	r3, [r4, #12]
 800bd44:	bd10      	pop	{r4, pc}

0800bd46 <__sclose>:
 800bd46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd4a:	f000 b831 	b.w	800bdb0 <_close_r>
	...

0800bd50 <_write_r>:
 800bd50:	b538      	push	{r3, r4, r5, lr}
 800bd52:	4d07      	ldr	r5, [pc, #28]	; (800bd70 <_write_r+0x20>)
 800bd54:	4604      	mov	r4, r0
 800bd56:	4608      	mov	r0, r1
 800bd58:	4611      	mov	r1, r2
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	602a      	str	r2, [r5, #0]
 800bd5e:	461a      	mov	r2, r3
 800bd60:	f7f8 ff19 	bl	8004b96 <_write>
 800bd64:	1c43      	adds	r3, r0, #1
 800bd66:	d102      	bne.n	800bd6e <_write_r+0x1e>
 800bd68:	682b      	ldr	r3, [r5, #0]
 800bd6a:	b103      	cbz	r3, 800bd6e <_write_r+0x1e>
 800bd6c:	6023      	str	r3, [r4, #0]
 800bd6e:	bd38      	pop	{r3, r4, r5, pc}
 800bd70:	20000c20 	.word	0x20000c20

0800bd74 <__assert_func>:
 800bd74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd76:	4614      	mov	r4, r2
 800bd78:	461a      	mov	r2, r3
 800bd7a:	4b09      	ldr	r3, [pc, #36]	; (800bda0 <__assert_func+0x2c>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4605      	mov	r5, r0
 800bd80:	68d8      	ldr	r0, [r3, #12]
 800bd82:	b14c      	cbz	r4, 800bd98 <__assert_func+0x24>
 800bd84:	4b07      	ldr	r3, [pc, #28]	; (800bda4 <__assert_func+0x30>)
 800bd86:	9100      	str	r1, [sp, #0]
 800bd88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd8c:	4906      	ldr	r1, [pc, #24]	; (800bda8 <__assert_func+0x34>)
 800bd8e:	462b      	mov	r3, r5
 800bd90:	f000 f81e 	bl	800bdd0 <fiprintf>
 800bd94:	f000 f89f 	bl	800bed6 <abort>
 800bd98:	4b04      	ldr	r3, [pc, #16]	; (800bdac <__assert_func+0x38>)
 800bd9a:	461c      	mov	r4, r3
 800bd9c:	e7f3      	b.n	800bd86 <__assert_func+0x12>
 800bd9e:	bf00      	nop
 800bda0:	20000018 	.word	0x20000018
 800bda4:	0800e635 	.word	0x0800e635
 800bda8:	0800e642 	.word	0x0800e642
 800bdac:	0800e670 	.word	0x0800e670

0800bdb0 <_close_r>:
 800bdb0:	b538      	push	{r3, r4, r5, lr}
 800bdb2:	4d06      	ldr	r5, [pc, #24]	; (800bdcc <_close_r+0x1c>)
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	4608      	mov	r0, r1
 800bdba:	602b      	str	r3, [r5, #0]
 800bdbc:	f7f8 ff07 	bl	8004bce <_close>
 800bdc0:	1c43      	adds	r3, r0, #1
 800bdc2:	d102      	bne.n	800bdca <_close_r+0x1a>
 800bdc4:	682b      	ldr	r3, [r5, #0]
 800bdc6:	b103      	cbz	r3, 800bdca <_close_r+0x1a>
 800bdc8:	6023      	str	r3, [r4, #0]
 800bdca:	bd38      	pop	{r3, r4, r5, pc}
 800bdcc:	20000c20 	.word	0x20000c20

0800bdd0 <fiprintf>:
 800bdd0:	b40e      	push	{r1, r2, r3}
 800bdd2:	b503      	push	{r0, r1, lr}
 800bdd4:	4601      	mov	r1, r0
 800bdd6:	ab03      	add	r3, sp, #12
 800bdd8:	4805      	ldr	r0, [pc, #20]	; (800bdf0 <fiprintf+0x20>)
 800bdda:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdde:	6800      	ldr	r0, [r0, #0]
 800bde0:	9301      	str	r3, [sp, #4]
 800bde2:	f7ff fe31 	bl	800ba48 <_vfiprintf_r>
 800bde6:	b002      	add	sp, #8
 800bde8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdec:	b003      	add	sp, #12
 800bdee:	4770      	bx	lr
 800bdf0:	20000018 	.word	0x20000018

0800bdf4 <_fstat_r>:
 800bdf4:	b538      	push	{r3, r4, r5, lr}
 800bdf6:	4d07      	ldr	r5, [pc, #28]	; (800be14 <_fstat_r+0x20>)
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	4604      	mov	r4, r0
 800bdfc:	4608      	mov	r0, r1
 800bdfe:	4611      	mov	r1, r2
 800be00:	602b      	str	r3, [r5, #0]
 800be02:	f7f8 fef0 	bl	8004be6 <_fstat>
 800be06:	1c43      	adds	r3, r0, #1
 800be08:	d102      	bne.n	800be10 <_fstat_r+0x1c>
 800be0a:	682b      	ldr	r3, [r5, #0]
 800be0c:	b103      	cbz	r3, 800be10 <_fstat_r+0x1c>
 800be0e:	6023      	str	r3, [r4, #0]
 800be10:	bd38      	pop	{r3, r4, r5, pc}
 800be12:	bf00      	nop
 800be14:	20000c20 	.word	0x20000c20

0800be18 <_isatty_r>:
 800be18:	b538      	push	{r3, r4, r5, lr}
 800be1a:	4d06      	ldr	r5, [pc, #24]	; (800be34 <_isatty_r+0x1c>)
 800be1c:	2300      	movs	r3, #0
 800be1e:	4604      	mov	r4, r0
 800be20:	4608      	mov	r0, r1
 800be22:	602b      	str	r3, [r5, #0]
 800be24:	f7f8 feef 	bl	8004c06 <_isatty>
 800be28:	1c43      	adds	r3, r0, #1
 800be2a:	d102      	bne.n	800be32 <_isatty_r+0x1a>
 800be2c:	682b      	ldr	r3, [r5, #0]
 800be2e:	b103      	cbz	r3, 800be32 <_isatty_r+0x1a>
 800be30:	6023      	str	r3, [r4, #0]
 800be32:	bd38      	pop	{r3, r4, r5, pc}
 800be34:	20000c20 	.word	0x20000c20

0800be38 <_lseek_r>:
 800be38:	b538      	push	{r3, r4, r5, lr}
 800be3a:	4d07      	ldr	r5, [pc, #28]	; (800be58 <_lseek_r+0x20>)
 800be3c:	4604      	mov	r4, r0
 800be3e:	4608      	mov	r0, r1
 800be40:	4611      	mov	r1, r2
 800be42:	2200      	movs	r2, #0
 800be44:	602a      	str	r2, [r5, #0]
 800be46:	461a      	mov	r2, r3
 800be48:	f7f8 fee8 	bl	8004c1c <_lseek>
 800be4c:	1c43      	adds	r3, r0, #1
 800be4e:	d102      	bne.n	800be56 <_lseek_r+0x1e>
 800be50:	682b      	ldr	r3, [r5, #0]
 800be52:	b103      	cbz	r3, 800be56 <_lseek_r+0x1e>
 800be54:	6023      	str	r3, [r4, #0]
 800be56:	bd38      	pop	{r3, r4, r5, pc}
 800be58:	20000c20 	.word	0x20000c20

0800be5c <__ascii_mbtowc>:
 800be5c:	b082      	sub	sp, #8
 800be5e:	b901      	cbnz	r1, 800be62 <__ascii_mbtowc+0x6>
 800be60:	a901      	add	r1, sp, #4
 800be62:	b142      	cbz	r2, 800be76 <__ascii_mbtowc+0x1a>
 800be64:	b14b      	cbz	r3, 800be7a <__ascii_mbtowc+0x1e>
 800be66:	7813      	ldrb	r3, [r2, #0]
 800be68:	600b      	str	r3, [r1, #0]
 800be6a:	7812      	ldrb	r2, [r2, #0]
 800be6c:	1e10      	subs	r0, r2, #0
 800be6e:	bf18      	it	ne
 800be70:	2001      	movne	r0, #1
 800be72:	b002      	add	sp, #8
 800be74:	4770      	bx	lr
 800be76:	4610      	mov	r0, r2
 800be78:	e7fb      	b.n	800be72 <__ascii_mbtowc+0x16>
 800be7a:	f06f 0001 	mvn.w	r0, #1
 800be7e:	e7f8      	b.n	800be72 <__ascii_mbtowc+0x16>

0800be80 <__malloc_lock>:
 800be80:	4801      	ldr	r0, [pc, #4]	; (800be88 <__malloc_lock+0x8>)
 800be82:	f7ff b8c0 	b.w	800b006 <__retarget_lock_acquire_recursive>
 800be86:	bf00      	nop
 800be88:	20000c14 	.word	0x20000c14

0800be8c <__malloc_unlock>:
 800be8c:	4801      	ldr	r0, [pc, #4]	; (800be94 <__malloc_unlock+0x8>)
 800be8e:	f7ff b8bb 	b.w	800b008 <__retarget_lock_release_recursive>
 800be92:	bf00      	nop
 800be94:	20000c14 	.word	0x20000c14

0800be98 <_read_r>:
 800be98:	b538      	push	{r3, r4, r5, lr}
 800be9a:	4d07      	ldr	r5, [pc, #28]	; (800beb8 <_read_r+0x20>)
 800be9c:	4604      	mov	r4, r0
 800be9e:	4608      	mov	r0, r1
 800bea0:	4611      	mov	r1, r2
 800bea2:	2200      	movs	r2, #0
 800bea4:	602a      	str	r2, [r5, #0]
 800bea6:	461a      	mov	r2, r3
 800bea8:	f7f8 fe58 	bl	8004b5c <_read>
 800beac:	1c43      	adds	r3, r0, #1
 800beae:	d102      	bne.n	800beb6 <_read_r+0x1e>
 800beb0:	682b      	ldr	r3, [r5, #0]
 800beb2:	b103      	cbz	r3, 800beb6 <_read_r+0x1e>
 800beb4:	6023      	str	r3, [r4, #0]
 800beb6:	bd38      	pop	{r3, r4, r5, pc}
 800beb8:	20000c20 	.word	0x20000c20

0800bebc <__ascii_wctomb>:
 800bebc:	b149      	cbz	r1, 800bed2 <__ascii_wctomb+0x16>
 800bebe:	2aff      	cmp	r2, #255	; 0xff
 800bec0:	bf85      	ittet	hi
 800bec2:	238a      	movhi	r3, #138	; 0x8a
 800bec4:	6003      	strhi	r3, [r0, #0]
 800bec6:	700a      	strbls	r2, [r1, #0]
 800bec8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800becc:	bf98      	it	ls
 800bece:	2001      	movls	r0, #1
 800bed0:	4770      	bx	lr
 800bed2:	4608      	mov	r0, r1
 800bed4:	4770      	bx	lr

0800bed6 <abort>:
 800bed6:	b508      	push	{r3, lr}
 800bed8:	2006      	movs	r0, #6
 800beda:	f000 f82b 	bl	800bf34 <raise>
 800bede:	2001      	movs	r0, #1
 800bee0:	f7f8 fe32 	bl	8004b48 <_exit>

0800bee4 <_raise_r>:
 800bee4:	291f      	cmp	r1, #31
 800bee6:	b538      	push	{r3, r4, r5, lr}
 800bee8:	4604      	mov	r4, r0
 800beea:	460d      	mov	r5, r1
 800beec:	d904      	bls.n	800bef8 <_raise_r+0x14>
 800beee:	2316      	movs	r3, #22
 800bef0:	6003      	str	r3, [r0, #0]
 800bef2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bef6:	bd38      	pop	{r3, r4, r5, pc}
 800bef8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800befa:	b112      	cbz	r2, 800bf02 <_raise_r+0x1e>
 800befc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf00:	b94b      	cbnz	r3, 800bf16 <_raise_r+0x32>
 800bf02:	4620      	mov	r0, r4
 800bf04:	f000 f830 	bl	800bf68 <_getpid_r>
 800bf08:	462a      	mov	r2, r5
 800bf0a:	4601      	mov	r1, r0
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf12:	f000 b817 	b.w	800bf44 <_kill_r>
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	d00a      	beq.n	800bf30 <_raise_r+0x4c>
 800bf1a:	1c59      	adds	r1, r3, #1
 800bf1c:	d103      	bne.n	800bf26 <_raise_r+0x42>
 800bf1e:	2316      	movs	r3, #22
 800bf20:	6003      	str	r3, [r0, #0]
 800bf22:	2001      	movs	r0, #1
 800bf24:	e7e7      	b.n	800bef6 <_raise_r+0x12>
 800bf26:	2400      	movs	r4, #0
 800bf28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf2c:	4628      	mov	r0, r5
 800bf2e:	4798      	blx	r3
 800bf30:	2000      	movs	r0, #0
 800bf32:	e7e0      	b.n	800bef6 <_raise_r+0x12>

0800bf34 <raise>:
 800bf34:	4b02      	ldr	r3, [pc, #8]	; (800bf40 <raise+0xc>)
 800bf36:	4601      	mov	r1, r0
 800bf38:	6818      	ldr	r0, [r3, #0]
 800bf3a:	f7ff bfd3 	b.w	800bee4 <_raise_r>
 800bf3e:	bf00      	nop
 800bf40:	20000018 	.word	0x20000018

0800bf44 <_kill_r>:
 800bf44:	b538      	push	{r3, r4, r5, lr}
 800bf46:	4d07      	ldr	r5, [pc, #28]	; (800bf64 <_kill_r+0x20>)
 800bf48:	2300      	movs	r3, #0
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	4608      	mov	r0, r1
 800bf4e:	4611      	mov	r1, r2
 800bf50:	602b      	str	r3, [r5, #0]
 800bf52:	f7f8 fde9 	bl	8004b28 <_kill>
 800bf56:	1c43      	adds	r3, r0, #1
 800bf58:	d102      	bne.n	800bf60 <_kill_r+0x1c>
 800bf5a:	682b      	ldr	r3, [r5, #0]
 800bf5c:	b103      	cbz	r3, 800bf60 <_kill_r+0x1c>
 800bf5e:	6023      	str	r3, [r4, #0]
 800bf60:	bd38      	pop	{r3, r4, r5, pc}
 800bf62:	bf00      	nop
 800bf64:	20000c20 	.word	0x20000c20

0800bf68 <_getpid_r>:
 800bf68:	f7f8 bdd6 	b.w	8004b18 <_getpid>
 800bf6c:	0000      	movs	r0, r0
	...

0800bf70 <atan>:
 800bf70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf74:	ec55 4b10 	vmov	r4, r5, d0
 800bf78:	4bc3      	ldr	r3, [pc, #780]	; (800c288 <atan+0x318>)
 800bf7a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bf7e:	429e      	cmp	r6, r3
 800bf80:	46ab      	mov	fp, r5
 800bf82:	dd18      	ble.n	800bfb6 <atan+0x46>
 800bf84:	4bc1      	ldr	r3, [pc, #772]	; (800c28c <atan+0x31c>)
 800bf86:	429e      	cmp	r6, r3
 800bf88:	dc01      	bgt.n	800bf8e <atan+0x1e>
 800bf8a:	d109      	bne.n	800bfa0 <atan+0x30>
 800bf8c:	b144      	cbz	r4, 800bfa0 <atan+0x30>
 800bf8e:	4622      	mov	r2, r4
 800bf90:	462b      	mov	r3, r5
 800bf92:	4620      	mov	r0, r4
 800bf94:	4629      	mov	r1, r5
 800bf96:	f7f4 f999 	bl	80002cc <__adddf3>
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	460d      	mov	r5, r1
 800bf9e:	e006      	b.n	800bfae <atan+0x3e>
 800bfa0:	f1bb 0f00 	cmp.w	fp, #0
 800bfa4:	f300 8131 	bgt.w	800c20a <atan+0x29a>
 800bfa8:	a59b      	add	r5, pc, #620	; (adr r5, 800c218 <atan+0x2a8>)
 800bfaa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bfae:	ec45 4b10 	vmov	d0, r4, r5
 800bfb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb6:	4bb6      	ldr	r3, [pc, #728]	; (800c290 <atan+0x320>)
 800bfb8:	429e      	cmp	r6, r3
 800bfba:	dc14      	bgt.n	800bfe6 <atan+0x76>
 800bfbc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bfc0:	429e      	cmp	r6, r3
 800bfc2:	dc0d      	bgt.n	800bfe0 <atan+0x70>
 800bfc4:	a396      	add	r3, pc, #600	; (adr r3, 800c220 <atan+0x2b0>)
 800bfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfca:	ee10 0a10 	vmov	r0, s0
 800bfce:	4629      	mov	r1, r5
 800bfd0:	f7f4 f97c 	bl	80002cc <__adddf3>
 800bfd4:	4baf      	ldr	r3, [pc, #700]	; (800c294 <atan+0x324>)
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f7f4 fdbe 	bl	8000b58 <__aeabi_dcmpgt>
 800bfdc:	2800      	cmp	r0, #0
 800bfde:	d1e6      	bne.n	800bfae <atan+0x3e>
 800bfe0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bfe4:	e02b      	b.n	800c03e <atan+0xce>
 800bfe6:	f000 f9b7 	bl	800c358 <fabs>
 800bfea:	4bab      	ldr	r3, [pc, #684]	; (800c298 <atan+0x328>)
 800bfec:	429e      	cmp	r6, r3
 800bfee:	ec55 4b10 	vmov	r4, r5, d0
 800bff2:	f300 80bf 	bgt.w	800c174 <atan+0x204>
 800bff6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bffa:	429e      	cmp	r6, r3
 800bffc:	f300 80a0 	bgt.w	800c140 <atan+0x1d0>
 800c000:	ee10 2a10 	vmov	r2, s0
 800c004:	ee10 0a10 	vmov	r0, s0
 800c008:	462b      	mov	r3, r5
 800c00a:	4629      	mov	r1, r5
 800c00c:	f7f4 f95e 	bl	80002cc <__adddf3>
 800c010:	4ba0      	ldr	r3, [pc, #640]	; (800c294 <atan+0x324>)
 800c012:	2200      	movs	r2, #0
 800c014:	f7f4 f958 	bl	80002c8 <__aeabi_dsub>
 800c018:	2200      	movs	r2, #0
 800c01a:	4606      	mov	r6, r0
 800c01c:	460f      	mov	r7, r1
 800c01e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c022:	4620      	mov	r0, r4
 800c024:	4629      	mov	r1, r5
 800c026:	f7f4 f951 	bl	80002cc <__adddf3>
 800c02a:	4602      	mov	r2, r0
 800c02c:	460b      	mov	r3, r1
 800c02e:	4630      	mov	r0, r6
 800c030:	4639      	mov	r1, r7
 800c032:	f7f4 fc2b 	bl	800088c <__aeabi_ddiv>
 800c036:	f04f 0a00 	mov.w	sl, #0
 800c03a:	4604      	mov	r4, r0
 800c03c:	460d      	mov	r5, r1
 800c03e:	4622      	mov	r2, r4
 800c040:	462b      	mov	r3, r5
 800c042:	4620      	mov	r0, r4
 800c044:	4629      	mov	r1, r5
 800c046:	f7f4 faf7 	bl	8000638 <__aeabi_dmul>
 800c04a:	4602      	mov	r2, r0
 800c04c:	460b      	mov	r3, r1
 800c04e:	4680      	mov	r8, r0
 800c050:	4689      	mov	r9, r1
 800c052:	f7f4 faf1 	bl	8000638 <__aeabi_dmul>
 800c056:	a374      	add	r3, pc, #464	; (adr r3, 800c228 <atan+0x2b8>)
 800c058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05c:	4606      	mov	r6, r0
 800c05e:	460f      	mov	r7, r1
 800c060:	f7f4 faea 	bl	8000638 <__aeabi_dmul>
 800c064:	a372      	add	r3, pc, #456	; (adr r3, 800c230 <atan+0x2c0>)
 800c066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06a:	f7f4 f92f 	bl	80002cc <__adddf3>
 800c06e:	4632      	mov	r2, r6
 800c070:	463b      	mov	r3, r7
 800c072:	f7f4 fae1 	bl	8000638 <__aeabi_dmul>
 800c076:	a370      	add	r3, pc, #448	; (adr r3, 800c238 <atan+0x2c8>)
 800c078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07c:	f7f4 f926 	bl	80002cc <__adddf3>
 800c080:	4632      	mov	r2, r6
 800c082:	463b      	mov	r3, r7
 800c084:	f7f4 fad8 	bl	8000638 <__aeabi_dmul>
 800c088:	a36d      	add	r3, pc, #436	; (adr r3, 800c240 <atan+0x2d0>)
 800c08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08e:	f7f4 f91d 	bl	80002cc <__adddf3>
 800c092:	4632      	mov	r2, r6
 800c094:	463b      	mov	r3, r7
 800c096:	f7f4 facf 	bl	8000638 <__aeabi_dmul>
 800c09a:	a36b      	add	r3, pc, #428	; (adr r3, 800c248 <atan+0x2d8>)
 800c09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a0:	f7f4 f914 	bl	80002cc <__adddf3>
 800c0a4:	4632      	mov	r2, r6
 800c0a6:	463b      	mov	r3, r7
 800c0a8:	f7f4 fac6 	bl	8000638 <__aeabi_dmul>
 800c0ac:	a368      	add	r3, pc, #416	; (adr r3, 800c250 <atan+0x2e0>)
 800c0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b2:	f7f4 f90b 	bl	80002cc <__adddf3>
 800c0b6:	4642      	mov	r2, r8
 800c0b8:	464b      	mov	r3, r9
 800c0ba:	f7f4 fabd 	bl	8000638 <__aeabi_dmul>
 800c0be:	a366      	add	r3, pc, #408	; (adr r3, 800c258 <atan+0x2e8>)
 800c0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c4:	4680      	mov	r8, r0
 800c0c6:	4689      	mov	r9, r1
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	4639      	mov	r1, r7
 800c0cc:	f7f4 fab4 	bl	8000638 <__aeabi_dmul>
 800c0d0:	a363      	add	r3, pc, #396	; (adr r3, 800c260 <atan+0x2f0>)
 800c0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d6:	f7f4 f8f7 	bl	80002c8 <__aeabi_dsub>
 800c0da:	4632      	mov	r2, r6
 800c0dc:	463b      	mov	r3, r7
 800c0de:	f7f4 faab 	bl	8000638 <__aeabi_dmul>
 800c0e2:	a361      	add	r3, pc, #388	; (adr r3, 800c268 <atan+0x2f8>)
 800c0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e8:	f7f4 f8ee 	bl	80002c8 <__aeabi_dsub>
 800c0ec:	4632      	mov	r2, r6
 800c0ee:	463b      	mov	r3, r7
 800c0f0:	f7f4 faa2 	bl	8000638 <__aeabi_dmul>
 800c0f4:	a35e      	add	r3, pc, #376	; (adr r3, 800c270 <atan+0x300>)
 800c0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fa:	f7f4 f8e5 	bl	80002c8 <__aeabi_dsub>
 800c0fe:	4632      	mov	r2, r6
 800c100:	463b      	mov	r3, r7
 800c102:	f7f4 fa99 	bl	8000638 <__aeabi_dmul>
 800c106:	a35c      	add	r3, pc, #368	; (adr r3, 800c278 <atan+0x308>)
 800c108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10c:	f7f4 f8dc 	bl	80002c8 <__aeabi_dsub>
 800c110:	4632      	mov	r2, r6
 800c112:	463b      	mov	r3, r7
 800c114:	f7f4 fa90 	bl	8000638 <__aeabi_dmul>
 800c118:	4602      	mov	r2, r0
 800c11a:	460b      	mov	r3, r1
 800c11c:	4640      	mov	r0, r8
 800c11e:	4649      	mov	r1, r9
 800c120:	f7f4 f8d4 	bl	80002cc <__adddf3>
 800c124:	4622      	mov	r2, r4
 800c126:	462b      	mov	r3, r5
 800c128:	f7f4 fa86 	bl	8000638 <__aeabi_dmul>
 800c12c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800c130:	4602      	mov	r2, r0
 800c132:	460b      	mov	r3, r1
 800c134:	d14b      	bne.n	800c1ce <atan+0x25e>
 800c136:	4620      	mov	r0, r4
 800c138:	4629      	mov	r1, r5
 800c13a:	f7f4 f8c5 	bl	80002c8 <__aeabi_dsub>
 800c13e:	e72c      	b.n	800bf9a <atan+0x2a>
 800c140:	ee10 0a10 	vmov	r0, s0
 800c144:	4b53      	ldr	r3, [pc, #332]	; (800c294 <atan+0x324>)
 800c146:	2200      	movs	r2, #0
 800c148:	4629      	mov	r1, r5
 800c14a:	f7f4 f8bd 	bl	80002c8 <__aeabi_dsub>
 800c14e:	4b51      	ldr	r3, [pc, #324]	; (800c294 <atan+0x324>)
 800c150:	4606      	mov	r6, r0
 800c152:	460f      	mov	r7, r1
 800c154:	2200      	movs	r2, #0
 800c156:	4620      	mov	r0, r4
 800c158:	4629      	mov	r1, r5
 800c15a:	f7f4 f8b7 	bl	80002cc <__adddf3>
 800c15e:	4602      	mov	r2, r0
 800c160:	460b      	mov	r3, r1
 800c162:	4630      	mov	r0, r6
 800c164:	4639      	mov	r1, r7
 800c166:	f7f4 fb91 	bl	800088c <__aeabi_ddiv>
 800c16a:	f04f 0a01 	mov.w	sl, #1
 800c16e:	4604      	mov	r4, r0
 800c170:	460d      	mov	r5, r1
 800c172:	e764      	b.n	800c03e <atan+0xce>
 800c174:	4b49      	ldr	r3, [pc, #292]	; (800c29c <atan+0x32c>)
 800c176:	429e      	cmp	r6, r3
 800c178:	da1d      	bge.n	800c1b6 <atan+0x246>
 800c17a:	ee10 0a10 	vmov	r0, s0
 800c17e:	4b48      	ldr	r3, [pc, #288]	; (800c2a0 <atan+0x330>)
 800c180:	2200      	movs	r2, #0
 800c182:	4629      	mov	r1, r5
 800c184:	f7f4 f8a0 	bl	80002c8 <__aeabi_dsub>
 800c188:	4b45      	ldr	r3, [pc, #276]	; (800c2a0 <atan+0x330>)
 800c18a:	4606      	mov	r6, r0
 800c18c:	460f      	mov	r7, r1
 800c18e:	2200      	movs	r2, #0
 800c190:	4620      	mov	r0, r4
 800c192:	4629      	mov	r1, r5
 800c194:	f7f4 fa50 	bl	8000638 <__aeabi_dmul>
 800c198:	4b3e      	ldr	r3, [pc, #248]	; (800c294 <atan+0x324>)
 800c19a:	2200      	movs	r2, #0
 800c19c:	f7f4 f896 	bl	80002cc <__adddf3>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	4630      	mov	r0, r6
 800c1a6:	4639      	mov	r1, r7
 800c1a8:	f7f4 fb70 	bl	800088c <__aeabi_ddiv>
 800c1ac:	f04f 0a02 	mov.w	sl, #2
 800c1b0:	4604      	mov	r4, r0
 800c1b2:	460d      	mov	r5, r1
 800c1b4:	e743      	b.n	800c03e <atan+0xce>
 800c1b6:	462b      	mov	r3, r5
 800c1b8:	ee10 2a10 	vmov	r2, s0
 800c1bc:	4939      	ldr	r1, [pc, #228]	; (800c2a4 <atan+0x334>)
 800c1be:	2000      	movs	r0, #0
 800c1c0:	f7f4 fb64 	bl	800088c <__aeabi_ddiv>
 800c1c4:	f04f 0a03 	mov.w	sl, #3
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	460d      	mov	r5, r1
 800c1cc:	e737      	b.n	800c03e <atan+0xce>
 800c1ce:	4b36      	ldr	r3, [pc, #216]	; (800c2a8 <atan+0x338>)
 800c1d0:	4e36      	ldr	r6, [pc, #216]	; (800c2ac <atan+0x33c>)
 800c1d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c1d6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c1da:	e9da 2300 	ldrd	r2, r3, [sl]
 800c1de:	f7f4 f873 	bl	80002c8 <__aeabi_dsub>
 800c1e2:	4622      	mov	r2, r4
 800c1e4:	462b      	mov	r3, r5
 800c1e6:	f7f4 f86f 	bl	80002c8 <__aeabi_dsub>
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c1f2:	f7f4 f869 	bl	80002c8 <__aeabi_dsub>
 800c1f6:	f1bb 0f00 	cmp.w	fp, #0
 800c1fa:	4604      	mov	r4, r0
 800c1fc:	460d      	mov	r5, r1
 800c1fe:	f6bf aed6 	bge.w	800bfae <atan+0x3e>
 800c202:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c206:	461d      	mov	r5, r3
 800c208:	e6d1      	b.n	800bfae <atan+0x3e>
 800c20a:	a51d      	add	r5, pc, #116	; (adr r5, 800c280 <atan+0x310>)
 800c20c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c210:	e6cd      	b.n	800bfae <atan+0x3e>
 800c212:	bf00      	nop
 800c214:	f3af 8000 	nop.w
 800c218:	54442d18 	.word	0x54442d18
 800c21c:	bff921fb 	.word	0xbff921fb
 800c220:	8800759c 	.word	0x8800759c
 800c224:	7e37e43c 	.word	0x7e37e43c
 800c228:	e322da11 	.word	0xe322da11
 800c22c:	3f90ad3a 	.word	0x3f90ad3a
 800c230:	24760deb 	.word	0x24760deb
 800c234:	3fa97b4b 	.word	0x3fa97b4b
 800c238:	a0d03d51 	.word	0xa0d03d51
 800c23c:	3fb10d66 	.word	0x3fb10d66
 800c240:	c54c206e 	.word	0xc54c206e
 800c244:	3fb745cd 	.word	0x3fb745cd
 800c248:	920083ff 	.word	0x920083ff
 800c24c:	3fc24924 	.word	0x3fc24924
 800c250:	5555550d 	.word	0x5555550d
 800c254:	3fd55555 	.word	0x3fd55555
 800c258:	2c6a6c2f 	.word	0x2c6a6c2f
 800c25c:	bfa2b444 	.word	0xbfa2b444
 800c260:	52defd9a 	.word	0x52defd9a
 800c264:	3fadde2d 	.word	0x3fadde2d
 800c268:	af749a6d 	.word	0xaf749a6d
 800c26c:	3fb3b0f2 	.word	0x3fb3b0f2
 800c270:	fe231671 	.word	0xfe231671
 800c274:	3fbc71c6 	.word	0x3fbc71c6
 800c278:	9998ebc4 	.word	0x9998ebc4
 800c27c:	3fc99999 	.word	0x3fc99999
 800c280:	54442d18 	.word	0x54442d18
 800c284:	3ff921fb 	.word	0x3ff921fb
 800c288:	440fffff 	.word	0x440fffff
 800c28c:	7ff00000 	.word	0x7ff00000
 800c290:	3fdbffff 	.word	0x3fdbffff
 800c294:	3ff00000 	.word	0x3ff00000
 800c298:	3ff2ffff 	.word	0x3ff2ffff
 800c29c:	40038000 	.word	0x40038000
 800c2a0:	3ff80000 	.word	0x3ff80000
 800c2a4:	bff00000 	.word	0xbff00000
 800c2a8:	0800e7a0 	.word	0x0800e7a0
 800c2ac:	0800e780 	.word	0x0800e780

0800c2b0 <cos>:
 800c2b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2b2:	ec53 2b10 	vmov	r2, r3, d0
 800c2b6:	4826      	ldr	r0, [pc, #152]	; (800c350 <cos+0xa0>)
 800c2b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c2bc:	4281      	cmp	r1, r0
 800c2be:	dc06      	bgt.n	800c2ce <cos+0x1e>
 800c2c0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800c348 <cos+0x98>
 800c2c4:	b005      	add	sp, #20
 800c2c6:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2ca:	f000 bf3d 	b.w	800d148 <__kernel_cos>
 800c2ce:	4821      	ldr	r0, [pc, #132]	; (800c354 <cos+0xa4>)
 800c2d0:	4281      	cmp	r1, r0
 800c2d2:	dd09      	ble.n	800c2e8 <cos+0x38>
 800c2d4:	ee10 0a10 	vmov	r0, s0
 800c2d8:	4619      	mov	r1, r3
 800c2da:	f7f3 fff5 	bl	80002c8 <__aeabi_dsub>
 800c2de:	ec41 0b10 	vmov	d0, r0, r1
 800c2e2:	b005      	add	sp, #20
 800c2e4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c2e8:	4668      	mov	r0, sp
 800c2ea:	f000 fc6d 	bl	800cbc8 <__ieee754_rem_pio2>
 800c2ee:	f000 0003 	and.w	r0, r0, #3
 800c2f2:	2801      	cmp	r0, #1
 800c2f4:	d00b      	beq.n	800c30e <cos+0x5e>
 800c2f6:	2802      	cmp	r0, #2
 800c2f8:	d016      	beq.n	800c328 <cos+0x78>
 800c2fa:	b9e0      	cbnz	r0, 800c336 <cos+0x86>
 800c2fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c300:	ed9d 0b00 	vldr	d0, [sp]
 800c304:	f000 ff20 	bl	800d148 <__kernel_cos>
 800c308:	ec51 0b10 	vmov	r0, r1, d0
 800c30c:	e7e7      	b.n	800c2de <cos+0x2e>
 800c30e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c312:	ed9d 0b00 	vldr	d0, [sp]
 800c316:	f001 fb2f 	bl	800d978 <__kernel_sin>
 800c31a:	ec53 2b10 	vmov	r2, r3, d0
 800c31e:	ee10 0a10 	vmov	r0, s0
 800c322:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c326:	e7da      	b.n	800c2de <cos+0x2e>
 800c328:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c32c:	ed9d 0b00 	vldr	d0, [sp]
 800c330:	f000 ff0a 	bl	800d148 <__kernel_cos>
 800c334:	e7f1      	b.n	800c31a <cos+0x6a>
 800c336:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c33a:	ed9d 0b00 	vldr	d0, [sp]
 800c33e:	2001      	movs	r0, #1
 800c340:	f001 fb1a 	bl	800d978 <__kernel_sin>
 800c344:	e7e0      	b.n	800c308 <cos+0x58>
 800c346:	bf00      	nop
	...
 800c350:	3fe921fb 	.word	0x3fe921fb
 800c354:	7fefffff 	.word	0x7fefffff

0800c358 <fabs>:
 800c358:	ec51 0b10 	vmov	r0, r1, d0
 800c35c:	ee10 2a10 	vmov	r2, s0
 800c360:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c364:	ec43 2b10 	vmov	d0, r2, r3
 800c368:	4770      	bx	lr
	...

0800c36c <round>:
 800c36c:	ec51 0b10 	vmov	r0, r1, d0
 800c370:	b570      	push	{r4, r5, r6, lr}
 800c372:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800c376:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800c37a:	2c13      	cmp	r4, #19
 800c37c:	ee10 2a10 	vmov	r2, s0
 800c380:	460b      	mov	r3, r1
 800c382:	dc19      	bgt.n	800c3b8 <round+0x4c>
 800c384:	2c00      	cmp	r4, #0
 800c386:	da09      	bge.n	800c39c <round+0x30>
 800c388:	3401      	adds	r4, #1
 800c38a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800c38e:	d103      	bne.n	800c398 <round+0x2c>
 800c390:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c394:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c398:	2200      	movs	r2, #0
 800c39a:	e028      	b.n	800c3ee <round+0x82>
 800c39c:	4d15      	ldr	r5, [pc, #84]	; (800c3f4 <round+0x88>)
 800c39e:	4125      	asrs	r5, r4
 800c3a0:	ea01 0605 	and.w	r6, r1, r5
 800c3a4:	4332      	orrs	r2, r6
 800c3a6:	d00e      	beq.n	800c3c6 <round+0x5a>
 800c3a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c3ac:	fa42 f404 	asr.w	r4, r2, r4
 800c3b0:	4423      	add	r3, r4
 800c3b2:	ea23 0305 	bic.w	r3, r3, r5
 800c3b6:	e7ef      	b.n	800c398 <round+0x2c>
 800c3b8:	2c33      	cmp	r4, #51	; 0x33
 800c3ba:	dd07      	ble.n	800c3cc <round+0x60>
 800c3bc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800c3c0:	d101      	bne.n	800c3c6 <round+0x5a>
 800c3c2:	f7f3 ff83 	bl	80002cc <__adddf3>
 800c3c6:	ec41 0b10 	vmov	d0, r0, r1
 800c3ca:	bd70      	pop	{r4, r5, r6, pc}
 800c3cc:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800c3d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c3d4:	40f5      	lsrs	r5, r6
 800c3d6:	4228      	tst	r0, r5
 800c3d8:	d0f5      	beq.n	800c3c6 <round+0x5a>
 800c3da:	2101      	movs	r1, #1
 800c3dc:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800c3e0:	fa01 f404 	lsl.w	r4, r1, r4
 800c3e4:	1912      	adds	r2, r2, r4
 800c3e6:	bf28      	it	cs
 800c3e8:	185b      	addcs	r3, r3, r1
 800c3ea:	ea22 0205 	bic.w	r2, r2, r5
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	4610      	mov	r0, r2
 800c3f2:	e7e8      	b.n	800c3c6 <round+0x5a>
 800c3f4:	000fffff 	.word	0x000fffff

0800c3f8 <sin>:
 800c3f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3fa:	ec53 2b10 	vmov	r2, r3, d0
 800c3fe:	4828      	ldr	r0, [pc, #160]	; (800c4a0 <sin+0xa8>)
 800c400:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c404:	4281      	cmp	r1, r0
 800c406:	dc07      	bgt.n	800c418 <sin+0x20>
 800c408:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800c498 <sin+0xa0>
 800c40c:	2000      	movs	r0, #0
 800c40e:	b005      	add	sp, #20
 800c410:	f85d eb04 	ldr.w	lr, [sp], #4
 800c414:	f001 bab0 	b.w	800d978 <__kernel_sin>
 800c418:	4822      	ldr	r0, [pc, #136]	; (800c4a4 <sin+0xac>)
 800c41a:	4281      	cmp	r1, r0
 800c41c:	dd09      	ble.n	800c432 <sin+0x3a>
 800c41e:	ee10 0a10 	vmov	r0, s0
 800c422:	4619      	mov	r1, r3
 800c424:	f7f3 ff50 	bl	80002c8 <__aeabi_dsub>
 800c428:	ec41 0b10 	vmov	d0, r0, r1
 800c42c:	b005      	add	sp, #20
 800c42e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c432:	4668      	mov	r0, sp
 800c434:	f000 fbc8 	bl	800cbc8 <__ieee754_rem_pio2>
 800c438:	f000 0003 	and.w	r0, r0, #3
 800c43c:	2801      	cmp	r0, #1
 800c43e:	d00c      	beq.n	800c45a <sin+0x62>
 800c440:	2802      	cmp	r0, #2
 800c442:	d011      	beq.n	800c468 <sin+0x70>
 800c444:	b9f0      	cbnz	r0, 800c484 <sin+0x8c>
 800c446:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c44a:	ed9d 0b00 	vldr	d0, [sp]
 800c44e:	2001      	movs	r0, #1
 800c450:	f001 fa92 	bl	800d978 <__kernel_sin>
 800c454:	ec51 0b10 	vmov	r0, r1, d0
 800c458:	e7e6      	b.n	800c428 <sin+0x30>
 800c45a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c45e:	ed9d 0b00 	vldr	d0, [sp]
 800c462:	f000 fe71 	bl	800d148 <__kernel_cos>
 800c466:	e7f5      	b.n	800c454 <sin+0x5c>
 800c468:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c46c:	ed9d 0b00 	vldr	d0, [sp]
 800c470:	2001      	movs	r0, #1
 800c472:	f001 fa81 	bl	800d978 <__kernel_sin>
 800c476:	ec53 2b10 	vmov	r2, r3, d0
 800c47a:	ee10 0a10 	vmov	r0, s0
 800c47e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c482:	e7d1      	b.n	800c428 <sin+0x30>
 800c484:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c488:	ed9d 0b00 	vldr	d0, [sp]
 800c48c:	f000 fe5c 	bl	800d148 <__kernel_cos>
 800c490:	e7f1      	b.n	800c476 <sin+0x7e>
 800c492:	bf00      	nop
 800c494:	f3af 8000 	nop.w
	...
 800c4a0:	3fe921fb 	.word	0x3fe921fb
 800c4a4:	7fefffff 	.word	0x7fefffff

0800c4a8 <acos>:
 800c4a8:	b538      	push	{r3, r4, r5, lr}
 800c4aa:	ed2d 8b02 	vpush	{d8}
 800c4ae:	ec55 4b10 	vmov	r4, r5, d0
 800c4b2:	f000 f85d 	bl	800c570 <__ieee754_acos>
 800c4b6:	4622      	mov	r2, r4
 800c4b8:	462b      	mov	r3, r5
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	4629      	mov	r1, r5
 800c4be:	eeb0 8a40 	vmov.f32	s16, s0
 800c4c2:	eef0 8a60 	vmov.f32	s17, s1
 800c4c6:	f7f4 fb51 	bl	8000b6c <__aeabi_dcmpun>
 800c4ca:	b9a8      	cbnz	r0, 800c4f8 <acos+0x50>
 800c4cc:	ec45 4b10 	vmov	d0, r4, r5
 800c4d0:	f7ff ff42 	bl	800c358 <fabs>
 800c4d4:	4b0c      	ldr	r3, [pc, #48]	; (800c508 <acos+0x60>)
 800c4d6:	ec51 0b10 	vmov	r0, r1, d0
 800c4da:	2200      	movs	r2, #0
 800c4dc:	f7f4 fb3c 	bl	8000b58 <__aeabi_dcmpgt>
 800c4e0:	b150      	cbz	r0, 800c4f8 <acos+0x50>
 800c4e2:	f7fc ff6f 	bl	80093c4 <__errno>
 800c4e6:	ecbd 8b02 	vpop	{d8}
 800c4ea:	2321      	movs	r3, #33	; 0x21
 800c4ec:	6003      	str	r3, [r0, #0]
 800c4ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4f2:	4806      	ldr	r0, [pc, #24]	; (800c50c <acos+0x64>)
 800c4f4:	f001 bb80 	b.w	800dbf8 <nan>
 800c4f8:	eeb0 0a48 	vmov.f32	s0, s16
 800c4fc:	eef0 0a68 	vmov.f32	s1, s17
 800c500:	ecbd 8b02 	vpop	{d8}
 800c504:	bd38      	pop	{r3, r4, r5, pc}
 800c506:	bf00      	nop
 800c508:	3ff00000 	.word	0x3ff00000
 800c50c:	0800e670 	.word	0x0800e670

0800c510 <atan2>:
 800c510:	f000 ba8e 	b.w	800ca30 <__ieee754_atan2>

0800c514 <sqrt>:
 800c514:	b538      	push	{r3, r4, r5, lr}
 800c516:	ed2d 8b02 	vpush	{d8}
 800c51a:	ec55 4b10 	vmov	r4, r5, d0
 800c51e:	f000 fd5f 	bl	800cfe0 <__ieee754_sqrt>
 800c522:	4622      	mov	r2, r4
 800c524:	462b      	mov	r3, r5
 800c526:	4620      	mov	r0, r4
 800c528:	4629      	mov	r1, r5
 800c52a:	eeb0 8a40 	vmov.f32	s16, s0
 800c52e:	eef0 8a60 	vmov.f32	s17, s1
 800c532:	f7f4 fb1b 	bl	8000b6c <__aeabi_dcmpun>
 800c536:	b990      	cbnz	r0, 800c55e <sqrt+0x4a>
 800c538:	2200      	movs	r2, #0
 800c53a:	2300      	movs	r3, #0
 800c53c:	4620      	mov	r0, r4
 800c53e:	4629      	mov	r1, r5
 800c540:	f7f4 faec 	bl	8000b1c <__aeabi_dcmplt>
 800c544:	b158      	cbz	r0, 800c55e <sqrt+0x4a>
 800c546:	f7fc ff3d 	bl	80093c4 <__errno>
 800c54a:	2321      	movs	r3, #33	; 0x21
 800c54c:	6003      	str	r3, [r0, #0]
 800c54e:	2200      	movs	r2, #0
 800c550:	2300      	movs	r3, #0
 800c552:	4610      	mov	r0, r2
 800c554:	4619      	mov	r1, r3
 800c556:	f7f4 f999 	bl	800088c <__aeabi_ddiv>
 800c55a:	ec41 0b18 	vmov	d8, r0, r1
 800c55e:	eeb0 0a48 	vmov.f32	s0, s16
 800c562:	eef0 0a68 	vmov.f32	s1, s17
 800c566:	ecbd 8b02 	vpop	{d8}
 800c56a:	bd38      	pop	{r3, r4, r5, pc}
 800c56c:	0000      	movs	r0, r0
	...

0800c570 <__ieee754_acos>:
 800c570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c574:	ec55 4b10 	vmov	r4, r5, d0
 800c578:	49b7      	ldr	r1, [pc, #732]	; (800c858 <__ieee754_acos+0x2e8>)
 800c57a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c57e:	428b      	cmp	r3, r1
 800c580:	dd1b      	ble.n	800c5ba <__ieee754_acos+0x4a>
 800c582:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800c586:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c58a:	4323      	orrs	r3, r4
 800c58c:	d106      	bne.n	800c59c <__ieee754_acos+0x2c>
 800c58e:	2d00      	cmp	r5, #0
 800c590:	f300 8211 	bgt.w	800c9b6 <__ieee754_acos+0x446>
 800c594:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800c7f0 <__ieee754_acos+0x280>
 800c598:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c59c:	ee10 2a10 	vmov	r2, s0
 800c5a0:	462b      	mov	r3, r5
 800c5a2:	ee10 0a10 	vmov	r0, s0
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	f7f3 fe8e 	bl	80002c8 <__aeabi_dsub>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	f7f4 f96c 	bl	800088c <__aeabi_ddiv>
 800c5b4:	ec41 0b10 	vmov	d0, r0, r1
 800c5b8:	e7ee      	b.n	800c598 <__ieee754_acos+0x28>
 800c5ba:	49a8      	ldr	r1, [pc, #672]	; (800c85c <__ieee754_acos+0x2ec>)
 800c5bc:	428b      	cmp	r3, r1
 800c5be:	f300 8087 	bgt.w	800c6d0 <__ieee754_acos+0x160>
 800c5c2:	4aa7      	ldr	r2, [pc, #668]	; (800c860 <__ieee754_acos+0x2f0>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	f340 81f9 	ble.w	800c9bc <__ieee754_acos+0x44c>
 800c5ca:	ee10 2a10 	vmov	r2, s0
 800c5ce:	ee10 0a10 	vmov	r0, s0
 800c5d2:	462b      	mov	r3, r5
 800c5d4:	4629      	mov	r1, r5
 800c5d6:	f7f4 f82f 	bl	8000638 <__aeabi_dmul>
 800c5da:	a387      	add	r3, pc, #540	; (adr r3, 800c7f8 <__ieee754_acos+0x288>)
 800c5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e0:	4606      	mov	r6, r0
 800c5e2:	460f      	mov	r7, r1
 800c5e4:	f7f4 f828 	bl	8000638 <__aeabi_dmul>
 800c5e8:	a385      	add	r3, pc, #532	; (adr r3, 800c800 <__ieee754_acos+0x290>)
 800c5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ee:	f7f3 fe6d 	bl	80002cc <__adddf3>
 800c5f2:	4632      	mov	r2, r6
 800c5f4:	463b      	mov	r3, r7
 800c5f6:	f7f4 f81f 	bl	8000638 <__aeabi_dmul>
 800c5fa:	a383      	add	r3, pc, #524	; (adr r3, 800c808 <__ieee754_acos+0x298>)
 800c5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c600:	f7f3 fe62 	bl	80002c8 <__aeabi_dsub>
 800c604:	4632      	mov	r2, r6
 800c606:	463b      	mov	r3, r7
 800c608:	f7f4 f816 	bl	8000638 <__aeabi_dmul>
 800c60c:	a380      	add	r3, pc, #512	; (adr r3, 800c810 <__ieee754_acos+0x2a0>)
 800c60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c612:	f7f3 fe5b 	bl	80002cc <__adddf3>
 800c616:	4632      	mov	r2, r6
 800c618:	463b      	mov	r3, r7
 800c61a:	f7f4 f80d 	bl	8000638 <__aeabi_dmul>
 800c61e:	a37e      	add	r3, pc, #504	; (adr r3, 800c818 <__ieee754_acos+0x2a8>)
 800c620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c624:	f7f3 fe50 	bl	80002c8 <__aeabi_dsub>
 800c628:	4632      	mov	r2, r6
 800c62a:	463b      	mov	r3, r7
 800c62c:	f7f4 f804 	bl	8000638 <__aeabi_dmul>
 800c630:	a37b      	add	r3, pc, #492	; (adr r3, 800c820 <__ieee754_acos+0x2b0>)
 800c632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c636:	f7f3 fe49 	bl	80002cc <__adddf3>
 800c63a:	4632      	mov	r2, r6
 800c63c:	463b      	mov	r3, r7
 800c63e:	f7f3 fffb 	bl	8000638 <__aeabi_dmul>
 800c642:	a379      	add	r3, pc, #484	; (adr r3, 800c828 <__ieee754_acos+0x2b8>)
 800c644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c648:	4680      	mov	r8, r0
 800c64a:	4689      	mov	r9, r1
 800c64c:	4630      	mov	r0, r6
 800c64e:	4639      	mov	r1, r7
 800c650:	f7f3 fff2 	bl	8000638 <__aeabi_dmul>
 800c654:	a376      	add	r3, pc, #472	; (adr r3, 800c830 <__ieee754_acos+0x2c0>)
 800c656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65a:	f7f3 fe35 	bl	80002c8 <__aeabi_dsub>
 800c65e:	4632      	mov	r2, r6
 800c660:	463b      	mov	r3, r7
 800c662:	f7f3 ffe9 	bl	8000638 <__aeabi_dmul>
 800c666:	a374      	add	r3, pc, #464	; (adr r3, 800c838 <__ieee754_acos+0x2c8>)
 800c668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66c:	f7f3 fe2e 	bl	80002cc <__adddf3>
 800c670:	4632      	mov	r2, r6
 800c672:	463b      	mov	r3, r7
 800c674:	f7f3 ffe0 	bl	8000638 <__aeabi_dmul>
 800c678:	a371      	add	r3, pc, #452	; (adr r3, 800c840 <__ieee754_acos+0x2d0>)
 800c67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67e:	f7f3 fe23 	bl	80002c8 <__aeabi_dsub>
 800c682:	4632      	mov	r2, r6
 800c684:	463b      	mov	r3, r7
 800c686:	f7f3 ffd7 	bl	8000638 <__aeabi_dmul>
 800c68a:	4b76      	ldr	r3, [pc, #472]	; (800c864 <__ieee754_acos+0x2f4>)
 800c68c:	2200      	movs	r2, #0
 800c68e:	f7f3 fe1d 	bl	80002cc <__adddf3>
 800c692:	4602      	mov	r2, r0
 800c694:	460b      	mov	r3, r1
 800c696:	4640      	mov	r0, r8
 800c698:	4649      	mov	r1, r9
 800c69a:	f7f4 f8f7 	bl	800088c <__aeabi_ddiv>
 800c69e:	4622      	mov	r2, r4
 800c6a0:	462b      	mov	r3, r5
 800c6a2:	f7f3 ffc9 	bl	8000638 <__aeabi_dmul>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	a167      	add	r1, pc, #412	; (adr r1, 800c848 <__ieee754_acos+0x2d8>)
 800c6ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6b0:	f7f3 fe0a 	bl	80002c8 <__aeabi_dsub>
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	4629      	mov	r1, r5
 800c6bc:	f7f3 fe04 	bl	80002c8 <__aeabi_dsub>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	a162      	add	r1, pc, #392	; (adr r1, 800c850 <__ieee754_acos+0x2e0>)
 800c6c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6ca:	f7f3 fdfd 	bl	80002c8 <__aeabi_dsub>
 800c6ce:	e771      	b.n	800c5b4 <__ieee754_acos+0x44>
 800c6d0:	2d00      	cmp	r5, #0
 800c6d2:	f280 80cb 	bge.w	800c86c <__ieee754_acos+0x2fc>
 800c6d6:	ee10 0a10 	vmov	r0, s0
 800c6da:	4b62      	ldr	r3, [pc, #392]	; (800c864 <__ieee754_acos+0x2f4>)
 800c6dc:	2200      	movs	r2, #0
 800c6de:	4629      	mov	r1, r5
 800c6e0:	f7f3 fdf4 	bl	80002cc <__adddf3>
 800c6e4:	4b60      	ldr	r3, [pc, #384]	; (800c868 <__ieee754_acos+0x2f8>)
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f7f3 ffa6 	bl	8000638 <__aeabi_dmul>
 800c6ec:	a342      	add	r3, pc, #264	; (adr r3, 800c7f8 <__ieee754_acos+0x288>)
 800c6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f2:	4604      	mov	r4, r0
 800c6f4:	460d      	mov	r5, r1
 800c6f6:	f7f3 ff9f 	bl	8000638 <__aeabi_dmul>
 800c6fa:	a341      	add	r3, pc, #260	; (adr r3, 800c800 <__ieee754_acos+0x290>)
 800c6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c700:	f7f3 fde4 	bl	80002cc <__adddf3>
 800c704:	4622      	mov	r2, r4
 800c706:	462b      	mov	r3, r5
 800c708:	f7f3 ff96 	bl	8000638 <__aeabi_dmul>
 800c70c:	a33e      	add	r3, pc, #248	; (adr r3, 800c808 <__ieee754_acos+0x298>)
 800c70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c712:	f7f3 fdd9 	bl	80002c8 <__aeabi_dsub>
 800c716:	4622      	mov	r2, r4
 800c718:	462b      	mov	r3, r5
 800c71a:	f7f3 ff8d 	bl	8000638 <__aeabi_dmul>
 800c71e:	a33c      	add	r3, pc, #240	; (adr r3, 800c810 <__ieee754_acos+0x2a0>)
 800c720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c724:	f7f3 fdd2 	bl	80002cc <__adddf3>
 800c728:	4622      	mov	r2, r4
 800c72a:	462b      	mov	r3, r5
 800c72c:	f7f3 ff84 	bl	8000638 <__aeabi_dmul>
 800c730:	a339      	add	r3, pc, #228	; (adr r3, 800c818 <__ieee754_acos+0x2a8>)
 800c732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c736:	f7f3 fdc7 	bl	80002c8 <__aeabi_dsub>
 800c73a:	4622      	mov	r2, r4
 800c73c:	462b      	mov	r3, r5
 800c73e:	f7f3 ff7b 	bl	8000638 <__aeabi_dmul>
 800c742:	a337      	add	r3, pc, #220	; (adr r3, 800c820 <__ieee754_acos+0x2b0>)
 800c744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c748:	f7f3 fdc0 	bl	80002cc <__adddf3>
 800c74c:	4622      	mov	r2, r4
 800c74e:	462b      	mov	r3, r5
 800c750:	f7f3 ff72 	bl	8000638 <__aeabi_dmul>
 800c754:	ec45 4b10 	vmov	d0, r4, r5
 800c758:	4680      	mov	r8, r0
 800c75a:	4689      	mov	r9, r1
 800c75c:	f000 fc40 	bl	800cfe0 <__ieee754_sqrt>
 800c760:	a331      	add	r3, pc, #196	; (adr r3, 800c828 <__ieee754_acos+0x2b8>)
 800c762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c766:	4620      	mov	r0, r4
 800c768:	4629      	mov	r1, r5
 800c76a:	ec57 6b10 	vmov	r6, r7, d0
 800c76e:	f7f3 ff63 	bl	8000638 <__aeabi_dmul>
 800c772:	a32f      	add	r3, pc, #188	; (adr r3, 800c830 <__ieee754_acos+0x2c0>)
 800c774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c778:	f7f3 fda6 	bl	80002c8 <__aeabi_dsub>
 800c77c:	4622      	mov	r2, r4
 800c77e:	462b      	mov	r3, r5
 800c780:	f7f3 ff5a 	bl	8000638 <__aeabi_dmul>
 800c784:	a32c      	add	r3, pc, #176	; (adr r3, 800c838 <__ieee754_acos+0x2c8>)
 800c786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78a:	f7f3 fd9f 	bl	80002cc <__adddf3>
 800c78e:	4622      	mov	r2, r4
 800c790:	462b      	mov	r3, r5
 800c792:	f7f3 ff51 	bl	8000638 <__aeabi_dmul>
 800c796:	a32a      	add	r3, pc, #168	; (adr r3, 800c840 <__ieee754_acos+0x2d0>)
 800c798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79c:	f7f3 fd94 	bl	80002c8 <__aeabi_dsub>
 800c7a0:	4622      	mov	r2, r4
 800c7a2:	462b      	mov	r3, r5
 800c7a4:	f7f3 ff48 	bl	8000638 <__aeabi_dmul>
 800c7a8:	4b2e      	ldr	r3, [pc, #184]	; (800c864 <__ieee754_acos+0x2f4>)
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	f7f3 fd8e 	bl	80002cc <__adddf3>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	460b      	mov	r3, r1
 800c7b4:	4640      	mov	r0, r8
 800c7b6:	4649      	mov	r1, r9
 800c7b8:	f7f4 f868 	bl	800088c <__aeabi_ddiv>
 800c7bc:	4632      	mov	r2, r6
 800c7be:	463b      	mov	r3, r7
 800c7c0:	f7f3 ff3a 	bl	8000638 <__aeabi_dmul>
 800c7c4:	a320      	add	r3, pc, #128	; (adr r3, 800c848 <__ieee754_acos+0x2d8>)
 800c7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ca:	f7f3 fd7d 	bl	80002c8 <__aeabi_dsub>
 800c7ce:	4632      	mov	r2, r6
 800c7d0:	463b      	mov	r3, r7
 800c7d2:	f7f3 fd7b 	bl	80002cc <__adddf3>
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	460b      	mov	r3, r1
 800c7da:	f7f3 fd77 	bl	80002cc <__adddf3>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	a103      	add	r1, pc, #12	; (adr r1, 800c7f0 <__ieee754_acos+0x280>)
 800c7e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7e8:	e76f      	b.n	800c6ca <__ieee754_acos+0x15a>
 800c7ea:	bf00      	nop
 800c7ec:	f3af 8000 	nop.w
 800c7f0:	54442d18 	.word	0x54442d18
 800c7f4:	400921fb 	.word	0x400921fb
 800c7f8:	0dfdf709 	.word	0x0dfdf709
 800c7fc:	3f023de1 	.word	0x3f023de1
 800c800:	7501b288 	.word	0x7501b288
 800c804:	3f49efe0 	.word	0x3f49efe0
 800c808:	b5688f3b 	.word	0xb5688f3b
 800c80c:	3fa48228 	.word	0x3fa48228
 800c810:	0e884455 	.word	0x0e884455
 800c814:	3fc9c155 	.word	0x3fc9c155
 800c818:	03eb6f7d 	.word	0x03eb6f7d
 800c81c:	3fd4d612 	.word	0x3fd4d612
 800c820:	55555555 	.word	0x55555555
 800c824:	3fc55555 	.word	0x3fc55555
 800c828:	b12e9282 	.word	0xb12e9282
 800c82c:	3fb3b8c5 	.word	0x3fb3b8c5
 800c830:	1b8d0159 	.word	0x1b8d0159
 800c834:	3fe6066c 	.word	0x3fe6066c
 800c838:	9c598ac8 	.word	0x9c598ac8
 800c83c:	40002ae5 	.word	0x40002ae5
 800c840:	1c8a2d4b 	.word	0x1c8a2d4b
 800c844:	40033a27 	.word	0x40033a27
 800c848:	33145c07 	.word	0x33145c07
 800c84c:	3c91a626 	.word	0x3c91a626
 800c850:	54442d18 	.word	0x54442d18
 800c854:	3ff921fb 	.word	0x3ff921fb
 800c858:	3fefffff 	.word	0x3fefffff
 800c85c:	3fdfffff 	.word	0x3fdfffff
 800c860:	3c600000 	.word	0x3c600000
 800c864:	3ff00000 	.word	0x3ff00000
 800c868:	3fe00000 	.word	0x3fe00000
 800c86c:	ee10 2a10 	vmov	r2, s0
 800c870:	462b      	mov	r3, r5
 800c872:	496d      	ldr	r1, [pc, #436]	; (800ca28 <__ieee754_acos+0x4b8>)
 800c874:	2000      	movs	r0, #0
 800c876:	f7f3 fd27 	bl	80002c8 <__aeabi_dsub>
 800c87a:	4b6c      	ldr	r3, [pc, #432]	; (800ca2c <__ieee754_acos+0x4bc>)
 800c87c:	2200      	movs	r2, #0
 800c87e:	f7f3 fedb 	bl	8000638 <__aeabi_dmul>
 800c882:	4604      	mov	r4, r0
 800c884:	460d      	mov	r5, r1
 800c886:	ec45 4b10 	vmov	d0, r4, r5
 800c88a:	f000 fba9 	bl	800cfe0 <__ieee754_sqrt>
 800c88e:	a34e      	add	r3, pc, #312	; (adr r3, 800c9c8 <__ieee754_acos+0x458>)
 800c890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c894:	4620      	mov	r0, r4
 800c896:	4629      	mov	r1, r5
 800c898:	ec59 8b10 	vmov	r8, r9, d0
 800c89c:	f7f3 fecc 	bl	8000638 <__aeabi_dmul>
 800c8a0:	a34b      	add	r3, pc, #300	; (adr r3, 800c9d0 <__ieee754_acos+0x460>)
 800c8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a6:	f7f3 fd11 	bl	80002cc <__adddf3>
 800c8aa:	4622      	mov	r2, r4
 800c8ac:	462b      	mov	r3, r5
 800c8ae:	f7f3 fec3 	bl	8000638 <__aeabi_dmul>
 800c8b2:	a349      	add	r3, pc, #292	; (adr r3, 800c9d8 <__ieee754_acos+0x468>)
 800c8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b8:	f7f3 fd06 	bl	80002c8 <__aeabi_dsub>
 800c8bc:	4622      	mov	r2, r4
 800c8be:	462b      	mov	r3, r5
 800c8c0:	f7f3 feba 	bl	8000638 <__aeabi_dmul>
 800c8c4:	a346      	add	r3, pc, #280	; (adr r3, 800c9e0 <__ieee754_acos+0x470>)
 800c8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ca:	f7f3 fcff 	bl	80002cc <__adddf3>
 800c8ce:	4622      	mov	r2, r4
 800c8d0:	462b      	mov	r3, r5
 800c8d2:	f7f3 feb1 	bl	8000638 <__aeabi_dmul>
 800c8d6:	a344      	add	r3, pc, #272	; (adr r3, 800c9e8 <__ieee754_acos+0x478>)
 800c8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8dc:	f7f3 fcf4 	bl	80002c8 <__aeabi_dsub>
 800c8e0:	4622      	mov	r2, r4
 800c8e2:	462b      	mov	r3, r5
 800c8e4:	f7f3 fea8 	bl	8000638 <__aeabi_dmul>
 800c8e8:	a341      	add	r3, pc, #260	; (adr r3, 800c9f0 <__ieee754_acos+0x480>)
 800c8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ee:	f7f3 fced 	bl	80002cc <__adddf3>
 800c8f2:	4622      	mov	r2, r4
 800c8f4:	462b      	mov	r3, r5
 800c8f6:	f7f3 fe9f 	bl	8000638 <__aeabi_dmul>
 800c8fa:	a33f      	add	r3, pc, #252	; (adr r3, 800c9f8 <__ieee754_acos+0x488>)
 800c8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c900:	4682      	mov	sl, r0
 800c902:	468b      	mov	fp, r1
 800c904:	4620      	mov	r0, r4
 800c906:	4629      	mov	r1, r5
 800c908:	f7f3 fe96 	bl	8000638 <__aeabi_dmul>
 800c90c:	a33c      	add	r3, pc, #240	; (adr r3, 800ca00 <__ieee754_acos+0x490>)
 800c90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c912:	f7f3 fcd9 	bl	80002c8 <__aeabi_dsub>
 800c916:	4622      	mov	r2, r4
 800c918:	462b      	mov	r3, r5
 800c91a:	f7f3 fe8d 	bl	8000638 <__aeabi_dmul>
 800c91e:	a33a      	add	r3, pc, #232	; (adr r3, 800ca08 <__ieee754_acos+0x498>)
 800c920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c924:	f7f3 fcd2 	bl	80002cc <__adddf3>
 800c928:	4622      	mov	r2, r4
 800c92a:	462b      	mov	r3, r5
 800c92c:	f7f3 fe84 	bl	8000638 <__aeabi_dmul>
 800c930:	a337      	add	r3, pc, #220	; (adr r3, 800ca10 <__ieee754_acos+0x4a0>)
 800c932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c936:	f7f3 fcc7 	bl	80002c8 <__aeabi_dsub>
 800c93a:	4622      	mov	r2, r4
 800c93c:	462b      	mov	r3, r5
 800c93e:	f7f3 fe7b 	bl	8000638 <__aeabi_dmul>
 800c942:	4b39      	ldr	r3, [pc, #228]	; (800ca28 <__ieee754_acos+0x4b8>)
 800c944:	2200      	movs	r2, #0
 800c946:	f7f3 fcc1 	bl	80002cc <__adddf3>
 800c94a:	4602      	mov	r2, r0
 800c94c:	460b      	mov	r3, r1
 800c94e:	4650      	mov	r0, sl
 800c950:	4659      	mov	r1, fp
 800c952:	f7f3 ff9b 	bl	800088c <__aeabi_ddiv>
 800c956:	4642      	mov	r2, r8
 800c958:	464b      	mov	r3, r9
 800c95a:	f7f3 fe6d 	bl	8000638 <__aeabi_dmul>
 800c95e:	2600      	movs	r6, #0
 800c960:	4682      	mov	sl, r0
 800c962:	468b      	mov	fp, r1
 800c964:	4632      	mov	r2, r6
 800c966:	464b      	mov	r3, r9
 800c968:	4630      	mov	r0, r6
 800c96a:	4649      	mov	r1, r9
 800c96c:	f7f3 fe64 	bl	8000638 <__aeabi_dmul>
 800c970:	4602      	mov	r2, r0
 800c972:	460b      	mov	r3, r1
 800c974:	4620      	mov	r0, r4
 800c976:	4629      	mov	r1, r5
 800c978:	f7f3 fca6 	bl	80002c8 <__aeabi_dsub>
 800c97c:	4632      	mov	r2, r6
 800c97e:	4604      	mov	r4, r0
 800c980:	460d      	mov	r5, r1
 800c982:	464b      	mov	r3, r9
 800c984:	4640      	mov	r0, r8
 800c986:	4649      	mov	r1, r9
 800c988:	f7f3 fca0 	bl	80002cc <__adddf3>
 800c98c:	4602      	mov	r2, r0
 800c98e:	460b      	mov	r3, r1
 800c990:	4620      	mov	r0, r4
 800c992:	4629      	mov	r1, r5
 800c994:	f7f3 ff7a 	bl	800088c <__aeabi_ddiv>
 800c998:	4602      	mov	r2, r0
 800c99a:	460b      	mov	r3, r1
 800c99c:	4650      	mov	r0, sl
 800c99e:	4659      	mov	r1, fp
 800c9a0:	f7f3 fc94 	bl	80002cc <__adddf3>
 800c9a4:	4632      	mov	r2, r6
 800c9a6:	464b      	mov	r3, r9
 800c9a8:	f7f3 fc90 	bl	80002cc <__adddf3>
 800c9ac:	4602      	mov	r2, r0
 800c9ae:	460b      	mov	r3, r1
 800c9b0:	f7f3 fc8c 	bl	80002cc <__adddf3>
 800c9b4:	e5fe      	b.n	800c5b4 <__ieee754_acos+0x44>
 800c9b6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800ca18 <__ieee754_acos+0x4a8>
 800c9ba:	e5ed      	b.n	800c598 <__ieee754_acos+0x28>
 800c9bc:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800ca20 <__ieee754_acos+0x4b0>
 800c9c0:	e5ea      	b.n	800c598 <__ieee754_acos+0x28>
 800c9c2:	bf00      	nop
 800c9c4:	f3af 8000 	nop.w
 800c9c8:	0dfdf709 	.word	0x0dfdf709
 800c9cc:	3f023de1 	.word	0x3f023de1
 800c9d0:	7501b288 	.word	0x7501b288
 800c9d4:	3f49efe0 	.word	0x3f49efe0
 800c9d8:	b5688f3b 	.word	0xb5688f3b
 800c9dc:	3fa48228 	.word	0x3fa48228
 800c9e0:	0e884455 	.word	0x0e884455
 800c9e4:	3fc9c155 	.word	0x3fc9c155
 800c9e8:	03eb6f7d 	.word	0x03eb6f7d
 800c9ec:	3fd4d612 	.word	0x3fd4d612
 800c9f0:	55555555 	.word	0x55555555
 800c9f4:	3fc55555 	.word	0x3fc55555
 800c9f8:	b12e9282 	.word	0xb12e9282
 800c9fc:	3fb3b8c5 	.word	0x3fb3b8c5
 800ca00:	1b8d0159 	.word	0x1b8d0159
 800ca04:	3fe6066c 	.word	0x3fe6066c
 800ca08:	9c598ac8 	.word	0x9c598ac8
 800ca0c:	40002ae5 	.word	0x40002ae5
 800ca10:	1c8a2d4b 	.word	0x1c8a2d4b
 800ca14:	40033a27 	.word	0x40033a27
	...
 800ca20:	54442d18 	.word	0x54442d18
 800ca24:	3ff921fb 	.word	0x3ff921fb
 800ca28:	3ff00000 	.word	0x3ff00000
 800ca2c:	3fe00000 	.word	0x3fe00000

0800ca30 <__ieee754_atan2>:
 800ca30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca34:	ec57 6b11 	vmov	r6, r7, d1
 800ca38:	4273      	negs	r3, r6
 800ca3a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800cbc0 <__ieee754_atan2+0x190>
 800ca3e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ca42:	4333      	orrs	r3, r6
 800ca44:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ca48:	4573      	cmp	r3, lr
 800ca4a:	ec51 0b10 	vmov	r0, r1, d0
 800ca4e:	ee11 8a10 	vmov	r8, s2
 800ca52:	d80a      	bhi.n	800ca6a <__ieee754_atan2+0x3a>
 800ca54:	4244      	negs	r4, r0
 800ca56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ca5a:	4304      	orrs	r4, r0
 800ca5c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ca60:	4574      	cmp	r4, lr
 800ca62:	ee10 9a10 	vmov	r9, s0
 800ca66:	468c      	mov	ip, r1
 800ca68:	d907      	bls.n	800ca7a <__ieee754_atan2+0x4a>
 800ca6a:	4632      	mov	r2, r6
 800ca6c:	463b      	mov	r3, r7
 800ca6e:	f7f3 fc2d 	bl	80002cc <__adddf3>
 800ca72:	ec41 0b10 	vmov	d0, r0, r1
 800ca76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca7a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ca7e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ca82:	4334      	orrs	r4, r6
 800ca84:	d103      	bne.n	800ca8e <__ieee754_atan2+0x5e>
 800ca86:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca8a:	f7ff ba71 	b.w	800bf70 <atan>
 800ca8e:	17bc      	asrs	r4, r7, #30
 800ca90:	f004 0402 	and.w	r4, r4, #2
 800ca94:	ea53 0909 	orrs.w	r9, r3, r9
 800ca98:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ca9c:	d107      	bne.n	800caae <__ieee754_atan2+0x7e>
 800ca9e:	2c02      	cmp	r4, #2
 800caa0:	d060      	beq.n	800cb64 <__ieee754_atan2+0x134>
 800caa2:	2c03      	cmp	r4, #3
 800caa4:	d1e5      	bne.n	800ca72 <__ieee754_atan2+0x42>
 800caa6:	a142      	add	r1, pc, #264	; (adr r1, 800cbb0 <__ieee754_atan2+0x180>)
 800caa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800caac:	e7e1      	b.n	800ca72 <__ieee754_atan2+0x42>
 800caae:	ea52 0808 	orrs.w	r8, r2, r8
 800cab2:	d106      	bne.n	800cac2 <__ieee754_atan2+0x92>
 800cab4:	f1bc 0f00 	cmp.w	ip, #0
 800cab8:	da5f      	bge.n	800cb7a <__ieee754_atan2+0x14a>
 800caba:	a13f      	add	r1, pc, #252	; (adr r1, 800cbb8 <__ieee754_atan2+0x188>)
 800cabc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cac0:	e7d7      	b.n	800ca72 <__ieee754_atan2+0x42>
 800cac2:	4572      	cmp	r2, lr
 800cac4:	d10f      	bne.n	800cae6 <__ieee754_atan2+0xb6>
 800cac6:	4293      	cmp	r3, r2
 800cac8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800cacc:	d107      	bne.n	800cade <__ieee754_atan2+0xae>
 800cace:	2c02      	cmp	r4, #2
 800cad0:	d84c      	bhi.n	800cb6c <__ieee754_atan2+0x13c>
 800cad2:	4b35      	ldr	r3, [pc, #212]	; (800cba8 <__ieee754_atan2+0x178>)
 800cad4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800cad8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800cadc:	e7c9      	b.n	800ca72 <__ieee754_atan2+0x42>
 800cade:	2c02      	cmp	r4, #2
 800cae0:	d848      	bhi.n	800cb74 <__ieee754_atan2+0x144>
 800cae2:	4b32      	ldr	r3, [pc, #200]	; (800cbac <__ieee754_atan2+0x17c>)
 800cae4:	e7f6      	b.n	800cad4 <__ieee754_atan2+0xa4>
 800cae6:	4573      	cmp	r3, lr
 800cae8:	d0e4      	beq.n	800cab4 <__ieee754_atan2+0x84>
 800caea:	1a9b      	subs	r3, r3, r2
 800caec:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800caf0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800caf4:	da1e      	bge.n	800cb34 <__ieee754_atan2+0x104>
 800caf6:	2f00      	cmp	r7, #0
 800caf8:	da01      	bge.n	800cafe <__ieee754_atan2+0xce>
 800cafa:	323c      	adds	r2, #60	; 0x3c
 800cafc:	db1e      	blt.n	800cb3c <__ieee754_atan2+0x10c>
 800cafe:	4632      	mov	r2, r6
 800cb00:	463b      	mov	r3, r7
 800cb02:	f7f3 fec3 	bl	800088c <__aeabi_ddiv>
 800cb06:	ec41 0b10 	vmov	d0, r0, r1
 800cb0a:	f7ff fc25 	bl	800c358 <fabs>
 800cb0e:	f7ff fa2f 	bl	800bf70 <atan>
 800cb12:	ec51 0b10 	vmov	r0, r1, d0
 800cb16:	2c01      	cmp	r4, #1
 800cb18:	d013      	beq.n	800cb42 <__ieee754_atan2+0x112>
 800cb1a:	2c02      	cmp	r4, #2
 800cb1c:	d015      	beq.n	800cb4a <__ieee754_atan2+0x11a>
 800cb1e:	2c00      	cmp	r4, #0
 800cb20:	d0a7      	beq.n	800ca72 <__ieee754_atan2+0x42>
 800cb22:	a319      	add	r3, pc, #100	; (adr r3, 800cb88 <__ieee754_atan2+0x158>)
 800cb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb28:	f7f3 fbce 	bl	80002c8 <__aeabi_dsub>
 800cb2c:	a318      	add	r3, pc, #96	; (adr r3, 800cb90 <__ieee754_atan2+0x160>)
 800cb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb32:	e014      	b.n	800cb5e <__ieee754_atan2+0x12e>
 800cb34:	a118      	add	r1, pc, #96	; (adr r1, 800cb98 <__ieee754_atan2+0x168>)
 800cb36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb3a:	e7ec      	b.n	800cb16 <__ieee754_atan2+0xe6>
 800cb3c:	2000      	movs	r0, #0
 800cb3e:	2100      	movs	r1, #0
 800cb40:	e7e9      	b.n	800cb16 <__ieee754_atan2+0xe6>
 800cb42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb46:	4619      	mov	r1, r3
 800cb48:	e793      	b.n	800ca72 <__ieee754_atan2+0x42>
 800cb4a:	a30f      	add	r3, pc, #60	; (adr r3, 800cb88 <__ieee754_atan2+0x158>)
 800cb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb50:	f7f3 fbba 	bl	80002c8 <__aeabi_dsub>
 800cb54:	4602      	mov	r2, r0
 800cb56:	460b      	mov	r3, r1
 800cb58:	a10d      	add	r1, pc, #52	; (adr r1, 800cb90 <__ieee754_atan2+0x160>)
 800cb5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb5e:	f7f3 fbb3 	bl	80002c8 <__aeabi_dsub>
 800cb62:	e786      	b.n	800ca72 <__ieee754_atan2+0x42>
 800cb64:	a10a      	add	r1, pc, #40	; (adr r1, 800cb90 <__ieee754_atan2+0x160>)
 800cb66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb6a:	e782      	b.n	800ca72 <__ieee754_atan2+0x42>
 800cb6c:	a10c      	add	r1, pc, #48	; (adr r1, 800cba0 <__ieee754_atan2+0x170>)
 800cb6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb72:	e77e      	b.n	800ca72 <__ieee754_atan2+0x42>
 800cb74:	2000      	movs	r0, #0
 800cb76:	2100      	movs	r1, #0
 800cb78:	e77b      	b.n	800ca72 <__ieee754_atan2+0x42>
 800cb7a:	a107      	add	r1, pc, #28	; (adr r1, 800cb98 <__ieee754_atan2+0x168>)
 800cb7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb80:	e777      	b.n	800ca72 <__ieee754_atan2+0x42>
 800cb82:	bf00      	nop
 800cb84:	f3af 8000 	nop.w
 800cb88:	33145c07 	.word	0x33145c07
 800cb8c:	3ca1a626 	.word	0x3ca1a626
 800cb90:	54442d18 	.word	0x54442d18
 800cb94:	400921fb 	.word	0x400921fb
 800cb98:	54442d18 	.word	0x54442d18
 800cb9c:	3ff921fb 	.word	0x3ff921fb
 800cba0:	54442d18 	.word	0x54442d18
 800cba4:	3fe921fb 	.word	0x3fe921fb
 800cba8:	0800e7c0 	.word	0x0800e7c0
 800cbac:	0800e7d8 	.word	0x0800e7d8
 800cbb0:	54442d18 	.word	0x54442d18
 800cbb4:	c00921fb 	.word	0xc00921fb
 800cbb8:	54442d18 	.word	0x54442d18
 800cbbc:	bff921fb 	.word	0xbff921fb
 800cbc0:	7ff00000 	.word	0x7ff00000
 800cbc4:	00000000 	.word	0x00000000

0800cbc8 <__ieee754_rem_pio2>:
 800cbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbcc:	ed2d 8b02 	vpush	{d8}
 800cbd0:	ec55 4b10 	vmov	r4, r5, d0
 800cbd4:	4bca      	ldr	r3, [pc, #808]	; (800cf00 <__ieee754_rem_pio2+0x338>)
 800cbd6:	b08b      	sub	sp, #44	; 0x2c
 800cbd8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800cbdc:	4598      	cmp	r8, r3
 800cbde:	4682      	mov	sl, r0
 800cbe0:	9502      	str	r5, [sp, #8]
 800cbe2:	dc08      	bgt.n	800cbf6 <__ieee754_rem_pio2+0x2e>
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	ed80 0b00 	vstr	d0, [r0]
 800cbec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cbf0:	f04f 0b00 	mov.w	fp, #0
 800cbf4:	e028      	b.n	800cc48 <__ieee754_rem_pio2+0x80>
 800cbf6:	4bc3      	ldr	r3, [pc, #780]	; (800cf04 <__ieee754_rem_pio2+0x33c>)
 800cbf8:	4598      	cmp	r8, r3
 800cbfa:	dc78      	bgt.n	800ccee <__ieee754_rem_pio2+0x126>
 800cbfc:	9b02      	ldr	r3, [sp, #8]
 800cbfe:	4ec2      	ldr	r6, [pc, #776]	; (800cf08 <__ieee754_rem_pio2+0x340>)
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	ee10 0a10 	vmov	r0, s0
 800cc06:	a3b0      	add	r3, pc, #704	; (adr r3, 800cec8 <__ieee754_rem_pio2+0x300>)
 800cc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0c:	4629      	mov	r1, r5
 800cc0e:	dd39      	ble.n	800cc84 <__ieee754_rem_pio2+0xbc>
 800cc10:	f7f3 fb5a 	bl	80002c8 <__aeabi_dsub>
 800cc14:	45b0      	cmp	r8, r6
 800cc16:	4604      	mov	r4, r0
 800cc18:	460d      	mov	r5, r1
 800cc1a:	d01b      	beq.n	800cc54 <__ieee754_rem_pio2+0x8c>
 800cc1c:	a3ac      	add	r3, pc, #688	; (adr r3, 800ced0 <__ieee754_rem_pio2+0x308>)
 800cc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc22:	f7f3 fb51 	bl	80002c8 <__aeabi_dsub>
 800cc26:	4602      	mov	r2, r0
 800cc28:	460b      	mov	r3, r1
 800cc2a:	e9ca 2300 	strd	r2, r3, [sl]
 800cc2e:	4620      	mov	r0, r4
 800cc30:	4629      	mov	r1, r5
 800cc32:	f7f3 fb49 	bl	80002c8 <__aeabi_dsub>
 800cc36:	a3a6      	add	r3, pc, #664	; (adr r3, 800ced0 <__ieee754_rem_pio2+0x308>)
 800cc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc3c:	f7f3 fb44 	bl	80002c8 <__aeabi_dsub>
 800cc40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cc44:	f04f 0b01 	mov.w	fp, #1
 800cc48:	4658      	mov	r0, fp
 800cc4a:	b00b      	add	sp, #44	; 0x2c
 800cc4c:	ecbd 8b02 	vpop	{d8}
 800cc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc54:	a3a0      	add	r3, pc, #640	; (adr r3, 800ced8 <__ieee754_rem_pio2+0x310>)
 800cc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5a:	f7f3 fb35 	bl	80002c8 <__aeabi_dsub>
 800cc5e:	a3a0      	add	r3, pc, #640	; (adr r3, 800cee0 <__ieee754_rem_pio2+0x318>)
 800cc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc64:	4604      	mov	r4, r0
 800cc66:	460d      	mov	r5, r1
 800cc68:	f7f3 fb2e 	bl	80002c8 <__aeabi_dsub>
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	460b      	mov	r3, r1
 800cc70:	e9ca 2300 	strd	r2, r3, [sl]
 800cc74:	4620      	mov	r0, r4
 800cc76:	4629      	mov	r1, r5
 800cc78:	f7f3 fb26 	bl	80002c8 <__aeabi_dsub>
 800cc7c:	a398      	add	r3, pc, #608	; (adr r3, 800cee0 <__ieee754_rem_pio2+0x318>)
 800cc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc82:	e7db      	b.n	800cc3c <__ieee754_rem_pio2+0x74>
 800cc84:	f7f3 fb22 	bl	80002cc <__adddf3>
 800cc88:	45b0      	cmp	r8, r6
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	460d      	mov	r5, r1
 800cc8e:	d016      	beq.n	800ccbe <__ieee754_rem_pio2+0xf6>
 800cc90:	a38f      	add	r3, pc, #572	; (adr r3, 800ced0 <__ieee754_rem_pio2+0x308>)
 800cc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc96:	f7f3 fb19 	bl	80002cc <__adddf3>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	e9ca 2300 	strd	r2, r3, [sl]
 800cca2:	4620      	mov	r0, r4
 800cca4:	4629      	mov	r1, r5
 800cca6:	f7f3 fb0f 	bl	80002c8 <__aeabi_dsub>
 800ccaa:	a389      	add	r3, pc, #548	; (adr r3, 800ced0 <__ieee754_rem_pio2+0x308>)
 800ccac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb0:	f7f3 fb0c 	bl	80002cc <__adddf3>
 800ccb4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800ccb8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ccbc:	e7c4      	b.n	800cc48 <__ieee754_rem_pio2+0x80>
 800ccbe:	a386      	add	r3, pc, #536	; (adr r3, 800ced8 <__ieee754_rem_pio2+0x310>)
 800ccc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc4:	f7f3 fb02 	bl	80002cc <__adddf3>
 800ccc8:	a385      	add	r3, pc, #532	; (adr r3, 800cee0 <__ieee754_rem_pio2+0x318>)
 800ccca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccce:	4604      	mov	r4, r0
 800ccd0:	460d      	mov	r5, r1
 800ccd2:	f7f3 fafb 	bl	80002cc <__adddf3>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	460b      	mov	r3, r1
 800ccda:	e9ca 2300 	strd	r2, r3, [sl]
 800ccde:	4620      	mov	r0, r4
 800cce0:	4629      	mov	r1, r5
 800cce2:	f7f3 faf1 	bl	80002c8 <__aeabi_dsub>
 800cce6:	a37e      	add	r3, pc, #504	; (adr r3, 800cee0 <__ieee754_rem_pio2+0x318>)
 800cce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccec:	e7e0      	b.n	800ccb0 <__ieee754_rem_pio2+0xe8>
 800ccee:	4b87      	ldr	r3, [pc, #540]	; (800cf0c <__ieee754_rem_pio2+0x344>)
 800ccf0:	4598      	cmp	r8, r3
 800ccf2:	f300 80d9 	bgt.w	800cea8 <__ieee754_rem_pio2+0x2e0>
 800ccf6:	f7ff fb2f 	bl	800c358 <fabs>
 800ccfa:	ec55 4b10 	vmov	r4, r5, d0
 800ccfe:	ee10 0a10 	vmov	r0, s0
 800cd02:	a379      	add	r3, pc, #484	; (adr r3, 800cee8 <__ieee754_rem_pio2+0x320>)
 800cd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd08:	4629      	mov	r1, r5
 800cd0a:	f7f3 fc95 	bl	8000638 <__aeabi_dmul>
 800cd0e:	4b80      	ldr	r3, [pc, #512]	; (800cf10 <__ieee754_rem_pio2+0x348>)
 800cd10:	2200      	movs	r2, #0
 800cd12:	f7f3 fadb 	bl	80002cc <__adddf3>
 800cd16:	f7f3 ff3f 	bl	8000b98 <__aeabi_d2iz>
 800cd1a:	4683      	mov	fp, r0
 800cd1c:	f7f3 fc22 	bl	8000564 <__aeabi_i2d>
 800cd20:	4602      	mov	r2, r0
 800cd22:	460b      	mov	r3, r1
 800cd24:	ec43 2b18 	vmov	d8, r2, r3
 800cd28:	a367      	add	r3, pc, #412	; (adr r3, 800cec8 <__ieee754_rem_pio2+0x300>)
 800cd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd2e:	f7f3 fc83 	bl	8000638 <__aeabi_dmul>
 800cd32:	4602      	mov	r2, r0
 800cd34:	460b      	mov	r3, r1
 800cd36:	4620      	mov	r0, r4
 800cd38:	4629      	mov	r1, r5
 800cd3a:	f7f3 fac5 	bl	80002c8 <__aeabi_dsub>
 800cd3e:	a364      	add	r3, pc, #400	; (adr r3, 800ced0 <__ieee754_rem_pio2+0x308>)
 800cd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd44:	4606      	mov	r6, r0
 800cd46:	460f      	mov	r7, r1
 800cd48:	ec51 0b18 	vmov	r0, r1, d8
 800cd4c:	f7f3 fc74 	bl	8000638 <__aeabi_dmul>
 800cd50:	f1bb 0f1f 	cmp.w	fp, #31
 800cd54:	4604      	mov	r4, r0
 800cd56:	460d      	mov	r5, r1
 800cd58:	dc0d      	bgt.n	800cd76 <__ieee754_rem_pio2+0x1ae>
 800cd5a:	4b6e      	ldr	r3, [pc, #440]	; (800cf14 <__ieee754_rem_pio2+0x34c>)
 800cd5c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800cd60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd64:	4543      	cmp	r3, r8
 800cd66:	d006      	beq.n	800cd76 <__ieee754_rem_pio2+0x1ae>
 800cd68:	4622      	mov	r2, r4
 800cd6a:	462b      	mov	r3, r5
 800cd6c:	4630      	mov	r0, r6
 800cd6e:	4639      	mov	r1, r7
 800cd70:	f7f3 faaa 	bl	80002c8 <__aeabi_dsub>
 800cd74:	e00f      	b.n	800cd96 <__ieee754_rem_pio2+0x1ce>
 800cd76:	462b      	mov	r3, r5
 800cd78:	4622      	mov	r2, r4
 800cd7a:	4630      	mov	r0, r6
 800cd7c:	4639      	mov	r1, r7
 800cd7e:	f7f3 faa3 	bl	80002c8 <__aeabi_dsub>
 800cd82:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cd86:	9303      	str	r3, [sp, #12]
 800cd88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cd8c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800cd90:	f1b8 0f10 	cmp.w	r8, #16
 800cd94:	dc02      	bgt.n	800cd9c <__ieee754_rem_pio2+0x1d4>
 800cd96:	e9ca 0100 	strd	r0, r1, [sl]
 800cd9a:	e039      	b.n	800ce10 <__ieee754_rem_pio2+0x248>
 800cd9c:	a34e      	add	r3, pc, #312	; (adr r3, 800ced8 <__ieee754_rem_pio2+0x310>)
 800cd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda2:	ec51 0b18 	vmov	r0, r1, d8
 800cda6:	f7f3 fc47 	bl	8000638 <__aeabi_dmul>
 800cdaa:	4604      	mov	r4, r0
 800cdac:	460d      	mov	r5, r1
 800cdae:	4602      	mov	r2, r0
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	4630      	mov	r0, r6
 800cdb4:	4639      	mov	r1, r7
 800cdb6:	f7f3 fa87 	bl	80002c8 <__aeabi_dsub>
 800cdba:	4602      	mov	r2, r0
 800cdbc:	460b      	mov	r3, r1
 800cdbe:	4680      	mov	r8, r0
 800cdc0:	4689      	mov	r9, r1
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	4639      	mov	r1, r7
 800cdc6:	f7f3 fa7f 	bl	80002c8 <__aeabi_dsub>
 800cdca:	4622      	mov	r2, r4
 800cdcc:	462b      	mov	r3, r5
 800cdce:	f7f3 fa7b 	bl	80002c8 <__aeabi_dsub>
 800cdd2:	a343      	add	r3, pc, #268	; (adr r3, 800cee0 <__ieee754_rem_pio2+0x318>)
 800cdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd8:	4604      	mov	r4, r0
 800cdda:	460d      	mov	r5, r1
 800cddc:	ec51 0b18 	vmov	r0, r1, d8
 800cde0:	f7f3 fc2a 	bl	8000638 <__aeabi_dmul>
 800cde4:	4622      	mov	r2, r4
 800cde6:	462b      	mov	r3, r5
 800cde8:	f7f3 fa6e 	bl	80002c8 <__aeabi_dsub>
 800cdec:	4602      	mov	r2, r0
 800cdee:	460b      	mov	r3, r1
 800cdf0:	4604      	mov	r4, r0
 800cdf2:	460d      	mov	r5, r1
 800cdf4:	4640      	mov	r0, r8
 800cdf6:	4649      	mov	r1, r9
 800cdf8:	f7f3 fa66 	bl	80002c8 <__aeabi_dsub>
 800cdfc:	9a03      	ldr	r2, [sp, #12]
 800cdfe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ce02:	1ad3      	subs	r3, r2, r3
 800ce04:	2b31      	cmp	r3, #49	; 0x31
 800ce06:	dc24      	bgt.n	800ce52 <__ieee754_rem_pio2+0x28a>
 800ce08:	e9ca 0100 	strd	r0, r1, [sl]
 800ce0c:	4646      	mov	r6, r8
 800ce0e:	464f      	mov	r7, r9
 800ce10:	e9da 8900 	ldrd	r8, r9, [sl]
 800ce14:	4630      	mov	r0, r6
 800ce16:	4642      	mov	r2, r8
 800ce18:	464b      	mov	r3, r9
 800ce1a:	4639      	mov	r1, r7
 800ce1c:	f7f3 fa54 	bl	80002c8 <__aeabi_dsub>
 800ce20:	462b      	mov	r3, r5
 800ce22:	4622      	mov	r2, r4
 800ce24:	f7f3 fa50 	bl	80002c8 <__aeabi_dsub>
 800ce28:	9b02      	ldr	r3, [sp, #8]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ce30:	f6bf af0a 	bge.w	800cc48 <__ieee754_rem_pio2+0x80>
 800ce34:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ce38:	f8ca 3004 	str.w	r3, [sl, #4]
 800ce3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce40:	f8ca 8000 	str.w	r8, [sl]
 800ce44:	f8ca 0008 	str.w	r0, [sl, #8]
 800ce48:	f8ca 300c 	str.w	r3, [sl, #12]
 800ce4c:	f1cb 0b00 	rsb	fp, fp, #0
 800ce50:	e6fa      	b.n	800cc48 <__ieee754_rem_pio2+0x80>
 800ce52:	a327      	add	r3, pc, #156	; (adr r3, 800cef0 <__ieee754_rem_pio2+0x328>)
 800ce54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce58:	ec51 0b18 	vmov	r0, r1, d8
 800ce5c:	f7f3 fbec 	bl	8000638 <__aeabi_dmul>
 800ce60:	4604      	mov	r4, r0
 800ce62:	460d      	mov	r5, r1
 800ce64:	4602      	mov	r2, r0
 800ce66:	460b      	mov	r3, r1
 800ce68:	4640      	mov	r0, r8
 800ce6a:	4649      	mov	r1, r9
 800ce6c:	f7f3 fa2c 	bl	80002c8 <__aeabi_dsub>
 800ce70:	4602      	mov	r2, r0
 800ce72:	460b      	mov	r3, r1
 800ce74:	4606      	mov	r6, r0
 800ce76:	460f      	mov	r7, r1
 800ce78:	4640      	mov	r0, r8
 800ce7a:	4649      	mov	r1, r9
 800ce7c:	f7f3 fa24 	bl	80002c8 <__aeabi_dsub>
 800ce80:	4622      	mov	r2, r4
 800ce82:	462b      	mov	r3, r5
 800ce84:	f7f3 fa20 	bl	80002c8 <__aeabi_dsub>
 800ce88:	a31b      	add	r3, pc, #108	; (adr r3, 800cef8 <__ieee754_rem_pio2+0x330>)
 800ce8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8e:	4604      	mov	r4, r0
 800ce90:	460d      	mov	r5, r1
 800ce92:	ec51 0b18 	vmov	r0, r1, d8
 800ce96:	f7f3 fbcf 	bl	8000638 <__aeabi_dmul>
 800ce9a:	4622      	mov	r2, r4
 800ce9c:	462b      	mov	r3, r5
 800ce9e:	f7f3 fa13 	bl	80002c8 <__aeabi_dsub>
 800cea2:	4604      	mov	r4, r0
 800cea4:	460d      	mov	r5, r1
 800cea6:	e75f      	b.n	800cd68 <__ieee754_rem_pio2+0x1a0>
 800cea8:	4b1b      	ldr	r3, [pc, #108]	; (800cf18 <__ieee754_rem_pio2+0x350>)
 800ceaa:	4598      	cmp	r8, r3
 800ceac:	dd36      	ble.n	800cf1c <__ieee754_rem_pio2+0x354>
 800ceae:	ee10 2a10 	vmov	r2, s0
 800ceb2:	462b      	mov	r3, r5
 800ceb4:	4620      	mov	r0, r4
 800ceb6:	4629      	mov	r1, r5
 800ceb8:	f7f3 fa06 	bl	80002c8 <__aeabi_dsub>
 800cebc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cec0:	e9ca 0100 	strd	r0, r1, [sl]
 800cec4:	e694      	b.n	800cbf0 <__ieee754_rem_pio2+0x28>
 800cec6:	bf00      	nop
 800cec8:	54400000 	.word	0x54400000
 800cecc:	3ff921fb 	.word	0x3ff921fb
 800ced0:	1a626331 	.word	0x1a626331
 800ced4:	3dd0b461 	.word	0x3dd0b461
 800ced8:	1a600000 	.word	0x1a600000
 800cedc:	3dd0b461 	.word	0x3dd0b461
 800cee0:	2e037073 	.word	0x2e037073
 800cee4:	3ba3198a 	.word	0x3ba3198a
 800cee8:	6dc9c883 	.word	0x6dc9c883
 800ceec:	3fe45f30 	.word	0x3fe45f30
 800cef0:	2e000000 	.word	0x2e000000
 800cef4:	3ba3198a 	.word	0x3ba3198a
 800cef8:	252049c1 	.word	0x252049c1
 800cefc:	397b839a 	.word	0x397b839a
 800cf00:	3fe921fb 	.word	0x3fe921fb
 800cf04:	4002d97b 	.word	0x4002d97b
 800cf08:	3ff921fb 	.word	0x3ff921fb
 800cf0c:	413921fb 	.word	0x413921fb
 800cf10:	3fe00000 	.word	0x3fe00000
 800cf14:	0800e7f0 	.word	0x0800e7f0
 800cf18:	7fefffff 	.word	0x7fefffff
 800cf1c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800cf20:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800cf24:	ee10 0a10 	vmov	r0, s0
 800cf28:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800cf2c:	ee10 6a10 	vmov	r6, s0
 800cf30:	460f      	mov	r7, r1
 800cf32:	f7f3 fe31 	bl	8000b98 <__aeabi_d2iz>
 800cf36:	f7f3 fb15 	bl	8000564 <__aeabi_i2d>
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	460b      	mov	r3, r1
 800cf3e:	4630      	mov	r0, r6
 800cf40:	4639      	mov	r1, r7
 800cf42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cf46:	f7f3 f9bf 	bl	80002c8 <__aeabi_dsub>
 800cf4a:	4b23      	ldr	r3, [pc, #140]	; (800cfd8 <__ieee754_rem_pio2+0x410>)
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	f7f3 fb73 	bl	8000638 <__aeabi_dmul>
 800cf52:	460f      	mov	r7, r1
 800cf54:	4606      	mov	r6, r0
 800cf56:	f7f3 fe1f 	bl	8000b98 <__aeabi_d2iz>
 800cf5a:	f7f3 fb03 	bl	8000564 <__aeabi_i2d>
 800cf5e:	4602      	mov	r2, r0
 800cf60:	460b      	mov	r3, r1
 800cf62:	4630      	mov	r0, r6
 800cf64:	4639      	mov	r1, r7
 800cf66:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cf6a:	f7f3 f9ad 	bl	80002c8 <__aeabi_dsub>
 800cf6e:	4b1a      	ldr	r3, [pc, #104]	; (800cfd8 <__ieee754_rem_pio2+0x410>)
 800cf70:	2200      	movs	r2, #0
 800cf72:	f7f3 fb61 	bl	8000638 <__aeabi_dmul>
 800cf76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cf7a:	ad04      	add	r5, sp, #16
 800cf7c:	f04f 0803 	mov.w	r8, #3
 800cf80:	46a9      	mov	r9, r5
 800cf82:	2600      	movs	r6, #0
 800cf84:	2700      	movs	r7, #0
 800cf86:	4632      	mov	r2, r6
 800cf88:	463b      	mov	r3, r7
 800cf8a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800cf8e:	46c3      	mov	fp, r8
 800cf90:	3d08      	subs	r5, #8
 800cf92:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800cf96:	f7f3 fdb7 	bl	8000b08 <__aeabi_dcmpeq>
 800cf9a:	2800      	cmp	r0, #0
 800cf9c:	d1f3      	bne.n	800cf86 <__ieee754_rem_pio2+0x3be>
 800cf9e:	4b0f      	ldr	r3, [pc, #60]	; (800cfdc <__ieee754_rem_pio2+0x414>)
 800cfa0:	9301      	str	r3, [sp, #4]
 800cfa2:	2302      	movs	r3, #2
 800cfa4:	9300      	str	r3, [sp, #0]
 800cfa6:	4622      	mov	r2, r4
 800cfa8:	465b      	mov	r3, fp
 800cfaa:	4651      	mov	r1, sl
 800cfac:	4648      	mov	r0, r9
 800cfae:	f000 f993 	bl	800d2d8 <__kernel_rem_pio2>
 800cfb2:	9b02      	ldr	r3, [sp, #8]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	4683      	mov	fp, r0
 800cfb8:	f6bf ae46 	bge.w	800cc48 <__ieee754_rem_pio2+0x80>
 800cfbc:	e9da 2100 	ldrd	r2, r1, [sl]
 800cfc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cfc4:	e9ca 2300 	strd	r2, r3, [sl]
 800cfc8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800cfcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cfd0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800cfd4:	e73a      	b.n	800ce4c <__ieee754_rem_pio2+0x284>
 800cfd6:	bf00      	nop
 800cfd8:	41700000 	.word	0x41700000
 800cfdc:	0800e870 	.word	0x0800e870

0800cfe0 <__ieee754_sqrt>:
 800cfe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfe4:	ec55 4b10 	vmov	r4, r5, d0
 800cfe8:	4e55      	ldr	r6, [pc, #340]	; (800d140 <__ieee754_sqrt+0x160>)
 800cfea:	43ae      	bics	r6, r5
 800cfec:	ee10 0a10 	vmov	r0, s0
 800cff0:	ee10 3a10 	vmov	r3, s0
 800cff4:	462a      	mov	r2, r5
 800cff6:	4629      	mov	r1, r5
 800cff8:	d110      	bne.n	800d01c <__ieee754_sqrt+0x3c>
 800cffa:	ee10 2a10 	vmov	r2, s0
 800cffe:	462b      	mov	r3, r5
 800d000:	f7f3 fb1a 	bl	8000638 <__aeabi_dmul>
 800d004:	4602      	mov	r2, r0
 800d006:	460b      	mov	r3, r1
 800d008:	4620      	mov	r0, r4
 800d00a:	4629      	mov	r1, r5
 800d00c:	f7f3 f95e 	bl	80002cc <__adddf3>
 800d010:	4604      	mov	r4, r0
 800d012:	460d      	mov	r5, r1
 800d014:	ec45 4b10 	vmov	d0, r4, r5
 800d018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d01c:	2d00      	cmp	r5, #0
 800d01e:	dc10      	bgt.n	800d042 <__ieee754_sqrt+0x62>
 800d020:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d024:	4330      	orrs	r0, r6
 800d026:	d0f5      	beq.n	800d014 <__ieee754_sqrt+0x34>
 800d028:	b15d      	cbz	r5, 800d042 <__ieee754_sqrt+0x62>
 800d02a:	ee10 2a10 	vmov	r2, s0
 800d02e:	462b      	mov	r3, r5
 800d030:	ee10 0a10 	vmov	r0, s0
 800d034:	f7f3 f948 	bl	80002c8 <__aeabi_dsub>
 800d038:	4602      	mov	r2, r0
 800d03a:	460b      	mov	r3, r1
 800d03c:	f7f3 fc26 	bl	800088c <__aeabi_ddiv>
 800d040:	e7e6      	b.n	800d010 <__ieee754_sqrt+0x30>
 800d042:	1512      	asrs	r2, r2, #20
 800d044:	d074      	beq.n	800d130 <__ieee754_sqrt+0x150>
 800d046:	07d4      	lsls	r4, r2, #31
 800d048:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d04c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d050:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d054:	bf5e      	ittt	pl
 800d056:	0fda      	lsrpl	r2, r3, #31
 800d058:	005b      	lslpl	r3, r3, #1
 800d05a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d05e:	2400      	movs	r4, #0
 800d060:	0fda      	lsrs	r2, r3, #31
 800d062:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d066:	107f      	asrs	r7, r7, #1
 800d068:	005b      	lsls	r3, r3, #1
 800d06a:	2516      	movs	r5, #22
 800d06c:	4620      	mov	r0, r4
 800d06e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d072:	1886      	adds	r6, r0, r2
 800d074:	428e      	cmp	r6, r1
 800d076:	bfde      	ittt	le
 800d078:	1b89      	suble	r1, r1, r6
 800d07a:	18b0      	addle	r0, r6, r2
 800d07c:	18a4      	addle	r4, r4, r2
 800d07e:	0049      	lsls	r1, r1, #1
 800d080:	3d01      	subs	r5, #1
 800d082:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d086:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d08a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d08e:	d1f0      	bne.n	800d072 <__ieee754_sqrt+0x92>
 800d090:	462a      	mov	r2, r5
 800d092:	f04f 0e20 	mov.w	lr, #32
 800d096:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d09a:	4281      	cmp	r1, r0
 800d09c:	eb06 0c05 	add.w	ip, r6, r5
 800d0a0:	dc02      	bgt.n	800d0a8 <__ieee754_sqrt+0xc8>
 800d0a2:	d113      	bne.n	800d0cc <__ieee754_sqrt+0xec>
 800d0a4:	459c      	cmp	ip, r3
 800d0a6:	d811      	bhi.n	800d0cc <__ieee754_sqrt+0xec>
 800d0a8:	f1bc 0f00 	cmp.w	ip, #0
 800d0ac:	eb0c 0506 	add.w	r5, ip, r6
 800d0b0:	da43      	bge.n	800d13a <__ieee754_sqrt+0x15a>
 800d0b2:	2d00      	cmp	r5, #0
 800d0b4:	db41      	blt.n	800d13a <__ieee754_sqrt+0x15a>
 800d0b6:	f100 0801 	add.w	r8, r0, #1
 800d0ba:	1a09      	subs	r1, r1, r0
 800d0bc:	459c      	cmp	ip, r3
 800d0be:	bf88      	it	hi
 800d0c0:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800d0c4:	eba3 030c 	sub.w	r3, r3, ip
 800d0c8:	4432      	add	r2, r6
 800d0ca:	4640      	mov	r0, r8
 800d0cc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d0d0:	f1be 0e01 	subs.w	lr, lr, #1
 800d0d4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d0d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d0dc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d0e0:	d1db      	bne.n	800d09a <__ieee754_sqrt+0xba>
 800d0e2:	430b      	orrs	r3, r1
 800d0e4:	d006      	beq.n	800d0f4 <__ieee754_sqrt+0x114>
 800d0e6:	1c50      	adds	r0, r2, #1
 800d0e8:	bf13      	iteet	ne
 800d0ea:	3201      	addne	r2, #1
 800d0ec:	3401      	addeq	r4, #1
 800d0ee:	4672      	moveq	r2, lr
 800d0f0:	f022 0201 	bicne.w	r2, r2, #1
 800d0f4:	1063      	asrs	r3, r4, #1
 800d0f6:	0852      	lsrs	r2, r2, #1
 800d0f8:	07e1      	lsls	r1, r4, #31
 800d0fa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d0fe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d102:	bf48      	it	mi
 800d104:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d108:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d10c:	4614      	mov	r4, r2
 800d10e:	e781      	b.n	800d014 <__ieee754_sqrt+0x34>
 800d110:	0ad9      	lsrs	r1, r3, #11
 800d112:	3815      	subs	r0, #21
 800d114:	055b      	lsls	r3, r3, #21
 800d116:	2900      	cmp	r1, #0
 800d118:	d0fa      	beq.n	800d110 <__ieee754_sqrt+0x130>
 800d11a:	02cd      	lsls	r5, r1, #11
 800d11c:	d50a      	bpl.n	800d134 <__ieee754_sqrt+0x154>
 800d11e:	f1c2 0420 	rsb	r4, r2, #32
 800d122:	fa23 f404 	lsr.w	r4, r3, r4
 800d126:	1e55      	subs	r5, r2, #1
 800d128:	4093      	lsls	r3, r2
 800d12a:	4321      	orrs	r1, r4
 800d12c:	1b42      	subs	r2, r0, r5
 800d12e:	e78a      	b.n	800d046 <__ieee754_sqrt+0x66>
 800d130:	4610      	mov	r0, r2
 800d132:	e7f0      	b.n	800d116 <__ieee754_sqrt+0x136>
 800d134:	0049      	lsls	r1, r1, #1
 800d136:	3201      	adds	r2, #1
 800d138:	e7ef      	b.n	800d11a <__ieee754_sqrt+0x13a>
 800d13a:	4680      	mov	r8, r0
 800d13c:	e7bd      	b.n	800d0ba <__ieee754_sqrt+0xda>
 800d13e:	bf00      	nop
 800d140:	7ff00000 	.word	0x7ff00000
 800d144:	00000000 	.word	0x00000000

0800d148 <__kernel_cos>:
 800d148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d14c:	ec57 6b10 	vmov	r6, r7, d0
 800d150:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d154:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d158:	ed8d 1b00 	vstr	d1, [sp]
 800d15c:	da07      	bge.n	800d16e <__kernel_cos+0x26>
 800d15e:	ee10 0a10 	vmov	r0, s0
 800d162:	4639      	mov	r1, r7
 800d164:	f7f3 fd18 	bl	8000b98 <__aeabi_d2iz>
 800d168:	2800      	cmp	r0, #0
 800d16a:	f000 8088 	beq.w	800d27e <__kernel_cos+0x136>
 800d16e:	4632      	mov	r2, r6
 800d170:	463b      	mov	r3, r7
 800d172:	4630      	mov	r0, r6
 800d174:	4639      	mov	r1, r7
 800d176:	f7f3 fa5f 	bl	8000638 <__aeabi_dmul>
 800d17a:	4b51      	ldr	r3, [pc, #324]	; (800d2c0 <__kernel_cos+0x178>)
 800d17c:	2200      	movs	r2, #0
 800d17e:	4604      	mov	r4, r0
 800d180:	460d      	mov	r5, r1
 800d182:	f7f3 fa59 	bl	8000638 <__aeabi_dmul>
 800d186:	a340      	add	r3, pc, #256	; (adr r3, 800d288 <__kernel_cos+0x140>)
 800d188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18c:	4682      	mov	sl, r0
 800d18e:	468b      	mov	fp, r1
 800d190:	4620      	mov	r0, r4
 800d192:	4629      	mov	r1, r5
 800d194:	f7f3 fa50 	bl	8000638 <__aeabi_dmul>
 800d198:	a33d      	add	r3, pc, #244	; (adr r3, 800d290 <__kernel_cos+0x148>)
 800d19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d19e:	f7f3 f895 	bl	80002cc <__adddf3>
 800d1a2:	4622      	mov	r2, r4
 800d1a4:	462b      	mov	r3, r5
 800d1a6:	f7f3 fa47 	bl	8000638 <__aeabi_dmul>
 800d1aa:	a33b      	add	r3, pc, #236	; (adr r3, 800d298 <__kernel_cos+0x150>)
 800d1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b0:	f7f3 f88a 	bl	80002c8 <__aeabi_dsub>
 800d1b4:	4622      	mov	r2, r4
 800d1b6:	462b      	mov	r3, r5
 800d1b8:	f7f3 fa3e 	bl	8000638 <__aeabi_dmul>
 800d1bc:	a338      	add	r3, pc, #224	; (adr r3, 800d2a0 <__kernel_cos+0x158>)
 800d1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c2:	f7f3 f883 	bl	80002cc <__adddf3>
 800d1c6:	4622      	mov	r2, r4
 800d1c8:	462b      	mov	r3, r5
 800d1ca:	f7f3 fa35 	bl	8000638 <__aeabi_dmul>
 800d1ce:	a336      	add	r3, pc, #216	; (adr r3, 800d2a8 <__kernel_cos+0x160>)
 800d1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d4:	f7f3 f878 	bl	80002c8 <__aeabi_dsub>
 800d1d8:	4622      	mov	r2, r4
 800d1da:	462b      	mov	r3, r5
 800d1dc:	f7f3 fa2c 	bl	8000638 <__aeabi_dmul>
 800d1e0:	a333      	add	r3, pc, #204	; (adr r3, 800d2b0 <__kernel_cos+0x168>)
 800d1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e6:	f7f3 f871 	bl	80002cc <__adddf3>
 800d1ea:	4622      	mov	r2, r4
 800d1ec:	462b      	mov	r3, r5
 800d1ee:	f7f3 fa23 	bl	8000638 <__aeabi_dmul>
 800d1f2:	4622      	mov	r2, r4
 800d1f4:	462b      	mov	r3, r5
 800d1f6:	f7f3 fa1f 	bl	8000638 <__aeabi_dmul>
 800d1fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1fe:	4604      	mov	r4, r0
 800d200:	460d      	mov	r5, r1
 800d202:	4630      	mov	r0, r6
 800d204:	4639      	mov	r1, r7
 800d206:	f7f3 fa17 	bl	8000638 <__aeabi_dmul>
 800d20a:	460b      	mov	r3, r1
 800d20c:	4602      	mov	r2, r0
 800d20e:	4629      	mov	r1, r5
 800d210:	4620      	mov	r0, r4
 800d212:	f7f3 f859 	bl	80002c8 <__aeabi_dsub>
 800d216:	4b2b      	ldr	r3, [pc, #172]	; (800d2c4 <__kernel_cos+0x17c>)
 800d218:	4598      	cmp	r8, r3
 800d21a:	4606      	mov	r6, r0
 800d21c:	460f      	mov	r7, r1
 800d21e:	dc10      	bgt.n	800d242 <__kernel_cos+0xfa>
 800d220:	4602      	mov	r2, r0
 800d222:	460b      	mov	r3, r1
 800d224:	4650      	mov	r0, sl
 800d226:	4659      	mov	r1, fp
 800d228:	f7f3 f84e 	bl	80002c8 <__aeabi_dsub>
 800d22c:	460b      	mov	r3, r1
 800d22e:	4926      	ldr	r1, [pc, #152]	; (800d2c8 <__kernel_cos+0x180>)
 800d230:	4602      	mov	r2, r0
 800d232:	2000      	movs	r0, #0
 800d234:	f7f3 f848 	bl	80002c8 <__aeabi_dsub>
 800d238:	ec41 0b10 	vmov	d0, r0, r1
 800d23c:	b003      	add	sp, #12
 800d23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d242:	4b22      	ldr	r3, [pc, #136]	; (800d2cc <__kernel_cos+0x184>)
 800d244:	4920      	ldr	r1, [pc, #128]	; (800d2c8 <__kernel_cos+0x180>)
 800d246:	4598      	cmp	r8, r3
 800d248:	bfcc      	ite	gt
 800d24a:	4d21      	ldrgt	r5, [pc, #132]	; (800d2d0 <__kernel_cos+0x188>)
 800d24c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d250:	2400      	movs	r4, #0
 800d252:	4622      	mov	r2, r4
 800d254:	462b      	mov	r3, r5
 800d256:	2000      	movs	r0, #0
 800d258:	f7f3 f836 	bl	80002c8 <__aeabi_dsub>
 800d25c:	4622      	mov	r2, r4
 800d25e:	4680      	mov	r8, r0
 800d260:	4689      	mov	r9, r1
 800d262:	462b      	mov	r3, r5
 800d264:	4650      	mov	r0, sl
 800d266:	4659      	mov	r1, fp
 800d268:	f7f3 f82e 	bl	80002c8 <__aeabi_dsub>
 800d26c:	4632      	mov	r2, r6
 800d26e:	463b      	mov	r3, r7
 800d270:	f7f3 f82a 	bl	80002c8 <__aeabi_dsub>
 800d274:	4602      	mov	r2, r0
 800d276:	460b      	mov	r3, r1
 800d278:	4640      	mov	r0, r8
 800d27a:	4649      	mov	r1, r9
 800d27c:	e7da      	b.n	800d234 <__kernel_cos+0xec>
 800d27e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d2b8 <__kernel_cos+0x170>
 800d282:	e7db      	b.n	800d23c <__kernel_cos+0xf4>
 800d284:	f3af 8000 	nop.w
 800d288:	be8838d4 	.word	0xbe8838d4
 800d28c:	bda8fae9 	.word	0xbda8fae9
 800d290:	bdb4b1c4 	.word	0xbdb4b1c4
 800d294:	3e21ee9e 	.word	0x3e21ee9e
 800d298:	809c52ad 	.word	0x809c52ad
 800d29c:	3e927e4f 	.word	0x3e927e4f
 800d2a0:	19cb1590 	.word	0x19cb1590
 800d2a4:	3efa01a0 	.word	0x3efa01a0
 800d2a8:	16c15177 	.word	0x16c15177
 800d2ac:	3f56c16c 	.word	0x3f56c16c
 800d2b0:	5555554c 	.word	0x5555554c
 800d2b4:	3fa55555 	.word	0x3fa55555
 800d2b8:	00000000 	.word	0x00000000
 800d2bc:	3ff00000 	.word	0x3ff00000
 800d2c0:	3fe00000 	.word	0x3fe00000
 800d2c4:	3fd33332 	.word	0x3fd33332
 800d2c8:	3ff00000 	.word	0x3ff00000
 800d2cc:	3fe90000 	.word	0x3fe90000
 800d2d0:	3fd20000 	.word	0x3fd20000
 800d2d4:	00000000 	.word	0x00000000

0800d2d8 <__kernel_rem_pio2>:
 800d2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2dc:	ed2d 8b02 	vpush	{d8}
 800d2e0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d2e4:	f112 0f14 	cmn.w	r2, #20
 800d2e8:	9308      	str	r3, [sp, #32]
 800d2ea:	9101      	str	r1, [sp, #4]
 800d2ec:	4bc4      	ldr	r3, [pc, #784]	; (800d600 <__kernel_rem_pio2+0x328>)
 800d2ee:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d2f0:	900b      	str	r0, [sp, #44]	; 0x2c
 800d2f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d2f6:	9302      	str	r3, [sp, #8]
 800d2f8:	9b08      	ldr	r3, [sp, #32]
 800d2fa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d2fe:	bfa8      	it	ge
 800d300:	1ed4      	subge	r4, r2, #3
 800d302:	9306      	str	r3, [sp, #24]
 800d304:	bfb2      	itee	lt
 800d306:	2400      	movlt	r4, #0
 800d308:	2318      	movge	r3, #24
 800d30a:	fb94 f4f3 	sdivge	r4, r4, r3
 800d30e:	f06f 0317 	mvn.w	r3, #23
 800d312:	fb04 3303 	mla	r3, r4, r3, r3
 800d316:	eb03 0a02 	add.w	sl, r3, r2
 800d31a:	9b02      	ldr	r3, [sp, #8]
 800d31c:	9a06      	ldr	r2, [sp, #24]
 800d31e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800d5f0 <__kernel_rem_pio2+0x318>
 800d322:	eb03 0802 	add.w	r8, r3, r2
 800d326:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d328:	1aa7      	subs	r7, r4, r2
 800d32a:	ae22      	add	r6, sp, #136	; 0x88
 800d32c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d330:	2500      	movs	r5, #0
 800d332:	4545      	cmp	r5, r8
 800d334:	dd13      	ble.n	800d35e <__kernel_rem_pio2+0x86>
 800d336:	9b08      	ldr	r3, [sp, #32]
 800d338:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800d5f0 <__kernel_rem_pio2+0x318>
 800d33c:	aa22      	add	r2, sp, #136	; 0x88
 800d33e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d342:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800d346:	f04f 0800 	mov.w	r8, #0
 800d34a:	9b02      	ldr	r3, [sp, #8]
 800d34c:	4598      	cmp	r8, r3
 800d34e:	dc2f      	bgt.n	800d3b0 <__kernel_rem_pio2+0xd8>
 800d350:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d354:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800d358:	462f      	mov	r7, r5
 800d35a:	2600      	movs	r6, #0
 800d35c:	e01b      	b.n	800d396 <__kernel_rem_pio2+0xbe>
 800d35e:	42ef      	cmn	r7, r5
 800d360:	d407      	bmi.n	800d372 <__kernel_rem_pio2+0x9a>
 800d362:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d366:	f7f3 f8fd 	bl	8000564 <__aeabi_i2d>
 800d36a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d36e:	3501      	adds	r5, #1
 800d370:	e7df      	b.n	800d332 <__kernel_rem_pio2+0x5a>
 800d372:	ec51 0b18 	vmov	r0, r1, d8
 800d376:	e7f8      	b.n	800d36a <__kernel_rem_pio2+0x92>
 800d378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d37c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d380:	f7f3 f95a 	bl	8000638 <__aeabi_dmul>
 800d384:	4602      	mov	r2, r0
 800d386:	460b      	mov	r3, r1
 800d388:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d38c:	f7f2 ff9e 	bl	80002cc <__adddf3>
 800d390:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d394:	3601      	adds	r6, #1
 800d396:	9b06      	ldr	r3, [sp, #24]
 800d398:	429e      	cmp	r6, r3
 800d39a:	f1a7 0708 	sub.w	r7, r7, #8
 800d39e:	ddeb      	ble.n	800d378 <__kernel_rem_pio2+0xa0>
 800d3a0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d3a4:	f108 0801 	add.w	r8, r8, #1
 800d3a8:	ecab 7b02 	vstmia	fp!, {d7}
 800d3ac:	3508      	adds	r5, #8
 800d3ae:	e7cc      	b.n	800d34a <__kernel_rem_pio2+0x72>
 800d3b0:	9b02      	ldr	r3, [sp, #8]
 800d3b2:	aa0e      	add	r2, sp, #56	; 0x38
 800d3b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d3b8:	930d      	str	r3, [sp, #52]	; 0x34
 800d3ba:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d3bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d3c0:	9c02      	ldr	r4, [sp, #8]
 800d3c2:	930c      	str	r3, [sp, #48]	; 0x30
 800d3c4:	00e3      	lsls	r3, r4, #3
 800d3c6:	930a      	str	r3, [sp, #40]	; 0x28
 800d3c8:	ab9a      	add	r3, sp, #616	; 0x268
 800d3ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d3ce:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d3d2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800d3d6:	ab72      	add	r3, sp, #456	; 0x1c8
 800d3d8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d3dc:	46c3      	mov	fp, r8
 800d3de:	46a1      	mov	r9, r4
 800d3e0:	f1b9 0f00 	cmp.w	r9, #0
 800d3e4:	f1a5 0508 	sub.w	r5, r5, #8
 800d3e8:	dc77      	bgt.n	800d4da <__kernel_rem_pio2+0x202>
 800d3ea:	ec47 6b10 	vmov	d0, r6, r7
 800d3ee:	4650      	mov	r0, sl
 800d3f0:	f000 fc0a 	bl	800dc08 <scalbn>
 800d3f4:	ec57 6b10 	vmov	r6, r7, d0
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d3fe:	ee10 0a10 	vmov	r0, s0
 800d402:	4639      	mov	r1, r7
 800d404:	f7f3 f918 	bl	8000638 <__aeabi_dmul>
 800d408:	ec41 0b10 	vmov	d0, r0, r1
 800d40c:	f000 fb74 	bl	800daf8 <floor>
 800d410:	4b7c      	ldr	r3, [pc, #496]	; (800d604 <__kernel_rem_pio2+0x32c>)
 800d412:	ec51 0b10 	vmov	r0, r1, d0
 800d416:	2200      	movs	r2, #0
 800d418:	f7f3 f90e 	bl	8000638 <__aeabi_dmul>
 800d41c:	4602      	mov	r2, r0
 800d41e:	460b      	mov	r3, r1
 800d420:	4630      	mov	r0, r6
 800d422:	4639      	mov	r1, r7
 800d424:	f7f2 ff50 	bl	80002c8 <__aeabi_dsub>
 800d428:	460f      	mov	r7, r1
 800d42a:	4606      	mov	r6, r0
 800d42c:	f7f3 fbb4 	bl	8000b98 <__aeabi_d2iz>
 800d430:	9004      	str	r0, [sp, #16]
 800d432:	f7f3 f897 	bl	8000564 <__aeabi_i2d>
 800d436:	4602      	mov	r2, r0
 800d438:	460b      	mov	r3, r1
 800d43a:	4630      	mov	r0, r6
 800d43c:	4639      	mov	r1, r7
 800d43e:	f7f2 ff43 	bl	80002c8 <__aeabi_dsub>
 800d442:	f1ba 0f00 	cmp.w	sl, #0
 800d446:	4606      	mov	r6, r0
 800d448:	460f      	mov	r7, r1
 800d44a:	dd6d      	ble.n	800d528 <__kernel_rem_pio2+0x250>
 800d44c:	1e62      	subs	r2, r4, #1
 800d44e:	ab0e      	add	r3, sp, #56	; 0x38
 800d450:	9d04      	ldr	r5, [sp, #16]
 800d452:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d456:	f1ca 0118 	rsb	r1, sl, #24
 800d45a:	fa40 f301 	asr.w	r3, r0, r1
 800d45e:	441d      	add	r5, r3
 800d460:	408b      	lsls	r3, r1
 800d462:	1ac0      	subs	r0, r0, r3
 800d464:	ab0e      	add	r3, sp, #56	; 0x38
 800d466:	9504      	str	r5, [sp, #16]
 800d468:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d46c:	f1ca 0317 	rsb	r3, sl, #23
 800d470:	fa40 fb03 	asr.w	fp, r0, r3
 800d474:	f1bb 0f00 	cmp.w	fp, #0
 800d478:	dd65      	ble.n	800d546 <__kernel_rem_pio2+0x26e>
 800d47a:	9b04      	ldr	r3, [sp, #16]
 800d47c:	2200      	movs	r2, #0
 800d47e:	3301      	adds	r3, #1
 800d480:	9304      	str	r3, [sp, #16]
 800d482:	4615      	mov	r5, r2
 800d484:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d488:	4294      	cmp	r4, r2
 800d48a:	f300 809c 	bgt.w	800d5c6 <__kernel_rem_pio2+0x2ee>
 800d48e:	f1ba 0f00 	cmp.w	sl, #0
 800d492:	dd07      	ble.n	800d4a4 <__kernel_rem_pio2+0x1cc>
 800d494:	f1ba 0f01 	cmp.w	sl, #1
 800d498:	f000 80c0 	beq.w	800d61c <__kernel_rem_pio2+0x344>
 800d49c:	f1ba 0f02 	cmp.w	sl, #2
 800d4a0:	f000 80c6 	beq.w	800d630 <__kernel_rem_pio2+0x358>
 800d4a4:	f1bb 0f02 	cmp.w	fp, #2
 800d4a8:	d14d      	bne.n	800d546 <__kernel_rem_pio2+0x26e>
 800d4aa:	4632      	mov	r2, r6
 800d4ac:	463b      	mov	r3, r7
 800d4ae:	4956      	ldr	r1, [pc, #344]	; (800d608 <__kernel_rem_pio2+0x330>)
 800d4b0:	2000      	movs	r0, #0
 800d4b2:	f7f2 ff09 	bl	80002c8 <__aeabi_dsub>
 800d4b6:	4606      	mov	r6, r0
 800d4b8:	460f      	mov	r7, r1
 800d4ba:	2d00      	cmp	r5, #0
 800d4bc:	d043      	beq.n	800d546 <__kernel_rem_pio2+0x26e>
 800d4be:	4650      	mov	r0, sl
 800d4c0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800d5f8 <__kernel_rem_pio2+0x320>
 800d4c4:	f000 fba0 	bl	800dc08 <scalbn>
 800d4c8:	4630      	mov	r0, r6
 800d4ca:	4639      	mov	r1, r7
 800d4cc:	ec53 2b10 	vmov	r2, r3, d0
 800d4d0:	f7f2 fefa 	bl	80002c8 <__aeabi_dsub>
 800d4d4:	4606      	mov	r6, r0
 800d4d6:	460f      	mov	r7, r1
 800d4d8:	e035      	b.n	800d546 <__kernel_rem_pio2+0x26e>
 800d4da:	4b4c      	ldr	r3, [pc, #304]	; (800d60c <__kernel_rem_pio2+0x334>)
 800d4dc:	2200      	movs	r2, #0
 800d4de:	4630      	mov	r0, r6
 800d4e0:	4639      	mov	r1, r7
 800d4e2:	f7f3 f8a9 	bl	8000638 <__aeabi_dmul>
 800d4e6:	f7f3 fb57 	bl	8000b98 <__aeabi_d2iz>
 800d4ea:	f7f3 f83b 	bl	8000564 <__aeabi_i2d>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	ec43 2b18 	vmov	d8, r2, r3
 800d4f6:	4b46      	ldr	r3, [pc, #280]	; (800d610 <__kernel_rem_pio2+0x338>)
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	f7f3 f89d 	bl	8000638 <__aeabi_dmul>
 800d4fe:	4602      	mov	r2, r0
 800d500:	460b      	mov	r3, r1
 800d502:	4630      	mov	r0, r6
 800d504:	4639      	mov	r1, r7
 800d506:	f7f2 fedf 	bl	80002c8 <__aeabi_dsub>
 800d50a:	f7f3 fb45 	bl	8000b98 <__aeabi_d2iz>
 800d50e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d512:	f84b 0b04 	str.w	r0, [fp], #4
 800d516:	ec51 0b18 	vmov	r0, r1, d8
 800d51a:	f7f2 fed7 	bl	80002cc <__adddf3>
 800d51e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800d522:	4606      	mov	r6, r0
 800d524:	460f      	mov	r7, r1
 800d526:	e75b      	b.n	800d3e0 <__kernel_rem_pio2+0x108>
 800d528:	d106      	bne.n	800d538 <__kernel_rem_pio2+0x260>
 800d52a:	1e63      	subs	r3, r4, #1
 800d52c:	aa0e      	add	r2, sp, #56	; 0x38
 800d52e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d532:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800d536:	e79d      	b.n	800d474 <__kernel_rem_pio2+0x19c>
 800d538:	4b36      	ldr	r3, [pc, #216]	; (800d614 <__kernel_rem_pio2+0x33c>)
 800d53a:	2200      	movs	r2, #0
 800d53c:	f7f3 fb02 	bl	8000b44 <__aeabi_dcmpge>
 800d540:	2800      	cmp	r0, #0
 800d542:	d13d      	bne.n	800d5c0 <__kernel_rem_pio2+0x2e8>
 800d544:	4683      	mov	fp, r0
 800d546:	2200      	movs	r2, #0
 800d548:	2300      	movs	r3, #0
 800d54a:	4630      	mov	r0, r6
 800d54c:	4639      	mov	r1, r7
 800d54e:	f7f3 fadb 	bl	8000b08 <__aeabi_dcmpeq>
 800d552:	2800      	cmp	r0, #0
 800d554:	f000 80c0 	beq.w	800d6d8 <__kernel_rem_pio2+0x400>
 800d558:	1e65      	subs	r5, r4, #1
 800d55a:	462b      	mov	r3, r5
 800d55c:	2200      	movs	r2, #0
 800d55e:	9902      	ldr	r1, [sp, #8]
 800d560:	428b      	cmp	r3, r1
 800d562:	da6c      	bge.n	800d63e <__kernel_rem_pio2+0x366>
 800d564:	2a00      	cmp	r2, #0
 800d566:	f000 8089 	beq.w	800d67c <__kernel_rem_pio2+0x3a4>
 800d56a:	ab0e      	add	r3, sp, #56	; 0x38
 800d56c:	f1aa 0a18 	sub.w	sl, sl, #24
 800d570:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d574:	2b00      	cmp	r3, #0
 800d576:	f000 80ad 	beq.w	800d6d4 <__kernel_rem_pio2+0x3fc>
 800d57a:	4650      	mov	r0, sl
 800d57c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800d5f8 <__kernel_rem_pio2+0x320>
 800d580:	f000 fb42 	bl	800dc08 <scalbn>
 800d584:	ab9a      	add	r3, sp, #616	; 0x268
 800d586:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d58a:	ec57 6b10 	vmov	r6, r7, d0
 800d58e:	00ec      	lsls	r4, r5, #3
 800d590:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800d594:	46aa      	mov	sl, r5
 800d596:	f1ba 0f00 	cmp.w	sl, #0
 800d59a:	f280 80d6 	bge.w	800d74a <__kernel_rem_pio2+0x472>
 800d59e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800d5f0 <__kernel_rem_pio2+0x318>
 800d5a2:	462e      	mov	r6, r5
 800d5a4:	2e00      	cmp	r6, #0
 800d5a6:	f2c0 8104 	blt.w	800d7b2 <__kernel_rem_pio2+0x4da>
 800d5aa:	ab72      	add	r3, sp, #456	; 0x1c8
 800d5ac:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d5b0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800d618 <__kernel_rem_pio2+0x340>
 800d5b4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800d5b8:	f04f 0800 	mov.w	r8, #0
 800d5bc:	1baf      	subs	r7, r5, r6
 800d5be:	e0ea      	b.n	800d796 <__kernel_rem_pio2+0x4be>
 800d5c0:	f04f 0b02 	mov.w	fp, #2
 800d5c4:	e759      	b.n	800d47a <__kernel_rem_pio2+0x1a2>
 800d5c6:	f8d8 3000 	ldr.w	r3, [r8]
 800d5ca:	b955      	cbnz	r5, 800d5e2 <__kernel_rem_pio2+0x30a>
 800d5cc:	b123      	cbz	r3, 800d5d8 <__kernel_rem_pio2+0x300>
 800d5ce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d5d2:	f8c8 3000 	str.w	r3, [r8]
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	3201      	adds	r2, #1
 800d5da:	f108 0804 	add.w	r8, r8, #4
 800d5de:	461d      	mov	r5, r3
 800d5e0:	e752      	b.n	800d488 <__kernel_rem_pio2+0x1b0>
 800d5e2:	1acb      	subs	r3, r1, r3
 800d5e4:	f8c8 3000 	str.w	r3, [r8]
 800d5e8:	462b      	mov	r3, r5
 800d5ea:	e7f5      	b.n	800d5d8 <__kernel_rem_pio2+0x300>
 800d5ec:	f3af 8000 	nop.w
	...
 800d5fc:	3ff00000 	.word	0x3ff00000
 800d600:	0800e9b8 	.word	0x0800e9b8
 800d604:	40200000 	.word	0x40200000
 800d608:	3ff00000 	.word	0x3ff00000
 800d60c:	3e700000 	.word	0x3e700000
 800d610:	41700000 	.word	0x41700000
 800d614:	3fe00000 	.word	0x3fe00000
 800d618:	0800e978 	.word	0x0800e978
 800d61c:	1e62      	subs	r2, r4, #1
 800d61e:	ab0e      	add	r3, sp, #56	; 0x38
 800d620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d624:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d628:	a90e      	add	r1, sp, #56	; 0x38
 800d62a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d62e:	e739      	b.n	800d4a4 <__kernel_rem_pio2+0x1cc>
 800d630:	1e62      	subs	r2, r4, #1
 800d632:	ab0e      	add	r3, sp, #56	; 0x38
 800d634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d638:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d63c:	e7f4      	b.n	800d628 <__kernel_rem_pio2+0x350>
 800d63e:	a90e      	add	r1, sp, #56	; 0x38
 800d640:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d644:	3b01      	subs	r3, #1
 800d646:	430a      	orrs	r2, r1
 800d648:	e789      	b.n	800d55e <__kernel_rem_pio2+0x286>
 800d64a:	3301      	adds	r3, #1
 800d64c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d650:	2900      	cmp	r1, #0
 800d652:	d0fa      	beq.n	800d64a <__kernel_rem_pio2+0x372>
 800d654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d656:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800d65a:	446a      	add	r2, sp
 800d65c:	3a98      	subs	r2, #152	; 0x98
 800d65e:	920a      	str	r2, [sp, #40]	; 0x28
 800d660:	9a08      	ldr	r2, [sp, #32]
 800d662:	18e3      	adds	r3, r4, r3
 800d664:	18a5      	adds	r5, r4, r2
 800d666:	aa22      	add	r2, sp, #136	; 0x88
 800d668:	f104 0801 	add.w	r8, r4, #1
 800d66c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800d670:	9304      	str	r3, [sp, #16]
 800d672:	9b04      	ldr	r3, [sp, #16]
 800d674:	4543      	cmp	r3, r8
 800d676:	da04      	bge.n	800d682 <__kernel_rem_pio2+0x3aa>
 800d678:	461c      	mov	r4, r3
 800d67a:	e6a3      	b.n	800d3c4 <__kernel_rem_pio2+0xec>
 800d67c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d67e:	2301      	movs	r3, #1
 800d680:	e7e4      	b.n	800d64c <__kernel_rem_pio2+0x374>
 800d682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d684:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d688:	f7f2 ff6c 	bl	8000564 <__aeabi_i2d>
 800d68c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d692:	46ab      	mov	fp, r5
 800d694:	461c      	mov	r4, r3
 800d696:	f04f 0900 	mov.w	r9, #0
 800d69a:	2600      	movs	r6, #0
 800d69c:	2700      	movs	r7, #0
 800d69e:	9b06      	ldr	r3, [sp, #24]
 800d6a0:	4599      	cmp	r9, r3
 800d6a2:	dd06      	ble.n	800d6b2 <__kernel_rem_pio2+0x3da>
 800d6a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6a6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d6aa:	f108 0801 	add.w	r8, r8, #1
 800d6ae:	930a      	str	r3, [sp, #40]	; 0x28
 800d6b0:	e7df      	b.n	800d672 <__kernel_rem_pio2+0x39a>
 800d6b2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d6b6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d6ba:	f7f2 ffbd 	bl	8000638 <__aeabi_dmul>
 800d6be:	4602      	mov	r2, r0
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	4630      	mov	r0, r6
 800d6c4:	4639      	mov	r1, r7
 800d6c6:	f7f2 fe01 	bl	80002cc <__adddf3>
 800d6ca:	f109 0901 	add.w	r9, r9, #1
 800d6ce:	4606      	mov	r6, r0
 800d6d0:	460f      	mov	r7, r1
 800d6d2:	e7e4      	b.n	800d69e <__kernel_rem_pio2+0x3c6>
 800d6d4:	3d01      	subs	r5, #1
 800d6d6:	e748      	b.n	800d56a <__kernel_rem_pio2+0x292>
 800d6d8:	ec47 6b10 	vmov	d0, r6, r7
 800d6dc:	f1ca 0000 	rsb	r0, sl, #0
 800d6e0:	f000 fa92 	bl	800dc08 <scalbn>
 800d6e4:	ec57 6b10 	vmov	r6, r7, d0
 800d6e8:	4ba0      	ldr	r3, [pc, #640]	; (800d96c <__kernel_rem_pio2+0x694>)
 800d6ea:	ee10 0a10 	vmov	r0, s0
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	4639      	mov	r1, r7
 800d6f2:	f7f3 fa27 	bl	8000b44 <__aeabi_dcmpge>
 800d6f6:	b1f8      	cbz	r0, 800d738 <__kernel_rem_pio2+0x460>
 800d6f8:	4b9d      	ldr	r3, [pc, #628]	; (800d970 <__kernel_rem_pio2+0x698>)
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	4630      	mov	r0, r6
 800d6fe:	4639      	mov	r1, r7
 800d700:	f7f2 ff9a 	bl	8000638 <__aeabi_dmul>
 800d704:	f7f3 fa48 	bl	8000b98 <__aeabi_d2iz>
 800d708:	4680      	mov	r8, r0
 800d70a:	f7f2 ff2b 	bl	8000564 <__aeabi_i2d>
 800d70e:	4b97      	ldr	r3, [pc, #604]	; (800d96c <__kernel_rem_pio2+0x694>)
 800d710:	2200      	movs	r2, #0
 800d712:	f7f2 ff91 	bl	8000638 <__aeabi_dmul>
 800d716:	460b      	mov	r3, r1
 800d718:	4602      	mov	r2, r0
 800d71a:	4639      	mov	r1, r7
 800d71c:	4630      	mov	r0, r6
 800d71e:	f7f2 fdd3 	bl	80002c8 <__aeabi_dsub>
 800d722:	f7f3 fa39 	bl	8000b98 <__aeabi_d2iz>
 800d726:	1c65      	adds	r5, r4, #1
 800d728:	ab0e      	add	r3, sp, #56	; 0x38
 800d72a:	f10a 0a18 	add.w	sl, sl, #24
 800d72e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d732:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d736:	e720      	b.n	800d57a <__kernel_rem_pio2+0x2a2>
 800d738:	4630      	mov	r0, r6
 800d73a:	4639      	mov	r1, r7
 800d73c:	f7f3 fa2c 	bl	8000b98 <__aeabi_d2iz>
 800d740:	ab0e      	add	r3, sp, #56	; 0x38
 800d742:	4625      	mov	r5, r4
 800d744:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d748:	e717      	b.n	800d57a <__kernel_rem_pio2+0x2a2>
 800d74a:	ab0e      	add	r3, sp, #56	; 0x38
 800d74c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800d750:	f7f2 ff08 	bl	8000564 <__aeabi_i2d>
 800d754:	4632      	mov	r2, r6
 800d756:	463b      	mov	r3, r7
 800d758:	f7f2 ff6e 	bl	8000638 <__aeabi_dmul>
 800d75c:	4b84      	ldr	r3, [pc, #528]	; (800d970 <__kernel_rem_pio2+0x698>)
 800d75e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800d762:	2200      	movs	r2, #0
 800d764:	4630      	mov	r0, r6
 800d766:	4639      	mov	r1, r7
 800d768:	f7f2 ff66 	bl	8000638 <__aeabi_dmul>
 800d76c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d770:	4606      	mov	r6, r0
 800d772:	460f      	mov	r7, r1
 800d774:	e70f      	b.n	800d596 <__kernel_rem_pio2+0x2be>
 800d776:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d77a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800d77e:	f7f2 ff5b 	bl	8000638 <__aeabi_dmul>
 800d782:	4602      	mov	r2, r0
 800d784:	460b      	mov	r3, r1
 800d786:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d78a:	f7f2 fd9f 	bl	80002cc <__adddf3>
 800d78e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d792:	f108 0801 	add.w	r8, r8, #1
 800d796:	9b02      	ldr	r3, [sp, #8]
 800d798:	4598      	cmp	r8, r3
 800d79a:	dc01      	bgt.n	800d7a0 <__kernel_rem_pio2+0x4c8>
 800d79c:	45b8      	cmp	r8, r7
 800d79e:	ddea      	ble.n	800d776 <__kernel_rem_pio2+0x49e>
 800d7a0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d7a4:	ab4a      	add	r3, sp, #296	; 0x128
 800d7a6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d7aa:	ed87 7b00 	vstr	d7, [r7]
 800d7ae:	3e01      	subs	r6, #1
 800d7b0:	e6f8      	b.n	800d5a4 <__kernel_rem_pio2+0x2cc>
 800d7b2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d7b4:	2b02      	cmp	r3, #2
 800d7b6:	dc0b      	bgt.n	800d7d0 <__kernel_rem_pio2+0x4f8>
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	dc35      	bgt.n	800d828 <__kernel_rem_pio2+0x550>
 800d7bc:	d059      	beq.n	800d872 <__kernel_rem_pio2+0x59a>
 800d7be:	9b04      	ldr	r3, [sp, #16]
 800d7c0:	f003 0007 	and.w	r0, r3, #7
 800d7c4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800d7c8:	ecbd 8b02 	vpop	{d8}
 800d7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7d0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d7d2:	2b03      	cmp	r3, #3
 800d7d4:	d1f3      	bne.n	800d7be <__kernel_rem_pio2+0x4e6>
 800d7d6:	ab4a      	add	r3, sp, #296	; 0x128
 800d7d8:	4423      	add	r3, r4
 800d7da:	9306      	str	r3, [sp, #24]
 800d7dc:	461c      	mov	r4, r3
 800d7de:	469a      	mov	sl, r3
 800d7e0:	9502      	str	r5, [sp, #8]
 800d7e2:	9b02      	ldr	r3, [sp, #8]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	f1aa 0a08 	sub.w	sl, sl, #8
 800d7ea:	dc6b      	bgt.n	800d8c4 <__kernel_rem_pio2+0x5ec>
 800d7ec:	46aa      	mov	sl, r5
 800d7ee:	f1ba 0f01 	cmp.w	sl, #1
 800d7f2:	f1a4 0408 	sub.w	r4, r4, #8
 800d7f6:	f300 8085 	bgt.w	800d904 <__kernel_rem_pio2+0x62c>
 800d7fa:	9c06      	ldr	r4, [sp, #24]
 800d7fc:	2000      	movs	r0, #0
 800d7fe:	3408      	adds	r4, #8
 800d800:	2100      	movs	r1, #0
 800d802:	2d01      	cmp	r5, #1
 800d804:	f300 809d 	bgt.w	800d942 <__kernel_rem_pio2+0x66a>
 800d808:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800d80c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800d810:	f1bb 0f00 	cmp.w	fp, #0
 800d814:	f040 809b 	bne.w	800d94e <__kernel_rem_pio2+0x676>
 800d818:	9b01      	ldr	r3, [sp, #4]
 800d81a:	e9c3 5600 	strd	r5, r6, [r3]
 800d81e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d822:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d826:	e7ca      	b.n	800d7be <__kernel_rem_pio2+0x4e6>
 800d828:	3408      	adds	r4, #8
 800d82a:	ab4a      	add	r3, sp, #296	; 0x128
 800d82c:	441c      	add	r4, r3
 800d82e:	462e      	mov	r6, r5
 800d830:	2000      	movs	r0, #0
 800d832:	2100      	movs	r1, #0
 800d834:	2e00      	cmp	r6, #0
 800d836:	da36      	bge.n	800d8a6 <__kernel_rem_pio2+0x5ce>
 800d838:	f1bb 0f00 	cmp.w	fp, #0
 800d83c:	d039      	beq.n	800d8b2 <__kernel_rem_pio2+0x5da>
 800d83e:	4602      	mov	r2, r0
 800d840:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d844:	9c01      	ldr	r4, [sp, #4]
 800d846:	e9c4 2300 	strd	r2, r3, [r4]
 800d84a:	4602      	mov	r2, r0
 800d84c:	460b      	mov	r3, r1
 800d84e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800d852:	f7f2 fd39 	bl	80002c8 <__aeabi_dsub>
 800d856:	ae4c      	add	r6, sp, #304	; 0x130
 800d858:	2401      	movs	r4, #1
 800d85a:	42a5      	cmp	r5, r4
 800d85c:	da2c      	bge.n	800d8b8 <__kernel_rem_pio2+0x5e0>
 800d85e:	f1bb 0f00 	cmp.w	fp, #0
 800d862:	d002      	beq.n	800d86a <__kernel_rem_pio2+0x592>
 800d864:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d868:	4619      	mov	r1, r3
 800d86a:	9b01      	ldr	r3, [sp, #4]
 800d86c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d870:	e7a5      	b.n	800d7be <__kernel_rem_pio2+0x4e6>
 800d872:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800d876:	eb0d 0403 	add.w	r4, sp, r3
 800d87a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d87e:	2000      	movs	r0, #0
 800d880:	2100      	movs	r1, #0
 800d882:	2d00      	cmp	r5, #0
 800d884:	da09      	bge.n	800d89a <__kernel_rem_pio2+0x5c2>
 800d886:	f1bb 0f00 	cmp.w	fp, #0
 800d88a:	d002      	beq.n	800d892 <__kernel_rem_pio2+0x5ba>
 800d88c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d890:	4619      	mov	r1, r3
 800d892:	9b01      	ldr	r3, [sp, #4]
 800d894:	e9c3 0100 	strd	r0, r1, [r3]
 800d898:	e791      	b.n	800d7be <__kernel_rem_pio2+0x4e6>
 800d89a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d89e:	f7f2 fd15 	bl	80002cc <__adddf3>
 800d8a2:	3d01      	subs	r5, #1
 800d8a4:	e7ed      	b.n	800d882 <__kernel_rem_pio2+0x5aa>
 800d8a6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d8aa:	f7f2 fd0f 	bl	80002cc <__adddf3>
 800d8ae:	3e01      	subs	r6, #1
 800d8b0:	e7c0      	b.n	800d834 <__kernel_rem_pio2+0x55c>
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	460b      	mov	r3, r1
 800d8b6:	e7c5      	b.n	800d844 <__kernel_rem_pio2+0x56c>
 800d8b8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d8bc:	f7f2 fd06 	bl	80002cc <__adddf3>
 800d8c0:	3401      	adds	r4, #1
 800d8c2:	e7ca      	b.n	800d85a <__kernel_rem_pio2+0x582>
 800d8c4:	e9da 8900 	ldrd	r8, r9, [sl]
 800d8c8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d8cc:	9b02      	ldr	r3, [sp, #8]
 800d8ce:	3b01      	subs	r3, #1
 800d8d0:	9302      	str	r3, [sp, #8]
 800d8d2:	4632      	mov	r2, r6
 800d8d4:	463b      	mov	r3, r7
 800d8d6:	4640      	mov	r0, r8
 800d8d8:	4649      	mov	r1, r9
 800d8da:	f7f2 fcf7 	bl	80002cc <__adddf3>
 800d8de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	4640      	mov	r0, r8
 800d8e8:	4649      	mov	r1, r9
 800d8ea:	f7f2 fced 	bl	80002c8 <__aeabi_dsub>
 800d8ee:	4632      	mov	r2, r6
 800d8f0:	463b      	mov	r3, r7
 800d8f2:	f7f2 fceb 	bl	80002cc <__adddf3>
 800d8f6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800d8fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d8fe:	ed8a 7b00 	vstr	d7, [sl]
 800d902:	e76e      	b.n	800d7e2 <__kernel_rem_pio2+0x50a>
 800d904:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d908:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d90c:	4640      	mov	r0, r8
 800d90e:	4632      	mov	r2, r6
 800d910:	463b      	mov	r3, r7
 800d912:	4649      	mov	r1, r9
 800d914:	f7f2 fcda 	bl	80002cc <__adddf3>
 800d918:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d91c:	4602      	mov	r2, r0
 800d91e:	460b      	mov	r3, r1
 800d920:	4640      	mov	r0, r8
 800d922:	4649      	mov	r1, r9
 800d924:	f7f2 fcd0 	bl	80002c8 <__aeabi_dsub>
 800d928:	4632      	mov	r2, r6
 800d92a:	463b      	mov	r3, r7
 800d92c:	f7f2 fcce 	bl	80002cc <__adddf3>
 800d930:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d934:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d938:	ed84 7b00 	vstr	d7, [r4]
 800d93c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d940:	e755      	b.n	800d7ee <__kernel_rem_pio2+0x516>
 800d942:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d946:	f7f2 fcc1 	bl	80002cc <__adddf3>
 800d94a:	3d01      	subs	r5, #1
 800d94c:	e759      	b.n	800d802 <__kernel_rem_pio2+0x52a>
 800d94e:	9b01      	ldr	r3, [sp, #4]
 800d950:	9a01      	ldr	r2, [sp, #4]
 800d952:	601d      	str	r5, [r3, #0]
 800d954:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d958:	605c      	str	r4, [r3, #4]
 800d95a:	609f      	str	r7, [r3, #8]
 800d95c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d960:	60d3      	str	r3, [r2, #12]
 800d962:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d966:	6110      	str	r0, [r2, #16]
 800d968:	6153      	str	r3, [r2, #20]
 800d96a:	e728      	b.n	800d7be <__kernel_rem_pio2+0x4e6>
 800d96c:	41700000 	.word	0x41700000
 800d970:	3e700000 	.word	0x3e700000
 800d974:	00000000 	.word	0x00000000

0800d978 <__kernel_sin>:
 800d978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d97c:	ed2d 8b04 	vpush	{d8-d9}
 800d980:	eeb0 8a41 	vmov.f32	s16, s2
 800d984:	eef0 8a61 	vmov.f32	s17, s3
 800d988:	ec55 4b10 	vmov	r4, r5, d0
 800d98c:	b083      	sub	sp, #12
 800d98e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d992:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d996:	9001      	str	r0, [sp, #4]
 800d998:	da06      	bge.n	800d9a8 <__kernel_sin+0x30>
 800d99a:	ee10 0a10 	vmov	r0, s0
 800d99e:	4629      	mov	r1, r5
 800d9a0:	f7f3 f8fa 	bl	8000b98 <__aeabi_d2iz>
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	d051      	beq.n	800da4c <__kernel_sin+0xd4>
 800d9a8:	4622      	mov	r2, r4
 800d9aa:	462b      	mov	r3, r5
 800d9ac:	4620      	mov	r0, r4
 800d9ae:	4629      	mov	r1, r5
 800d9b0:	f7f2 fe42 	bl	8000638 <__aeabi_dmul>
 800d9b4:	4682      	mov	sl, r0
 800d9b6:	468b      	mov	fp, r1
 800d9b8:	4602      	mov	r2, r0
 800d9ba:	460b      	mov	r3, r1
 800d9bc:	4620      	mov	r0, r4
 800d9be:	4629      	mov	r1, r5
 800d9c0:	f7f2 fe3a 	bl	8000638 <__aeabi_dmul>
 800d9c4:	a341      	add	r3, pc, #260	; (adr r3, 800dacc <__kernel_sin+0x154>)
 800d9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ca:	4680      	mov	r8, r0
 800d9cc:	4689      	mov	r9, r1
 800d9ce:	4650      	mov	r0, sl
 800d9d0:	4659      	mov	r1, fp
 800d9d2:	f7f2 fe31 	bl	8000638 <__aeabi_dmul>
 800d9d6:	a33f      	add	r3, pc, #252	; (adr r3, 800dad4 <__kernel_sin+0x15c>)
 800d9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9dc:	f7f2 fc74 	bl	80002c8 <__aeabi_dsub>
 800d9e0:	4652      	mov	r2, sl
 800d9e2:	465b      	mov	r3, fp
 800d9e4:	f7f2 fe28 	bl	8000638 <__aeabi_dmul>
 800d9e8:	a33c      	add	r3, pc, #240	; (adr r3, 800dadc <__kernel_sin+0x164>)
 800d9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ee:	f7f2 fc6d 	bl	80002cc <__adddf3>
 800d9f2:	4652      	mov	r2, sl
 800d9f4:	465b      	mov	r3, fp
 800d9f6:	f7f2 fe1f 	bl	8000638 <__aeabi_dmul>
 800d9fa:	a33a      	add	r3, pc, #232	; (adr r3, 800dae4 <__kernel_sin+0x16c>)
 800d9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da00:	f7f2 fc62 	bl	80002c8 <__aeabi_dsub>
 800da04:	4652      	mov	r2, sl
 800da06:	465b      	mov	r3, fp
 800da08:	f7f2 fe16 	bl	8000638 <__aeabi_dmul>
 800da0c:	a337      	add	r3, pc, #220	; (adr r3, 800daec <__kernel_sin+0x174>)
 800da0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da12:	f7f2 fc5b 	bl	80002cc <__adddf3>
 800da16:	9b01      	ldr	r3, [sp, #4]
 800da18:	4606      	mov	r6, r0
 800da1a:	460f      	mov	r7, r1
 800da1c:	b9eb      	cbnz	r3, 800da5a <__kernel_sin+0xe2>
 800da1e:	4602      	mov	r2, r0
 800da20:	460b      	mov	r3, r1
 800da22:	4650      	mov	r0, sl
 800da24:	4659      	mov	r1, fp
 800da26:	f7f2 fe07 	bl	8000638 <__aeabi_dmul>
 800da2a:	a325      	add	r3, pc, #148	; (adr r3, 800dac0 <__kernel_sin+0x148>)
 800da2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da30:	f7f2 fc4a 	bl	80002c8 <__aeabi_dsub>
 800da34:	4642      	mov	r2, r8
 800da36:	464b      	mov	r3, r9
 800da38:	f7f2 fdfe 	bl	8000638 <__aeabi_dmul>
 800da3c:	4602      	mov	r2, r0
 800da3e:	460b      	mov	r3, r1
 800da40:	4620      	mov	r0, r4
 800da42:	4629      	mov	r1, r5
 800da44:	f7f2 fc42 	bl	80002cc <__adddf3>
 800da48:	4604      	mov	r4, r0
 800da4a:	460d      	mov	r5, r1
 800da4c:	ec45 4b10 	vmov	d0, r4, r5
 800da50:	b003      	add	sp, #12
 800da52:	ecbd 8b04 	vpop	{d8-d9}
 800da56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da5a:	4b1b      	ldr	r3, [pc, #108]	; (800dac8 <__kernel_sin+0x150>)
 800da5c:	ec51 0b18 	vmov	r0, r1, d8
 800da60:	2200      	movs	r2, #0
 800da62:	f7f2 fde9 	bl	8000638 <__aeabi_dmul>
 800da66:	4632      	mov	r2, r6
 800da68:	ec41 0b19 	vmov	d9, r0, r1
 800da6c:	463b      	mov	r3, r7
 800da6e:	4640      	mov	r0, r8
 800da70:	4649      	mov	r1, r9
 800da72:	f7f2 fde1 	bl	8000638 <__aeabi_dmul>
 800da76:	4602      	mov	r2, r0
 800da78:	460b      	mov	r3, r1
 800da7a:	ec51 0b19 	vmov	r0, r1, d9
 800da7e:	f7f2 fc23 	bl	80002c8 <__aeabi_dsub>
 800da82:	4652      	mov	r2, sl
 800da84:	465b      	mov	r3, fp
 800da86:	f7f2 fdd7 	bl	8000638 <__aeabi_dmul>
 800da8a:	ec53 2b18 	vmov	r2, r3, d8
 800da8e:	f7f2 fc1b 	bl	80002c8 <__aeabi_dsub>
 800da92:	a30b      	add	r3, pc, #44	; (adr r3, 800dac0 <__kernel_sin+0x148>)
 800da94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da98:	4606      	mov	r6, r0
 800da9a:	460f      	mov	r7, r1
 800da9c:	4640      	mov	r0, r8
 800da9e:	4649      	mov	r1, r9
 800daa0:	f7f2 fdca 	bl	8000638 <__aeabi_dmul>
 800daa4:	4602      	mov	r2, r0
 800daa6:	460b      	mov	r3, r1
 800daa8:	4630      	mov	r0, r6
 800daaa:	4639      	mov	r1, r7
 800daac:	f7f2 fc0e 	bl	80002cc <__adddf3>
 800dab0:	4602      	mov	r2, r0
 800dab2:	460b      	mov	r3, r1
 800dab4:	4620      	mov	r0, r4
 800dab6:	4629      	mov	r1, r5
 800dab8:	f7f2 fc06 	bl	80002c8 <__aeabi_dsub>
 800dabc:	e7c4      	b.n	800da48 <__kernel_sin+0xd0>
 800dabe:	bf00      	nop
 800dac0:	55555549 	.word	0x55555549
 800dac4:	3fc55555 	.word	0x3fc55555
 800dac8:	3fe00000 	.word	0x3fe00000
 800dacc:	5acfd57c 	.word	0x5acfd57c
 800dad0:	3de5d93a 	.word	0x3de5d93a
 800dad4:	8a2b9ceb 	.word	0x8a2b9ceb
 800dad8:	3e5ae5e6 	.word	0x3e5ae5e6
 800dadc:	57b1fe7d 	.word	0x57b1fe7d
 800dae0:	3ec71de3 	.word	0x3ec71de3
 800dae4:	19c161d5 	.word	0x19c161d5
 800dae8:	3f2a01a0 	.word	0x3f2a01a0
 800daec:	1110f8a6 	.word	0x1110f8a6
 800daf0:	3f811111 	.word	0x3f811111
 800daf4:	00000000 	.word	0x00000000

0800daf8 <floor>:
 800daf8:	ec51 0b10 	vmov	r0, r1, d0
 800dafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db00:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800db04:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800db08:	2e13      	cmp	r6, #19
 800db0a:	ee10 5a10 	vmov	r5, s0
 800db0e:	ee10 8a10 	vmov	r8, s0
 800db12:	460c      	mov	r4, r1
 800db14:	dc32      	bgt.n	800db7c <floor+0x84>
 800db16:	2e00      	cmp	r6, #0
 800db18:	da14      	bge.n	800db44 <floor+0x4c>
 800db1a:	a333      	add	r3, pc, #204	; (adr r3, 800dbe8 <floor+0xf0>)
 800db1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db20:	f7f2 fbd4 	bl	80002cc <__adddf3>
 800db24:	2200      	movs	r2, #0
 800db26:	2300      	movs	r3, #0
 800db28:	f7f3 f816 	bl	8000b58 <__aeabi_dcmpgt>
 800db2c:	b138      	cbz	r0, 800db3e <floor+0x46>
 800db2e:	2c00      	cmp	r4, #0
 800db30:	da57      	bge.n	800dbe2 <floor+0xea>
 800db32:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800db36:	431d      	orrs	r5, r3
 800db38:	d001      	beq.n	800db3e <floor+0x46>
 800db3a:	4c2d      	ldr	r4, [pc, #180]	; (800dbf0 <floor+0xf8>)
 800db3c:	2500      	movs	r5, #0
 800db3e:	4621      	mov	r1, r4
 800db40:	4628      	mov	r0, r5
 800db42:	e025      	b.n	800db90 <floor+0x98>
 800db44:	4f2b      	ldr	r7, [pc, #172]	; (800dbf4 <floor+0xfc>)
 800db46:	4137      	asrs	r7, r6
 800db48:	ea01 0307 	and.w	r3, r1, r7
 800db4c:	4303      	orrs	r3, r0
 800db4e:	d01f      	beq.n	800db90 <floor+0x98>
 800db50:	a325      	add	r3, pc, #148	; (adr r3, 800dbe8 <floor+0xf0>)
 800db52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db56:	f7f2 fbb9 	bl	80002cc <__adddf3>
 800db5a:	2200      	movs	r2, #0
 800db5c:	2300      	movs	r3, #0
 800db5e:	f7f2 fffb 	bl	8000b58 <__aeabi_dcmpgt>
 800db62:	2800      	cmp	r0, #0
 800db64:	d0eb      	beq.n	800db3e <floor+0x46>
 800db66:	2c00      	cmp	r4, #0
 800db68:	bfbe      	ittt	lt
 800db6a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800db6e:	fa43 f606 	asrlt.w	r6, r3, r6
 800db72:	19a4      	addlt	r4, r4, r6
 800db74:	ea24 0407 	bic.w	r4, r4, r7
 800db78:	2500      	movs	r5, #0
 800db7a:	e7e0      	b.n	800db3e <floor+0x46>
 800db7c:	2e33      	cmp	r6, #51	; 0x33
 800db7e:	dd0b      	ble.n	800db98 <floor+0xa0>
 800db80:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800db84:	d104      	bne.n	800db90 <floor+0x98>
 800db86:	ee10 2a10 	vmov	r2, s0
 800db8a:	460b      	mov	r3, r1
 800db8c:	f7f2 fb9e 	bl	80002cc <__adddf3>
 800db90:	ec41 0b10 	vmov	d0, r0, r1
 800db94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db98:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800db9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dba0:	fa23 f707 	lsr.w	r7, r3, r7
 800dba4:	4207      	tst	r7, r0
 800dba6:	d0f3      	beq.n	800db90 <floor+0x98>
 800dba8:	a30f      	add	r3, pc, #60	; (adr r3, 800dbe8 <floor+0xf0>)
 800dbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbae:	f7f2 fb8d 	bl	80002cc <__adddf3>
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	f7f2 ffcf 	bl	8000b58 <__aeabi_dcmpgt>
 800dbba:	2800      	cmp	r0, #0
 800dbbc:	d0bf      	beq.n	800db3e <floor+0x46>
 800dbbe:	2c00      	cmp	r4, #0
 800dbc0:	da02      	bge.n	800dbc8 <floor+0xd0>
 800dbc2:	2e14      	cmp	r6, #20
 800dbc4:	d103      	bne.n	800dbce <floor+0xd6>
 800dbc6:	3401      	adds	r4, #1
 800dbc8:	ea25 0507 	bic.w	r5, r5, r7
 800dbcc:	e7b7      	b.n	800db3e <floor+0x46>
 800dbce:	2301      	movs	r3, #1
 800dbd0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800dbd4:	fa03 f606 	lsl.w	r6, r3, r6
 800dbd8:	4435      	add	r5, r6
 800dbda:	4545      	cmp	r5, r8
 800dbdc:	bf38      	it	cc
 800dbde:	18e4      	addcc	r4, r4, r3
 800dbe0:	e7f2      	b.n	800dbc8 <floor+0xd0>
 800dbe2:	2500      	movs	r5, #0
 800dbe4:	462c      	mov	r4, r5
 800dbe6:	e7aa      	b.n	800db3e <floor+0x46>
 800dbe8:	8800759c 	.word	0x8800759c
 800dbec:	7e37e43c 	.word	0x7e37e43c
 800dbf0:	bff00000 	.word	0xbff00000
 800dbf4:	000fffff 	.word	0x000fffff

0800dbf8 <nan>:
 800dbf8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dc00 <nan+0x8>
 800dbfc:	4770      	bx	lr
 800dbfe:	bf00      	nop
 800dc00:	00000000 	.word	0x00000000
 800dc04:	7ff80000 	.word	0x7ff80000

0800dc08 <scalbn>:
 800dc08:	b570      	push	{r4, r5, r6, lr}
 800dc0a:	ec55 4b10 	vmov	r4, r5, d0
 800dc0e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800dc12:	4606      	mov	r6, r0
 800dc14:	462b      	mov	r3, r5
 800dc16:	b99a      	cbnz	r2, 800dc40 <scalbn+0x38>
 800dc18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dc1c:	4323      	orrs	r3, r4
 800dc1e:	d036      	beq.n	800dc8e <scalbn+0x86>
 800dc20:	4b39      	ldr	r3, [pc, #228]	; (800dd08 <scalbn+0x100>)
 800dc22:	4629      	mov	r1, r5
 800dc24:	ee10 0a10 	vmov	r0, s0
 800dc28:	2200      	movs	r2, #0
 800dc2a:	f7f2 fd05 	bl	8000638 <__aeabi_dmul>
 800dc2e:	4b37      	ldr	r3, [pc, #220]	; (800dd0c <scalbn+0x104>)
 800dc30:	429e      	cmp	r6, r3
 800dc32:	4604      	mov	r4, r0
 800dc34:	460d      	mov	r5, r1
 800dc36:	da10      	bge.n	800dc5a <scalbn+0x52>
 800dc38:	a32b      	add	r3, pc, #172	; (adr r3, 800dce8 <scalbn+0xe0>)
 800dc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3e:	e03a      	b.n	800dcb6 <scalbn+0xae>
 800dc40:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800dc44:	428a      	cmp	r2, r1
 800dc46:	d10c      	bne.n	800dc62 <scalbn+0x5a>
 800dc48:	ee10 2a10 	vmov	r2, s0
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	4629      	mov	r1, r5
 800dc50:	f7f2 fb3c 	bl	80002cc <__adddf3>
 800dc54:	4604      	mov	r4, r0
 800dc56:	460d      	mov	r5, r1
 800dc58:	e019      	b.n	800dc8e <scalbn+0x86>
 800dc5a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dc5e:	460b      	mov	r3, r1
 800dc60:	3a36      	subs	r2, #54	; 0x36
 800dc62:	4432      	add	r2, r6
 800dc64:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800dc68:	428a      	cmp	r2, r1
 800dc6a:	dd08      	ble.n	800dc7e <scalbn+0x76>
 800dc6c:	2d00      	cmp	r5, #0
 800dc6e:	a120      	add	r1, pc, #128	; (adr r1, 800dcf0 <scalbn+0xe8>)
 800dc70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc74:	da1c      	bge.n	800dcb0 <scalbn+0xa8>
 800dc76:	a120      	add	r1, pc, #128	; (adr r1, 800dcf8 <scalbn+0xf0>)
 800dc78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc7c:	e018      	b.n	800dcb0 <scalbn+0xa8>
 800dc7e:	2a00      	cmp	r2, #0
 800dc80:	dd08      	ble.n	800dc94 <scalbn+0x8c>
 800dc82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dc86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dc8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dc8e:	ec45 4b10 	vmov	d0, r4, r5
 800dc92:	bd70      	pop	{r4, r5, r6, pc}
 800dc94:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dc98:	da19      	bge.n	800dcce <scalbn+0xc6>
 800dc9a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dc9e:	429e      	cmp	r6, r3
 800dca0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800dca4:	dd0a      	ble.n	800dcbc <scalbn+0xb4>
 800dca6:	a112      	add	r1, pc, #72	; (adr r1, 800dcf0 <scalbn+0xe8>)
 800dca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d1e2      	bne.n	800dc76 <scalbn+0x6e>
 800dcb0:	a30f      	add	r3, pc, #60	; (adr r3, 800dcf0 <scalbn+0xe8>)
 800dcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb6:	f7f2 fcbf 	bl	8000638 <__aeabi_dmul>
 800dcba:	e7cb      	b.n	800dc54 <scalbn+0x4c>
 800dcbc:	a10a      	add	r1, pc, #40	; (adr r1, 800dce8 <scalbn+0xe0>)
 800dcbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d0b8      	beq.n	800dc38 <scalbn+0x30>
 800dcc6:	a10e      	add	r1, pc, #56	; (adr r1, 800dd00 <scalbn+0xf8>)
 800dcc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dccc:	e7b4      	b.n	800dc38 <scalbn+0x30>
 800dcce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dcd2:	3236      	adds	r2, #54	; 0x36
 800dcd4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dcd8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dcdc:	4620      	mov	r0, r4
 800dcde:	4b0c      	ldr	r3, [pc, #48]	; (800dd10 <scalbn+0x108>)
 800dce0:	2200      	movs	r2, #0
 800dce2:	e7e8      	b.n	800dcb6 <scalbn+0xae>
 800dce4:	f3af 8000 	nop.w
 800dce8:	c2f8f359 	.word	0xc2f8f359
 800dcec:	01a56e1f 	.word	0x01a56e1f
 800dcf0:	8800759c 	.word	0x8800759c
 800dcf4:	7e37e43c 	.word	0x7e37e43c
 800dcf8:	8800759c 	.word	0x8800759c
 800dcfc:	fe37e43c 	.word	0xfe37e43c
 800dd00:	c2f8f359 	.word	0xc2f8f359
 800dd04:	81a56e1f 	.word	0x81a56e1f
 800dd08:	43500000 	.word	0x43500000
 800dd0c:	ffff3cb0 	.word	0xffff3cb0
 800dd10:	3c900000 	.word	0x3c900000

0800dd14 <_init>:
 800dd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd16:	bf00      	nop
 800dd18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd1a:	bc08      	pop	{r3}
 800dd1c:	469e      	mov	lr, r3
 800dd1e:	4770      	bx	lr

0800dd20 <_fini>:
 800dd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd22:	bf00      	nop
 800dd24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd26:	bc08      	pop	{r3}
 800dd28:	469e      	mov	lr, r3
 800dd2a:	4770      	bx	lr
