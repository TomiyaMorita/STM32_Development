
UART3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003078  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003200  08003200  00013200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003238  08003238  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003238  08003238  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003238  08003238  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003238  08003238  00013238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800323c  0800323c  0001323c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000a4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b0  200000b0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a028  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000177a  00000000  00000000  0002a064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000700  00000000  00000000  0002b7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000678  00000000  00000000  0002bee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a5a4  00000000  00000000  0002c558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009b74  00000000  00000000  00046afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a8a6  00000000  00000000  00050670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000eaf16  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b48  00000000  00000000  000eaf68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080031e8 	.word	0x080031e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080031e8 	.word	0x080031e8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 f9af 	bl	8000530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f817 	bl	8000204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f887 	bl	80002e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001da:	f000 f855 	bl	8000288 <MX_USART2_UART_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_UART_Receive(&huart2,(uint8_t *)rxbuf,sizeof(rxbuf),10)==HAL_OK){
 80001de:	1d39      	adds	r1, r7, #4
 80001e0:	230a      	movs	r3, #10
 80001e2:	2201      	movs	r2, #1
 80001e4:	4806      	ldr	r0, [pc, #24]	; (8000200 <main+0x38>)
 80001e6:	f002 f871 	bl	80022cc <HAL_UART_Receive>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d1f6      	bne.n	80001de <main+0x16>
		  HAL_UART_Transmit(&huart2, (uint8_t *)rxbuf, sizeof(rxbuf), 100);
 80001f0:	1d39      	adds	r1, r7, #4
 80001f2:	2364      	movs	r3, #100	; 0x64
 80001f4:	2201      	movs	r2, #1
 80001f6:	4802      	ldr	r0, [pc, #8]	; (8000200 <main+0x38>)
 80001f8:	f001 ffd4 	bl	80021a4 <HAL_UART_Transmit>
	  if(HAL_UART_Receive(&huart2,(uint8_t *)rxbuf,sizeof(rxbuf),10)==HAL_OK){
 80001fc:	e7ef      	b.n	80001de <main+0x16>
 80001fe:	bf00      	nop
 8000200:	20000028 	.word	0x20000028

08000204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b090      	sub	sp, #64	; 0x40
 8000208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020a:	f107 0318 	add.w	r3, r7, #24
 800020e:	2228      	movs	r2, #40	; 0x28
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f002 ffe0 	bl	80031d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]
 8000224:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000226:	2302      	movs	r3, #2
 8000228:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022a:	2301      	movs	r3, #1
 800022c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800022e:	2310      	movs	r3, #16
 8000230:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000232:	2302      	movs	r3, #2
 8000234:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000236:	2300      	movs	r3, #0
 8000238:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800023a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800023e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000240:	f107 0318 	add.w	r3, r7, #24
 8000244:	4618      	mov	r0, r3
 8000246:	f000 fceb 	bl	8000c20 <HAL_RCC_OscConfig>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000250:	f000 f888 	bl	8000364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000254:	230f      	movs	r3, #15
 8000256:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000258:	2302      	movs	r3, #2
 800025a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	2102      	movs	r1, #2
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fd14 	bl	8001c9c <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800027a:	f000 f873 	bl	8000364 <Error_Handler>
  }
}
 800027e:	bf00      	nop
 8000280:	3740      	adds	r7, #64	; 0x40
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800028c:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <MX_USART2_UART_Init+0x58>)
 800028e:	4a15      	ldr	r2, [pc, #84]	; (80002e4 <MX_USART2_UART_Init+0x5c>)
 8000290:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000292:	4b13      	ldr	r3, [pc, #76]	; (80002e0 <MX_USART2_UART_Init+0x58>)
 8000294:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000298:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800029a:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <MX_USART2_UART_Init+0x58>)
 800029c:	2200      	movs	r2, #0
 800029e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002a0:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <MX_USART2_UART_Init+0x58>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <MX_USART2_UART_Init+0x58>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002ac:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <MX_USART2_UART_Init+0x58>)
 80002ae:	220c      	movs	r2, #12
 80002b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002b2:	4b0b      	ldr	r3, [pc, #44]	; (80002e0 <MX_USART2_UART_Init+0x58>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002b8:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <MX_USART2_UART_Init+0x58>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002be:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <MX_USART2_UART_Init+0x58>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <MX_USART2_UART_Init+0x58>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002ca:	4805      	ldr	r0, [pc, #20]	; (80002e0 <MX_USART2_UART_Init+0x58>)
 80002cc:	f001 ff1c 	bl	8002108 <HAL_UART_Init>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80002d6:	f000 f845 	bl	8000364 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	20000028 	.word	0x20000028
 80002e4:	40004400 	.word	0x40004400

080002e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b088      	sub	sp, #32
 80002ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ee:	f107 030c 	add.w	r3, r7, #12
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]
 80002fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fe:	4b17      	ldr	r3, [pc, #92]	; (800035c <MX_GPIO_Init+0x74>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	4a16      	ldr	r2, [pc, #88]	; (800035c <MX_GPIO_Init+0x74>)
 8000304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000308:	6153      	str	r3, [r2, #20]
 800030a:	4b14      	ldr	r3, [pc, #80]	; (800035c <MX_GPIO_Init+0x74>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000312:	60bb      	str	r3, [r7, #8]
 8000314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000316:	4b11      	ldr	r3, [pc, #68]	; (800035c <MX_GPIO_Init+0x74>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	4a10      	ldr	r2, [pc, #64]	; (800035c <MX_GPIO_Init+0x74>)
 800031c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000320:	6153      	str	r3, [r2, #20]
 8000322:	4b0e      	ldr	r3, [pc, #56]	; (800035c <MX_GPIO_Init+0x74>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800032a:	607b      	str	r3, [r7, #4]
 800032c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	2108      	movs	r1, #8
 8000332:	480b      	ldr	r0, [pc, #44]	; (8000360 <MX_GPIO_Init+0x78>)
 8000334:	f000 fc5c 	bl	8000bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000338:	2308      	movs	r3, #8
 800033a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033c:	2301      	movs	r3, #1
 800033e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000344:	2300      	movs	r3, #0
 8000346:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000348:	f107 030c 	add.w	r3, r7, #12
 800034c:	4619      	mov	r1, r3
 800034e:	4804      	ldr	r0, [pc, #16]	; (8000360 <MX_GPIO_Init+0x78>)
 8000350:	f000 fadc 	bl	800090c <HAL_GPIO_Init>

}
 8000354:	bf00      	nop
 8000356:	3720      	adds	r7, #32
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	40021000 	.word	0x40021000
 8000360:	48000400 	.word	0x48000400

08000364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000368:	b672      	cpsid	i
}
 800036a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800036c:	e7fe      	b.n	800036c <Error_Handler+0x8>
	...

08000370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000376:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <HAL_MspInit+0x44>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a0e      	ldr	r2, [pc, #56]	; (80003b4 <HAL_MspInit+0x44>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6193      	str	r3, [r2, #24]
 8000382:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <HAL_MspInit+0x44>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038e:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <HAL_MspInit+0x44>)
 8000390:	69db      	ldr	r3, [r3, #28]
 8000392:	4a08      	ldr	r2, [pc, #32]	; (80003b4 <HAL_MspInit+0x44>)
 8000394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000398:	61d3      	str	r3, [r2, #28]
 800039a:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <HAL_MspInit+0x44>)
 800039c:	69db      	ldr	r3, [r3, #28]
 800039e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003a2:	603b      	str	r3, [r7, #0]
 80003a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	40021000 	.word	0x40021000

080003b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b08a      	sub	sp, #40	; 0x28
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c0:	f107 0314 	add.w	r3, r7, #20
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
 80003cc:	60da      	str	r2, [r3, #12]
 80003ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a1c      	ldr	r2, [pc, #112]	; (8000448 <HAL_UART_MspInit+0x90>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d131      	bne.n	800043e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003da:	4b1c      	ldr	r3, [pc, #112]	; (800044c <HAL_UART_MspInit+0x94>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	4a1b      	ldr	r2, [pc, #108]	; (800044c <HAL_UART_MspInit+0x94>)
 80003e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e4:	61d3      	str	r3, [r2, #28]
 80003e6:	4b19      	ldr	r3, [pc, #100]	; (800044c <HAL_UART_MspInit+0x94>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ee:	613b      	str	r3, [r7, #16]
 80003f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f2:	4b16      	ldr	r3, [pc, #88]	; (800044c <HAL_UART_MspInit+0x94>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a15      	ldr	r2, [pc, #84]	; (800044c <HAL_UART_MspInit+0x94>)
 80003f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003fc:	6153      	str	r3, [r2, #20]
 80003fe:	4b13      	ldr	r3, [pc, #76]	; (800044c <HAL_UART_MspInit+0x94>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800040a:	f248 0304 	movw	r3, #32772	; 0x8004
 800040e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000410:	2302      	movs	r3, #2
 8000412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000418:	2303      	movs	r3, #3
 800041a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800041c:	2307      	movs	r3, #7
 800041e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000420:	f107 0314 	add.w	r3, r7, #20
 8000424:	4619      	mov	r1, r3
 8000426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042a:	f000 fa6f 	bl	800090c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800042e:	2200      	movs	r2, #0
 8000430:	2100      	movs	r1, #0
 8000432:	2026      	movs	r0, #38	; 0x26
 8000434:	f000 f9bd 	bl	80007b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000438:	2026      	movs	r0, #38	; 0x26
 800043a:	f000 f9d6 	bl	80007ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800043e:	bf00      	nop
 8000440:	3728      	adds	r7, #40	; 0x28
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40004400 	.word	0x40004400
 800044c:	40021000 	.word	0x40021000

08000450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000454:	e7fe      	b.n	8000454 <NMI_Handler+0x4>

08000456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800045a:	e7fe      	b.n	800045a <HardFault_Handler+0x4>

0800045c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000460:	e7fe      	b.n	8000460 <MemManage_Handler+0x4>

08000462 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000466:	e7fe      	b.n	8000466 <BusFault_Handler+0x4>

08000468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800046c:	e7fe      	b.n	800046c <UsageFault_Handler+0x4>

0800046e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr

0800048a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800049c:	f000 f88e 	bl	80005bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80004a8:	4802      	ldr	r0, [pc, #8]	; (80004b4 <USART2_IRQHandler+0x10>)
 80004aa:	f001 ffe1 	bl	8002470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20000028 	.word	0x20000028

080004b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <SystemInit+0x20>)
 80004be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004c2:	4a05      	ldr	r2, [pc, #20]	; (80004d8 <SystemInit+0x20>)
 80004c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	e000ed00 	.word	0xe000ed00

080004dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000514 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e0:	480d      	ldr	r0, [pc, #52]	; (8000518 <LoopForever+0x6>)
  ldr r1, =_edata
 80004e2:	490e      	ldr	r1, [pc, #56]	; (800051c <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e4:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <LoopForever+0xe>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e8:	e002      	b.n	80004f0 <LoopCopyDataInit>

080004ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ee:	3304      	adds	r3, #4

080004f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f4:	d3f9      	bcc.n	80004ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f6:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f8:	4c0b      	ldr	r4, [pc, #44]	; (8000528 <LoopForever+0x16>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004fc:	e001      	b.n	8000502 <LoopFillZerobss>

080004fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000500:	3204      	adds	r2, #4

08000502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000504:	d3fb      	bcc.n	80004fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000506:	f7ff ffd7 	bl	80004b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800050a:	f002 fe41 	bl	8003190 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800050e:	f7ff fe5b 	bl	80001c8 <main>

08000512 <LoopForever>:

LoopForever:
    b LoopForever
 8000512:	e7fe      	b.n	8000512 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000514:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000520:	08003240 	.word	0x08003240
  ldr r2, =_sbss
 8000524:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000528:	200000b0 	.word	0x200000b0

0800052c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800052c:	e7fe      	b.n	800052c <ADC1_2_IRQHandler>
	...

08000530 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <HAL_Init+0x28>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_Init+0x28>)
 800053a:	f043 0310 	orr.w	r3, r3, #16
 800053e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000540:	2003      	movs	r0, #3
 8000542:	f000 f92b 	bl	800079c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000546:	200f      	movs	r0, #15
 8000548:	f000 f808 	bl	800055c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800054c:	f7ff ff10 	bl	8000370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40022000 	.word	0x40022000

0800055c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_InitTick+0x54>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <HAL_InitTick+0x58>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4619      	mov	r1, r3
 800056e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000572:	fbb3 f3f1 	udiv	r3, r3, r1
 8000576:	fbb2 f3f3 	udiv	r3, r2, r3
 800057a:	4618      	mov	r0, r3
 800057c:	f000 f943 	bl	8000806 <HAL_SYSTICK_Config>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	e00e      	b.n	80005a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2b0f      	cmp	r3, #15
 800058e:	d80a      	bhi.n	80005a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000590:	2200      	movs	r2, #0
 8000592:	6879      	ldr	r1, [r7, #4]
 8000594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000598:	f000 f90b 	bl	80007b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <HAL_InitTick+0x5c>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80005a2:	2300      	movs	r3, #0
 80005a4:	e000      	b.n	80005a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a6:	2301      	movs	r3, #1
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000008 	.word	0x20000008
 80005b8:	20000004 	.word	0x20000004

080005bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x20>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <HAL_IncTick+0x24>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4413      	add	r3, r2
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <HAL_IncTick+0x24>)
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000008 	.word	0x20000008
 80005e0:	200000ac 	.word	0x200000ac

080005e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <HAL_GetTick+0x14>)
 80005ea:	681b      	ldr	r3, [r3, #0]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	200000ac 	.word	0x200000ac

080005fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <__NVIC_SetPriorityGrouping+0x44>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000618:	4013      	ands	r3, r2
 800061a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800062c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062e:	4a04      	ldr	r2, [pc, #16]	; (8000640 <__NVIC_SetPriorityGrouping+0x44>)
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	60d3      	str	r3, [r2, #12]
}
 8000634:	bf00      	nop
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <__NVIC_GetPriorityGrouping+0x18>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	f003 0307 	and.w	r3, r3, #7
}
 8000652:	4618      	mov	r0, r3
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	db0b      	blt.n	800068a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	f003 021f 	and.w	r2, r3, #31
 8000678:	4907      	ldr	r1, [pc, #28]	; (8000698 <__NVIC_EnableIRQ+0x38>)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	095b      	lsrs	r3, r3, #5
 8000680:	2001      	movs	r0, #1
 8000682:	fa00 f202 	lsl.w	r2, r0, r2
 8000686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000e100 	.word	0xe000e100

0800069c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	db0a      	blt.n	80006c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	490c      	ldr	r1, [pc, #48]	; (80006e8 <__NVIC_SetPriority+0x4c>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	0112      	lsls	r2, r2, #4
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	440b      	add	r3, r1
 80006c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c4:	e00a      	b.n	80006dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4908      	ldr	r1, [pc, #32]	; (80006ec <__NVIC_SetPriority+0x50>)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	f003 030f 	and.w	r3, r3, #15
 80006d2:	3b04      	subs	r3, #4
 80006d4:	0112      	lsls	r2, r2, #4
 80006d6:	b2d2      	uxtb	r2, r2
 80006d8:	440b      	add	r3, r1
 80006da:	761a      	strb	r2, [r3, #24]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000e100 	.word	0xe000e100
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b089      	sub	sp, #36	; 0x24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f003 0307 	and.w	r3, r3, #7
 8000702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	f1c3 0307 	rsb	r3, r3, #7
 800070a:	2b04      	cmp	r3, #4
 800070c:	bf28      	it	cs
 800070e:	2304      	movcs	r3, #4
 8000710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3304      	adds	r3, #4
 8000716:	2b06      	cmp	r3, #6
 8000718:	d902      	bls.n	8000720 <NVIC_EncodePriority+0x30>
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3b03      	subs	r3, #3
 800071e:	e000      	b.n	8000722 <NVIC_EncodePriority+0x32>
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	43da      	mvns	r2, r3
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	401a      	ands	r2, r3
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000738:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	43d9      	mvns	r1, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	4313      	orrs	r3, r2
         );
}
 800074a:	4618      	mov	r0, r3
 800074c:	3724      	adds	r7, #36	; 0x24
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000768:	d301      	bcc.n	800076e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076a:	2301      	movs	r3, #1
 800076c:	e00f      	b.n	800078e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <SysTick_Config+0x40>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000776:	210f      	movs	r1, #15
 8000778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800077c:	f7ff ff8e 	bl	800069c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <SysTick_Config+0x40>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <SysTick_Config+0x40>)
 8000788:	2207      	movs	r2, #7
 800078a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	e000e010 	.word	0xe000e010

0800079c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff29 	bl	80005fc <__NVIC_SetPriorityGrouping>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b086      	sub	sp, #24
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c4:	f7ff ff3e 	bl	8000644 <__NVIC_GetPriorityGrouping>
 80007c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	6978      	ldr	r0, [r7, #20]
 80007d0:	f7ff ff8e 	bl	80006f0 <NVIC_EncodePriority>
 80007d4:	4602      	mov	r2, r0
 80007d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff5d 	bl	800069c <__NVIC_SetPriority>
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff31 	bl	8000660 <__NVIC_EnableIRQ>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ffa2 	bl	8000758 <SysTick_Config>
 8000814:	4603      	mov	r3, r0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800081e:	b480      	push	{r7}
 8000820:	b083      	sub	sp, #12
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800082c:	2b02      	cmp	r3, #2
 800082e:	d008      	beq.n	8000842 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2204      	movs	r2, #4
 8000834:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2200      	movs	r2, #0
 800083a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	e020      	b.n	8000884 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f022 020e 	bic.w	r2, r2, #14
 8000850:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f022 0201 	bic.w	r2, r2, #1
 8000860:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800086a:	2101      	movs	r1, #1
 800086c:	fa01 f202 	lsl.w	r2, r1, r2
 8000870:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2201      	movs	r2, #1
 8000876:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2200      	movs	r2, #0
 800087e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000882:	2300      	movs	r3, #0
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000898:	2300      	movs	r3, #0
 800089a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d005      	beq.n	80008b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2204      	movs	r2, #4
 80008aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80008ac:	2301      	movs	r3, #1
 80008ae:	73fb      	strb	r3, [r7, #15]
 80008b0:	e027      	b.n	8000902 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f022 020e 	bic.w	r2, r2, #14
 80008c0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f022 0201 	bic.w	r2, r2, #1
 80008d0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008da:	2101      	movs	r1, #1
 80008dc:	fa01 f202 	lsl.w	r2, r1, r2
 80008e0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2201      	movs	r2, #1
 80008e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2200      	movs	r2, #0
 80008ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d003      	beq.n	8000902 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	4798      	blx	r3
    } 
  }
  return status;
 8000902:	7bfb      	ldrb	r3, [r7, #15]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800090c:	b480      	push	{r7}
 800090e:	b087      	sub	sp, #28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800091a:	e14e      	b.n	8000bba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	2101      	movs	r1, #1
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	fa01 f303 	lsl.w	r3, r1, r3
 8000928:	4013      	ands	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	2b00      	cmp	r3, #0
 8000930:	f000 8140 	beq.w	8000bb4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f003 0303 	and.w	r3, r3, #3
 800093c:	2b01      	cmp	r3, #1
 800093e:	d005      	beq.n	800094c <HAL_GPIO_Init+0x40>
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	f003 0303 	and.w	r3, r3, #3
 8000948:	2b02      	cmp	r3, #2
 800094a:	d130      	bne.n	80009ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	2203      	movs	r2, #3
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	68da      	ldr	r2, [r3, #12]
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4313      	orrs	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000982:	2201      	movs	r2, #1
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43db      	mvns	r3, r3
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	4013      	ands	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	091b      	lsrs	r3, r3, #4
 8000998:	f003 0201 	and.w	r2, r3, #1
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	f003 0303 	and.w	r3, r3, #3
 80009b6:	2b03      	cmp	r3, #3
 80009b8:	d017      	beq.n	80009ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	2203      	movs	r2, #3
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43db      	mvns	r3, r3
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	4013      	ands	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	689a      	ldr	r2, [r3, #8]
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f003 0303 	and.w	r3, r3, #3
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	d123      	bne.n	8000a3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	08da      	lsrs	r2, r3, #3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3208      	adds	r2, #8
 80009fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	220f      	movs	r2, #15
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43db      	mvns	r3, r3
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	4013      	ands	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	691a      	ldr	r2, [r3, #16]
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	f003 0307 	and.w	r3, r3, #7
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	08da      	lsrs	r2, r3, #3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3208      	adds	r2, #8
 8000a38:	6939      	ldr	r1, [r7, #16]
 8000a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	2203      	movs	r2, #3
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f003 0203 	and.w	r2, r3, #3
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	f000 809a 	beq.w	8000bb4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a80:	4b55      	ldr	r3, [pc, #340]	; (8000bd8 <HAL_GPIO_Init+0x2cc>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a54      	ldr	r2, [pc, #336]	; (8000bd8 <HAL_GPIO_Init+0x2cc>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	6193      	str	r3, [r2, #24]
 8000a8c:	4b52      	ldr	r3, [pc, #328]	; (8000bd8 <HAL_GPIO_Init+0x2cc>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a98:	4a50      	ldr	r2, [pc, #320]	; (8000bdc <HAL_GPIO_Init+0x2d0>)
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	089b      	lsrs	r3, r3, #2
 8000a9e:	3302      	adds	r3, #2
 8000aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	f003 0303 	and.w	r3, r3, #3
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	220f      	movs	r2, #15
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ac2:	d013      	beq.n	8000aec <HAL_GPIO_Init+0x1e0>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a46      	ldr	r2, [pc, #280]	; (8000be0 <HAL_GPIO_Init+0x2d4>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d00d      	beq.n	8000ae8 <HAL_GPIO_Init+0x1dc>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a45      	ldr	r2, [pc, #276]	; (8000be4 <HAL_GPIO_Init+0x2d8>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d007      	beq.n	8000ae4 <HAL_GPIO_Init+0x1d8>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a44      	ldr	r2, [pc, #272]	; (8000be8 <HAL_GPIO_Init+0x2dc>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d101      	bne.n	8000ae0 <HAL_GPIO_Init+0x1d4>
 8000adc:	2303      	movs	r3, #3
 8000ade:	e006      	b.n	8000aee <HAL_GPIO_Init+0x1e2>
 8000ae0:	2305      	movs	r3, #5
 8000ae2:	e004      	b.n	8000aee <HAL_GPIO_Init+0x1e2>
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	e002      	b.n	8000aee <HAL_GPIO_Init+0x1e2>
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e000      	b.n	8000aee <HAL_GPIO_Init+0x1e2>
 8000aec:	2300      	movs	r3, #0
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	f002 0203 	and.w	r2, r2, #3
 8000af4:	0092      	lsls	r2, r2, #2
 8000af6:	4093      	lsls	r3, r2
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000afe:	4937      	ldr	r1, [pc, #220]	; (8000bdc <HAL_GPIO_Init+0x2d0>)
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	089b      	lsrs	r3, r3, #2
 8000b04:	3302      	adds	r3, #2
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b0c:	4b37      	ldr	r3, [pc, #220]	; (8000bec <HAL_GPIO_Init+0x2e0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	43db      	mvns	r3, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d003      	beq.n	8000b30 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b30:	4a2e      	ldr	r2, [pc, #184]	; (8000bec <HAL_GPIO_Init+0x2e0>)
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b36:	4b2d      	ldr	r3, [pc, #180]	; (8000bec <HAL_GPIO_Init+0x2e0>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d003      	beq.n	8000b5a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b5a:	4a24      	ldr	r2, [pc, #144]	; (8000bec <HAL_GPIO_Init+0x2e0>)
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b60:	4b22      	ldr	r3, [pc, #136]	; (8000bec <HAL_GPIO_Init+0x2e0>)
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b84:	4a19      	ldr	r2, [pc, #100]	; (8000bec <HAL_GPIO_Init+0x2e0>)
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_GPIO_Init+0x2e0>)
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	43db      	mvns	r3, r3
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4013      	ands	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d003      	beq.n	8000bae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bae:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <HAL_GPIO_Init+0x2e0>)
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f47f aea9 	bne.w	800091c <HAL_GPIO_Init+0x10>
  }
}
 8000bca:	bf00      	nop
 8000bcc:	bf00      	nop
 8000bce:	371c      	adds	r7, #28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010000 	.word	0x40010000
 8000be0:	48000400 	.word	0x48000400
 8000be4:	48000800 	.word	0x48000800
 8000be8:	48000c00 	.word	0x48000c00
 8000bec:	40010400 	.word	0x40010400

08000bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	807b      	strh	r3, [r7, #2]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c00:	787b      	ldrb	r3, [r7, #1]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c06:	887a      	ldrh	r2, [r7, #2]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c0c:	e002      	b.n	8000c14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c0e:	887a      	ldrh	r2, [r7, #2]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c30:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	f001 b823 	b.w	8001c8c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f000 817d 	beq.w	8000f56 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c5c:	4bbc      	ldr	r3, [pc, #752]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 030c 	and.w	r3, r3, #12
 8000c64:	2b04      	cmp	r3, #4
 8000c66:	d00c      	beq.n	8000c82 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c68:	4bb9      	ldr	r3, [pc, #740]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 030c 	and.w	r3, r3, #12
 8000c70:	2b08      	cmp	r3, #8
 8000c72:	d15c      	bne.n	8000d2e <HAL_RCC_OscConfig+0x10e>
 8000c74:	4bb6      	ldr	r3, [pc, #728]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c80:	d155      	bne.n	8000d2e <HAL_RCC_OscConfig+0x10e>
 8000c82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c86:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c8a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000c8e:	fa93 f3a3 	rbit	r3, r3
 8000c92:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c96:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c9a:	fab3 f383 	clz	r3, r3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	095b      	lsrs	r3, r3, #5
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d102      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x94>
 8000cae:	4ba8      	ldr	r3, [pc, #672]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	e015      	b.n	8000ce0 <HAL_RCC_OscConfig+0xc0>
 8000cb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cb8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cbc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000cc0:	fa93 f3a3 	rbit	r3, r3
 8000cc4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000cc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ccc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000cd0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000cd4:	fa93 f3a3 	rbit	r3, r3
 8000cd8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000cdc:	4b9c      	ldr	r3, [pc, #624]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ce4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000ce8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000cec:	fa92 f2a2 	rbit	r2, r2
 8000cf0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000cf4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	b2d2      	uxtb	r2, r2
 8000cfe:	f042 0220 	orr.w	r2, r2, #32
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	f002 021f 	and.w	r2, r2, #31
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0e:	4013      	ands	r3, r2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f000 811f 	beq.w	8000f54 <HAL_RCC_OscConfig+0x334>
 8000d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 8116 	bne.w	8000f54 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	f000 bfaf 	b.w	8001c8c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d3e:	d106      	bne.n	8000d4e <HAL_RCC_OscConfig+0x12e>
 8000d40:	4b83      	ldr	r3, [pc, #524]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a82      	ldr	r2, [pc, #520]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d4a:	6013      	str	r3, [r2, #0]
 8000d4c:	e036      	b.n	8000dbc <HAL_RCC_OscConfig+0x19c>
 8000d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d10c      	bne.n	8000d78 <HAL_RCC_OscConfig+0x158>
 8000d5e:	4b7c      	ldr	r3, [pc, #496]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a7b      	ldr	r2, [pc, #492]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	4b79      	ldr	r3, [pc, #484]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a78      	ldr	r2, [pc, #480]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	e021      	b.n	8000dbc <HAL_RCC_OscConfig+0x19c>
 8000d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d88:	d10c      	bne.n	8000da4 <HAL_RCC_OscConfig+0x184>
 8000d8a:	4b71      	ldr	r3, [pc, #452]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a70      	ldr	r2, [pc, #448]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	4b6e      	ldr	r3, [pc, #440]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a6d      	ldr	r2, [pc, #436]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e00b      	b.n	8000dbc <HAL_RCC_OscConfig+0x19c>
 8000da4:	4b6a      	ldr	r3, [pc, #424]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a69      	ldr	r2, [pc, #420]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	4b67      	ldr	r3, [pc, #412]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a66      	ldr	r2, [pc, #408]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000dbc:	4b64      	ldr	r3, [pc, #400]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc0:	f023 020f 	bic.w	r2, r3, #15
 8000dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	495f      	ldr	r1, [pc, #380]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d059      	beq.n	8000e9a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de6:	f7ff fbfd 	bl	80005e4 <HAL_GetTick>
 8000dea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dee:	e00a      	b.n	8000e06 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000df0:	f7ff fbf8 	bl	80005e4 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	2b64      	cmp	r3, #100	; 0x64
 8000dfe:	d902      	bls.n	8000e06 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000e00:	2303      	movs	r3, #3
 8000e02:	f000 bf43 	b.w	8001c8c <HAL_RCC_OscConfig+0x106c>
 8000e06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e0a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e0e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e12:	fa93 f3a3 	rbit	r3, r3
 8000e16:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e1e:	fab3 f383 	clz	r3, r3
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	095b      	lsrs	r3, r3, #5
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d102      	bne.n	8000e38 <HAL_RCC_OscConfig+0x218>
 8000e32:	4b47      	ldr	r3, [pc, #284]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	e015      	b.n	8000e64 <HAL_RCC_OscConfig+0x244>
 8000e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e3c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e40:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000e44:	fa93 f3a3 	rbit	r3, r3
 8000e48:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e50:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e54:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000e58:	fa93 f3a3 	rbit	r3, r3
 8000e5c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000e60:	4b3b      	ldr	r3, [pc, #236]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e68:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000e6c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000e70:	fa92 f2a2 	rbit	r2, r2
 8000e74:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000e78:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000e7c:	fab2 f282 	clz	r2, r2
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	f042 0220 	orr.w	r2, r2, #32
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	f002 021f 	and.w	r2, r2, #31
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e92:	4013      	ands	r3, r2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0ab      	beq.n	8000df0 <HAL_RCC_OscConfig+0x1d0>
 8000e98:	e05d      	b.n	8000f56 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9a:	f7ff fba3 	bl	80005e4 <HAL_GetTick>
 8000e9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea2:	e00a      	b.n	8000eba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ea4:	f7ff fb9e 	bl	80005e4 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b64      	cmp	r3, #100	; 0x64
 8000eb2:	d902      	bls.n	8000eba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	f000 bee9 	b.w	8001c8c <HAL_RCC_OscConfig+0x106c>
 8000eba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ebe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000ec6:	fa93 f3a3 	rbit	r3, r3
 8000eca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000ece:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed2:	fab3 f383 	clz	r3, r3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	095b      	lsrs	r3, r3, #5
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d102      	bne.n	8000eec <HAL_RCC_OscConfig+0x2cc>
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	e015      	b.n	8000f18 <HAL_RCC_OscConfig+0x2f8>
 8000eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000ef8:	fa93 f3a3 	rbit	r3, r3
 8000efc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f04:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f08:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f0c:	fa93 f3a3 	rbit	r3, r3
 8000f10:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f1c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f20:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f24:	fa92 f2a2 	rbit	r2, r2
 8000f28:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f2c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f30:	fab2 f282 	clz	r2, r2
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	f042 0220 	orr.w	r2, r2, #32
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	f002 021f 	and.w	r2, r2, #31
 8000f40:	2101      	movs	r1, #1
 8000f42:	fa01 f202 	lsl.w	r2, r1, r2
 8000f46:	4013      	ands	r3, r2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1ab      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x284>
 8000f4c:	e003      	b.n	8000f56 <HAL_RCC_OscConfig+0x336>
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 817d 	beq.w	8001266 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f6c:	4ba6      	ldr	r3, [pc, #664]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 030c 	and.w	r3, r3, #12
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00b      	beq.n	8000f90 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f78:	4ba3      	ldr	r3, [pc, #652]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 030c 	and.w	r3, r3, #12
 8000f80:	2b08      	cmp	r3, #8
 8000f82:	d172      	bne.n	800106a <HAL_RCC_OscConfig+0x44a>
 8000f84:	4ba0      	ldr	r3, [pc, #640]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d16c      	bne.n	800106a <HAL_RCC_OscConfig+0x44a>
 8000f90:	2302      	movs	r3, #2
 8000f92:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f96:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000f9a:	fa93 f3a3 	rbit	r3, r3
 8000f9e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000fa2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa6:	fab3 f383 	clz	r3, r3
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	095b      	lsrs	r3, r3, #5
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d102      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x3a0>
 8000fba:	4b93      	ldr	r3, [pc, #588]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	e013      	b.n	8000fe8 <HAL_RCC_OscConfig+0x3c8>
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000fca:	fa93 f3a3 	rbit	r3, r3
 8000fce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000fd8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000fdc:	fa93 f3a3 	rbit	r3, r3
 8000fe0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000fe4:	4b88      	ldr	r3, [pc, #544]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	2202      	movs	r2, #2
 8000fea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000fee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000ff2:	fa92 f2a2 	rbit	r2, r2
 8000ff6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000ffa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000ffe:	fab2 f282 	clz	r2, r2
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	f042 0220 	orr.w	r2, r2, #32
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	f002 021f 	and.w	r2, r2, #31
 800100e:	2101      	movs	r1, #1
 8001010:	fa01 f202 	lsl.w	r2, r1, r2
 8001014:	4013      	ands	r3, r2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d00a      	beq.n	8001030 <HAL_RCC_OscConfig+0x410>
 800101a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800101e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d002      	beq.n	8001030 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	f000 be2e 	b.w	8001c8c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001030:	4b75      	ldr	r3, [pc, #468]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800103c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	21f8      	movs	r1, #248	; 0xf8
 8001046:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800104e:	fa91 f1a1 	rbit	r1, r1
 8001052:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001056:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800105a:	fab1 f181 	clz	r1, r1
 800105e:	b2c9      	uxtb	r1, r1
 8001060:	408b      	lsls	r3, r1
 8001062:	4969      	ldr	r1, [pc, #420]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 8001064:	4313      	orrs	r3, r2
 8001066:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001068:	e0fd      	b.n	8001266 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800106a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800106e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 8088 	beq.w	800118c <HAL_RCC_OscConfig+0x56c>
 800107c:	2301      	movs	r3, #1
 800107e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001082:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001086:	fa93 f3a3 	rbit	r3, r3
 800108a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800108e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001092:	fab3 f383 	clz	r3, r3
 8001096:	b2db      	uxtb	r3, r3
 8001098:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800109c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	461a      	mov	r2, r3
 80010a4:	2301      	movs	r3, #1
 80010a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a8:	f7ff fa9c 	bl	80005e4 <HAL_GetTick>
 80010ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b0:	e00a      	b.n	80010c8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b2:	f7ff fa97 	bl	80005e4 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d902      	bls.n	80010c8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	f000 bde2 	b.w	8001c8c <HAL_RCC_OscConfig+0x106c>
 80010c8:	2302      	movs	r3, #2
 80010ca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80010d2:	fa93 f3a3 	rbit	r3, r3
 80010d6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80010da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010de:	fab3 f383 	clz	r3, r3
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	095b      	lsrs	r3, r3, #5
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d102      	bne.n	80010f8 <HAL_RCC_OscConfig+0x4d8>
 80010f2:	4b45      	ldr	r3, [pc, #276]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	e013      	b.n	8001120 <HAL_RCC_OscConfig+0x500>
 80010f8:	2302      	movs	r3, #2
 80010fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001102:	fa93 f3a3 	rbit	r3, r3
 8001106:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800110a:	2302      	movs	r3, #2
 800110c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001110:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001114:	fa93 f3a3 	rbit	r3, r3
 8001118:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800111c:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 800111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001120:	2202      	movs	r2, #2
 8001122:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001126:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800112a:	fa92 f2a2 	rbit	r2, r2
 800112e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001132:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001136:	fab2 f282 	clz	r2, r2
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	f042 0220 	orr.w	r2, r2, #32
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	f002 021f 	and.w	r2, r2, #31
 8001146:	2101      	movs	r1, #1
 8001148:	fa01 f202 	lsl.w	r2, r1, r2
 800114c:	4013      	ands	r3, r2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0af      	beq.n	80010b2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001152:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800115a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800115e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	21f8      	movs	r1, #248	; 0xf8
 8001168:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001170:	fa91 f1a1 	rbit	r1, r1
 8001174:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001178:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800117c:	fab1 f181 	clz	r1, r1
 8001180:	b2c9      	uxtb	r1, r1
 8001182:	408b      	lsls	r3, r1
 8001184:	4920      	ldr	r1, [pc, #128]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 8001186:	4313      	orrs	r3, r2
 8001188:	600b      	str	r3, [r1, #0]
 800118a:	e06c      	b.n	8001266 <HAL_RCC_OscConfig+0x646>
 800118c:	2301      	movs	r3, #1
 800118e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001192:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001196:	fa93 f3a3 	rbit	r3, r3
 800119a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800119e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011a2:	fab3 f383 	clz	r3, r3
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	461a      	mov	r2, r3
 80011b4:	2300      	movs	r3, #0
 80011b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fa14 	bl	80005e4 <HAL_GetTick>
 80011bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c0:	e00a      	b.n	80011d8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c2:	f7ff fa0f 	bl	80005e4 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d902      	bls.n	80011d8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	f000 bd5a 	b.w	8001c8c <HAL_RCC_OscConfig+0x106c>
 80011d8:	2302      	movs	r3, #2
 80011da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80011e2:	fa93 f3a3 	rbit	r3, r3
 80011e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80011ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ee:	fab3 f383 	clz	r3, r3
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	095b      	lsrs	r3, r3, #5
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d104      	bne.n	800120c <HAL_RCC_OscConfig+0x5ec>
 8001202:	4b01      	ldr	r3, [pc, #4]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	e015      	b.n	8001234 <HAL_RCC_OscConfig+0x614>
 8001208:	40021000 	.word	0x40021000
 800120c:	2302      	movs	r3, #2
 800120e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001212:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001216:	fa93 f3a3 	rbit	r3, r3
 800121a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800121e:	2302      	movs	r3, #2
 8001220:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001224:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001228:	fa93 f3a3 	rbit	r3, r3
 800122c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001230:	4bc8      	ldr	r3, [pc, #800]	; (8001554 <HAL_RCC_OscConfig+0x934>)
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	2202      	movs	r2, #2
 8001236:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800123a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800123e:	fa92 f2a2 	rbit	r2, r2
 8001242:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001246:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800124a:	fab2 f282 	clz	r2, r2
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	f042 0220 	orr.w	r2, r2, #32
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	f002 021f 	and.w	r2, r2, #31
 800125a:	2101      	movs	r1, #1
 800125c:	fa01 f202 	lsl.w	r2, r1, r2
 8001260:	4013      	ands	r3, r2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1ad      	bne.n	80011c2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800126a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 8110 	beq.w	800149c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800127c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001280:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d079      	beq.n	8001380 <HAL_RCC_OscConfig+0x760>
 800128c:	2301      	movs	r3, #1
 800128e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001296:	fa93 f3a3 	rbit	r3, r3
 800129a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800129e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012a2:	fab3 f383 	clz	r3, r3
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	461a      	mov	r2, r3
 80012aa:	4bab      	ldr	r3, [pc, #684]	; (8001558 <HAL_RCC_OscConfig+0x938>)
 80012ac:	4413      	add	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	461a      	mov	r2, r3
 80012b2:	2301      	movs	r3, #1
 80012b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b6:	f7ff f995 	bl	80005e4 <HAL_GetTick>
 80012ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012be:	e00a      	b.n	80012d6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c0:	f7ff f990 	bl	80005e4 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d902      	bls.n	80012d6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	f000 bcdb 	b.w	8001c8c <HAL_RCC_OscConfig+0x106c>
 80012d6:	2302      	movs	r3, #2
 80012d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80012e0:	fa93 f3a3 	rbit	r3, r3
 80012e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80012e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80012f0:	2202      	movs	r2, #2
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	fa93 f2a3 	rbit	r2, r3
 8001302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001306:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001314:	2202      	movs	r2, #2
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800131c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	fa93 f2a3 	rbit	r2, r3
 8001326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800132a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800132e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001330:	4b88      	ldr	r3, [pc, #544]	; (8001554 <HAL_RCC_OscConfig+0x934>)
 8001332:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001338:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800133c:	2102      	movs	r1, #2
 800133e:	6019      	str	r1, [r3, #0]
 8001340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001344:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	fa93 f1a3 	rbit	r1, r3
 800134e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001352:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001356:	6019      	str	r1, [r3, #0]
  return result;
 8001358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800135c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	fab3 f383 	clz	r3, r3
 8001366:	b2db      	uxtb	r3, r3
 8001368:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800136c:	b2db      	uxtb	r3, r3
 800136e:	f003 031f 	and.w	r3, r3, #31
 8001372:	2101      	movs	r1, #1
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	4013      	ands	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0a0      	beq.n	80012c0 <HAL_RCC_OscConfig+0x6a0>
 800137e:	e08d      	b.n	800149c <HAL_RCC_OscConfig+0x87c>
 8001380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001384:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001388:	2201      	movs	r2, #1
 800138a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001390:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	fa93 f2a3 	rbit	r2, r3
 800139a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800139e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013a2:	601a      	str	r2, [r3, #0]
  return result;
 80013a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ae:	fab3 f383 	clz	r3, r3
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b68      	ldr	r3, [pc, #416]	; (8001558 <HAL_RCC_OscConfig+0x938>)
 80013b8:	4413      	add	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	461a      	mov	r2, r3
 80013be:	2300      	movs	r3, #0
 80013c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c2:	f7ff f90f 	bl	80005e4 <HAL_GetTick>
 80013c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ca:	e00a      	b.n	80013e2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013cc:	f7ff f90a 	bl	80005e4 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d902      	bls.n	80013e2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	f000 bc55 	b.w	8001c8c <HAL_RCC_OscConfig+0x106c>
 80013e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80013ea:	2202      	movs	r2, #2
 80013ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	fa93 f2a3 	rbit	r2, r3
 80013fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001400:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800140e:	2202      	movs	r2, #2
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001416:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	fa93 f2a3 	rbit	r2, r3
 8001420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001424:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001432:	2202      	movs	r2, #2
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800143a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	fa93 f2a3 	rbit	r2, r3
 8001444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001448:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800144c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800144e:	4b41      	ldr	r3, [pc, #260]	; (8001554 <HAL_RCC_OscConfig+0x934>)
 8001450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001456:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800145a:	2102      	movs	r1, #2
 800145c:	6019      	str	r1, [r3, #0]
 800145e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001462:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	fa93 f1a3 	rbit	r1, r3
 800146c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001470:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001474:	6019      	str	r1, [r3, #0]
  return result;
 8001476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	fab3 f383 	clz	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800148a:	b2db      	uxtb	r3, r3
 800148c:	f003 031f 	and.w	r3, r3, #31
 8001490:	2101      	movs	r1, #1
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	4013      	ands	r3, r2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d197      	bne.n	80013cc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800149c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 81a1 	beq.w	80017f4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b8:	4b26      	ldr	r3, [pc, #152]	; (8001554 <HAL_RCC_OscConfig+0x934>)
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d116      	bne.n	80014f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c4:	4b23      	ldr	r3, [pc, #140]	; (8001554 <HAL_RCC_OscConfig+0x934>)
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	4a22      	ldr	r2, [pc, #136]	; (8001554 <HAL_RCC_OscConfig+0x934>)
 80014ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ce:	61d3      	str	r3, [r2, #28]
 80014d0:	4b20      	ldr	r3, [pc, #128]	; (8001554 <HAL_RCC_OscConfig+0x934>)
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80014d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014dc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80014ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80014ec:	2301      	movs	r3, #1
 80014ee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f2:	4b1a      	ldr	r3, [pc, #104]	; (800155c <HAL_RCC_OscConfig+0x93c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d11a      	bne.n	8001534 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <HAL_RCC_OscConfig+0x93c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a16      	ldr	r2, [pc, #88]	; (800155c <HAL_RCC_OscConfig+0x93c>)
 8001504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001508:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800150a:	f7ff f86b 	bl	80005e4 <HAL_GetTick>
 800150e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001512:	e009      	b.n	8001528 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001514:	f7ff f866 	bl	80005e4 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b64      	cmp	r3, #100	; 0x64
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e3b1      	b.n	8001c8c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <HAL_RCC_OscConfig+0x93c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0ef      	beq.n	8001514 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001538:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d10d      	bne.n	8001560 <HAL_RCC_OscConfig+0x940>
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <HAL_RCC_OscConfig+0x934>)
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	4a02      	ldr	r2, [pc, #8]	; (8001554 <HAL_RCC_OscConfig+0x934>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6213      	str	r3, [r2, #32]
 8001550:	e03c      	b.n	80015cc <HAL_RCC_OscConfig+0x9ac>
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	10908120 	.word	0x10908120
 800155c:	40007000 	.word	0x40007000
 8001560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001564:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10c      	bne.n	800158a <HAL_RCC_OscConfig+0x96a>
 8001570:	4bc1      	ldr	r3, [pc, #772]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	4ac0      	ldr	r2, [pc, #768]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 8001576:	f023 0301 	bic.w	r3, r3, #1
 800157a:	6213      	str	r3, [r2, #32]
 800157c:	4bbe      	ldr	r3, [pc, #760]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	4abd      	ldr	r2, [pc, #756]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 8001582:	f023 0304 	bic.w	r3, r3, #4
 8001586:	6213      	str	r3, [r2, #32]
 8001588:	e020      	b.n	80015cc <HAL_RCC_OscConfig+0x9ac>
 800158a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	2b05      	cmp	r3, #5
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x994>
 800159a:	4bb7      	ldr	r3, [pc, #732]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	4ab6      	ldr	r2, [pc, #728]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6213      	str	r3, [r2, #32]
 80015a6:	4bb4      	ldr	r3, [pc, #720]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4ab3      	ldr	r2, [pc, #716]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6213      	str	r3, [r2, #32]
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0x9ac>
 80015b4:	4bb0      	ldr	r3, [pc, #704]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4aaf      	ldr	r2, [pc, #700]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	6213      	str	r3, [r2, #32]
 80015c0:	4bad      	ldr	r3, [pc, #692]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	4aac      	ldr	r2, [pc, #688]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 80015c6:	f023 0304 	bic.w	r3, r3, #4
 80015ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 8081 	beq.w	80016e0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015de:	f7ff f801 	bl	80005e4 <HAL_GetTick>
 80015e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e6:	e00b      	b.n	8001600 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e8:	f7fe fffc 	bl	80005e4 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e345      	b.n	8001c8c <HAL_RCC_OscConfig+0x106c>
 8001600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001604:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001608:	2202      	movs	r2, #2
 800160a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001610:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	fa93 f2a3 	rbit	r2, r3
 800161a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001628:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800162c:	2202      	movs	r2, #2
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001634:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	fa93 f2a3 	rbit	r2, r3
 800163e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001642:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001646:	601a      	str	r2, [r3, #0]
  return result;
 8001648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001650:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001652:	fab3 f383 	clz	r3, r3
 8001656:	b2db      	uxtb	r3, r3
 8001658:	095b      	lsrs	r3, r3, #5
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d102      	bne.n	800166c <HAL_RCC_OscConfig+0xa4c>
 8001666:	4b84      	ldr	r3, [pc, #528]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	e013      	b.n	8001694 <HAL_RCC_OscConfig+0xa74>
 800166c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001670:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001674:	2202      	movs	r2, #2
 8001676:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	fa93 f2a3 	rbit	r2, r3
 8001686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	4b79      	ldr	r3, [pc, #484]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001698:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800169c:	2102      	movs	r1, #2
 800169e:	6011      	str	r1, [r2, #0]
 80016a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016a4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	fa92 f1a2 	rbit	r1, r2
 80016ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016b2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80016b6:	6011      	str	r1, [r2, #0]
  return result;
 80016b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016bc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	fab2 f282 	clz	r2, r2
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	f002 021f 	and.w	r2, r2, #31
 80016d2:	2101      	movs	r1, #1
 80016d4:	fa01 f202 	lsl.w	r2, r1, r2
 80016d8:	4013      	ands	r3, r2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d084      	beq.n	80015e8 <HAL_RCC_OscConfig+0x9c8>
 80016de:	e07f      	b.n	80017e0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e0:	f7fe ff80 	bl	80005e4 <HAL_GetTick>
 80016e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e8:	e00b      	b.n	8001702 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ea:	f7fe ff7b 	bl	80005e4 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e2c4      	b.n	8001c8c <HAL_RCC_OscConfig+0x106c>
 8001702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001706:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800170a:	2202      	movs	r2, #2
 800170c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001712:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	fa93 f2a3 	rbit	r2, r3
 800171c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001720:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800172e:	2202      	movs	r2, #2
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001736:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	fa93 f2a3 	rbit	r2, r3
 8001740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001744:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001748:	601a      	str	r2, [r3, #0]
  return result;
 800174a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001752:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001754:	fab3 f383 	clz	r3, r3
 8001758:	b2db      	uxtb	r3, r3
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	b2db      	uxtb	r3, r3
 800175e:	f043 0302 	orr.w	r3, r3, #2
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d102      	bne.n	800176e <HAL_RCC_OscConfig+0xb4e>
 8001768:	4b43      	ldr	r3, [pc, #268]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	e013      	b.n	8001796 <HAL_RCC_OscConfig+0xb76>
 800176e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001772:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001776:	2202      	movs	r2, #2
 8001778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	fa93 f2a3 	rbit	r2, r3
 8001788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	4b39      	ldr	r3, [pc, #228]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800179a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800179e:	2102      	movs	r1, #2
 80017a0:	6011      	str	r1, [r2, #0]
 80017a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017a6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	fa92 f1a2 	rbit	r1, r2
 80017b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80017b8:	6011      	str	r1, [r2, #0]
  return result;
 80017ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017be:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	fab2 f282 	clz	r2, r2
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	f002 021f 	and.w	r2, r2, #31
 80017d4:	2101      	movs	r1, #1
 80017d6:	fa01 f202 	lsl.w	r2, r1, r2
 80017da:	4013      	ands	r3, r2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d184      	bne.n	80016ea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d105      	bne.n	80017f4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e8:	4b23      	ldr	r3, [pc, #140]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	4a22      	ldr	r2, [pc, #136]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 80017ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 8242 	beq.w	8001c8a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001806:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 030c 	and.w	r3, r3, #12
 800180e:	2b08      	cmp	r3, #8
 8001810:	f000 8213 	beq.w	8001c3a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001818:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	2b02      	cmp	r3, #2
 8001822:	f040 8162 	bne.w	8001aea <HAL_RCC_OscConfig+0xeca>
 8001826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800182e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001832:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001838:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	fa93 f2a3 	rbit	r2, r3
 8001842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001846:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800184a:	601a      	str	r2, [r3, #0]
  return result;
 800184c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001850:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001854:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001856:	fab3 f383 	clz	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001860:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	461a      	mov	r2, r3
 8001868:	2300      	movs	r3, #0
 800186a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7fe feba 	bl	80005e4 <HAL_GetTick>
 8001870:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001874:	e00c      	b.n	8001890 <HAL_RCC_OscConfig+0xc70>
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187c:	f7fe feb2 	bl	80005e4 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e1fd      	b.n	8001c8c <HAL_RCC_OscConfig+0x106c>
 8001890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001894:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001898:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800189c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	fa93 f2a3 	rbit	r2, r3
 80018ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018b4:	601a      	str	r2, [r3, #0]
  return result;
 80018b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c0:	fab3 f383 	clz	r3, r3
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d102      	bne.n	80018da <HAL_RCC_OscConfig+0xcba>
 80018d4:	4bb0      	ldr	r3, [pc, #704]	; (8001b98 <HAL_RCC_OscConfig+0xf78>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	e027      	b.n	800192a <HAL_RCC_OscConfig+0xd0a>
 80018da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018de:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80018e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	fa93 f2a3 	rbit	r2, r3
 80018f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001904:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001908:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001912:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	fa93 f2a3 	rbit	r2, r3
 800191c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001920:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	4b9c      	ldr	r3, [pc, #624]	; (8001b98 <HAL_RCC_OscConfig+0xf78>)
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800192e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001932:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001936:	6011      	str	r1, [r2, #0]
 8001938:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800193c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	fa92 f1a2 	rbit	r1, r2
 8001946:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800194a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800194e:	6011      	str	r1, [r2, #0]
  return result;
 8001950:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001954:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	fab2 f282 	clz	r2, r2
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	f042 0220 	orr.w	r2, r2, #32
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	f002 021f 	and.w	r2, r2, #31
 800196a:	2101      	movs	r1, #1
 800196c:	fa01 f202 	lsl.w	r2, r1, r2
 8001970:	4013      	ands	r3, r2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d182      	bne.n	800187c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001976:	4b88      	ldr	r3, [pc, #544]	; (8001b98 <HAL_RCC_OscConfig+0xf78>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800197e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001982:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800198a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	430b      	orrs	r3, r1
 8001998:	497f      	ldr	r1, [pc, #508]	; (8001b98 <HAL_RCC_OscConfig+0xf78>)
 800199a:	4313      	orrs	r3, r2
 800199c:	604b      	str	r3, [r1, #4]
 800199e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80019a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	fa93 f2a3 	rbit	r2, r3
 80019ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019be:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80019c2:	601a      	str	r2, [r3, #0]
  return result;
 80019c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80019cc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ce:	fab3 f383 	clz	r3, r3
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	461a      	mov	r2, r3
 80019e0:	2301      	movs	r3, #1
 80019e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7fe fdfe 	bl	80005e4 <HAL_GetTick>
 80019e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ec:	e009      	b.n	8001a02 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ee:	f7fe fdf9 	bl	80005e4 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e144      	b.n	8001c8c <HAL_RCC_OscConfig+0x106c>
 8001a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a06:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a14:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	fa93 f2a3 	rbit	r2, r3
 8001a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a22:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a26:	601a      	str	r2, [r3, #0]
  return result;
 8001a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a32:	fab3 f383 	clz	r3, r3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	095b      	lsrs	r3, r3, #5
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d102      	bne.n	8001a4c <HAL_RCC_OscConfig+0xe2c>
 8001a46:	4b54      	ldr	r3, [pc, #336]	; (8001b98 <HAL_RCC_OscConfig+0xf78>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	e027      	b.n	8001a9c <HAL_RCC_OscConfig+0xe7c>
 8001a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a50:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001a54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	fa93 f2a3 	rbit	r2, r3
 8001a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a76:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001a7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a84:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	fa93 f2a3 	rbit	r2, r3
 8001a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a92:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	4b3f      	ldr	r3, [pc, #252]	; (8001b98 <HAL_RCC_OscConfig+0xf78>)
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aa0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001aa4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001aa8:	6011      	str	r1, [r2, #0]
 8001aaa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	fa92 f1a2 	rbit	r1, r2
 8001ab8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001abc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ac0:	6011      	str	r1, [r2, #0]
  return result;
 8001ac2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ac6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	fab2 f282 	clz	r2, r2
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	f042 0220 	orr.w	r2, r2, #32
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	f002 021f 	and.w	r2, r2, #31
 8001adc:	2101      	movs	r1, #1
 8001ade:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d082      	beq.n	80019ee <HAL_RCC_OscConfig+0xdce>
 8001ae8:	e0cf      	b.n	8001c8a <HAL_RCC_OscConfig+0x106a>
 8001aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001af2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001af6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	fa93 f2a3 	rbit	r2, r3
 8001b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b0e:	601a      	str	r2, [r3, #0]
  return result;
 8001b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b14:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b18:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1a:	fab3 f383 	clz	r3, r3
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7fe fd58 	bl	80005e4 <HAL_GetTick>
 8001b34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b38:	e009      	b.n	8001b4e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7fe fd53 	bl	80005e4 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e09e      	b.n	8001c8c <HAL_RCC_OscConfig+0x106c>
 8001b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b52:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001b56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b60:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	fa93 f2a3 	rbit	r2, r3
 8001b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001b72:	601a      	str	r2, [r3, #0]
  return result;
 8001b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b78:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001b7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7e:	fab3 f383 	clz	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	095b      	lsrs	r3, r3, #5
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d104      	bne.n	8001b9c <HAL_RCC_OscConfig+0xf7c>
 8001b92:	4b01      	ldr	r3, [pc, #4]	; (8001b98 <HAL_RCC_OscConfig+0xf78>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	e029      	b.n	8001bec <HAL_RCC_OscConfig+0xfcc>
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ba4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	fa93 f2a3 	rbit	r2, r3
 8001bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001bca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	fa93 f2a3 	rbit	r2, r3
 8001bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <HAL_RCC_OscConfig+0x1078>)
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bf0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001bf4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bf8:	6011      	str	r1, [r2, #0]
 8001bfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bfe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	fa92 f1a2 	rbit	r1, r2
 8001c08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c0c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c10:	6011      	str	r1, [r2, #0]
  return result;
 8001c12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c16:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	fab2 f282 	clz	r2, r2
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	f042 0220 	orr.w	r2, r2, #32
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	f002 021f 	and.w	r2, r2, #31
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d180      	bne.n	8001b3a <HAL_RCC_OscConfig+0xf1a>
 8001c38:	e027      	b.n	8001c8a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e01e      	b.n	8001c8c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c4e:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_RCC_OscConfig+0x1078>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c5a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d10b      	bne.n	8001c86 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001c6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d001      	beq.n	8001c8a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000

08001c9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b09e      	sub	sp, #120	; 0x78
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e162      	b.n	8001f7a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b90      	ldr	r3, [pc, #576]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d910      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b8d      	ldr	r3, [pc, #564]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 0207 	bic.w	r2, r3, #7
 8001cca:	498b      	ldr	r1, [pc, #556]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b89      	ldr	r3, [pc, #548]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e14a      	b.n	8001f7a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf0:	4b82      	ldr	r3, [pc, #520]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	497f      	ldr	r1, [pc, #508]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 80dc 	beq.w	8001ec8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d13c      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xf6>
 8001d18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d1c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d28:	fab3 f383 	clz	r3, r3
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d102      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xa6>
 8001d3c:	4b6f      	ldr	r3, [pc, #444]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	e00f      	b.n	8001d62 <HAL_RCC_ClockConfig+0xc6>
 8001d42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	667b      	str	r3, [r7, #100]	; 0x64
 8001d50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d54:	663b      	str	r3, [r7, #96]	; 0x60
 8001d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d58:	fa93 f3a3 	rbit	r3, r3
 8001d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d5e:	4b67      	ldr	r3, [pc, #412]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d66:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d6a:	fa92 f2a2 	rbit	r2, r2
 8001d6e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001d70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d72:	fab2 f282 	clz	r2, r2
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	f042 0220 	orr.w	r2, r2, #32
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	f002 021f 	and.w	r2, r2, #31
 8001d82:	2101      	movs	r1, #1
 8001d84:	fa01 f202 	lsl.w	r2, r1, r2
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d17b      	bne.n	8001e86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e0f3      	b.n	8001f7a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d13c      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x178>
 8001d9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	095b      	lsrs	r3, r3, #5
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d102      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x128>
 8001dbe:	4b4f      	ldr	r3, [pc, #316]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	e00f      	b.n	8001de4 <HAL_RCC_ClockConfig+0x148>
 8001dc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dc8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dcc:	fa93 f3a3 	rbit	r3, r3
 8001dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8001dd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dd6:	643b      	str	r3, [r7, #64]	; 0x40
 8001dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001de0:	4b46      	ldr	r3, [pc, #280]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001dea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001dec:	fa92 f2a2 	rbit	r2, r2
 8001df0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001df2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001df4:	fab2 f282 	clz	r2, r2
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	f042 0220 	orr.w	r2, r2, #32
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	f002 021f 	and.w	r2, r2, #31
 8001e04:	2101      	movs	r1, #1
 8001e06:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d13a      	bne.n	8001e86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0b2      	b.n	8001f7a <HAL_RCC_ClockConfig+0x2de>
 8001e14:	2302      	movs	r3, #2
 8001e16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	095b      	lsrs	r3, r3, #5
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d102      	bne.n	8001e3c <HAL_RCC_ClockConfig+0x1a0>
 8001e36:	4b31      	ldr	r3, [pc, #196]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	e00d      	b.n	8001e58 <HAL_RCC_ClockConfig+0x1bc>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e42:	fa93 f3a3 	rbit	r3, r3
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
 8001e48:	2302      	movs	r3, #2
 8001e4a:	623b      	str	r3, [r7, #32]
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	4b29      	ldr	r3, [pc, #164]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	2202      	movs	r2, #2
 8001e5a:	61ba      	str	r2, [r7, #24]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	fa92 f2a2 	rbit	r2, r2
 8001e62:	617a      	str	r2, [r7, #20]
  return result;
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	fab2 f282 	clz	r2, r2
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	f042 0220 	orr.w	r2, r2, #32
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	f002 021f 	and.w	r2, r2, #31
 8001e76:	2101      	movs	r1, #1
 8001e78:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e079      	b.n	8001f7a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e86:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f023 0203 	bic.w	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	491a      	ldr	r1, [pc, #104]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e98:	f7fe fba4 	bl	80005e4 <HAL_GetTick>
 8001e9c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9e:	e00a      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea0:	f7fe fba0 	bl	80005e4 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e061      	b.n	8001f7a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 020c 	and.w	r2, r3, #12
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d1eb      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d214      	bcs.n	8001f00 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 0207 	bic.w	r2, r3, #7
 8001ede:	4906      	ldr	r1, [pc, #24]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d005      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e040      	b.n	8001f7a <HAL_RCC_ClockConfig+0x2de>
 8001ef8:	40022000 	.word	0x40022000
 8001efc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <HAL_RCC_ClockConfig+0x2e8>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	491a      	ldr	r1, [pc, #104]	; (8001f84 <HAL_RCC_ClockConfig+0x2e8>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d009      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f2a:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <HAL_RCC_ClockConfig+0x2e8>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4912      	ldr	r1, [pc, #72]	; (8001f84 <HAL_RCC_ClockConfig+0x2e8>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f3e:	f000 f829 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8001f42:	4601      	mov	r1, r0
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HAL_RCC_ClockConfig+0x2e8>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f4c:	22f0      	movs	r2, #240	; 0xf0
 8001f4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	fa92 f2a2 	rbit	r2, r2
 8001f56:	60fa      	str	r2, [r7, #12]
  return result;
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	fab2 f282 	clz	r2, r2
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	40d3      	lsrs	r3, r2
 8001f62:	4a09      	ldr	r2, [pc, #36]	; (8001f88 <HAL_RCC_ClockConfig+0x2ec>)
 8001f64:	5cd3      	ldrb	r3, [r2, r3]
 8001f66:	fa21 f303 	lsr.w	r3, r1, r3
 8001f6a:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <HAL_RCC_ClockConfig+0x2f0>)
 8001f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <HAL_RCC_ClockConfig+0x2f4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe faf2 	bl	800055c <HAL_InitTick>
  
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3778      	adds	r7, #120	; 0x78
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000
 8001f88:	08003200 	.word	0x08003200
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	20000004 	.word	0x20000004

08001f94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b08b      	sub	sp, #44	; 0x2c
 8001f98:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001fae:	4b29      	ldr	r3, [pc, #164]	; (8002054 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d002      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x30>
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d003      	beq.n	8001fca <HAL_RCC_GetSysClockFreq+0x36>
 8001fc2:	e03c      	b.n	800203e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fc4:	4b24      	ldr	r3, [pc, #144]	; (8002058 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fc6:	623b      	str	r3, [r7, #32]
      break;
 8001fc8:	e03c      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001fd0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001fd4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	fa92 f2a2 	rbit	r2, r2
 8001fdc:	607a      	str	r2, [r7, #4]
  return result;
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	fab2 f282 	clz	r2, r2
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	40d3      	lsrs	r3, r2
 8001fe8:	4a1c      	ldr	r2, [pc, #112]	; (800205c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001fea:	5cd3      	ldrb	r3, [r2, r3]
 8001fec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001fee:	4b19      	ldr	r3, [pc, #100]	; (8002054 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	fa92 f2a2 	rbit	r2, r2
 8002000:	60fa      	str	r2, [r7, #12]
  return result;
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	fab2 f282 	clz	r2, r2
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	40d3      	lsrs	r3, r2
 800200c:	4a14      	ldr	r2, [pc, #80]	; (8002060 <HAL_RCC_GetSysClockFreq+0xcc>)
 800200e:	5cd3      	ldrb	r3, [r2, r3]
 8002010:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d008      	beq.n	800202e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800201c:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <HAL_RCC_GetSysClockFreq+0xc4>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	fbb2 f2f3 	udiv	r2, r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
 800202c:	e004      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	4a0c      	ldr	r2, [pc, #48]	; (8002064 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002032:	fb02 f303 	mul.w	r3, r2, r3
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	623b      	str	r3, [r7, #32]
      break;
 800203c:	e002      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002040:	623b      	str	r3, [r7, #32]
      break;
 8002042:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002044:	6a3b      	ldr	r3, [r7, #32]
}
 8002046:	4618      	mov	r0, r3
 8002048:	372c      	adds	r7, #44	; 0x2c
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	007a1200 	.word	0x007a1200
 800205c:	08003218 	.word	0x08003218
 8002060:	08003228 	.word	0x08003228
 8002064:	003d0900 	.word	0x003d0900

08002068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <HAL_RCC_GetHCLKFreq+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000000 	.word	0x20000000

08002080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002086:	f7ff ffef 	bl	8002068 <HAL_RCC_GetHCLKFreq>
 800208a:	4601      	mov	r1, r0
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002094:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002098:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	fa92 f2a2 	rbit	r2, r2
 80020a0:	603a      	str	r2, [r7, #0]
  return result;
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	fab2 f282 	clz	r2, r2
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	40d3      	lsrs	r3, r2
 80020ac:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80020ae:	5cd3      	ldrb	r3, [r2, r3]
 80020b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000
 80020c0:	08003210 	.word	0x08003210

080020c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80020ca:	f7ff ffcd 	bl	8002068 <HAL_RCC_GetHCLKFreq>
 80020ce:	4601      	mov	r1, r0
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80020d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80020dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	fa92 f2a2 	rbit	r2, r2
 80020e4:	603a      	str	r2, [r7, #0]
  return result;
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	fab2 f282 	clz	r2, r2
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	40d3      	lsrs	r3, r2
 80020f0:	4a04      	ldr	r2, [pc, #16]	; (8002104 <HAL_RCC_GetPCLK2Freq+0x40>)
 80020f2:	5cd3      	ldrb	r3, [r2, r3]
 80020f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000
 8002104:	08003210 	.word	0x08003210

08002108 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e040      	b.n	800219c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe f944 	bl	80003b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2224      	movs	r2, #36	; 0x24
 8002134:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0201 	bic.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 fc90 	bl	8002a6c <UART_SetConfig>
 800214c:	4603      	mov	r3, r0
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e022      	b.n	800219c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 fdba 	bl	8002cd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002172:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002182:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 fe41 	bl	8002e1c <UART_CheckIdleState>
 800219a:	4603      	mov	r3, r0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	; 0x28
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	4613      	mov	r3, r2
 80021b2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021b8:	2b20      	cmp	r3, #32
 80021ba:	f040 8082 	bne.w	80022c2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <HAL_UART_Transmit+0x26>
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e07a      	b.n	80022c4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_UART_Transmit+0x38>
 80021d8:	2302      	movs	r3, #2
 80021da:	e073      	b.n	80022c4 <HAL_UART_Transmit+0x120>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2221      	movs	r2, #33	; 0x21
 80021f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021f2:	f7fe f9f7 	bl	80005e4 <HAL_GetTick>
 80021f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	88fa      	ldrh	r2, [r7, #6]
 80021fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	88fa      	ldrh	r2, [r7, #6]
 8002204:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002210:	d108      	bne.n	8002224 <HAL_UART_Transmit+0x80>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d104      	bne.n	8002224 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	e003      	b.n	800222c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002228:	2300      	movs	r3, #0
 800222a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002234:	e02d      	b.n	8002292 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2200      	movs	r2, #0
 800223e:	2180      	movs	r1, #128	; 0x80
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 fe34 	bl	8002eae <UART_WaitOnFlagUntilTimeout>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e039      	b.n	80022c4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10b      	bne.n	800226e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	881a      	ldrh	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002262:	b292      	uxth	r2, r2
 8002264:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	3302      	adds	r3, #2
 800226a:	61bb      	str	r3, [r7, #24]
 800226c:	e008      	b.n	8002280 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	781a      	ldrb	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	b292      	uxth	r2, r2
 8002278:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3301      	adds	r3, #1
 800227e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002286:	b29b      	uxth	r3, r3
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1cb      	bne.n	8002236 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2200      	movs	r2, #0
 80022a6:	2140      	movs	r1, #64	; 0x40
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 fe00 	bl	8002eae <UART_WaitOnFlagUntilTimeout>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e005      	b.n	80022c4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2220      	movs	r2, #32
 80022bc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e000      	b.n	80022c4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80022c2:	2302      	movs	r3, #2
  }
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3720      	adds	r7, #32
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08a      	sub	sp, #40	; 0x28
 80022d0:	af02      	add	r7, sp, #8
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	4613      	mov	r3, r2
 80022da:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022e0:	2b20      	cmp	r3, #32
 80022e2:	f040 80bf 	bne.w	8002464 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_UART_Receive+0x26>
 80022ec:	88fb      	ldrh	r3, [r7, #6]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e0b7      	b.n	8002466 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_UART_Receive+0x38>
 8002300:	2302      	movs	r3, #2
 8002302:	e0b0      	b.n	8002466 <HAL_UART_Receive+0x19a>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2222      	movs	r2, #34	; 0x22
 8002318:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002320:	f7fe f960 	bl	80005e4 <HAL_GetTick>
 8002324:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	88fa      	ldrh	r2, [r7, #6]
 800232a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	88fa      	ldrh	r2, [r7, #6]
 8002332:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800233e:	d10e      	bne.n	800235e <HAL_UART_Receive+0x92>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d105      	bne.n	8002354 <HAL_UART_Receive+0x88>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800234e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002352:	e02d      	b.n	80023b0 <HAL_UART_Receive+0xe4>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	22ff      	movs	r2, #255	; 0xff
 8002358:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800235c:	e028      	b.n	80023b0 <HAL_UART_Receive+0xe4>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10d      	bne.n	8002382 <HAL_UART_Receive+0xb6>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d104      	bne.n	8002378 <HAL_UART_Receive+0xac>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	22ff      	movs	r2, #255	; 0xff
 8002372:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002376:	e01b      	b.n	80023b0 <HAL_UART_Receive+0xe4>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	227f      	movs	r2, #127	; 0x7f
 800237c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002380:	e016      	b.n	80023b0 <HAL_UART_Receive+0xe4>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800238a:	d10d      	bne.n	80023a8 <HAL_UART_Receive+0xdc>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d104      	bne.n	800239e <HAL_UART_Receive+0xd2>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	227f      	movs	r2, #127	; 0x7f
 8002398:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800239c:	e008      	b.n	80023b0 <HAL_UART_Receive+0xe4>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	223f      	movs	r2, #63	; 0x3f
 80023a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80023a6:	e003      	b.n	80023b0 <HAL_UART_Receive+0xe4>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80023b6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c0:	d108      	bne.n	80023d4 <HAL_UART_Receive+0x108>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d104      	bne.n	80023d4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	e003      	b.n	80023dc <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80023e4:	e033      	b.n	800244e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2200      	movs	r2, #0
 80023ee:	2120      	movs	r1, #32
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 fd5c 	bl	8002eae <UART_WaitOnFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e032      	b.n	8002466 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10c      	bne.n	8002420 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800240c:	b29a      	uxth	r2, r3
 800240e:	8a7b      	ldrh	r3, [r7, #18]
 8002410:	4013      	ands	r3, r2
 8002412:	b29a      	uxth	r2, r3
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	3302      	adds	r3, #2
 800241c:	61bb      	str	r3, [r7, #24]
 800241e:	e00d      	b.n	800243c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002426:	b29b      	uxth	r3, r3
 8002428:	b2da      	uxtb	r2, r3
 800242a:	8a7b      	ldrh	r3, [r7, #18]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	4013      	ands	r3, r2
 8002430:	b2da      	uxtb	r2, r3
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3301      	adds	r3, #1
 800243a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002454:	b29b      	uxth	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1c5      	bne.n	80023e6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2220      	movs	r2, #32
 800245e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	e000      	b.n	8002466 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002464:	2302      	movs	r3, #2
  }
}
 8002466:	4618      	mov	r0, r3
 8002468:	3720      	adds	r7, #32
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b0ba      	sub	sp, #232	; 0xe8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002496:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800249a:	f640 030f 	movw	r3, #2063	; 0x80f
 800249e:	4013      	ands	r3, r2
 80024a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80024a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d115      	bne.n	80024d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80024ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024b0:	f003 0320 	and.w	r3, r3, #32
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00f      	beq.n	80024d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d009      	beq.n	80024d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 82a3 	beq.w	8002a14 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	4798      	blx	r3
      }
      return;
 80024d6:	e29d      	b.n	8002a14 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80024d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 8117 	beq.w	8002710 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80024e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d106      	bne.n	80024fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80024ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80024f2:	4b85      	ldr	r3, [pc, #532]	; (8002708 <HAL_UART_IRQHandler+0x298>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 810a 	beq.w	8002710 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80024fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d011      	beq.n	800252c <HAL_UART_IRQHandler+0xbc>
 8002508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800250c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00b      	beq.n	800252c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2201      	movs	r2, #1
 800251a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002522:	f043 0201 	orr.w	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800252c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d011      	beq.n	800255c <HAL_UART_IRQHandler+0xec>
 8002538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00b      	beq.n	800255c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2202      	movs	r2, #2
 800254a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002552:	f043 0204 	orr.w	r2, r3, #4
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800255c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d011      	beq.n	800258c <HAL_UART_IRQHandler+0x11c>
 8002568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00b      	beq.n	800258c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2204      	movs	r2, #4
 800257a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002582:	f043 0202 	orr.w	r2, r3, #2
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800258c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d017      	beq.n	80025c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d105      	bne.n	80025b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80025a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00b      	beq.n	80025c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2208      	movs	r2, #8
 80025b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025be:	f043 0208 	orr.w	r2, r3, #8
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80025c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d012      	beq.n	80025fa <HAL_UART_IRQHandler+0x18a>
 80025d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00c      	beq.n	80025fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025f0:	f043 0220 	orr.w	r2, r3, #32
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 8209 	beq.w	8002a18 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00d      	beq.n	800262e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	2b00      	cmp	r3, #0
 800261c:	d007      	beq.n	800262e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002634:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002642:	2b40      	cmp	r3, #64	; 0x40
 8002644:	d005      	beq.n	8002652 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800264a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800264e:	2b00      	cmp	r3, #0
 8002650:	d04f      	beq.n	80026f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fcef 	bl	8003036 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002662:	2b40      	cmp	r3, #64	; 0x40
 8002664:	d141      	bne.n	80026ea <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3308      	adds	r3, #8
 800266c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002670:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002674:	e853 3f00 	ldrex	r3, [r3]
 8002678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800267c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	3308      	adds	r3, #8
 800268e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002692:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800269a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800269e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80026a2:	e841 2300 	strex	r3, r2, [r1]
 80026a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80026aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1d9      	bne.n	8002666 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d013      	beq.n	80026e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026be:	4a13      	ldr	r2, [pc, #76]	; (800270c <HAL_UART_IRQHandler+0x29c>)
 80026c0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe f8e2 	bl	8000890 <HAL_DMA_Abort_IT>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d017      	beq.n	8002702 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80026dc:	4610      	mov	r0, r2
 80026de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e0:	e00f      	b.n	8002702 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f9ac 	bl	8002a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e8:	e00b      	b.n	8002702 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f9a8 	bl	8002a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f0:	e007      	b.n	8002702 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f9a4 	bl	8002a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002700:	e18a      	b.n	8002a18 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002702:	bf00      	nop
    return;
 8002704:	e188      	b.n	8002a18 <HAL_UART_IRQHandler+0x5a8>
 8002706:	bf00      	nop
 8002708:	04000120 	.word	0x04000120
 800270c:	080030fd 	.word	0x080030fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002714:	2b01      	cmp	r3, #1
 8002716:	f040 8143 	bne.w	80029a0 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800271a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800271e:	f003 0310 	and.w	r3, r3, #16
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 813c 	beq.w	80029a0 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800272c:	f003 0310 	and.w	r3, r3, #16
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8135 	beq.w	80029a0 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2210      	movs	r2, #16
 800273c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002748:	2b40      	cmp	r3, #64	; 0x40
 800274a:	f040 80b1 	bne.w	80028b0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800275a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 815c 	beq.w	8002a1c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800276a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800276e:	429a      	cmp	r2, r3
 8002770:	f080 8154 	bcs.w	8002a1c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800277a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	2b20      	cmp	r3, #32
 8002786:	f000 8085 	beq.w	8002894 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002792:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002796:	e853 3f00 	ldrex	r3, [r3]
 800279a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800279e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80027b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80027b8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027bc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80027c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027c4:	e841 2300 	strex	r3, r2, [r1]
 80027c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80027cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1da      	bne.n	800278a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	3308      	adds	r3, #8
 80027da:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027de:	e853 3f00 	ldrex	r3, [r3]
 80027e2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80027e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027e6:	f023 0301 	bic.w	r3, r3, #1
 80027ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3308      	adds	r3, #8
 80027f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027f8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80027fc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002800:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002804:	e841 2300 	strex	r3, r2, [r1]
 8002808:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800280a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1e1      	bne.n	80027d4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	3308      	adds	r3, #8
 8002816:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800281a:	e853 3f00 	ldrex	r3, [r3]
 800281e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	3308      	adds	r3, #8
 8002830:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002834:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002836:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002838:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800283a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800283c:	e841 2300 	strex	r3, r2, [r1]
 8002840:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002842:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1e3      	bne.n	8002810 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2220      	movs	r2, #32
 800284c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800285c:	e853 3f00 	ldrex	r3, [r3]
 8002860:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002864:	f023 0310 	bic.w	r3, r3, #16
 8002868:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002876:	65bb      	str	r3, [r7, #88]	; 0x58
 8002878:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800287c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800287e:	e841 2300 	strex	r3, r2, [r1]
 8002882:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1e4      	bne.n	8002854 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288e:	4618      	mov	r0, r3
 8002890:	f7fd ffc5 	bl	800081e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	4619      	mov	r1, r3
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f8d3 	bl	8002a54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80028ae:	e0b5      	b.n	8002a1c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80028bc:	b29b      	uxth	r3, r3
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 80a7 	beq.w	8002a20 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80028d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 80a2 	beq.w	8002a20 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e4:	e853 3f00 	ldrex	r3, [r3]
 80028e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002900:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002902:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002904:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002906:	e841 2300 	strex	r3, r2, [r1]
 800290a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800290c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1e4      	bne.n	80028dc <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	3308      	adds	r3, #8
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	e853 3f00 	ldrex	r3, [r3]
 8002920:	623b      	str	r3, [r7, #32]
   return(result);
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	3308      	adds	r3, #8
 8002932:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002936:	633a      	str	r2, [r7, #48]	; 0x30
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800293c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800293e:	e841 2300 	strex	r3, r2, [r1]
 8002942:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1e3      	bne.n	8002912 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2220      	movs	r2, #32
 800294e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	e853 3f00 	ldrex	r3, [r3]
 8002968:	60fb      	str	r3, [r7, #12]
   return(result);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f023 0310 	bic.w	r3, r3, #16
 8002970:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800297e:	61fb      	str	r3, [r7, #28]
 8002980:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002982:	69b9      	ldr	r1, [r7, #24]
 8002984:	69fa      	ldr	r2, [r7, #28]
 8002986:	e841 2300 	strex	r3, r2, [r1]
 800298a:	617b      	str	r3, [r7, #20]
   return(result);
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1e4      	bne.n	800295c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002992:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002996:	4619      	mov	r1, r3
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f85b 	bl	8002a54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800299e:	e03f      	b.n	8002a20 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80029a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00e      	beq.n	80029ca <HAL_UART_IRQHandler+0x55a>
 80029ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fbda 	bl	800317c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029c8:	e02d      	b.n	8002a26 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80029ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00e      	beq.n	80029f4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80029d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d01c      	beq.n	8002a24 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	4798      	blx	r3
    }
    return;
 80029f2:	e017      	b.n	8002a24 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80029f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d012      	beq.n	8002a26 <HAL_UART_IRQHandler+0x5b6>
 8002a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00c      	beq.n	8002a26 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fb8b 	bl	8003128 <UART_EndTransmit_IT>
    return;
 8002a12:	e008      	b.n	8002a26 <HAL_UART_IRQHandler+0x5b6>
      return;
 8002a14:	bf00      	nop
 8002a16:	e006      	b.n	8002a26 <HAL_UART_IRQHandler+0x5b6>
    return;
 8002a18:	bf00      	nop
 8002a1a:	e004      	b.n	8002a26 <HAL_UART_IRQHandler+0x5b6>
      return;
 8002a1c:	bf00      	nop
 8002a1e:	e002      	b.n	8002a26 <HAL_UART_IRQHandler+0x5b6>
      return;
 8002a20:	bf00      	nop
 8002a22:	e000      	b.n	8002a26 <HAL_UART_IRQHandler+0x5b6>
    return;
 8002a24:	bf00      	nop
  }

}
 8002a26:	37e8      	adds	r7, #232	; 0xe8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4b8a      	ldr	r3, [pc, #552]	; (8002cc0 <UART_SetConfig+0x254>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	6979      	ldr	r1, [r7, #20]
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a78      	ldr	r2, [pc, #480]	; (8002cc4 <UART_SetConfig+0x258>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d120      	bne.n	8002b2a <UART_SetConfig+0xbe>
 8002ae8:	4b77      	ldr	r3, [pc, #476]	; (8002cc8 <UART_SetConfig+0x25c>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d817      	bhi.n	8002b24 <UART_SetConfig+0xb8>
 8002af4:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <UART_SetConfig+0x90>)
 8002af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afa:	bf00      	nop
 8002afc:	08002b0d 	.word	0x08002b0d
 8002b00:	08002b19 	.word	0x08002b19
 8002b04:	08002b1f 	.word	0x08002b1f
 8002b08:	08002b13 	.word	0x08002b13
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	77fb      	strb	r3, [r7, #31]
 8002b10:	e01d      	b.n	8002b4e <UART_SetConfig+0xe2>
 8002b12:	2302      	movs	r3, #2
 8002b14:	77fb      	strb	r3, [r7, #31]
 8002b16:	e01a      	b.n	8002b4e <UART_SetConfig+0xe2>
 8002b18:	2304      	movs	r3, #4
 8002b1a:	77fb      	strb	r3, [r7, #31]
 8002b1c:	e017      	b.n	8002b4e <UART_SetConfig+0xe2>
 8002b1e:	2308      	movs	r3, #8
 8002b20:	77fb      	strb	r3, [r7, #31]
 8002b22:	e014      	b.n	8002b4e <UART_SetConfig+0xe2>
 8002b24:	2310      	movs	r3, #16
 8002b26:	77fb      	strb	r3, [r7, #31]
 8002b28:	e011      	b.n	8002b4e <UART_SetConfig+0xe2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a67      	ldr	r2, [pc, #412]	; (8002ccc <UART_SetConfig+0x260>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d102      	bne.n	8002b3a <UART_SetConfig+0xce>
 8002b34:	2300      	movs	r3, #0
 8002b36:	77fb      	strb	r3, [r7, #31]
 8002b38:	e009      	b.n	8002b4e <UART_SetConfig+0xe2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a64      	ldr	r2, [pc, #400]	; (8002cd0 <UART_SetConfig+0x264>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d102      	bne.n	8002b4a <UART_SetConfig+0xde>
 8002b44:	2300      	movs	r3, #0
 8002b46:	77fb      	strb	r3, [r7, #31]
 8002b48:	e001      	b.n	8002b4e <UART_SetConfig+0xe2>
 8002b4a:	2310      	movs	r3, #16
 8002b4c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b56:	d15b      	bne.n	8002c10 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002b58:	7ffb      	ldrb	r3, [r7, #31]
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d827      	bhi.n	8002bae <UART_SetConfig+0x142>
 8002b5e:	a201      	add	r2, pc, #4	; (adr r2, 8002b64 <UART_SetConfig+0xf8>)
 8002b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b64:	08002b89 	.word	0x08002b89
 8002b68:	08002b91 	.word	0x08002b91
 8002b6c:	08002b99 	.word	0x08002b99
 8002b70:	08002baf 	.word	0x08002baf
 8002b74:	08002b9f 	.word	0x08002b9f
 8002b78:	08002baf 	.word	0x08002baf
 8002b7c:	08002baf 	.word	0x08002baf
 8002b80:	08002baf 	.word	0x08002baf
 8002b84:	08002ba7 	.word	0x08002ba7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b88:	f7ff fa7a 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 8002b8c:	61b8      	str	r0, [r7, #24]
        break;
 8002b8e:	e013      	b.n	8002bb8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b90:	f7ff fa98 	bl	80020c4 <HAL_RCC_GetPCLK2Freq>
 8002b94:	61b8      	str	r0, [r7, #24]
        break;
 8002b96:	e00f      	b.n	8002bb8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b98:	4b4e      	ldr	r3, [pc, #312]	; (8002cd4 <UART_SetConfig+0x268>)
 8002b9a:	61bb      	str	r3, [r7, #24]
        break;
 8002b9c:	e00c      	b.n	8002bb8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b9e:	f7ff f9f9 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8002ba2:	61b8      	str	r0, [r7, #24]
        break;
 8002ba4:	e008      	b.n	8002bb8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002baa:	61bb      	str	r3, [r7, #24]
        break;
 8002bac:	e004      	b.n	8002bb8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	77bb      	strb	r3, [r7, #30]
        break;
 8002bb6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d074      	beq.n	8002ca8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	005a      	lsls	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	085b      	lsrs	r3, r3, #1
 8002bc8:	441a      	add	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	2b0f      	cmp	r3, #15
 8002bda:	d916      	bls.n	8002c0a <UART_SetConfig+0x19e>
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be2:	d212      	bcs.n	8002c0a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	f023 030f 	bic.w	r3, r3, #15
 8002bec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	085b      	lsrs	r3, r3, #1
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	89fb      	ldrh	r3, [r7, #14]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	89fa      	ldrh	r2, [r7, #14]
 8002c06:	60da      	str	r2, [r3, #12]
 8002c08:	e04e      	b.n	8002ca8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	77bb      	strb	r3, [r7, #30]
 8002c0e:	e04b      	b.n	8002ca8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c10:	7ffb      	ldrb	r3, [r7, #31]
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d827      	bhi.n	8002c66 <UART_SetConfig+0x1fa>
 8002c16:	a201      	add	r2, pc, #4	; (adr r2, 8002c1c <UART_SetConfig+0x1b0>)
 8002c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1c:	08002c41 	.word	0x08002c41
 8002c20:	08002c49 	.word	0x08002c49
 8002c24:	08002c51 	.word	0x08002c51
 8002c28:	08002c67 	.word	0x08002c67
 8002c2c:	08002c57 	.word	0x08002c57
 8002c30:	08002c67 	.word	0x08002c67
 8002c34:	08002c67 	.word	0x08002c67
 8002c38:	08002c67 	.word	0x08002c67
 8002c3c:	08002c5f 	.word	0x08002c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c40:	f7ff fa1e 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 8002c44:	61b8      	str	r0, [r7, #24]
        break;
 8002c46:	e013      	b.n	8002c70 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c48:	f7ff fa3c 	bl	80020c4 <HAL_RCC_GetPCLK2Freq>
 8002c4c:	61b8      	str	r0, [r7, #24]
        break;
 8002c4e:	e00f      	b.n	8002c70 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c50:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <UART_SetConfig+0x268>)
 8002c52:	61bb      	str	r3, [r7, #24]
        break;
 8002c54:	e00c      	b.n	8002c70 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c56:	f7ff f99d 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8002c5a:	61b8      	str	r0, [r7, #24]
        break;
 8002c5c:	e008      	b.n	8002c70 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c62:	61bb      	str	r3, [r7, #24]
        break;
 8002c64:	e004      	b.n	8002c70 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	77bb      	strb	r3, [r7, #30]
        break;
 8002c6e:	bf00      	nop
    }

    if (pclk != 0U)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d018      	beq.n	8002ca8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	085a      	lsrs	r2, r3, #1
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	441a      	add	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	2b0f      	cmp	r3, #15
 8002c90:	d908      	bls.n	8002ca4 <UART_SetConfig+0x238>
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c98:	d204      	bcs.n	8002ca4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	e001      	b.n	8002ca8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002cb4:	7fbb      	ldrb	r3, [r7, #30]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3720      	adds	r7, #32
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	efff69f3 	.word	0xefff69f3
 8002cc4:	40013800 	.word	0x40013800
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40004400 	.word	0x40004400
 8002cd0:	40004800 	.word	0x40004800
 8002cd4:	007a1200 	.word	0x007a1200

08002cd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	f003 0310 	and.w	r3, r3, #16
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d01a      	beq.n	8002dee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dd6:	d10a      	bne.n	8002dee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	605a      	str	r2, [r3, #4]
  }
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e2c:	f7fd fbda 	bl	80005e4 <HAL_GetTick>
 8002e30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d10e      	bne.n	8002e5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f82d 	bl	8002eae <UART_WaitOnFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e023      	b.n	8002ea6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d10e      	bne.n	8002e8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f817 	bl	8002eae <UART_WaitOnFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e00d      	b.n	8002ea6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2220      	movs	r2, #32
 8002e94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b09c      	sub	sp, #112	; 0x70
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	603b      	str	r3, [r7, #0]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ebe:	e0a5      	b.n	800300c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ec6:	f000 80a1 	beq.w	800300c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eca:	f7fd fb8b 	bl	80005e4 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d302      	bcc.n	8002ee0 <UART_WaitOnFlagUntilTimeout+0x32>
 8002eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d13e      	bne.n	8002f5e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ee8:	e853 3f00 	ldrex	r3, [r3]
 8002eec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ef4:	667b      	str	r3, [r7, #100]	; 0x64
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002efe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f00:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002f04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f06:	e841 2300 	strex	r3, r2, [r1]
 8002f0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1e6      	bne.n	8002ee0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3308      	adds	r3, #8
 8002f18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1c:	e853 3f00 	ldrex	r3, [r3]
 8002f20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	663b      	str	r3, [r7, #96]	; 0x60
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3308      	adds	r3, #8
 8002f30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f32:	64ba      	str	r2, [r7, #72]	; 0x48
 8002f34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002f38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f3a:	e841 2300 	strex	r3, r2, [r1]
 8002f3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1e5      	bne.n	8002f12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e067      	b.n	800302e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d04f      	beq.n	800300c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f7a:	d147      	bne.n	800300c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8e:	e853 3f00 	ldrex	r3, [r3]
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8002fa6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002faa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fac:	e841 2300 	strex	r3, r2, [r1]
 8002fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1e6      	bne.n	8002f86 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3308      	adds	r3, #8
 8002fbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	e853 3f00 	ldrex	r3, [r3]
 8002fc6:	613b      	str	r3, [r7, #16]
   return(result);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3308      	adds	r3, #8
 8002fd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002fd8:	623a      	str	r2, [r7, #32]
 8002fda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fdc:	69f9      	ldr	r1, [r7, #28]
 8002fde:	6a3a      	ldr	r2, [r7, #32]
 8002fe0:	e841 2300 	strex	r3, r2, [r1]
 8002fe4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e5      	bne.n	8002fb8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e010      	b.n	800302e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	69da      	ldr	r2, [r3, #28]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4013      	ands	r3, r2
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	429a      	cmp	r2, r3
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	429a      	cmp	r2, r3
 8003028:	f43f af4a 	beq.w	8002ec0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3770      	adds	r7, #112	; 0x70
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003036:	b480      	push	{r7}
 8003038:	b095      	sub	sp, #84	; 0x54
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003046:	e853 3f00 	ldrex	r3, [r3]
 800304a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800304c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800305c:	643b      	str	r3, [r7, #64]	; 0x40
 800305e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003060:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003062:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003064:	e841 2300 	strex	r3, r2, [r1]
 8003068:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e6      	bne.n	800303e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3308      	adds	r3, #8
 8003076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	e853 3f00 	ldrex	r3, [r3]
 800307e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	64bb      	str	r3, [r7, #72]	; 0x48
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3308      	adds	r3, #8
 800308e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003090:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003092:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003094:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003098:	e841 2300 	strex	r3, r2, [r1]
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1e5      	bne.n	8003070 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d118      	bne.n	80030de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	e853 3f00 	ldrex	r3, [r3]
 80030b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f023 0310 	bic.w	r3, r3, #16
 80030c0:	647b      	str	r3, [r7, #68]	; 0x44
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	461a      	mov	r2, r3
 80030c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ca:	61bb      	str	r3, [r7, #24]
 80030cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ce:	6979      	ldr	r1, [r7, #20]
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	e841 2300 	strex	r3, r2, [r1]
 80030d6:	613b      	str	r3, [r7, #16]
   return(result);
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1e6      	bne.n	80030ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2220      	movs	r2, #32
 80030e2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	665a      	str	r2, [r3, #100]	; 0x64
}
 80030f0:	bf00      	nop
 80030f2:	3754      	adds	r7, #84	; 0x54
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f7ff fc90 	bl	8002a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	e853 3f00 	ldrex	r3, [r3]
 800313c:	60bb      	str	r3, [r7, #8]
   return(result);
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	61bb      	str	r3, [r7, #24]
 8003150:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003152:	6979      	ldr	r1, [r7, #20]
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	e841 2300 	strex	r3, r2, [r1]
 800315a:	613b      	str	r3, [r7, #16]
   return(result);
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1e6      	bne.n	8003130 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2220      	movs	r2, #32
 8003166:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff fc5c 	bl	8002a2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003174:	bf00      	nop
 8003176:	3720      	adds	r7, #32
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <__libc_init_array>:
 8003190:	b570      	push	{r4, r5, r6, lr}
 8003192:	4d0d      	ldr	r5, [pc, #52]	; (80031c8 <__libc_init_array+0x38>)
 8003194:	4c0d      	ldr	r4, [pc, #52]	; (80031cc <__libc_init_array+0x3c>)
 8003196:	1b64      	subs	r4, r4, r5
 8003198:	10a4      	asrs	r4, r4, #2
 800319a:	2600      	movs	r6, #0
 800319c:	42a6      	cmp	r6, r4
 800319e:	d109      	bne.n	80031b4 <__libc_init_array+0x24>
 80031a0:	4d0b      	ldr	r5, [pc, #44]	; (80031d0 <__libc_init_array+0x40>)
 80031a2:	4c0c      	ldr	r4, [pc, #48]	; (80031d4 <__libc_init_array+0x44>)
 80031a4:	f000 f820 	bl	80031e8 <_init>
 80031a8:	1b64      	subs	r4, r4, r5
 80031aa:	10a4      	asrs	r4, r4, #2
 80031ac:	2600      	movs	r6, #0
 80031ae:	42a6      	cmp	r6, r4
 80031b0:	d105      	bne.n	80031be <__libc_init_array+0x2e>
 80031b2:	bd70      	pop	{r4, r5, r6, pc}
 80031b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b8:	4798      	blx	r3
 80031ba:	3601      	adds	r6, #1
 80031bc:	e7ee      	b.n	800319c <__libc_init_array+0xc>
 80031be:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c2:	4798      	blx	r3
 80031c4:	3601      	adds	r6, #1
 80031c6:	e7f2      	b.n	80031ae <__libc_init_array+0x1e>
 80031c8:	08003238 	.word	0x08003238
 80031cc:	08003238 	.word	0x08003238
 80031d0:	08003238 	.word	0x08003238
 80031d4:	0800323c 	.word	0x0800323c

080031d8 <memset>:
 80031d8:	4402      	add	r2, r0
 80031da:	4603      	mov	r3, r0
 80031dc:	4293      	cmp	r3, r2
 80031de:	d100      	bne.n	80031e2 <memset+0xa>
 80031e0:	4770      	bx	lr
 80031e2:	f803 1b01 	strb.w	r1, [r3], #1
 80031e6:	e7f9      	b.n	80031dc <memset+0x4>

080031e8 <_init>:
 80031e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ea:	bf00      	nop
 80031ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ee:	bc08      	pop	{r3}
 80031f0:	469e      	mov	lr, r3
 80031f2:	4770      	bx	lr

080031f4 <_fini>:
 80031f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f6:	bf00      	nop
 80031f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031fa:	bc08      	pop	{r3}
 80031fc:	469e      	mov	lr, r3
 80031fe:	4770      	bx	lr
