
STMF446_RMD_SteppingMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000831c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000790  080084ec  080084ec  000184ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c7c  08008c7c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008c7c  08008c7c  00018c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c84  08008c84  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c84  08008c84  00018c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c88  08008c88  00018c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a8  20000070  08008cfc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000918  08008cfc  00020918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128a2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002763  00000000  00000000  00032942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  000350a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00036120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000420e  00000000  00000000  000370a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c30  00000000  00000000  0003b2ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d869f  00000000  00000000  0004dede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012657d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dc8  00000000  00000000  001265d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080084d4 	.word	0x080084d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080084d4 	.word	0x080084d4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <tmc2209_readWriteArray>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void tmc2209_readWriteArray(uint8_t channel, uint8_t *data, size_t writeLength, size_t readLength)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60b9      	str	r1, [r7, #8]
 80005bc:	607a      	str	r2, [r7, #4]
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	4603      	mov	r3, r0
 80005c2:	73fb      	strb	r3, [r7, #15]
	//set your uart read write
	//UART_readWrite(channelToUART(channel), data, writeLength, readLength);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 80005c4:	480e      	ldr	r0, [pc, #56]	; (8000600 <tmc2209_readWriteArray+0x4c>)
 80005c6:	f005 fe13 	bl	80061f0 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart1, data, writeLength,3000);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005d2:	68b9      	ldr	r1, [r7, #8]
 80005d4:	480a      	ldr	r0, [pc, #40]	; (8000600 <tmc2209_readWriteArray+0x4c>)
 80005d6:	f005 f9f9 	bl	80059cc <HAL_UART_Transmit>

	if(readLength > 0){
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00a      	beq.n	80005f6 <tmc2209_readWriteArray+0x42>
		HAL_HalfDuplex_EnableReceiver(&huart1);
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <tmc2209_readWriteArray+0x4c>)
 80005e2:	f005 fe39 	bl	8006258 <HAL_HalfDuplex_EnableReceiver>
		HAL_UART_Receive(&huart1, data, readLength, 3000);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005ee:	68b9      	ldr	r1, [r7, #8]
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <tmc2209_readWriteArray+0x4c>)
 80005f2:	f005 fa7d 	bl	8005af0 <HAL_UART_Receive>
	}
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000fc 	.word	0x200000fc

08000604 <tmc2209_CRC8>:

uint8_t tmc2209_CRC8(uint8_t *data, size_t length)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
	return TMC2209_CRC(data, length);
 800060e:	2201      	movs	r2, #1
 8000610:	6839      	ldr	r1, [r7, #0]
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f006 fbc6 	bl	8006da4 <tmc_CRC8>
 8000618:	4603      	mov	r3, r0
}
 800061a:	4618      	mov	r0, r3
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <reset>:
uint8_t uart_data;
char tx_data[]="get_data\r\n";
int flag = 1;

static uint8_t reset()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	//StepDir_init(STEPDIR_PRECISION);
	//StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.DIAG);

	return tmc2209_reset(&TMC2209);
 8000628:	4802      	ldr	r0, [pc, #8]	; (8000634 <reset+0x10>)
 800062a:	f006 fdf3 	bl	8007214 <tmc2209_reset>
 800062e:	4603      	mov	r3, r0
}
 8000630:	4618      	mov	r0, r3
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000184 	.word	0x20000184

08000638 <restore>:

static uint8_t restore()
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	return tmc2209_restore(&TMC2209);
 800063c:	4802      	ldr	r0, [pc, #8]	; (8000648 <restore+0x10>)
 800063e:	f006 fe23 	bl	8007288 <tmc2209_restore>
 8000642:	4603      	mov	r3, r0
}
 8000644:	4618      	mov	r0, r3
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000184 	.word	0x20000184

0800064c <TMC2209_INIT>:


void TMC2209_INIT()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 8000652:	2201      	movs	r2, #1
 8000654:	2101      	movs	r1, #1
 8000656:	2007      	movs	r0, #7
 8000658:	f006 faec 	bl	8006c34 <tmc_fillCRC8Table>

	TMC2209_config.reset = reset;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <TMC2209_INIT+0x38>)
 800065e:	4a0a      	ldr	r2, [pc, #40]	; (8000688 <TMC2209_INIT+0x3c>)
 8000660:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	TMC2209_config.restore = restore;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <TMC2209_INIT+0x38>)
 8000666:	4a09      	ldr	r2, [pc, #36]	; (800068c <TMC2209_INIT+0x40>)
 8000668:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	tmc2209_init(&TMC2209, 0, 0, &TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <TMC2209_INIT+0x44>)
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <TMC2209_INIT+0x38>)
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	4807      	ldr	r0, [pc, #28]	; (8000694 <TMC2209_INIT+0x48>)
 8000678:	f006 fce8 	bl	800704c <tmc2209_init>


	//restore();
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	2000040c 	.word	0x2000040c
 8000688:	08000625 	.word	0x08000625
 800068c:	08000639 	.word	0x08000639
 8000690:	0800894c 	.word	0x0800894c
 8000694:	20000184 	.word	0x20000184

08000698 <HAL_GPIO_EXTI_Callback>:
	return &TMC2209;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
	//stepper 0 end stop senssor
	if(GPIO_Pin == GPIO_PIN_6 ){
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	2b40      	cmp	r3, #64	; 0x40
 80006a6:	d11b      	bne.n	80006e0 <HAL_GPIO_EXTI_Callback+0x48>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 80006a8:	2140      	movs	r1, #64	; 0x40
 80006aa:	481b      	ldr	r0, [pc, #108]	; (8000718 <HAL_GPIO_EXTI_Callback+0x80>)
 80006ac:	f003 fb08 	bl	8003cc0 <HAL_GPIO_ReadPin>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d106      	bne.n	80006c4 <HAL_GPIO_EXTI_Callback+0x2c>
			end_stop_state |= 1;
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <HAL_GPIO_EXTI_Callback+0x84>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <HAL_GPIO_EXTI_Callback+0x84>)
 80006c2:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 80006c4:	2140      	movs	r1, #64	; 0x40
 80006c6:	4814      	ldr	r0, [pc, #80]	; (8000718 <HAL_GPIO_EXTI_Callback+0x80>)
 80006c8:	f003 fafa 	bl	8003cc0 <HAL_GPIO_ReadPin>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d006      	beq.n	80006e0 <HAL_GPIO_EXTI_Callback+0x48>
			end_stop_state &= ~1;
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <HAL_GPIO_EXTI_Callback+0x84>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	f023 0301 	bic.w	r3, r3, #1
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_GPIO_EXTI_Callback+0x84>)
 80006de:	701a      	strb	r2, [r3, #0]
		}
	}
	if(GPIO_Pin == GPIO_PIN_7 ){
 80006e0:	88fb      	ldrh	r3, [r7, #6]
 80006e2:	2b80      	cmp	r3, #128	; 0x80
 80006e4:	d114      	bne.n	8000710 <HAL_GPIO_EXTI_Callback+0x78>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)){
 80006e6:	2180      	movs	r1, #128	; 0x80
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <HAL_GPIO_EXTI_Callback+0x80>)
 80006ea:	f003 fae9 	bl	8003cc0 <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d103      	bne.n	80006fc <HAL_GPIO_EXTI_Callback+0x64>
			current_stall|= 0;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <HAL_GPIO_EXTI_Callback+0x88>)
 80006f6:	781a      	ldrb	r2, [r3, #0]
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_GPIO_EXTI_Callback+0x88>)
 80006fa:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)){
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	4806      	ldr	r0, [pc, #24]	; (8000718 <HAL_GPIO_EXTI_Callback+0x80>)
 8000700:	f003 fade 	bl	8003cc0 <HAL_GPIO_ReadPin>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d002      	beq.n	8000710 <HAL_GPIO_EXTI_Callback+0x78>
			current_stall = 1;
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <HAL_GPIO_EXTI_Callback+0x88>)
 800070c:	2201      	movs	r2, #1
 800070e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40020400 	.word	0x40020400
 800071c:	20000670 	.word	0x20000670
 8000720:	20000672 	.word	0x20000672

08000724 <Step0>:
void Step0(){                                       //step pin
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	//pull+

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <Step0+0x20>)
 8000730:	f003 fade 	bl	8003cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073a:	4802      	ldr	r0, [pc, #8]	; (8000744 <Step0+0x20>)
 800073c:	f003 fad8 	bl	8003cf0 <HAL_GPIO_WritePin>
	/*
	 * pull-
	 * HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
	 * HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
	 */
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40020400 	.word	0x40020400

08000748 <Dir0>:

void Dir0(int dir){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, dir); //Dir0関数にdirピンを指定して格納
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	461a      	mov	r2, r3
 8000756:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075a:	4803      	ldr	r0, [pc, #12]	; (8000768 <Dir0+0x20>)
 800075c:	f003 fac8 	bl	8003cf0 <HAL_GPIO_WritePin>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40020400 	.word	0x40020400

0800076c <resetStepper>:
	si->stepPosition = 0;
	si->movementDone = 0;
}


void resetStepper(volatile stepperInfo* si){    //resetStepper関数に引数をstepperInfo構造隊にポイント型変数siとして与える
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	si->c0 = si->acceleration;      //変数*siがメンバc0にアクセス.した値に変数*siがメンバaccelerationにアクセス.した値を代入する
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	edd3 7a00 	vldr	s15, [r3]
 800077a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800077e:	ee17 2a90 	vmov	r2, s15
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	615a      	str	r2, [r3, #20]
	si->d = si->c0;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	ee07 3a90 	vmov	s15, r3
 800078e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	si->di = si->d;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800079e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007a2:	ee17 2a90 	vmov	r2, s15
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	649a      	str	r2, [r3, #72]	; 0x48
	si->stepCount = 0;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2200      	movs	r2, #0
 80007ae:	64da      	str	r2, [r3, #76]	; 0x4c
	si->n = 0;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2200      	movs	r2, #0
 80007b4:	641a      	str	r2, [r3, #64]	; 0x40
	si->rampUpStepCount = 0;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2200      	movs	r2, #0
 80007ba:	63da      	str	r2, [r3, #60]	; 0x3c
	si->movementDone = 0;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2200      	movs	r2, #0
 80007c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <prepareMovement>:

volatile uint8_t remainingSteppersFlag = 0; //remainingSteppersFlagをuint8_t型で定義し、初期化

void prepareMovement(int steps){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	if(steps == 0){
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d039      	beq.n	8000852 <prepareMovement+0x82>
		return;
	}
	volatile stepperInfo* si = &steppers[0];
 80007de:	4b1f      	ldr	r3, [pc, #124]	; (800085c <prepareMovement+0x8c>)
 80007e0:	60fb      	str	r3, [r7, #12]
	if(si->dir_inv){
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	6a1b      	ldr	r3, [r3, #32]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d011      	beq.n	800080e <prepareMovement+0x3e>
		si->dirFunc( steps < 0 ? 0 : 1);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	43d2      	mvns	r2, r2
 80007f2:	0fd2      	lsrs	r2, r2, #31
 80007f4:	b2d2      	uxtb	r2, r2
 80007f6:	4610      	mov	r0, r2
 80007f8:	4798      	blx	r3
		si->dir = steps > 0 ? -1:1;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	dd02      	ble.n	8000806 <prepareMovement+0x36>
 8000800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000804:	e000      	b.n	8000808 <prepareMovement+0x38>
 8000806:	2201      	movs	r2, #1
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	61da      	str	r2, [r3, #28]
 800080c:	e00e      	b.n	800082c <prepareMovement+0x5c>
	}else{
		si->dirFunc( steps < 0 ? 1 : 0);
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	689b      	ldr	r3, [r3, #8]
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	0fd2      	lsrs	r2, r2, #31
 8000816:	4610      	mov	r0, r2
 8000818:	4798      	blx	r3
		si->dir = steps > 0 ? 1:-1;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2b00      	cmp	r3, #0
 800081e:	dd01      	ble.n	8000824 <prepareMovement+0x54>
 8000820:	2201      	movs	r2, #1
 8000822:	e001      	b.n	8000828 <prepareMovement+0x58>
 8000824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	61da      	str	r2, [r3, #28]
	}
		si->totalSteps = abs(steps);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	bfb8      	it	lt
 8000832:	425b      	neglt	r3, r3
 8000834:	461a      	mov	r2, r3
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	635a      	str	r2, [r3, #52]	; 0x34
		resetStepper(si);
 800083a:	68f8      	ldr	r0, [r7, #12]
 800083c:	f7ff ff96 	bl	800076c <resetStepper>
		remainingSteppersFlag |= (1 << 0);
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <prepareMovement+0x90>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	b2da      	uxtb	r2, r3
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <prepareMovement+0x90>)
 800084e:	701a      	strb	r2, [r3, #0]
 8000850:	e000      	b.n	8000854 <prepareMovement+0x84>
		return;
 8000852:	bf00      	nop

}
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000620 	.word	0x20000620
 8000860:	200006f8 	.word	0x200006f8

08000864 <prepareAbsoluteMovement>:

void prepareAbsoluteMovement(int absolute_steps){   //prepareAbsoluteMovementで与えられたステップ数だけモータを回す(main文から）
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	printf("absolute_steps:%d\r\n",absolute_steps);
 800086c:	6879      	ldr	r1, [r7, #4]
 800086e:	4820      	ldr	r0, [pc, #128]	; (80008f0 <prepareAbsoluteMovement+0x8c>)
 8000870:	f006 fd56 	bl	8007320 <iprintf>
	volatile stepperInfo* si = &steppers[0];	//steppers[0]のアドレスをstepperInfo* si に代入
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <prepareAbsoluteMovement+0x90>)
 8000876:	60fb      	str	r3, [r7, #12]
	int steps = absolute_steps - si->stepPosition;	//目標値からstepPositionを引いた値（stepposition=毎ステップカウントされるdirの値)
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	60bb      	str	r3, [r7, #8]
	printf("steps:%d\r\n",steps);
 8000882:	68b9      	ldr	r1, [r7, #8]
 8000884:	481c      	ldr	r0, [pc, #112]	; (80008f8 <prepareAbsoluteMovement+0x94>)
 8000886:	f006 fd4b 	bl	8007320 <iprintf>
	if(steps == 0){
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d02b      	beq.n	80008e8 <prepareAbsoluteMovement+0x84>
					return;
				}
	si->dirFunc( steps < 0 ? 1 : 0);
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	68ba      	ldr	r2, [r7, #8]
 8000896:	0fd2      	lsrs	r2, r2, #31
 8000898:	4610      	mov	r0, r2
 800089a:	4798      	blx	r3
	si->dir = steps > 0 ? 1:-1;
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	dd01      	ble.n	80008a6 <prepareAbsoluteMovement+0x42>
 80008a2:	2201      	movs	r2, #1
 80008a4:	e001      	b.n	80008aa <prepareAbsoluteMovement+0x46>
 80008a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	61da      	str	r2, [r3, #28]
	//printf("prepareAbsoluteMovement\r\n");
	si->totalSteps = abs(steps);	//stepsの値をアブソリュートでtotalstepsに格納
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	bfb8      	it	lt
 80008b4:	425b      	neglt	r3, r3
 80008b6:	461a      	mov	r2, r3
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	635a      	str	r2, [r3, #52]	; 0x34
	printf("steps:%d\r\n",si->totalSteps);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008c0:	4619      	mov	r1, r3
 80008c2:	480d      	ldr	r0, [pc, #52]	; (80008f8 <prepareAbsoluteMovement+0x94>)
 80008c4:	f006 fd2c 	bl	8007320 <iprintf>

	resetStepper(si);
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f7ff ff4f 	bl	800076c <resetStepper>
	printf("steps:%d\r\n",steps);
 80008ce:	68b9      	ldr	r1, [r7, #8]
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <prepareAbsoluteMovement+0x94>)
 80008d2:	f006 fd25 	bl	8007320 <iprintf>
	remainingSteppersFlag |= (1 << 0);
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <prepareAbsoluteMovement+0x98>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <prepareAbsoluteMovement+0x98>)
 80008e4:	701a      	strb	r2, [r3, #0]
 80008e6:	e000      	b.n	80008ea <prepareAbsoluteMovement+0x86>
					return;
 80008e8:	bf00      	nop
}
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	080084ec 	.word	0x080084ec
 80008f4:	20000620 	.word	0x20000620
 80008f8:	08008500 	.word	0x08008500
 80008fc:	200006f8 	.word	0x200006f8

08000900 <setNextInterruptInterval>:
			t->checkcount=0;
		}
}
volatile uint8_t nextStepperFlag = 0;

void setNextInterruptInterval(){
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0

	unsigned int mind = 999999;
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <setNextInterruptInterval+0x7c>)
 8000908:	607b      	str	r3, [r7, #4]
//	currentcheck();
		if( ((1 << 0)& remainingSteppersFlag) && steppers[0].di < mind ){
 800090a:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <setNextInterruptInterval+0x80>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d007      	beq.n	800092a <setNextInterruptInterval+0x2a>
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <setNextInterruptInterval+0x84>)
 800091c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	429a      	cmp	r2, r3
 8000922:	d902      	bls.n	800092a <setNextInterruptInterval+0x2a>
			mind = steppers[0].di;
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <setNextInterruptInterval+0x84>)
 8000926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000928:	607b      	str	r3, [r7, #4]
		}
		nextStepperFlag = 0;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <setNextInterruptInterval+0x88>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]

			if( (1 << 0) && steppers[0].di == mind ){
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <setNextInterruptInterval+0x84>)
 8000932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	429a      	cmp	r2, r3
 8000938:	d107      	bne.n	800094a <setNextInterruptInterval+0x4a>
				nextStepperFlag |= (1 << 0);
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <setNextInterruptInterval+0x88>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <setNextInterruptInterval+0x88>)
 8000948:	701a      	strb	r2, [r3, #0]
			}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);		//mindにコンペアを設定
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <setNextInterruptInterval+0x8c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	635a      	str	r2, [r3, #52]	; 0x34
			//printf("mind:%d \r\n",mind);

	if (remainingSteppersFlag == 0){
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <setNextInterruptInterval+0x80>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b00      	cmp	r3, #0
 800095a:	d104      	bne.n	8000966 <setNextInterruptInterval+0x66>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);    //65500→コンペアマッチさせない
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <setNextInterruptInterval+0x8c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8000964:	635a      	str	r2, [r3, #52]	; 0x34
	}

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <setNextInterruptInterval+0x8c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 800096e:	bf00      	nop

}
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	000f423f 	.word	0x000f423f
 8000980:	200006f8 	.word	0x200006f8
 8000984:	20000620 	.word	0x20000620
 8000988:	200006f9 	.word	0x200006f9
 800098c:	200000b4 	.word	0x200000b4

08000990 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){      //指定したコンペアを超えた時発火
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	//HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);

	if(htim == &htim3){
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a6e      	ldr	r2, [pc, #440]	; (8000b54 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 800099c:	4293      	cmp	r3, r2
 800099e:	f040 80d5 	bne.w	8000b4c <HAL_TIM_OC_DelayElapsedCallback+0x1bc>
	unsigned int tmpCtr = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1);	//指定されたタイマーチャンネルのコンペアを所得
 80009a2:	4b6c      	ldr	r3, [pc, #432]	; (8000b54 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009a8:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);			//コンペアを65500にセット
 80009aa:	4b6a      	ldr	r3, [pc, #424]	; (8000b54 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80009b2:	635a      	str	r2, [r3, #52]	; 0x34

	if( homing_flag & (1 << 0)){
 80009b4:	4b68      	ldr	r3, [pc, #416]	; (8000b58 <HAL_TIM_OC_DelayElapsedCallback+0x1c8>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d00d      	beq.n	80009dc <HAL_TIM_OC_DelayElapsedCallback+0x4c>
				if(end_stop_state & (1 << 0)){
 80009c0:	4b66      	ldr	r3, [pc, #408]	; (8000b5c <HAL_TIM_OC_DelayElapsedCallback+0x1cc>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d007      	beq.n	80009dc <HAL_TIM_OC_DelayElapsedCallback+0x4c>
					remainingSteppersFlag &= ~(1 << 0);
 80009cc:	4b64      	ldr	r3, [pc, #400]	; (8000b60 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	f023 0301 	bic.w	r3, r3, #1
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	4b61      	ldr	r3, [pc, #388]	; (8000b60 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 80009da:	701a      	strb	r2, [r3, #0]
				}
			}
	if ( ! (nextStepperFlag & (1 << 0)) ){				//nextStepperFlagが真でない(0なら)
 80009dc:	4b61      	ldr	r3, [pc, #388]	; (8000b64 <HAL_TIM_OC_DelayElapsedCallback+0x1d4>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d105      	bne.n	80009f6 <HAL_TIM_OC_DelayElapsedCallback+0x66>
			steppers[0].di -= tmpCtr;           //tmpCtrの値からsteppers[i].di引いた値を新しくsteppers[i].diに代入
 80009ea:	4b5f      	ldr	r3, [pc, #380]	; (8000b68 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80009ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	4a5d      	ldr	r2, [pc, #372]	; (8000b68 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80009f4:	6493      	str	r3, [r2, #72]	; 0x48
		}
		//printf("steppers:%ld \r\n",steppers[0].di);

		volatile stepperInfo* s = &steppers[0];
 80009f6:	4b5c      	ldr	r3, [pc, #368]	; (8000b68 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80009f8:	60bb      	str	r3, [r7, #8]

		if( (s->stepCount) < (s->totalSteps)&& !(current_stall)  ){		//1周ごとにカウントしたstepCountがabs(steps)より小さかったら==動作が終了するまで
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d224      	bcs.n	8000a50 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
 8000a06:	4b59      	ldr	r3, [pc, #356]	; (8000b6c <HAL_TIM_OC_DelayElapsedCallback+0x1dc>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d120      	bne.n	8000a50 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
			s->stepFunc();
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	4798      	blx	r3
			s->stepCount++;							//カウントし続ける
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a18:	1c5a      	adds	r2, r3, #1
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	64da      	str	r2, [r3, #76]	; 0x4c
			s->stepPosition += s->dir;		//dir(+もしくはー(dirの向き）を加算してstepPositionに格納
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	69da      	ldr	r2, [r3, #28]
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	441a      	add	r2, r3
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	619a      	str	r2, [r3, #24]
			if ( (s->stepCount) >= (s->totalSteps) ){	//stepCountがtotalStepsを超えたとき
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d30b      	bcc.n	8000a50 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
				s->movementDone = 1;	//movementDoneを1にする
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				remainingSteppersFlag &= ~(1 << 0);
 8000a40:	4b47      	ldr	r3, [pc, #284]	; (8000b60 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	f023 0301 	bic.w	r3, r3, #1
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	4b44      	ldr	r3, [pc, #272]	; (8000b60 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 8000a4e:	701a      	strb	r2, [r3, #0]
			}
		}

		if (s->rampUpStepCount == 0){
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d142      	bne.n	8000ade <HAL_TIM_OC_DelayElapsedCallback+0x14e>
			s->n++;									//sにnを代入して、nをプラス1する
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	1c5a      	adds	r2, r3, #1
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	641a      	str	r2, [r3, #64]	; 0x40
			s->d = s->d - (2*s->d) / (4*s->n +1);	//加減速遅延時間
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000a6e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	3301      	adds	r3, #1
 8000a7a:	ee07 3a90 	vmov	s15, r3
 8000a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000a82:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			if (s->d <= s->minStepInterval ){		//加減速遅延時間がminStepIntervalより短いなら（定数で指定）
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	ee07 3a90 	vmov	s15, r3
 8000a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aaa:	d80c      	bhi.n	8000ac6 <HAL_TIM_OC_DelayElapsedCallback+0x136>
				s->d = s->minStepInterval;			//minStepIntervalを加減速遅延時間にする
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	ee07 3a90 	vmov	s15, r3
 8000ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
				s->rampUpStepCount = s->stepCount;	//rampUpStepCountはstepCountとする
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	63da      	str	r2, [r3, #60]	; 0x3c
			}
			if (s->stepCount >= (s->totalSteps / 2) ){  //目標値から現在のステップを引いた値の1/2よりstepCountが大きくなったとき
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ace:	085b      	lsrs	r3, r3, #1
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d32c      	bcc.n	8000b2e <HAL_TIM_OC_DelayElapsedCallback+0x19e>
				s->rampUpStepCount = s->stepCount;		//rampUpStepCountはstepCountとする
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	63da      	str	r2, [r3, #60]	; 0x3c
 8000adc:	e027      	b.n	8000b2e <HAL_TIM_OC_DelayElapsedCallback+0x19e>
			}
		} else if ( s->stepCount >= s->totalSteps - s->rampUpStepCount) {	//目標値から現在のステップを引いた値からrampUpStepCountを引いた値がstepCountより小さいなら
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aea:	1acb      	subs	r3, r1, r3
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d31e      	bcc.n	8000b2e <HAL_TIM_OC_DelayElapsedCallback+0x19e>
			s->d = (s->d * (4 * s->n + 1)) / (4 * s->n + 1 -2);				//減速の時のステップ
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	3301      	adds	r3, #1
 8000afe:	ee07 3a90 	vmov	s15, r3
 8000b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b06:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	3b01      	subs	r3, #1
 8000b12:	ee07 3a90 	vmov	s15, r3
 8000b16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			s->n--;		//sにnを代入し、nから1を引く
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	1e5a      	subs	r2, r3, #1
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	641a      	str	r2, [r3, #64]	; 0x40
		}
		s->di = s->d;	//計算結果sをstepperInfoのメンバdに代入したものをメンバdiに代入
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b38:	ee17 2a90 	vmov	r2, s15
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	649a      	str	r2, [r3, #72]	; 0x48
		//printf("stepPosition:%ld \r\n",s->stepPosition);
		setNextInterruptInterval();
 8000b40:	f7ff fede 	bl	8000900 <setNextInterruptInterval>
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200000b4 	.word	0x200000b4
 8000b58:	20000671 	.word	0x20000671
 8000b5c:	20000670 	.word	0x20000670
 8000b60:	200006f8 	.word	0x200006f8
 8000b64:	200006f9 	.word	0x200006f9
 8000b68:	20000620 	.word	0x20000620
 8000b6c:	20000672 	.word	0x20000672

08000b70 <stallguard_back>:
	if( ! HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)){	//割り込みピンが真でない(1でない=0なら)
		end_stop_state |= 1;					//end_stop_stateに左辺か右辺が1なら1を代入
	}
}

void stallguard_back(){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	prepareMovement(steppers[0].stall_off);	//stall_off
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <stallguard_back+0x18>)
 8000b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fe29 	bl	80007d0 <prepareMovement>
	current_stall=0;
 8000b7e:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <stallguard_back+0x1c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
	return;
 8000b84:	bf00      	nop
}
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000620 	.word	0x20000620
 8000b8c:	20000672 	.word	0x20000672

08000b90 <runAndWait>:

void runAndWait(){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	setNextInterruptInterval();
 8000b94:	f7ff feb4 	bl	8000900 <setNextInterruptInterval>
	while(remainingSteppersFlag && !(current_stall));
 8000b98:	bf00      	nop
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <runAndWait+0x38>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <runAndWait+0x1c>
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <runAndWait+0x3c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d0f6      	beq.n	8000b9a <runAndWait+0xa>
	if(current_stall==1){
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <runAndWait+0x3c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d101      	bne.n	8000bb8 <runAndWait+0x28>
		stallguard_back();
 8000bb4:	f7ff ffdc 	bl	8000b70 <stallguard_back>
	}
	HAL_Delay(100);
 8000bb8:	2064      	movs	r0, #100	; 0x64
 8000bba:	f001 fe4f 	bl	800285c <HAL_Delay>
	end_flag=1;
 8000bbe:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <runAndWait+0x40>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]
	//printf("posi%d\r\n",re->totalSteps);
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200006f8 	.word	0x200006f8
 8000bcc:	20000672 	.word	0x20000672
 8000bd0:	200006ed 	.word	0x200006ed

08000bd4 <AbsoluteReset>:
void AbsoluteReset(){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
	volatile stepperInfo* re = &steppers[0];
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <AbsoluteReset+0x4c>)
 8000bdc:	607b      	str	r3, [r7, #4]

	re->n = 0;  //変数*siがメンバnにアクセス.した値に0を代入する
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	641a      	str	r2, [r3, #64]	; 0x40
	re->d = 0;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f04f 0200 	mov.w	r2, #0
 8000bea:	645a      	str	r2, [r3, #68]	; 0x44
	re->di = 0;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	649a      	str	r2, [r3, #72]	; 0x48
	re->stepCount = 0;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	64da      	str	r2, [r3, #76]	; 0x4c
	re->rampUpStepCount = 0;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	63da      	str	r2, [r3, #60]	; 0x3c
	re->totalSteps = 0;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	635a      	str	r2, [r3, #52]	; 0x34
	re->stepPosition = 0;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
	printf("RestOK\r\n");
 8000c0a:	4806      	ldr	r0, [pc, #24]	; (8000c24 <AbsoluteReset+0x50>)
 8000c0c:	f006 fc0e 	bl	800742c <puts>
	end_flag=1;
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <AbsoluteReset+0x54>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000620 	.word	0x20000620
 8000c24:	08008520 	.word	0x08008520
 8000c28:	200006ed 	.word	0x200006ed

08000c2c <stepperHoming>:


void stepperHoming(){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	homing_flag |= (1 << 0);
 8000c30:	4b2e      	ldr	r3, [pc, #184]	; (8000cec <stepperHoming+0xc0>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b2c      	ldr	r3, [pc, #176]	; (8000cec <stepperHoming+0xc0>)
 8000c3c:	701a      	strb	r2, [r3, #0]
	//seeking
	steppers[0].minStepInterval = steppers[0].seeking_vel;	//ホームピンに反応するまでモータ回す
 8000c3e:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <stepperHoming+0xc4>)
 8000c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c42:	461a      	mov	r2, r3
 8000c44:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <stepperHoming+0xc4>)
 8000c46:	605a      	str	r2, [r3, #4]
	prepareMovement( -100000000);
 8000c48:	482a      	ldr	r0, [pc, #168]	; (8000cf4 <stepperHoming+0xc8>)
 8000c4a:	f7ff fdc1 	bl	80007d0 <prepareMovement>
	runAndWait();
 8000c4e:	f7ff ff9f 	bl	8000b90 <runAndWait>
	HAL_Delay(500);
 8000c52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c56:	f001 fe01 	bl	800285c <HAL_Delay>
	//pull-off

	homing_flag &= ~(1 << 0);								//homing_flagが反応したらpull_offだけモータ回す
 8000c5a:	4b24      	ldr	r3, [pc, #144]	; (8000cec <stepperHoming+0xc0>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	f023 0301 	bic.w	r3, r3, #1
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	4b21      	ldr	r3, [pc, #132]	; (8000cec <stepperHoming+0xc0>)
 8000c66:	701a      	strb	r2, [r3, #0]
	prepareMovement(steppers[0].pull_off);
 8000c68:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <stepperHoming+0xc4>)
 8000c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fdaf 	bl	80007d0 <prepareMovement>
	runAndWait();
 8000c72:	f7ff ff8d 	bl	8000b90 <runAndWait>
	HAL_Delay(500);
 8000c76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c7a:	f001 fdef 	bl	800285c <HAL_Delay>
	//homing

	homing_flag |= (1 << 0);								//ホームピンに反応するまでモータ回す
 8000c7e:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <stepperHoming+0xc0>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <stepperHoming+0xc0>)
 8000c8a:	701a      	strb	r2, [r3, #0]
	steppers[0].minStepInterval = steppers[0].homing_vel;
 8000c8c:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <stepperHoming+0xc4>)
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <stepperHoming+0xc4>)
 8000c94:	605a      	str	r2, [r3, #4]
	prepareMovement( -100000000);
 8000c96:	4817      	ldr	r0, [pc, #92]	; (8000cf4 <stepperHoming+0xc8>)
 8000c98:	f7ff fd9a 	bl	80007d0 <prepareMovement>
	runAndWait();
 8000c9c:	f7ff ff78 	bl	8000b90 <runAndWait>
	HAL_Delay(500);
 8000ca0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ca4:	f001 fdda 	bl	800285c <HAL_Delay>
	//pull-off
	homing_flag &= ~(1 << 0);
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <stepperHoming+0xc0>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	f023 0301 	bic.w	r3, r3, #1
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <stepperHoming+0xc0>)
 8000cb4:	701a      	strb	r2, [r3, #0]
	prepareMovement(steppers[0].pull_off);
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <stepperHoming+0xc4>)
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fd88 	bl	80007d0 <prepareMovement>
	runAndWait();
 8000cc0:	f7ff ff66 	bl	8000b90 <runAndWait>
	HAL_Delay(500);
 8000cc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc8:	f001 fdc8 	bl	800285c <HAL_Delay>

	steppers[0].stepPosition = 0;
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <stepperHoming+0xc4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
	steppers[0].homing = 1;
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <stepperHoming+0xc4>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	741a      	strb	r2, [r3, #16]
	steppers[0].minStepInterval = 500;
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <stepperHoming+0xc4>)
 8000cda:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cde:	605a      	str	r2, [r3, #4]
	printf("homing:\r\n");
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <stepperHoming+0xcc>)
 8000ce2:	f006 fba3 	bl	800742c <puts>

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000671 	.word	0x20000671
 8000cf0:	20000620 	.word	0x20000620
 8000cf4:	fa0a1f00 	.word	0xfa0a1f00
 8000cf8:	08008528 	.word	0x08008528

08000cfc <MotorOFF>:
void MotorOFF(){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
	int32_t value = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]

	value = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, value);
 8000d0a:	2110      	movs	r1, #16
 8000d0c:	482d      	ldr	r0, [pc, #180]	; (8000dc4 <MotorOFF+0xc8>)
 8000d0e:	f006 f93a 	bl	8006f86 <tmc2209_readInt>
 8000d12:	4603      	mov	r3, r0
 8000d14:	f023 021f 	bic.w	r2, r3, #31
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 031f 	and.w	r3, r3, #31
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	461a      	mov	r2, r3
 8000d22:	2110      	movs	r1, #16
 8000d24:	4827      	ldr	r0, [pc, #156]	; (8000dc4 <MotorOFF+0xc8>)
 8000d26:	f006 f8de 	bl	8006ee6 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000d2a:	f001 fd8b 	bl	8002844 <HAL_GetTick>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4619      	mov	r1, r3
 8000d32:	4824      	ldr	r0, [pc, #144]	; (8000dc4 <MotorOFF+0xc8>)
 8000d34:	f006 fa5d 	bl	80071f2 <tmc2209_periodicJob>
	HAL_Delay(100);
 8000d38:	2064      	movs	r0, #100	; 0x64
 8000d3a:	f001 fd8f 	bl	800285c <HAL_Delay>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);	//保持電流
 8000d3e:	2110      	movs	r1, #16
 8000d40:	4820      	ldr	r0, [pc, #128]	; (8000dc4 <MotorOFF+0xc8>)
 8000d42:	f006 f920 	bl	8006f86 <tmc2209_readInt>
 8000d46:	4603      	mov	r3, r0
 8000d48:	f003 031f 	and.w	r3, r3, #31
 8000d4c:	607b      	str	r3, [r7, #4]
	printf("IHOLD: %ld\r\n", value);
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	481d      	ldr	r0, [pc, #116]	; (8000dc8 <MotorOFF+0xcc>)
 8000d52:	f006 fae5 	bl	8007320 <iprintf>

	value = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_FREEWHEEL_MASK, 20);
 8000d5a:	2170      	movs	r1, #112	; 0x70
 8000d5c:	4819      	ldr	r0, [pc, #100]	; (8000dc4 <MotorOFF+0xc8>)
 8000d5e:	f006 f912 	bl	8006f86 <tmc2209_readInt>
 8000d62:	4603      	mov	r3, r0
 8000d64:	151b      	asrs	r3, r3, #20
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	607b      	str	r3, [r7, #4]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000d6c:	f001 fd6a 	bl	8002844 <HAL_GetTick>
 8000d70:	4603      	mov	r3, r0
 8000d72:	4619      	mov	r1, r3
 8000d74:	4813      	ldr	r0, [pc, #76]	; (8000dc4 <MotorOFF+0xc8>)
 8000d76:	f006 fa3c 	bl	80071f2 <tmc2209_periodicJob>
	printf("Freewheeling: %ld\r\n", value);
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	4813      	ldr	r0, [pc, #76]	; (8000dcc <MotorOFF+0xd0>)
 8000d7e:	f006 facf 	bl	8007320 <iprintf>
	HAL_Delay(100);
 8000d82:	2064      	movs	r0, #100	; 0x64
 8000d84:	f001 fd6a 	bl	800285c <HAL_Delay>
	value = 1;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_PWMCONF, TMC2209_FREEWHEEL_MASK, 20, value);
 8000d8c:	2170      	movs	r1, #112	; 0x70
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <MotorOFF+0xc8>)
 8000d90:	f006 f8f9 	bl	8006f86 <tmc2209_readInt>
 8000d94:	4603      	mov	r3, r0
 8000d96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	051b      	lsls	r3, r3, #20
 8000d9e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000da2:	4313      	orrs	r3, r2
 8000da4:	461a      	mov	r2, r3
 8000da6:	2170      	movs	r1, #112	; 0x70
 8000da8:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <MotorOFF+0xc8>)
 8000daa:	f006 f89c 	bl	8006ee6 <tmc2209_writeInt>
	printf("Freewheeling: %ld\r\n", value);
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	4806      	ldr	r0, [pc, #24]	; (8000dcc <MotorOFF+0xd0>)
 8000db2:	f006 fab5 	bl	8007320 <iprintf>

	end_flag=1;
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MotorOFF+0xd4>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]


}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000184 	.word	0x20000184
 8000dc8:	08008534 	.word	0x08008534
 8000dcc:	08008544 	.word	0x08008544
 8000dd0:	200006ed 	.word	0x200006ed

08000dd4 <TMCsetup>:
	HAL_Delay(100);
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_SHAFT_SHIFT, TMC2209_SHAFT_MASK);	//保持電流
	printf("IHOLD: %ld\r\n", value);
}

void TMCsetup(){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b090      	sub	sp, #64	; 0x40
 8000dd8:	af00      	add	r7, sp, #0
	int32_t mstep_value = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t toff_value = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t microstep_value = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t IRUN_value = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t IHOLD_value = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t IHOLDDELAY_value= 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t stallgard_setup_value=0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t TCOOLTHRS_value=0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
	int32_t SEMAX_value=0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
	int32_t TBL_value = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
	int32_t stealthChop_value = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
	int32_t autoscale_value = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
	int32_t PWMAuto_value = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
	int32_t PWMAuto_scale = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
	int32_t value = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]


	IRUN_value = 22;
 8000e16:	2316      	movs	r3, #22
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT, IRUN_value);	//実行電流
 8000e1a:	2110      	movs	r1, #16
 8000e1c:	48c9      	ldr	r0, [pc, #804]	; (8001144 <TMCsetup+0x370>)
 8000e1e:	f006 f8b2 	bl	8006f86 <tmc2209_readInt>
 8000e22:	4603      	mov	r3, r0
 8000e24:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8000e30:	4313      	orrs	r3, r2
 8000e32:	461a      	mov	r2, r3
 8000e34:	2110      	movs	r1, #16
 8000e36:	48c3      	ldr	r0, [pc, #780]	; (8001144 <TMCsetup+0x370>)
 8000e38:	f006 f855 	bl	8006ee6 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000e3c:	f001 fd02 	bl	8002844 <HAL_GetTick>
 8000e40:	4603      	mov	r3, r0
 8000e42:	4619      	mov	r1, r3
 8000e44:	48bf      	ldr	r0, [pc, #764]	; (8001144 <TMCsetup+0x370>)
 8000e46:	f006 f9d4 	bl	80071f2 <tmc2209_periodicJob>
	HAL_Delay(100);
 8000e4a:	2064      	movs	r0, #100	; 0x64
 8000e4c:	f001 fd06 	bl	800285c <HAL_Delay>
	IRUN_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 8000e50:	2110      	movs	r1, #16
 8000e52:	48bc      	ldr	r0, [pc, #752]	; (8001144 <TMCsetup+0x370>)
 8000e54:	f006 f897 	bl	8006f86 <tmc2209_readInt>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	121b      	asrs	r3, r3, #8
 8000e5c:	f003 031f 	and.w	r3, r3, #31
 8000e60:	633b      	str	r3, [r7, #48]	; 0x30
	printf("IRUN: %ld\r\n", IRUN_value);
 8000e62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e64:	48b8      	ldr	r0, [pc, #736]	; (8001148 <TMCsetup+0x374>)
 8000e66:	f006 fa5b 	bl	8007320 <iprintf>

	IHOLD_value= 16;																						//モーター待機時の電流の設定
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, IHOLD_value);
 8000e6e:	2110      	movs	r1, #16
 8000e70:	48b4      	ldr	r0, [pc, #720]	; (8001144 <TMCsetup+0x370>)
 8000e72:	f006 f888 	bl	8006f86 <tmc2209_readInt>
 8000e76:	4603      	mov	r3, r0
 8000e78:	f023 021f 	bic.w	r2, r3, #31
 8000e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7e:	f003 031f 	and.w	r3, r3, #31
 8000e82:	4313      	orrs	r3, r2
 8000e84:	461a      	mov	r2, r3
 8000e86:	2110      	movs	r1, #16
 8000e88:	48ae      	ldr	r0, [pc, #696]	; (8001144 <TMCsetup+0x370>)
 8000e8a:	f006 f82c 	bl	8006ee6 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000e8e:	f001 fcd9 	bl	8002844 <HAL_GetTick>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4619      	mov	r1, r3
 8000e96:	48ab      	ldr	r0, [pc, #684]	; (8001144 <TMCsetup+0x370>)
 8000e98:	f006 f9ab 	bl	80071f2 <tmc2209_periodicJob>
	HAL_Delay(100);
 8000e9c:	2064      	movs	r0, #100	; 0x64
 8000e9e:	f001 fcdd 	bl	800285c <HAL_Delay>
	IHOLD_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);	//保持電流
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	48a7      	ldr	r0, [pc, #668]	; (8001144 <TMCsetup+0x370>)
 8000ea6:	f006 f86e 	bl	8006f86 <tmc2209_readInt>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	f003 031f 	and.w	r3, r3, #31
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	printf("IHOLD: %ld\r\n", IHOLD_value);
 8000eb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000eb4:	48a5      	ldr	r0, [pc, #660]	; (800114c <TMCsetup+0x378>)
 8000eb6:	f006 fa33 	bl	8007320 <iprintf>

	value=0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK,TMC2209_PDN_DISABLE_SHIFT);
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	48a0      	ldr	r0, [pc, #640]	; (8001144 <TMCsetup+0x370>)
 8000ec2:	f006 f860 	bl	8006f86 <tmc2209_readInt>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	119b      	asrs	r3, r3, #6
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
	printf("pdn_disable : %ld\r\n", value);
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	489f      	ldr	r0, [pc, #636]	; (8001150 <TMCsetup+0x37c>)
 8000ed4:	f006 fa24 	bl	8007320 <iprintf>
	value = 1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK, TMC2209_PDN_DISABLE_SHIFT, value);
 8000edc:	2100      	movs	r1, #0
 8000ede:	4899      	ldr	r0, [pc, #612]	; (8001144 <TMCsetup+0x370>)
 8000ee0:	f006 f851 	bl	8006f86 <tmc2209_readInt>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	019b      	lsls	r3, r3, #6
 8000eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4892      	ldr	r0, [pc, #584]	; (8001144 <TMCsetup+0x370>)
 8000efa:	f005 fff4 	bl	8006ee6 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000efe:	f001 fca1 	bl	8002844 <HAL_GetTick>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4619      	mov	r1, r3
 8000f06:	488f      	ldr	r0, [pc, #572]	; (8001144 <TMCsetup+0x370>)
 8000f08:	f006 f973 	bl	80071f2 <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK, TMC2209_PDN_DISABLE_SHIFT);
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	488d      	ldr	r0, [pc, #564]	; (8001144 <TMCsetup+0x370>)
 8000f10:	f006 f839 	bl	8006f86 <tmc2209_readInt>
 8000f14:	4603      	mov	r3, r0
 8000f16:	119b      	asrs	r3, r3, #6
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	607b      	str	r3, [r7, #4]
	printf("pdn_disable : %ld\r\n", value);
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	488b      	ldr	r0, [pc, #556]	; (8001150 <TMCsetup+0x37c>)
 8000f22:	f006 f9fd 	bl	8007320 <iprintf>

	TCOOLTHRS_value=300;
 8000f26:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000f2a:	623b      	str	r3, [r7, #32]
	tmc2209_writeInt(&TMC2209, TMC2209_TCOOLTHRS, TCOOLTHRS_value);
 8000f2c:	6a3a      	ldr	r2, [r7, #32]
 8000f2e:	2114      	movs	r1, #20
 8000f30:	4884      	ldr	r0, [pc, #528]	; (8001144 <TMCsetup+0x370>)
 8000f32:	f005 ffd8 	bl	8006ee6 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000f36:	f001 fc85 	bl	8002844 <HAL_GetTick>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4881      	ldr	r0, [pc, #516]	; (8001144 <TMCsetup+0x370>)
 8000f40:	f006 f957 	bl	80071f2 <tmc2209_periodicJob>
	printf("TCOOLTHRS: %ld\r\n", TCOOLTHRS_value);
 8000f44:	6a39      	ldr	r1, [r7, #32]
 8000f46:	4883      	ldr	r0, [pc, #524]	; (8001154 <TMCsetup+0x380>)
 8000f48:	f006 f9ea 	bl	8007320 <iprintf>

	value=0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK,TMC2209_EN_SPREADCYCLE_SHIFT);
 8000f50:	2100      	movs	r1, #0
 8000f52:	487c      	ldr	r0, [pc, #496]	; (8001144 <TMCsetup+0x370>)
 8000f54:	f006 f817 	bl	8006f86 <tmc2209_readInt>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	109b      	asrs	r3, r3, #2
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	607b      	str	r3, [r7, #4]
	printf("SPREADCYCLE : %ld\r\n", value);
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	487c      	ldr	r0, [pc, #496]	; (8001158 <TMCsetup+0x384>)
 8000f66:	f006 f9db 	bl	8007320 <iprintf>
	value = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK, TMC2209_EN_SPREADCYCLE_SHIFT ,value);
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4874      	ldr	r0, [pc, #464]	; (8001144 <TMCsetup+0x370>)
 8000f72:	f006 f808 	bl	8006f86 <tmc2209_readInt>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f023 0204 	bic.w	r2, r3, #4
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	4313      	orrs	r3, r2
 8000f86:	461a      	mov	r2, r3
 8000f88:	2100      	movs	r1, #0
 8000f8a:	486e      	ldr	r0, [pc, #440]	; (8001144 <TMCsetup+0x370>)
 8000f8c:	f005 ffab 	bl	8006ee6 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000f90:	f001 fc58 	bl	8002844 <HAL_GetTick>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4619      	mov	r1, r3
 8000f98:	486a      	ldr	r0, [pc, #424]	; (8001144 <TMCsetup+0x370>)
 8000f9a:	f006 f92a 	bl	80071f2 <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK,TMC2209_EN_SPREADCYCLE_SHIFT);
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4868      	ldr	r0, [pc, #416]	; (8001144 <TMCsetup+0x370>)
 8000fa2:	f005 fff0 	bl	8006f86 <tmc2209_readInt>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	109b      	asrs	r3, r3, #2
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
	printf("SPREADCYCLE : %ld\r\n", value);
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	4869      	ldr	r0, [pc, #420]	; (8001158 <TMCsetup+0x384>)
 8000fb4:	f006 f9b4 	bl	8007320 <iprintf>

	value=10;
 8000fb8:	230a      	movs	r3, #10
 8000fba:	607b      	str	r3, [r7, #4]
	tmc2209_writeInt(&TMC2209, TMC2209_TPWMTHRS, value);
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	2113      	movs	r1, #19
 8000fc0:	4860      	ldr	r0, [pc, #384]	; (8001144 <TMCsetup+0x370>)
 8000fc2:	f005 ff90 	bl	8006ee6 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000fc6:	f001 fc3d 	bl	8002844 <HAL_GetTick>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4619      	mov	r1, r3
 8000fce:	485d      	ldr	r0, [pc, #372]	; (8001144 <TMCsetup+0x370>)
 8000fd0:	f006 f90f 	bl	80071f2 <tmc2209_periodicJob>
	printf("TPWMTHRS: %ld\r\n", value);
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	4861      	ldr	r0, [pc, #388]	; (800115c <TMCsetup+0x388>)
 8000fd8:	f006 f9a2 	bl	8007320 <iprintf>

	value=0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK,TMC2209_INTERNAL_RSENSE_SHIFT);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4858      	ldr	r0, [pc, #352]	; (8001144 <TMCsetup+0x370>)
 8000fe4:	f005 ffcf 	bl	8006f86 <tmc2209_readInt>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	105b      	asrs	r3, r3, #1
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	607b      	str	r3, [r7, #4]
	printf("RSENSE : %ld\r\n", value);
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	485a      	ldr	r0, [pc, #360]	; (8001160 <TMCsetup+0x38c>)
 8000ff6:	f006 f993 	bl	8007320 <iprintf>
	value = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK, TMC2209_INTERNAL_RSENSE_SHIFT, value);
 8000ffe:	2100      	movs	r1, #0
 8001000:	4850      	ldr	r0, [pc, #320]	; (8001144 <TMCsetup+0x370>)
 8001002:	f005 ffc0 	bl	8006f86 <tmc2209_readInt>
 8001006:	4603      	mov	r3, r0
 8001008:	f023 0202 	bic.w	r2, r3, #2
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	4313      	orrs	r3, r2
 8001016:	461a      	mov	r2, r3
 8001018:	2100      	movs	r1, #0
 800101a:	484a      	ldr	r0, [pc, #296]	; (8001144 <TMCsetup+0x370>)
 800101c:	f005 ff63 	bl	8006ee6 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8001020:	f001 fc10 	bl	8002844 <HAL_GetTick>
 8001024:	4603      	mov	r3, r0
 8001026:	4619      	mov	r1, r3
 8001028:	4846      	ldr	r0, [pc, #280]	; (8001144 <TMCsetup+0x370>)
 800102a:	f006 f8e2 	bl	80071f2 <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK, TMC2209_INTERNAL_RSENSE_SHIFT);
 800102e:	2100      	movs	r1, #0
 8001030:	4844      	ldr	r0, [pc, #272]	; (8001144 <TMCsetup+0x370>)
 8001032:	f005 ffa8 	bl	8006f86 <tmc2209_readInt>
 8001036:	4603      	mov	r3, r0
 8001038:	105b      	asrs	r3, r3, #1
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	607b      	str	r3, [r7, #4]
	printf("RSENSE : %ld\r\n", value);
 8001040:	6879      	ldr	r1, [r7, #4]
 8001042:	4847      	ldr	r0, [pc, #284]	; (8001160 <TMCsetup+0x38c>)
 8001044:	f006 f96c 	bl	8007320 <iprintf>

	value=0;
 8001048:	2300      	movs	r3, #0
 800104a:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_FREQ_MASK, TMC2209_PWM_FREQ_SHIFT);
 800104c:	2170      	movs	r1, #112	; 0x70
 800104e:	483d      	ldr	r0, [pc, #244]	; (8001144 <TMCsetup+0x370>)
 8001050:	f005 ff99 	bl	8006f86 <tmc2209_readInt>
 8001054:	4603      	mov	r3, r0
 8001056:	141b      	asrs	r3, r3, #16
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	607b      	str	r3, [r7, #4]
	printf("PWM_FREQ : %ld\r\n", value);
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	4840      	ldr	r0, [pc, #256]	; (8001164 <TMCsetup+0x390>)
 8001062:	f006 f95d 	bl	8007320 <iprintf>
	value=1;
 8001066:	2301      	movs	r3, #1
 8001068:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_FREQ_MASK, TMC2209_PWM_FREQ_SHIFT, value);
 800106a:	2170      	movs	r1, #112	; 0x70
 800106c:	4835      	ldr	r0, [pc, #212]	; (8001144 <TMCsetup+0x370>)
 800106e:	f005 ff8a 	bl	8006f86 <tmc2209_readInt>
 8001072:	4603      	mov	r3, r0
 8001074:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	041b      	lsls	r3, r3, #16
 800107c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001080:	4313      	orrs	r3, r2
 8001082:	461a      	mov	r2, r3
 8001084:	2170      	movs	r1, #112	; 0x70
 8001086:	482f      	ldr	r0, [pc, #188]	; (8001144 <TMCsetup+0x370>)
 8001088:	f005 ff2d 	bl	8006ee6 <tmc2209_writeInt>
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_FREQ_MASK, TMC2209_PWM_FREQ_SHIFT);
 800108c:	2170      	movs	r1, #112	; 0x70
 800108e:	482d      	ldr	r0, [pc, #180]	; (8001144 <TMCsetup+0x370>)
 8001090:	f005 ff79 	bl	8006f86 <tmc2209_readInt>
 8001094:	4603      	mov	r3, r0
 8001096:	141b      	asrs	r3, r3, #16
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	607b      	str	r3, [r7, #4]
	printf("PWM_FREQ : %ld\r\n", value);
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	4830      	ldr	r0, [pc, #192]	; (8001164 <TMCsetup+0x390>)
 80010a2:	f006 f93d 	bl	8007320 <iprintf>

	value=0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209,TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT);
 80010aa:	2142      	movs	r1, #66	; 0x42
 80010ac:	4825      	ldr	r0, [pc, #148]	; (8001144 <TMCsetup+0x370>)
 80010ae:	f005 ff6a 	bl	8006f86 <tmc2209_readInt>
 80010b2:	4603      	mov	r3, r0
 80010b4:	13db      	asrs	r3, r3, #15
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
	printf("SEIMIN : %ld\r\n", value);
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	482a      	ldr	r0, [pc, #168]	; (8001168 <TMCsetup+0x394>)
 80010c0:	f006 f92e 	bl	8007320 <iprintf>

	value=0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_DRVSTATUS, TMC2209_CS_ACTUAL_MASK, TMC2209_CS_ACTUAL_SHIFT);
 80010c8:	216f      	movs	r1, #111	; 0x6f
 80010ca:	481e      	ldr	r0, [pc, #120]	; (8001144 <TMCsetup+0x370>)
 80010cc:	f005 ff5b 	bl	8006f86 <tmc2209_readInt>
 80010d0:	4603      	mov	r3, r0
 80010d2:	141b      	asrs	r3, r3, #16
 80010d4:	f003 031f 	and.w	r3, r3, #31
 80010d8:	607b      	str	r3, [r7, #4]
	printf("DRVSTATUS : %ld\r\n", value);
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	4823      	ldr	r0, [pc, #140]	; (800116c <TMCsetup+0x398>)
 80010de:	f006 f91f 	bl	8007320 <iprintf>

	mstep_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK,TMC2209_MSTEP_REG_SELECT_SHIFT);	//uartでのmicrostepの有効化
 80010e2:	2100      	movs	r1, #0
 80010e4:	4817      	ldr	r0, [pc, #92]	; (8001144 <TMCsetup+0x370>)
 80010e6:	f005 ff4e 	bl	8006f86 <tmc2209_readInt>
 80010ea:	4603      	mov	r3, r0
 80010ec:	11db      	asrs	r3, r3, #7
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	printf("mstep_before : %ld\r\n", mstep_value);
 80010f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80010f6:	481e      	ldr	r0, [pc, #120]	; (8001170 <TMCsetup+0x39c>)
 80010f8:	f006 f912 	bl	8007320 <iprintf>
	mstep_value = 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT,mstep_value);
 8001100:	2100      	movs	r1, #0
 8001102:	4810      	ldr	r0, [pc, #64]	; (8001144 <TMCsetup+0x370>)
 8001104:	f005 ff3f 	bl	8006f86 <tmc2209_readInt>
 8001108:	4603      	mov	r3, r0
 800110a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800110e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001110:	01db      	lsls	r3, r3, #7
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4313      	orrs	r3, r2
 8001116:	461a      	mov	r2, r3
 8001118:	2100      	movs	r1, #0
 800111a:	480a      	ldr	r0, [pc, #40]	; (8001144 <TMCsetup+0x370>)
 800111c:	f005 fee3 	bl	8006ee6 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8001120:	f001 fb90 	bl	8002844 <HAL_GetTick>
 8001124:	4603      	mov	r3, r0
 8001126:	4619      	mov	r1, r3
 8001128:	4806      	ldr	r0, [pc, #24]	; (8001144 <TMCsetup+0x370>)
 800112a:	f006 f862 	bl	80071f2 <tmc2209_periodicJob>
	mstep_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT);
 800112e:	2100      	movs	r1, #0
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <TMCsetup+0x370>)
 8001132:	f005 ff28 	bl	8006f86 <tmc2209_readInt>
 8001136:	4603      	mov	r3, r0
 8001138:	11db      	asrs	r3, r3, #7
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001140:	e018      	b.n	8001174 <TMCsetup+0x3a0>
 8001142:	bf00      	nop
 8001144:	20000184 	.word	0x20000184
 8001148:	08008558 	.word	0x08008558
 800114c:	08008534 	.word	0x08008534
 8001150:	08008564 	.word	0x08008564
 8001154:	08008578 	.word	0x08008578
 8001158:	0800858c 	.word	0x0800858c
 800115c:	080085a0 	.word	0x080085a0
 8001160:	080085b0 	.word	0x080085b0
 8001164:	080085c0 	.word	0x080085c0
 8001168:	080085d4 	.word	0x080085d4
 800116c:	080085e4 	.word	0x080085e4
 8001170:	080085f8 	.word	0x080085f8
	printf("mstep_after : %ld\r\n", mstep_value);
 8001174:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001176:	48ca      	ldr	r0, [pc, #808]	; (80014a0 <TMCsetup+0x6cc>)
 8001178:	f006 f8d2 	bl	8007320 <iprintf>

	toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);	//保持トルクの設定
 800117c:	216c      	movs	r1, #108	; 0x6c
 800117e:	48c9      	ldr	r0, [pc, #804]	; (80014a4 <TMCsetup+0x6d0>)
 8001180:	f005 ff01 	bl	8006f86 <tmc2209_readInt>
 8001184:	4603      	mov	r3, r0
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	63bb      	str	r3, [r7, #56]	; 0x38
	printf("toff_before : %ld\r\n", toff_value);
 800118c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800118e:	48c6      	ldr	r0, [pc, #792]	; (80014a8 <TMCsetup+0x6d4>)
 8001190:	f006 f8c6 	bl	8007320 <iprintf>
	toff_value = 3;
 8001194:	2303      	movs	r3, #3
 8001196:	63bb      	str	r3, [r7, #56]	; 0x38
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT,toff_value);
 8001198:	216c      	movs	r1, #108	; 0x6c
 800119a:	48c2      	ldr	r0, [pc, #776]	; (80014a4 <TMCsetup+0x6d0>)
 800119c:	f005 fef3 	bl	8006f86 <tmc2209_readInt>
 80011a0:	4603      	mov	r3, r0
 80011a2:	f023 020f 	bic.w	r2, r3, #15
 80011a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011a8:	f003 030f 	and.w	r3, r3, #15
 80011ac:	4313      	orrs	r3, r2
 80011ae:	461a      	mov	r2, r3
 80011b0:	216c      	movs	r1, #108	; 0x6c
 80011b2:	48bc      	ldr	r0, [pc, #752]	; (80014a4 <TMCsetup+0x6d0>)
 80011b4:	f005 fe97 	bl	8006ee6 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80011b8:	f001 fb44 	bl	8002844 <HAL_GetTick>
 80011bc:	4603      	mov	r3, r0
 80011be:	4619      	mov	r1, r3
 80011c0:	48b8      	ldr	r0, [pc, #736]	; (80014a4 <TMCsetup+0x6d0>)
 80011c2:	f006 f816 	bl	80071f2 <tmc2209_periodicJob>
	toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 80011c6:	216c      	movs	r1, #108	; 0x6c
 80011c8:	48b6      	ldr	r0, [pc, #728]	; (80014a4 <TMCsetup+0x6d0>)
 80011ca:	f005 fedc 	bl	8006f86 <tmc2209_readInt>
 80011ce:	4603      	mov	r3, r0
 80011d0:	f003 030f 	and.w	r3, r3, #15
 80011d4:	63bb      	str	r3, [r7, #56]	; 0x38
	printf("toff_after : %ld\r\n", toff_value);
 80011d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80011d8:	48b4      	ldr	r0, [pc, #720]	; (80014ac <TMCsetup+0x6d8>)
 80011da:	f006 f8a1 	bl	8007320 <iprintf>

	microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);	//microstepの設定
 80011de:	216c      	movs	r1, #108	; 0x6c
 80011e0:	48b0      	ldr	r0, [pc, #704]	; (80014a4 <TMCsetup+0x6d0>)
 80011e2:	f005 fed0 	bl	8006f86 <tmc2209_readInt>
 80011e6:	4603      	mov	r3, r0
 80011e8:	161b      	asrs	r3, r3, #24
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f2:	fa42 f303 	asr.w	r3, r2, r3
 80011f6:	637b      	str	r3, [r7, #52]	; 0x34
	printf("microstep_before : %ld\r\n", microstep_value);
 80011f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80011fa:	48ad      	ldr	r0, [pc, #692]	; (80014b0 <TMCsetup+0x6dc>)
 80011fc:	f006 f890 	bl	8007320 <iprintf>
	microstep_value = 4;
 8001200:	2304      	movs	r3, #4
 8001202:	637b      	str	r3, [r7, #52]	; 0x34
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT,microstep_value);
 8001204:	216c      	movs	r1, #108	; 0x6c
 8001206:	48a7      	ldr	r0, [pc, #668]	; (80014a4 <TMCsetup+0x6d0>)
 8001208:	f005 febd 	bl	8006f86 <tmc2209_readInt>
 800120c:	4603      	mov	r3, r0
 800120e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001214:	061b      	lsls	r3, r3, #24
 8001216:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800121a:	4313      	orrs	r3, r2
 800121c:	461a      	mov	r2, r3
 800121e:	216c      	movs	r1, #108	; 0x6c
 8001220:	48a0      	ldr	r0, [pc, #640]	; (80014a4 <TMCsetup+0x6d0>)
 8001222:	f005 fe60 	bl	8006ee6 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8001226:	f001 fb0d 	bl	8002844 <HAL_GetTick>
 800122a:	4603      	mov	r3, r0
 800122c:	4619      	mov	r1, r3
 800122e:	489d      	ldr	r0, [pc, #628]	; (80014a4 <TMCsetup+0x6d0>)
 8001230:	f005 ffdf 	bl	80071f2 <tmc2209_periodicJob>
	microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);
 8001234:	216c      	movs	r1, #108	; 0x6c
 8001236:	489b      	ldr	r0, [pc, #620]	; (80014a4 <TMCsetup+0x6d0>)
 8001238:	f005 fea5 	bl	8006f86 <tmc2209_readInt>
 800123c:	4603      	mov	r3, r0
 800123e:	161b      	asrs	r3, r3, #24
 8001240:	f003 030f 	and.w	r3, r3, #15
 8001244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001248:	fa42 f303 	asr.w	r3, r2, r3
 800124c:	637b      	str	r3, [r7, #52]	; 0x34
	printf("microstep_after : %ld\r\n", microstep_value);
 800124e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001250:	4898      	ldr	r0, [pc, #608]	; (80014b4 <TMCsetup+0x6e0>)
 8001252:	f006 f865 	bl	8007320 <iprintf>

	IHOLDDELAY_value=4;
 8001256:	2304      	movs	r3, #4
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT, IHOLDDELAY_value);
 800125a:	2110      	movs	r1, #16
 800125c:	4891      	ldr	r0, [pc, #580]	; (80014a4 <TMCsetup+0x6d0>)
 800125e:	f005 fe92 	bl	8006f86 <tmc2209_readInt>
 8001262:	4603      	mov	r3, r0
 8001264:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8001268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126a:	041b      	lsls	r3, r3, #16
 800126c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001270:	4313      	orrs	r3, r2
 8001272:	461a      	mov	r2, r3
 8001274:	2110      	movs	r1, #16
 8001276:	488b      	ldr	r0, [pc, #556]	; (80014a4 <TMCsetup+0x6d0>)
 8001278:	f005 fe35 	bl	8006ee6 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800127c:	f001 fae2 	bl	8002844 <HAL_GetTick>
 8001280:	4603      	mov	r3, r0
 8001282:	4619      	mov	r1, r3
 8001284:	4887      	ldr	r0, [pc, #540]	; (80014a4 <TMCsetup+0x6d0>)
 8001286:	f005 ffb4 	bl	80071f2 <tmc2209_periodicJob>
	IHOLDDELAY_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT);
 800128a:	2110      	movs	r1, #16
 800128c:	4885      	ldr	r0, [pc, #532]	; (80014a4 <TMCsetup+0x6d0>)
 800128e:	f005 fe7a 	bl	8006f86 <tmc2209_readInt>
 8001292:	4603      	mov	r3, r0
 8001294:	141b      	asrs	r3, r3, #16
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
	printf("IHOLDDELAY: %ld\r\n", IHOLDDELAY_value);
 800129c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800129e:	4886      	ldr	r0, [pc, #536]	; (80014b8 <TMCsetup+0x6e4>)
 80012a0:	f006 f83e 	bl	8007320 <iprintf>

	stallgard_setup_value=10;											//SG_RESULTと比較して、
 80012a4:	230a      	movs	r3, #10
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
	tmc2209_writeInt(&TMC2209, TMC2209_SGTHRS, stallgard_setup_value);
 80012a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012aa:	2140      	movs	r1, #64	; 0x40
 80012ac:	487d      	ldr	r0, [pc, #500]	; (80014a4 <TMCsetup+0x6d0>)
 80012ae:	f005 fe1a 	bl	8006ee6 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80012b2:	f001 fac7 	bl	8002844 <HAL_GetTick>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4619      	mov	r1, r3
 80012ba:	487a      	ldr	r0, [pc, #488]	; (80014a4 <TMCsetup+0x6d0>)
 80012bc:	f005 ff99 	bl	80071f2 <tmc2209_periodicJob>
	stallgard_setup_value = tmc2209_readInt(&TMC2209, TMC2209_SGTHRS);
 80012c0:	2140      	movs	r1, #64	; 0x40
 80012c2:	4878      	ldr	r0, [pc, #480]	; (80014a4 <TMCsetup+0x6d0>)
 80012c4:	f005 fe5f 	bl	8006f86 <tmc2209_readInt>
 80012c8:	6278      	str	r0, [r7, #36]	; 0x24
	printf("SGTHRS: %ld\r\n", stallgard_setup_value);
 80012ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012cc:	487b      	ldr	r0, [pc, #492]	; (80014bc <TMCsetup+0x6e8>)
 80012ce:	f006 f827 	bl	8007320 <iprintf>

	stealthChop_value = 100;
 80012d2:	2364      	movs	r3, #100	; 0x64
 80012d4:	617b      	str	r3, [r7, #20]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_GRAD_MASK, TMC2209_PWM_GRAD_SHIFT, stealthChop_value);
 80012d6:	2170      	movs	r1, #112	; 0x70
 80012d8:	4872      	ldr	r0, [pc, #456]	; (80014a4 <TMCsetup+0x6d0>)
 80012da:	f005 fe54 	bl	8006f86 <tmc2209_readInt>
 80012de:	4603      	mov	r3, r0
 80012e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	4313      	orrs	r3, r2
 80012ec:	461a      	mov	r2, r3
 80012ee:	2170      	movs	r1, #112	; 0x70
 80012f0:	486c      	ldr	r0, [pc, #432]	; (80014a4 <TMCsetup+0x6d0>)
 80012f2:	f005 fdf8 	bl	8006ee6 <tmc2209_writeInt>
	stealthChop_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_GRAD_MASK, TMC2209_PWM_GRAD_SHIFT);
 80012f6:	2170      	movs	r1, #112	; 0x70
 80012f8:	486a      	ldr	r0, [pc, #424]	; (80014a4 <TMCsetup+0x6d0>)
 80012fa:	f005 fe44 	bl	8006f86 <tmc2209_readInt>
 80012fe:	4603      	mov	r3, r0
 8001300:	121b      	asrs	r3, r3, #8
 8001302:	b2db      	uxtb	r3, r3
 8001304:	617b      	str	r3, [r7, #20]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8001306:	f001 fa9d 	bl	8002844 <HAL_GetTick>
 800130a:	4603      	mov	r3, r0
 800130c:	4619      	mov	r1, r3
 800130e:	4865      	ldr	r0, [pc, #404]	; (80014a4 <TMCsetup+0x6d0>)
 8001310:	f005 ff6f 	bl	80071f2 <tmc2209_periodicJob>
	printf("PWM_GRAD: %ld\r\n", stealthChop_value);
 8001314:	6979      	ldr	r1, [r7, #20]
 8001316:	486a      	ldr	r0, [pc, #424]	; (80014c0 <TMCsetup+0x6ec>)
 8001318:	f006 f802 	bl	8007320 <iprintf>


	value=5;
 800131c:	2305      	movs	r3, #5
 800131e:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEMIN_MASK, TMC2209_SEMIN_SHIFT, value);
 8001320:	2142      	movs	r1, #66	; 0x42
 8001322:	4860      	ldr	r0, [pc, #384]	; (80014a4 <TMCsetup+0x6d0>)
 8001324:	f005 fe2f 	bl	8006f86 <tmc2209_readInt>
 8001328:	4603      	mov	r3, r0
 800132a:	f023 020f 	bic.w	r2, r3, #15
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f003 030f 	and.w	r3, r3, #15
 8001334:	4313      	orrs	r3, r2
 8001336:	461a      	mov	r2, r3
 8001338:	2142      	movs	r1, #66	; 0x42
 800133a:	485a      	ldr	r0, [pc, #360]	; (80014a4 <TMCsetup+0x6d0>)
 800133c:	f005 fdd3 	bl	8006ee6 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8001340:	f001 fa80 	bl	8002844 <HAL_GetTick>
 8001344:	4603      	mov	r3, r0
 8001346:	4619      	mov	r1, r3
 8001348:	4856      	ldr	r0, [pc, #344]	; (80014a4 <TMCsetup+0x6d0>)
 800134a:	f005 ff52 	bl	80071f2 <tmc2209_periodicJob>
	printf("SEMIN: %ld\r\n", value);
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	485c      	ldr	r0, [pc, #368]	; (80014c4 <TMCsetup+0x6f0>)
 8001352:	f005 ffe5 	bl	8007320 <iprintf>

	SEMAX_value = 2;
 8001356:	2302      	movs	r3, #2
 8001358:	61fb      	str	r3, [r7, #28]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEMAX_MASK, TMC2209_SEMAX_SHIFT, SEMAX_value);
 800135a:	2142      	movs	r1, #66	; 0x42
 800135c:	4851      	ldr	r0, [pc, #324]	; (80014a4 <TMCsetup+0x6d0>)
 800135e:	f005 fe12 	bl	8006f86 <tmc2209_readInt>
 8001362:	4603      	mov	r3, r0
 8001364:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001370:	4313      	orrs	r3, r2
 8001372:	461a      	mov	r2, r3
 8001374:	2142      	movs	r1, #66	; 0x42
 8001376:	484b      	ldr	r0, [pc, #300]	; (80014a4 <TMCsetup+0x6d0>)
 8001378:	f005 fdb5 	bl	8006ee6 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800137c:	f001 fa62 	bl	8002844 <HAL_GetTick>
 8001380:	4603      	mov	r3, r0
 8001382:	4619      	mov	r1, r3
 8001384:	4847      	ldr	r0, [pc, #284]	; (80014a4 <TMCsetup+0x6d0>)
 8001386:	f005 ff34 	bl	80071f2 <tmc2209_periodicJob>
	printf("SEMAX: %ld\r\n", SEMAX_value);
 800138a:	69f9      	ldr	r1, [r7, #28]
 800138c:	484e      	ldr	r0, [pc, #312]	; (80014c8 <TMCsetup+0x6f4>)
 800138e:	f005 ffc7 	bl	8007320 <iprintf>

	TBL_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TBL_MASK, TMC2209_TBL_SHIFT);
 8001392:	216c      	movs	r1, #108	; 0x6c
 8001394:	4843      	ldr	r0, [pc, #268]	; (80014a4 <TMCsetup+0x6d0>)
 8001396:	f005 fdf6 	bl	8006f86 <tmc2209_readInt>
 800139a:	4603      	mov	r3, r0
 800139c:	13db      	asrs	r3, r3, #15
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	61bb      	str	r3, [r7, #24]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80013a4:	f001 fa4e 	bl	8002844 <HAL_GetTick>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4619      	mov	r1, r3
 80013ac:	483d      	ldr	r0, [pc, #244]	; (80014a4 <TMCsetup+0x6d0>)
 80013ae:	f005 ff20 	bl	80071f2 <tmc2209_periodicJob>
	TBL_value = 1;
 80013b2:	2301      	movs	r3, #1
 80013b4:	61bb      	str	r3, [r7, #24]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TBL_MASK, TMC2209_TBL_SHIFT, TBL_value);
 80013b6:	216c      	movs	r1, #108	; 0x6c
 80013b8:	483a      	ldr	r0, [pc, #232]	; (80014a4 <TMCsetup+0x6d0>)
 80013ba:	f005 fde4 	bl	8006f86 <tmc2209_readInt>
 80013be:	4603      	mov	r3, r0
 80013c0:	f423 32c0 	bic.w	r2, r3, #98304	; 0x18000
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	03db      	lsls	r3, r3, #15
 80013c8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80013cc:	4313      	orrs	r3, r2
 80013ce:	461a      	mov	r2, r3
 80013d0:	216c      	movs	r1, #108	; 0x6c
 80013d2:	4834      	ldr	r0, [pc, #208]	; (80014a4 <TMCsetup+0x6d0>)
 80013d4:	f005 fd87 	bl	8006ee6 <tmc2209_writeInt>
	TBL_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TBL_MASK, TMC2209_TBL_SHIFT);
 80013d8:	216c      	movs	r1, #108	; 0x6c
 80013da:	4832      	ldr	r0, [pc, #200]	; (80014a4 <TMCsetup+0x6d0>)
 80013dc:	f005 fdd3 	bl	8006f86 <tmc2209_readInt>
 80013e0:	4603      	mov	r3, r0
 80013e2:	13db      	asrs	r3, r3, #15
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	61bb      	str	r3, [r7, #24]
	printf("TBL: %ld\r\n", TBL_value);
 80013ea:	69b9      	ldr	r1, [r7, #24]
 80013ec:	4837      	ldr	r0, [pc, #220]	; (80014cc <TMCsetup+0x6f8>)
 80013ee:	f005 ff97 	bl	8007320 <iprintf>

	stealthChop_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_GRAD_MASK, TMC2209_PWM_GRAD_SHIFT);
 80013f2:	2170      	movs	r1, #112	; 0x70
 80013f4:	482b      	ldr	r0, [pc, #172]	; (80014a4 <TMCsetup+0x6d0>)
 80013f6:	f005 fdc6 	bl	8006f86 <tmc2209_readInt>
 80013fa:	4603      	mov	r3, r0
 80013fc:	121b      	asrs	r3, r3, #8
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	617b      	str	r3, [r7, #20]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8001402:	f001 fa1f 	bl	8002844 <HAL_GetTick>
 8001406:	4603      	mov	r3, r0
 8001408:	4619      	mov	r1, r3
 800140a:	4826      	ldr	r0, [pc, #152]	; (80014a4 <TMCsetup+0x6d0>)
 800140c:	f005 fef1 	bl	80071f2 <tmc2209_periodicJob>
	printf("PWM_GRAD: %ld\r\n", stealthChop_value);
 8001410:	6979      	ldr	r1, [r7, #20]
 8001412:	482b      	ldr	r0, [pc, #172]	; (80014c0 <TMCsetup+0x6ec>)
 8001414:	f005 ff84 	bl	8007320 <iprintf>

	autoscale_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_AUTOSCALE_MASK, TMC2209_PWM_AUTOSCALE_SHIFT);
 8001418:	2170      	movs	r1, #112	; 0x70
 800141a:	4822      	ldr	r0, [pc, #136]	; (80014a4 <TMCsetup+0x6d0>)
 800141c:	f005 fdb3 	bl	8006f86 <tmc2209_readInt>
 8001420:	4603      	mov	r3, r0
 8001422:	149b      	asrs	r3, r3, #18
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	613b      	str	r3, [r7, #16]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800142a:	f001 fa0b 	bl	8002844 <HAL_GetTick>
 800142e:	4603      	mov	r3, r0
 8001430:	4619      	mov	r1, r3
 8001432:	481c      	ldr	r0, [pc, #112]	; (80014a4 <TMCsetup+0x6d0>)
 8001434:	f005 fedd 	bl	80071f2 <tmc2209_periodicJob>
	printf("autoscale: %ld\r\n", autoscale_value);
 8001438:	6939      	ldr	r1, [r7, #16]
 800143a:	4825      	ldr	r0, [pc, #148]	; (80014d0 <TMCsetup+0x6fc>)
 800143c:	f005 ff70 	bl	8007320 <iprintf>

	PWMAuto_value = tmc2209_readInt(&TMC2209,TMC2209_PWM_AUTO);
 8001440:	2172      	movs	r1, #114	; 0x72
 8001442:	4818      	ldr	r0, [pc, #96]	; (80014a4 <TMCsetup+0x6d0>)
 8001444:	f005 fd9f 	bl	8006f86 <tmc2209_readInt>
 8001448:	60f8      	str	r0, [r7, #12]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800144a:	f001 f9fb 	bl	8002844 <HAL_GetTick>
 800144e:	4603      	mov	r3, r0
 8001450:	4619      	mov	r1, r3
 8001452:	4814      	ldr	r0, [pc, #80]	; (80014a4 <TMCsetup+0x6d0>)
 8001454:	f005 fecd 	bl	80071f2 <tmc2209_periodicJob>
	printf("PWMAuto: %ld\r\n", PWMAuto_value);
 8001458:	68f9      	ldr	r1, [r7, #12]
 800145a:	481e      	ldr	r0, [pc, #120]	; (80014d4 <TMCsetup+0x700>)
 800145c:	f005 ff60 	bl	8007320 <iprintf>

	PWMAuto_scale = tmc2209_readInt(&TMC2209,TMC2209_PWMSCALE);
 8001460:	2171      	movs	r1, #113	; 0x71
 8001462:	4810      	ldr	r0, [pc, #64]	; (80014a4 <TMCsetup+0x6d0>)
 8001464:	f005 fd8f 	bl	8006f86 <tmc2209_readInt>
 8001468:	60b8      	str	r0, [r7, #8]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800146a:	f001 f9eb 	bl	8002844 <HAL_GetTick>
 800146e:	4603      	mov	r3, r0
 8001470:	4619      	mov	r1, r3
 8001472:	480c      	ldr	r0, [pc, #48]	; (80014a4 <TMCsetup+0x6d0>)
 8001474:	f005 febd 	bl	80071f2 <tmc2209_periodicJob>
	printf("PWMSCALE: %ld\r\n", PWMAuto_scale);
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	4817      	ldr	r0, [pc, #92]	; (80014d8 <TMCsetup+0x704>)
 800147c:	f005 ff50 	bl	8007320 <iprintf>

	value = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, 0x07, TMC2209_FCLKTRIM_MASK, TMC2209_FCLKTRIM_SHIFT);
 8001484:	2107      	movs	r1, #7
 8001486:	4807      	ldr	r0, [pc, #28]	; (80014a4 <TMCsetup+0x6d0>)
 8001488:	f005 fd7d 	bl	8006f86 <tmc2209_readInt>
 800148c:	4603      	mov	r3, r0
 800148e:	f003 031f 	and.w	r3, r3, #31
 8001492:	607b      	str	r3, [r7, #4]

	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8001494:	f001 f9d6 	bl	8002844 <HAL_GetTick>
 8001498:	4603      	mov	r3, r0
 800149a:	4619      	mov	r1, r3
 800149c:	e01e      	b.n	80014dc <TMCsetup+0x708>
 800149e:	bf00      	nop
 80014a0:	08008610 	.word	0x08008610
 80014a4:	20000184 	.word	0x20000184
 80014a8:	08008624 	.word	0x08008624
 80014ac:	08008638 	.word	0x08008638
 80014b0:	0800864c 	.word	0x0800864c
 80014b4:	08008668 	.word	0x08008668
 80014b8:	08008680 	.word	0x08008680
 80014bc:	08008694 	.word	0x08008694
 80014c0:	080086a4 	.word	0x080086a4
 80014c4:	080086b4 	.word	0x080086b4
 80014c8:	080086c4 	.word	0x080086c4
 80014cc:	080086d4 	.word	0x080086d4
 80014d0:	080086e0 	.word	0x080086e0
 80014d4:	080086f4 	.word	0x080086f4
 80014d8:	08008704 	.word	0x08008704
 80014dc:	4806      	ldr	r0, [pc, #24]	; (80014f8 <TMCsetup+0x724>)
 80014de:	f005 fe88 	bl	80071f2 <tmc2209_periodicJob>
	printf("frequency: %ld\r\n", value);
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4805      	ldr	r0, [pc, #20]	; (80014fc <TMCsetup+0x728>)
 80014e6:	f005 ff1b 	bl	8007320 <iprintf>




	end_flag=1;
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <TMCsetup+0x72c>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	701a      	strb	r2, [r3, #0]

}
 80014f0:	bf00      	nop
 80014f2:	3740      	adds	r7, #64	; 0x40
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000184 	.word	0x20000184
 80014fc:	08008714 	.word	0x08008714
 8001500:	200006ed 	.word	0x200006ed

08001504 <RMDCommand>:

void RMDCommand(){
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
//	int i = 0;
	int count=0;
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
	TxHeader.StdId=0x141;
 800150e:	4b93      	ldr	r3, [pc, #588]	; (800175c <RMDCommand+0x258>)
 8001510:	f240 1241 	movw	r2, #321	; 0x141
 8001514:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 8001516:	4b91      	ldr	r3, [pc, #580]	; (800175c <RMDCommand+0x258>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 0x08;
 800151c:	4b8f      	ldr	r3, [pc, #572]	; (800175c <RMDCommand+0x258>)
 800151e:	2208      	movs	r2, #8
 8001520:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8001522:	4b8e      	ldr	r3, [pc, #568]	; (800175c <RMDCommand+0x258>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001528:	4b8c      	ldr	r3, [pc, #560]	; (800175c <RMDCommand+0x258>)
 800152a:	2200      	movs	r2, #0
 800152c:	751a      	strb	r2, [r3, #20]
	TxData[1] = 0x00;
 800152e:	4b8c      	ldr	r3, [pc, #560]	; (8001760 <RMDCommand+0x25c>)
 8001530:	2200      	movs	r2, #0
 8001532:	705a      	strb	r2, [r3, #1]
	TxData[2] = 0x00;
 8001534:	4b8a      	ldr	r3, [pc, #552]	; (8001760 <RMDCommand+0x25c>)
 8001536:	2200      	movs	r2, #0
 8001538:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0x00;
 800153a:	4b89      	ldr	r3, [pc, #548]	; (8001760 <RMDCommand+0x25c>)
 800153c:	2200      	movs	r2, #0
 800153e:	70da      	strb	r2, [r3, #3]
	TxData[4] = 0x00;
 8001540:	4b87      	ldr	r3, [pc, #540]	; (8001760 <RMDCommand+0x25c>)
 8001542:	2200      	movs	r2, #0
 8001544:	711a      	strb	r2, [r3, #4]
	TxData[5] = 0x00;
 8001546:	4b86      	ldr	r3, [pc, #536]	; (8001760 <RMDCommand+0x25c>)
 8001548:	2200      	movs	r2, #0
 800154a:	715a      	strb	r2, [r3, #5]
	TxData[6] = 0x00;
 800154c:	4b84      	ldr	r3, [pc, #528]	; (8001760 <RMDCommand+0x25c>)
 800154e:	2200      	movs	r2, #0
 8001550:	719a      	strb	r2, [r3, #6]
	TxData[7] = 0x00;
 8001552:	4b83      	ldr	r3, [pc, #524]	; (8001760 <RMDCommand+0x25c>)
 8001554:	2200      	movs	r2, #0
 8001556:	71da      	strb	r2, [r3, #7]
	switch(Writecom){
 8001558:	4b82      	ldr	r3, [pc, #520]	; (8001764 <RMDCommand+0x260>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2ba4      	cmp	r3, #164	; 0xa4
 800155e:	d065      	beq.n	800162c <RMDCommand+0x128>
 8001560:	2ba4      	cmp	r3, #164	; 0xa4
 8001562:	dc7e      	bgt.n	8001662 <RMDCommand+0x15e>
 8001564:	2ba1      	cmp	r3, #161	; 0xa1
 8001566:	d055      	beq.n	8001614 <RMDCommand+0x110>
 8001568:	2ba1      	cmp	r3, #161	; 0xa1
 800156a:	dc7a      	bgt.n	8001662 <RMDCommand+0x15e>
 800156c:	2b34      	cmp	r3, #52	; 0x34
 800156e:	d03d      	beq.n	80015ec <RMDCommand+0xe8>
 8001570:	2b34      	cmp	r3, #52	; 0x34
 8001572:	dc76      	bgt.n	8001662 <RMDCommand+0x15e>
 8001574:	2b31      	cmp	r3, #49	; 0x31
 8001576:	d002      	beq.n	800157e <RMDCommand+0x7a>
 8001578:	2b32      	cmp	r3, #50	; 0x32
 800157a:	d01b      	beq.n	80015b4 <RMDCommand+0xb0>
 800157c:	e071      	b.n	8001662 <RMDCommand+0x15e>
		case 0x31:
			TxData[0] = 0x31;	//PI設定
 800157e:	4b78      	ldr	r3, [pc, #480]	; (8001760 <RMDCommand+0x25c>)
 8001580:	2231      	movs	r2, #49	; 0x31
 8001582:	701a      	strb	r2, [r3, #0]
			TxData[2] = UART1_Data[2];	//anglePidKp
 8001584:	4b78      	ldr	r3, [pc, #480]	; (8001768 <RMDCommand+0x264>)
 8001586:	789a      	ldrb	r2, [r3, #2]
 8001588:	4b75      	ldr	r3, [pc, #468]	; (8001760 <RMDCommand+0x25c>)
 800158a:	709a      	strb	r2, [r3, #2]
			TxData[3] = UART1_Data[3];	//anglePidKi
 800158c:	4b76      	ldr	r3, [pc, #472]	; (8001768 <RMDCommand+0x264>)
 800158e:	78da      	ldrb	r2, [r3, #3]
 8001590:	4b73      	ldr	r3, [pc, #460]	; (8001760 <RMDCommand+0x25c>)
 8001592:	70da      	strb	r2, [r3, #3]
			TxData[4] = UART1_Data[4];	//speedPidKp
 8001594:	4b74      	ldr	r3, [pc, #464]	; (8001768 <RMDCommand+0x264>)
 8001596:	791a      	ldrb	r2, [r3, #4]
 8001598:	4b71      	ldr	r3, [pc, #452]	; (8001760 <RMDCommand+0x25c>)
 800159a:	711a      	strb	r2, [r3, #4]
			TxData[5] = UART1_Data[5];	//speedPidKi
 800159c:	4b72      	ldr	r3, [pc, #456]	; (8001768 <RMDCommand+0x264>)
 800159e:	795a      	ldrb	r2, [r3, #5]
 80015a0:	4b6f      	ldr	r3, [pc, #444]	; (8001760 <RMDCommand+0x25c>)
 80015a2:	715a      	strb	r2, [r3, #5]
			TxData[6] = UART1_Data[6];	//iqPidKp
 80015a4:	4b70      	ldr	r3, [pc, #448]	; (8001768 <RMDCommand+0x264>)
 80015a6:	799a      	ldrb	r2, [r3, #6]
 80015a8:	4b6d      	ldr	r3, [pc, #436]	; (8001760 <RMDCommand+0x25c>)
 80015aa:	719a      	strb	r2, [r3, #6]
			TxData[7] = UART1_Data[7];	//iqPidKi
 80015ac:	4b6e      	ldr	r3, [pc, #440]	; (8001768 <RMDCommand+0x264>)
 80015ae:	79da      	ldrb	r2, [r3, #7]
 80015b0:	4b6b      	ldr	r3, [pc, #428]	; (8001760 <RMDCommand+0x25c>)
 80015b2:	71da      	strb	r2, [r3, #7]
		case 0x32:
			TxData[0] = 0x32;	//PI設定
 80015b4:	4b6a      	ldr	r3, [pc, #424]	; (8001760 <RMDCommand+0x25c>)
 80015b6:	2232      	movs	r2, #50	; 0x32
 80015b8:	701a      	strb	r2, [r3, #0]
			TxData[2] = UART1_Data[2];	//anglePidKp
 80015ba:	4b6b      	ldr	r3, [pc, #428]	; (8001768 <RMDCommand+0x264>)
 80015bc:	789a      	ldrb	r2, [r3, #2]
 80015be:	4b68      	ldr	r3, [pc, #416]	; (8001760 <RMDCommand+0x25c>)
 80015c0:	709a      	strb	r2, [r3, #2]
			TxData[3] = UART1_Data[3];	//anglePidKi
 80015c2:	4b69      	ldr	r3, [pc, #420]	; (8001768 <RMDCommand+0x264>)
 80015c4:	78da      	ldrb	r2, [r3, #3]
 80015c6:	4b66      	ldr	r3, [pc, #408]	; (8001760 <RMDCommand+0x25c>)
 80015c8:	70da      	strb	r2, [r3, #3]
			TxData[4] = UART1_Data[4];	//speedPidKp
 80015ca:	4b67      	ldr	r3, [pc, #412]	; (8001768 <RMDCommand+0x264>)
 80015cc:	791a      	ldrb	r2, [r3, #4]
 80015ce:	4b64      	ldr	r3, [pc, #400]	; (8001760 <RMDCommand+0x25c>)
 80015d0:	711a      	strb	r2, [r3, #4]
			TxData[5] = UART1_Data[5];	//speedPidKi
 80015d2:	4b65      	ldr	r3, [pc, #404]	; (8001768 <RMDCommand+0x264>)
 80015d4:	795a      	ldrb	r2, [r3, #5]
 80015d6:	4b62      	ldr	r3, [pc, #392]	; (8001760 <RMDCommand+0x25c>)
 80015d8:	715a      	strb	r2, [r3, #5]
			TxData[6] = UART1_Data[6];	//iqPidKp
 80015da:	4b63      	ldr	r3, [pc, #396]	; (8001768 <RMDCommand+0x264>)
 80015dc:	799a      	ldrb	r2, [r3, #6]
 80015de:	4b60      	ldr	r3, [pc, #384]	; (8001760 <RMDCommand+0x25c>)
 80015e0:	719a      	strb	r2, [r3, #6]
			TxData[7] = UART1_Data[7];	//iqPidKi
 80015e2:	4b61      	ldr	r3, [pc, #388]	; (8001768 <RMDCommand+0x264>)
 80015e4:	79da      	ldrb	r2, [r3, #7]
 80015e6:	4b5e      	ldr	r3, [pc, #376]	; (8001760 <RMDCommand+0x25c>)
 80015e8:	71da      	strb	r2, [r3, #7]
			break;
 80015ea:	e041      	b.n	8001670 <RMDCommand+0x16c>
		case 0x34:
			TxData[0] = 0x34;	//accelePI設定
 80015ec:	4b5c      	ldr	r3, [pc, #368]	; (8001760 <RMDCommand+0x25c>)
 80015ee:	2234      	movs	r2, #52	; 0x34
 80015f0:	701a      	strb	r2, [r3, #0]
			TxData[4] = UART1_Data[4];	//speedI
 80015f2:	4b5d      	ldr	r3, [pc, #372]	; (8001768 <RMDCommand+0x264>)
 80015f4:	791a      	ldrb	r2, [r3, #4]
 80015f6:	4b5a      	ldr	r3, [pc, #360]	; (8001760 <RMDCommand+0x25c>)
 80015f8:	711a      	strb	r2, [r3, #4]
			TxData[5] = UART1_Data[5];	//TorqueP
 80015fa:	4b5b      	ldr	r3, [pc, #364]	; (8001768 <RMDCommand+0x264>)
 80015fc:	795a      	ldrb	r2, [r3, #5]
 80015fe:	4b58      	ldr	r3, [pc, #352]	; (8001760 <RMDCommand+0x25c>)
 8001600:	715a      	strb	r2, [r3, #5]
			TxData[6] = UART1_Data[6];	//TorqueI
 8001602:	4b59      	ldr	r3, [pc, #356]	; (8001768 <RMDCommand+0x264>)
 8001604:	799a      	ldrb	r2, [r3, #6]
 8001606:	4b56      	ldr	r3, [pc, #344]	; (8001760 <RMDCommand+0x25c>)
 8001608:	719a      	strb	r2, [r3, #6]
			TxData[7] = UART1_Data[7];	//PosI
 800160a:	4b57      	ldr	r3, [pc, #348]	; (8001768 <RMDCommand+0x264>)
 800160c:	79da      	ldrb	r2, [r3, #7]
 800160e:	4b54      	ldr	r3, [pc, #336]	; (8001760 <RMDCommand+0x25c>)
 8001610:	71da      	strb	r2, [r3, #7]
			break;
 8001612:	e02d      	b.n	8001670 <RMDCommand+0x16c>
		case 0xA1:
			TxData[0] = 0xA1;	//Torque設定
 8001614:	4b52      	ldr	r3, [pc, #328]	; (8001760 <RMDCommand+0x25c>)
 8001616:	22a1      	movs	r2, #161	; 0xa1
 8001618:	701a      	strb	r2, [r3, #0]
			TxData[4] = UART1_Data[4];	//currentlow
 800161a:	4b53      	ldr	r3, [pc, #332]	; (8001768 <RMDCommand+0x264>)
 800161c:	791a      	ldrb	r2, [r3, #4]
 800161e:	4b50      	ldr	r3, [pc, #320]	; (8001760 <RMDCommand+0x25c>)
 8001620:	711a      	strb	r2, [r3, #4]
			TxData[5] = UART1_Data[5];	//currenthigh
 8001622:	4b51      	ldr	r3, [pc, #324]	; (8001768 <RMDCommand+0x264>)
 8001624:	795a      	ldrb	r2, [r3, #5]
 8001626:	4b4e      	ldr	r3, [pc, #312]	; (8001760 <RMDCommand+0x25c>)
 8001628:	715a      	strb	r2, [r3, #5]
			break;
 800162a:	e021      	b.n	8001670 <RMDCommand+0x16c>
		case 0xA4:
			TxData[0] = 0xA4;
 800162c:	4b4c      	ldr	r3, [pc, #304]	; (8001760 <RMDCommand+0x25c>)
 800162e:	22a4      	movs	r2, #164	; 0xa4
 8001630:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x00;
 8001632:	4b4b      	ldr	r3, [pc, #300]	; (8001760 <RMDCommand+0x25c>)
 8001634:	2200      	movs	r2, #0
 8001636:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x2C;	//speed low
 8001638:	4b49      	ldr	r3, [pc, #292]	; (8001760 <RMDCommand+0x25c>)
 800163a:	222c      	movs	r2, #44	; 0x2c
 800163c:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x01;	//speed high
 800163e:	4b48      	ldr	r3, [pc, #288]	; (8001760 <RMDCommand+0x25c>)
 8001640:	2201      	movs	r2, #1
 8001642:	70da      	strb	r2, [r3, #3]
			TxData[4] = UART1_Data[4];	//poslow
 8001644:	4b48      	ldr	r3, [pc, #288]	; (8001768 <RMDCommand+0x264>)
 8001646:	791a      	ldrb	r2, [r3, #4]
 8001648:	4b45      	ldr	r3, [pc, #276]	; (8001760 <RMDCommand+0x25c>)
 800164a:	711a      	strb	r2, [r3, #4]
			TxData[5] = UART1_Data[5];
 800164c:	4b46      	ldr	r3, [pc, #280]	; (8001768 <RMDCommand+0x264>)
 800164e:	795a      	ldrb	r2, [r3, #5]
 8001650:	4b43      	ldr	r3, [pc, #268]	; (8001760 <RMDCommand+0x25c>)
 8001652:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8001654:	4b42      	ldr	r3, [pc, #264]	; (8001760 <RMDCommand+0x25c>)
 8001656:	2200      	movs	r2, #0
 8001658:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;	//poshigh
 800165a:	4b41      	ldr	r3, [pc, #260]	; (8001760 <RMDCommand+0x25c>)
 800165c:	2200      	movs	r2, #0
 800165e:	71da      	strb	r2, [r3, #7]
			break;
 8001660:	e006      	b.n	8001670 <RMDCommand+0x16c>
		default:
			printf("No Data Writecom\r\n");
 8001662:	4842      	ldr	r0, [pc, #264]	; (800176c <RMDCommand+0x268>)
 8001664:	f005 fee2 	bl	800742c <puts>
			end_flag=1;
 8001668:	4b41      	ldr	r3, [pc, #260]	; (8001770 <RMDCommand+0x26c>)
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
			break;
 800166e:	bf00      	nop
		}
	Writecom=0x00;
 8001670:	4b3c      	ldr	r3, [pc, #240]	; (8001764 <RMDCommand+0x260>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
	switch(Readcom){
 8001676:	4b3f      	ldr	r3, [pc, #252]	; (8001774 <RMDCommand+0x270>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2ba1      	cmp	r3, #161	; 0xa1
 800167c:	d01a      	beq.n	80016b4 <RMDCommand+0x1b0>
 800167e:	2ba1      	cmp	r3, #161	; 0xa1
 8001680:	dc1f      	bgt.n	80016c2 <RMDCommand+0x1be>
 8001682:	2b9c      	cmp	r3, #156	; 0x9c
 8001684:	d012      	beq.n	80016ac <RMDCommand+0x1a8>
 8001686:	2b9c      	cmp	r3, #156	; 0x9c
 8001688:	dc1b      	bgt.n	80016c2 <RMDCommand+0x1be>
 800168a:	2b90      	cmp	r3, #144	; 0x90
 800168c:	d015      	beq.n	80016ba <RMDCommand+0x1b6>
 800168e:	2b90      	cmp	r3, #144	; 0x90
 8001690:	dc17      	bgt.n	80016c2 <RMDCommand+0x1be>
 8001692:	2b30      	cmp	r3, #48	; 0x30
 8001694:	d002      	beq.n	800169c <RMDCommand+0x198>
 8001696:	2b33      	cmp	r3, #51	; 0x33
 8001698:	d004      	beq.n	80016a4 <RMDCommand+0x1a0>
 800169a:	e012      	b.n	80016c2 <RMDCommand+0x1be>
		case 0x30:
			TxData[0] = 0x30;
 800169c:	4b30      	ldr	r3, [pc, #192]	; (8001760 <RMDCommand+0x25c>)
 800169e:	2230      	movs	r2, #48	; 0x30
 80016a0:	701a      	strb	r2, [r3, #0]
			break;
 80016a2:	e015      	b.n	80016d0 <RMDCommand+0x1cc>
		case 0x33:
			TxData[0] = 0x33;
 80016a4:	4b2e      	ldr	r3, [pc, #184]	; (8001760 <RMDCommand+0x25c>)
 80016a6:	2233      	movs	r2, #51	; 0x33
 80016a8:	701a      	strb	r2, [r3, #0]
			break;
 80016aa:	e011      	b.n	80016d0 <RMDCommand+0x1cc>
		case 0x9C:
			TxData[0] = 0x9C;
 80016ac:	4b2c      	ldr	r3, [pc, #176]	; (8001760 <RMDCommand+0x25c>)
 80016ae:	229c      	movs	r2, #156	; 0x9c
 80016b0:	701a      	strb	r2, [r3, #0]
			break;
 80016b2:	e00d      	b.n	80016d0 <RMDCommand+0x1cc>
		case 0xA1:
			TxData[0] = 0xA1;
 80016b4:	4b2a      	ldr	r3, [pc, #168]	; (8001760 <RMDCommand+0x25c>)
 80016b6:	22a1      	movs	r2, #161	; 0xa1
 80016b8:	701a      	strb	r2, [r3, #0]
		case 0x90:
			TxData[0] = 0x90;
 80016ba:	4b29      	ldr	r3, [pc, #164]	; (8001760 <RMDCommand+0x25c>)
 80016bc:	2290      	movs	r2, #144	; 0x90
 80016be:	701a      	strb	r2, [r3, #0]
			break;
 80016c0:	e006      	b.n	80016d0 <RMDCommand+0x1cc>
		default:
			printf("No Data Readcom\r\n");
 80016c2:	482d      	ldr	r0, [pc, #180]	; (8001778 <RMDCommand+0x274>)
 80016c4:	f005 feb2 	bl	800742c <puts>
			end_flag=1;
 80016c8:	4b29      	ldr	r3, [pc, #164]	; (8001770 <RMDCommand+0x26c>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	701a      	strb	r2, [r3, #0]
			break;
 80016ce:	bf00      	nop
	}
	Readcom=0x00;
 80016d0:	4b28      	ldr	r3, [pc, #160]	; (8001774 <RMDCommand+0x270>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) ){
 80016d6:	4829      	ldr	r0, [pc, #164]	; (800177c <RMDCommand+0x278>)
 80016d8:	f001 fc28 	bl	8002f2c <HAL_CAN_GetTxMailboxesFreeLevel>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d02e      	beq.n	8001740 <RMDCommand+0x23c>
		HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 80016e2:	4b27      	ldr	r3, [pc, #156]	; (8001780 <RMDCommand+0x27c>)
 80016e4:	4a1e      	ldr	r2, [pc, #120]	; (8001760 <RMDCommand+0x25c>)
 80016e6:	491d      	ldr	r1, [pc, #116]	; (800175c <RMDCommand+0x258>)
 80016e8:	4824      	ldr	r0, [pc, #144]	; (800177c <RMDCommand+0x278>)
 80016ea:	f001 fb44 	bl	8002d76 <HAL_CAN_AddTxMessage>
		HAL_Delay(1);
 80016ee:	2001      	movs	r0, #1
 80016f0:	f001 f8b4 	bl	800285c <HAL_Delay>
//		printf("Can Send\r\n");
		while(!nextcan_flag){
 80016f4:	e01a      	b.n	800172c <RMDCommand+0x228>
//			printf("Mailboxes: %d\r\n",HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
			HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <RMDCommand+0x27c>)
 80016f8:	4a19      	ldr	r2, [pc, #100]	; (8001760 <RMDCommand+0x25c>)
 80016fa:	4918      	ldr	r1, [pc, #96]	; (800175c <RMDCommand+0x258>)
 80016fc:	481f      	ldr	r0, [pc, #124]	; (800177c <RMDCommand+0x278>)
 80016fe:	f001 fb3a 	bl	8002d76 <HAL_CAN_AddTxMessage>
			HAL_Delay(1);
 8001702:	2001      	movs	r0, #1
 8001704:	f001 f8aa 	bl	800285c <HAL_Delay>
			count++;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3301      	adds	r3, #1
 800170c:	607b      	str	r3, [r7, #4]
			if(count==10){
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0a      	cmp	r3, #10
 8001712:	d10b      	bne.n	800172c <RMDCommand+0x228>
				nextcan_flag=1;
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <RMDCommand+0x280>)
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]
				HAL_CAN_Stop (&hcan1);
 800171a:	4818      	ldr	r0, [pc, #96]	; (800177c <RMDCommand+0x278>)
 800171c:	f001 fae2 	bl	8002ce4 <HAL_CAN_Stop>
				//HAL_CAN_AbortTxRequest(&hcan1,TxMailbox);
				HAL_CAN_Start(&hcan1);
 8001720:	4816      	ldr	r0, [pc, #88]	; (800177c <RMDCommand+0x278>)
 8001722:	f001 fa9b 	bl	8002c5c <HAL_CAN_Start>
				printf("CAN RESET\r\n");
 8001726:	4818      	ldr	r0, [pc, #96]	; (8001788 <RMDCommand+0x284>)
 8001728:	f005 fe80 	bl	800742c <puts>
		while(!nextcan_flag){
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <RMDCommand+0x280>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0e0      	beq.n	80016f6 <RMDCommand+0x1f2>
			}
		}
		nextcan_flag=0;
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <RMDCommand+0x280>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
		count=0;
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
	}else{
		printf("Mailbox_congestion\r\n");
		nextcan_flag=0;
		end_flag=1;
	}
}
 800173e:	e008      	b.n	8001752 <RMDCommand+0x24e>
		printf("Mailbox_congestion\r\n");
 8001740:	4812      	ldr	r0, [pc, #72]	; (800178c <RMDCommand+0x288>)
 8001742:	f005 fe73 	bl	800742c <puts>
		nextcan_flag=0;
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <RMDCommand+0x280>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
		end_flag=1;
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <RMDCommand+0x26c>)
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000069c 	.word	0x2000069c
 8001760:	200006d0 	.word	0x200006d0
 8001764:	200006f0 	.word	0x200006f0
 8001768:	200006e4 	.word	0x200006e4
 800176c:	08008728 	.word	0x08008728
 8001770:	200006ed 	.word	0x200006ed
 8001774:	200006f4 	.word	0x200006f4
 8001778:	0800873c 	.word	0x0800873c
 800177c:	2000008c 	.word	0x2000008c
 8001780:	200006e0 	.word	0x200006e0
 8001784:	200006ee 	.word	0x200006ee
 8001788:	08008750 	.word	0x08008750
 800178c:	0800875c 	.word	0x0800875c

08001790 <SetUpRMD>:
void SetUpRMD(){
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	UART1_Data[4] = 0x50;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <SetUpRMD+0x20>)
 8001796:	2250      	movs	r2, #80	; 0x50
 8001798:	711a      	strb	r2, [r3, #4]
	UART1_Data[5] = 0x46;
 800179a:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <SetUpRMD+0x20>)
 800179c:	2246      	movs	r2, #70	; 0x46
 800179e:	715a      	strb	r2, [r3, #5]
	Writecom = 0xA4;
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <SetUpRMD+0x24>)
 80017a2:	22a4      	movs	r2, #164	; 0xa4
 80017a4:	601a      	str	r2, [r3, #0]
	RMDCommand();
 80017a6:	f7ff fead 	bl	8001504 <RMDCommand>
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200006e4 	.word	0x200006e4
 80017b4:	200006f0 	.word	0x200006f0

080017b8 <RMDLeftTurn>:
void RMDLeftTurn(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	UART1_Data[4] = 0xE0;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <RMDLeftTurn+0x20>)
 80017be:	22e0      	movs	r2, #224	; 0xe0
 80017c0:	711a      	strb	r2, [r3, #4]
	UART1_Data[5] = 0x2E;
 80017c2:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <RMDLeftTurn+0x20>)
 80017c4:	222e      	movs	r2, #46	; 0x2e
 80017c6:	715a      	strb	r2, [r3, #5]
	Writecom=0xA4;
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <RMDLeftTurn+0x24>)
 80017ca:	22a4      	movs	r2, #164	; 0xa4
 80017cc:	601a      	str	r2, [r3, #0]
	RMDCommand();
 80017ce:	f7ff fe99 	bl	8001504 <RMDCommand>
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200006e4 	.word	0x200006e4
 80017dc:	200006f0 	.word	0x200006f0

080017e0 <RMDRightTurn>:
void RMDRightTurn(){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	UART1_Data[4] = 0xC0;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <RMDRightTurn+0x20>)
 80017e6:	22c0      	movs	r2, #192	; 0xc0
 80017e8:	711a      	strb	r2, [r3, #4]
	UART1_Data[5] = 0x5D;
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <RMDRightTurn+0x20>)
 80017ec:	225d      	movs	r2, #93	; 0x5d
 80017ee:	715a      	strb	r2, [r3, #5]
	Writecom=0xA4;
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <RMDRightTurn+0x24>)
 80017f2:	22a4      	movs	r2, #164	; 0xa4
 80017f4:	601a      	str	r2, [r3, #0]
	RMDCommand();
 80017f6:	f7ff fe85 	bl	8001504 <RMDCommand>
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200006e4 	.word	0x200006e4
 8001804:	200006f0 	.word	0x200006f0

08001808 <checkRMDdata>:
void checkRMDdata(){
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
	int RxBitshift[4];
	RxBitshift[0]=0;
 800180e:	2300      	movs	r3, #0
 8001810:	603b      	str	r3, [r7, #0]
	RxBitshift[1]=0;
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
	RxBitshift[2]=0;
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
	RxBitshift[3]=0;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
	Readcom=0x30;
 800181e:	4b4a      	ldr	r3, [pc, #296]	; (8001948 <checkRMDdata+0x140>)
 8001820:	2230      	movs	r2, #48	; 0x30
 8001822:	601a      	str	r2, [r3, #0]
	RMDCommand();
 8001824:	f7ff fe6e 	bl	8001504 <RMDCommand>
	printf("0x30\r\n");
 8001828:	4848      	ldr	r0, [pc, #288]	; (800194c <checkRMDdata+0x144>)
 800182a:	f005 fdff 	bl	800742c <puts>
	printf("Position loop Kp :%d \r\n",RxData[2]);
 800182e:	4b48      	ldr	r3, [pc, #288]	; (8001950 <checkRMDdata+0x148>)
 8001830:	789b      	ldrb	r3, [r3, #2]
 8001832:	4619      	mov	r1, r3
 8001834:	4847      	ldr	r0, [pc, #284]	; (8001954 <checkRMDdata+0x14c>)
 8001836:	f005 fd73 	bl	8007320 <iprintf>
	printf("Position loop Ki :%d \r\n",RxData[3]);
 800183a:	4b45      	ldr	r3, [pc, #276]	; (8001950 <checkRMDdata+0x148>)
 800183c:	78db      	ldrb	r3, [r3, #3]
 800183e:	4619      	mov	r1, r3
 8001840:	4845      	ldr	r0, [pc, #276]	; (8001958 <checkRMDdata+0x150>)
 8001842:	f005 fd6d 	bl	8007320 <iprintf>
	printf("Speed loop Kp :%d \r\n",RxData[4]);
 8001846:	4b42      	ldr	r3, [pc, #264]	; (8001950 <checkRMDdata+0x148>)
 8001848:	791b      	ldrb	r3, [r3, #4]
 800184a:	4619      	mov	r1, r3
 800184c:	4843      	ldr	r0, [pc, #268]	; (800195c <checkRMDdata+0x154>)
 800184e:	f005 fd67 	bl	8007320 <iprintf>
	printf("Speed loop Ki :%d \r\n",RxData[5]);
 8001852:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <checkRMDdata+0x148>)
 8001854:	795b      	ldrb	r3, [r3, #5]
 8001856:	4619      	mov	r1, r3
 8001858:	4841      	ldr	r0, [pc, #260]	; (8001960 <checkRMDdata+0x158>)
 800185a:	f005 fd61 	bl	8007320 <iprintf>
	printf("Torque loop Kp :%d \r\n",RxData[6]);
 800185e:	4b3c      	ldr	r3, [pc, #240]	; (8001950 <checkRMDdata+0x148>)
 8001860:	799b      	ldrb	r3, [r3, #6]
 8001862:	4619      	mov	r1, r3
 8001864:	483f      	ldr	r0, [pc, #252]	; (8001964 <checkRMDdata+0x15c>)
 8001866:	f005 fd5b 	bl	8007320 <iprintf>
	printf("Torque loop Ki :%d \r\n",RxData[7]);
 800186a:	4b39      	ldr	r3, [pc, #228]	; (8001950 <checkRMDdata+0x148>)
 800186c:	79db      	ldrb	r3, [r3, #7]
 800186e:	4619      	mov	r1, r3
 8001870:	483d      	ldr	r0, [pc, #244]	; (8001968 <checkRMDdata+0x160>)
 8001872:	f005 fd55 	bl	8007320 <iprintf>

	Readcom=0x33;
 8001876:	4b34      	ldr	r3, [pc, #208]	; (8001948 <checkRMDdata+0x140>)
 8001878:	2233      	movs	r2, #51	; 0x33
 800187a:	601a      	str	r2, [r3, #0]
	RMDCommand();
 800187c:	f7ff fe42 	bl	8001504 <RMDCommand>
	printf("0x33\r\n");
 8001880:	483a      	ldr	r0, [pc, #232]	; (800196c <checkRMDdata+0x164>)
 8001882:	f005 fdd3 	bl	800742c <puts>
	printf("Position loop P:%d \r\n",RxData[2]);
 8001886:	4b32      	ldr	r3, [pc, #200]	; (8001950 <checkRMDdata+0x148>)
 8001888:	789b      	ldrb	r3, [r3, #2]
 800188a:	4619      	mov	r1, r3
 800188c:	4838      	ldr	r0, [pc, #224]	; (8001970 <checkRMDdata+0x168>)
 800188e:	f005 fd47 	bl	8007320 <iprintf>
	printf("Position loop I :%d \r\n",RxData[3]);
 8001892:	4b2f      	ldr	r3, [pc, #188]	; (8001950 <checkRMDdata+0x148>)
 8001894:	78db      	ldrb	r3, [r3, #3]
 8001896:	4619      	mov	r1, r3
 8001898:	4836      	ldr	r0, [pc, #216]	; (8001974 <checkRMDdata+0x16c>)
 800189a:	f005 fd41 	bl	8007320 <iprintf>
	printf("Speed loop P :%d \r\n",RxData[4]);
 800189e:	4b2c      	ldr	r3, [pc, #176]	; (8001950 <checkRMDdata+0x148>)
 80018a0:	791b      	ldrb	r3, [r3, #4]
 80018a2:	4619      	mov	r1, r3
 80018a4:	4834      	ldr	r0, [pc, #208]	; (8001978 <checkRMDdata+0x170>)
 80018a6:	f005 fd3b 	bl	8007320 <iprintf>
	printf("Speed loop I :%d \r\n",RxData[5]);
 80018aa:	4b29      	ldr	r3, [pc, #164]	; (8001950 <checkRMDdata+0x148>)
 80018ac:	795b      	ldrb	r3, [r3, #5]
 80018ae:	4619      	mov	r1, r3
 80018b0:	4832      	ldr	r0, [pc, #200]	; (800197c <checkRMDdata+0x174>)
 80018b2:	f005 fd35 	bl	8007320 <iprintf>
	printf("Torque loop P :%d \r\n",RxData[6]);
 80018b6:	4b26      	ldr	r3, [pc, #152]	; (8001950 <checkRMDdata+0x148>)
 80018b8:	799b      	ldrb	r3, [r3, #6]
 80018ba:	4619      	mov	r1, r3
 80018bc:	4830      	ldr	r0, [pc, #192]	; (8001980 <checkRMDdata+0x178>)
 80018be:	f005 fd2f 	bl	8007320 <iprintf>
	printf("Torque loop I :%d \r\n",RxData[7]);
 80018c2:	4b23      	ldr	r3, [pc, #140]	; (8001950 <checkRMDdata+0x148>)
 80018c4:	79db      	ldrb	r3, [r3, #7]
 80018c6:	4619      	mov	r1, r3
 80018c8:	482e      	ldr	r0, [pc, #184]	; (8001984 <checkRMDdata+0x17c>)
 80018ca:	f005 fd29 	bl	8007320 <iprintf>

	Readcom=0x9C;
 80018ce:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <checkRMDdata+0x140>)
 80018d0:	229c      	movs	r2, #156	; 0x9c
 80018d2:	601a      	str	r2, [r3, #0]
	RMDCommand();
 80018d4:	f7ff fe16 	bl	8001504 <RMDCommand>
	printf("0x9C\r\n");
 80018d8:	482b      	ldr	r0, [pc, #172]	; (8001988 <checkRMDdata+0x180>)
 80018da:	f005 fda7 	bl	800742c <puts>
	RxBitshift[0]=RxData[2] & 0xFF;
 80018de:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <checkRMDdata+0x148>)
 80018e0:	789b      	ldrb	r3, [r3, #2]
 80018e2:	603b      	str	r3, [r7, #0]
	RxBitshift[0]+=(RxData[3] & 0xFF) << 8;
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <checkRMDdata+0x148>)
 80018e8:	78db      	ldrb	r3, [r3, #3]
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	4413      	add	r3, r2
 80018ee:	603b      	str	r3, [r7, #0]
	RxBitshift[1]=RxData[4] & 0xFF;
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <checkRMDdata+0x148>)
 80018f2:	791b      	ldrb	r3, [r3, #4]
 80018f4:	607b      	str	r3, [r7, #4]
	RxBitshift[1]+=(RxData[5] & 0xFF) << 8;
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	4b15      	ldr	r3, [pc, #84]	; (8001950 <checkRMDdata+0x148>)
 80018fa:	795b      	ldrb	r3, [r3, #5]
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	4413      	add	r3, r2
 8001900:	607b      	str	r3, [r7, #4]
	RxBitshift[2]=RxData[6] & 0xFF;
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <checkRMDdata+0x148>)
 8001904:	799b      	ldrb	r3, [r3, #6]
 8001906:	60bb      	str	r3, [r7, #8]
	RxBitshift[2]+=(RxData[7] & 0xFF) << 8;
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <checkRMDdata+0x148>)
 800190c:	79db      	ldrb	r3, [r3, #7]
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	4413      	add	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
	printf("Motor temperature:%d \r\n",RxData[1]);
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <checkRMDdata+0x148>)
 8001916:	785b      	ldrb	r3, [r3, #1]
 8001918:	4619      	mov	r1, r3
 800191a:	481c      	ldr	r0, [pc, #112]	; (800198c <checkRMDdata+0x184>)
 800191c:	f005 fd00 	bl	8007320 <iprintf>
	printf("Torque current :%d \r\n",RxBitshift[0]);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	4619      	mov	r1, r3
 8001924:	481a      	ldr	r0, [pc, #104]	; (8001990 <checkRMDdata+0x188>)
 8001926:	f005 fcfb 	bl	8007320 <iprintf>
	printf("Speed :%d \r\n",RxBitshift[1]);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4619      	mov	r1, r3
 800192e:	4819      	ldr	r0, [pc, #100]	; (8001994 <checkRMDdata+0x18c>)
 8001930:	f005 fcf6 	bl	8007320 <iprintf>
	printf("Encoder position:%d \r\n",RxBitshift[2]);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4619      	mov	r1, r3
 8001938:	4817      	ldr	r0, [pc, #92]	; (8001998 <checkRMDdata+0x190>)
 800193a:	f005 fcf1 	bl	8007320 <iprintf>
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200006f4 	.word	0x200006f4
 800194c:	08008770 	.word	0x08008770
 8001950:	200006d8 	.word	0x200006d8
 8001954:	08008778 	.word	0x08008778
 8001958:	08008790 	.word	0x08008790
 800195c:	080087a8 	.word	0x080087a8
 8001960:	080087c0 	.word	0x080087c0
 8001964:	080087d8 	.word	0x080087d8
 8001968:	080087f0 	.word	0x080087f0
 800196c:	08008808 	.word	0x08008808
 8001970:	08008810 	.word	0x08008810
 8001974:	08008828 	.word	0x08008828
 8001978:	08008840 	.word	0x08008840
 800197c:	08008854 	.word	0x08008854
 8001980:	08008868 	.word	0x08008868
 8001984:	08008880 	.word	0x08008880
 8001988:	08008898 	.word	0x08008898
 800198c:	080088a0 	.word	0x080088a0
 8001990:	080088b8 	.word	0x080088b8
 8001994:	080088d0 	.word	0x080088d0
 8001998:	080088e0 	.word	0x080088e0

0800199c <RMDPIDSetting>:
void RMDPIDSetting(){
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	UART1_Data[2] = 0x64;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <RMDPIDSetting+0x38>)
 80019a2:	2264      	movs	r2, #100	; 0x64
 80019a4:	709a      	strb	r2, [r3, #2]
	UART1_Data[3] = 0x64;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <RMDPIDSetting+0x38>)
 80019a8:	2264      	movs	r2, #100	; 0x64
 80019aa:	70da      	strb	r2, [r3, #3]
	UART1_Data[4] = 0x28;
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <RMDPIDSetting+0x38>)
 80019ae:	2228      	movs	r2, #40	; 0x28
 80019b0:	711a      	strb	r2, [r3, #4]
	UART1_Data[5] = 0xE;
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <RMDPIDSetting+0x38>)
 80019b4:	220e      	movs	r2, #14
 80019b6:	715a      	strb	r2, [r3, #5]
	UART1_Data[6] = 0x14;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <RMDPIDSetting+0x38>)
 80019ba:	2214      	movs	r2, #20
 80019bc:	719a      	strb	r2, [r3, #6]
	UART1_Data[7] = 0x14;
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <RMDPIDSetting+0x38>)
 80019c0:	2214      	movs	r2, #20
 80019c2:	71da      	strb	r2, [r3, #7]
	Writecom=0x31;
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <RMDPIDSetting+0x3c>)
 80019c6:	2231      	movs	r2, #49	; 0x31
 80019c8:	601a      	str	r2, [r3, #0]
	RMDCommand();
 80019ca:	f7ff fd9b 	bl	8001504 <RMDCommand>
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200006e4 	.word	0x200006e4
 80019d8:	200006f0 	.word	0x200006f0

080019dc <UART1_InIt>:

void UART1_InIt(){
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
	UART1_Data[0] = 0x00;
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <UART1_InIt+0x40>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
	UART1_Data[1] = 0x00;
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <UART1_InIt+0x40>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	705a      	strb	r2, [r3, #1]
	UART1_Data[2] = 0x00;
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <UART1_InIt+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	709a      	strb	r2, [r3, #2]
	UART1_Data[3] = 0x00;
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <UART1_InIt+0x40>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	70da      	strb	r2, [r3, #3]
	UART1_Data[4] = 0x00;
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <UART1_InIt+0x40>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	711a      	strb	r2, [r3, #4]
	UART1_Data[5] = 0x00;
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <UART1_InIt+0x40>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	715a      	strb	r2, [r3, #5]
	UART1_Data[6] = 0x00;
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <UART1_InIt+0x40>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	719a      	strb	r2, [r3, #6]
	UART1_Data[7] = 0x00;
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <UART1_InIt+0x40>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	71da      	strb	r2, [r3, #7]
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	200006e4 	.word	0x200006e4

08001a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8001a26:	4bc9      	ldr	r3, [pc, #804]	; (8001d4c <main+0x32c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f005 fd04 	bl	800743c <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a34:	f000 fea0 	bl	8002778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a38:	f000 f9aa 	bl	8001d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a3c:	f000 fb14 	bl	8002068 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a40:	f000 fae8 	bl	8002014 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001a44:	f000 fa10 	bl	8001e68 <MX_CAN1_Init>
  MX_TIM3_Init();
 8001a48:	f000 fa46 	bl	8001ed8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001a4c:	f000 fab8 	bl	8001fc0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  TMC2209_INIT();
 8001a50:	f7fe fdfc 	bl	800064c <TMC2209_INIT>
  //rxbufを受信したらフラグを
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001a54:	2100      	movs	r1, #0
 8001a56:	48be      	ldr	r0, [pc, #760]	; (8001d50 <main+0x330>)
 8001a58:	f003 f80c 	bl	8004a74 <HAL_TIM_OC_Start_IT>
  printf("Hello\r\n");
 8001a5c:	48bd      	ldr	r0, [pc, #756]	; (8001d54 <main+0x334>)
 8001a5e:	f005 fce5 	bl	800742c <puts>
  steppers[0].dirFunc = Dir0;
 8001a62:	4bbd      	ldr	r3, [pc, #756]	; (8001d58 <main+0x338>)
 8001a64:	4abd      	ldr	r2, [pc, #756]	; (8001d5c <main+0x33c>)
 8001a66:	609a      	str	r2, [r3, #8]
  steppers[0].stepFunc = Step0;
 8001a68:	4bbb      	ldr	r3, [pc, #748]	; (8001d58 <main+0x338>)
 8001a6a:	4abd      	ldr	r2, [pc, #756]	; (8001d60 <main+0x340>)
 8001a6c:	60da      	str	r2, [r3, #12]
  steppers[0].acceleration = 1000;
 8001a6e:	4bba      	ldr	r3, [pc, #744]	; (8001d58 <main+0x338>)
 8001a70:	4abc      	ldr	r2, [pc, #752]	; (8001d64 <main+0x344>)
 8001a72:	601a      	str	r2, [r3, #0]
  steppers[0].minStepInterval = 100;
 8001a74:	4bb8      	ldr	r3, [pc, #736]	; (8001d58 <main+0x338>)
 8001a76:	2264      	movs	r2, #100	; 0x64
 8001a78:	605a      	str	r2, [r3, #4]
  steppers[0].homing = 0;
 8001a7a:	4bb7      	ldr	r3, [pc, #732]	; (8001d58 <main+0x338>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	741a      	strb	r2, [r3, #16]
  steppers[0].dir_inv = 1;
 8001a80:	4bb5      	ldr	r3, [pc, #724]	; (8001d58 <main+0x338>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	621a      	str	r2, [r3, #32]
  steppers[0].seeking_vel = 100;
 8001a86:	4bb4      	ldr	r3, [pc, #720]	; (8001d58 <main+0x338>)
 8001a88:	2264      	movs	r2, #100	; 0x64
 8001a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  steppers[0].homing_vel = 200;
 8001a8c:	4bb2      	ldr	r3, [pc, #712]	; (8001d58 <main+0x338>)
 8001a8e:	22c8      	movs	r2, #200	; 0xc8
 8001a90:	631a      	str	r2, [r3, #48]	; 0x30
  steppers[0].pull_off = 500;
 8001a92:	4bb1      	ldr	r3, [pc, #708]	; (8001d58 <main+0x338>)
 8001a94:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
  steppers[0].stall_off=10000;
 8001a9a:	4baf      	ldr	r3, [pc, #700]	; (8001d58 <main+0x338>)
 8001a9c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001aa0:	629a      	str	r2, [r3, #40]	; 0x28
  get_uart_flag=0;
 8001aa2:	4bb1      	ldr	r3, [pc, #708]	; (8001d68 <main+0x348>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]

sFilterConfig.FilterBank = 0;
 8001aa8:	4bb0      	ldr	r3, [pc, #704]	; (8001d6c <main+0x34c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	615a      	str	r2, [r3, #20]
sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001aae:	4baf      	ldr	r3, [pc, #700]	; (8001d6c <main+0x34c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001ab4:	4bad      	ldr	r3, [pc, #692]	; (8001d6c <main+0x34c>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	61da      	str	r2, [r3, #28]
sFilterConfig.FilterIdHigh = 0x0000;
 8001aba:	4bac      	ldr	r3, [pc, #688]	; (8001d6c <main+0x34c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
sFilterConfig.FilterIdLow = 0x0000;
 8001ac0:	4baa      	ldr	r3, [pc, #680]	; (8001d6c <main+0x34c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	605a      	str	r2, [r3, #4]
sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001ac6:	4ba9      	ldr	r3, [pc, #676]	; (8001d6c <main+0x34c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
sFilterConfig.FilterMaskIdLow = 0x0000;
 8001acc:	4ba7      	ldr	r3, [pc, #668]	; (8001d6c <main+0x34c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001ad2:	4ba6      	ldr	r3, [pc, #664]	; (8001d6c <main+0x34c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
//	sFilterConfig.FilterFIFOAssignment =CAN_FILTER_FIFO0;
sFilterConfig.FilterActivation=ENABLE;
 8001ad8:	4ba4      	ldr	r3, [pc, #656]	; (8001d6c <main+0x34c>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	621a      	str	r2, [r3, #32]
sFilterConfig.SlaveStartFilterBank=14;
 8001ade:	4ba3      	ldr	r3, [pc, #652]	; (8001d6c <main+0x34c>)
 8001ae0:	220e      	movs	r2, #14
 8001ae2:	625a      	str	r2, [r3, #36]	; 0x24

if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 8001ae4:	49a1      	ldr	r1, [pc, #644]	; (8001d6c <main+0x34c>)
 8001ae6:	48a2      	ldr	r0, [pc, #648]	; (8001d70 <main+0x350>)
 8001ae8:	f000 ffd8 	bl	8002a9c <HAL_CAN_ConfigFilter>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <main+0xd6>
{
	Error_Handler();
 8001af2:	f000 fbd5 	bl	80022a0 <Error_Handler>
}
if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 8001af6:	489e      	ldr	r0, [pc, #632]	; (8001d70 <main+0x350>)
 8001af8:	f001 f8b0 	bl	8002c5c <HAL_CAN_Start>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <main+0xe6>
{
	Error_Handler();
 8001b02:	f000 fbcd 	bl	80022a0 <Error_Handler>
}

if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8001b06:	2103      	movs	r1, #3
 8001b08:	4899      	ldr	r0, [pc, #612]	; (8001d70 <main+0x350>)
 8001b0a:	f001 fb56 	bl	80031ba <HAL_CAN_ActivateNotification>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <main+0xf8>
{
	Error_Handler();
 8001b14:	f000 fbc4 	bl	80022a0 <Error_Handler>
}

char KeyCommand[1];
KeyCommand[0]=0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	713b      	strb	r3, [r7, #4]
printf("RMD Start\r\n");
 8001b1c:	4895      	ldr	r0, [pc, #596]	; (8001d74 <main+0x354>)
 8001b1e:	f005 fc85 	bl	800742c <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //受信割り込みの開始=6byte受け取ったら次の処理へ
		  get_uart_flag=0;
 8001b22:	4b91      	ldr	r3, [pc, #580]	; (8001d68 <main+0x348>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
//		  int i=0;
		  HAL_UART_Receive_IT(&huart2, (uint8_t *)KeyCommand, 1);
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4892      	ldr	r0, [pc, #584]	; (8001d78 <main+0x358>)
 8001b30:	f004 f880 	bl	8005c34 <HAL_UART_Receive_IT>
	//	  printf("Key %d\r\n",KeyChange);
		  HAL_UART_Transmit(&huart2, (uint8_t *)KeyCommand, 1,300);
 8001b34:	1d39      	adds	r1, r7, #4
 8001b36:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	488e      	ldr	r0, [pc, #568]	; (8001d78 <main+0x358>)
 8001b3e:	f003 ff45 	bl	80059cc <HAL_UART_Transmit>
		  //受信するまで待つ
		  while(!get_uart_flag){}
 8001b42:	bf00      	nop
 8001b44:	4b88      	ldr	r3, [pc, #544]	; (8001d68 <main+0x348>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0fb      	beq.n	8001b44 <main+0x124>
		  UART1_InIt();
 8001b4c:	f7ff ff46 	bl	80019dc <UART1_InIt>
		  end_flag=0;
 8001b50:	4b8a      	ldr	r3, [pc, #552]	; (8001d7c <main+0x35c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
	  	   //canデータ受信用のフラグを0に
	//	  printf("beforecase\r\n");
			  if(KeyCommand[0]!=0 ){
 8001b56:	793b      	ldrb	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0e2      	beq.n	8001b22 <main+0x102>
				  switch(KeyCommand[0]){
 8001b5c:	793b      	ldrb	r3, [r7, #4]
 8001b5e:	3b30      	subs	r3, #48	; 0x30
 8001b60:	2b43      	cmp	r3, #67	; 0x43
 8001b62:	f200 80e3 	bhi.w	8001d2c <main+0x30c>
 8001b66:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <main+0x14c>)
 8001b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6c:	08001c7d 	.word	0x08001c7d
 8001b70:	08001c87 	.word	0x08001c87
 8001b74:	08001c91 	.word	0x08001c91
 8001b78:	08001c9b 	.word	0x08001c9b
 8001b7c:	08001d2d 	.word	0x08001d2d
 8001b80:	08001d2d 	.word	0x08001d2d
 8001b84:	08001d2d 	.word	0x08001d2d
 8001b88:	08001d2d 	.word	0x08001d2d
 8001b8c:	08001d2d 	.word	0x08001d2d
 8001b90:	08001ca5 	.word	0x08001ca5
 8001b94:	08001d2d 	.word	0x08001d2d
 8001b98:	08001d2d 	.word	0x08001d2d
 8001b9c:	08001d2d 	.word	0x08001d2d
 8001ba0:	08001d2d 	.word	0x08001d2d
 8001ba4:	08001d2d 	.word	0x08001d2d
 8001ba8:	08001d2d 	.word	0x08001d2d
 8001bac:	08001d2d 	.word	0x08001d2d
 8001bb0:	08001d2d 	.word	0x08001d2d
 8001bb4:	08001d2d 	.word	0x08001d2d
 8001bb8:	08001d2d 	.word	0x08001d2d
 8001bbc:	08001d2d 	.word	0x08001d2d
 8001bc0:	08001d2d 	.word	0x08001d2d
 8001bc4:	08001d2d 	.word	0x08001d2d
 8001bc8:	08001d2d 	.word	0x08001d2d
 8001bcc:	08001d2d 	.word	0x08001d2d
 8001bd0:	08001d2d 	.word	0x08001d2d
 8001bd4:	08001d2d 	.word	0x08001d2d
 8001bd8:	08001d2d 	.word	0x08001d2d
 8001bdc:	08001d2d 	.word	0x08001d2d
 8001be0:	08001d2d 	.word	0x08001d2d
 8001be4:	08001d2d 	.word	0x08001d2d
 8001be8:	08001d2d 	.word	0x08001d2d
 8001bec:	08001d2d 	.word	0x08001d2d
 8001bf0:	08001d2d 	.word	0x08001d2d
 8001bf4:	08001d2d 	.word	0x08001d2d
 8001bf8:	08001d2d 	.word	0x08001d2d
 8001bfc:	08001d2d 	.word	0x08001d2d
 8001c00:	08001d2d 	.word	0x08001d2d
 8001c04:	08001d2d 	.word	0x08001d2d
 8001c08:	08001d2d 	.word	0x08001d2d
 8001c0c:	08001d2d 	.word	0x08001d2d
 8001c10:	08001d2d 	.word	0x08001d2d
 8001c14:	08001d2d 	.word	0x08001d2d
 8001c18:	08001d2d 	.word	0x08001d2d
 8001c1c:	08001d2d 	.word	0x08001d2d
 8001c20:	08001d2d 	.word	0x08001d2d
 8001c24:	08001d2d 	.word	0x08001d2d
 8001c28:	08001d2d 	.word	0x08001d2d
 8001c2c:	08001d2d 	.word	0x08001d2d
 8001c30:	08001cb9 	.word	0x08001cb9
 8001c34:	08001d2d 	.word	0x08001d2d
 8001c38:	08001d2d 	.word	0x08001d2d
 8001c3c:	08001cdd 	.word	0x08001cdd
 8001c40:	08001d2d 	.word	0x08001d2d
 8001c44:	08001d2d 	.word	0x08001d2d
 8001c48:	08001d2d 	.word	0x08001d2d
 8001c4c:	08001cff 	.word	0x08001cff
 8001c50:	08001d2d 	.word	0x08001d2d
 8001c54:	08001d2d 	.word	0x08001d2d
 8001c58:	08001d1d 	.word	0x08001d1d
 8001c5c:	08001d2d 	.word	0x08001d2d
 8001c60:	08001d2d 	.word	0x08001d2d
 8001c64:	08001d2d 	.word	0x08001d2d
 8001c68:	08001d2d 	.word	0x08001d2d
 8001c6c:	08001d2d 	.word	0x08001d2d
 8001c70:	08001d13 	.word	0x08001d13
 8001c74:	08001d2d 	.word	0x08001d2d
 8001c78:	08001caf 	.word	0x08001caf
				  case '0':
					  SetUpRMD();
 8001c7c:	f7ff fd88 	bl	8001790 <SetUpRMD>
					  KeyCommand[0]=0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	713b      	strb	r3, [r7, #4]
					  break;
 8001c84:	e05b      	b.n	8001d3e <main+0x31e>
				  case'1':
					  RMDLeftTurn();
 8001c86:	f7ff fd97 	bl	80017b8 <RMDLeftTurn>
					  KeyCommand[0]=0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	713b      	strb	r3, [r7, #4]
					  break;
 8001c8e:	e056      	b.n	8001d3e <main+0x31e>
				  case'2':
					  RMDRightTurn();
 8001c90:	f7ff fda6 	bl	80017e0 <RMDRightTurn>
					  KeyCommand[0]=0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	713b      	strb	r3, [r7, #4]
					  break;
 8001c98:	e051      	b.n	8001d3e <main+0x31e>
				  case'3':
					  checkRMDdata();
 8001c9a:	f7ff fdb5 	bl	8001808 <checkRMDdata>
					  KeyCommand[0]=0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	713b      	strb	r3, [r7, #4]
					  break;
 8001ca2:	e04c      	b.n	8001d3e <main+0x31e>
				  case'9':
					  RMDPIDSetting();
 8001ca4:	f7ff fe7a 	bl	800199c <RMDPIDSetting>
					  KeyCommand[0]=0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	713b      	strb	r3, [r7, #4]
					  break;
 8001cac:	e047      	b.n	8001d3e <main+0x31e>
				  case 's':
					  TMCsetup();
 8001cae:	f7ff f891 	bl	8000dd4 <TMCsetup>
					  KeyCommand[0]=0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	713b      	strb	r3, [r7, #4]
					  break;
 8001cb6:	e042      	b.n	8001d3e <main+0x31e>
				  case 'a':
					  //HAL_UART_Transmit_IT(&huart2,(uint8_t *)front, sizeof(front));
					  printf("1:start\r\n");
 8001cb8:	4831      	ldr	r0, [pc, #196]	; (8001d80 <main+0x360>)
 8001cba:	f005 fbb7 	bl	800742c <puts>
					  prepareAbsoluteMovement(20000);
 8001cbe:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001cc2:	f7fe fdcf 	bl	8000864 <prepareAbsoluteMovement>
					  runAndWait();
 8001cc6:	f7fe ff63 	bl	8000b90 <runAndWait>
					  HAL_Delay(100);
 8001cca:	2064      	movs	r0, #100	; 0x64
 8001ccc:	f000 fdc6 	bl	800285c <HAL_Delay>
					  printf("1:end\r\n");
 8001cd0:	482c      	ldr	r0, [pc, #176]	; (8001d84 <main+0x364>)
 8001cd2:	f005 fbab 	bl	800742c <puts>
					  KeyCommand[0]=0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	713b      	strb	r3, [r7, #4]
					  break;
 8001cda:	e030      	b.n	8001d3e <main+0x31e>

				  case 'd':
					  printf("1:start\r\n");
 8001cdc:	4828      	ldr	r0, [pc, #160]	; (8001d80 <main+0x360>)
 8001cde:	f005 fba5 	bl	800742c <puts>
					  prepareAbsoluteMovement(-5000);
 8001ce2:	4829      	ldr	r0, [pc, #164]	; (8001d88 <main+0x368>)
 8001ce4:	f7fe fdbe 	bl	8000864 <prepareAbsoluteMovement>
					  runAndWait();
 8001ce8:	f7fe ff52 	bl	8000b90 <runAndWait>
					  HAL_Delay(100);
 8001cec:	2064      	movs	r0, #100	; 0x64
 8001cee:	f000 fdb5 	bl	800285c <HAL_Delay>
					  printf("1:end\r\n");
 8001cf2:	4824      	ldr	r0, [pc, #144]	; (8001d84 <main+0x364>)
 8001cf4:	f005 fb9a 	bl	800742c <puts>
					  KeyCommand[0]=0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	713b      	strb	r3, [r7, #4]
					  break;
 8001cfc:	e01f      	b.n	8001d3e <main+0x31e>

				  case 'h':
					  stepperHoming();
 8001cfe:	f7fe ff95 	bl	8000c2c <stepperHoming>
					  runAndWait();
 8001d02:	f7fe ff45 	bl	8000b90 <runAndWait>
					  HAL_Delay(100);
 8001d06:	2064      	movs	r0, #100	; 0x64
 8001d08:	f000 fda8 	bl	800285c <HAL_Delay>
					  KeyCommand[0]=0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	713b      	strb	r3, [r7, #4]
					  break;
 8001d10:	e015      	b.n	8001d3e <main+0x31e>

				  case 'q':
					  AbsoluteReset();
 8001d12:	f7fe ff5f 	bl	8000bd4 <AbsoluteReset>
					  KeyCommand[0]=0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	713b      	strb	r3, [r7, #4]
					  break;
 8001d1a:	e010      	b.n	8001d3e <main+0x31e>

				  case 'k':
					  MotorOFF();
 8001d1c:	f7fe ffee 	bl	8000cfc <MotorOFF>
					  HAL_Delay(100);
 8001d20:	2064      	movs	r0, #100	; 0x64
 8001d22:	f000 fd9b 	bl	800285c <HAL_Delay>
					  KeyCommand[0]=0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	713b      	strb	r3, [r7, #4]
					  break;
 8001d2a:	e008      	b.n	8001d3e <main+0x31e>

				  default:
					  printf("NoCommand\r\n");
 8001d2c:	4817      	ldr	r0, [pc, #92]	; (8001d8c <main+0x36c>)
 8001d2e:	f005 fb7d 	bl	800742c <puts>
					  KeyCommand[0]=0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	713b      	strb	r3, [r7, #4]
					  end_flag=1;
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <main+0x35c>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
					  break;
 8001d3c:	bf00      	nop
				  }
				  while(!end_flag){}
 8001d3e:	bf00      	nop
 8001d40:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <main+0x35c>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0fb      	beq.n	8001d40 <main+0x320>
		  get_uart_flag=0;
 8001d48:	e6eb      	b.n	8001b22 <main+0x102>
 8001d4a:	bf00      	nop
 8001d4c:	2000000c 	.word	0x2000000c
 8001d50:	200000b4 	.word	0x200000b4
 8001d54:	080088f8 	.word	0x080088f8
 8001d58:	20000620 	.word	0x20000620
 8001d5c:	08000749 	.word	0x08000749
 8001d60:	08000725 	.word	0x08000725
 8001d64:	447a0000 	.word	0x447a0000
 8001d68:	200006ec 	.word	0x200006ec
 8001d6c:	20000674 	.word	0x20000674
 8001d70:	2000008c 	.word	0x2000008c
 8001d74:	08008900 	.word	0x08008900
 8001d78:	20000140 	.word	0x20000140
 8001d7c:	200006ed 	.word	0x200006ed
 8001d80:	0800890c 	.word	0x0800890c
 8001d84:	08008918 	.word	0x08008918
 8001d88:	ffffec78 	.word	0xffffec78
 8001d8c:	08008920 	.word	0x08008920

08001d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b094      	sub	sp, #80	; 0x50
 8001d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d96:	f107 031c 	add.w	r3, r7, #28
 8001d9a:	2234      	movs	r2, #52	; 0x34
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f005 fab6 	bl	8007310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001da4:	f107 0308 	add.w	r3, r7, #8
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db4:	2300      	movs	r3, #0
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	4b29      	ldr	r3, [pc, #164]	; (8001e60 <SystemClock_Config+0xd0>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	4a28      	ldr	r2, [pc, #160]	; (8001e60 <SystemClock_Config+0xd0>)
 8001dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc4:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <SystemClock_Config+0xd0>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <SystemClock_Config+0xd4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a22      	ldr	r2, [pc, #136]	; (8001e64 <SystemClock_Config+0xd4>)
 8001dda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <SystemClock_Config+0xd4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dec:	2302      	movs	r3, #2
 8001dee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001df0:	2301      	movs	r3, #1
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001df4:	2310      	movs	r3, #16
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e00:	2308      	movs	r3, #8
 8001e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001e04:	23a0      	movs	r3, #160	; 0xa0
 8001e06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e10:	2302      	movs	r3, #2
 8001e12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f002 fae5 	bl	80043e8 <HAL_RCC_OscConfig>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e24:	f000 fa3c 	bl	80022a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e28:	230f      	movs	r3, #15
 8001e2a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e30:	2300      	movs	r3, #0
 8001e32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e3e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e40:	f107 0308 	add.w	r3, r7, #8
 8001e44:	2105      	movs	r1, #5
 8001e46:	4618      	mov	r0, r3
 8001e48:	f001 ff84 	bl	8003d54 <HAL_RCC_ClockConfig>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001e52:	f000 fa25 	bl	80022a0 <Error_Handler>
  }
}
 8001e56:	bf00      	nop
 8001e58:	3750      	adds	r7, #80	; 0x50
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40007000 	.word	0x40007000

08001e68 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001e6c:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <MX_CAN1_Init+0x68>)
 8001e6e:	4a19      	ldr	r2, [pc, #100]	; (8001ed4 <MX_CAN1_Init+0x6c>)
 8001e70:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <MX_CAN1_Init+0x68>)
 8001e74:	2204      	movs	r2, #4
 8001e76:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001e78:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <MX_CAN1_Init+0x68>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8001e7e:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <MX_CAN1_Init+0x68>)
 8001e80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e84:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <MX_CAN1_Init+0x68>)
 8001e88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e8c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <MX_CAN1_Init+0x68>)
 8001e90:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8001e94:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <MX_CAN1_Init+0x68>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <MX_CAN1_Init+0x68>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <MX_CAN1_Init+0x68>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <MX_CAN1_Init+0x68>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <MX_CAN1_Init+0x68>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <MX_CAN1_Init+0x68>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001eba:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <MX_CAN1_Init+0x68>)
 8001ebc:	f000 fcf2 	bl	80028a4 <HAL_CAN_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001ec6:	f000 f9eb 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	2000008c 	.word	0x2000008c
 8001ed4:	40006400 	.word	0x40006400

08001ed8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08e      	sub	sp, #56	; 0x38
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ede:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eec:	f107 0320 	add.w	r3, r7, #32
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
 8001f04:	615a      	str	r2, [r3, #20]
 8001f06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f08:	4b2b      	ldr	r3, [pc, #172]	; (8001fb8 <MX_TIM3_Init+0xe0>)
 8001f0a:	4a2c      	ldr	r2, [pc, #176]	; (8001fbc <MX_TIM3_Init+0xe4>)
 8001f0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160-1;
 8001f0e:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <MX_TIM3_Init+0xe0>)
 8001f10:	229f      	movs	r2, #159	; 0x9f
 8001f12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f14:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <MX_TIM3_Init+0xe0>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f1a:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <MX_TIM3_Init+0xe0>)
 8001f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f22:	4b25      	ldr	r3, [pc, #148]	; (8001fb8 <MX_TIM3_Init+0xe0>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f28:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <MX_TIM3_Init+0xe0>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f2e:	4822      	ldr	r0, [pc, #136]	; (8001fb8 <MX_TIM3_Init+0xe0>)
 8001f30:	f002 fcf8 	bl	8004924 <HAL_TIM_Base_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001f3a:	f000 f9b1 	bl	80022a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f48:	4619      	mov	r1, r3
 8001f4a:	481b      	ldr	r0, [pc, #108]	; (8001fb8 <MX_TIM3_Init+0xe0>)
 8001f4c:	f003 f80c 	bl	8004f68 <HAL_TIM_ConfigClockSource>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001f56:	f000 f9a3 	bl	80022a0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001f5a:	4817      	ldr	r0, [pc, #92]	; (8001fb8 <MX_TIM3_Init+0xe0>)
 8001f5c:	f002 fd31 	bl	80049c2 <HAL_TIM_OC_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001f66:	f000 f99b 	bl	80022a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f72:	f107 0320 	add.w	r3, r7, #32
 8001f76:	4619      	mov	r1, r3
 8001f78:	480f      	ldr	r0, [pc, #60]	; (8001fb8 <MX_TIM3_Init+0xe0>)
 8001f7a:	f003 fbf5 	bl	8005768 <HAL_TIMEx_MasterConfigSynchronization>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001f84:	f000 f98c 	bl	80022a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4806      	ldr	r0, [pc, #24]	; (8001fb8 <MX_TIM3_Init+0xe0>)
 8001fa0:	f002 ff86 	bl	8004eb0 <HAL_TIM_OC_ConfigChannel>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001faa:	f000 f979 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fae:	bf00      	nop
 8001fb0:	3738      	adds	r7, #56	; 0x38
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200000b4 	.word	0x200000b4
 8001fbc:	40000400 	.word	0x40000400

08001fc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fc4:	4b10      	ldr	r3, [pc, #64]	; (8002008 <MX_USART1_UART_Init+0x48>)
 8001fc6:	4a11      	ldr	r2, [pc, #68]	; (800200c <MX_USART1_UART_Init+0x4c>)
 8001fc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <MX_USART1_UART_Init+0x48>)
 8001fcc:	4a10      	ldr	r2, [pc, #64]	; (8002010 <MX_USART1_UART_Init+0x50>)
 8001fce:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd0:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <MX_USART1_UART_Init+0x48>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fd6:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <MX_USART1_UART_Init+0x48>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <MX_USART1_UART_Init+0x48>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <MX_USART1_UART_Init+0x48>)
 8001fe4:	220c      	movs	r2, #12
 8001fe6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe8:	4b07      	ldr	r3, [pc, #28]	; (8002008 <MX_USART1_UART_Init+0x48>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <MX_USART1_UART_Init+0x48>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001ff4:	4804      	ldr	r0, [pc, #16]	; (8002008 <MX_USART1_UART_Init+0x48>)
 8001ff6:	f003 fc94 	bl	8005922 <HAL_HalfDuplex_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8002000:	f000 f94e 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	200000fc 	.word	0x200000fc
 800200c:	40011000 	.word	0x40011000
 8002010:	0007a120 	.word	0x0007a120

08002014 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <MX_USART2_UART_Init+0x4c>)
 800201a:	4a12      	ldr	r2, [pc, #72]	; (8002064 <MX_USART2_UART_Init+0x50>)
 800201c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <MX_USART2_UART_Init+0x4c>)
 8002020:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002024:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002026:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <MX_USART2_UART_Init+0x4c>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <MX_USART2_UART_Init+0x4c>)
 800202e:	2200      	movs	r2, #0
 8002030:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <MX_USART2_UART_Init+0x4c>)
 8002034:	2200      	movs	r2, #0
 8002036:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <MX_USART2_UART_Init+0x4c>)
 800203a:	220c      	movs	r2, #12
 800203c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800203e:	4b08      	ldr	r3, [pc, #32]	; (8002060 <MX_USART2_UART_Init+0x4c>)
 8002040:	2200      	movs	r2, #0
 8002042:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <MX_USART2_UART_Init+0x4c>)
 8002046:	2200      	movs	r2, #0
 8002048:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800204a:	4805      	ldr	r0, [pc, #20]	; (8002060 <MX_USART2_UART_Init+0x4c>)
 800204c:	f003 fc1c 	bl	8005888 <HAL_UART_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002056:	f000 f923 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000140 	.word	0x20000140
 8002064:	40004400 	.word	0x40004400

08002068 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08a      	sub	sp, #40	; 0x28
 800206c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	60da      	str	r2, [r3, #12]
 800207c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	4b54      	ldr	r3, [pc, #336]	; (80021d4 <MX_GPIO_Init+0x16c>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a53      	ldr	r2, [pc, #332]	; (80021d4 <MX_GPIO_Init+0x16c>)
 8002088:	f043 0304 	orr.w	r3, r3, #4
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b51      	ldr	r3, [pc, #324]	; (80021d4 <MX_GPIO_Init+0x16c>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	4b4d      	ldr	r3, [pc, #308]	; (80021d4 <MX_GPIO_Init+0x16c>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a4c      	ldr	r2, [pc, #304]	; (80021d4 <MX_GPIO_Init+0x16c>)
 80020a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b4a      	ldr	r3, [pc, #296]	; (80021d4 <MX_GPIO_Init+0x16c>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	4b46      	ldr	r3, [pc, #280]	; (80021d4 <MX_GPIO_Init+0x16c>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a45      	ldr	r2, [pc, #276]	; (80021d4 <MX_GPIO_Init+0x16c>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b43      	ldr	r3, [pc, #268]	; (80021d4 <MX_GPIO_Init+0x16c>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	4b3f      	ldr	r3, [pc, #252]	; (80021d4 <MX_GPIO_Init+0x16c>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a3e      	ldr	r2, [pc, #248]	; (80021d4 <MX_GPIO_Init+0x16c>)
 80020dc:	f043 0302 	orr.w	r3, r3, #2
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b3c      	ldr	r3, [pc, #240]	; (80021d4 <MX_GPIO_Init+0x16c>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2120      	movs	r1, #32
 80020f2:	4839      	ldr	r0, [pc, #228]	; (80021d8 <MX_GPIO_Init+0x170>)
 80020f4:	f001 fdfc 	bl	8003cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80020f8:	2200      	movs	r2, #0
 80020fa:	f44f 7144 	mov.w	r1, #784	; 0x310
 80020fe:	4837      	ldr	r0, [pc, #220]	; (80021dc <MX_GPIO_Init+0x174>)
 8002100:	f001 fdf6 	bl	8003cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002104:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800210a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800210e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	4619      	mov	r1, r3
 800211a:	4831      	ldr	r0, [pc, #196]	; (80021e0 <MX_GPIO_Init+0x178>)
 800211c:	f001 fc3c 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002120:	2320      	movs	r3, #32
 8002122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002124:	2301      	movs	r3, #1
 8002126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	4619      	mov	r1, r3
 8002136:	4828      	ldr	r0, [pc, #160]	; (80021d8 <MX_GPIO_Init+0x170>)
 8002138:	f001 fc2e 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002140:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	4619      	mov	r1, r3
 8002150:	4821      	ldr	r0, [pc, #132]	; (80021d8 <MX_GPIO_Init+0x170>)
 8002152:	f001 fc21 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002156:	2310      	movs	r3, #16
 8002158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800215a:	2301      	movs	r3, #1
 800215c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002162:	2300      	movs	r3, #0
 8002164:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002166:	f107 0314 	add.w	r3, r7, #20
 800216a:	4619      	mov	r1, r3
 800216c:	481b      	ldr	r0, [pc, #108]	; (80021dc <MX_GPIO_Init+0x174>)
 800216e:	f001 fc13 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002172:	2340      	movs	r3, #64	; 0x40
 8002174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002176:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800217a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	4619      	mov	r1, r3
 8002186:	4815      	ldr	r0, [pc, #84]	; (80021dc <MX_GPIO_Init+0x174>)
 8002188:	f001 fc06 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800218c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002192:	2301      	movs	r3, #1
 8002194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219a:	2303      	movs	r3, #3
 800219c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4619      	mov	r1, r3
 80021a4:	480d      	ldr	r0, [pc, #52]	; (80021dc <MX_GPIO_Init+0x174>)
 80021a6:	f001 fbf7 	bl	8003998 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2101      	movs	r1, #1
 80021ae:	2017      	movs	r0, #23
 80021b0:	f001 fb29 	bl	8003806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80021b4:	2017      	movs	r0, #23
 80021b6:	f001 fb42 	bl	800383e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2101      	movs	r1, #1
 80021be:	2028      	movs	r0, #40	; 0x28
 80021c0:	f001 fb21 	bl	8003806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80021c4:	2028      	movs	r0, #40	; 0x28
 80021c6:	f001 fb3a 	bl	800383e <HAL_NVIC_EnableIRQ>

}
 80021ca:	bf00      	nop
 80021cc:	3728      	adds	r7, #40	; 0x28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40020000 	.word	0x40020000
 80021dc:	40020400 	.word	0x40020400
 80021e0:	40020800 	.word	0x40020800

080021e4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)	//printfに必要
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	230a      	movs	r3, #10
 80021f6:	68b9      	ldr	r1, [r7, #8]
 80021f8:	4803      	ldr	r0, [pc, #12]	; (8002208 <_write+0x24>)
 80021fa:	f003 fbe7 	bl	80059cc <HAL_UART_Transmit>
  return len;
 80021fe:	687b      	ldr	r3, [r7, #4]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000140 	.word	0x20000140

0800220c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	get_uart_flag = 1;
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <HAL_UART_RxCpltCallback+0x1c>)
 8002216:	2201      	movs	r2, #1
 8002218:	701a      	strb	r2, [r3, #0]
	printf("uart_timer\n\r");
 800221a:	4804      	ldr	r0, [pc, #16]	; (800222c <HAL_UART_RxCpltCallback+0x20>)
 800221c:	f005 f880 	bl	8007320 <iprintf>

}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	200006ec 	.word	0x200006ec
 800222c:	0800892c 	.word	0x0800892c

08002230 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
	  printf("TxCan\n\r");
 8002238:	4804      	ldr	r0, [pc, #16]	; (800224c <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800223a:	f005 f871 	bl	8007320 <iprintf>
	  nextcan_flag=1;
 800223e:	4b04      	ldr	r3, [pc, #16]	; (8002250 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]

}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	0800893c 	.word	0x0800893c
 8002250:	200006ee 	.word	0x200006ee

08002254 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	printf("RxCan\n\r");
 800225c:	480a      	ldr	r0, [pc, #40]	; (8002288 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800225e:	f005 f85f 	bl	8007320 <iprintf>
	HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0, &RxHeader,RxData);
 8002262:	4b0a      	ldr	r3, [pc, #40]	; (800228c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002264:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002266:	2100      	movs	r1, #0
 8002268:	480a      	ldr	r0, [pc, #40]	; (8002294 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800226a:	f000 fe94 	bl	8002f96 <HAL_CAN_GetRxMessage>
	HAL_UART_Transmit(&huart2,RxData,sizeof(RxData),100);//受け取ったデータを送信
 800226e:	2364      	movs	r3, #100	; 0x64
 8002270:	2208      	movs	r2, #8
 8002272:	4906      	ldr	r1, [pc, #24]	; (800228c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002274:	4808      	ldr	r0, [pc, #32]	; (8002298 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8002276:	f003 fba9 	bl	80059cc <HAL_UART_Transmit>

	//printf("\r\n");
	end_flag=1;
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
//  if(flag >0){
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
//  }else{
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
//  }
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	08008944 	.word	0x08008944
 800228c:	200006d8 	.word	0x200006d8
 8002290:	200006b4 	.word	0x200006b4
 8002294:	2000008c 	.word	0x2000008c
 8002298:	20000140 	.word	0x20000140
 800229c:	200006ed 	.word	0x200006ed

080022a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022a4:	b672      	cpsid	i
}
 80022a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022a8:	e7fe      	b.n	80022a8 <Error_Handler+0x8>
	...

080022ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <HAL_MspInit+0x4c>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	4a0f      	ldr	r2, [pc, #60]	; (80022f8 <HAL_MspInit+0x4c>)
 80022bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c0:	6453      	str	r3, [r2, #68]	; 0x44
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <HAL_MspInit+0x4c>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ca:	607b      	str	r3, [r7, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	603b      	str	r3, [r7, #0]
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <HAL_MspInit+0x4c>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	4a08      	ldr	r2, [pc, #32]	; (80022f8 <HAL_MspInit+0x4c>)
 80022d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022dc:	6413      	str	r3, [r2, #64]	; 0x40
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_MspInit+0x4c>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e6:	603b      	str	r3, [r7, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800

080022fc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08a      	sub	sp, #40	; 0x28
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 0314 	add.w	r3, r7, #20
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a2a      	ldr	r2, [pc, #168]	; (80023c4 <HAL_CAN_MspInit+0xc8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d14d      	bne.n	80023ba <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	4b29      	ldr	r3, [pc, #164]	; (80023c8 <HAL_CAN_MspInit+0xcc>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	4a28      	ldr	r2, [pc, #160]	; (80023c8 <HAL_CAN_MspInit+0xcc>)
 8002328:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800232c:	6413      	str	r3, [r2, #64]	; 0x40
 800232e:	4b26      	ldr	r3, [pc, #152]	; (80023c8 <HAL_CAN_MspInit+0xcc>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b22      	ldr	r3, [pc, #136]	; (80023c8 <HAL_CAN_MspInit+0xcc>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a21      	ldr	r2, [pc, #132]	; (80023c8 <HAL_CAN_MspInit+0xcc>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b1f      	ldr	r3, [pc, #124]	; (80023c8 <HAL_CAN_MspInit+0xcc>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002356:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800235a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002364:	2303      	movs	r3, #3
 8002366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002368:	2309      	movs	r3, #9
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4619      	mov	r1, r3
 8002372:	4816      	ldr	r0, [pc, #88]	; (80023cc <HAL_CAN_MspInit+0xd0>)
 8002374:	f001 fb10 	bl	8003998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800237c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002382:	2301      	movs	r3, #1
 8002384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002386:	2303      	movs	r3, #3
 8002388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800238a:	2309      	movs	r3, #9
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238e:	f107 0314 	add.w	r3, r7, #20
 8002392:	4619      	mov	r1, r3
 8002394:	480d      	ldr	r0, [pc, #52]	; (80023cc <HAL_CAN_MspInit+0xd0>)
 8002396:	f001 faff 	bl	8003998 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2100      	movs	r1, #0
 800239e:	2013      	movs	r0, #19
 80023a0:	f001 fa31 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80023a4:	2013      	movs	r0, #19
 80023a6:	f001 fa4a 	bl	800383e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2100      	movs	r1, #0
 80023ae:	2014      	movs	r0, #20
 80023b0:	f001 fa29 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80023b4:	2014      	movs	r0, #20
 80023b6:	f001 fa42 	bl	800383e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80023ba:	bf00      	nop
 80023bc:	3728      	adds	r7, #40	; 0x28
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40006400 	.word	0x40006400
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40020000 	.word	0x40020000

080023d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <HAL_TIM_Base_MspInit+0x48>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d115      	bne.n	800240e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b0d      	ldr	r3, [pc, #52]	; (800241c <HAL_TIM_Base_MspInit+0x4c>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a0c      	ldr	r2, [pc, #48]	; (800241c <HAL_TIM_Base_MspInit+0x4c>)
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <HAL_TIM_Base_MspInit+0x4c>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 80023fe:	2200      	movs	r2, #0
 8002400:	2102      	movs	r1, #2
 8002402:	201d      	movs	r0, #29
 8002404:	f001 f9ff 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002408:	201d      	movs	r0, #29
 800240a:	f001 fa18 	bl	800383e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40000400 	.word	0x40000400
 800241c:	40023800 	.word	0x40023800

08002420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08c      	sub	sp, #48	; 0x30
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 031c 	add.w	r3, r7, #28
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a36      	ldr	r2, [pc, #216]	; (8002518 <HAL_UART_MspInit+0xf8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d12d      	bne.n	800249e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	4b35      	ldr	r3, [pc, #212]	; (800251c <HAL_UART_MspInit+0xfc>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244a:	4a34      	ldr	r2, [pc, #208]	; (800251c <HAL_UART_MspInit+0xfc>)
 800244c:	f043 0310 	orr.w	r3, r3, #16
 8002450:	6453      	str	r3, [r2, #68]	; 0x44
 8002452:	4b32      	ldr	r3, [pc, #200]	; (800251c <HAL_UART_MspInit+0xfc>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	4b2e      	ldr	r3, [pc, #184]	; (800251c <HAL_UART_MspInit+0xfc>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	4a2d      	ldr	r2, [pc, #180]	; (800251c <HAL_UART_MspInit+0xfc>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6313      	str	r3, [r2, #48]	; 0x30
 800246e:	4b2b      	ldr	r3, [pc, #172]	; (800251c <HAL_UART_MspInit+0xfc>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800247a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800247e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002480:	2312      	movs	r3, #18
 8002482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002488:	2302      	movs	r3, #2
 800248a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800248c:	2307      	movs	r3, #7
 800248e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002490:	f107 031c 	add.w	r3, r7, #28
 8002494:	4619      	mov	r1, r3
 8002496:	4822      	ldr	r0, [pc, #136]	; (8002520 <HAL_UART_MspInit+0x100>)
 8002498:	f001 fa7e 	bl	8003998 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800249c:	e038      	b.n	8002510 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a20      	ldr	r2, [pc, #128]	; (8002524 <HAL_UART_MspInit+0x104>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d133      	bne.n	8002510 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024a8:	2300      	movs	r3, #0
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	4b1b      	ldr	r3, [pc, #108]	; (800251c <HAL_UART_MspInit+0xfc>)
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	4a1a      	ldr	r2, [pc, #104]	; (800251c <HAL_UART_MspInit+0xfc>)
 80024b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b6:	6413      	str	r3, [r2, #64]	; 0x40
 80024b8:	4b18      	ldr	r3, [pc, #96]	; (800251c <HAL_UART_MspInit+0xfc>)
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c4:	2300      	movs	r3, #0
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	4b14      	ldr	r3, [pc, #80]	; (800251c <HAL_UART_MspInit+0xfc>)
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	4a13      	ldr	r2, [pc, #76]	; (800251c <HAL_UART_MspInit+0xfc>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6313      	str	r3, [r2, #48]	; 0x30
 80024d4:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_UART_MspInit+0xfc>)
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024e0:	230c      	movs	r3, #12
 80024e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ec:	2303      	movs	r3, #3
 80024ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024f0:	2307      	movs	r3, #7
 80024f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f4:	f107 031c 	add.w	r3, r7, #28
 80024f8:	4619      	mov	r1, r3
 80024fa:	4809      	ldr	r0, [pc, #36]	; (8002520 <HAL_UART_MspInit+0x100>)
 80024fc:	f001 fa4c 	bl	8003998 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002500:	2200      	movs	r2, #0
 8002502:	2100      	movs	r1, #0
 8002504:	2026      	movs	r0, #38	; 0x26
 8002506:	f001 f97e 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800250a:	2026      	movs	r0, #38	; 0x26
 800250c:	f001 f997 	bl	800383e <HAL_NVIC_EnableIRQ>
}
 8002510:	bf00      	nop
 8002512:	3730      	adds	r7, #48	; 0x30
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40011000 	.word	0x40011000
 800251c:	40023800 	.word	0x40023800
 8002520:	40020000 	.word	0x40020000
 8002524:	40004400 	.word	0x40004400

08002528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800252c:	e7fe      	b.n	800252c <NMI_Handler+0x4>

0800252e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002532:	e7fe      	b.n	8002532 <HardFault_Handler+0x4>

08002534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002538:	e7fe      	b.n	8002538 <MemManage_Handler+0x4>

0800253a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800253e:	e7fe      	b.n	800253e <BusFault_Handler+0x4>

08002540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002544:	e7fe      	b.n	8002544 <UsageFault_Handler+0x4>

08002546 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002574:	f000 f952 	bl	800281c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}

0800257c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002580:	4802      	ldr	r0, [pc, #8]	; (800258c <CAN1_TX_IRQHandler+0x10>)
 8002582:	f000 fe40 	bl	8003206 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	2000008c 	.word	0x2000008c

08002590 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002594:	4802      	ldr	r0, [pc, #8]	; (80025a0 <CAN1_RX0_IRQHandler+0x10>)
 8002596:	f000 fe36 	bl	8003206 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	2000008c 	.word	0x2000008c

080025a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80025a8:	2040      	movs	r0, #64	; 0x40
 80025aa:	f001 fbbb 	bl	8003d24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80025ae:	2080      	movs	r0, #128	; 0x80
 80025b0:	f001 fbb8 	bl	8003d24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80025b4:	bf00      	nop
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025bc:	4802      	ldr	r0, [pc, #8]	; (80025c8 <TIM3_IRQHandler+0x10>)
 80025be:	f002 fb6f 	bl	8004ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	200000b4 	.word	0x200000b4

080025cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025d0:	4802      	ldr	r0, [pc, #8]	; (80025dc <USART2_IRQHandler+0x10>)
 80025d2:	f003 fb5f 	bl	8005c94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000140 	.word	0x20000140

080025e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80025e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025e8:	f001 fb9c 	bl	8003d24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	e00a      	b.n	8002618 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002602:	f3af 8000 	nop.w
 8002606:	4601      	mov	r1, r0
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	60ba      	str	r2, [r7, #8]
 800260e:	b2ca      	uxtb	r2, r1
 8002610:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	3301      	adds	r3, #1
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	429a      	cmp	r2, r3
 800261e:	dbf0      	blt.n	8002602 <_read+0x12>
	}

return len;
 8002620:	687b      	ldr	r3, [r7, #4]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <_close>:
	}
	return len;
}

int _close(int file)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
	return -1;
 8002632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002652:	605a      	str	r2, [r3, #4]
	return 0;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <_isatty>:

int _isatty(int file)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
	return 1;
 800266a:	2301      	movs	r3, #1
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
	return 0;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800269c:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <_sbrk+0x5c>)
 800269e:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <_sbrk+0x60>)
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026a8:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <_sbrk+0x64>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d102      	bne.n	80026b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <_sbrk+0x64>)
 80026b2:	4a12      	ldr	r2, [pc, #72]	; (80026fc <_sbrk+0x68>)
 80026b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <_sbrk+0x64>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d207      	bcs.n	80026d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026c4:	f004 fdfa 	bl	80072bc <__errno>
 80026c8:	4603      	mov	r3, r0
 80026ca:	220c      	movs	r2, #12
 80026cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026d2:	e009      	b.n	80026e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <_sbrk+0x64>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <_sbrk+0x64>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <_sbrk+0x64>)
 80026e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026e6:	68fb      	ldr	r3, [r7, #12]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20020000 	.word	0x20020000
 80026f4:	00000400 	.word	0x00000400
 80026f8:	200006fc 	.word	0x200006fc
 80026fc:	20000918 	.word	0x20000918

08002700 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <SystemInit+0x20>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270a:	4a05      	ldr	r2, [pc, #20]	; (8002720 <SystemInit+0x20>)
 800270c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800275c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002728:	480d      	ldr	r0, [pc, #52]	; (8002760 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800272a:	490e      	ldr	r1, [pc, #56]	; (8002764 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800272c:	4a0e      	ldr	r2, [pc, #56]	; (8002768 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800272e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002730:	e002      	b.n	8002738 <LoopCopyDataInit>

08002732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002736:	3304      	adds	r3, #4

08002738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800273c:	d3f9      	bcc.n	8002732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800273e:	4a0b      	ldr	r2, [pc, #44]	; (800276c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002740:	4c0b      	ldr	r4, [pc, #44]	; (8002770 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002744:	e001      	b.n	800274a <LoopFillZerobss>

08002746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002748:	3204      	adds	r2, #4

0800274a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800274c:	d3fb      	bcc.n	8002746 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800274e:	f7ff ffd7 	bl	8002700 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002752:	f004 fdb9 	bl	80072c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002756:	f7ff f963 	bl	8001a20 <main>
  bx  lr    
 800275a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800275c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002764:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002768:	08008c8c 	.word	0x08008c8c
  ldr r2, =_sbss
 800276c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002770:	20000918 	.word	0x20000918

08002774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002774:	e7fe      	b.n	8002774 <ADC_IRQHandler>
	...

08002778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800277c:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <HAL_Init+0x40>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0d      	ldr	r2, [pc, #52]	; (80027b8 <HAL_Init+0x40>)
 8002782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002786:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_Init+0x40>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <HAL_Init+0x40>)
 800278e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002792:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <HAL_Init+0x40>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a07      	ldr	r2, [pc, #28]	; (80027b8 <HAL_Init+0x40>)
 800279a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027a0:	2003      	movs	r0, #3
 80027a2:	f001 f825 	bl	80037f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027a6:	2000      	movs	r0, #0
 80027a8:	f000 f808 	bl	80027bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027ac:	f7ff fd7e 	bl	80022ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40023c00 	.word	0x40023c00

080027bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027c4:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_InitTick+0x54>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b12      	ldr	r3, [pc, #72]	; (8002814 <HAL_InitTick+0x58>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	4619      	mov	r1, r3
 80027ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027da:	4618      	mov	r0, r3
 80027dc:	f001 f83d 	bl	800385a <HAL_SYSTICK_Config>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e00e      	b.n	8002808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b0f      	cmp	r3, #15
 80027ee:	d80a      	bhi.n	8002806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f0:	2200      	movs	r2, #0
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027f8:	f001 f805 	bl	8003806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027fc:	4a06      	ldr	r2, [pc, #24]	; (8002818 <HAL_InitTick+0x5c>)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	e000      	b.n	8002808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20000000 	.word	0x20000000
 8002814:	20000008 	.word	0x20000008
 8002818:	20000004 	.word	0x20000004

0800281c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_IncTick+0x20>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_IncTick+0x24>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4413      	add	r3, r2
 800282c:	4a04      	ldr	r2, [pc, #16]	; (8002840 <HAL_IncTick+0x24>)
 800282e:	6013      	str	r3, [r2, #0]
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000008 	.word	0x20000008
 8002840:	20000700 	.word	0x20000700

08002844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return uwTick;
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <HAL_GetTick+0x14>)
 800284a:	681b      	ldr	r3, [r3, #0]
}
 800284c:	4618      	mov	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	20000700 	.word	0x20000700

0800285c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002864:	f7ff ffee 	bl	8002844 <HAL_GetTick>
 8002868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002874:	d005      	beq.n	8002882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <HAL_Delay+0x44>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002882:	bf00      	nop
 8002884:	f7ff ffde 	bl	8002844 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	429a      	cmp	r2, r3
 8002892:	d8f7      	bhi.n	8002884 <HAL_Delay+0x28>
  {
  }
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000008 	.word	0x20000008

080028a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e0ed      	b.n	8002a92 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d102      	bne.n	80028c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff fd1a 	bl	80022fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028d8:	f7ff ffb4 	bl	8002844 <HAL_GetTick>
 80028dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028de:	e012      	b.n	8002906 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028e0:	f7ff ffb0 	bl	8002844 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b0a      	cmp	r3, #10
 80028ec:	d90b      	bls.n	8002906 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2205      	movs	r2, #5
 80028fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e0c5      	b.n	8002a92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0e5      	beq.n	80028e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0202 	bic.w	r2, r2, #2
 8002922:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002924:	f7ff ff8e 	bl	8002844 <HAL_GetTick>
 8002928:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800292a:	e012      	b.n	8002952 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800292c:	f7ff ff8a 	bl	8002844 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b0a      	cmp	r3, #10
 8002938:	d90b      	bls.n	8002952 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2205      	movs	r2, #5
 800294a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e09f      	b.n	8002a92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1e5      	bne.n	800292c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	7e1b      	ldrb	r3, [r3, #24]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d108      	bne.n	800297a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	e007      	b.n	800298a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002988:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	7e5b      	ldrb	r3, [r3, #25]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d108      	bne.n	80029a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	e007      	b.n	80029b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	7e9b      	ldrb	r3, [r3, #26]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d108      	bne.n	80029ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0220 	orr.w	r2, r2, #32
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	e007      	b.n	80029de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0220 	bic.w	r2, r2, #32
 80029dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7edb      	ldrb	r3, [r3, #27]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d108      	bne.n	80029f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0210 	bic.w	r2, r2, #16
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	e007      	b.n	8002a08 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0210 	orr.w	r2, r2, #16
 8002a06:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	7f1b      	ldrb	r3, [r3, #28]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d108      	bne.n	8002a22 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0208 	orr.w	r2, r2, #8
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	e007      	b.n	8002a32 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0208 	bic.w	r2, r2, #8
 8002a30:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	7f5b      	ldrb	r3, [r3, #29]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d108      	bne.n	8002a4c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 0204 	orr.w	r2, r2, #4
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e007      	b.n	8002a5c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0204 	bic.w	r2, r2, #4
 8002a5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	ea42 0103 	orr.w	r1, r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	1e5a      	subs	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ab2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002ab4:	7cfb      	ldrb	r3, [r7, #19]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d003      	beq.n	8002ac2 <HAL_CAN_ConfigFilter+0x26>
 8002aba:	7cfb      	ldrb	r3, [r7, #19]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	f040 80be 	bne.w	8002c3e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002ac2:	4b65      	ldr	r3, [pc, #404]	; (8002c58 <HAL_CAN_ConfigFilter+0x1bc>)
 8002ac4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002acc:	f043 0201 	orr.w	r2, r3, #1
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002adc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	431a      	orrs	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	2201      	movs	r2, #1
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	401a      	ands	r2, r3
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d123      	bne.n	8002b6c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	401a      	ands	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b46:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	3248      	adds	r2, #72	; 0x48
 8002b4c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b60:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b62:	6979      	ldr	r1, [r7, #20]
 8002b64:	3348      	adds	r3, #72	; 0x48
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	440b      	add	r3, r1
 8002b6a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d122      	bne.n	8002bba <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b94:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	3248      	adds	r2, #72	; 0x48
 8002b9a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bb0:	6979      	ldr	r1, [r7, #20]
 8002bb2:	3348      	adds	r3, #72	; 0x48
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	440b      	add	r3, r1
 8002bb8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	401a      	ands	r2, r3
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002bd4:	e007      	b.n	8002be6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	431a      	orrs	r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d109      	bne.n	8002c02 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	401a      	ands	r2, r3
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002c00:	e007      	b.n	8002c12 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d107      	bne.n	8002c2a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c30:	f023 0201 	bic.w	r2, r3, #1
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e006      	b.n	8002c4c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
  }
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	371c      	adds	r7, #28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	40006400 	.word	0x40006400

08002c5c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d12e      	bne.n	8002cce <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0201 	bic.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c88:	f7ff fddc 	bl	8002844 <HAL_GetTick>
 8002c8c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c8e:	e012      	b.n	8002cb6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c90:	f7ff fdd8 	bl	8002844 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b0a      	cmp	r3, #10
 8002c9c:	d90b      	bls.n	8002cb6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2205      	movs	r2, #5
 8002cae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e012      	b.n	8002cdc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1e5      	bne.n	8002c90 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e006      	b.n	8002cdc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
  }
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d133      	bne.n	8002d60 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d08:	f7ff fd9c 	bl	8002844 <HAL_GetTick>
 8002d0c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d0e:	e012      	b.n	8002d36 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d10:	f7ff fd98 	bl	8002844 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b0a      	cmp	r3, #10
 8002d1c:	d90b      	bls.n	8002d36 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2205      	movs	r2, #5
 8002d2e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e01b      	b.n	8002d6e <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0e5      	beq.n	8002d10 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0202 	bic.w	r2, r2, #2
 8002d52:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e006      	b.n	8002d6e <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
  }
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b089      	sub	sp, #36	; 0x24
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d94:	7ffb      	ldrb	r3, [r7, #31]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d003      	beq.n	8002da2 <HAL_CAN_AddTxMessage+0x2c>
 8002d9a:	7ffb      	ldrb	r3, [r7, #31]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	f040 80b8 	bne.w	8002f12 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d105      	bne.n	8002dc2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80a0 	beq.w	8002f02 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	0e1b      	lsrs	r3, r3, #24
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d907      	bls.n	8002de2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e09e      	b.n	8002f20 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002de2:	2201      	movs	r2, #1
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	409a      	lsls	r2, r3
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10d      	bne.n	8002e10 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002dfe:	68f9      	ldr	r1, [r7, #12]
 8002e00:	6809      	ldr	r1, [r1, #0]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	3318      	adds	r3, #24
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	440b      	add	r3, r1
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	e00f      	b.n	8002e30 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e1a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e20:	68f9      	ldr	r1, [r7, #12]
 8002e22:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002e24:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	3318      	adds	r3, #24
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	440b      	add	r3, r1
 8002e2e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6819      	ldr	r1, [r3, #0]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	3318      	adds	r3, #24
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	440b      	add	r3, r1
 8002e40:	3304      	adds	r3, #4
 8002e42:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	7d1b      	ldrb	r3, [r3, #20]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d111      	bne.n	8002e70 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	3318      	adds	r3, #24
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	4413      	add	r3, r2
 8002e58:	3304      	adds	r3, #4
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	6811      	ldr	r1, [r2, #0]
 8002e60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	3318      	adds	r3, #24
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3307      	adds	r3, #7
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	061a      	lsls	r2, r3, #24
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3306      	adds	r3, #6
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	041b      	lsls	r3, r3, #16
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3305      	adds	r3, #5
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	021b      	lsls	r3, r3, #8
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	3204      	adds	r2, #4
 8002e90:	7812      	ldrb	r2, [r2, #0]
 8002e92:	4610      	mov	r0, r2
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	6811      	ldr	r1, [r2, #0]
 8002e98:	ea43 0200 	orr.w	r2, r3, r0
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	440b      	add	r3, r1
 8002ea2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002ea6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3303      	adds	r3, #3
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	061a      	lsls	r2, r3, #24
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3302      	adds	r3, #2
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	041b      	lsls	r3, r3, #16
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	7812      	ldrb	r2, [r2, #0]
 8002ec8:	4610      	mov	r0, r2
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	6811      	ldr	r1, [r2, #0]
 8002ece:	ea43 0200 	orr.w	r2, r3, r0
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	440b      	add	r3, r1
 8002ed8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002edc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	3318      	adds	r3, #24
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	4413      	add	r3, r2
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	6811      	ldr	r1, [r2, #0]
 8002ef0:	f043 0201 	orr.w	r2, r3, #1
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	3318      	adds	r3, #24
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	440b      	add	r3, r1
 8002efc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	e00e      	b.n	8002f20 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e006      	b.n	8002f20 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
  }
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3724      	adds	r7, #36	; 0x24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f3e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002f40:	7afb      	ldrb	r3, [r7, #11]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d002      	beq.n	8002f4c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002f46:	7afb      	ldrb	r3, [r7, #11]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d11d      	bne.n	8002f88 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	3301      	adds	r3, #1
 8002f72:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	3301      	adds	r3, #1
 8002f86:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002f88:	68fb      	ldr	r3, [r7, #12]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002f96:	b480      	push	{r7}
 8002f98:	b087      	sub	sp, #28
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
 8002fa2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002faa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d003      	beq.n	8002fba <HAL_CAN_GetRxMessage+0x24>
 8002fb2:	7dfb      	ldrb	r3, [r7, #23]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	f040 80f3 	bne.w	80031a0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10e      	bne.n	8002fde <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d116      	bne.n	8002ffc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e0e7      	b.n	80031ae <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d107      	bne.n	8002ffc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0d8      	b.n	80031ae <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	331b      	adds	r3, #27
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	4413      	add	r3, r2
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0204 	and.w	r2, r3, #4
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10c      	bne.n	8003034 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	331b      	adds	r3, #27
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	4413      	add	r3, r2
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	0d5b      	lsrs	r3, r3, #21
 800302a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	e00b      	b.n	800304c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	331b      	adds	r3, #27
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	4413      	add	r3, r2
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	08db      	lsrs	r3, r3, #3
 8003044:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	331b      	adds	r3, #27
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	4413      	add	r3, r2
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0202 	and.w	r2, r3, #2
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	331b      	adds	r3, #27
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	4413      	add	r3, r2
 800306e:	3304      	adds	r3, #4
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 020f 	and.w	r2, r3, #15
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	331b      	adds	r3, #27
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	4413      	add	r3, r2
 8003086:	3304      	adds	r3, #4
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	0a1b      	lsrs	r3, r3, #8
 800308c:	b2da      	uxtb	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	331b      	adds	r3, #27
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	4413      	add	r3, r2
 800309e:	3304      	adds	r3, #4
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	0c1b      	lsrs	r3, r3, #16
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	0a1a      	lsrs	r2, r3, #8
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	3301      	adds	r3, #1
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	0c1a      	lsrs	r2, r3, #16
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	3302      	adds	r3, #2
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	0e1a      	lsrs	r2, r3, #24
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	3303      	adds	r3, #3
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	4413      	add	r3, r2
 8003118:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	3304      	adds	r3, #4
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	4413      	add	r3, r2
 8003130:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	0a1a      	lsrs	r2, r3, #8
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	3305      	adds	r3, #5
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	4413      	add	r3, r2
 800314a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	0c1a      	lsrs	r2, r3, #16
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	3306      	adds	r3, #6
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	4413      	add	r3, r2
 8003164:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	0e1a      	lsrs	r2, r3, #24
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	3307      	adds	r3, #7
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d108      	bne.n	800318c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 0220 	orr.w	r2, r2, #32
 8003188:	60da      	str	r2, [r3, #12]
 800318a:	e007      	b.n	800319c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0220 	orr.w	r2, r2, #32
 800319a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	e006      	b.n	80031ae <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
  }
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b085      	sub	sp, #20
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031ca:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d002      	beq.n	80031d8 <HAL_CAN_ActivateNotification+0x1e>
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d109      	bne.n	80031ec <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6959      	ldr	r1, [r3, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	e006      	b.n	80031fa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
  }
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b08a      	sub	sp, #40	; 0x28
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800320e:	2300      	movs	r3, #0
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d07c      	beq.n	8003346 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d023      	beq.n	800329e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2201      	movs	r2, #1
 800325c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7fe ffe1 	bl	8002230 <HAL_CAN_TxMailbox0CompleteCallback>
 800326e:	e016      	b.n	800329e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d004      	beq.n	8003284 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
 8003282:	e00c      	b.n	800329e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d004      	beq.n	8003298 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
 8003296:	e002      	b.n	800329e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f97f 	bl	800359c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d024      	beq.n	80032f2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f959 	bl	8003574 <HAL_CAN_TxMailbox1CompleteCallback>
 80032c2:	e016      	b.n	80032f2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d004      	beq.n	80032d8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
 80032d6:	e00c      	b.n	80032f2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d004      	beq.n	80032ec <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ea:	e002      	b.n	80032f2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f95f 	bl	80035b0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d024      	beq.n	8003346 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003304:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f939 	bl	8003588 <HAL_CAN_TxMailbox2CompleteCallback>
 8003316:	e016      	b.n	8003346 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d004      	beq.n	800332c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
 800332a:	e00c      	b.n	8003346 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d004      	beq.n	8003340 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
 800333e:	e002      	b.n	8003346 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f93f 	bl	80035c4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00c      	beq.n	800336a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	2b00      	cmp	r3, #0
 8003358:	d007      	beq.n	800336a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003360:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2210      	movs	r2, #16
 8003368:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00b      	beq.n	800338c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d006      	beq.n	800338c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2208      	movs	r2, #8
 8003384:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f926 	bl	80035d8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7fe ff55 	bl	8002254 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00c      	beq.n	80033ce <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d007      	beq.n	80033ce <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2210      	movs	r2, #16
 80033cc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00b      	beq.n	80033f0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d006      	beq.n	80033f0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2208      	movs	r2, #8
 80033e8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f908 	bl	8003600 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	f003 0310 	and.w	r3, r3, #16
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d009      	beq.n	800340e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f8ef 	bl	80035ec <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00b      	beq.n	8003430 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	2b00      	cmp	r3, #0
 8003420:	d006      	beq.n	8003430 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2210      	movs	r2, #16
 8003428:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f8f2 	bl	8003614 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00b      	beq.n	8003452 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b00      	cmp	r3, #0
 8003442:	d006      	beq.n	8003452 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2208      	movs	r2, #8
 800344a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f8eb 	bl	8003628 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d07b      	beq.n	8003554 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	d072      	beq.n	800354c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	f043 0302 	orr.w	r3, r3, #2
 800349c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	f043 0304 	orr.w	r3, r3, #4
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d043      	beq.n	800354c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d03e      	beq.n	800354c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034d4:	2b60      	cmp	r3, #96	; 0x60
 80034d6:	d02b      	beq.n	8003530 <HAL_CAN_IRQHandler+0x32a>
 80034d8:	2b60      	cmp	r3, #96	; 0x60
 80034da:	d82e      	bhi.n	800353a <HAL_CAN_IRQHandler+0x334>
 80034dc:	2b50      	cmp	r3, #80	; 0x50
 80034de:	d022      	beq.n	8003526 <HAL_CAN_IRQHandler+0x320>
 80034e0:	2b50      	cmp	r3, #80	; 0x50
 80034e2:	d82a      	bhi.n	800353a <HAL_CAN_IRQHandler+0x334>
 80034e4:	2b40      	cmp	r3, #64	; 0x40
 80034e6:	d019      	beq.n	800351c <HAL_CAN_IRQHandler+0x316>
 80034e8:	2b40      	cmp	r3, #64	; 0x40
 80034ea:	d826      	bhi.n	800353a <HAL_CAN_IRQHandler+0x334>
 80034ec:	2b30      	cmp	r3, #48	; 0x30
 80034ee:	d010      	beq.n	8003512 <HAL_CAN_IRQHandler+0x30c>
 80034f0:	2b30      	cmp	r3, #48	; 0x30
 80034f2:	d822      	bhi.n	800353a <HAL_CAN_IRQHandler+0x334>
 80034f4:	2b10      	cmp	r3, #16
 80034f6:	d002      	beq.n	80034fe <HAL_CAN_IRQHandler+0x2f8>
 80034f8:	2b20      	cmp	r3, #32
 80034fa:	d005      	beq.n	8003508 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80034fc:	e01d      	b.n	800353a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	f043 0308 	orr.w	r3, r3, #8
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003506:	e019      	b.n	800353c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	f043 0310 	orr.w	r3, r3, #16
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003510:	e014      	b.n	800353c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	f043 0320 	orr.w	r3, r3, #32
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800351a:	e00f      	b.n	800353c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003524:	e00a      	b.n	800353c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800352e:	e005      	b.n	800353c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003538:	e000      	b.n	800353c <HAL_CAN_IRQHandler+0x336>
            break;
 800353a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699a      	ldr	r2, [r3, #24]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800354a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2204      	movs	r2, #4
 8003552:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	2b00      	cmp	r3, #0
 8003558:	d008      	beq.n	800356c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	431a      	orrs	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f868 	bl	800363c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800356c:	bf00      	nop
 800356e:	3728      	adds	r7, #40	; 0x28
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <__NVIC_SetPriorityGrouping+0x44>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800366c:	4013      	ands	r3, r2
 800366e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800367c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003682:	4a04      	ldr	r2, [pc, #16]	; (8003694 <__NVIC_SetPriorityGrouping+0x44>)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	60d3      	str	r3, [r2, #12]
}
 8003688:	bf00      	nop
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	e000ed00 	.word	0xe000ed00

08003698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800369c:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <__NVIC_GetPriorityGrouping+0x18>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	0a1b      	lsrs	r3, r3, #8
 80036a2:	f003 0307 	and.w	r3, r3, #7
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	e000ed00 	.word	0xe000ed00

080036b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	db0b      	blt.n	80036de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036c6:	79fb      	ldrb	r3, [r7, #7]
 80036c8:	f003 021f 	and.w	r2, r3, #31
 80036cc:	4907      	ldr	r1, [pc, #28]	; (80036ec <__NVIC_EnableIRQ+0x38>)
 80036ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	2001      	movs	r0, #1
 80036d6:	fa00 f202 	lsl.w	r2, r0, r2
 80036da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	e000e100 	.word	0xe000e100

080036f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	6039      	str	r1, [r7, #0]
 80036fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003700:	2b00      	cmp	r3, #0
 8003702:	db0a      	blt.n	800371a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	b2da      	uxtb	r2, r3
 8003708:	490c      	ldr	r1, [pc, #48]	; (800373c <__NVIC_SetPriority+0x4c>)
 800370a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370e:	0112      	lsls	r2, r2, #4
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	440b      	add	r3, r1
 8003714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003718:	e00a      	b.n	8003730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	b2da      	uxtb	r2, r3
 800371e:	4908      	ldr	r1, [pc, #32]	; (8003740 <__NVIC_SetPriority+0x50>)
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	3b04      	subs	r3, #4
 8003728:	0112      	lsls	r2, r2, #4
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	440b      	add	r3, r1
 800372e:	761a      	strb	r2, [r3, #24]
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	e000e100 	.word	0xe000e100
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003744:	b480      	push	{r7}
 8003746:	b089      	sub	sp, #36	; 0x24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f1c3 0307 	rsb	r3, r3, #7
 800375e:	2b04      	cmp	r3, #4
 8003760:	bf28      	it	cs
 8003762:	2304      	movcs	r3, #4
 8003764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	3304      	adds	r3, #4
 800376a:	2b06      	cmp	r3, #6
 800376c:	d902      	bls.n	8003774 <NVIC_EncodePriority+0x30>
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	3b03      	subs	r3, #3
 8003772:	e000      	b.n	8003776 <NVIC_EncodePriority+0x32>
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	43da      	mvns	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	401a      	ands	r2, r3
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800378c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	fa01 f303 	lsl.w	r3, r1, r3
 8003796:	43d9      	mvns	r1, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800379c:	4313      	orrs	r3, r2
         );
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3724      	adds	r7, #36	; 0x24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
	...

080037ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037bc:	d301      	bcc.n	80037c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037be:	2301      	movs	r3, #1
 80037c0:	e00f      	b.n	80037e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037c2:	4a0a      	ldr	r2, [pc, #40]	; (80037ec <SysTick_Config+0x40>)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ca:	210f      	movs	r1, #15
 80037cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037d0:	f7ff ff8e 	bl	80036f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <SysTick_Config+0x40>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037da:	4b04      	ldr	r3, [pc, #16]	; (80037ec <SysTick_Config+0x40>)
 80037dc:	2207      	movs	r2, #7
 80037de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	e000e010 	.word	0xe000e010

080037f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff ff29 	bl	8003650 <__NVIC_SetPriorityGrouping>
}
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003806:	b580      	push	{r7, lr}
 8003808:	b086      	sub	sp, #24
 800380a:	af00      	add	r7, sp, #0
 800380c:	4603      	mov	r3, r0
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003818:	f7ff ff3e 	bl	8003698 <__NVIC_GetPriorityGrouping>
 800381c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	6978      	ldr	r0, [r7, #20]
 8003824:	f7ff ff8e 	bl	8003744 <NVIC_EncodePriority>
 8003828:	4602      	mov	r2, r0
 800382a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800382e:	4611      	mov	r1, r2
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff ff5d 	bl	80036f0 <__NVIC_SetPriority>
}
 8003836:	bf00      	nop
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	4603      	mov	r3, r0
 8003846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff ff31 	bl	80036b4 <__NVIC_EnableIRQ>
}
 8003852:	bf00      	nop
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff ffa2 	bl	80037ac <SysTick_Config>
 8003868:	4603      	mov	r3, r0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003880:	f7fe ffe0 	bl	8002844 <HAL_GetTick>
 8003884:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d008      	beq.n	80038a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2280      	movs	r2, #128	; 0x80
 8003896:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e052      	b.n	800394a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0216 	bic.w	r2, r2, #22
 80038b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d103      	bne.n	80038d4 <HAL_DMA_Abort+0x62>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d007      	beq.n	80038e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0208 	bic.w	r2, r2, #8
 80038e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0201 	bic.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038f4:	e013      	b.n	800391e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038f6:	f7fe ffa5 	bl	8002844 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b05      	cmp	r3, #5
 8003902:	d90c      	bls.n	800391e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2203      	movs	r2, #3
 800390e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e015      	b.n	800394a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1e4      	bne.n	80038f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	223f      	movs	r2, #63	; 0x3f
 8003932:	409a      	lsls	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d004      	beq.n	8003970 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2280      	movs	r2, #128	; 0x80
 800396a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e00c      	b.n	800398a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2205      	movs	r2, #5
 8003974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0201 	bic.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003998:	b480      	push	{r7}
 800399a:	b089      	sub	sp, #36	; 0x24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	e165      	b.n	8003c80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039b4:	2201      	movs	r2, #1
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	4013      	ands	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	f040 8154 	bne.w	8003c7a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d005      	beq.n	80039ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d130      	bne.n	8003a4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	2203      	movs	r2, #3
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4013      	ands	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a20:	2201      	movs	r2, #1
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 0201 	and.w	r2, r3, #1
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d017      	beq.n	8003a88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	2203      	movs	r2, #3
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d123      	bne.n	8003adc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	08da      	lsrs	r2, r3, #3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3208      	adds	r2, #8
 8003a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	220f      	movs	r2, #15
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	08da      	lsrs	r2, r3, #3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3208      	adds	r2, #8
 8003ad6:	69b9      	ldr	r1, [r7, #24]
 8003ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43db      	mvns	r3, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4013      	ands	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 0203 	and.w	r2, r3, #3
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80ae 	beq.w	8003c7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	4b5d      	ldr	r3, [pc, #372]	; (8003c98 <HAL_GPIO_Init+0x300>)
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	4a5c      	ldr	r2, [pc, #368]	; (8003c98 <HAL_GPIO_Init+0x300>)
 8003b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b2e:	4b5a      	ldr	r3, [pc, #360]	; (8003c98 <HAL_GPIO_Init+0x300>)
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b3a:	4a58      	ldr	r2, [pc, #352]	; (8003c9c <HAL_GPIO_Init+0x304>)
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	3302      	adds	r3, #2
 8003b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	220f      	movs	r2, #15
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43db      	mvns	r3, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a4f      	ldr	r2, [pc, #316]	; (8003ca0 <HAL_GPIO_Init+0x308>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d025      	beq.n	8003bb2 <HAL_GPIO_Init+0x21a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a4e      	ldr	r2, [pc, #312]	; (8003ca4 <HAL_GPIO_Init+0x30c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d01f      	beq.n	8003bae <HAL_GPIO_Init+0x216>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a4d      	ldr	r2, [pc, #308]	; (8003ca8 <HAL_GPIO_Init+0x310>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d019      	beq.n	8003baa <HAL_GPIO_Init+0x212>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a4c      	ldr	r2, [pc, #304]	; (8003cac <HAL_GPIO_Init+0x314>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d013      	beq.n	8003ba6 <HAL_GPIO_Init+0x20e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a4b      	ldr	r2, [pc, #300]	; (8003cb0 <HAL_GPIO_Init+0x318>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00d      	beq.n	8003ba2 <HAL_GPIO_Init+0x20a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a4a      	ldr	r2, [pc, #296]	; (8003cb4 <HAL_GPIO_Init+0x31c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d007      	beq.n	8003b9e <HAL_GPIO_Init+0x206>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a49      	ldr	r2, [pc, #292]	; (8003cb8 <HAL_GPIO_Init+0x320>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d101      	bne.n	8003b9a <HAL_GPIO_Init+0x202>
 8003b96:	2306      	movs	r3, #6
 8003b98:	e00c      	b.n	8003bb4 <HAL_GPIO_Init+0x21c>
 8003b9a:	2307      	movs	r3, #7
 8003b9c:	e00a      	b.n	8003bb4 <HAL_GPIO_Init+0x21c>
 8003b9e:	2305      	movs	r3, #5
 8003ba0:	e008      	b.n	8003bb4 <HAL_GPIO_Init+0x21c>
 8003ba2:	2304      	movs	r3, #4
 8003ba4:	e006      	b.n	8003bb4 <HAL_GPIO_Init+0x21c>
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e004      	b.n	8003bb4 <HAL_GPIO_Init+0x21c>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e002      	b.n	8003bb4 <HAL_GPIO_Init+0x21c>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <HAL_GPIO_Init+0x21c>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	f002 0203 	and.w	r2, r2, #3
 8003bba:	0092      	lsls	r2, r2, #2
 8003bbc:	4093      	lsls	r3, r2
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bc4:	4935      	ldr	r1, [pc, #212]	; (8003c9c <HAL_GPIO_Init+0x304>)
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	089b      	lsrs	r3, r3, #2
 8003bca:	3302      	adds	r3, #2
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bd2:	4b3a      	ldr	r3, [pc, #232]	; (8003cbc <HAL_GPIO_Init+0x324>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4013      	ands	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bf6:	4a31      	ldr	r2, [pc, #196]	; (8003cbc <HAL_GPIO_Init+0x324>)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bfc:	4b2f      	ldr	r3, [pc, #188]	; (8003cbc <HAL_GPIO_Init+0x324>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c20:	4a26      	ldr	r2, [pc, #152]	; (8003cbc <HAL_GPIO_Init+0x324>)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c26:	4b25      	ldr	r3, [pc, #148]	; (8003cbc <HAL_GPIO_Init+0x324>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c4a:	4a1c      	ldr	r2, [pc, #112]	; (8003cbc <HAL_GPIO_Init+0x324>)
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c50:	4b1a      	ldr	r3, [pc, #104]	; (8003cbc <HAL_GPIO_Init+0x324>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c74:	4a11      	ldr	r2, [pc, #68]	; (8003cbc <HAL_GPIO_Init+0x324>)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	61fb      	str	r3, [r7, #28]
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	2b0f      	cmp	r3, #15
 8003c84:	f67f ae96 	bls.w	80039b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
 8003c8c:	3724      	adds	r7, #36	; 0x24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	40013800 	.word	0x40013800
 8003ca0:	40020000 	.word	0x40020000
 8003ca4:	40020400 	.word	0x40020400
 8003ca8:	40020800 	.word	0x40020800
 8003cac:	40020c00 	.word	0x40020c00
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40021400 	.word	0x40021400
 8003cb8:	40021800 	.word	0x40021800
 8003cbc:	40013c00 	.word	0x40013c00

08003cc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	887b      	ldrh	r3, [r7, #2]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	73fb      	strb	r3, [r7, #15]
 8003cdc:	e001      	b.n	8003ce2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	807b      	strh	r3, [r7, #2]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d00:	787b      	ldrb	r3, [r7, #1]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d06:	887a      	ldrh	r2, [r7, #2]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d0c:	e003      	b.n	8003d16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d0e:	887b      	ldrh	r3, [r7, #2]
 8003d10:	041a      	lsls	r2, r3, #16
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	619a      	str	r2, [r3, #24]
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d2e:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d30:	695a      	ldr	r2, [r3, #20]
 8003d32:	88fb      	ldrh	r3, [r7, #6]
 8003d34:	4013      	ands	r3, r2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d006      	beq.n	8003d48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d3a:	4a05      	ldr	r2, [pc, #20]	; (8003d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d3c:	88fb      	ldrh	r3, [r7, #6]
 8003d3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d40:	88fb      	ldrh	r3, [r7, #6]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fc fca8 	bl	8000698 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d48:	bf00      	nop
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40013c00 	.word	0x40013c00

08003d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0cc      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d68:	4b68      	ldr	r3, [pc, #416]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d90c      	bls.n	8003d90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d76:	4b65      	ldr	r3, [pc, #404]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7e:	4b63      	ldr	r3, [pc, #396]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0b8      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d020      	beq.n	8003dde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da8:	4b59      	ldr	r3, [pc, #356]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	4a58      	ldr	r2, [pc, #352]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003db2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dc0:	4b53      	ldr	r3, [pc, #332]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	4a52      	ldr	r2, [pc, #328]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dcc:	4b50      	ldr	r3, [pc, #320]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	494d      	ldr	r1, [pc, #308]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d044      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df2:	4b47      	ldr	r3, [pc, #284]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d119      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e07f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d003      	beq.n	8003e12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d107      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e12:	4b3f      	ldr	r3, [pc, #252]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e06f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e22:	4b3b      	ldr	r3, [pc, #236]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e067      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e32:	4b37      	ldr	r3, [pc, #220]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f023 0203 	bic.w	r2, r3, #3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	4934      	ldr	r1, [pc, #208]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e44:	f7fe fcfe 	bl	8002844 <HAL_GetTick>
 8003e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4a:	e00a      	b.n	8003e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e4c:	f7fe fcfa 	bl	8002844 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e04f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e62:	4b2b      	ldr	r3, [pc, #172]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 020c 	and.w	r2, r3, #12
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d1eb      	bne.n	8003e4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e74:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 030f 	and.w	r3, r3, #15
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d20c      	bcs.n	8003e9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e82:	4b22      	ldr	r3, [pc, #136]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8a:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e032      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d008      	beq.n	8003eba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea8:	4b19      	ldr	r3, [pc, #100]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	4916      	ldr	r1, [pc, #88]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	490e      	ldr	r1, [pc, #56]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eda:	f000 f855 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	091b      	lsrs	r3, r3, #4
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	490a      	ldr	r1, [pc, #40]	; (8003f14 <HAL_RCC_ClockConfig+0x1c0>)
 8003eec:	5ccb      	ldrb	r3, [r1, r3]
 8003eee:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef2:	4a09      	ldr	r2, [pc, #36]	; (8003f18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ef6:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fe fc5e 	bl	80027bc <HAL_InitTick>

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40023c00 	.word	0x40023c00
 8003f10:	40023800 	.word	0x40023800
 8003f14:	08008b4c 	.word	0x08008b4c
 8003f18:	20000000 	.word	0x20000000
 8003f1c:	20000004 	.word	0x20000004

08003f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f24:	4b03      	ldr	r3, [pc, #12]	; (8003f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f26:	681b      	ldr	r3, [r3, #0]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	20000000 	.word	0x20000000

08003f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f3c:	f7ff fff0 	bl	8003f20 <HAL_RCC_GetHCLKFreq>
 8003f40:	4602      	mov	r2, r0
 8003f42:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	0a9b      	lsrs	r3, r3, #10
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	4903      	ldr	r1, [pc, #12]	; (8003f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f4e:	5ccb      	ldrb	r3, [r1, r3]
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	08008b5c 	.word	0x08008b5c

08003f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f64:	f7ff ffdc 	bl	8003f20 <HAL_RCC_GetHCLKFreq>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	0b5b      	lsrs	r3, r3, #13
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	4903      	ldr	r1, [pc, #12]	; (8003f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f76:	5ccb      	ldrb	r3, [r1, r3]
 8003f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40023800 	.word	0x40023800
 8003f84:	08008b5c 	.word	0x08008b5c

08003f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f8c:	b0ae      	sub	sp, #184	; 0xb8
 8003f8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fae:	4bcb      	ldr	r3, [pc, #812]	; (80042dc <HAL_RCC_GetSysClockFreq+0x354>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 030c 	and.w	r3, r3, #12
 8003fb6:	2b0c      	cmp	r3, #12
 8003fb8:	f200 8206 	bhi.w	80043c8 <HAL_RCC_GetSysClockFreq+0x440>
 8003fbc:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc2:	bf00      	nop
 8003fc4:	08003ff9 	.word	0x08003ff9
 8003fc8:	080043c9 	.word	0x080043c9
 8003fcc:	080043c9 	.word	0x080043c9
 8003fd0:	080043c9 	.word	0x080043c9
 8003fd4:	08004001 	.word	0x08004001
 8003fd8:	080043c9 	.word	0x080043c9
 8003fdc:	080043c9 	.word	0x080043c9
 8003fe0:	080043c9 	.word	0x080043c9
 8003fe4:	08004009 	.word	0x08004009
 8003fe8:	080043c9 	.word	0x080043c9
 8003fec:	080043c9 	.word	0x080043c9
 8003ff0:	080043c9 	.word	0x080043c9
 8003ff4:	080041f9 	.word	0x080041f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ff8:	4bb9      	ldr	r3, [pc, #740]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003ffe:	e1e7      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004000:	4bb8      	ldr	r3, [pc, #736]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004002:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004006:	e1e3      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004008:	4bb4      	ldr	r3, [pc, #720]	; (80042dc <HAL_RCC_GetSysClockFreq+0x354>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004010:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004014:	4bb1      	ldr	r3, [pc, #708]	; (80042dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d071      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004020:	4bae      	ldr	r3, [pc, #696]	; (80042dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	099b      	lsrs	r3, r3, #6
 8004026:	2200      	movs	r2, #0
 8004028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800402c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004030:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004038:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800403c:	2300      	movs	r3, #0
 800403e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004042:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004046:	4622      	mov	r2, r4
 8004048:	462b      	mov	r3, r5
 800404a:	f04f 0000 	mov.w	r0, #0
 800404e:	f04f 0100 	mov.w	r1, #0
 8004052:	0159      	lsls	r1, r3, #5
 8004054:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004058:	0150      	lsls	r0, r2, #5
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	4621      	mov	r1, r4
 8004060:	1a51      	subs	r1, r2, r1
 8004062:	6439      	str	r1, [r7, #64]	; 0x40
 8004064:	4629      	mov	r1, r5
 8004066:	eb63 0301 	sbc.w	r3, r3, r1
 800406a:	647b      	str	r3, [r7, #68]	; 0x44
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004078:	4649      	mov	r1, r9
 800407a:	018b      	lsls	r3, r1, #6
 800407c:	4641      	mov	r1, r8
 800407e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004082:	4641      	mov	r1, r8
 8004084:	018a      	lsls	r2, r1, #6
 8004086:	4641      	mov	r1, r8
 8004088:	1a51      	subs	r1, r2, r1
 800408a:	63b9      	str	r1, [r7, #56]	; 0x38
 800408c:	4649      	mov	r1, r9
 800408e:	eb63 0301 	sbc.w	r3, r3, r1
 8004092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80040a0:	4649      	mov	r1, r9
 80040a2:	00cb      	lsls	r3, r1, #3
 80040a4:	4641      	mov	r1, r8
 80040a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040aa:	4641      	mov	r1, r8
 80040ac:	00ca      	lsls	r2, r1, #3
 80040ae:	4610      	mov	r0, r2
 80040b0:	4619      	mov	r1, r3
 80040b2:	4603      	mov	r3, r0
 80040b4:	4622      	mov	r2, r4
 80040b6:	189b      	adds	r3, r3, r2
 80040b8:	633b      	str	r3, [r7, #48]	; 0x30
 80040ba:	462b      	mov	r3, r5
 80040bc:	460a      	mov	r2, r1
 80040be:	eb42 0303 	adc.w	r3, r2, r3
 80040c2:	637b      	str	r3, [r7, #52]	; 0x34
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040d0:	4629      	mov	r1, r5
 80040d2:	024b      	lsls	r3, r1, #9
 80040d4:	4621      	mov	r1, r4
 80040d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040da:	4621      	mov	r1, r4
 80040dc:	024a      	lsls	r2, r1, #9
 80040de:	4610      	mov	r0, r2
 80040e0:	4619      	mov	r1, r3
 80040e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040e6:	2200      	movs	r2, #0
 80040e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80040f4:	f7fc f8dc 	bl	80002b0 <__aeabi_uldivmod>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4613      	mov	r3, r2
 80040fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004102:	e067      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004104:	4b75      	ldr	r3, [pc, #468]	; (80042dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	099b      	lsrs	r3, r3, #6
 800410a:	2200      	movs	r2, #0
 800410c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004110:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004114:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800411c:	67bb      	str	r3, [r7, #120]	; 0x78
 800411e:	2300      	movs	r3, #0
 8004120:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004122:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004126:	4622      	mov	r2, r4
 8004128:	462b      	mov	r3, r5
 800412a:	f04f 0000 	mov.w	r0, #0
 800412e:	f04f 0100 	mov.w	r1, #0
 8004132:	0159      	lsls	r1, r3, #5
 8004134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004138:	0150      	lsls	r0, r2, #5
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4621      	mov	r1, r4
 8004140:	1a51      	subs	r1, r2, r1
 8004142:	62b9      	str	r1, [r7, #40]	; 0x28
 8004144:	4629      	mov	r1, r5
 8004146:	eb63 0301 	sbc.w	r3, r3, r1
 800414a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004158:	4649      	mov	r1, r9
 800415a:	018b      	lsls	r3, r1, #6
 800415c:	4641      	mov	r1, r8
 800415e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004162:	4641      	mov	r1, r8
 8004164:	018a      	lsls	r2, r1, #6
 8004166:	4641      	mov	r1, r8
 8004168:	ebb2 0a01 	subs.w	sl, r2, r1
 800416c:	4649      	mov	r1, r9
 800416e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004172:	f04f 0200 	mov.w	r2, #0
 8004176:	f04f 0300 	mov.w	r3, #0
 800417a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800417e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004182:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004186:	4692      	mov	sl, r2
 8004188:	469b      	mov	fp, r3
 800418a:	4623      	mov	r3, r4
 800418c:	eb1a 0303 	adds.w	r3, sl, r3
 8004190:	623b      	str	r3, [r7, #32]
 8004192:	462b      	mov	r3, r5
 8004194:	eb4b 0303 	adc.w	r3, fp, r3
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	f04f 0300 	mov.w	r3, #0
 80041a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80041a6:	4629      	mov	r1, r5
 80041a8:	028b      	lsls	r3, r1, #10
 80041aa:	4621      	mov	r1, r4
 80041ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041b0:	4621      	mov	r1, r4
 80041b2:	028a      	lsls	r2, r1, #10
 80041b4:	4610      	mov	r0, r2
 80041b6:	4619      	mov	r1, r3
 80041b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041bc:	2200      	movs	r2, #0
 80041be:	673b      	str	r3, [r7, #112]	; 0x70
 80041c0:	677a      	str	r2, [r7, #116]	; 0x74
 80041c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80041c6:	f7fc f873 	bl	80002b0 <__aeabi_uldivmod>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4613      	mov	r3, r2
 80041d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041d4:	4b41      	ldr	r3, [pc, #260]	; (80042dc <HAL_RCC_GetSysClockFreq+0x354>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	0c1b      	lsrs	r3, r3, #16
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	3301      	adds	r3, #1
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80041e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80041ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80041f6:	e0eb      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041f8:	4b38      	ldr	r3, [pc, #224]	; (80042dc <HAL_RCC_GetSysClockFreq+0x354>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004200:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004204:	4b35      	ldr	r3, [pc, #212]	; (80042dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d06b      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004210:	4b32      	ldr	r3, [pc, #200]	; (80042dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	099b      	lsrs	r3, r3, #6
 8004216:	2200      	movs	r2, #0
 8004218:	66bb      	str	r3, [r7, #104]	; 0x68
 800421a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800421c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800421e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004222:	663b      	str	r3, [r7, #96]	; 0x60
 8004224:	2300      	movs	r3, #0
 8004226:	667b      	str	r3, [r7, #100]	; 0x64
 8004228:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800422c:	4622      	mov	r2, r4
 800422e:	462b      	mov	r3, r5
 8004230:	f04f 0000 	mov.w	r0, #0
 8004234:	f04f 0100 	mov.w	r1, #0
 8004238:	0159      	lsls	r1, r3, #5
 800423a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800423e:	0150      	lsls	r0, r2, #5
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4621      	mov	r1, r4
 8004246:	1a51      	subs	r1, r2, r1
 8004248:	61b9      	str	r1, [r7, #24]
 800424a:	4629      	mov	r1, r5
 800424c:	eb63 0301 	sbc.w	r3, r3, r1
 8004250:	61fb      	str	r3, [r7, #28]
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	f04f 0300 	mov.w	r3, #0
 800425a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800425e:	4659      	mov	r1, fp
 8004260:	018b      	lsls	r3, r1, #6
 8004262:	4651      	mov	r1, sl
 8004264:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004268:	4651      	mov	r1, sl
 800426a:	018a      	lsls	r2, r1, #6
 800426c:	4651      	mov	r1, sl
 800426e:	ebb2 0801 	subs.w	r8, r2, r1
 8004272:	4659      	mov	r1, fp
 8004274:	eb63 0901 	sbc.w	r9, r3, r1
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004284:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004288:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800428c:	4690      	mov	r8, r2
 800428e:	4699      	mov	r9, r3
 8004290:	4623      	mov	r3, r4
 8004292:	eb18 0303 	adds.w	r3, r8, r3
 8004296:	613b      	str	r3, [r7, #16]
 8004298:	462b      	mov	r3, r5
 800429a:	eb49 0303 	adc.w	r3, r9, r3
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80042ac:	4629      	mov	r1, r5
 80042ae:	024b      	lsls	r3, r1, #9
 80042b0:	4621      	mov	r1, r4
 80042b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042b6:	4621      	mov	r1, r4
 80042b8:	024a      	lsls	r2, r1, #9
 80042ba:	4610      	mov	r0, r2
 80042bc:	4619      	mov	r1, r3
 80042be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042c2:	2200      	movs	r2, #0
 80042c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80042c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80042c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042cc:	f7fb fff0 	bl	80002b0 <__aeabi_uldivmod>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4613      	mov	r3, r2
 80042d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042da:	e065      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x420>
 80042dc:	40023800 	.word	0x40023800
 80042e0:	00f42400 	.word	0x00f42400
 80042e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e8:	4b3d      	ldr	r3, [pc, #244]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	099b      	lsrs	r3, r3, #6
 80042ee:	2200      	movs	r2, #0
 80042f0:	4618      	mov	r0, r3
 80042f2:	4611      	mov	r1, r2
 80042f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042f8:	653b      	str	r3, [r7, #80]	; 0x50
 80042fa:	2300      	movs	r3, #0
 80042fc:	657b      	str	r3, [r7, #84]	; 0x54
 80042fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004302:	4642      	mov	r2, r8
 8004304:	464b      	mov	r3, r9
 8004306:	f04f 0000 	mov.w	r0, #0
 800430a:	f04f 0100 	mov.w	r1, #0
 800430e:	0159      	lsls	r1, r3, #5
 8004310:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004314:	0150      	lsls	r0, r2, #5
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	4641      	mov	r1, r8
 800431c:	1a51      	subs	r1, r2, r1
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	4649      	mov	r1, r9
 8004322:	eb63 0301 	sbc.w	r3, r3, r1
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004334:	4659      	mov	r1, fp
 8004336:	018b      	lsls	r3, r1, #6
 8004338:	4651      	mov	r1, sl
 800433a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800433e:	4651      	mov	r1, sl
 8004340:	018a      	lsls	r2, r1, #6
 8004342:	4651      	mov	r1, sl
 8004344:	1a54      	subs	r4, r2, r1
 8004346:	4659      	mov	r1, fp
 8004348:	eb63 0501 	sbc.w	r5, r3, r1
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	00eb      	lsls	r3, r5, #3
 8004356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800435a:	00e2      	lsls	r2, r4, #3
 800435c:	4614      	mov	r4, r2
 800435e:	461d      	mov	r5, r3
 8004360:	4643      	mov	r3, r8
 8004362:	18e3      	adds	r3, r4, r3
 8004364:	603b      	str	r3, [r7, #0]
 8004366:	464b      	mov	r3, r9
 8004368:	eb45 0303 	adc.w	r3, r5, r3
 800436c:	607b      	str	r3, [r7, #4]
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	f04f 0300 	mov.w	r3, #0
 8004376:	e9d7 4500 	ldrd	r4, r5, [r7]
 800437a:	4629      	mov	r1, r5
 800437c:	028b      	lsls	r3, r1, #10
 800437e:	4621      	mov	r1, r4
 8004380:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004384:	4621      	mov	r1, r4
 8004386:	028a      	lsls	r2, r1, #10
 8004388:	4610      	mov	r0, r2
 800438a:	4619      	mov	r1, r3
 800438c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004390:	2200      	movs	r2, #0
 8004392:	64bb      	str	r3, [r7, #72]	; 0x48
 8004394:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004396:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800439a:	f7fb ff89 	bl	80002b0 <__aeabi_uldivmod>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4613      	mov	r3, r2
 80043a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80043a8:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	0f1b      	lsrs	r3, r3, #28
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80043b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043be:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80043c6:	e003      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043c8:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80043ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80043ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	37b8      	adds	r7, #184	; 0xb8
 80043d8:	46bd      	mov	sp, r7
 80043da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043de:	bf00      	nop
 80043e0:	40023800 	.word	0x40023800
 80043e4:	00f42400 	.word	0x00f42400

080043e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e28d      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 8083 	beq.w	800450e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004408:	4b94      	ldr	r3, [pc, #592]	; (800465c <HAL_RCC_OscConfig+0x274>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 030c 	and.w	r3, r3, #12
 8004410:	2b04      	cmp	r3, #4
 8004412:	d019      	beq.n	8004448 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004414:	4b91      	ldr	r3, [pc, #580]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800441c:	2b08      	cmp	r3, #8
 800441e:	d106      	bne.n	800442e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004420:	4b8e      	ldr	r3, [pc, #568]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800442c:	d00c      	beq.n	8004448 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800442e:	4b8b      	ldr	r3, [pc, #556]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004436:	2b0c      	cmp	r3, #12
 8004438:	d112      	bne.n	8004460 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800443a:	4b88      	ldr	r3, [pc, #544]	; (800465c <HAL_RCC_OscConfig+0x274>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004446:	d10b      	bne.n	8004460 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004448:	4b84      	ldr	r3, [pc, #528]	; (800465c <HAL_RCC_OscConfig+0x274>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d05b      	beq.n	800450c <HAL_RCC_OscConfig+0x124>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d157      	bne.n	800450c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e25a      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004468:	d106      	bne.n	8004478 <HAL_RCC_OscConfig+0x90>
 800446a:	4b7c      	ldr	r3, [pc, #496]	; (800465c <HAL_RCC_OscConfig+0x274>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a7b      	ldr	r2, [pc, #492]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e01d      	b.n	80044b4 <HAL_RCC_OscConfig+0xcc>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004480:	d10c      	bne.n	800449c <HAL_RCC_OscConfig+0xb4>
 8004482:	4b76      	ldr	r3, [pc, #472]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a75      	ldr	r2, [pc, #468]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	4b73      	ldr	r3, [pc, #460]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a72      	ldr	r2, [pc, #456]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	e00b      	b.n	80044b4 <HAL_RCC_OscConfig+0xcc>
 800449c:	4b6f      	ldr	r3, [pc, #444]	; (800465c <HAL_RCC_OscConfig+0x274>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a6e      	ldr	r2, [pc, #440]	; (800465c <HAL_RCC_OscConfig+0x274>)
 80044a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	4b6c      	ldr	r3, [pc, #432]	; (800465c <HAL_RCC_OscConfig+0x274>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a6b      	ldr	r2, [pc, #428]	; (800465c <HAL_RCC_OscConfig+0x274>)
 80044ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d013      	beq.n	80044e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044bc:	f7fe f9c2 	bl	8002844 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044c4:	f7fe f9be 	bl	8002844 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b64      	cmp	r3, #100	; 0x64
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e21f      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d6:	4b61      	ldr	r3, [pc, #388]	; (800465c <HAL_RCC_OscConfig+0x274>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0xdc>
 80044e2:	e014      	b.n	800450e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fe f9ae 	bl	8002844 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ec:	f7fe f9aa 	bl	8002844 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	; 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e20b      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044fe:	4b57      	ldr	r3, [pc, #348]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0x104>
 800450a:	e000      	b.n	800450e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800450c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d06f      	beq.n	80045fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800451a:	4b50      	ldr	r3, [pc, #320]	; (800465c <HAL_RCC_OscConfig+0x274>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 030c 	and.w	r3, r3, #12
 8004522:	2b00      	cmp	r3, #0
 8004524:	d017      	beq.n	8004556 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004526:	4b4d      	ldr	r3, [pc, #308]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800452e:	2b08      	cmp	r3, #8
 8004530:	d105      	bne.n	800453e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004532:	4b4a      	ldr	r3, [pc, #296]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00b      	beq.n	8004556 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800453e:	4b47      	ldr	r3, [pc, #284]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004546:	2b0c      	cmp	r3, #12
 8004548:	d11c      	bne.n	8004584 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800454a:	4b44      	ldr	r3, [pc, #272]	; (800465c <HAL_RCC_OscConfig+0x274>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d116      	bne.n	8004584 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004556:	4b41      	ldr	r3, [pc, #260]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <HAL_RCC_OscConfig+0x186>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d001      	beq.n	800456e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e1d3      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800456e:	4b3b      	ldr	r3, [pc, #236]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	4937      	ldr	r1, [pc, #220]	; (800465c <HAL_RCC_OscConfig+0x274>)
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004582:	e03a      	b.n	80045fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d020      	beq.n	80045ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800458c:	4b34      	ldr	r3, [pc, #208]	; (8004660 <HAL_RCC_OscConfig+0x278>)
 800458e:	2201      	movs	r2, #1
 8004590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004592:	f7fe f957 	bl	8002844 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800459a:	f7fe f953 	bl	8002844 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e1b4      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ac:	4b2b      	ldr	r3, [pc, #172]	; (800465c <HAL_RCC_OscConfig+0x274>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f0      	beq.n	800459a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b8:	4b28      	ldr	r3, [pc, #160]	; (800465c <HAL_RCC_OscConfig+0x274>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	4925      	ldr	r1, [pc, #148]	; (800465c <HAL_RCC_OscConfig+0x274>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	600b      	str	r3, [r1, #0]
 80045cc:	e015      	b.n	80045fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ce:	4b24      	ldr	r3, [pc, #144]	; (8004660 <HAL_RCC_OscConfig+0x278>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d4:	f7fe f936 	bl	8002844 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045dc:	f7fe f932 	bl	8002844 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e193      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ee:	4b1b      	ldr	r3, [pc, #108]	; (800465c <HAL_RCC_OscConfig+0x274>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	2b00      	cmp	r3, #0
 8004604:	d036      	beq.n	8004674 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d016      	beq.n	800463c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800460e:	4b15      	ldr	r3, [pc, #84]	; (8004664 <HAL_RCC_OscConfig+0x27c>)
 8004610:	2201      	movs	r2, #1
 8004612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004614:	f7fe f916 	bl	8002844 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800461c:	f7fe f912 	bl	8002844 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e173      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462e:	4b0b      	ldr	r3, [pc, #44]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0f0      	beq.n	800461c <HAL_RCC_OscConfig+0x234>
 800463a:	e01b      	b.n	8004674 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800463c:	4b09      	ldr	r3, [pc, #36]	; (8004664 <HAL_RCC_OscConfig+0x27c>)
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004642:	f7fe f8ff 	bl	8002844 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004648:	e00e      	b.n	8004668 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800464a:	f7fe f8fb 	bl	8002844 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d907      	bls.n	8004668 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e15c      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
 800465c:	40023800 	.word	0x40023800
 8004660:	42470000 	.word	0x42470000
 8004664:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004668:	4b8a      	ldr	r3, [pc, #552]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 800466a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1ea      	bne.n	800464a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 8097 	beq.w	80047b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004682:	2300      	movs	r3, #0
 8004684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004686:	4b83      	ldr	r3, [pc, #524]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10f      	bne.n	80046b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004692:	2300      	movs	r3, #0
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	4b7f      	ldr	r3, [pc, #508]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	4a7e      	ldr	r2, [pc, #504]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 800469c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a0:	6413      	str	r3, [r2, #64]	; 0x40
 80046a2:	4b7c      	ldr	r3, [pc, #496]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046aa:	60bb      	str	r3, [r7, #8]
 80046ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ae:	2301      	movs	r3, #1
 80046b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b2:	4b79      	ldr	r3, [pc, #484]	; (8004898 <HAL_RCC_OscConfig+0x4b0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d118      	bne.n	80046f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046be:	4b76      	ldr	r3, [pc, #472]	; (8004898 <HAL_RCC_OscConfig+0x4b0>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a75      	ldr	r2, [pc, #468]	; (8004898 <HAL_RCC_OscConfig+0x4b0>)
 80046c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ca:	f7fe f8bb 	bl	8002844 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d2:	f7fe f8b7 	bl	8002844 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e118      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e4:	4b6c      	ldr	r3, [pc, #432]	; (8004898 <HAL_RCC_OscConfig+0x4b0>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d106      	bne.n	8004706 <HAL_RCC_OscConfig+0x31e>
 80046f8:	4b66      	ldr	r3, [pc, #408]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fc:	4a65      	ldr	r2, [pc, #404]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	6713      	str	r3, [r2, #112]	; 0x70
 8004704:	e01c      	b.n	8004740 <HAL_RCC_OscConfig+0x358>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b05      	cmp	r3, #5
 800470c:	d10c      	bne.n	8004728 <HAL_RCC_OscConfig+0x340>
 800470e:	4b61      	ldr	r3, [pc, #388]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	4a60      	ldr	r2, [pc, #384]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 8004714:	f043 0304 	orr.w	r3, r3, #4
 8004718:	6713      	str	r3, [r2, #112]	; 0x70
 800471a:	4b5e      	ldr	r3, [pc, #376]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 800471c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471e:	4a5d      	ldr	r2, [pc, #372]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 8004720:	f043 0301 	orr.w	r3, r3, #1
 8004724:	6713      	str	r3, [r2, #112]	; 0x70
 8004726:	e00b      	b.n	8004740 <HAL_RCC_OscConfig+0x358>
 8004728:	4b5a      	ldr	r3, [pc, #360]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 800472a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472c:	4a59      	ldr	r2, [pc, #356]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 800472e:	f023 0301 	bic.w	r3, r3, #1
 8004732:	6713      	str	r3, [r2, #112]	; 0x70
 8004734:	4b57      	ldr	r3, [pc, #348]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 8004736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004738:	4a56      	ldr	r2, [pc, #344]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 800473a:	f023 0304 	bic.w	r3, r3, #4
 800473e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d015      	beq.n	8004774 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004748:	f7fe f87c 	bl	8002844 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474e:	e00a      	b.n	8004766 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004750:	f7fe f878 	bl	8002844 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	f241 3288 	movw	r2, #5000	; 0x1388
 800475e:	4293      	cmp	r3, r2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e0d7      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004766:	4b4b      	ldr	r3, [pc, #300]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 8004768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0ee      	beq.n	8004750 <HAL_RCC_OscConfig+0x368>
 8004772:	e014      	b.n	800479e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004774:	f7fe f866 	bl	8002844 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800477a:	e00a      	b.n	8004792 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800477c:	f7fe f862 	bl	8002844 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	f241 3288 	movw	r2, #5000	; 0x1388
 800478a:	4293      	cmp	r3, r2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e0c1      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004792:	4b40      	ldr	r3, [pc, #256]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 8004794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1ee      	bne.n	800477c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800479e:	7dfb      	ldrb	r3, [r7, #23]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d105      	bne.n	80047b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a4:	4b3b      	ldr	r3, [pc, #236]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	4a3a      	ldr	r2, [pc, #232]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 80047aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 80ad 	beq.w	8004914 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047ba:	4b36      	ldr	r3, [pc, #216]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d060      	beq.n	8004888 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d145      	bne.n	800485a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ce:	4b33      	ldr	r3, [pc, #204]	; (800489c <HAL_RCC_OscConfig+0x4b4>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fe f836 	bl	8002844 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fe f832 	bl	8002844 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e093      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ee:	4b29      	ldr	r3, [pc, #164]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69da      	ldr	r2, [r3, #28]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	019b      	lsls	r3, r3, #6
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	085b      	lsrs	r3, r3, #1
 8004812:	3b01      	subs	r3, #1
 8004814:	041b      	lsls	r3, r3, #16
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	061b      	lsls	r3, r3, #24
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004824:	071b      	lsls	r3, r3, #28
 8004826:	491b      	ldr	r1, [pc, #108]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 8004828:	4313      	orrs	r3, r2
 800482a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800482c:	4b1b      	ldr	r3, [pc, #108]	; (800489c <HAL_RCC_OscConfig+0x4b4>)
 800482e:	2201      	movs	r2, #1
 8004830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004832:	f7fe f807 	bl	8002844 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800483a:	f7fe f803 	bl	8002844 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e064      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800484c:	4b11      	ldr	r3, [pc, #68]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0f0      	beq.n	800483a <HAL_RCC_OscConfig+0x452>
 8004858:	e05c      	b.n	8004914 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800485a:	4b10      	ldr	r3, [pc, #64]	; (800489c <HAL_RCC_OscConfig+0x4b4>)
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004860:	f7fd fff0 	bl	8002844 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004868:	f7fd ffec 	bl	8002844 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e04d      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800487a:	4b06      	ldr	r3, [pc, #24]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f0      	bne.n	8004868 <HAL_RCC_OscConfig+0x480>
 8004886:	e045      	b.n	8004914 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d107      	bne.n	80048a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e040      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
 8004894:	40023800 	.word	0x40023800
 8004898:	40007000 	.word	0x40007000
 800489c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048a0:	4b1f      	ldr	r3, [pc, #124]	; (8004920 <HAL_RCC_OscConfig+0x538>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d030      	beq.n	8004910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d129      	bne.n	8004910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d122      	bne.n	8004910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048d0:	4013      	ands	r3, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048d8:	4293      	cmp	r3, r2
 80048da:	d119      	bne.n	8004910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e6:	085b      	lsrs	r3, r3, #1
 80048e8:	3b01      	subs	r3, #1
 80048ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d10f      	bne.n	8004910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d107      	bne.n	8004910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800490c:	429a      	cmp	r2, r3
 800490e:	d001      	beq.n	8004914 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e000      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40023800 	.word	0x40023800

08004924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e041      	b.n	80049ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fd fd40 	bl	80023d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3304      	adds	r3, #4
 8004960:	4619      	mov	r1, r3
 8004962:	4610      	mov	r0, r2
 8004964:	f000 fbf0 	bl	8005148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b082      	sub	sp, #8
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e041      	b.n	8004a58 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d106      	bne.n	80049ee <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f839 	bl	8004a60 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2202      	movs	r2, #2
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3304      	adds	r3, #4
 80049fe:	4619      	mov	r1, r3
 8004a00:	4610      	mov	r0, r2
 8004a02:	f000 fba1 	bl	8005148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d109      	bne.n	8004a9c <HAL_TIM_OC_Start_IT+0x28>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	bf14      	ite	ne
 8004a94:	2301      	movne	r3, #1
 8004a96:	2300      	moveq	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	e022      	b.n	8004ae2 <HAL_TIM_OC_Start_IT+0x6e>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d109      	bne.n	8004ab6 <HAL_TIM_OC_Start_IT+0x42>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	bf14      	ite	ne
 8004aae:	2301      	movne	r3, #1
 8004ab0:	2300      	moveq	r3, #0
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	e015      	b.n	8004ae2 <HAL_TIM_OC_Start_IT+0x6e>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d109      	bne.n	8004ad0 <HAL_TIM_OC_Start_IT+0x5c>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	bf14      	ite	ne
 8004ac8:	2301      	movne	r3, #1
 8004aca:	2300      	moveq	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	e008      	b.n	8004ae2 <HAL_TIM_OC_Start_IT+0x6e>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	bf14      	ite	ne
 8004adc:	2301      	movne	r3, #1
 8004ade:	2300      	moveq	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e0c7      	b.n	8004c7a <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d104      	bne.n	8004afa <HAL_TIM_OC_Start_IT+0x86>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004af8:	e013      	b.n	8004b22 <HAL_TIM_OC_Start_IT+0xae>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d104      	bne.n	8004b0a <HAL_TIM_OC_Start_IT+0x96>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b08:	e00b      	b.n	8004b22 <HAL_TIM_OC_Start_IT+0xae>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d104      	bne.n	8004b1a <HAL_TIM_OC_Start_IT+0xa6>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b18:	e003      	b.n	8004b22 <HAL_TIM_OC_Start_IT+0xae>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b0c      	cmp	r3, #12
 8004b26:	d841      	bhi.n	8004bac <HAL_TIM_OC_Start_IT+0x138>
 8004b28:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <HAL_TIM_OC_Start_IT+0xbc>)
 8004b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2e:	bf00      	nop
 8004b30:	08004b65 	.word	0x08004b65
 8004b34:	08004bad 	.word	0x08004bad
 8004b38:	08004bad 	.word	0x08004bad
 8004b3c:	08004bad 	.word	0x08004bad
 8004b40:	08004b77 	.word	0x08004b77
 8004b44:	08004bad 	.word	0x08004bad
 8004b48:	08004bad 	.word	0x08004bad
 8004b4c:	08004bad 	.word	0x08004bad
 8004b50:	08004b89 	.word	0x08004b89
 8004b54:	08004bad 	.word	0x08004bad
 8004b58:	08004bad 	.word	0x08004bad
 8004b5c:	08004bad 	.word	0x08004bad
 8004b60:	08004b9b 	.word	0x08004b9b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0202 	orr.w	r2, r2, #2
 8004b72:	60da      	str	r2, [r3, #12]
      break;
 8004b74:	e01d      	b.n	8004bb2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0204 	orr.w	r2, r2, #4
 8004b84:	60da      	str	r2, [r3, #12]
      break;
 8004b86:	e014      	b.n	8004bb2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0208 	orr.w	r2, r2, #8
 8004b96:	60da      	str	r2, [r3, #12]
      break;
 8004b98:	e00b      	b.n	8004bb2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68da      	ldr	r2, [r3, #12]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0210 	orr.w	r2, r2, #16
 8004ba8:	60da      	str	r2, [r3, #12]
      break;
 8004baa:	e002      	b.n	8004bb2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb0:	bf00      	nop
  }

  if (status == HAL_OK)
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d15f      	bne.n	8004c78 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	6839      	ldr	r1, [r7, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fdab 	bl	800571c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a2e      	ldr	r2, [pc, #184]	; (8004c84 <HAL_TIM_OC_Start_IT+0x210>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d004      	beq.n	8004bda <HAL_TIM_OC_Start_IT+0x166>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a2c      	ldr	r2, [pc, #176]	; (8004c88 <HAL_TIM_OC_Start_IT+0x214>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d101      	bne.n	8004bde <HAL_TIM_OC_Start_IT+0x16a>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <HAL_TIM_OC_Start_IT+0x16c>
 8004bde:	2300      	movs	r3, #0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d007      	beq.n	8004bf4 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bf2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a22      	ldr	r2, [pc, #136]	; (8004c84 <HAL_TIM_OC_Start_IT+0x210>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d022      	beq.n	8004c44 <HAL_TIM_OC_Start_IT+0x1d0>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c06:	d01d      	beq.n	8004c44 <HAL_TIM_OC_Start_IT+0x1d0>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1f      	ldr	r2, [pc, #124]	; (8004c8c <HAL_TIM_OC_Start_IT+0x218>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d018      	beq.n	8004c44 <HAL_TIM_OC_Start_IT+0x1d0>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1e      	ldr	r2, [pc, #120]	; (8004c90 <HAL_TIM_OC_Start_IT+0x21c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d013      	beq.n	8004c44 <HAL_TIM_OC_Start_IT+0x1d0>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a1c      	ldr	r2, [pc, #112]	; (8004c94 <HAL_TIM_OC_Start_IT+0x220>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00e      	beq.n	8004c44 <HAL_TIM_OC_Start_IT+0x1d0>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a17      	ldr	r2, [pc, #92]	; (8004c88 <HAL_TIM_OC_Start_IT+0x214>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d009      	beq.n	8004c44 <HAL_TIM_OC_Start_IT+0x1d0>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a18      	ldr	r2, [pc, #96]	; (8004c98 <HAL_TIM_OC_Start_IT+0x224>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d004      	beq.n	8004c44 <HAL_TIM_OC_Start_IT+0x1d0>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a17      	ldr	r2, [pc, #92]	; (8004c9c <HAL_TIM_OC_Start_IT+0x228>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d111      	bne.n	8004c68 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b06      	cmp	r3, #6
 8004c54:	d010      	beq.n	8004c78 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f042 0201 	orr.w	r2, r2, #1
 8004c64:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c66:	e007      	b.n	8004c78 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0201 	orr.w	r2, r2, #1
 8004c76:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	40010000 	.word	0x40010000
 8004c88:	40010400 	.word	0x40010400
 8004c8c:	40000400 	.word	0x40000400
 8004c90:	40000800 	.word	0x40000800
 8004c94:	40000c00 	.word	0x40000c00
 8004c98:	40014000 	.word	0x40014000
 8004c9c:	40001800 	.word	0x40001800

08004ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d122      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d11b      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0202 	mvn.w	r2, #2
 8004ccc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	f003 0303 	and.w	r3, r3, #3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fa11 	bl	800510a <HAL_TIM_IC_CaptureCallback>
 8004ce8:	e005      	b.n	8004cf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7fb fe50 	bl	8000990 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 fa14 	bl	800511e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d122      	bne.n	8004d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d11b      	bne.n	8004d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0204 	mvn.w	r2, #4
 8004d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2202      	movs	r2, #2
 8004d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f9e7 	bl	800510a <HAL_TIM_IC_CaptureCallback>
 8004d3c:	e005      	b.n	8004d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fb fe26 	bl	8000990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f9ea 	bl	800511e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0308 	and.w	r3, r3, #8
 8004d5a:	2b08      	cmp	r3, #8
 8004d5c:	d122      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d11b      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0208 	mvn.w	r2, #8
 8004d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2204      	movs	r2, #4
 8004d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f9bd 	bl	800510a <HAL_TIM_IC_CaptureCallback>
 8004d90:	e005      	b.n	8004d9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fb fdfc 	bl	8000990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f9c0 	bl	800511e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f003 0310 	and.w	r3, r3, #16
 8004dae:	2b10      	cmp	r3, #16
 8004db0:	d122      	bne.n	8004df8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f003 0310 	and.w	r3, r3, #16
 8004dbc:	2b10      	cmp	r3, #16
 8004dbe:	d11b      	bne.n	8004df8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f06f 0210 	mvn.w	r2, #16
 8004dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2208      	movs	r2, #8
 8004dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f993 	bl	800510a <HAL_TIM_IC_CaptureCallback>
 8004de4:	e005      	b.n	8004df2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7fb fdd2 	bl	8000990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f996 	bl	800511e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d10e      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d107      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f06f 0201 	mvn.w	r2, #1
 8004e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f969 	bl	80050f6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2e:	2b80      	cmp	r3, #128	; 0x80
 8004e30:	d10e      	bne.n	8004e50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3c:	2b80      	cmp	r3, #128	; 0x80
 8004e3e:	d107      	bne.n	8004e50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fd12 	bl	8005874 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5a:	2b40      	cmp	r3, #64	; 0x40
 8004e5c:	d10e      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e68:	2b40      	cmp	r3, #64	; 0x40
 8004e6a:	d107      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f95b 	bl	8005132 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b20      	cmp	r3, #32
 8004e88:	d10e      	bne.n	8004ea8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	d107      	bne.n	8004ea8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f06f 0220 	mvn.w	r2, #32
 8004ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fcdc 	bl	8005860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ea8:	bf00      	nop
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_TIM_OC_ConfigChannel+0x1e>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e048      	b.n	8004f60 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b0c      	cmp	r3, #12
 8004eda:	d839      	bhi.n	8004f50 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004edc:	a201      	add	r2, pc, #4	; (adr r2, 8004ee4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee2:	bf00      	nop
 8004ee4:	08004f19 	.word	0x08004f19
 8004ee8:	08004f51 	.word	0x08004f51
 8004eec:	08004f51 	.word	0x08004f51
 8004ef0:	08004f51 	.word	0x08004f51
 8004ef4:	08004f27 	.word	0x08004f27
 8004ef8:	08004f51 	.word	0x08004f51
 8004efc:	08004f51 	.word	0x08004f51
 8004f00:	08004f51 	.word	0x08004f51
 8004f04:	08004f35 	.word	0x08004f35
 8004f08:	08004f51 	.word	0x08004f51
 8004f0c:	08004f51 	.word	0x08004f51
 8004f10:	08004f51 	.word	0x08004f51
 8004f14:	08004f43 	.word	0x08004f43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68b9      	ldr	r1, [r7, #8]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 f9b2 	bl	8005288 <TIM_OC1_SetConfig>
      break;
 8004f24:	e017      	b.n	8004f56 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68b9      	ldr	r1, [r7, #8]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 fa1b 	bl	8005368 <TIM_OC2_SetConfig>
      break;
 8004f32:	e010      	b.n	8004f56 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fa8a 	bl	8005454 <TIM_OC3_SetConfig>
      break;
 8004f40:	e009      	b.n	8004f56 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68b9      	ldr	r1, [r7, #8]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 faf7 	bl	800553c <TIM_OC4_SetConfig>
      break;
 8004f4e:	e002      	b.n	8004f56 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	75fb      	strb	r3, [r7, #23]
      break;
 8004f54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d101      	bne.n	8004f84 <HAL_TIM_ConfigClockSource+0x1c>
 8004f80:	2302      	movs	r3, #2
 8004f82:	e0b4      	b.n	80050ee <HAL_TIM_ConfigClockSource+0x186>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004faa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fbc:	d03e      	beq.n	800503c <HAL_TIM_ConfigClockSource+0xd4>
 8004fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc2:	f200 8087 	bhi.w	80050d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fca:	f000 8086 	beq.w	80050da <HAL_TIM_ConfigClockSource+0x172>
 8004fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd2:	d87f      	bhi.n	80050d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd4:	2b70      	cmp	r3, #112	; 0x70
 8004fd6:	d01a      	beq.n	800500e <HAL_TIM_ConfigClockSource+0xa6>
 8004fd8:	2b70      	cmp	r3, #112	; 0x70
 8004fda:	d87b      	bhi.n	80050d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fdc:	2b60      	cmp	r3, #96	; 0x60
 8004fde:	d050      	beq.n	8005082 <HAL_TIM_ConfigClockSource+0x11a>
 8004fe0:	2b60      	cmp	r3, #96	; 0x60
 8004fe2:	d877      	bhi.n	80050d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe4:	2b50      	cmp	r3, #80	; 0x50
 8004fe6:	d03c      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0xfa>
 8004fe8:	2b50      	cmp	r3, #80	; 0x50
 8004fea:	d873      	bhi.n	80050d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fec:	2b40      	cmp	r3, #64	; 0x40
 8004fee:	d058      	beq.n	80050a2 <HAL_TIM_ConfigClockSource+0x13a>
 8004ff0:	2b40      	cmp	r3, #64	; 0x40
 8004ff2:	d86f      	bhi.n	80050d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff4:	2b30      	cmp	r3, #48	; 0x30
 8004ff6:	d064      	beq.n	80050c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004ff8:	2b30      	cmp	r3, #48	; 0x30
 8004ffa:	d86b      	bhi.n	80050d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	d060      	beq.n	80050c2 <HAL_TIM_ConfigClockSource+0x15a>
 8005000:	2b20      	cmp	r3, #32
 8005002:	d867      	bhi.n	80050d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005004:	2b00      	cmp	r3, #0
 8005006:	d05c      	beq.n	80050c2 <HAL_TIM_ConfigClockSource+0x15a>
 8005008:	2b10      	cmp	r3, #16
 800500a:	d05a      	beq.n	80050c2 <HAL_TIM_ConfigClockSource+0x15a>
 800500c:	e062      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	6899      	ldr	r1, [r3, #8]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f000 fb5d 	bl	80056dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005030:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	609a      	str	r2, [r3, #8]
      break;
 800503a:	e04f      	b.n	80050dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6818      	ldr	r0, [r3, #0]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	6899      	ldr	r1, [r3, #8]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f000 fb46 	bl	80056dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689a      	ldr	r2, [r3, #8]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800505e:	609a      	str	r2, [r3, #8]
      break;
 8005060:	e03c      	b.n	80050dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6818      	ldr	r0, [r3, #0]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	6859      	ldr	r1, [r3, #4]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	461a      	mov	r2, r3
 8005070:	f000 faba 	bl	80055e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2150      	movs	r1, #80	; 0x50
 800507a:	4618      	mov	r0, r3
 800507c:	f000 fb13 	bl	80056a6 <TIM_ITRx_SetConfig>
      break;
 8005080:	e02c      	b.n	80050dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6818      	ldr	r0, [r3, #0]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	6859      	ldr	r1, [r3, #4]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	461a      	mov	r2, r3
 8005090:	f000 fad9 	bl	8005646 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2160      	movs	r1, #96	; 0x60
 800509a:	4618      	mov	r0, r3
 800509c:	f000 fb03 	bl	80056a6 <TIM_ITRx_SetConfig>
      break;
 80050a0:	e01c      	b.n	80050dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6818      	ldr	r0, [r3, #0]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	6859      	ldr	r1, [r3, #4]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	461a      	mov	r2, r3
 80050b0:	f000 fa9a 	bl	80055e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2140      	movs	r1, #64	; 0x40
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 faf3 	bl	80056a6 <TIM_ITRx_SetConfig>
      break;
 80050c0:	e00c      	b.n	80050dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4619      	mov	r1, r3
 80050cc:	4610      	mov	r0, r2
 80050ce:	f000 faea 	bl	80056a6 <TIM_ITRx_SetConfig>
      break;
 80050d2:	e003      	b.n	80050dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	73fb      	strb	r3, [r7, #15]
      break;
 80050d8:	e000      	b.n	80050dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005112:	bf00      	nop
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800513a:	bf00      	nop
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
	...

08005148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a40      	ldr	r2, [pc, #256]	; (800525c <TIM_Base_SetConfig+0x114>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d013      	beq.n	8005188 <TIM_Base_SetConfig+0x40>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005166:	d00f      	beq.n	8005188 <TIM_Base_SetConfig+0x40>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a3d      	ldr	r2, [pc, #244]	; (8005260 <TIM_Base_SetConfig+0x118>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00b      	beq.n	8005188 <TIM_Base_SetConfig+0x40>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a3c      	ldr	r2, [pc, #240]	; (8005264 <TIM_Base_SetConfig+0x11c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d007      	beq.n	8005188 <TIM_Base_SetConfig+0x40>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a3b      	ldr	r2, [pc, #236]	; (8005268 <TIM_Base_SetConfig+0x120>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d003      	beq.n	8005188 <TIM_Base_SetConfig+0x40>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a3a      	ldr	r2, [pc, #232]	; (800526c <TIM_Base_SetConfig+0x124>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d108      	bne.n	800519a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a2f      	ldr	r2, [pc, #188]	; (800525c <TIM_Base_SetConfig+0x114>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d02b      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a8:	d027      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a2c      	ldr	r2, [pc, #176]	; (8005260 <TIM_Base_SetConfig+0x118>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d023      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a2b      	ldr	r2, [pc, #172]	; (8005264 <TIM_Base_SetConfig+0x11c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d01f      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a2a      	ldr	r2, [pc, #168]	; (8005268 <TIM_Base_SetConfig+0x120>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d01b      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a29      	ldr	r2, [pc, #164]	; (800526c <TIM_Base_SetConfig+0x124>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d017      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a28      	ldr	r2, [pc, #160]	; (8005270 <TIM_Base_SetConfig+0x128>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d013      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a27      	ldr	r2, [pc, #156]	; (8005274 <TIM_Base_SetConfig+0x12c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00f      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a26      	ldr	r2, [pc, #152]	; (8005278 <TIM_Base_SetConfig+0x130>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00b      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a25      	ldr	r2, [pc, #148]	; (800527c <TIM_Base_SetConfig+0x134>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d007      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a24      	ldr	r2, [pc, #144]	; (8005280 <TIM_Base_SetConfig+0x138>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d003      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a23      	ldr	r2, [pc, #140]	; (8005284 <TIM_Base_SetConfig+0x13c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d108      	bne.n	800520c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4313      	orrs	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a0a      	ldr	r2, [pc, #40]	; (800525c <TIM_Base_SetConfig+0x114>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d003      	beq.n	8005240 <TIM_Base_SetConfig+0xf8>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a0c      	ldr	r2, [pc, #48]	; (800526c <TIM_Base_SetConfig+0x124>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d103      	bne.n	8005248 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	615a      	str	r2, [r3, #20]
}
 800524e:	bf00      	nop
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40010000 	.word	0x40010000
 8005260:	40000400 	.word	0x40000400
 8005264:	40000800 	.word	0x40000800
 8005268:	40000c00 	.word	0x40000c00
 800526c:	40010400 	.word	0x40010400
 8005270:	40014000 	.word	0x40014000
 8005274:	40014400 	.word	0x40014400
 8005278:	40014800 	.word	0x40014800
 800527c:	40001800 	.word	0x40001800
 8005280:	40001c00 	.word	0x40001c00
 8005284:	40002000 	.word	0x40002000

08005288 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	f023 0201 	bic.w	r2, r3, #1
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0303 	bic.w	r3, r3, #3
 80052be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f023 0302 	bic.w	r3, r3, #2
 80052d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a20      	ldr	r2, [pc, #128]	; (8005360 <TIM_OC1_SetConfig+0xd8>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d003      	beq.n	80052ec <TIM_OC1_SetConfig+0x64>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a1f      	ldr	r2, [pc, #124]	; (8005364 <TIM_OC1_SetConfig+0xdc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d10c      	bne.n	8005306 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f023 0308 	bic.w	r3, r3, #8
 80052f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f023 0304 	bic.w	r3, r3, #4
 8005304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a15      	ldr	r2, [pc, #84]	; (8005360 <TIM_OC1_SetConfig+0xd8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d003      	beq.n	8005316 <TIM_OC1_SetConfig+0x8e>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a14      	ldr	r2, [pc, #80]	; (8005364 <TIM_OC1_SetConfig+0xdc>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d111      	bne.n	800533a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800531c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4313      	orrs	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	621a      	str	r2, [r3, #32]
}
 8005354:	bf00      	nop
 8005356:	371c      	adds	r7, #28
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	40010000 	.word	0x40010000
 8005364:	40010400 	.word	0x40010400

08005368 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	f023 0210 	bic.w	r2, r3, #16
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f023 0320 	bic.w	r3, r3, #32
 80053b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	4313      	orrs	r3, r2
 80053be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a22      	ldr	r2, [pc, #136]	; (800544c <TIM_OC2_SetConfig+0xe4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d003      	beq.n	80053d0 <TIM_OC2_SetConfig+0x68>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a21      	ldr	r2, [pc, #132]	; (8005450 <TIM_OC2_SetConfig+0xe8>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d10d      	bne.n	80053ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	011b      	lsls	r3, r3, #4
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a17      	ldr	r2, [pc, #92]	; (800544c <TIM_OC2_SetConfig+0xe4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d003      	beq.n	80053fc <TIM_OC2_SetConfig+0x94>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a16      	ldr	r2, [pc, #88]	; (8005450 <TIM_OC2_SetConfig+0xe8>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d113      	bne.n	8005424 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005402:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800540a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	4313      	orrs	r3, r2
 8005416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	4313      	orrs	r3, r2
 8005422:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	621a      	str	r2, [r3, #32]
}
 800543e:	bf00      	nop
 8005440:	371c      	adds	r7, #28
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40010000 	.word	0x40010000
 8005450:	40010400 	.word	0x40010400

08005454 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0303 	bic.w	r3, r3, #3
 800548a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800549c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	021b      	lsls	r3, r3, #8
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a21      	ldr	r2, [pc, #132]	; (8005534 <TIM_OC3_SetConfig+0xe0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d003      	beq.n	80054ba <TIM_OC3_SetConfig+0x66>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a20      	ldr	r2, [pc, #128]	; (8005538 <TIM_OC3_SetConfig+0xe4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d10d      	bne.n	80054d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	021b      	lsls	r3, r3, #8
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a16      	ldr	r2, [pc, #88]	; (8005534 <TIM_OC3_SetConfig+0xe0>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d003      	beq.n	80054e6 <TIM_OC3_SetConfig+0x92>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a15      	ldr	r2, [pc, #84]	; (8005538 <TIM_OC3_SetConfig+0xe4>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d113      	bne.n	800550e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4313      	orrs	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	621a      	str	r2, [r3, #32]
}
 8005528:	bf00      	nop
 800552a:	371c      	adds	r7, #28
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	40010000 	.word	0x40010000
 8005538:	40010400 	.word	0x40010400

0800553c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	021b      	lsls	r3, r3, #8
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	031b      	lsls	r3, r3, #12
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a12      	ldr	r2, [pc, #72]	; (80055e0 <TIM_OC4_SetConfig+0xa4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d003      	beq.n	80055a4 <TIM_OC4_SetConfig+0x68>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a11      	ldr	r2, [pc, #68]	; (80055e4 <TIM_OC4_SetConfig+0xa8>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d109      	bne.n	80055b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	019b      	lsls	r3, r3, #6
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	621a      	str	r2, [r3, #32]
}
 80055d2:	bf00      	nop
 80055d4:	371c      	adds	r7, #28
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	40010000 	.word	0x40010000
 80055e4:	40010400 	.word	0x40010400

080055e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	f023 0201 	bic.w	r2, r3, #1
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	4313      	orrs	r3, r2
 800561c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f023 030a 	bic.w	r3, r3, #10
 8005624:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4313      	orrs	r3, r2
 800562c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	621a      	str	r2, [r3, #32]
}
 800563a:	bf00      	nop
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005646:	b480      	push	{r7}
 8005648:	b087      	sub	sp, #28
 800564a:	af00      	add	r7, sp, #0
 800564c:	60f8      	str	r0, [r7, #12]
 800564e:	60b9      	str	r1, [r7, #8]
 8005650:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f023 0210 	bic.w	r2, r3, #16
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005670:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	031b      	lsls	r3, r3, #12
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005682:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	011b      	lsls	r3, r3, #4
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	621a      	str	r2, [r3, #32]
}
 800569a:	bf00      	nop
 800569c:	371c      	adds	r7, #28
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b085      	sub	sp, #20
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f043 0307 	orr.w	r3, r3, #7
 80056c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	609a      	str	r2, [r3, #8]
}
 80056d0:	bf00      	nop
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	021a      	lsls	r2, r3, #8
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	431a      	orrs	r2, r3
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	4313      	orrs	r3, r2
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	4313      	orrs	r3, r2
 8005708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	609a      	str	r2, [r3, #8]
}
 8005710:	bf00      	nop
 8005712:	371c      	adds	r7, #28
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f003 031f 	and.w	r3, r3, #31
 800572e:	2201      	movs	r2, #1
 8005730:	fa02 f303 	lsl.w	r3, r2, r3
 8005734:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6a1a      	ldr	r2, [r3, #32]
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	43db      	mvns	r3, r3
 800573e:	401a      	ands	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6a1a      	ldr	r2, [r3, #32]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	f003 031f 	and.w	r3, r3, #31
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	fa01 f303 	lsl.w	r3, r1, r3
 8005754:	431a      	orrs	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	621a      	str	r2, [r3, #32]
}
 800575a:	bf00      	nop
 800575c:	371c      	adds	r7, #28
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
	...

08005768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800577c:	2302      	movs	r3, #2
 800577e:	e05a      	b.n	8005836 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a21      	ldr	r2, [pc, #132]	; (8005844 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d022      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057cc:	d01d      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1d      	ldr	r2, [pc, #116]	; (8005848 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d018      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a1b      	ldr	r2, [pc, #108]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d013      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a1a      	ldr	r2, [pc, #104]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00e      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a18      	ldr	r2, [pc, #96]	; (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d009      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a17      	ldr	r2, [pc, #92]	; (8005858 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d004      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a15      	ldr	r2, [pc, #84]	; (800585c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d10c      	bne.n	8005824 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	4313      	orrs	r3, r2
 800581a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	40010000 	.word	0x40010000
 8005848:	40000400 	.word	0x40000400
 800584c:	40000800 	.word	0x40000800
 8005850:	40000c00 	.word	0x40000c00
 8005854:	40010400 	.word	0x40010400
 8005858:	40014000 	.word	0x40014000
 800585c:	40001800 	.word	0x40001800

08005860 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e03f      	b.n	800591a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d106      	bne.n	80058b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fc fdb6 	bl	8002420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2224      	movs	r2, #36	; 0x24
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 ff3d 	bl	800674c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	691a      	ldr	r2, [r3, #16]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	695a      	ldr	r2, [r3, #20]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68da      	ldr	r2, [r3, #12]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005900:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2220      	movs	r2, #32
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b082      	sub	sp, #8
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e047      	b.n	80059c4 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d106      	bne.n	800594e <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7fc fd69 	bl	8002420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2224      	movs	r2, #36	; 0x24
 8005952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68da      	ldr	r2, [r3, #12]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005964:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fef0 	bl	800674c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691a      	ldr	r2, [r3, #16]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800597a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695a      	ldr	r2, [r3, #20]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800598a:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695a      	ldr	r2, [r3, #20]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0208 	orr.w	r2, r2, #8
 800599a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059aa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2220      	movs	r2, #32
 80059be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08a      	sub	sp, #40	; 0x28
 80059d0:	af02      	add	r7, sp, #8
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	603b      	str	r3, [r7, #0]
 80059d8:	4613      	mov	r3, r2
 80059da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	d17c      	bne.n	8005ae6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <HAL_UART_Transmit+0x2c>
 80059f2:	88fb      	ldrh	r3, [r7, #6]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e075      	b.n	8005ae8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d101      	bne.n	8005a0a <HAL_UART_Transmit+0x3e>
 8005a06:	2302      	movs	r3, #2
 8005a08:	e06e      	b.n	8005ae8 <HAL_UART_Transmit+0x11c>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2221      	movs	r2, #33	; 0x21
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a20:	f7fc ff10 	bl	8002844 <HAL_GetTick>
 8005a24:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	88fa      	ldrh	r2, [r7, #6]
 8005a2a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	88fa      	ldrh	r2, [r7, #6]
 8005a30:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a3a:	d108      	bne.n	8005a4e <HAL_UART_Transmit+0x82>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d104      	bne.n	8005a4e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a44:	2300      	movs	r3, #0
 8005a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	61bb      	str	r3, [r7, #24]
 8005a4c:	e003      	b.n	8005a56 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a52:	2300      	movs	r3, #0
 8005a54:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005a5e:	e02a      	b.n	8005ab6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	2200      	movs	r2, #0
 8005a68:	2180      	movs	r1, #128	; 0x80
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 fc28 	bl	80062c0 <UART_WaitOnFlagUntilTimeout>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e036      	b.n	8005ae8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10b      	bne.n	8005a98 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	461a      	mov	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a8e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	3302      	adds	r3, #2
 8005a94:	61bb      	str	r3, [r7, #24]
 8005a96:	e007      	b.n	8005aa8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	781a      	ldrb	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1cf      	bne.n	8005a60 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	2140      	movs	r1, #64	; 0x40
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 fbf8 	bl	80062c0 <UART_WaitOnFlagUntilTimeout>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e006      	b.n	8005ae8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e000      	b.n	8005ae8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ae6:	2302      	movs	r3, #2
  }
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3720      	adds	r7, #32
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08a      	sub	sp, #40	; 0x28
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	603b      	str	r3, [r7, #0]
 8005afc:	4613      	mov	r3, r2
 8005afe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	f040 808c 	bne.w	8005c2a <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <HAL_UART_Receive+0x2e>
 8005b18:	88fb      	ldrh	r3, [r7, #6]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e084      	b.n	8005c2c <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d101      	bne.n	8005b30 <HAL_UART_Receive+0x40>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e07d      	b.n	8005c2c <HAL_UART_Receive+0x13c>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2222      	movs	r2, #34	; 0x22
 8005b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b4c:	f7fc fe7a 	bl	8002844 <HAL_GetTick>
 8005b50:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	88fa      	ldrh	r2, [r7, #6]
 8005b56:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	88fa      	ldrh	r2, [r7, #6]
 8005b5c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b66:	d108      	bne.n	8005b7a <HAL_UART_Receive+0x8a>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d104      	bne.n	8005b7a <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005b70:	2300      	movs	r3, #0
 8005b72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	61bb      	str	r3, [r7, #24]
 8005b78:	e003      	b.n	8005b82 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005b8a:	e043      	b.n	8005c14 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	2200      	movs	r2, #0
 8005b94:	2120      	movs	r1, #32
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 fb92 	bl	80062c0 <UART_WaitOnFlagUntilTimeout>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e042      	b.n	8005c2c <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10c      	bne.n	8005bc6 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	3302      	adds	r3, #2
 8005bc2:	61bb      	str	r3, [r7, #24]
 8005bc4:	e01f      	b.n	8005c06 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bce:	d007      	beq.n	8005be0 <HAL_UART_Receive+0xf0>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10a      	bne.n	8005bee <HAL_UART_Receive+0xfe>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d106      	bne.n	8005bee <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	701a      	strb	r2, [r3, #0]
 8005bec:	e008      	b.n	8005c00 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	3301      	adds	r3, #1
 8005c04:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1b6      	bne.n	8005b8c <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2220      	movs	r2, #32
 8005c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e000      	b.n	8005c2c <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005c2a:	2302      	movs	r3, #2
  }
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3720      	adds	r7, #32
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b20      	cmp	r3, #32
 8005c4c:	d11d      	bne.n	8005c8a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <HAL_UART_Receive_IT+0x26>
 8005c54:	88fb      	ldrh	r3, [r7, #6]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e016      	b.n	8005c8c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_UART_Receive_IT+0x38>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e00f      	b.n	8005c8c <HAL_UART_Receive_IT+0x58>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c7a:	88fb      	ldrh	r3, [r7, #6]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	68b9      	ldr	r1, [r7, #8]
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 fb8b 	bl	800639c <UART_Start_Receive_IT>
 8005c86:	4603      	mov	r3, r0
 8005c88:	e000      	b.n	8005c8c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005c8a:	2302      	movs	r3, #2
  }
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b0ba      	sub	sp, #232	; 0xe8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cca:	f003 030f 	and.w	r3, r3, #15
 8005cce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005cd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10f      	bne.n	8005cfa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d009      	beq.n	8005cfa <HAL_UART_IRQHandler+0x66>
 8005ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fc6f 	bl	80065d6 <UART_Receive_IT>
      return;
 8005cf8:	e256      	b.n	80061a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005cfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 80de 	beq.w	8005ec0 <HAL_UART_IRQHandler+0x22c>
 8005d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d106      	bne.n	8005d1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 80d1 	beq.w	8005ec0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00b      	beq.n	8005d42 <HAL_UART_IRQHandler+0xae>
 8005d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d005      	beq.n	8005d42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	f043 0201 	orr.w	r2, r3, #1
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d46:	f003 0304 	and.w	r3, r3, #4
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00b      	beq.n	8005d66 <HAL_UART_IRQHandler+0xd2>
 8005d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d005      	beq.n	8005d66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	f043 0202 	orr.w	r2, r3, #2
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00b      	beq.n	8005d8a <HAL_UART_IRQHandler+0xf6>
 8005d72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d005      	beq.n	8005d8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	f043 0204 	orr.w	r2, r3, #4
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8e:	f003 0308 	and.w	r3, r3, #8
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d011      	beq.n	8005dba <HAL_UART_IRQHandler+0x126>
 8005d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d105      	bne.n	8005dae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d005      	beq.n	8005dba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	f043 0208 	orr.w	r2, r3, #8
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 81ed 	beq.w	800619e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc8:	f003 0320 	and.w	r3, r3, #32
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d008      	beq.n	8005de2 <HAL_UART_IRQHandler+0x14e>
 8005dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fbfa 	bl	80065d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dec:	2b40      	cmp	r3, #64	; 0x40
 8005dee:	bf0c      	ite	eq
 8005df0:	2301      	moveq	r3, #1
 8005df2:	2300      	movne	r3, #0
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	f003 0308 	and.w	r3, r3, #8
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d103      	bne.n	8005e0e <HAL_UART_IRQHandler+0x17a>
 8005e06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d04f      	beq.n	8005eae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fb02 	bl	8006418 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1e:	2b40      	cmp	r3, #64	; 0x40
 8005e20:	d141      	bne.n	8005ea6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	3314      	adds	r3, #20
 8005e28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e30:	e853 3f00 	ldrex	r3, [r3]
 8005e34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3314      	adds	r3, #20
 8005e4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e5e:	e841 2300 	strex	r3, r2, [r1]
 8005e62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1d9      	bne.n	8005e22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d013      	beq.n	8005e9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7a:	4a7d      	ldr	r2, [pc, #500]	; (8006070 <HAL_UART_IRQHandler+0x3dc>)
 8005e7c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fd fd65 	bl	8003952 <HAL_DMA_Abort_IT>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d016      	beq.n	8005ebc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e98:	4610      	mov	r0, r2
 8005e9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e9c:	e00e      	b.n	8005ebc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f990 	bl	80061c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea4:	e00a      	b.n	8005ebc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f98c 	bl	80061c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eac:	e006      	b.n	8005ebc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f988 	bl	80061c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005eba:	e170      	b.n	800619e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ebc:	bf00      	nop
    return;
 8005ebe:	e16e      	b.n	800619e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	f040 814a 	bne.w	800615e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ece:	f003 0310 	and.w	r3, r3, #16
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 8143 	beq.w	800615e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005edc:	f003 0310 	and.w	r3, r3, #16
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 813c 	beq.w	800615e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60bb      	str	r3, [r7, #8]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	60bb      	str	r3, [r7, #8]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	60bb      	str	r3, [r7, #8]
 8005efa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f06:	2b40      	cmp	r3, #64	; 0x40
 8005f08:	f040 80b4 	bne.w	8006074 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 8140 	beq.w	80061a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	f080 8139 	bcs.w	80061a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f36:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f42:	f000 8088 	beq.w	8006056 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	330c      	adds	r3, #12
 8005f4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f54:	e853 3f00 	ldrex	r3, [r3]
 8005f58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	330c      	adds	r3, #12
 8005f6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005f72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1d9      	bne.n	8005f46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	3314      	adds	r3, #20
 8005f98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005fa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fa4:	f023 0301 	bic.w	r3, r3, #1
 8005fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3314      	adds	r3, #20
 8005fb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005fb6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005fba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005fbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005fc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e1      	bne.n	8005f92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	3314      	adds	r3, #20
 8005fd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fd8:	e853 3f00 	ldrex	r3, [r3]
 8005fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3314      	adds	r3, #20
 8005fee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ff2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ff4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ff8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e3      	bne.n	8005fce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2220      	movs	r2, #32
 800600a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	330c      	adds	r3, #12
 800601a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006026:	f023 0310 	bic.w	r3, r3, #16
 800602a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	330c      	adds	r3, #12
 8006034:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006038:	65ba      	str	r2, [r7, #88]	; 0x58
 800603a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800603e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006040:	e841 2300 	strex	r3, r2, [r1]
 8006044:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e3      	bne.n	8006014 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006050:	4618      	mov	r0, r3
 8006052:	f7fd fc0e 	bl	8003872 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800605e:	b29b      	uxth	r3, r3
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	b29b      	uxth	r3, r3
 8006064:	4619      	mov	r1, r3
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f8b6 	bl	80061d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800606c:	e099      	b.n	80061a2 <HAL_UART_IRQHandler+0x50e>
 800606e:	bf00      	nop
 8006070:	080064df 	.word	0x080064df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800607c:	b29b      	uxth	r3, r3
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006088:	b29b      	uxth	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 808b 	beq.w	80061a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006090:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 8086 	beq.w	80061a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	330c      	adds	r3, #12
 80060a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a4:	e853 3f00 	ldrex	r3, [r3]
 80060a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	330c      	adds	r3, #12
 80060ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80060be:	647a      	str	r2, [r7, #68]	; 0x44
 80060c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1e3      	bne.n	800609a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3314      	adds	r3, #20
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	e853 3f00 	ldrex	r3, [r3]
 80060e0:	623b      	str	r3, [r7, #32]
   return(result);
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	f023 0301 	bic.w	r3, r3, #1
 80060e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3314      	adds	r3, #20
 80060f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80060f6:	633a      	str	r2, [r7, #48]	; 0x30
 80060f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060fe:	e841 2300 	strex	r3, r2, [r1]
 8006102:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1e3      	bne.n	80060d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2220      	movs	r2, #32
 800610e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	330c      	adds	r3, #12
 800611e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	e853 3f00 	ldrex	r3, [r3]
 8006126:	60fb      	str	r3, [r7, #12]
   return(result);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 0310 	bic.w	r3, r3, #16
 800612e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	330c      	adds	r3, #12
 8006138:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800613c:	61fa      	str	r2, [r7, #28]
 800613e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006140:	69b9      	ldr	r1, [r7, #24]
 8006142:	69fa      	ldr	r2, [r7, #28]
 8006144:	e841 2300 	strex	r3, r2, [r1]
 8006148:	617b      	str	r3, [r7, #20]
   return(result);
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e3      	bne.n	8006118 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006150:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006154:	4619      	mov	r1, r3
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f83e 	bl	80061d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800615c:	e023      	b.n	80061a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800615e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006166:	2b00      	cmp	r3, #0
 8006168:	d009      	beq.n	800617e <HAL_UART_IRQHandler+0x4ea>
 800616a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800616e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f9c5 	bl	8006506 <UART_Transmit_IT>
    return;
 800617c:	e014      	b.n	80061a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800617e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00e      	beq.n	80061a8 <HAL_UART_IRQHandler+0x514>
 800618a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800618e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006192:	2b00      	cmp	r3, #0
 8006194:	d008      	beq.n	80061a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fa05 	bl	80065a6 <UART_EndTransmit_IT>
    return;
 800619c:	e004      	b.n	80061a8 <HAL_UART_IRQHandler+0x514>
    return;
 800619e:	bf00      	nop
 80061a0:	e002      	b.n	80061a8 <HAL_UART_IRQHandler+0x514>
      return;
 80061a2:	bf00      	nop
 80061a4:	e000      	b.n	80061a8 <HAL_UART_IRQHandler+0x514>
      return;
 80061a6:	bf00      	nop
  }
}
 80061a8:	37e8      	adds	r7, #232	; 0xe8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop

080061b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006202:	2b01      	cmp	r3, #1
 8006204:	d101      	bne.n	800620a <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8006206:	2302      	movs	r3, #2
 8006208:	e020      	b.n	800624c <HAL_HalfDuplex_EnableTransmitter+0x5c>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2224      	movs	r2, #36	; 0x24
 8006216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f023 030c 	bic.w	r3, r3, #12
 8006228:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f043 0308 	orr.w	r3, r3, #8
 8006230:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2220      	movs	r2, #32
 800623e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8006260:	2300      	movs	r3, #0
 8006262:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800626a:	2b01      	cmp	r3, #1
 800626c:	d101      	bne.n	8006272 <HAL_HalfDuplex_EnableReceiver+0x1a>
 800626e:	2302      	movs	r3, #2
 8006270:	e020      	b.n	80062b4 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2224      	movs	r2, #36	; 0x24
 800627e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f023 030c 	bic.w	r3, r3, #12
 8006290:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f043 0304 	orr.w	r3, r3, #4
 8006298:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2220      	movs	r2, #32
 80062a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b090      	sub	sp, #64	; 0x40
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	603b      	str	r3, [r7, #0]
 80062cc:	4613      	mov	r3, r2
 80062ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062d0:	e050      	b.n	8006374 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062d8:	d04c      	beq.n	8006374 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80062da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d007      	beq.n	80062f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80062e0:	f7fc fab0 	bl	8002844 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d241      	bcs.n	8006374 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	330c      	adds	r3, #12
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fa:	e853 3f00 	ldrex	r3, [r3]
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	330c      	adds	r3, #12
 800630e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006310:	637a      	str	r2, [r7, #52]	; 0x34
 8006312:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006314:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006318:	e841 2300 	strex	r3, r2, [r1]
 800631c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800631e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e5      	bne.n	80062f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3314      	adds	r3, #20
 800632a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	e853 3f00 	ldrex	r3, [r3]
 8006332:	613b      	str	r3, [r7, #16]
   return(result);
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f023 0301 	bic.w	r3, r3, #1
 800633a:	63bb      	str	r3, [r7, #56]	; 0x38
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3314      	adds	r3, #20
 8006342:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006344:	623a      	str	r2, [r7, #32]
 8006346:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006348:	69f9      	ldr	r1, [r7, #28]
 800634a:	6a3a      	ldr	r2, [r7, #32]
 800634c:	e841 2300 	strex	r3, r2, [r1]
 8006350:	61bb      	str	r3, [r7, #24]
   return(result);
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e5      	bne.n	8006324 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2220      	movs	r2, #32
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2220      	movs	r2, #32
 8006364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e00f      	b.n	8006394 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	4013      	ands	r3, r2
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	429a      	cmp	r2, r3
 8006382:	bf0c      	ite	eq
 8006384:	2301      	moveq	r3, #1
 8006386:	2300      	movne	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	461a      	mov	r2, r3
 800638c:	79fb      	ldrb	r3, [r7, #7]
 800638e:	429a      	cmp	r2, r3
 8006390:	d09f      	beq.n	80062d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3740      	adds	r7, #64	; 0x40
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	4613      	mov	r3, r2
 80063a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	88fa      	ldrh	r2, [r7, #6]
 80063b4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	88fa      	ldrh	r2, [r7, #6]
 80063ba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2222      	movs	r2, #34	; 0x22
 80063c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d007      	beq.n	80063ea <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063e8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	695a      	ldr	r2, [r3, #20]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f042 0201 	orr.w	r2, r2, #1
 80063f8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f042 0220 	orr.w	r2, r2, #32
 8006408:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006418:	b480      	push	{r7}
 800641a:	b095      	sub	sp, #84	; 0x54
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	330c      	adds	r3, #12
 8006426:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642a:	e853 3f00 	ldrex	r3, [r3]
 800642e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006432:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	330c      	adds	r3, #12
 800643e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006440:	643a      	str	r2, [r7, #64]	; 0x40
 8006442:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006444:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006446:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006448:	e841 2300 	strex	r3, r2, [r1]
 800644c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800644e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e5      	bne.n	8006420 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3314      	adds	r3, #20
 800645a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645c:	6a3b      	ldr	r3, [r7, #32]
 800645e:	e853 3f00 	ldrex	r3, [r3]
 8006462:	61fb      	str	r3, [r7, #28]
   return(result);
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	f023 0301 	bic.w	r3, r3, #1
 800646a:	64bb      	str	r3, [r7, #72]	; 0x48
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3314      	adds	r3, #20
 8006472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006474:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006476:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800647a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800647c:	e841 2300 	strex	r3, r2, [r1]
 8006480:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1e5      	bne.n	8006454 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648c:	2b01      	cmp	r3, #1
 800648e:	d119      	bne.n	80064c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	330c      	adds	r3, #12
 8006496:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	e853 3f00 	ldrex	r3, [r3]
 800649e:	60bb      	str	r3, [r7, #8]
   return(result);
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f023 0310 	bic.w	r3, r3, #16
 80064a6:	647b      	str	r3, [r7, #68]	; 0x44
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	330c      	adds	r3, #12
 80064ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064b0:	61ba      	str	r2, [r7, #24]
 80064b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b4:	6979      	ldr	r1, [r7, #20]
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	e841 2300 	strex	r3, r2, [r1]
 80064bc:	613b      	str	r3, [r7, #16]
   return(result);
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1e5      	bne.n	8006490 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80064d2:	bf00      	nop
 80064d4:	3754      	adds	r7, #84	; 0x54
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b084      	sub	sp, #16
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f7ff fe63 	bl	80061c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064fe:	bf00      	nop
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006506:	b480      	push	{r7}
 8006508:	b085      	sub	sp, #20
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b21      	cmp	r3, #33	; 0x21
 8006518:	d13e      	bne.n	8006598 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006522:	d114      	bne.n	800654e <UART_Transmit_IT+0x48>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d110      	bne.n	800654e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	461a      	mov	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006540:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	1c9a      	adds	r2, r3, #2
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	621a      	str	r2, [r3, #32]
 800654c:	e008      	b.n	8006560 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	1c59      	adds	r1, r3, #1
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	6211      	str	r1, [r2, #32]
 8006558:	781a      	ldrb	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006564:	b29b      	uxth	r3, r3
 8006566:	3b01      	subs	r3, #1
 8006568:	b29b      	uxth	r3, r3
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	4619      	mov	r1, r3
 800656e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10f      	bne.n	8006594 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68da      	ldr	r2, [r3, #12]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006582:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68da      	ldr	r2, [r3, #12]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006592:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006594:	2300      	movs	r3, #0
 8006596:	e000      	b.n	800659a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006598:	2302      	movs	r3, #2
  }
}
 800659a:	4618      	mov	r0, r3
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68da      	ldr	r2, [r3, #12]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7ff fdf2 	bl	80061b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b08c      	sub	sp, #48	; 0x30
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b22      	cmp	r3, #34	; 0x22
 80065e8:	f040 80ab 	bne.w	8006742 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f4:	d117      	bne.n	8006626 <UART_Receive_IT+0x50>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d113      	bne.n	8006626 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006606:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	b29b      	uxth	r3, r3
 8006610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006614:	b29a      	uxth	r2, r3
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661e:	1c9a      	adds	r2, r3, #2
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	629a      	str	r2, [r3, #40]	; 0x28
 8006624:	e026      	b.n	8006674 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800662c:	2300      	movs	r3, #0
 800662e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006638:	d007      	beq.n	800664a <UART_Receive_IT+0x74>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10a      	bne.n	8006658 <UART_Receive_IT+0x82>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d106      	bne.n	8006658 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	b2da      	uxtb	r2, r3
 8006652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006654:	701a      	strb	r2, [r3, #0]
 8006656:	e008      	b.n	800666a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	b2db      	uxtb	r3, r3
 8006660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006664:	b2da      	uxtb	r2, r3
 8006666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006668:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666e:	1c5a      	adds	r2, r3, #1
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006678:	b29b      	uxth	r3, r3
 800667a:	3b01      	subs	r3, #1
 800667c:	b29b      	uxth	r3, r3
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	4619      	mov	r1, r3
 8006682:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006684:	2b00      	cmp	r3, #0
 8006686:	d15a      	bne.n	800673e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68da      	ldr	r2, [r3, #12]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f022 0220 	bic.w	r2, r2, #32
 8006696:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695a      	ldr	r2, [r3, #20]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 0201 	bic.w	r2, r2, #1
 80066b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2220      	movs	r2, #32
 80066bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d135      	bne.n	8006734 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	330c      	adds	r3, #12
 80066d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	613b      	str	r3, [r7, #16]
   return(result);
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f023 0310 	bic.w	r3, r3, #16
 80066e4:	627b      	str	r3, [r7, #36]	; 0x24
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	330c      	adds	r3, #12
 80066ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ee:	623a      	str	r2, [r7, #32]
 80066f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f2:	69f9      	ldr	r1, [r7, #28]
 80066f4:	6a3a      	ldr	r2, [r7, #32]
 80066f6:	e841 2300 	strex	r3, r2, [r1]
 80066fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1e5      	bne.n	80066ce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0310 	and.w	r3, r3, #16
 800670c:	2b10      	cmp	r3, #16
 800670e:	d10a      	bne.n	8006726 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006710:	2300      	movs	r3, #0
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff fd53 	bl	80061d8 <HAL_UARTEx_RxEventCallback>
 8006732:	e002      	b.n	800673a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7fb fd69 	bl	800220c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800673a:	2300      	movs	r3, #0
 800673c:	e002      	b.n	8006744 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	e000      	b.n	8006744 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006742:	2302      	movs	r3, #2
  }
}
 8006744:	4618      	mov	r0, r3
 8006746:	3730      	adds	r7, #48	; 0x30
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800674c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006750:	b0c0      	sub	sp, #256	; 0x100
 8006752:	af00      	add	r7, sp, #0
 8006754:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006768:	68d9      	ldr	r1, [r3, #12]
 800676a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	ea40 0301 	orr.w	r3, r0, r1
 8006774:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	431a      	orrs	r2, r3
 8006784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	431a      	orrs	r2, r3
 800678c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	4313      	orrs	r3, r2
 8006794:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80067a4:	f021 010c 	bic.w	r1, r1, #12
 80067a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067b2:	430b      	orrs	r3, r1
 80067b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80067c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c6:	6999      	ldr	r1, [r3, #24]
 80067c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	ea40 0301 	orr.w	r3, r0, r1
 80067d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	4b8f      	ldr	r3, [pc, #572]	; (8006a18 <UART_SetConfig+0x2cc>)
 80067dc:	429a      	cmp	r2, r3
 80067de:	d005      	beq.n	80067ec <UART_SetConfig+0xa0>
 80067e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	4b8d      	ldr	r3, [pc, #564]	; (8006a1c <UART_SetConfig+0x2d0>)
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d104      	bne.n	80067f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80067ec:	f7fd fbb8 	bl	8003f60 <HAL_RCC_GetPCLK2Freq>
 80067f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80067f4:	e003      	b.n	80067fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80067f6:	f7fd fb9f 	bl	8003f38 <HAL_RCC_GetPCLK1Freq>
 80067fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006808:	f040 810c 	bne.w	8006a24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800680c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006810:	2200      	movs	r2, #0
 8006812:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006816:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800681a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800681e:	4622      	mov	r2, r4
 8006820:	462b      	mov	r3, r5
 8006822:	1891      	adds	r1, r2, r2
 8006824:	65b9      	str	r1, [r7, #88]	; 0x58
 8006826:	415b      	adcs	r3, r3
 8006828:	65fb      	str	r3, [r7, #92]	; 0x5c
 800682a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800682e:	4621      	mov	r1, r4
 8006830:	eb12 0801 	adds.w	r8, r2, r1
 8006834:	4629      	mov	r1, r5
 8006836:	eb43 0901 	adc.w	r9, r3, r1
 800683a:	f04f 0200 	mov.w	r2, #0
 800683e:	f04f 0300 	mov.w	r3, #0
 8006842:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006846:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800684a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800684e:	4690      	mov	r8, r2
 8006850:	4699      	mov	r9, r3
 8006852:	4623      	mov	r3, r4
 8006854:	eb18 0303 	adds.w	r3, r8, r3
 8006858:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800685c:	462b      	mov	r3, r5
 800685e:	eb49 0303 	adc.w	r3, r9, r3
 8006862:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006872:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006876:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800687a:	460b      	mov	r3, r1
 800687c:	18db      	adds	r3, r3, r3
 800687e:	653b      	str	r3, [r7, #80]	; 0x50
 8006880:	4613      	mov	r3, r2
 8006882:	eb42 0303 	adc.w	r3, r2, r3
 8006886:	657b      	str	r3, [r7, #84]	; 0x54
 8006888:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800688c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006890:	f7f9 fd0e 	bl	80002b0 <__aeabi_uldivmod>
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	4b61      	ldr	r3, [pc, #388]	; (8006a20 <UART_SetConfig+0x2d4>)
 800689a:	fba3 2302 	umull	r2, r3, r3, r2
 800689e:	095b      	lsrs	r3, r3, #5
 80068a0:	011c      	lsls	r4, r3, #4
 80068a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80068b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80068b4:	4642      	mov	r2, r8
 80068b6:	464b      	mov	r3, r9
 80068b8:	1891      	adds	r1, r2, r2
 80068ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80068bc:	415b      	adcs	r3, r3
 80068be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80068c4:	4641      	mov	r1, r8
 80068c6:	eb12 0a01 	adds.w	sl, r2, r1
 80068ca:	4649      	mov	r1, r9
 80068cc:	eb43 0b01 	adc.w	fp, r3, r1
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	f04f 0300 	mov.w	r3, #0
 80068d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80068dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80068e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068e4:	4692      	mov	sl, r2
 80068e6:	469b      	mov	fp, r3
 80068e8:	4643      	mov	r3, r8
 80068ea:	eb1a 0303 	adds.w	r3, sl, r3
 80068ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068f2:	464b      	mov	r3, r9
 80068f4:	eb4b 0303 	adc.w	r3, fp, r3
 80068f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006908:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800690c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006910:	460b      	mov	r3, r1
 8006912:	18db      	adds	r3, r3, r3
 8006914:	643b      	str	r3, [r7, #64]	; 0x40
 8006916:	4613      	mov	r3, r2
 8006918:	eb42 0303 	adc.w	r3, r2, r3
 800691c:	647b      	str	r3, [r7, #68]	; 0x44
 800691e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006922:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006926:	f7f9 fcc3 	bl	80002b0 <__aeabi_uldivmod>
 800692a:	4602      	mov	r2, r0
 800692c:	460b      	mov	r3, r1
 800692e:	4611      	mov	r1, r2
 8006930:	4b3b      	ldr	r3, [pc, #236]	; (8006a20 <UART_SetConfig+0x2d4>)
 8006932:	fba3 2301 	umull	r2, r3, r3, r1
 8006936:	095b      	lsrs	r3, r3, #5
 8006938:	2264      	movs	r2, #100	; 0x64
 800693a:	fb02 f303 	mul.w	r3, r2, r3
 800693e:	1acb      	subs	r3, r1, r3
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006946:	4b36      	ldr	r3, [pc, #216]	; (8006a20 <UART_SetConfig+0x2d4>)
 8006948:	fba3 2302 	umull	r2, r3, r3, r2
 800694c:	095b      	lsrs	r3, r3, #5
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006954:	441c      	add	r4, r3
 8006956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800695a:	2200      	movs	r2, #0
 800695c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006960:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006964:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006968:	4642      	mov	r2, r8
 800696a:	464b      	mov	r3, r9
 800696c:	1891      	adds	r1, r2, r2
 800696e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006970:	415b      	adcs	r3, r3
 8006972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006974:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006978:	4641      	mov	r1, r8
 800697a:	1851      	adds	r1, r2, r1
 800697c:	6339      	str	r1, [r7, #48]	; 0x30
 800697e:	4649      	mov	r1, r9
 8006980:	414b      	adcs	r3, r1
 8006982:	637b      	str	r3, [r7, #52]	; 0x34
 8006984:	f04f 0200 	mov.w	r2, #0
 8006988:	f04f 0300 	mov.w	r3, #0
 800698c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006990:	4659      	mov	r1, fp
 8006992:	00cb      	lsls	r3, r1, #3
 8006994:	4651      	mov	r1, sl
 8006996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800699a:	4651      	mov	r1, sl
 800699c:	00ca      	lsls	r2, r1, #3
 800699e:	4610      	mov	r0, r2
 80069a0:	4619      	mov	r1, r3
 80069a2:	4603      	mov	r3, r0
 80069a4:	4642      	mov	r2, r8
 80069a6:	189b      	adds	r3, r3, r2
 80069a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069ac:	464b      	mov	r3, r9
 80069ae:	460a      	mov	r2, r1
 80069b0:	eb42 0303 	adc.w	r3, r2, r3
 80069b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80069c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80069cc:	460b      	mov	r3, r1
 80069ce:	18db      	adds	r3, r3, r3
 80069d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80069d2:	4613      	mov	r3, r2
 80069d4:	eb42 0303 	adc.w	r3, r2, r3
 80069d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80069e2:	f7f9 fc65 	bl	80002b0 <__aeabi_uldivmod>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	4b0d      	ldr	r3, [pc, #52]	; (8006a20 <UART_SetConfig+0x2d4>)
 80069ec:	fba3 1302 	umull	r1, r3, r3, r2
 80069f0:	095b      	lsrs	r3, r3, #5
 80069f2:	2164      	movs	r1, #100	; 0x64
 80069f4:	fb01 f303 	mul.w	r3, r1, r3
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	3332      	adds	r3, #50	; 0x32
 80069fe:	4a08      	ldr	r2, [pc, #32]	; (8006a20 <UART_SetConfig+0x2d4>)
 8006a00:	fba2 2303 	umull	r2, r3, r2, r3
 8006a04:	095b      	lsrs	r3, r3, #5
 8006a06:	f003 0207 	and.w	r2, r3, #7
 8006a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4422      	add	r2, r4
 8006a12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a14:	e105      	b.n	8006c22 <UART_SetConfig+0x4d6>
 8006a16:	bf00      	nop
 8006a18:	40011000 	.word	0x40011000
 8006a1c:	40011400 	.word	0x40011400
 8006a20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a36:	4642      	mov	r2, r8
 8006a38:	464b      	mov	r3, r9
 8006a3a:	1891      	adds	r1, r2, r2
 8006a3c:	6239      	str	r1, [r7, #32]
 8006a3e:	415b      	adcs	r3, r3
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
 8006a42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a46:	4641      	mov	r1, r8
 8006a48:	1854      	adds	r4, r2, r1
 8006a4a:	4649      	mov	r1, r9
 8006a4c:	eb43 0501 	adc.w	r5, r3, r1
 8006a50:	f04f 0200 	mov.w	r2, #0
 8006a54:	f04f 0300 	mov.w	r3, #0
 8006a58:	00eb      	lsls	r3, r5, #3
 8006a5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a5e:	00e2      	lsls	r2, r4, #3
 8006a60:	4614      	mov	r4, r2
 8006a62:	461d      	mov	r5, r3
 8006a64:	4643      	mov	r3, r8
 8006a66:	18e3      	adds	r3, r4, r3
 8006a68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a6c:	464b      	mov	r3, r9
 8006a6e:	eb45 0303 	adc.w	r3, r5, r3
 8006a72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a86:	f04f 0200 	mov.w	r2, #0
 8006a8a:	f04f 0300 	mov.w	r3, #0
 8006a8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006a92:	4629      	mov	r1, r5
 8006a94:	008b      	lsls	r3, r1, #2
 8006a96:	4621      	mov	r1, r4
 8006a98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	008a      	lsls	r2, r1, #2
 8006aa0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006aa4:	f7f9 fc04 	bl	80002b0 <__aeabi_uldivmod>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4b60      	ldr	r3, [pc, #384]	; (8006c30 <UART_SetConfig+0x4e4>)
 8006aae:	fba3 2302 	umull	r2, r3, r3, r2
 8006ab2:	095b      	lsrs	r3, r3, #5
 8006ab4:	011c      	lsls	r4, r3, #4
 8006ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aba:	2200      	movs	r2, #0
 8006abc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ac0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006ac4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006ac8:	4642      	mov	r2, r8
 8006aca:	464b      	mov	r3, r9
 8006acc:	1891      	adds	r1, r2, r2
 8006ace:	61b9      	str	r1, [r7, #24]
 8006ad0:	415b      	adcs	r3, r3
 8006ad2:	61fb      	str	r3, [r7, #28]
 8006ad4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ad8:	4641      	mov	r1, r8
 8006ada:	1851      	adds	r1, r2, r1
 8006adc:	6139      	str	r1, [r7, #16]
 8006ade:	4649      	mov	r1, r9
 8006ae0:	414b      	adcs	r3, r1
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	f04f 0200 	mov.w	r2, #0
 8006ae8:	f04f 0300 	mov.w	r3, #0
 8006aec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006af0:	4659      	mov	r1, fp
 8006af2:	00cb      	lsls	r3, r1, #3
 8006af4:	4651      	mov	r1, sl
 8006af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006afa:	4651      	mov	r1, sl
 8006afc:	00ca      	lsls	r2, r1, #3
 8006afe:	4610      	mov	r0, r2
 8006b00:	4619      	mov	r1, r3
 8006b02:	4603      	mov	r3, r0
 8006b04:	4642      	mov	r2, r8
 8006b06:	189b      	adds	r3, r3, r2
 8006b08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b0c:	464b      	mov	r3, r9
 8006b0e:	460a      	mov	r2, r1
 8006b10:	eb42 0303 	adc.w	r3, r2, r3
 8006b14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b24:	f04f 0200 	mov.w	r2, #0
 8006b28:	f04f 0300 	mov.w	r3, #0
 8006b2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b30:	4649      	mov	r1, r9
 8006b32:	008b      	lsls	r3, r1, #2
 8006b34:	4641      	mov	r1, r8
 8006b36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b3a:	4641      	mov	r1, r8
 8006b3c:	008a      	lsls	r2, r1, #2
 8006b3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b42:	f7f9 fbb5 	bl	80002b0 <__aeabi_uldivmod>
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	4b39      	ldr	r3, [pc, #228]	; (8006c30 <UART_SetConfig+0x4e4>)
 8006b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006b50:	095b      	lsrs	r3, r3, #5
 8006b52:	2164      	movs	r1, #100	; 0x64
 8006b54:	fb01 f303 	mul.w	r3, r1, r3
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	011b      	lsls	r3, r3, #4
 8006b5c:	3332      	adds	r3, #50	; 0x32
 8006b5e:	4a34      	ldr	r2, [pc, #208]	; (8006c30 <UART_SetConfig+0x4e4>)
 8006b60:	fba2 2303 	umull	r2, r3, r2, r3
 8006b64:	095b      	lsrs	r3, r3, #5
 8006b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b6a:	441c      	add	r4, r3
 8006b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b70:	2200      	movs	r2, #0
 8006b72:	673b      	str	r3, [r7, #112]	; 0x70
 8006b74:	677a      	str	r2, [r7, #116]	; 0x74
 8006b76:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006b7a:	4642      	mov	r2, r8
 8006b7c:	464b      	mov	r3, r9
 8006b7e:	1891      	adds	r1, r2, r2
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	415b      	adcs	r3, r3
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b8a:	4641      	mov	r1, r8
 8006b8c:	1851      	adds	r1, r2, r1
 8006b8e:	6039      	str	r1, [r7, #0]
 8006b90:	4649      	mov	r1, r9
 8006b92:	414b      	adcs	r3, r1
 8006b94:	607b      	str	r3, [r7, #4]
 8006b96:	f04f 0200 	mov.w	r2, #0
 8006b9a:	f04f 0300 	mov.w	r3, #0
 8006b9e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ba2:	4659      	mov	r1, fp
 8006ba4:	00cb      	lsls	r3, r1, #3
 8006ba6:	4651      	mov	r1, sl
 8006ba8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bac:	4651      	mov	r1, sl
 8006bae:	00ca      	lsls	r2, r1, #3
 8006bb0:	4610      	mov	r0, r2
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	4642      	mov	r2, r8
 8006bb8:	189b      	adds	r3, r3, r2
 8006bba:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bbc:	464b      	mov	r3, r9
 8006bbe:	460a      	mov	r2, r1
 8006bc0:	eb42 0303 	adc.w	r3, r2, r3
 8006bc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	663b      	str	r3, [r7, #96]	; 0x60
 8006bd0:	667a      	str	r2, [r7, #100]	; 0x64
 8006bd2:	f04f 0200 	mov.w	r2, #0
 8006bd6:	f04f 0300 	mov.w	r3, #0
 8006bda:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006bde:	4649      	mov	r1, r9
 8006be0:	008b      	lsls	r3, r1, #2
 8006be2:	4641      	mov	r1, r8
 8006be4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006be8:	4641      	mov	r1, r8
 8006bea:	008a      	lsls	r2, r1, #2
 8006bec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006bf0:	f7f9 fb5e 	bl	80002b0 <__aeabi_uldivmod>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4b0d      	ldr	r3, [pc, #52]	; (8006c30 <UART_SetConfig+0x4e4>)
 8006bfa:	fba3 1302 	umull	r1, r3, r3, r2
 8006bfe:	095b      	lsrs	r3, r3, #5
 8006c00:	2164      	movs	r1, #100	; 0x64
 8006c02:	fb01 f303 	mul.w	r3, r1, r3
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	011b      	lsls	r3, r3, #4
 8006c0a:	3332      	adds	r3, #50	; 0x32
 8006c0c:	4a08      	ldr	r2, [pc, #32]	; (8006c30 <UART_SetConfig+0x4e4>)
 8006c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c12:	095b      	lsrs	r3, r3, #5
 8006c14:	f003 020f 	and.w	r2, r3, #15
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4422      	add	r2, r4
 8006c20:	609a      	str	r2, [r3, #8]
}
 8006c22:	bf00      	nop
 8006c24:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c2e:	bf00      	nop
 8006c30:	51eb851f 	.word	0x51eb851f

08006c34 <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b088      	sub	sp, #32
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	71fb      	strb	r3, [r7, #7]
 8006c3e:	460b      	mov	r3, r1
 8006c40:	71bb      	strb	r3, [r7, #6]
 8006c42:	4613      	mov	r3, r2
 8006c44:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8006c46:	797b      	ldrb	r3, [r7, #5]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d901      	bls.n	8006c50 <tmc_fillCRC8Table+0x1c>
		return 0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	e09e      	b.n	8006d8e <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 8006c50:	797a      	ldrb	r2, [r7, #5]
 8006c52:	4951      	ldr	r1, [pc, #324]	; (8006d98 <tmc_fillCRC8Table+0x164>)
 8006c54:	4613      	mov	r3, r2
 8006c56:	01db      	lsls	r3, r3, #7
 8006c58:	4413      	add	r3, r2
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	440b      	add	r3, r1
 8006c5e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006c62:	79fa      	ldrb	r2, [r7, #7]
 8006c64:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 8006c66:	797a      	ldrb	r2, [r7, #5]
 8006c68:	494b      	ldr	r1, [pc, #300]	; (8006d98 <tmc_fillCRC8Table+0x164>)
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	01db      	lsls	r3, r3, #7
 8006c6e:	4413      	add	r3, r2
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	440b      	add	r3, r1
 8006c74:	f203 1301 	addw	r3, r3, #257	; 0x101
 8006c78:	79ba      	ldrb	r2, [r7, #6]
 8006c7a:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 8006c7c:	797a      	ldrb	r2, [r7, #5]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	01db      	lsls	r3, r3, #7
 8006c82:	4413      	add	r3, r2
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	4a44      	ldr	r2, [pc, #272]	; (8006d98 <tmc_fillCRC8Table+0x164>)
 8006c88:	4413      	add	r3, r2
 8006c8a:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c92:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8006c94:	4b41      	ldr	r3, [pc, #260]	; (8006d9c <tmc_fillCRC8Table+0x168>)
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	e074      	b.n	8006d84 <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 8006c9a:	79bb      	ldrb	r3, [r7, #6]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d004      	beq.n	8006caa <tmc_fillCRC8Table+0x76>
 8006ca0:	6978      	ldr	r0, [r7, #20]
 8006ca2:	f000 f8f7 	bl	8006e94 <flipBitsInBytes>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	e000      	b.n	8006cac <tmc_fillCRC8Table+0x78>
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 8006cae:	2300      	movs	r3, #0
 8006cb0:	613b      	str	r3, [r7, #16]
 8006cb2:	e035      	b.n	8006d20 <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	0fdb      	lsrs	r3, r3, #31
 8006cb8:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d001      	beq.n	8006cce <tmc_fillCRC8Table+0x9a>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	e000      	b.n	8006cd0 <tmc_fillCRC8Table+0x9c>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	69fa      	ldr	r2, [r7, #28]
 8006cd2:	4053      	eors	r3, r2
 8006cd4:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <tmc_fillCRC8Table+0xb2>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	021b      	lsls	r3, r3, #8
 8006ce4:	e000      	b.n	8006ce8 <tmc_fillCRC8Table+0xb4>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	69fa      	ldr	r2, [r7, #28]
 8006cea:	4053      	eors	r3, r2
 8006cec:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d002      	beq.n	8006cfe <tmc_fillCRC8Table+0xca>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	041b      	lsls	r3, r3, #16
 8006cfc:	e000      	b.n	8006d00 <tmc_fillCRC8Table+0xcc>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	69fa      	ldr	r2, [r7, #28]
 8006d02:	4053      	eors	r3, r2
 8006d04:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 8006d06:	7afb      	ldrb	r3, [r7, #11]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <tmc_fillCRC8Table+0xde>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	061b      	lsls	r3, r3, #24
 8006d10:	e000      	b.n	8006d14 <tmc_fillCRC8Table+0xe0>
 8006d12:	2300      	movs	r3, #0
 8006d14:	69fa      	ldr	r2, [r7, #28]
 8006d16:	4053      	eors	r3, r2
 8006d18:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	613b      	str	r3, [r7, #16]
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	2b07      	cmp	r3, #7
 8006d24:	ddc6      	ble.n	8006cb4 <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 8006d26:	79bb      	ldrb	r3, [r7, #6]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d004      	beq.n	8006d36 <tmc_fillCRC8Table+0x102>
 8006d2c:	69f8      	ldr	r0, [r7, #28]
 8006d2e:	f000 f8b1 	bl	8006e94 <flipBitsInBytes>
 8006d32:	4603      	mov	r3, r0
 8006d34:	e000      	b.n	8006d38 <tmc_fillCRC8Table+0x104>
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	61ba      	str	r2, [r7, #24]
 8006d40:	69fa      	ldr	r2, [r7, #28]
 8006d42:	b2d2      	uxtb	r2, r2
 8006d44:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	0a1b      	lsrs	r3, r3, #8
 8006d4a:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	61ba      	str	r2, [r7, #24]
 8006d52:	69fa      	ldr	r2, [r7, #28]
 8006d54:	b2d2      	uxtb	r2, r2
 8006d56:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	0a1b      	lsrs	r3, r3, #8
 8006d5c:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	1c5a      	adds	r2, r3, #1
 8006d62:	61ba      	str	r2, [r7, #24]
 8006d64:	69fa      	ldr	r2, [r7, #28]
 8006d66:	b2d2      	uxtb	r2, r2
 8006d68:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	0a1b      	lsrs	r3, r3, #8
 8006d6e:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	61ba      	str	r2, [r7, #24]
 8006d76:	69fa      	ldr	r2, [r7, #28]
 8006d78:	b2d2      	uxtb	r2, r2
 8006d7a:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 8006d82:	617b      	str	r3, [r7, #20]
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	4a06      	ldr	r2, [pc, #24]	; (8006da0 <tmc_fillCRC8Table+0x16c>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d186      	bne.n	8006c9a <tmc_fillCRC8Table+0x66>
	}

	return 1;
 8006d8c:	2301      	movs	r3, #1
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3720      	adds	r7, #32
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20000704 	.word	0x20000704
 8006d9c:	03020100 	.word	0x03020100
 8006da0:	04030200 	.word	0x04030200

08006da4 <tmc_CRC8>:
 *     uint8_t *data: A pointer to the data that will be CRC'd.
 *     uint32_t bytes: The length of the data buffer.
 *     uint8_t index: The index of the CRC table to be used.
 */
uint8_t tmc_CRC8(uint8_t *data, uint32_t bytes, uint8_t index)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	4613      	mov	r3, r2
 8006db0:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8006db2:	2300      	movs	r3, #0
 8006db4:	75fb      	strb	r3, [r7, #23]
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8006db6:	79fb      	ldrb	r3, [r7, #7]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d901      	bls.n	8006dc0 <tmc_CRC8+0x1c>
		return 0;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	e02c      	b.n	8006e1a <tmc_CRC8+0x76>

	table = &CRCTables[index].table[0];
 8006dc0:	79fa      	ldrb	r2, [r7, #7]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	01db      	lsls	r3, r3, #7
 8006dc6:	4413      	add	r3, r2
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	4a16      	ldr	r2, [pc, #88]	; (8006e24 <tmc_CRC8+0x80>)
 8006dcc:	4413      	add	r3, r2
 8006dce:	613b      	str	r3, [r7, #16]

	while(bytes--)
 8006dd0:	e00b      	b.n	8006dea <tmc_CRC8+0x46>
		result = table[result ^ *data++];
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	60fa      	str	r2, [r7, #12]
 8006dd8:	781a      	ldrb	r2, [r3, #0]
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
 8006ddc:	4053      	eors	r3, r2
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	461a      	mov	r2, r3
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	4413      	add	r3, r2
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	1e5a      	subs	r2, r3, #1
 8006dee:	60ba      	str	r2, [r7, #8]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1ee      	bne.n	8006dd2 <tmc_CRC8+0x2e>

	return (CRCTables[index].isReflected)? flipByte(result) : result;
 8006df4:	79fa      	ldrb	r2, [r7, #7]
 8006df6:	490b      	ldr	r1, [pc, #44]	; (8006e24 <tmc_CRC8+0x80>)
 8006df8:	4613      	mov	r3, r2
 8006dfa:	01db      	lsls	r3, r3, #7
 8006dfc:	4413      	add	r3, r2
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	440b      	add	r3, r1
 8006e02:	f203 1301 	addw	r3, r3, #257	; 0x101
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d005      	beq.n	8006e18 <tmc_CRC8+0x74>
 8006e0c:	7dfb      	ldrb	r3, [r7, #23]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 f80a 	bl	8006e28 <flipByte>
 8006e14:	4603      	mov	r3, r0
 8006e16:	e000      	b.n	8006e1a <tmc_CRC8+0x76>
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	20000704 	.word	0x20000704

08006e28 <flipByte>:
	return CRCTables[index].isReflected;
}

// Helper functions
static uint8_t flipByte(uint8_t value)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	4603      	mov	r3, r0
 8006e30:	71fb      	strb	r3, [r7, #7]
	// swap odd and even bits
	value = ((value >> 1) & 0x55) | ((value & 0x55) << 1);
 8006e32:	79fb      	ldrb	r3, [r7, #7]
 8006e34:	085b      	lsrs	r3, r3, #1
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	b25b      	sxtb	r3, r3
 8006e3a:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8006e3e:	b25a      	sxtb	r2, r3
 8006e40:	79fb      	ldrb	r3, [r7, #7]
 8006e42:	005b      	lsls	r3, r3, #1
 8006e44:	b25b      	sxtb	r3, r3
 8006e46:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8006e4a:	b25b      	sxtb	r3, r3
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	b25b      	sxtb	r3, r3
 8006e50:	71fb      	strb	r3, [r7, #7]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33) | ((value & 0x33) << 2);
 8006e52:	79fb      	ldrb	r3, [r7, #7]
 8006e54:	089b      	lsrs	r3, r3, #2
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	b25b      	sxtb	r3, r3
 8006e5a:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8006e5e:	b25a      	sxtb	r2, r3
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	b25b      	sxtb	r3, r3
 8006e66:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8006e6a:	b25b      	sxtb	r3, r3
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	b25b      	sxtb	r3, r3
 8006e70:	71fb      	strb	r3, [r7, #7]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F) | ((value & 0x0F) << 4);
 8006e72:	79fb      	ldrb	r3, [r7, #7]
 8006e74:	091b      	lsrs	r3, r3, #4
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	b25a      	sxtb	r2, r3
 8006e7a:	79fb      	ldrb	r3, [r7, #7]
 8006e7c:	011b      	lsls	r3, r3, #4
 8006e7e:	b25b      	sxtb	r3, r3
 8006e80:	4313      	orrs	r3, r2
 8006e82:	b25b      	sxtb	r3, r3
 8006e84:	71fb      	strb	r3, [r7, #7]

	return value;
 8006e86:	79fb      	ldrb	r3, [r7, #7]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	085b      	lsrs	r3, r3, #1
 8006ea0:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8006eac:	4313      	orrs	r3, r2
 8006eae:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	089b      	lsrs	r3, r3, #2
 8006eb4:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	091b      	lsrs	r3, r3, #4
 8006ec8:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	011b      	lsls	r3, r3, #4
 8006ed0:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	607b      	str	r3, [r7, #4]

	return value;
 8006ed8:	687b      	ldr	r3, [r7, #4]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <tmc2209_writeInt>:
// => CRC wrapper
extern uint8_t tmc2209_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2209_writeInt(TMC2209TypeDef *tmc2209, uint8_t address, int32_t value)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b086      	sub	sp, #24
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	60f8      	str	r0, [r7, #12]
 8006eee:	460b      	mov	r3, r1
 8006ef0:	607a      	str	r2, [r7, #4]
 8006ef2:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8];

	data[0] = 0x05;
 8006ef4:	2305      	movs	r3, #5
 8006ef6:	743b      	strb	r3, [r7, #16]
	data[1] = tmc2209->slaveAddress;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8006efe:	747b      	strb	r3, [r7, #17]
	data[2] = address | TMC_WRITE_BIT;
 8006f00:	7afb      	ldrb	r3, [r7, #11]
 8006f02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	74bb      	strb	r3, [r7, #18]
	data[3] = (value >> 24) & 0xFF;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	0e1b      	lsrs	r3, r3, #24
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	74fb      	strb	r3, [r7, #19]
	data[4] = (value >> 16) & 0xFF;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	141b      	asrs	r3, r3, #16
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	753b      	strb	r3, [r7, #20]
	data[5] = (value >> 8 ) & 0xFF;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	121b      	asrs	r3, r3, #8
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	757b      	strb	r3, [r7, #21]
	data[6] = (value      ) & 0xFF;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	75bb      	strb	r3, [r7, #22]
	data[7] = tmc2209_CRC8(data, 7);
 8006f28:	f107 0310 	add.w	r3, r7, #16
 8006f2c:	2107      	movs	r1, #7
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7f9 fb68 	bl	8000604 <tmc2209_CRC8>
 8006f34:	4603      	mov	r3, r0
 8006f36:	75fb      	strb	r3, [r7, #23]

	tmc2209_readWriteArray(tmc2209->config->channel, &data[0], 8, 0);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8006f40:	f107 0110 	add.w	r1, r7, #16
 8006f44:	2300      	movs	r3, #0
 8006f46:	2208      	movs	r2, #8
 8006f48:	f7f9 fb34 	bl	80005b4 <tmc2209_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
 8006f4c:	7afb      	ldrb	r3, [r7, #11]
 8006f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f52:	72fb      	strb	r3, [r7, #11]
	tmc2209->config->shadowRegister[address] = value;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	7afb      	ldrb	r3, [r7, #11]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	605a      	str	r2, [r3, #4]
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
 8006f62:	7afb      	ldrb	r3, [r7, #11]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	4413      	add	r3, r2
 8006f68:	f893 2204 	ldrb.w	r2, [r3, #516]	; 0x204
 8006f6c:	7afb      	ldrb	r3, [r7, #11]
 8006f6e:	f042 0208 	orr.w	r2, r2, #8
 8006f72:	b2d1      	uxtb	r1, r2
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	4413      	add	r3, r2
 8006f78:	460a      	mov	r2, r1
 8006f7a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 8006f7e:	bf00      	nop
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <tmc2209_readInt>:

int32_t tmc2209_readInt(TMC2209TypeDef *tmc2209, uint8_t address)
{
 8006f86:	b590      	push	{r4, r7, lr}
 8006f88:	b085      	sub	sp, #20
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	460b      	mov	r3, r1
 8006f90:	70fb      	strb	r3, [r7, #3]
	uint8_t data[8] = { 0 };
 8006f92:	2300      	movs	r3, #0
 8006f94:	60bb      	str	r3, [r7, #8]
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]

	address = TMC_ADDRESS(address);
 8006f9a:	78fb      	ldrb	r3, [r7, #3]
 8006f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fa0:	70fb      	strb	r3, [r7, #3]

	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
 8006fa2:	78fb      	ldrb	r3, [r7, #3]
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006fac:	f003 0301 	and.w	r3, r3, #1
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d106      	bne.n	8006fc2 <tmc2209_readInt+0x3c>
		return tmc2209->config->shadowRegister[address];
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	78fb      	ldrb	r3, [r7, #3]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	e03f      	b.n	8007042 <tmc2209_readInt+0xbc>

	data[0] = 0x05;
 8006fc2:	2305      	movs	r3, #5
 8006fc4:	723b      	strb	r3, [r7, #8]
	data[1] = tmc2209->slaveAddress;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8006fcc:	727b      	strb	r3, [r7, #9]
	data[2] = address;
 8006fce:	78fb      	ldrb	r3, [r7, #3]
 8006fd0:	72bb      	strb	r3, [r7, #10]
	data[3] = tmc2209_CRC8(data, 3);
 8006fd2:	f107 0308 	add.w	r3, r7, #8
 8006fd6:	2103      	movs	r1, #3
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7f9 fb13 	bl	8000604 <tmc2209_CRC8>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	72fb      	strb	r3, [r7, #11]

	tmc2209_readWriteArray(tmc2209->config->channel, data, 4, 8);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8006fea:	f107 0108 	add.w	r1, r7, #8
 8006fee:	2308      	movs	r3, #8
 8006ff0:	2204      	movs	r2, #4
 8006ff2:	f7f9 fadf 	bl	80005b4 <tmc2209_readWriteArray>

	// Byte 0: Sync nibble correct?
	if (data[0] != 0x05)
 8006ff6:	7a3b      	ldrb	r3, [r7, #8]
 8006ff8:	2b05      	cmp	r3, #5
 8006ffa:	d001      	beq.n	8007000 <tmc2209_readInt+0x7a>
		return 0;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	e020      	b.n	8007042 <tmc2209_readInt+0xbc>

	// Byte 1: Master address correct?
	if (data[1] != 0xFF)
 8007000:	7a7b      	ldrb	r3, [r7, #9]
 8007002:	2bff      	cmp	r3, #255	; 0xff
 8007004:	d001      	beq.n	800700a <tmc2209_readInt+0x84>
		return 0;
 8007006:	2300      	movs	r3, #0
 8007008:	e01b      	b.n	8007042 <tmc2209_readInt+0xbc>

	// Byte 2: Address correct?
	if (data[2] != address)
 800700a:	7abb      	ldrb	r3, [r7, #10]
 800700c:	78fa      	ldrb	r2, [r7, #3]
 800700e:	429a      	cmp	r2, r3
 8007010:	d001      	beq.n	8007016 <tmc2209_readInt+0x90>
		return 0;
 8007012:	2300      	movs	r3, #0
 8007014:	e015      	b.n	8007042 <tmc2209_readInt+0xbc>

	// Byte 7: CRC correct?
	if (data[7] != tmc2209_CRC8(data, 7))
 8007016:	7bfc      	ldrb	r4, [r7, #15]
 8007018:	f107 0308 	add.w	r3, r7, #8
 800701c:	2107      	movs	r1, #7
 800701e:	4618      	mov	r0, r3
 8007020:	f7f9 faf0 	bl	8000604 <tmc2209_CRC8>
 8007024:	4603      	mov	r3, r0
 8007026:	429c      	cmp	r4, r3
 8007028:	d001      	beq.n	800702e <tmc2209_readInt+0xa8>
		return 0;
 800702a:	2300      	movs	r3, #0
 800702c:	e009      	b.n	8007042 <tmc2209_readInt+0xbc>

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
 800702e:	7afb      	ldrb	r3, [r7, #11]
 8007030:	061a      	lsls	r2, r3, #24
 8007032:	7b3b      	ldrb	r3, [r7, #12]
 8007034:	041b      	lsls	r3, r3, #16
 8007036:	4313      	orrs	r3, r2
 8007038:	7b7a      	ldrb	r2, [r7, #13]
 800703a:	0212      	lsls	r2, r2, #8
 800703c:	4313      	orrs	r3, r2
 800703e:	7bba      	ldrb	r2, [r7, #14]
 8007040:	4313      	orrs	r3, r2
}
 8007042:	4618      	mov	r0, r3
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	bd90      	pop	{r4, r7, pc}
	...

0800704c <tmc2209_init>:

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	607b      	str	r3, [r7, #4]
 8007056:	460b      	mov	r3, r1
 8007058:	72fb      	strb	r3, [r7, #11]
 800705a:	4613      	mov	r3, r2
 800705c:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	7aba      	ldrb	r2, [r7, #10]
 8007062:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2200      	movs	r2, #0
 8007072:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	7afa      	ldrb	r2, [r7, #11]
 800707c:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2200      	movs	r2, #0
 8007086:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2200      	movs	r2, #0
 800708e:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8007090:	2300      	movs	r3, #0
 8007092:	617b      	str	r3, [r7, #20]
 8007094:	e017      	b.n	80070c6 <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 8007096:	4a11      	ldr	r2, [pc, #68]	; (80070dc <tmc2209_init+0x90>)
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	4413      	add	r3, r2
 800709c:	7819      	ldrb	r1, [r3, #0]
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80070a8:	460a      	mov	r2, r1
 80070aa:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	6a3a      	ldr	r2, [r7, #32]
 80070b2:	4413      	add	r3, r2
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	68f9      	ldr	r1, [r7, #12]
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	440b      	add	r3, r1
 80070be:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	3301      	adds	r3, #1
 80070c4:	617b      	str	r3, [r7, #20]
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b7f      	cmp	r3, #127	; 0x7f
 80070ca:	d9e4      	bls.n	8007096 <tmc2209_init+0x4a>
	}
}
 80070cc:	bf00      	nop
 80070ce:	bf00      	nop
 80070d0:	371c      	adds	r7, #28
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	08008b64 	.word	0x08008b64

080070e0 <writeConfiguration>:

static void writeConfiguration(TMC2209TypeDef *tmc2209)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
	uint8_t *ptr = &tmc2209->config->configIndex;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3301      	adds	r3, #1
 80070ee:	60bb      	str	r3, [r7, #8]
	const int32_t *settings;

	if(tmc2209->config->state == CONFIG_RESTORE)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d131      	bne.n	800715e <writeConfiguration+0x7e>
	{
		settings = tmc2209->config->shadowRegister;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	3304      	adds	r3, #4
 8007100:	60fb      	str	r3, [r7, #12]
		// Find the next restorable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8007102:	e005      	b.n	8007110 <writeConfiguration+0x30>
		{
			(*ptr)++;
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	3301      	adds	r3, #1
 800710a:	b2da      	uxtb	r2, r3
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	b25b      	sxtb	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	db3b      	blt.n	8007192 <writeConfiguration+0xb2>
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4413      	add	r3, r2
 8007124:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0e9      	beq.n	8007104 <writeConfiguration+0x24>
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	461a      	mov	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4413      	add	r3, r2
 800713a:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800713e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007142:	2b00      	cmp	r3, #0
 8007144:	d025      	beq.n	8007192 <writeConfiguration+0xb2>
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	461a      	mov	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4413      	add	r3, r2
 8007150:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8007154:	f003 0308 	and.w	r3, r3, #8
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0d3      	beq.n	8007104 <writeConfiguration+0x24>
 800715c:	e019      	b.n	8007192 <writeConfiguration+0xb2>
		}
	}
	else
	{
		settings = tmc2209->registerResetState;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	3304      	adds	r3, #4
 8007162:	60fb      	str	r3, [r7, #12]
		// Find the next resettable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 8007164:	e005      	b.n	8007172 <writeConfiguration+0x92>
		{
			(*ptr)++;
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	3301      	adds	r3, #1
 800716c:	b2da      	uxtb	r2, r3
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	b25b      	sxtb	r3, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	db0a      	blt.n	8007192 <writeConfiguration+0xb2>
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	461a      	mov	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4413      	add	r3, r2
 8007186:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800718a:	f003 0342 	and.w	r3, r3, #66	; 0x42
 800718e:	2b02      	cmp	r3, #2
 8007190:	d1e9      	bne.n	8007166 <writeConfiguration+0x86>
		}
	}

	if(*ptr < TMC2209_REGISTER_COUNT)
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	b25b      	sxtb	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	db12      	blt.n	80071c2 <writeConfiguration+0xe2>
	{
		tmc2209_writeInt(tmc2209, *ptr, settings[*ptr]);
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	7819      	ldrb	r1, [r3, #0]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	4413      	add	r3, r2
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	461a      	mov	r2, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7ff fe99 	bl	8006ee6 <tmc2209_writeInt>
		(*ptr)++;
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	3301      	adds	r3, #1
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	701a      	strb	r2, [r3, #0]
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
		}

		tmc2209->config->state = CONFIG_READY;
	}
}
 80071c0:	e013      	b.n	80071ea <writeConfiguration+0x10a>
		if(tmc2209->config->callback)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d009      	beq.n	80071e2 <writeConfiguration+0x102>
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	6812      	ldr	r2, [r2, #0]
 80071da:	7812      	ldrb	r2, [r2, #0]
 80071dc:	4611      	mov	r1, r2
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	4798      	blx	r3
		tmc2209->config->state = CONFIG_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2200      	movs	r2, #0
 80071e8:	701a      	strb	r2, [r3, #0]
}
 80071ea:	bf00      	nop
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <tmc2209_periodicJob>:

void tmc2209_periodicJob(TMC2209TypeDef *tmc2209, uint32_t tick)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b082      	sub	sp, #8
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	6039      	str	r1, [r7, #0]
	UNUSED(tick);

	if(tmc2209->config->state != CONFIG_READY)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <tmc2209_periodicJob+0x1c>
	{
		writeConfiguration(tmc2209);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7ff ff6a 	bl	80070e0 <writeConfiguration>
		return;
 800720c:	bf00      	nop
	}
}
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <tmc2209_reset>:
{
	tmc2209->config->callback = (tmc_callback_config) callback;
}

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <tmc2209_reset+0x16>
		return false;
 8007226:	2300      	movs	r3, #0
 8007228:	e028      	b.n	800727c <tmc2209_reset+0x68>

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 800722a:	2300      	movs	r3, #0
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	e019      	b.n	8007264 <tmc2209_reset+0x50>
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	4413      	add	r3, r2
 8007236:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	f023 0308 	bic.w	r3, r3, #8
 8007240:	b2d9      	uxtb	r1, r3
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4413      	add	r3, r2
 8007248:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800724c:	460a      	mov	r2, r1
 800724e:	701a      	strb	r2, [r3, #0]
		tmc2209->config->shadowRegister[i] = 0;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	2200      	movs	r2, #0
 800725c:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	3301      	adds	r3, #1
 8007262:	60fb      	str	r3, [r7, #12]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b7f      	cmp	r3, #127	; 0x7f
 8007268:	d9e2      	bls.n	8007230 <tmc2209_reset+0x1c>
	}

	tmc2209->config->state        = CONFIG_RESET;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2201      	movs	r2, #1
 8007270:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2200      	movs	r2, #0
 8007278:	705a      	strb	r2, [r3, #1]

	return true;
 800727a:	2301      	movs	r3, #1
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <tmc2209_restore+0x16>
		return false;
 800729a:	2300      	movs	r3, #0
 800729c:	e008      	b.n	80072b0 <tmc2209_restore+0x28>

	tmc2209->config->state        = CONFIG_RESTORE;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2202      	movs	r2, #2
 80072a4:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2200      	movs	r2, #0
 80072ac:	705a      	strb	r2, [r3, #1]

	return true;
 80072ae:	2301      	movs	r3, #1
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <__errno>:
 80072bc:	4b01      	ldr	r3, [pc, #4]	; (80072c4 <__errno+0x8>)
 80072be:	6818      	ldr	r0, [r3, #0]
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	2000000c 	.word	0x2000000c

080072c8 <__libc_init_array>:
 80072c8:	b570      	push	{r4, r5, r6, lr}
 80072ca:	4d0d      	ldr	r5, [pc, #52]	; (8007300 <__libc_init_array+0x38>)
 80072cc:	4c0d      	ldr	r4, [pc, #52]	; (8007304 <__libc_init_array+0x3c>)
 80072ce:	1b64      	subs	r4, r4, r5
 80072d0:	10a4      	asrs	r4, r4, #2
 80072d2:	2600      	movs	r6, #0
 80072d4:	42a6      	cmp	r6, r4
 80072d6:	d109      	bne.n	80072ec <__libc_init_array+0x24>
 80072d8:	4d0b      	ldr	r5, [pc, #44]	; (8007308 <__libc_init_array+0x40>)
 80072da:	4c0c      	ldr	r4, [pc, #48]	; (800730c <__libc_init_array+0x44>)
 80072dc:	f001 f8fa 	bl	80084d4 <_init>
 80072e0:	1b64      	subs	r4, r4, r5
 80072e2:	10a4      	asrs	r4, r4, #2
 80072e4:	2600      	movs	r6, #0
 80072e6:	42a6      	cmp	r6, r4
 80072e8:	d105      	bne.n	80072f6 <__libc_init_array+0x2e>
 80072ea:	bd70      	pop	{r4, r5, r6, pc}
 80072ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80072f0:	4798      	blx	r3
 80072f2:	3601      	adds	r6, #1
 80072f4:	e7ee      	b.n	80072d4 <__libc_init_array+0xc>
 80072f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072fa:	4798      	blx	r3
 80072fc:	3601      	adds	r6, #1
 80072fe:	e7f2      	b.n	80072e6 <__libc_init_array+0x1e>
 8007300:	08008c84 	.word	0x08008c84
 8007304:	08008c84 	.word	0x08008c84
 8007308:	08008c84 	.word	0x08008c84
 800730c:	08008c88 	.word	0x08008c88

08007310 <memset>:
 8007310:	4402      	add	r2, r0
 8007312:	4603      	mov	r3, r0
 8007314:	4293      	cmp	r3, r2
 8007316:	d100      	bne.n	800731a <memset+0xa>
 8007318:	4770      	bx	lr
 800731a:	f803 1b01 	strb.w	r1, [r3], #1
 800731e:	e7f9      	b.n	8007314 <memset+0x4>

08007320 <iprintf>:
 8007320:	b40f      	push	{r0, r1, r2, r3}
 8007322:	4b0a      	ldr	r3, [pc, #40]	; (800734c <iprintf+0x2c>)
 8007324:	b513      	push	{r0, r1, r4, lr}
 8007326:	681c      	ldr	r4, [r3, #0]
 8007328:	b124      	cbz	r4, 8007334 <iprintf+0x14>
 800732a:	69a3      	ldr	r3, [r4, #24]
 800732c:	b913      	cbnz	r3, 8007334 <iprintf+0x14>
 800732e:	4620      	mov	r0, r4
 8007330:	f000 fb2c 	bl	800798c <__sinit>
 8007334:	ab05      	add	r3, sp, #20
 8007336:	9a04      	ldr	r2, [sp, #16]
 8007338:	68a1      	ldr	r1, [r4, #8]
 800733a:	9301      	str	r3, [sp, #4]
 800733c:	4620      	mov	r0, r4
 800733e:	f000 fd3d 	bl	8007dbc <_vfiprintf_r>
 8007342:	b002      	add	sp, #8
 8007344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007348:	b004      	add	sp, #16
 800734a:	4770      	bx	lr
 800734c:	2000000c 	.word	0x2000000c

08007350 <_puts_r>:
 8007350:	b570      	push	{r4, r5, r6, lr}
 8007352:	460e      	mov	r6, r1
 8007354:	4605      	mov	r5, r0
 8007356:	b118      	cbz	r0, 8007360 <_puts_r+0x10>
 8007358:	6983      	ldr	r3, [r0, #24]
 800735a:	b90b      	cbnz	r3, 8007360 <_puts_r+0x10>
 800735c:	f000 fb16 	bl	800798c <__sinit>
 8007360:	69ab      	ldr	r3, [r5, #24]
 8007362:	68ac      	ldr	r4, [r5, #8]
 8007364:	b913      	cbnz	r3, 800736c <_puts_r+0x1c>
 8007366:	4628      	mov	r0, r5
 8007368:	f000 fb10 	bl	800798c <__sinit>
 800736c:	4b2c      	ldr	r3, [pc, #176]	; (8007420 <_puts_r+0xd0>)
 800736e:	429c      	cmp	r4, r3
 8007370:	d120      	bne.n	80073b4 <_puts_r+0x64>
 8007372:	686c      	ldr	r4, [r5, #4]
 8007374:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007376:	07db      	lsls	r3, r3, #31
 8007378:	d405      	bmi.n	8007386 <_puts_r+0x36>
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	0598      	lsls	r0, r3, #22
 800737e:	d402      	bmi.n	8007386 <_puts_r+0x36>
 8007380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007382:	f000 fba1 	bl	8007ac8 <__retarget_lock_acquire_recursive>
 8007386:	89a3      	ldrh	r3, [r4, #12]
 8007388:	0719      	lsls	r1, r3, #28
 800738a:	d51d      	bpl.n	80073c8 <_puts_r+0x78>
 800738c:	6923      	ldr	r3, [r4, #16]
 800738e:	b1db      	cbz	r3, 80073c8 <_puts_r+0x78>
 8007390:	3e01      	subs	r6, #1
 8007392:	68a3      	ldr	r3, [r4, #8]
 8007394:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007398:	3b01      	subs	r3, #1
 800739a:	60a3      	str	r3, [r4, #8]
 800739c:	bb39      	cbnz	r1, 80073ee <_puts_r+0x9e>
 800739e:	2b00      	cmp	r3, #0
 80073a0:	da38      	bge.n	8007414 <_puts_r+0xc4>
 80073a2:	4622      	mov	r2, r4
 80073a4:	210a      	movs	r1, #10
 80073a6:	4628      	mov	r0, r5
 80073a8:	f000 f916 	bl	80075d8 <__swbuf_r>
 80073ac:	3001      	adds	r0, #1
 80073ae:	d011      	beq.n	80073d4 <_puts_r+0x84>
 80073b0:	250a      	movs	r5, #10
 80073b2:	e011      	b.n	80073d8 <_puts_r+0x88>
 80073b4:	4b1b      	ldr	r3, [pc, #108]	; (8007424 <_puts_r+0xd4>)
 80073b6:	429c      	cmp	r4, r3
 80073b8:	d101      	bne.n	80073be <_puts_r+0x6e>
 80073ba:	68ac      	ldr	r4, [r5, #8]
 80073bc:	e7da      	b.n	8007374 <_puts_r+0x24>
 80073be:	4b1a      	ldr	r3, [pc, #104]	; (8007428 <_puts_r+0xd8>)
 80073c0:	429c      	cmp	r4, r3
 80073c2:	bf08      	it	eq
 80073c4:	68ec      	ldreq	r4, [r5, #12]
 80073c6:	e7d5      	b.n	8007374 <_puts_r+0x24>
 80073c8:	4621      	mov	r1, r4
 80073ca:	4628      	mov	r0, r5
 80073cc:	f000 f956 	bl	800767c <__swsetup_r>
 80073d0:	2800      	cmp	r0, #0
 80073d2:	d0dd      	beq.n	8007390 <_puts_r+0x40>
 80073d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80073d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073da:	07da      	lsls	r2, r3, #31
 80073dc:	d405      	bmi.n	80073ea <_puts_r+0x9a>
 80073de:	89a3      	ldrh	r3, [r4, #12]
 80073e0:	059b      	lsls	r3, r3, #22
 80073e2:	d402      	bmi.n	80073ea <_puts_r+0x9a>
 80073e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073e6:	f000 fb70 	bl	8007aca <__retarget_lock_release_recursive>
 80073ea:	4628      	mov	r0, r5
 80073ec:	bd70      	pop	{r4, r5, r6, pc}
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	da04      	bge.n	80073fc <_puts_r+0xac>
 80073f2:	69a2      	ldr	r2, [r4, #24]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	dc06      	bgt.n	8007406 <_puts_r+0xb6>
 80073f8:	290a      	cmp	r1, #10
 80073fa:	d004      	beq.n	8007406 <_puts_r+0xb6>
 80073fc:	6823      	ldr	r3, [r4, #0]
 80073fe:	1c5a      	adds	r2, r3, #1
 8007400:	6022      	str	r2, [r4, #0]
 8007402:	7019      	strb	r1, [r3, #0]
 8007404:	e7c5      	b.n	8007392 <_puts_r+0x42>
 8007406:	4622      	mov	r2, r4
 8007408:	4628      	mov	r0, r5
 800740a:	f000 f8e5 	bl	80075d8 <__swbuf_r>
 800740e:	3001      	adds	r0, #1
 8007410:	d1bf      	bne.n	8007392 <_puts_r+0x42>
 8007412:	e7df      	b.n	80073d4 <_puts_r+0x84>
 8007414:	6823      	ldr	r3, [r4, #0]
 8007416:	250a      	movs	r5, #10
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	6022      	str	r2, [r4, #0]
 800741c:	701d      	strb	r5, [r3, #0]
 800741e:	e7db      	b.n	80073d8 <_puts_r+0x88>
 8007420:	08008c08 	.word	0x08008c08
 8007424:	08008c28 	.word	0x08008c28
 8007428:	08008be8 	.word	0x08008be8

0800742c <puts>:
 800742c:	4b02      	ldr	r3, [pc, #8]	; (8007438 <puts+0xc>)
 800742e:	4601      	mov	r1, r0
 8007430:	6818      	ldr	r0, [r3, #0]
 8007432:	f7ff bf8d 	b.w	8007350 <_puts_r>
 8007436:	bf00      	nop
 8007438:	2000000c 	.word	0x2000000c

0800743c <setbuf>:
 800743c:	2900      	cmp	r1, #0
 800743e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007442:	bf0c      	ite	eq
 8007444:	2202      	moveq	r2, #2
 8007446:	2200      	movne	r2, #0
 8007448:	f000 b800 	b.w	800744c <setvbuf>

0800744c <setvbuf>:
 800744c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007450:	461d      	mov	r5, r3
 8007452:	4b5d      	ldr	r3, [pc, #372]	; (80075c8 <setvbuf+0x17c>)
 8007454:	681f      	ldr	r7, [r3, #0]
 8007456:	4604      	mov	r4, r0
 8007458:	460e      	mov	r6, r1
 800745a:	4690      	mov	r8, r2
 800745c:	b127      	cbz	r7, 8007468 <setvbuf+0x1c>
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	b913      	cbnz	r3, 8007468 <setvbuf+0x1c>
 8007462:	4638      	mov	r0, r7
 8007464:	f000 fa92 	bl	800798c <__sinit>
 8007468:	4b58      	ldr	r3, [pc, #352]	; (80075cc <setvbuf+0x180>)
 800746a:	429c      	cmp	r4, r3
 800746c:	d167      	bne.n	800753e <setvbuf+0xf2>
 800746e:	687c      	ldr	r4, [r7, #4]
 8007470:	f1b8 0f02 	cmp.w	r8, #2
 8007474:	d006      	beq.n	8007484 <setvbuf+0x38>
 8007476:	f1b8 0f01 	cmp.w	r8, #1
 800747a:	f200 809f 	bhi.w	80075bc <setvbuf+0x170>
 800747e:	2d00      	cmp	r5, #0
 8007480:	f2c0 809c 	blt.w	80075bc <setvbuf+0x170>
 8007484:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007486:	07db      	lsls	r3, r3, #31
 8007488:	d405      	bmi.n	8007496 <setvbuf+0x4a>
 800748a:	89a3      	ldrh	r3, [r4, #12]
 800748c:	0598      	lsls	r0, r3, #22
 800748e:	d402      	bmi.n	8007496 <setvbuf+0x4a>
 8007490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007492:	f000 fb19 	bl	8007ac8 <__retarget_lock_acquire_recursive>
 8007496:	4621      	mov	r1, r4
 8007498:	4638      	mov	r0, r7
 800749a:	f000 f9e3 	bl	8007864 <_fflush_r>
 800749e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074a0:	b141      	cbz	r1, 80074b4 <setvbuf+0x68>
 80074a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074a6:	4299      	cmp	r1, r3
 80074a8:	d002      	beq.n	80074b0 <setvbuf+0x64>
 80074aa:	4638      	mov	r0, r7
 80074ac:	f000 fb7c 	bl	8007ba8 <_free_r>
 80074b0:	2300      	movs	r3, #0
 80074b2:	6363      	str	r3, [r4, #52]	; 0x34
 80074b4:	2300      	movs	r3, #0
 80074b6:	61a3      	str	r3, [r4, #24]
 80074b8:	6063      	str	r3, [r4, #4]
 80074ba:	89a3      	ldrh	r3, [r4, #12]
 80074bc:	0619      	lsls	r1, r3, #24
 80074be:	d503      	bpl.n	80074c8 <setvbuf+0x7c>
 80074c0:	6921      	ldr	r1, [r4, #16]
 80074c2:	4638      	mov	r0, r7
 80074c4:	f000 fb70 	bl	8007ba8 <_free_r>
 80074c8:	89a3      	ldrh	r3, [r4, #12]
 80074ca:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80074ce:	f023 0303 	bic.w	r3, r3, #3
 80074d2:	f1b8 0f02 	cmp.w	r8, #2
 80074d6:	81a3      	strh	r3, [r4, #12]
 80074d8:	d06c      	beq.n	80075b4 <setvbuf+0x168>
 80074da:	ab01      	add	r3, sp, #4
 80074dc:	466a      	mov	r2, sp
 80074de:	4621      	mov	r1, r4
 80074e0:	4638      	mov	r0, r7
 80074e2:	f000 faf3 	bl	8007acc <__swhatbuf_r>
 80074e6:	89a3      	ldrh	r3, [r4, #12]
 80074e8:	4318      	orrs	r0, r3
 80074ea:	81a0      	strh	r0, [r4, #12]
 80074ec:	2d00      	cmp	r5, #0
 80074ee:	d130      	bne.n	8007552 <setvbuf+0x106>
 80074f0:	9d00      	ldr	r5, [sp, #0]
 80074f2:	4628      	mov	r0, r5
 80074f4:	f000 fb50 	bl	8007b98 <malloc>
 80074f8:	4606      	mov	r6, r0
 80074fa:	2800      	cmp	r0, #0
 80074fc:	d155      	bne.n	80075aa <setvbuf+0x15e>
 80074fe:	f8dd 9000 	ldr.w	r9, [sp]
 8007502:	45a9      	cmp	r9, r5
 8007504:	d14a      	bne.n	800759c <setvbuf+0x150>
 8007506:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800750a:	2200      	movs	r2, #0
 800750c:	60a2      	str	r2, [r4, #8]
 800750e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007512:	6022      	str	r2, [r4, #0]
 8007514:	6122      	str	r2, [r4, #16]
 8007516:	2201      	movs	r2, #1
 8007518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800751c:	6162      	str	r2, [r4, #20]
 800751e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007520:	f043 0302 	orr.w	r3, r3, #2
 8007524:	07d2      	lsls	r2, r2, #31
 8007526:	81a3      	strh	r3, [r4, #12]
 8007528:	d405      	bmi.n	8007536 <setvbuf+0xea>
 800752a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800752e:	d102      	bne.n	8007536 <setvbuf+0xea>
 8007530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007532:	f000 faca 	bl	8007aca <__retarget_lock_release_recursive>
 8007536:	4628      	mov	r0, r5
 8007538:	b003      	add	sp, #12
 800753a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800753e:	4b24      	ldr	r3, [pc, #144]	; (80075d0 <setvbuf+0x184>)
 8007540:	429c      	cmp	r4, r3
 8007542:	d101      	bne.n	8007548 <setvbuf+0xfc>
 8007544:	68bc      	ldr	r4, [r7, #8]
 8007546:	e793      	b.n	8007470 <setvbuf+0x24>
 8007548:	4b22      	ldr	r3, [pc, #136]	; (80075d4 <setvbuf+0x188>)
 800754a:	429c      	cmp	r4, r3
 800754c:	bf08      	it	eq
 800754e:	68fc      	ldreq	r4, [r7, #12]
 8007550:	e78e      	b.n	8007470 <setvbuf+0x24>
 8007552:	2e00      	cmp	r6, #0
 8007554:	d0cd      	beq.n	80074f2 <setvbuf+0xa6>
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	b913      	cbnz	r3, 8007560 <setvbuf+0x114>
 800755a:	4638      	mov	r0, r7
 800755c:	f000 fa16 	bl	800798c <__sinit>
 8007560:	f1b8 0f01 	cmp.w	r8, #1
 8007564:	bf08      	it	eq
 8007566:	89a3      	ldrheq	r3, [r4, #12]
 8007568:	6026      	str	r6, [r4, #0]
 800756a:	bf04      	itt	eq
 800756c:	f043 0301 	orreq.w	r3, r3, #1
 8007570:	81a3      	strheq	r3, [r4, #12]
 8007572:	89a2      	ldrh	r2, [r4, #12]
 8007574:	f012 0308 	ands.w	r3, r2, #8
 8007578:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800757c:	d01c      	beq.n	80075b8 <setvbuf+0x16c>
 800757e:	07d3      	lsls	r3, r2, #31
 8007580:	bf41      	itttt	mi
 8007582:	2300      	movmi	r3, #0
 8007584:	426d      	negmi	r5, r5
 8007586:	60a3      	strmi	r3, [r4, #8]
 8007588:	61a5      	strmi	r5, [r4, #24]
 800758a:	bf58      	it	pl
 800758c:	60a5      	strpl	r5, [r4, #8]
 800758e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007590:	f015 0501 	ands.w	r5, r5, #1
 8007594:	d115      	bne.n	80075c2 <setvbuf+0x176>
 8007596:	f412 7f00 	tst.w	r2, #512	; 0x200
 800759a:	e7c8      	b.n	800752e <setvbuf+0xe2>
 800759c:	4648      	mov	r0, r9
 800759e:	f000 fafb 	bl	8007b98 <malloc>
 80075a2:	4606      	mov	r6, r0
 80075a4:	2800      	cmp	r0, #0
 80075a6:	d0ae      	beq.n	8007506 <setvbuf+0xba>
 80075a8:	464d      	mov	r5, r9
 80075aa:	89a3      	ldrh	r3, [r4, #12]
 80075ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075b0:	81a3      	strh	r3, [r4, #12]
 80075b2:	e7d0      	b.n	8007556 <setvbuf+0x10a>
 80075b4:	2500      	movs	r5, #0
 80075b6:	e7a8      	b.n	800750a <setvbuf+0xbe>
 80075b8:	60a3      	str	r3, [r4, #8]
 80075ba:	e7e8      	b.n	800758e <setvbuf+0x142>
 80075bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80075c0:	e7b9      	b.n	8007536 <setvbuf+0xea>
 80075c2:	2500      	movs	r5, #0
 80075c4:	e7b7      	b.n	8007536 <setvbuf+0xea>
 80075c6:	bf00      	nop
 80075c8:	2000000c 	.word	0x2000000c
 80075cc:	08008c08 	.word	0x08008c08
 80075d0:	08008c28 	.word	0x08008c28
 80075d4:	08008be8 	.word	0x08008be8

080075d8 <__swbuf_r>:
 80075d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075da:	460e      	mov	r6, r1
 80075dc:	4614      	mov	r4, r2
 80075de:	4605      	mov	r5, r0
 80075e0:	b118      	cbz	r0, 80075ea <__swbuf_r+0x12>
 80075e2:	6983      	ldr	r3, [r0, #24]
 80075e4:	b90b      	cbnz	r3, 80075ea <__swbuf_r+0x12>
 80075e6:	f000 f9d1 	bl	800798c <__sinit>
 80075ea:	4b21      	ldr	r3, [pc, #132]	; (8007670 <__swbuf_r+0x98>)
 80075ec:	429c      	cmp	r4, r3
 80075ee:	d12b      	bne.n	8007648 <__swbuf_r+0x70>
 80075f0:	686c      	ldr	r4, [r5, #4]
 80075f2:	69a3      	ldr	r3, [r4, #24]
 80075f4:	60a3      	str	r3, [r4, #8]
 80075f6:	89a3      	ldrh	r3, [r4, #12]
 80075f8:	071a      	lsls	r2, r3, #28
 80075fa:	d52f      	bpl.n	800765c <__swbuf_r+0x84>
 80075fc:	6923      	ldr	r3, [r4, #16]
 80075fe:	b36b      	cbz	r3, 800765c <__swbuf_r+0x84>
 8007600:	6923      	ldr	r3, [r4, #16]
 8007602:	6820      	ldr	r0, [r4, #0]
 8007604:	1ac0      	subs	r0, r0, r3
 8007606:	6963      	ldr	r3, [r4, #20]
 8007608:	b2f6      	uxtb	r6, r6
 800760a:	4283      	cmp	r3, r0
 800760c:	4637      	mov	r7, r6
 800760e:	dc04      	bgt.n	800761a <__swbuf_r+0x42>
 8007610:	4621      	mov	r1, r4
 8007612:	4628      	mov	r0, r5
 8007614:	f000 f926 	bl	8007864 <_fflush_r>
 8007618:	bb30      	cbnz	r0, 8007668 <__swbuf_r+0x90>
 800761a:	68a3      	ldr	r3, [r4, #8]
 800761c:	3b01      	subs	r3, #1
 800761e:	60a3      	str	r3, [r4, #8]
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	6022      	str	r2, [r4, #0]
 8007626:	701e      	strb	r6, [r3, #0]
 8007628:	6963      	ldr	r3, [r4, #20]
 800762a:	3001      	adds	r0, #1
 800762c:	4283      	cmp	r3, r0
 800762e:	d004      	beq.n	800763a <__swbuf_r+0x62>
 8007630:	89a3      	ldrh	r3, [r4, #12]
 8007632:	07db      	lsls	r3, r3, #31
 8007634:	d506      	bpl.n	8007644 <__swbuf_r+0x6c>
 8007636:	2e0a      	cmp	r6, #10
 8007638:	d104      	bne.n	8007644 <__swbuf_r+0x6c>
 800763a:	4621      	mov	r1, r4
 800763c:	4628      	mov	r0, r5
 800763e:	f000 f911 	bl	8007864 <_fflush_r>
 8007642:	b988      	cbnz	r0, 8007668 <__swbuf_r+0x90>
 8007644:	4638      	mov	r0, r7
 8007646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007648:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <__swbuf_r+0x9c>)
 800764a:	429c      	cmp	r4, r3
 800764c:	d101      	bne.n	8007652 <__swbuf_r+0x7a>
 800764e:	68ac      	ldr	r4, [r5, #8]
 8007650:	e7cf      	b.n	80075f2 <__swbuf_r+0x1a>
 8007652:	4b09      	ldr	r3, [pc, #36]	; (8007678 <__swbuf_r+0xa0>)
 8007654:	429c      	cmp	r4, r3
 8007656:	bf08      	it	eq
 8007658:	68ec      	ldreq	r4, [r5, #12]
 800765a:	e7ca      	b.n	80075f2 <__swbuf_r+0x1a>
 800765c:	4621      	mov	r1, r4
 800765e:	4628      	mov	r0, r5
 8007660:	f000 f80c 	bl	800767c <__swsetup_r>
 8007664:	2800      	cmp	r0, #0
 8007666:	d0cb      	beq.n	8007600 <__swbuf_r+0x28>
 8007668:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800766c:	e7ea      	b.n	8007644 <__swbuf_r+0x6c>
 800766e:	bf00      	nop
 8007670:	08008c08 	.word	0x08008c08
 8007674:	08008c28 	.word	0x08008c28
 8007678:	08008be8 	.word	0x08008be8

0800767c <__swsetup_r>:
 800767c:	4b32      	ldr	r3, [pc, #200]	; (8007748 <__swsetup_r+0xcc>)
 800767e:	b570      	push	{r4, r5, r6, lr}
 8007680:	681d      	ldr	r5, [r3, #0]
 8007682:	4606      	mov	r6, r0
 8007684:	460c      	mov	r4, r1
 8007686:	b125      	cbz	r5, 8007692 <__swsetup_r+0x16>
 8007688:	69ab      	ldr	r3, [r5, #24]
 800768a:	b913      	cbnz	r3, 8007692 <__swsetup_r+0x16>
 800768c:	4628      	mov	r0, r5
 800768e:	f000 f97d 	bl	800798c <__sinit>
 8007692:	4b2e      	ldr	r3, [pc, #184]	; (800774c <__swsetup_r+0xd0>)
 8007694:	429c      	cmp	r4, r3
 8007696:	d10f      	bne.n	80076b8 <__swsetup_r+0x3c>
 8007698:	686c      	ldr	r4, [r5, #4]
 800769a:	89a3      	ldrh	r3, [r4, #12]
 800769c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076a0:	0719      	lsls	r1, r3, #28
 80076a2:	d42c      	bmi.n	80076fe <__swsetup_r+0x82>
 80076a4:	06dd      	lsls	r5, r3, #27
 80076a6:	d411      	bmi.n	80076cc <__swsetup_r+0x50>
 80076a8:	2309      	movs	r3, #9
 80076aa:	6033      	str	r3, [r6, #0]
 80076ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80076b0:	81a3      	strh	r3, [r4, #12]
 80076b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076b6:	e03e      	b.n	8007736 <__swsetup_r+0xba>
 80076b8:	4b25      	ldr	r3, [pc, #148]	; (8007750 <__swsetup_r+0xd4>)
 80076ba:	429c      	cmp	r4, r3
 80076bc:	d101      	bne.n	80076c2 <__swsetup_r+0x46>
 80076be:	68ac      	ldr	r4, [r5, #8]
 80076c0:	e7eb      	b.n	800769a <__swsetup_r+0x1e>
 80076c2:	4b24      	ldr	r3, [pc, #144]	; (8007754 <__swsetup_r+0xd8>)
 80076c4:	429c      	cmp	r4, r3
 80076c6:	bf08      	it	eq
 80076c8:	68ec      	ldreq	r4, [r5, #12]
 80076ca:	e7e6      	b.n	800769a <__swsetup_r+0x1e>
 80076cc:	0758      	lsls	r0, r3, #29
 80076ce:	d512      	bpl.n	80076f6 <__swsetup_r+0x7a>
 80076d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076d2:	b141      	cbz	r1, 80076e6 <__swsetup_r+0x6a>
 80076d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076d8:	4299      	cmp	r1, r3
 80076da:	d002      	beq.n	80076e2 <__swsetup_r+0x66>
 80076dc:	4630      	mov	r0, r6
 80076de:	f000 fa63 	bl	8007ba8 <_free_r>
 80076e2:	2300      	movs	r3, #0
 80076e4:	6363      	str	r3, [r4, #52]	; 0x34
 80076e6:	89a3      	ldrh	r3, [r4, #12]
 80076e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076ec:	81a3      	strh	r3, [r4, #12]
 80076ee:	2300      	movs	r3, #0
 80076f0:	6063      	str	r3, [r4, #4]
 80076f2:	6923      	ldr	r3, [r4, #16]
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	89a3      	ldrh	r3, [r4, #12]
 80076f8:	f043 0308 	orr.w	r3, r3, #8
 80076fc:	81a3      	strh	r3, [r4, #12]
 80076fe:	6923      	ldr	r3, [r4, #16]
 8007700:	b94b      	cbnz	r3, 8007716 <__swsetup_r+0x9a>
 8007702:	89a3      	ldrh	r3, [r4, #12]
 8007704:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800770c:	d003      	beq.n	8007716 <__swsetup_r+0x9a>
 800770e:	4621      	mov	r1, r4
 8007710:	4630      	mov	r0, r6
 8007712:	f000 fa01 	bl	8007b18 <__smakebuf_r>
 8007716:	89a0      	ldrh	r0, [r4, #12]
 8007718:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800771c:	f010 0301 	ands.w	r3, r0, #1
 8007720:	d00a      	beq.n	8007738 <__swsetup_r+0xbc>
 8007722:	2300      	movs	r3, #0
 8007724:	60a3      	str	r3, [r4, #8]
 8007726:	6963      	ldr	r3, [r4, #20]
 8007728:	425b      	negs	r3, r3
 800772a:	61a3      	str	r3, [r4, #24]
 800772c:	6923      	ldr	r3, [r4, #16]
 800772e:	b943      	cbnz	r3, 8007742 <__swsetup_r+0xc6>
 8007730:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007734:	d1ba      	bne.n	80076ac <__swsetup_r+0x30>
 8007736:	bd70      	pop	{r4, r5, r6, pc}
 8007738:	0781      	lsls	r1, r0, #30
 800773a:	bf58      	it	pl
 800773c:	6963      	ldrpl	r3, [r4, #20]
 800773e:	60a3      	str	r3, [r4, #8]
 8007740:	e7f4      	b.n	800772c <__swsetup_r+0xb0>
 8007742:	2000      	movs	r0, #0
 8007744:	e7f7      	b.n	8007736 <__swsetup_r+0xba>
 8007746:	bf00      	nop
 8007748:	2000000c 	.word	0x2000000c
 800774c:	08008c08 	.word	0x08008c08
 8007750:	08008c28 	.word	0x08008c28
 8007754:	08008be8 	.word	0x08008be8

08007758 <__sflush_r>:
 8007758:	898a      	ldrh	r2, [r1, #12]
 800775a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800775e:	4605      	mov	r5, r0
 8007760:	0710      	lsls	r0, r2, #28
 8007762:	460c      	mov	r4, r1
 8007764:	d458      	bmi.n	8007818 <__sflush_r+0xc0>
 8007766:	684b      	ldr	r3, [r1, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	dc05      	bgt.n	8007778 <__sflush_r+0x20>
 800776c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800776e:	2b00      	cmp	r3, #0
 8007770:	dc02      	bgt.n	8007778 <__sflush_r+0x20>
 8007772:	2000      	movs	r0, #0
 8007774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800777a:	2e00      	cmp	r6, #0
 800777c:	d0f9      	beq.n	8007772 <__sflush_r+0x1a>
 800777e:	2300      	movs	r3, #0
 8007780:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007784:	682f      	ldr	r7, [r5, #0]
 8007786:	602b      	str	r3, [r5, #0]
 8007788:	d032      	beq.n	80077f0 <__sflush_r+0x98>
 800778a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800778c:	89a3      	ldrh	r3, [r4, #12]
 800778e:	075a      	lsls	r2, r3, #29
 8007790:	d505      	bpl.n	800779e <__sflush_r+0x46>
 8007792:	6863      	ldr	r3, [r4, #4]
 8007794:	1ac0      	subs	r0, r0, r3
 8007796:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007798:	b10b      	cbz	r3, 800779e <__sflush_r+0x46>
 800779a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800779c:	1ac0      	subs	r0, r0, r3
 800779e:	2300      	movs	r3, #0
 80077a0:	4602      	mov	r2, r0
 80077a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077a4:	6a21      	ldr	r1, [r4, #32]
 80077a6:	4628      	mov	r0, r5
 80077a8:	47b0      	blx	r6
 80077aa:	1c43      	adds	r3, r0, #1
 80077ac:	89a3      	ldrh	r3, [r4, #12]
 80077ae:	d106      	bne.n	80077be <__sflush_r+0x66>
 80077b0:	6829      	ldr	r1, [r5, #0]
 80077b2:	291d      	cmp	r1, #29
 80077b4:	d82c      	bhi.n	8007810 <__sflush_r+0xb8>
 80077b6:	4a2a      	ldr	r2, [pc, #168]	; (8007860 <__sflush_r+0x108>)
 80077b8:	40ca      	lsrs	r2, r1
 80077ba:	07d6      	lsls	r6, r2, #31
 80077bc:	d528      	bpl.n	8007810 <__sflush_r+0xb8>
 80077be:	2200      	movs	r2, #0
 80077c0:	6062      	str	r2, [r4, #4]
 80077c2:	04d9      	lsls	r1, r3, #19
 80077c4:	6922      	ldr	r2, [r4, #16]
 80077c6:	6022      	str	r2, [r4, #0]
 80077c8:	d504      	bpl.n	80077d4 <__sflush_r+0x7c>
 80077ca:	1c42      	adds	r2, r0, #1
 80077cc:	d101      	bne.n	80077d2 <__sflush_r+0x7a>
 80077ce:	682b      	ldr	r3, [r5, #0]
 80077d0:	b903      	cbnz	r3, 80077d4 <__sflush_r+0x7c>
 80077d2:	6560      	str	r0, [r4, #84]	; 0x54
 80077d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077d6:	602f      	str	r7, [r5, #0]
 80077d8:	2900      	cmp	r1, #0
 80077da:	d0ca      	beq.n	8007772 <__sflush_r+0x1a>
 80077dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077e0:	4299      	cmp	r1, r3
 80077e2:	d002      	beq.n	80077ea <__sflush_r+0x92>
 80077e4:	4628      	mov	r0, r5
 80077e6:	f000 f9df 	bl	8007ba8 <_free_r>
 80077ea:	2000      	movs	r0, #0
 80077ec:	6360      	str	r0, [r4, #52]	; 0x34
 80077ee:	e7c1      	b.n	8007774 <__sflush_r+0x1c>
 80077f0:	6a21      	ldr	r1, [r4, #32]
 80077f2:	2301      	movs	r3, #1
 80077f4:	4628      	mov	r0, r5
 80077f6:	47b0      	blx	r6
 80077f8:	1c41      	adds	r1, r0, #1
 80077fa:	d1c7      	bne.n	800778c <__sflush_r+0x34>
 80077fc:	682b      	ldr	r3, [r5, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d0c4      	beq.n	800778c <__sflush_r+0x34>
 8007802:	2b1d      	cmp	r3, #29
 8007804:	d001      	beq.n	800780a <__sflush_r+0xb2>
 8007806:	2b16      	cmp	r3, #22
 8007808:	d101      	bne.n	800780e <__sflush_r+0xb6>
 800780a:	602f      	str	r7, [r5, #0]
 800780c:	e7b1      	b.n	8007772 <__sflush_r+0x1a>
 800780e:	89a3      	ldrh	r3, [r4, #12]
 8007810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007814:	81a3      	strh	r3, [r4, #12]
 8007816:	e7ad      	b.n	8007774 <__sflush_r+0x1c>
 8007818:	690f      	ldr	r7, [r1, #16]
 800781a:	2f00      	cmp	r7, #0
 800781c:	d0a9      	beq.n	8007772 <__sflush_r+0x1a>
 800781e:	0793      	lsls	r3, r2, #30
 8007820:	680e      	ldr	r6, [r1, #0]
 8007822:	bf08      	it	eq
 8007824:	694b      	ldreq	r3, [r1, #20]
 8007826:	600f      	str	r7, [r1, #0]
 8007828:	bf18      	it	ne
 800782a:	2300      	movne	r3, #0
 800782c:	eba6 0807 	sub.w	r8, r6, r7
 8007830:	608b      	str	r3, [r1, #8]
 8007832:	f1b8 0f00 	cmp.w	r8, #0
 8007836:	dd9c      	ble.n	8007772 <__sflush_r+0x1a>
 8007838:	6a21      	ldr	r1, [r4, #32]
 800783a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800783c:	4643      	mov	r3, r8
 800783e:	463a      	mov	r2, r7
 8007840:	4628      	mov	r0, r5
 8007842:	47b0      	blx	r6
 8007844:	2800      	cmp	r0, #0
 8007846:	dc06      	bgt.n	8007856 <__sflush_r+0xfe>
 8007848:	89a3      	ldrh	r3, [r4, #12]
 800784a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800784e:	81a3      	strh	r3, [r4, #12]
 8007850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007854:	e78e      	b.n	8007774 <__sflush_r+0x1c>
 8007856:	4407      	add	r7, r0
 8007858:	eba8 0800 	sub.w	r8, r8, r0
 800785c:	e7e9      	b.n	8007832 <__sflush_r+0xda>
 800785e:	bf00      	nop
 8007860:	20400001 	.word	0x20400001

08007864 <_fflush_r>:
 8007864:	b538      	push	{r3, r4, r5, lr}
 8007866:	690b      	ldr	r3, [r1, #16]
 8007868:	4605      	mov	r5, r0
 800786a:	460c      	mov	r4, r1
 800786c:	b913      	cbnz	r3, 8007874 <_fflush_r+0x10>
 800786e:	2500      	movs	r5, #0
 8007870:	4628      	mov	r0, r5
 8007872:	bd38      	pop	{r3, r4, r5, pc}
 8007874:	b118      	cbz	r0, 800787e <_fflush_r+0x1a>
 8007876:	6983      	ldr	r3, [r0, #24]
 8007878:	b90b      	cbnz	r3, 800787e <_fflush_r+0x1a>
 800787a:	f000 f887 	bl	800798c <__sinit>
 800787e:	4b14      	ldr	r3, [pc, #80]	; (80078d0 <_fflush_r+0x6c>)
 8007880:	429c      	cmp	r4, r3
 8007882:	d11b      	bne.n	80078bc <_fflush_r+0x58>
 8007884:	686c      	ldr	r4, [r5, #4]
 8007886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d0ef      	beq.n	800786e <_fflush_r+0xa>
 800788e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007890:	07d0      	lsls	r0, r2, #31
 8007892:	d404      	bmi.n	800789e <_fflush_r+0x3a>
 8007894:	0599      	lsls	r1, r3, #22
 8007896:	d402      	bmi.n	800789e <_fflush_r+0x3a>
 8007898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800789a:	f000 f915 	bl	8007ac8 <__retarget_lock_acquire_recursive>
 800789e:	4628      	mov	r0, r5
 80078a0:	4621      	mov	r1, r4
 80078a2:	f7ff ff59 	bl	8007758 <__sflush_r>
 80078a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078a8:	07da      	lsls	r2, r3, #31
 80078aa:	4605      	mov	r5, r0
 80078ac:	d4e0      	bmi.n	8007870 <_fflush_r+0xc>
 80078ae:	89a3      	ldrh	r3, [r4, #12]
 80078b0:	059b      	lsls	r3, r3, #22
 80078b2:	d4dd      	bmi.n	8007870 <_fflush_r+0xc>
 80078b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078b6:	f000 f908 	bl	8007aca <__retarget_lock_release_recursive>
 80078ba:	e7d9      	b.n	8007870 <_fflush_r+0xc>
 80078bc:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <_fflush_r+0x70>)
 80078be:	429c      	cmp	r4, r3
 80078c0:	d101      	bne.n	80078c6 <_fflush_r+0x62>
 80078c2:	68ac      	ldr	r4, [r5, #8]
 80078c4:	e7df      	b.n	8007886 <_fflush_r+0x22>
 80078c6:	4b04      	ldr	r3, [pc, #16]	; (80078d8 <_fflush_r+0x74>)
 80078c8:	429c      	cmp	r4, r3
 80078ca:	bf08      	it	eq
 80078cc:	68ec      	ldreq	r4, [r5, #12]
 80078ce:	e7da      	b.n	8007886 <_fflush_r+0x22>
 80078d0:	08008c08 	.word	0x08008c08
 80078d4:	08008c28 	.word	0x08008c28
 80078d8:	08008be8 	.word	0x08008be8

080078dc <std>:
 80078dc:	2300      	movs	r3, #0
 80078de:	b510      	push	{r4, lr}
 80078e0:	4604      	mov	r4, r0
 80078e2:	e9c0 3300 	strd	r3, r3, [r0]
 80078e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078ea:	6083      	str	r3, [r0, #8]
 80078ec:	8181      	strh	r1, [r0, #12]
 80078ee:	6643      	str	r3, [r0, #100]	; 0x64
 80078f0:	81c2      	strh	r2, [r0, #14]
 80078f2:	6183      	str	r3, [r0, #24]
 80078f4:	4619      	mov	r1, r3
 80078f6:	2208      	movs	r2, #8
 80078f8:	305c      	adds	r0, #92	; 0x5c
 80078fa:	f7ff fd09 	bl	8007310 <memset>
 80078fe:	4b05      	ldr	r3, [pc, #20]	; (8007914 <std+0x38>)
 8007900:	6263      	str	r3, [r4, #36]	; 0x24
 8007902:	4b05      	ldr	r3, [pc, #20]	; (8007918 <std+0x3c>)
 8007904:	62a3      	str	r3, [r4, #40]	; 0x28
 8007906:	4b05      	ldr	r3, [pc, #20]	; (800791c <std+0x40>)
 8007908:	62e3      	str	r3, [r4, #44]	; 0x2c
 800790a:	4b05      	ldr	r3, [pc, #20]	; (8007920 <std+0x44>)
 800790c:	6224      	str	r4, [r4, #32]
 800790e:	6323      	str	r3, [r4, #48]	; 0x30
 8007910:	bd10      	pop	{r4, pc}
 8007912:	bf00      	nop
 8007914:	08008365 	.word	0x08008365
 8007918:	08008387 	.word	0x08008387
 800791c:	080083bf 	.word	0x080083bf
 8007920:	080083e3 	.word	0x080083e3

08007924 <_cleanup_r>:
 8007924:	4901      	ldr	r1, [pc, #4]	; (800792c <_cleanup_r+0x8>)
 8007926:	f000 b8af 	b.w	8007a88 <_fwalk_reent>
 800792a:	bf00      	nop
 800792c:	08007865 	.word	0x08007865

08007930 <__sfmoreglue>:
 8007930:	b570      	push	{r4, r5, r6, lr}
 8007932:	2268      	movs	r2, #104	; 0x68
 8007934:	1e4d      	subs	r5, r1, #1
 8007936:	4355      	muls	r5, r2
 8007938:	460e      	mov	r6, r1
 800793a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800793e:	f000 f99f 	bl	8007c80 <_malloc_r>
 8007942:	4604      	mov	r4, r0
 8007944:	b140      	cbz	r0, 8007958 <__sfmoreglue+0x28>
 8007946:	2100      	movs	r1, #0
 8007948:	e9c0 1600 	strd	r1, r6, [r0]
 800794c:	300c      	adds	r0, #12
 800794e:	60a0      	str	r0, [r4, #8]
 8007950:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007954:	f7ff fcdc 	bl	8007310 <memset>
 8007958:	4620      	mov	r0, r4
 800795a:	bd70      	pop	{r4, r5, r6, pc}

0800795c <__sfp_lock_acquire>:
 800795c:	4801      	ldr	r0, [pc, #4]	; (8007964 <__sfp_lock_acquire+0x8>)
 800795e:	f000 b8b3 	b.w	8007ac8 <__retarget_lock_acquire_recursive>
 8007962:	bf00      	nop
 8007964:	20000909 	.word	0x20000909

08007968 <__sfp_lock_release>:
 8007968:	4801      	ldr	r0, [pc, #4]	; (8007970 <__sfp_lock_release+0x8>)
 800796a:	f000 b8ae 	b.w	8007aca <__retarget_lock_release_recursive>
 800796e:	bf00      	nop
 8007970:	20000909 	.word	0x20000909

08007974 <__sinit_lock_acquire>:
 8007974:	4801      	ldr	r0, [pc, #4]	; (800797c <__sinit_lock_acquire+0x8>)
 8007976:	f000 b8a7 	b.w	8007ac8 <__retarget_lock_acquire_recursive>
 800797a:	bf00      	nop
 800797c:	2000090a 	.word	0x2000090a

08007980 <__sinit_lock_release>:
 8007980:	4801      	ldr	r0, [pc, #4]	; (8007988 <__sinit_lock_release+0x8>)
 8007982:	f000 b8a2 	b.w	8007aca <__retarget_lock_release_recursive>
 8007986:	bf00      	nop
 8007988:	2000090a 	.word	0x2000090a

0800798c <__sinit>:
 800798c:	b510      	push	{r4, lr}
 800798e:	4604      	mov	r4, r0
 8007990:	f7ff fff0 	bl	8007974 <__sinit_lock_acquire>
 8007994:	69a3      	ldr	r3, [r4, #24]
 8007996:	b11b      	cbz	r3, 80079a0 <__sinit+0x14>
 8007998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800799c:	f7ff bff0 	b.w	8007980 <__sinit_lock_release>
 80079a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80079a4:	6523      	str	r3, [r4, #80]	; 0x50
 80079a6:	4b13      	ldr	r3, [pc, #76]	; (80079f4 <__sinit+0x68>)
 80079a8:	4a13      	ldr	r2, [pc, #76]	; (80079f8 <__sinit+0x6c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80079ae:	42a3      	cmp	r3, r4
 80079b0:	bf04      	itt	eq
 80079b2:	2301      	moveq	r3, #1
 80079b4:	61a3      	streq	r3, [r4, #24]
 80079b6:	4620      	mov	r0, r4
 80079b8:	f000 f820 	bl	80079fc <__sfp>
 80079bc:	6060      	str	r0, [r4, #4]
 80079be:	4620      	mov	r0, r4
 80079c0:	f000 f81c 	bl	80079fc <__sfp>
 80079c4:	60a0      	str	r0, [r4, #8]
 80079c6:	4620      	mov	r0, r4
 80079c8:	f000 f818 	bl	80079fc <__sfp>
 80079cc:	2200      	movs	r2, #0
 80079ce:	60e0      	str	r0, [r4, #12]
 80079d0:	2104      	movs	r1, #4
 80079d2:	6860      	ldr	r0, [r4, #4]
 80079d4:	f7ff ff82 	bl	80078dc <std>
 80079d8:	68a0      	ldr	r0, [r4, #8]
 80079da:	2201      	movs	r2, #1
 80079dc:	2109      	movs	r1, #9
 80079de:	f7ff ff7d 	bl	80078dc <std>
 80079e2:	68e0      	ldr	r0, [r4, #12]
 80079e4:	2202      	movs	r2, #2
 80079e6:	2112      	movs	r1, #18
 80079e8:	f7ff ff78 	bl	80078dc <std>
 80079ec:	2301      	movs	r3, #1
 80079ee:	61a3      	str	r3, [r4, #24]
 80079f0:	e7d2      	b.n	8007998 <__sinit+0xc>
 80079f2:	bf00      	nop
 80079f4:	08008be4 	.word	0x08008be4
 80079f8:	08007925 	.word	0x08007925

080079fc <__sfp>:
 80079fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fe:	4607      	mov	r7, r0
 8007a00:	f7ff ffac 	bl	800795c <__sfp_lock_acquire>
 8007a04:	4b1e      	ldr	r3, [pc, #120]	; (8007a80 <__sfp+0x84>)
 8007a06:	681e      	ldr	r6, [r3, #0]
 8007a08:	69b3      	ldr	r3, [r6, #24]
 8007a0a:	b913      	cbnz	r3, 8007a12 <__sfp+0x16>
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	f7ff ffbd 	bl	800798c <__sinit>
 8007a12:	3648      	adds	r6, #72	; 0x48
 8007a14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	d503      	bpl.n	8007a24 <__sfp+0x28>
 8007a1c:	6833      	ldr	r3, [r6, #0]
 8007a1e:	b30b      	cbz	r3, 8007a64 <__sfp+0x68>
 8007a20:	6836      	ldr	r6, [r6, #0]
 8007a22:	e7f7      	b.n	8007a14 <__sfp+0x18>
 8007a24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a28:	b9d5      	cbnz	r5, 8007a60 <__sfp+0x64>
 8007a2a:	4b16      	ldr	r3, [pc, #88]	; (8007a84 <__sfp+0x88>)
 8007a2c:	60e3      	str	r3, [r4, #12]
 8007a2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a32:	6665      	str	r5, [r4, #100]	; 0x64
 8007a34:	f000 f847 	bl	8007ac6 <__retarget_lock_init_recursive>
 8007a38:	f7ff ff96 	bl	8007968 <__sfp_lock_release>
 8007a3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a44:	6025      	str	r5, [r4, #0]
 8007a46:	61a5      	str	r5, [r4, #24]
 8007a48:	2208      	movs	r2, #8
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a50:	f7ff fc5e 	bl	8007310 <memset>
 8007a54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a60:	3468      	adds	r4, #104	; 0x68
 8007a62:	e7d9      	b.n	8007a18 <__sfp+0x1c>
 8007a64:	2104      	movs	r1, #4
 8007a66:	4638      	mov	r0, r7
 8007a68:	f7ff ff62 	bl	8007930 <__sfmoreglue>
 8007a6c:	4604      	mov	r4, r0
 8007a6e:	6030      	str	r0, [r6, #0]
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d1d5      	bne.n	8007a20 <__sfp+0x24>
 8007a74:	f7ff ff78 	bl	8007968 <__sfp_lock_release>
 8007a78:	230c      	movs	r3, #12
 8007a7a:	603b      	str	r3, [r7, #0]
 8007a7c:	e7ee      	b.n	8007a5c <__sfp+0x60>
 8007a7e:	bf00      	nop
 8007a80:	08008be4 	.word	0x08008be4
 8007a84:	ffff0001 	.word	0xffff0001

08007a88 <_fwalk_reent>:
 8007a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a8c:	4606      	mov	r6, r0
 8007a8e:	4688      	mov	r8, r1
 8007a90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a94:	2700      	movs	r7, #0
 8007a96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a9a:	f1b9 0901 	subs.w	r9, r9, #1
 8007a9e:	d505      	bpl.n	8007aac <_fwalk_reent+0x24>
 8007aa0:	6824      	ldr	r4, [r4, #0]
 8007aa2:	2c00      	cmp	r4, #0
 8007aa4:	d1f7      	bne.n	8007a96 <_fwalk_reent+0xe>
 8007aa6:	4638      	mov	r0, r7
 8007aa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aac:	89ab      	ldrh	r3, [r5, #12]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d907      	bls.n	8007ac2 <_fwalk_reent+0x3a>
 8007ab2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	d003      	beq.n	8007ac2 <_fwalk_reent+0x3a>
 8007aba:	4629      	mov	r1, r5
 8007abc:	4630      	mov	r0, r6
 8007abe:	47c0      	blx	r8
 8007ac0:	4307      	orrs	r7, r0
 8007ac2:	3568      	adds	r5, #104	; 0x68
 8007ac4:	e7e9      	b.n	8007a9a <_fwalk_reent+0x12>

08007ac6 <__retarget_lock_init_recursive>:
 8007ac6:	4770      	bx	lr

08007ac8 <__retarget_lock_acquire_recursive>:
 8007ac8:	4770      	bx	lr

08007aca <__retarget_lock_release_recursive>:
 8007aca:	4770      	bx	lr

08007acc <__swhatbuf_r>:
 8007acc:	b570      	push	{r4, r5, r6, lr}
 8007ace:	460e      	mov	r6, r1
 8007ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad4:	2900      	cmp	r1, #0
 8007ad6:	b096      	sub	sp, #88	; 0x58
 8007ad8:	4614      	mov	r4, r2
 8007ada:	461d      	mov	r5, r3
 8007adc:	da08      	bge.n	8007af0 <__swhatbuf_r+0x24>
 8007ade:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	602a      	str	r2, [r5, #0]
 8007ae6:	061a      	lsls	r2, r3, #24
 8007ae8:	d410      	bmi.n	8007b0c <__swhatbuf_r+0x40>
 8007aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007aee:	e00e      	b.n	8007b0e <__swhatbuf_r+0x42>
 8007af0:	466a      	mov	r2, sp
 8007af2:	f000 fc9d 	bl	8008430 <_fstat_r>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	dbf1      	blt.n	8007ade <__swhatbuf_r+0x12>
 8007afa:	9a01      	ldr	r2, [sp, #4]
 8007afc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b04:	425a      	negs	r2, r3
 8007b06:	415a      	adcs	r2, r3
 8007b08:	602a      	str	r2, [r5, #0]
 8007b0a:	e7ee      	b.n	8007aea <__swhatbuf_r+0x1e>
 8007b0c:	2340      	movs	r3, #64	; 0x40
 8007b0e:	2000      	movs	r0, #0
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	b016      	add	sp, #88	; 0x58
 8007b14:	bd70      	pop	{r4, r5, r6, pc}
	...

08007b18 <__smakebuf_r>:
 8007b18:	898b      	ldrh	r3, [r1, #12]
 8007b1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b1c:	079d      	lsls	r5, r3, #30
 8007b1e:	4606      	mov	r6, r0
 8007b20:	460c      	mov	r4, r1
 8007b22:	d507      	bpl.n	8007b34 <__smakebuf_r+0x1c>
 8007b24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b28:	6023      	str	r3, [r4, #0]
 8007b2a:	6123      	str	r3, [r4, #16]
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	6163      	str	r3, [r4, #20]
 8007b30:	b002      	add	sp, #8
 8007b32:	bd70      	pop	{r4, r5, r6, pc}
 8007b34:	ab01      	add	r3, sp, #4
 8007b36:	466a      	mov	r2, sp
 8007b38:	f7ff ffc8 	bl	8007acc <__swhatbuf_r>
 8007b3c:	9900      	ldr	r1, [sp, #0]
 8007b3e:	4605      	mov	r5, r0
 8007b40:	4630      	mov	r0, r6
 8007b42:	f000 f89d 	bl	8007c80 <_malloc_r>
 8007b46:	b948      	cbnz	r0, 8007b5c <__smakebuf_r+0x44>
 8007b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b4c:	059a      	lsls	r2, r3, #22
 8007b4e:	d4ef      	bmi.n	8007b30 <__smakebuf_r+0x18>
 8007b50:	f023 0303 	bic.w	r3, r3, #3
 8007b54:	f043 0302 	orr.w	r3, r3, #2
 8007b58:	81a3      	strh	r3, [r4, #12]
 8007b5a:	e7e3      	b.n	8007b24 <__smakebuf_r+0xc>
 8007b5c:	4b0d      	ldr	r3, [pc, #52]	; (8007b94 <__smakebuf_r+0x7c>)
 8007b5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b60:	89a3      	ldrh	r3, [r4, #12]
 8007b62:	6020      	str	r0, [r4, #0]
 8007b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b68:	81a3      	strh	r3, [r4, #12]
 8007b6a:	9b00      	ldr	r3, [sp, #0]
 8007b6c:	6163      	str	r3, [r4, #20]
 8007b6e:	9b01      	ldr	r3, [sp, #4]
 8007b70:	6120      	str	r0, [r4, #16]
 8007b72:	b15b      	cbz	r3, 8007b8c <__smakebuf_r+0x74>
 8007b74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f000 fc6b 	bl	8008454 <_isatty_r>
 8007b7e:	b128      	cbz	r0, 8007b8c <__smakebuf_r+0x74>
 8007b80:	89a3      	ldrh	r3, [r4, #12]
 8007b82:	f023 0303 	bic.w	r3, r3, #3
 8007b86:	f043 0301 	orr.w	r3, r3, #1
 8007b8a:	81a3      	strh	r3, [r4, #12]
 8007b8c:	89a0      	ldrh	r0, [r4, #12]
 8007b8e:	4305      	orrs	r5, r0
 8007b90:	81a5      	strh	r5, [r4, #12]
 8007b92:	e7cd      	b.n	8007b30 <__smakebuf_r+0x18>
 8007b94:	08007925 	.word	0x08007925

08007b98 <malloc>:
 8007b98:	4b02      	ldr	r3, [pc, #8]	; (8007ba4 <malloc+0xc>)
 8007b9a:	4601      	mov	r1, r0
 8007b9c:	6818      	ldr	r0, [r3, #0]
 8007b9e:	f000 b86f 	b.w	8007c80 <_malloc_r>
 8007ba2:	bf00      	nop
 8007ba4:	2000000c 	.word	0x2000000c

08007ba8 <_free_r>:
 8007ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007baa:	2900      	cmp	r1, #0
 8007bac:	d044      	beq.n	8007c38 <_free_r+0x90>
 8007bae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bb2:	9001      	str	r0, [sp, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f1a1 0404 	sub.w	r4, r1, #4
 8007bba:	bfb8      	it	lt
 8007bbc:	18e4      	addlt	r4, r4, r3
 8007bbe:	f000 fc6b 	bl	8008498 <__malloc_lock>
 8007bc2:	4a1e      	ldr	r2, [pc, #120]	; (8007c3c <_free_r+0x94>)
 8007bc4:	9801      	ldr	r0, [sp, #4]
 8007bc6:	6813      	ldr	r3, [r2, #0]
 8007bc8:	b933      	cbnz	r3, 8007bd8 <_free_r+0x30>
 8007bca:	6063      	str	r3, [r4, #4]
 8007bcc:	6014      	str	r4, [r2, #0]
 8007bce:	b003      	add	sp, #12
 8007bd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bd4:	f000 bc66 	b.w	80084a4 <__malloc_unlock>
 8007bd8:	42a3      	cmp	r3, r4
 8007bda:	d908      	bls.n	8007bee <_free_r+0x46>
 8007bdc:	6825      	ldr	r5, [r4, #0]
 8007bde:	1961      	adds	r1, r4, r5
 8007be0:	428b      	cmp	r3, r1
 8007be2:	bf01      	itttt	eq
 8007be4:	6819      	ldreq	r1, [r3, #0]
 8007be6:	685b      	ldreq	r3, [r3, #4]
 8007be8:	1949      	addeq	r1, r1, r5
 8007bea:	6021      	streq	r1, [r4, #0]
 8007bec:	e7ed      	b.n	8007bca <_free_r+0x22>
 8007bee:	461a      	mov	r2, r3
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	b10b      	cbz	r3, 8007bf8 <_free_r+0x50>
 8007bf4:	42a3      	cmp	r3, r4
 8007bf6:	d9fa      	bls.n	8007bee <_free_r+0x46>
 8007bf8:	6811      	ldr	r1, [r2, #0]
 8007bfa:	1855      	adds	r5, r2, r1
 8007bfc:	42a5      	cmp	r5, r4
 8007bfe:	d10b      	bne.n	8007c18 <_free_r+0x70>
 8007c00:	6824      	ldr	r4, [r4, #0]
 8007c02:	4421      	add	r1, r4
 8007c04:	1854      	adds	r4, r2, r1
 8007c06:	42a3      	cmp	r3, r4
 8007c08:	6011      	str	r1, [r2, #0]
 8007c0a:	d1e0      	bne.n	8007bce <_free_r+0x26>
 8007c0c:	681c      	ldr	r4, [r3, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	6053      	str	r3, [r2, #4]
 8007c12:	4421      	add	r1, r4
 8007c14:	6011      	str	r1, [r2, #0]
 8007c16:	e7da      	b.n	8007bce <_free_r+0x26>
 8007c18:	d902      	bls.n	8007c20 <_free_r+0x78>
 8007c1a:	230c      	movs	r3, #12
 8007c1c:	6003      	str	r3, [r0, #0]
 8007c1e:	e7d6      	b.n	8007bce <_free_r+0x26>
 8007c20:	6825      	ldr	r5, [r4, #0]
 8007c22:	1961      	adds	r1, r4, r5
 8007c24:	428b      	cmp	r3, r1
 8007c26:	bf04      	itt	eq
 8007c28:	6819      	ldreq	r1, [r3, #0]
 8007c2a:	685b      	ldreq	r3, [r3, #4]
 8007c2c:	6063      	str	r3, [r4, #4]
 8007c2e:	bf04      	itt	eq
 8007c30:	1949      	addeq	r1, r1, r5
 8007c32:	6021      	streq	r1, [r4, #0]
 8007c34:	6054      	str	r4, [r2, #4]
 8007c36:	e7ca      	b.n	8007bce <_free_r+0x26>
 8007c38:	b003      	add	sp, #12
 8007c3a:	bd30      	pop	{r4, r5, pc}
 8007c3c:	2000090c 	.word	0x2000090c

08007c40 <sbrk_aligned>:
 8007c40:	b570      	push	{r4, r5, r6, lr}
 8007c42:	4e0e      	ldr	r6, [pc, #56]	; (8007c7c <sbrk_aligned+0x3c>)
 8007c44:	460c      	mov	r4, r1
 8007c46:	6831      	ldr	r1, [r6, #0]
 8007c48:	4605      	mov	r5, r0
 8007c4a:	b911      	cbnz	r1, 8007c52 <sbrk_aligned+0x12>
 8007c4c:	f000 fb7a 	bl	8008344 <_sbrk_r>
 8007c50:	6030      	str	r0, [r6, #0]
 8007c52:	4621      	mov	r1, r4
 8007c54:	4628      	mov	r0, r5
 8007c56:	f000 fb75 	bl	8008344 <_sbrk_r>
 8007c5a:	1c43      	adds	r3, r0, #1
 8007c5c:	d00a      	beq.n	8007c74 <sbrk_aligned+0x34>
 8007c5e:	1cc4      	adds	r4, r0, #3
 8007c60:	f024 0403 	bic.w	r4, r4, #3
 8007c64:	42a0      	cmp	r0, r4
 8007c66:	d007      	beq.n	8007c78 <sbrk_aligned+0x38>
 8007c68:	1a21      	subs	r1, r4, r0
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	f000 fb6a 	bl	8008344 <_sbrk_r>
 8007c70:	3001      	adds	r0, #1
 8007c72:	d101      	bne.n	8007c78 <sbrk_aligned+0x38>
 8007c74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007c78:	4620      	mov	r0, r4
 8007c7a:	bd70      	pop	{r4, r5, r6, pc}
 8007c7c:	20000910 	.word	0x20000910

08007c80 <_malloc_r>:
 8007c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c84:	1ccd      	adds	r5, r1, #3
 8007c86:	f025 0503 	bic.w	r5, r5, #3
 8007c8a:	3508      	adds	r5, #8
 8007c8c:	2d0c      	cmp	r5, #12
 8007c8e:	bf38      	it	cc
 8007c90:	250c      	movcc	r5, #12
 8007c92:	2d00      	cmp	r5, #0
 8007c94:	4607      	mov	r7, r0
 8007c96:	db01      	blt.n	8007c9c <_malloc_r+0x1c>
 8007c98:	42a9      	cmp	r1, r5
 8007c9a:	d905      	bls.n	8007ca8 <_malloc_r+0x28>
 8007c9c:	230c      	movs	r3, #12
 8007c9e:	603b      	str	r3, [r7, #0]
 8007ca0:	2600      	movs	r6, #0
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ca8:	4e2e      	ldr	r6, [pc, #184]	; (8007d64 <_malloc_r+0xe4>)
 8007caa:	f000 fbf5 	bl	8008498 <__malloc_lock>
 8007cae:	6833      	ldr	r3, [r6, #0]
 8007cb0:	461c      	mov	r4, r3
 8007cb2:	bb34      	cbnz	r4, 8007d02 <_malloc_r+0x82>
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	f7ff ffc2 	bl	8007c40 <sbrk_aligned>
 8007cbc:	1c43      	adds	r3, r0, #1
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	d14d      	bne.n	8007d5e <_malloc_r+0xde>
 8007cc2:	6834      	ldr	r4, [r6, #0]
 8007cc4:	4626      	mov	r6, r4
 8007cc6:	2e00      	cmp	r6, #0
 8007cc8:	d140      	bne.n	8007d4c <_malloc_r+0xcc>
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	4631      	mov	r1, r6
 8007cce:	4638      	mov	r0, r7
 8007cd0:	eb04 0803 	add.w	r8, r4, r3
 8007cd4:	f000 fb36 	bl	8008344 <_sbrk_r>
 8007cd8:	4580      	cmp	r8, r0
 8007cda:	d13a      	bne.n	8007d52 <_malloc_r+0xd2>
 8007cdc:	6821      	ldr	r1, [r4, #0]
 8007cde:	3503      	adds	r5, #3
 8007ce0:	1a6d      	subs	r5, r5, r1
 8007ce2:	f025 0503 	bic.w	r5, r5, #3
 8007ce6:	3508      	adds	r5, #8
 8007ce8:	2d0c      	cmp	r5, #12
 8007cea:	bf38      	it	cc
 8007cec:	250c      	movcc	r5, #12
 8007cee:	4629      	mov	r1, r5
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	f7ff ffa5 	bl	8007c40 <sbrk_aligned>
 8007cf6:	3001      	adds	r0, #1
 8007cf8:	d02b      	beq.n	8007d52 <_malloc_r+0xd2>
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	442b      	add	r3, r5
 8007cfe:	6023      	str	r3, [r4, #0]
 8007d00:	e00e      	b.n	8007d20 <_malloc_r+0xa0>
 8007d02:	6822      	ldr	r2, [r4, #0]
 8007d04:	1b52      	subs	r2, r2, r5
 8007d06:	d41e      	bmi.n	8007d46 <_malloc_r+0xc6>
 8007d08:	2a0b      	cmp	r2, #11
 8007d0a:	d916      	bls.n	8007d3a <_malloc_r+0xba>
 8007d0c:	1961      	adds	r1, r4, r5
 8007d0e:	42a3      	cmp	r3, r4
 8007d10:	6025      	str	r5, [r4, #0]
 8007d12:	bf18      	it	ne
 8007d14:	6059      	strne	r1, [r3, #4]
 8007d16:	6863      	ldr	r3, [r4, #4]
 8007d18:	bf08      	it	eq
 8007d1a:	6031      	streq	r1, [r6, #0]
 8007d1c:	5162      	str	r2, [r4, r5]
 8007d1e:	604b      	str	r3, [r1, #4]
 8007d20:	4638      	mov	r0, r7
 8007d22:	f104 060b 	add.w	r6, r4, #11
 8007d26:	f000 fbbd 	bl	80084a4 <__malloc_unlock>
 8007d2a:	f026 0607 	bic.w	r6, r6, #7
 8007d2e:	1d23      	adds	r3, r4, #4
 8007d30:	1af2      	subs	r2, r6, r3
 8007d32:	d0b6      	beq.n	8007ca2 <_malloc_r+0x22>
 8007d34:	1b9b      	subs	r3, r3, r6
 8007d36:	50a3      	str	r3, [r4, r2]
 8007d38:	e7b3      	b.n	8007ca2 <_malloc_r+0x22>
 8007d3a:	6862      	ldr	r2, [r4, #4]
 8007d3c:	42a3      	cmp	r3, r4
 8007d3e:	bf0c      	ite	eq
 8007d40:	6032      	streq	r2, [r6, #0]
 8007d42:	605a      	strne	r2, [r3, #4]
 8007d44:	e7ec      	b.n	8007d20 <_malloc_r+0xa0>
 8007d46:	4623      	mov	r3, r4
 8007d48:	6864      	ldr	r4, [r4, #4]
 8007d4a:	e7b2      	b.n	8007cb2 <_malloc_r+0x32>
 8007d4c:	4634      	mov	r4, r6
 8007d4e:	6876      	ldr	r6, [r6, #4]
 8007d50:	e7b9      	b.n	8007cc6 <_malloc_r+0x46>
 8007d52:	230c      	movs	r3, #12
 8007d54:	603b      	str	r3, [r7, #0]
 8007d56:	4638      	mov	r0, r7
 8007d58:	f000 fba4 	bl	80084a4 <__malloc_unlock>
 8007d5c:	e7a1      	b.n	8007ca2 <_malloc_r+0x22>
 8007d5e:	6025      	str	r5, [r4, #0]
 8007d60:	e7de      	b.n	8007d20 <_malloc_r+0xa0>
 8007d62:	bf00      	nop
 8007d64:	2000090c 	.word	0x2000090c

08007d68 <__sfputc_r>:
 8007d68:	6893      	ldr	r3, [r2, #8]
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	b410      	push	{r4}
 8007d70:	6093      	str	r3, [r2, #8]
 8007d72:	da08      	bge.n	8007d86 <__sfputc_r+0x1e>
 8007d74:	6994      	ldr	r4, [r2, #24]
 8007d76:	42a3      	cmp	r3, r4
 8007d78:	db01      	blt.n	8007d7e <__sfputc_r+0x16>
 8007d7a:	290a      	cmp	r1, #10
 8007d7c:	d103      	bne.n	8007d86 <__sfputc_r+0x1e>
 8007d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d82:	f7ff bc29 	b.w	80075d8 <__swbuf_r>
 8007d86:	6813      	ldr	r3, [r2, #0]
 8007d88:	1c58      	adds	r0, r3, #1
 8007d8a:	6010      	str	r0, [r2, #0]
 8007d8c:	7019      	strb	r1, [r3, #0]
 8007d8e:	4608      	mov	r0, r1
 8007d90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <__sfputs_r>:
 8007d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d98:	4606      	mov	r6, r0
 8007d9a:	460f      	mov	r7, r1
 8007d9c:	4614      	mov	r4, r2
 8007d9e:	18d5      	adds	r5, r2, r3
 8007da0:	42ac      	cmp	r4, r5
 8007da2:	d101      	bne.n	8007da8 <__sfputs_r+0x12>
 8007da4:	2000      	movs	r0, #0
 8007da6:	e007      	b.n	8007db8 <__sfputs_r+0x22>
 8007da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dac:	463a      	mov	r2, r7
 8007dae:	4630      	mov	r0, r6
 8007db0:	f7ff ffda 	bl	8007d68 <__sfputc_r>
 8007db4:	1c43      	adds	r3, r0, #1
 8007db6:	d1f3      	bne.n	8007da0 <__sfputs_r+0xa>
 8007db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007dbc <_vfiprintf_r>:
 8007dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc0:	460d      	mov	r5, r1
 8007dc2:	b09d      	sub	sp, #116	; 0x74
 8007dc4:	4614      	mov	r4, r2
 8007dc6:	4698      	mov	r8, r3
 8007dc8:	4606      	mov	r6, r0
 8007dca:	b118      	cbz	r0, 8007dd4 <_vfiprintf_r+0x18>
 8007dcc:	6983      	ldr	r3, [r0, #24]
 8007dce:	b90b      	cbnz	r3, 8007dd4 <_vfiprintf_r+0x18>
 8007dd0:	f7ff fddc 	bl	800798c <__sinit>
 8007dd4:	4b89      	ldr	r3, [pc, #548]	; (8007ffc <_vfiprintf_r+0x240>)
 8007dd6:	429d      	cmp	r5, r3
 8007dd8:	d11b      	bne.n	8007e12 <_vfiprintf_r+0x56>
 8007dda:	6875      	ldr	r5, [r6, #4]
 8007ddc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dde:	07d9      	lsls	r1, r3, #31
 8007de0:	d405      	bmi.n	8007dee <_vfiprintf_r+0x32>
 8007de2:	89ab      	ldrh	r3, [r5, #12]
 8007de4:	059a      	lsls	r2, r3, #22
 8007de6:	d402      	bmi.n	8007dee <_vfiprintf_r+0x32>
 8007de8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dea:	f7ff fe6d 	bl	8007ac8 <__retarget_lock_acquire_recursive>
 8007dee:	89ab      	ldrh	r3, [r5, #12]
 8007df0:	071b      	lsls	r3, r3, #28
 8007df2:	d501      	bpl.n	8007df8 <_vfiprintf_r+0x3c>
 8007df4:	692b      	ldr	r3, [r5, #16]
 8007df6:	b9eb      	cbnz	r3, 8007e34 <_vfiprintf_r+0x78>
 8007df8:	4629      	mov	r1, r5
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f7ff fc3e 	bl	800767c <__swsetup_r>
 8007e00:	b1c0      	cbz	r0, 8007e34 <_vfiprintf_r+0x78>
 8007e02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e04:	07dc      	lsls	r4, r3, #31
 8007e06:	d50e      	bpl.n	8007e26 <_vfiprintf_r+0x6a>
 8007e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e0c:	b01d      	add	sp, #116	; 0x74
 8007e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e12:	4b7b      	ldr	r3, [pc, #492]	; (8008000 <_vfiprintf_r+0x244>)
 8007e14:	429d      	cmp	r5, r3
 8007e16:	d101      	bne.n	8007e1c <_vfiprintf_r+0x60>
 8007e18:	68b5      	ldr	r5, [r6, #8]
 8007e1a:	e7df      	b.n	8007ddc <_vfiprintf_r+0x20>
 8007e1c:	4b79      	ldr	r3, [pc, #484]	; (8008004 <_vfiprintf_r+0x248>)
 8007e1e:	429d      	cmp	r5, r3
 8007e20:	bf08      	it	eq
 8007e22:	68f5      	ldreq	r5, [r6, #12]
 8007e24:	e7da      	b.n	8007ddc <_vfiprintf_r+0x20>
 8007e26:	89ab      	ldrh	r3, [r5, #12]
 8007e28:	0598      	lsls	r0, r3, #22
 8007e2a:	d4ed      	bmi.n	8007e08 <_vfiprintf_r+0x4c>
 8007e2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e2e:	f7ff fe4c 	bl	8007aca <__retarget_lock_release_recursive>
 8007e32:	e7e9      	b.n	8007e08 <_vfiprintf_r+0x4c>
 8007e34:	2300      	movs	r3, #0
 8007e36:	9309      	str	r3, [sp, #36]	; 0x24
 8007e38:	2320      	movs	r3, #32
 8007e3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e42:	2330      	movs	r3, #48	; 0x30
 8007e44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008008 <_vfiprintf_r+0x24c>
 8007e48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e4c:	f04f 0901 	mov.w	r9, #1
 8007e50:	4623      	mov	r3, r4
 8007e52:	469a      	mov	sl, r3
 8007e54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e58:	b10a      	cbz	r2, 8007e5e <_vfiprintf_r+0xa2>
 8007e5a:	2a25      	cmp	r2, #37	; 0x25
 8007e5c:	d1f9      	bne.n	8007e52 <_vfiprintf_r+0x96>
 8007e5e:	ebba 0b04 	subs.w	fp, sl, r4
 8007e62:	d00b      	beq.n	8007e7c <_vfiprintf_r+0xc0>
 8007e64:	465b      	mov	r3, fp
 8007e66:	4622      	mov	r2, r4
 8007e68:	4629      	mov	r1, r5
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	f7ff ff93 	bl	8007d96 <__sfputs_r>
 8007e70:	3001      	adds	r0, #1
 8007e72:	f000 80aa 	beq.w	8007fca <_vfiprintf_r+0x20e>
 8007e76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e78:	445a      	add	r2, fp
 8007e7a:	9209      	str	r2, [sp, #36]	; 0x24
 8007e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 80a2 	beq.w	8007fca <_vfiprintf_r+0x20e>
 8007e86:	2300      	movs	r3, #0
 8007e88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e90:	f10a 0a01 	add.w	sl, sl, #1
 8007e94:	9304      	str	r3, [sp, #16]
 8007e96:	9307      	str	r3, [sp, #28]
 8007e98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e9c:	931a      	str	r3, [sp, #104]	; 0x68
 8007e9e:	4654      	mov	r4, sl
 8007ea0:	2205      	movs	r2, #5
 8007ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ea6:	4858      	ldr	r0, [pc, #352]	; (8008008 <_vfiprintf_r+0x24c>)
 8007ea8:	f7f8 f9b2 	bl	8000210 <memchr>
 8007eac:	9a04      	ldr	r2, [sp, #16]
 8007eae:	b9d8      	cbnz	r0, 8007ee8 <_vfiprintf_r+0x12c>
 8007eb0:	06d1      	lsls	r1, r2, #27
 8007eb2:	bf44      	itt	mi
 8007eb4:	2320      	movmi	r3, #32
 8007eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eba:	0713      	lsls	r3, r2, #28
 8007ebc:	bf44      	itt	mi
 8007ebe:	232b      	movmi	r3, #43	; 0x2b
 8007ec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8007eca:	d015      	beq.n	8007ef8 <_vfiprintf_r+0x13c>
 8007ecc:	9a07      	ldr	r2, [sp, #28]
 8007ece:	4654      	mov	r4, sl
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	f04f 0c0a 	mov.w	ip, #10
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007edc:	3b30      	subs	r3, #48	; 0x30
 8007ede:	2b09      	cmp	r3, #9
 8007ee0:	d94e      	bls.n	8007f80 <_vfiprintf_r+0x1c4>
 8007ee2:	b1b0      	cbz	r0, 8007f12 <_vfiprintf_r+0x156>
 8007ee4:	9207      	str	r2, [sp, #28]
 8007ee6:	e014      	b.n	8007f12 <_vfiprintf_r+0x156>
 8007ee8:	eba0 0308 	sub.w	r3, r0, r8
 8007eec:	fa09 f303 	lsl.w	r3, r9, r3
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	9304      	str	r3, [sp, #16]
 8007ef4:	46a2      	mov	sl, r4
 8007ef6:	e7d2      	b.n	8007e9e <_vfiprintf_r+0xe2>
 8007ef8:	9b03      	ldr	r3, [sp, #12]
 8007efa:	1d19      	adds	r1, r3, #4
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	9103      	str	r1, [sp, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	bfbb      	ittet	lt
 8007f04:	425b      	neglt	r3, r3
 8007f06:	f042 0202 	orrlt.w	r2, r2, #2
 8007f0a:	9307      	strge	r3, [sp, #28]
 8007f0c:	9307      	strlt	r3, [sp, #28]
 8007f0e:	bfb8      	it	lt
 8007f10:	9204      	strlt	r2, [sp, #16]
 8007f12:	7823      	ldrb	r3, [r4, #0]
 8007f14:	2b2e      	cmp	r3, #46	; 0x2e
 8007f16:	d10c      	bne.n	8007f32 <_vfiprintf_r+0x176>
 8007f18:	7863      	ldrb	r3, [r4, #1]
 8007f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f1c:	d135      	bne.n	8007f8a <_vfiprintf_r+0x1ce>
 8007f1e:	9b03      	ldr	r3, [sp, #12]
 8007f20:	1d1a      	adds	r2, r3, #4
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	9203      	str	r2, [sp, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	bfb8      	it	lt
 8007f2a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007f2e:	3402      	adds	r4, #2
 8007f30:	9305      	str	r3, [sp, #20]
 8007f32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008018 <_vfiprintf_r+0x25c>
 8007f36:	7821      	ldrb	r1, [r4, #0]
 8007f38:	2203      	movs	r2, #3
 8007f3a:	4650      	mov	r0, sl
 8007f3c:	f7f8 f968 	bl	8000210 <memchr>
 8007f40:	b140      	cbz	r0, 8007f54 <_vfiprintf_r+0x198>
 8007f42:	2340      	movs	r3, #64	; 0x40
 8007f44:	eba0 000a 	sub.w	r0, r0, sl
 8007f48:	fa03 f000 	lsl.w	r0, r3, r0
 8007f4c:	9b04      	ldr	r3, [sp, #16]
 8007f4e:	4303      	orrs	r3, r0
 8007f50:	3401      	adds	r4, #1
 8007f52:	9304      	str	r3, [sp, #16]
 8007f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f58:	482c      	ldr	r0, [pc, #176]	; (800800c <_vfiprintf_r+0x250>)
 8007f5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f5e:	2206      	movs	r2, #6
 8007f60:	f7f8 f956 	bl	8000210 <memchr>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d03f      	beq.n	8007fe8 <_vfiprintf_r+0x22c>
 8007f68:	4b29      	ldr	r3, [pc, #164]	; (8008010 <_vfiprintf_r+0x254>)
 8007f6a:	bb1b      	cbnz	r3, 8007fb4 <_vfiprintf_r+0x1f8>
 8007f6c:	9b03      	ldr	r3, [sp, #12]
 8007f6e:	3307      	adds	r3, #7
 8007f70:	f023 0307 	bic.w	r3, r3, #7
 8007f74:	3308      	adds	r3, #8
 8007f76:	9303      	str	r3, [sp, #12]
 8007f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f7a:	443b      	add	r3, r7
 8007f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f7e:	e767      	b.n	8007e50 <_vfiprintf_r+0x94>
 8007f80:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f84:	460c      	mov	r4, r1
 8007f86:	2001      	movs	r0, #1
 8007f88:	e7a5      	b.n	8007ed6 <_vfiprintf_r+0x11a>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	3401      	adds	r4, #1
 8007f8e:	9305      	str	r3, [sp, #20]
 8007f90:	4619      	mov	r1, r3
 8007f92:	f04f 0c0a 	mov.w	ip, #10
 8007f96:	4620      	mov	r0, r4
 8007f98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f9c:	3a30      	subs	r2, #48	; 0x30
 8007f9e:	2a09      	cmp	r2, #9
 8007fa0:	d903      	bls.n	8007faa <_vfiprintf_r+0x1ee>
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d0c5      	beq.n	8007f32 <_vfiprintf_r+0x176>
 8007fa6:	9105      	str	r1, [sp, #20]
 8007fa8:	e7c3      	b.n	8007f32 <_vfiprintf_r+0x176>
 8007faa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fae:	4604      	mov	r4, r0
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e7f0      	b.n	8007f96 <_vfiprintf_r+0x1da>
 8007fb4:	ab03      	add	r3, sp, #12
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	462a      	mov	r2, r5
 8007fba:	4b16      	ldr	r3, [pc, #88]	; (8008014 <_vfiprintf_r+0x258>)
 8007fbc:	a904      	add	r1, sp, #16
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	f3af 8000 	nop.w
 8007fc4:	4607      	mov	r7, r0
 8007fc6:	1c78      	adds	r0, r7, #1
 8007fc8:	d1d6      	bne.n	8007f78 <_vfiprintf_r+0x1bc>
 8007fca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fcc:	07d9      	lsls	r1, r3, #31
 8007fce:	d405      	bmi.n	8007fdc <_vfiprintf_r+0x220>
 8007fd0:	89ab      	ldrh	r3, [r5, #12]
 8007fd2:	059a      	lsls	r2, r3, #22
 8007fd4:	d402      	bmi.n	8007fdc <_vfiprintf_r+0x220>
 8007fd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fd8:	f7ff fd77 	bl	8007aca <__retarget_lock_release_recursive>
 8007fdc:	89ab      	ldrh	r3, [r5, #12]
 8007fde:	065b      	lsls	r3, r3, #25
 8007fe0:	f53f af12 	bmi.w	8007e08 <_vfiprintf_r+0x4c>
 8007fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fe6:	e711      	b.n	8007e0c <_vfiprintf_r+0x50>
 8007fe8:	ab03      	add	r3, sp, #12
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	462a      	mov	r2, r5
 8007fee:	4b09      	ldr	r3, [pc, #36]	; (8008014 <_vfiprintf_r+0x258>)
 8007ff0:	a904      	add	r1, sp, #16
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	f000 f880 	bl	80080f8 <_printf_i>
 8007ff8:	e7e4      	b.n	8007fc4 <_vfiprintf_r+0x208>
 8007ffa:	bf00      	nop
 8007ffc:	08008c08 	.word	0x08008c08
 8008000:	08008c28 	.word	0x08008c28
 8008004:	08008be8 	.word	0x08008be8
 8008008:	08008c48 	.word	0x08008c48
 800800c:	08008c52 	.word	0x08008c52
 8008010:	00000000 	.word	0x00000000
 8008014:	08007d97 	.word	0x08007d97
 8008018:	08008c4e 	.word	0x08008c4e

0800801c <_printf_common>:
 800801c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008020:	4616      	mov	r6, r2
 8008022:	4699      	mov	r9, r3
 8008024:	688a      	ldr	r2, [r1, #8]
 8008026:	690b      	ldr	r3, [r1, #16]
 8008028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800802c:	4293      	cmp	r3, r2
 800802e:	bfb8      	it	lt
 8008030:	4613      	movlt	r3, r2
 8008032:	6033      	str	r3, [r6, #0]
 8008034:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008038:	4607      	mov	r7, r0
 800803a:	460c      	mov	r4, r1
 800803c:	b10a      	cbz	r2, 8008042 <_printf_common+0x26>
 800803e:	3301      	adds	r3, #1
 8008040:	6033      	str	r3, [r6, #0]
 8008042:	6823      	ldr	r3, [r4, #0]
 8008044:	0699      	lsls	r1, r3, #26
 8008046:	bf42      	ittt	mi
 8008048:	6833      	ldrmi	r3, [r6, #0]
 800804a:	3302      	addmi	r3, #2
 800804c:	6033      	strmi	r3, [r6, #0]
 800804e:	6825      	ldr	r5, [r4, #0]
 8008050:	f015 0506 	ands.w	r5, r5, #6
 8008054:	d106      	bne.n	8008064 <_printf_common+0x48>
 8008056:	f104 0a19 	add.w	sl, r4, #25
 800805a:	68e3      	ldr	r3, [r4, #12]
 800805c:	6832      	ldr	r2, [r6, #0]
 800805e:	1a9b      	subs	r3, r3, r2
 8008060:	42ab      	cmp	r3, r5
 8008062:	dc26      	bgt.n	80080b2 <_printf_common+0x96>
 8008064:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008068:	1e13      	subs	r3, r2, #0
 800806a:	6822      	ldr	r2, [r4, #0]
 800806c:	bf18      	it	ne
 800806e:	2301      	movne	r3, #1
 8008070:	0692      	lsls	r2, r2, #26
 8008072:	d42b      	bmi.n	80080cc <_printf_common+0xb0>
 8008074:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008078:	4649      	mov	r1, r9
 800807a:	4638      	mov	r0, r7
 800807c:	47c0      	blx	r8
 800807e:	3001      	adds	r0, #1
 8008080:	d01e      	beq.n	80080c0 <_printf_common+0xa4>
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	68e5      	ldr	r5, [r4, #12]
 8008086:	6832      	ldr	r2, [r6, #0]
 8008088:	f003 0306 	and.w	r3, r3, #6
 800808c:	2b04      	cmp	r3, #4
 800808e:	bf08      	it	eq
 8008090:	1aad      	subeq	r5, r5, r2
 8008092:	68a3      	ldr	r3, [r4, #8]
 8008094:	6922      	ldr	r2, [r4, #16]
 8008096:	bf0c      	ite	eq
 8008098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800809c:	2500      	movne	r5, #0
 800809e:	4293      	cmp	r3, r2
 80080a0:	bfc4      	itt	gt
 80080a2:	1a9b      	subgt	r3, r3, r2
 80080a4:	18ed      	addgt	r5, r5, r3
 80080a6:	2600      	movs	r6, #0
 80080a8:	341a      	adds	r4, #26
 80080aa:	42b5      	cmp	r5, r6
 80080ac:	d11a      	bne.n	80080e4 <_printf_common+0xc8>
 80080ae:	2000      	movs	r0, #0
 80080b0:	e008      	b.n	80080c4 <_printf_common+0xa8>
 80080b2:	2301      	movs	r3, #1
 80080b4:	4652      	mov	r2, sl
 80080b6:	4649      	mov	r1, r9
 80080b8:	4638      	mov	r0, r7
 80080ba:	47c0      	blx	r8
 80080bc:	3001      	adds	r0, #1
 80080be:	d103      	bne.n	80080c8 <_printf_common+0xac>
 80080c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080c8:	3501      	adds	r5, #1
 80080ca:	e7c6      	b.n	800805a <_printf_common+0x3e>
 80080cc:	18e1      	adds	r1, r4, r3
 80080ce:	1c5a      	adds	r2, r3, #1
 80080d0:	2030      	movs	r0, #48	; 0x30
 80080d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080d6:	4422      	add	r2, r4
 80080d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080e0:	3302      	adds	r3, #2
 80080e2:	e7c7      	b.n	8008074 <_printf_common+0x58>
 80080e4:	2301      	movs	r3, #1
 80080e6:	4622      	mov	r2, r4
 80080e8:	4649      	mov	r1, r9
 80080ea:	4638      	mov	r0, r7
 80080ec:	47c0      	blx	r8
 80080ee:	3001      	adds	r0, #1
 80080f0:	d0e6      	beq.n	80080c0 <_printf_common+0xa4>
 80080f2:	3601      	adds	r6, #1
 80080f4:	e7d9      	b.n	80080aa <_printf_common+0x8e>
	...

080080f8 <_printf_i>:
 80080f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080fc:	7e0f      	ldrb	r7, [r1, #24]
 80080fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008100:	2f78      	cmp	r7, #120	; 0x78
 8008102:	4691      	mov	r9, r2
 8008104:	4680      	mov	r8, r0
 8008106:	460c      	mov	r4, r1
 8008108:	469a      	mov	sl, r3
 800810a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800810e:	d807      	bhi.n	8008120 <_printf_i+0x28>
 8008110:	2f62      	cmp	r7, #98	; 0x62
 8008112:	d80a      	bhi.n	800812a <_printf_i+0x32>
 8008114:	2f00      	cmp	r7, #0
 8008116:	f000 80d8 	beq.w	80082ca <_printf_i+0x1d2>
 800811a:	2f58      	cmp	r7, #88	; 0x58
 800811c:	f000 80a3 	beq.w	8008266 <_printf_i+0x16e>
 8008120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008128:	e03a      	b.n	80081a0 <_printf_i+0xa8>
 800812a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800812e:	2b15      	cmp	r3, #21
 8008130:	d8f6      	bhi.n	8008120 <_printf_i+0x28>
 8008132:	a101      	add	r1, pc, #4	; (adr r1, 8008138 <_printf_i+0x40>)
 8008134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008138:	08008191 	.word	0x08008191
 800813c:	080081a5 	.word	0x080081a5
 8008140:	08008121 	.word	0x08008121
 8008144:	08008121 	.word	0x08008121
 8008148:	08008121 	.word	0x08008121
 800814c:	08008121 	.word	0x08008121
 8008150:	080081a5 	.word	0x080081a5
 8008154:	08008121 	.word	0x08008121
 8008158:	08008121 	.word	0x08008121
 800815c:	08008121 	.word	0x08008121
 8008160:	08008121 	.word	0x08008121
 8008164:	080082b1 	.word	0x080082b1
 8008168:	080081d5 	.word	0x080081d5
 800816c:	08008293 	.word	0x08008293
 8008170:	08008121 	.word	0x08008121
 8008174:	08008121 	.word	0x08008121
 8008178:	080082d3 	.word	0x080082d3
 800817c:	08008121 	.word	0x08008121
 8008180:	080081d5 	.word	0x080081d5
 8008184:	08008121 	.word	0x08008121
 8008188:	08008121 	.word	0x08008121
 800818c:	0800829b 	.word	0x0800829b
 8008190:	682b      	ldr	r3, [r5, #0]
 8008192:	1d1a      	adds	r2, r3, #4
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	602a      	str	r2, [r5, #0]
 8008198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800819c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081a0:	2301      	movs	r3, #1
 80081a2:	e0a3      	b.n	80082ec <_printf_i+0x1f4>
 80081a4:	6820      	ldr	r0, [r4, #0]
 80081a6:	6829      	ldr	r1, [r5, #0]
 80081a8:	0606      	lsls	r6, r0, #24
 80081aa:	f101 0304 	add.w	r3, r1, #4
 80081ae:	d50a      	bpl.n	80081c6 <_printf_i+0xce>
 80081b0:	680e      	ldr	r6, [r1, #0]
 80081b2:	602b      	str	r3, [r5, #0]
 80081b4:	2e00      	cmp	r6, #0
 80081b6:	da03      	bge.n	80081c0 <_printf_i+0xc8>
 80081b8:	232d      	movs	r3, #45	; 0x2d
 80081ba:	4276      	negs	r6, r6
 80081bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081c0:	485e      	ldr	r0, [pc, #376]	; (800833c <_printf_i+0x244>)
 80081c2:	230a      	movs	r3, #10
 80081c4:	e019      	b.n	80081fa <_printf_i+0x102>
 80081c6:	680e      	ldr	r6, [r1, #0]
 80081c8:	602b      	str	r3, [r5, #0]
 80081ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80081ce:	bf18      	it	ne
 80081d0:	b236      	sxthne	r6, r6
 80081d2:	e7ef      	b.n	80081b4 <_printf_i+0xbc>
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	6820      	ldr	r0, [r4, #0]
 80081d8:	1d19      	adds	r1, r3, #4
 80081da:	6029      	str	r1, [r5, #0]
 80081dc:	0601      	lsls	r1, r0, #24
 80081de:	d501      	bpl.n	80081e4 <_printf_i+0xec>
 80081e0:	681e      	ldr	r6, [r3, #0]
 80081e2:	e002      	b.n	80081ea <_printf_i+0xf2>
 80081e4:	0646      	lsls	r6, r0, #25
 80081e6:	d5fb      	bpl.n	80081e0 <_printf_i+0xe8>
 80081e8:	881e      	ldrh	r6, [r3, #0]
 80081ea:	4854      	ldr	r0, [pc, #336]	; (800833c <_printf_i+0x244>)
 80081ec:	2f6f      	cmp	r7, #111	; 0x6f
 80081ee:	bf0c      	ite	eq
 80081f0:	2308      	moveq	r3, #8
 80081f2:	230a      	movne	r3, #10
 80081f4:	2100      	movs	r1, #0
 80081f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081fa:	6865      	ldr	r5, [r4, #4]
 80081fc:	60a5      	str	r5, [r4, #8]
 80081fe:	2d00      	cmp	r5, #0
 8008200:	bfa2      	ittt	ge
 8008202:	6821      	ldrge	r1, [r4, #0]
 8008204:	f021 0104 	bicge.w	r1, r1, #4
 8008208:	6021      	strge	r1, [r4, #0]
 800820a:	b90e      	cbnz	r6, 8008210 <_printf_i+0x118>
 800820c:	2d00      	cmp	r5, #0
 800820e:	d04d      	beq.n	80082ac <_printf_i+0x1b4>
 8008210:	4615      	mov	r5, r2
 8008212:	fbb6 f1f3 	udiv	r1, r6, r3
 8008216:	fb03 6711 	mls	r7, r3, r1, r6
 800821a:	5dc7      	ldrb	r7, [r0, r7]
 800821c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008220:	4637      	mov	r7, r6
 8008222:	42bb      	cmp	r3, r7
 8008224:	460e      	mov	r6, r1
 8008226:	d9f4      	bls.n	8008212 <_printf_i+0x11a>
 8008228:	2b08      	cmp	r3, #8
 800822a:	d10b      	bne.n	8008244 <_printf_i+0x14c>
 800822c:	6823      	ldr	r3, [r4, #0]
 800822e:	07de      	lsls	r6, r3, #31
 8008230:	d508      	bpl.n	8008244 <_printf_i+0x14c>
 8008232:	6923      	ldr	r3, [r4, #16]
 8008234:	6861      	ldr	r1, [r4, #4]
 8008236:	4299      	cmp	r1, r3
 8008238:	bfde      	ittt	le
 800823a:	2330      	movle	r3, #48	; 0x30
 800823c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008240:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008244:	1b52      	subs	r2, r2, r5
 8008246:	6122      	str	r2, [r4, #16]
 8008248:	f8cd a000 	str.w	sl, [sp]
 800824c:	464b      	mov	r3, r9
 800824e:	aa03      	add	r2, sp, #12
 8008250:	4621      	mov	r1, r4
 8008252:	4640      	mov	r0, r8
 8008254:	f7ff fee2 	bl	800801c <_printf_common>
 8008258:	3001      	adds	r0, #1
 800825a:	d14c      	bne.n	80082f6 <_printf_i+0x1fe>
 800825c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008260:	b004      	add	sp, #16
 8008262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008266:	4835      	ldr	r0, [pc, #212]	; (800833c <_printf_i+0x244>)
 8008268:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800826c:	6829      	ldr	r1, [r5, #0]
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	f851 6b04 	ldr.w	r6, [r1], #4
 8008274:	6029      	str	r1, [r5, #0]
 8008276:	061d      	lsls	r5, r3, #24
 8008278:	d514      	bpl.n	80082a4 <_printf_i+0x1ac>
 800827a:	07df      	lsls	r7, r3, #31
 800827c:	bf44      	itt	mi
 800827e:	f043 0320 	orrmi.w	r3, r3, #32
 8008282:	6023      	strmi	r3, [r4, #0]
 8008284:	b91e      	cbnz	r6, 800828e <_printf_i+0x196>
 8008286:	6823      	ldr	r3, [r4, #0]
 8008288:	f023 0320 	bic.w	r3, r3, #32
 800828c:	6023      	str	r3, [r4, #0]
 800828e:	2310      	movs	r3, #16
 8008290:	e7b0      	b.n	80081f4 <_printf_i+0xfc>
 8008292:	6823      	ldr	r3, [r4, #0]
 8008294:	f043 0320 	orr.w	r3, r3, #32
 8008298:	6023      	str	r3, [r4, #0]
 800829a:	2378      	movs	r3, #120	; 0x78
 800829c:	4828      	ldr	r0, [pc, #160]	; (8008340 <_printf_i+0x248>)
 800829e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082a2:	e7e3      	b.n	800826c <_printf_i+0x174>
 80082a4:	0659      	lsls	r1, r3, #25
 80082a6:	bf48      	it	mi
 80082a8:	b2b6      	uxthmi	r6, r6
 80082aa:	e7e6      	b.n	800827a <_printf_i+0x182>
 80082ac:	4615      	mov	r5, r2
 80082ae:	e7bb      	b.n	8008228 <_printf_i+0x130>
 80082b0:	682b      	ldr	r3, [r5, #0]
 80082b2:	6826      	ldr	r6, [r4, #0]
 80082b4:	6961      	ldr	r1, [r4, #20]
 80082b6:	1d18      	adds	r0, r3, #4
 80082b8:	6028      	str	r0, [r5, #0]
 80082ba:	0635      	lsls	r5, r6, #24
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	d501      	bpl.n	80082c4 <_printf_i+0x1cc>
 80082c0:	6019      	str	r1, [r3, #0]
 80082c2:	e002      	b.n	80082ca <_printf_i+0x1d2>
 80082c4:	0670      	lsls	r0, r6, #25
 80082c6:	d5fb      	bpl.n	80082c0 <_printf_i+0x1c8>
 80082c8:	8019      	strh	r1, [r3, #0]
 80082ca:	2300      	movs	r3, #0
 80082cc:	6123      	str	r3, [r4, #16]
 80082ce:	4615      	mov	r5, r2
 80082d0:	e7ba      	b.n	8008248 <_printf_i+0x150>
 80082d2:	682b      	ldr	r3, [r5, #0]
 80082d4:	1d1a      	adds	r2, r3, #4
 80082d6:	602a      	str	r2, [r5, #0]
 80082d8:	681d      	ldr	r5, [r3, #0]
 80082da:	6862      	ldr	r2, [r4, #4]
 80082dc:	2100      	movs	r1, #0
 80082de:	4628      	mov	r0, r5
 80082e0:	f7f7 ff96 	bl	8000210 <memchr>
 80082e4:	b108      	cbz	r0, 80082ea <_printf_i+0x1f2>
 80082e6:	1b40      	subs	r0, r0, r5
 80082e8:	6060      	str	r0, [r4, #4]
 80082ea:	6863      	ldr	r3, [r4, #4]
 80082ec:	6123      	str	r3, [r4, #16]
 80082ee:	2300      	movs	r3, #0
 80082f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082f4:	e7a8      	b.n	8008248 <_printf_i+0x150>
 80082f6:	6923      	ldr	r3, [r4, #16]
 80082f8:	462a      	mov	r2, r5
 80082fa:	4649      	mov	r1, r9
 80082fc:	4640      	mov	r0, r8
 80082fe:	47d0      	blx	sl
 8008300:	3001      	adds	r0, #1
 8008302:	d0ab      	beq.n	800825c <_printf_i+0x164>
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	079b      	lsls	r3, r3, #30
 8008308:	d413      	bmi.n	8008332 <_printf_i+0x23a>
 800830a:	68e0      	ldr	r0, [r4, #12]
 800830c:	9b03      	ldr	r3, [sp, #12]
 800830e:	4298      	cmp	r0, r3
 8008310:	bfb8      	it	lt
 8008312:	4618      	movlt	r0, r3
 8008314:	e7a4      	b.n	8008260 <_printf_i+0x168>
 8008316:	2301      	movs	r3, #1
 8008318:	4632      	mov	r2, r6
 800831a:	4649      	mov	r1, r9
 800831c:	4640      	mov	r0, r8
 800831e:	47d0      	blx	sl
 8008320:	3001      	adds	r0, #1
 8008322:	d09b      	beq.n	800825c <_printf_i+0x164>
 8008324:	3501      	adds	r5, #1
 8008326:	68e3      	ldr	r3, [r4, #12]
 8008328:	9903      	ldr	r1, [sp, #12]
 800832a:	1a5b      	subs	r3, r3, r1
 800832c:	42ab      	cmp	r3, r5
 800832e:	dcf2      	bgt.n	8008316 <_printf_i+0x21e>
 8008330:	e7eb      	b.n	800830a <_printf_i+0x212>
 8008332:	2500      	movs	r5, #0
 8008334:	f104 0619 	add.w	r6, r4, #25
 8008338:	e7f5      	b.n	8008326 <_printf_i+0x22e>
 800833a:	bf00      	nop
 800833c:	08008c59 	.word	0x08008c59
 8008340:	08008c6a 	.word	0x08008c6a

08008344 <_sbrk_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	4d06      	ldr	r5, [pc, #24]	; (8008360 <_sbrk_r+0x1c>)
 8008348:	2300      	movs	r3, #0
 800834a:	4604      	mov	r4, r0
 800834c:	4608      	mov	r0, r1
 800834e:	602b      	str	r3, [r5, #0]
 8008350:	f7fa f9a0 	bl	8002694 <_sbrk>
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	d102      	bne.n	800835e <_sbrk_r+0x1a>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	b103      	cbz	r3, 800835e <_sbrk_r+0x1a>
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	bd38      	pop	{r3, r4, r5, pc}
 8008360:	20000914 	.word	0x20000914

08008364 <__sread>:
 8008364:	b510      	push	{r4, lr}
 8008366:	460c      	mov	r4, r1
 8008368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800836c:	f000 f8a0 	bl	80084b0 <_read_r>
 8008370:	2800      	cmp	r0, #0
 8008372:	bfab      	itete	ge
 8008374:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008376:	89a3      	ldrhlt	r3, [r4, #12]
 8008378:	181b      	addge	r3, r3, r0
 800837a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800837e:	bfac      	ite	ge
 8008380:	6563      	strge	r3, [r4, #84]	; 0x54
 8008382:	81a3      	strhlt	r3, [r4, #12]
 8008384:	bd10      	pop	{r4, pc}

08008386 <__swrite>:
 8008386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800838a:	461f      	mov	r7, r3
 800838c:	898b      	ldrh	r3, [r1, #12]
 800838e:	05db      	lsls	r3, r3, #23
 8008390:	4605      	mov	r5, r0
 8008392:	460c      	mov	r4, r1
 8008394:	4616      	mov	r6, r2
 8008396:	d505      	bpl.n	80083a4 <__swrite+0x1e>
 8008398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800839c:	2302      	movs	r3, #2
 800839e:	2200      	movs	r2, #0
 80083a0:	f000 f868 	bl	8008474 <_lseek_r>
 80083a4:	89a3      	ldrh	r3, [r4, #12]
 80083a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083ae:	81a3      	strh	r3, [r4, #12]
 80083b0:	4632      	mov	r2, r6
 80083b2:	463b      	mov	r3, r7
 80083b4:	4628      	mov	r0, r5
 80083b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083ba:	f000 b817 	b.w	80083ec <_write_r>

080083be <__sseek>:
 80083be:	b510      	push	{r4, lr}
 80083c0:	460c      	mov	r4, r1
 80083c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c6:	f000 f855 	bl	8008474 <_lseek_r>
 80083ca:	1c43      	adds	r3, r0, #1
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	bf15      	itete	ne
 80083d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80083d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083da:	81a3      	strheq	r3, [r4, #12]
 80083dc:	bf18      	it	ne
 80083de:	81a3      	strhne	r3, [r4, #12]
 80083e0:	bd10      	pop	{r4, pc}

080083e2 <__sclose>:
 80083e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e6:	f000 b813 	b.w	8008410 <_close_r>
	...

080083ec <_write_r>:
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	4d07      	ldr	r5, [pc, #28]	; (800840c <_write_r+0x20>)
 80083f0:	4604      	mov	r4, r0
 80083f2:	4608      	mov	r0, r1
 80083f4:	4611      	mov	r1, r2
 80083f6:	2200      	movs	r2, #0
 80083f8:	602a      	str	r2, [r5, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	f7f9 fef2 	bl	80021e4 <_write>
 8008400:	1c43      	adds	r3, r0, #1
 8008402:	d102      	bne.n	800840a <_write_r+0x1e>
 8008404:	682b      	ldr	r3, [r5, #0]
 8008406:	b103      	cbz	r3, 800840a <_write_r+0x1e>
 8008408:	6023      	str	r3, [r4, #0]
 800840a:	bd38      	pop	{r3, r4, r5, pc}
 800840c:	20000914 	.word	0x20000914

08008410 <_close_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4d06      	ldr	r5, [pc, #24]	; (800842c <_close_r+0x1c>)
 8008414:	2300      	movs	r3, #0
 8008416:	4604      	mov	r4, r0
 8008418:	4608      	mov	r0, r1
 800841a:	602b      	str	r3, [r5, #0]
 800841c:	f7fa f905 	bl	800262a <_close>
 8008420:	1c43      	adds	r3, r0, #1
 8008422:	d102      	bne.n	800842a <_close_r+0x1a>
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	b103      	cbz	r3, 800842a <_close_r+0x1a>
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	bd38      	pop	{r3, r4, r5, pc}
 800842c:	20000914 	.word	0x20000914

08008430 <_fstat_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	4d07      	ldr	r5, [pc, #28]	; (8008450 <_fstat_r+0x20>)
 8008434:	2300      	movs	r3, #0
 8008436:	4604      	mov	r4, r0
 8008438:	4608      	mov	r0, r1
 800843a:	4611      	mov	r1, r2
 800843c:	602b      	str	r3, [r5, #0]
 800843e:	f7fa f900 	bl	8002642 <_fstat>
 8008442:	1c43      	adds	r3, r0, #1
 8008444:	d102      	bne.n	800844c <_fstat_r+0x1c>
 8008446:	682b      	ldr	r3, [r5, #0]
 8008448:	b103      	cbz	r3, 800844c <_fstat_r+0x1c>
 800844a:	6023      	str	r3, [r4, #0]
 800844c:	bd38      	pop	{r3, r4, r5, pc}
 800844e:	bf00      	nop
 8008450:	20000914 	.word	0x20000914

08008454 <_isatty_r>:
 8008454:	b538      	push	{r3, r4, r5, lr}
 8008456:	4d06      	ldr	r5, [pc, #24]	; (8008470 <_isatty_r+0x1c>)
 8008458:	2300      	movs	r3, #0
 800845a:	4604      	mov	r4, r0
 800845c:	4608      	mov	r0, r1
 800845e:	602b      	str	r3, [r5, #0]
 8008460:	f7fa f8ff 	bl	8002662 <_isatty>
 8008464:	1c43      	adds	r3, r0, #1
 8008466:	d102      	bne.n	800846e <_isatty_r+0x1a>
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	b103      	cbz	r3, 800846e <_isatty_r+0x1a>
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	bd38      	pop	{r3, r4, r5, pc}
 8008470:	20000914 	.word	0x20000914

08008474 <_lseek_r>:
 8008474:	b538      	push	{r3, r4, r5, lr}
 8008476:	4d07      	ldr	r5, [pc, #28]	; (8008494 <_lseek_r+0x20>)
 8008478:	4604      	mov	r4, r0
 800847a:	4608      	mov	r0, r1
 800847c:	4611      	mov	r1, r2
 800847e:	2200      	movs	r2, #0
 8008480:	602a      	str	r2, [r5, #0]
 8008482:	461a      	mov	r2, r3
 8008484:	f7fa f8f8 	bl	8002678 <_lseek>
 8008488:	1c43      	adds	r3, r0, #1
 800848a:	d102      	bne.n	8008492 <_lseek_r+0x1e>
 800848c:	682b      	ldr	r3, [r5, #0]
 800848e:	b103      	cbz	r3, 8008492 <_lseek_r+0x1e>
 8008490:	6023      	str	r3, [r4, #0]
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	20000914 	.word	0x20000914

08008498 <__malloc_lock>:
 8008498:	4801      	ldr	r0, [pc, #4]	; (80084a0 <__malloc_lock+0x8>)
 800849a:	f7ff bb15 	b.w	8007ac8 <__retarget_lock_acquire_recursive>
 800849e:	bf00      	nop
 80084a0:	20000908 	.word	0x20000908

080084a4 <__malloc_unlock>:
 80084a4:	4801      	ldr	r0, [pc, #4]	; (80084ac <__malloc_unlock+0x8>)
 80084a6:	f7ff bb10 	b.w	8007aca <__retarget_lock_release_recursive>
 80084aa:	bf00      	nop
 80084ac:	20000908 	.word	0x20000908

080084b0 <_read_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4d07      	ldr	r5, [pc, #28]	; (80084d0 <_read_r+0x20>)
 80084b4:	4604      	mov	r4, r0
 80084b6:	4608      	mov	r0, r1
 80084b8:	4611      	mov	r1, r2
 80084ba:	2200      	movs	r2, #0
 80084bc:	602a      	str	r2, [r5, #0]
 80084be:	461a      	mov	r2, r3
 80084c0:	f7fa f896 	bl	80025f0 <_read>
 80084c4:	1c43      	adds	r3, r0, #1
 80084c6:	d102      	bne.n	80084ce <_read_r+0x1e>
 80084c8:	682b      	ldr	r3, [r5, #0]
 80084ca:	b103      	cbz	r3, 80084ce <_read_r+0x1e>
 80084cc:	6023      	str	r3, [r4, #0]
 80084ce:	bd38      	pop	{r3, r4, r5, pc}
 80084d0:	20000914 	.word	0x20000914

080084d4 <_init>:
 80084d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d6:	bf00      	nop
 80084d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084da:	bc08      	pop	{r3}
 80084dc:	469e      	mov	lr, r3
 80084de:	4770      	bx	lr

080084e0 <_fini>:
 80084e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e2:	bf00      	nop
 80084e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084e6:	bc08      	pop	{r3}
 80084e8:	469e      	mov	lr, r3
 80084ea:	4770      	bx	lr
