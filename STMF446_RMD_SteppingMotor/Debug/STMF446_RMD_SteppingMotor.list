
STMF446_RMD_SteppingMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  08008474  08008474  00018474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a60  08008a60  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008a60  08008a60  00018a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a68  08008a68  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a68  08008a68  00018a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a6c  08008a6c  00018a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000069c  20000070  08008ae0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000070c  08008ae0  0002070c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001299c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002763  00000000  00000000  00032a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  000351a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00036228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000420e  00000000  00000000  000371b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012eb6  00000000  00000000  0003b3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d868e  00000000  00000000  0004e27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012690a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e10  00000000  00000000  0012695c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800845c 	.word	0x0800845c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800845c 	.word	0x0800845c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <tmc2209_readWriteArray>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void tmc2209_readWriteArray(uint8_t channel, uint8_t *data, size_t writeLength, size_t readLength)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60b9      	str	r1, [r7, #8]
 80005bc:	607a      	str	r2, [r7, #4]
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	4603      	mov	r3, r0
 80005c2:	73fb      	strb	r3, [r7, #15]
	//set your uart read write
	//UART_readWrite(channelToUART(channel), data, writeLength, readLength);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 80005c4:	480e      	ldr	r0, [pc, #56]	; (8000600 <tmc2209_readWriteArray+0x4c>)
 80005c6:	f005 ff57 	bl	8006478 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart1, data, writeLength,3000);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005d2:	68b9      	ldr	r1, [r7, #8]
 80005d4:	480a      	ldr	r0, [pc, #40]	; (8000600 <tmc2209_readWriteArray+0x4c>)
 80005d6:	f005 fb3d 	bl	8005c54 <HAL_UART_Transmit>

	if(readLength > 0){
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00a      	beq.n	80005f6 <tmc2209_readWriteArray+0x42>
		HAL_HalfDuplex_EnableReceiver(&huart1);
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <tmc2209_readWriteArray+0x4c>)
 80005e2:	f005 ff7d 	bl	80064e0 <HAL_HalfDuplex_EnableReceiver>
		HAL_UART_Receive(&huart1, data, readLength, 3000);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005ee:	68b9      	ldr	r1, [r7, #8]
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <tmc2209_readWriteArray+0x4c>)
 80005f2:	f005 fbc1 	bl	8005d78 <HAL_UART_Receive>
	}
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000fc 	.word	0x200000fc

08000604 <tmc2209_CRC8>:

uint8_t tmc2209_CRC8(uint8_t *data, size_t length)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
	return TMC2209_CRC(data, length);
 800060e:	2201      	movs	r2, #1
 8000610:	6839      	ldr	r1, [r7, #0]
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f006 fc52 	bl	8006ebc <tmc_CRC8>
 8000618:	4603      	mov	r3, r0
}
 800061a:	4618      	mov	r0, r3
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <HAL_GPIO_EXTI_Callback>:
	return &TMC2209;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	80fb      	strh	r3, [r7, #6]
	//stepper 0 end stop senssor
	if(GPIO_Pin == GPIO_PIN_6 ){
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	2b40      	cmp	r3, #64	; 0x40
 8000632:	d11b      	bne.n	800066c <HAL_GPIO_EXTI_Callback+0x48>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 8000634:	2140      	movs	r1, #64	; 0x40
 8000636:	480f      	ldr	r0, [pc, #60]	; (8000674 <HAL_GPIO_EXTI_Callback+0x50>)
 8000638:	f003 fdc2 	bl	80041c0 <HAL_GPIO_ReadPin>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d106      	bne.n	8000650 <HAL_GPIO_EXTI_Callback+0x2c>
			end_stop_state |= 1;
 8000642:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <HAL_GPIO_EXTI_Callback+0x54>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <HAL_GPIO_EXTI_Callback+0x54>)
 800064e:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 8000650:	2140      	movs	r1, #64	; 0x40
 8000652:	4808      	ldr	r0, [pc, #32]	; (8000674 <HAL_GPIO_EXTI_Callback+0x50>)
 8000654:	f003 fdb4 	bl	80041c0 <HAL_GPIO_ReadPin>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <HAL_GPIO_EXTI_Callback+0x48>
			end_stop_state &= ~1;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_GPIO_EXTI_Callback+0x54>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	f023 0301 	bic.w	r3, r3, #1
 8000666:	b2da      	uxtb	r2, r3
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <HAL_GPIO_EXTI_Callback+0x54>)
 800066a:	701a      	strb	r2, [r3, #0]
//		}
//		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){
//			current_stall = 1;
//		}
//	}
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40020400 	.word	0x40020400
 8000678:	2000045c 	.word	0x2000045c

0800067c <Step0>:
void Step0(){                                       //step pin
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	//pull+
	printf("step_ON\r\n");
 8000680:	4808      	ldr	r0, [pc, #32]	; (80006a4 <Step0+0x28>)
 8000682:	f006 fe97 	bl	80073b4 <puts>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 7100 	mov.w	r1, #512	; 0x200
 800068c:	4806      	ldr	r0, [pc, #24]	; (80006a8 <Step0+0x2c>)
 800068e:	f003 fdaf 	bl	80041f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000692:	2201      	movs	r2, #1
 8000694:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000698:	4803      	ldr	r0, [pc, #12]	; (80006a8 <Step0+0x2c>)
 800069a:	f003 fda9 	bl	80041f0 <HAL_GPIO_WritePin>
	/*
	 * pull-
	 * HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
	 * HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
	 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	08008474 	.word	0x08008474
 80006a8:	40020400 	.word	0x40020400

080006ac <Dir0>:

void Dir0(int dir){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, dir); //Dir0関数にdirピンを指定して格納
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	461a      	mov	r2, r3
 80006ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006be:	4803      	ldr	r0, [pc, #12]	; (80006cc <Dir0+0x20>)
 80006c0:	f003 fd96 	bl	80041f0 <HAL_GPIO_WritePin>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40020400 	.word	0x40020400

080006d0 <resetStepper>:
	si->stepPosition = 0;
	si->movementDone = 0;
}


void resetStepper(volatile stepperInfo* si){    //resetStepper関数に引数をstepperInfo構造隊にポイント型変数siとして与える
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	si->c0 = si->acceleration;      //変数*siがメンバc0にアクセス.した値に変数*siがメンバaccelerationにアクセス.した値を代入する
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	edd3 7a00 	vldr	s15, [r3]
 80006de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006e2:	ee17 2a90 	vmov	r2, s15
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	615a      	str	r2, [r3, #20]
	si->d = si->c0;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	ee07 3a90 	vmov	s15, r3
 80006f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	si->di = si->d;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000706:	ee17 2a90 	vmov	r2, s15
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	649a      	str	r2, [r3, #72]	; 0x48
	si->stepCount = 0;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	64da      	str	r2, [r3, #76]	; 0x4c
	si->n = 0;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	641a      	str	r2, [r3, #64]	; 0x40
	si->rampUpStepCount = 0;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	63da      	str	r2, [r3, #60]	; 0x3c
	si->movementDone = 0;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <prepareMovement>:

volatile uint8_t remainingSteppersFlag = 0; //remainingSteppersFlagをuint8_t型で定義し、初期化

void prepareMovement(int steps){
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	if(steps == 0){
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d039      	beq.n	80007b6 <prepareMovement+0x82>
		return;
	}
	volatile stepperInfo* si = &steppers[0];
 8000742:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <prepareMovement+0x8c>)
 8000744:	60fb      	str	r3, [r7, #12]
	if(si->dir_inv){
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	6a1b      	ldr	r3, [r3, #32]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d011      	beq.n	8000772 <prepareMovement+0x3e>
		si->dirFunc( steps < 0 ? 0 : 1);
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	43d2      	mvns	r2, r2
 8000756:	0fd2      	lsrs	r2, r2, #31
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	4610      	mov	r0, r2
 800075c:	4798      	blx	r3
		si->dir = steps > 0 ? -1:1;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b00      	cmp	r3, #0
 8000762:	dd02      	ble.n	800076a <prepareMovement+0x36>
 8000764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000768:	e000      	b.n	800076c <prepareMovement+0x38>
 800076a:	2201      	movs	r2, #1
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	61da      	str	r2, [r3, #28]
 8000770:	e00e      	b.n	8000790 <prepareMovement+0x5c>
	}else{
		si->dirFunc( steps < 0 ? 1 : 0);
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	0fd2      	lsrs	r2, r2, #31
 800077a:	4610      	mov	r0, r2
 800077c:	4798      	blx	r3
		si->dir = steps > 0 ? 1:-1;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2b00      	cmp	r3, #0
 8000782:	dd01      	ble.n	8000788 <prepareMovement+0x54>
 8000784:	2201      	movs	r2, #1
 8000786:	e001      	b.n	800078c <prepareMovement+0x58>
 8000788:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	61da      	str	r2, [r3, #28]
	}
		si->totalSteps = abs(steps);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	bfb8      	it	lt
 8000796:	425b      	neglt	r3, r3
 8000798:	461a      	mov	r2, r3
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
		resetStepper(si);
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	f7ff ff96 	bl	80006d0 <resetStepper>
		remainingSteppersFlag |= (1 << 0);
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <prepareMovement+0x90>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <prepareMovement+0x90>)
 80007b2:	701a      	strb	r2, [r3, #0]
 80007b4:	e000      	b.n	80007b8 <prepareMovement+0x84>
		return;
 80007b6:	bf00      	nop

}
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	2000040c 	.word	0x2000040c
 80007c4:	200004ee 	.word	0x200004ee

080007c8 <prepareAbsoluteMovement>:

void prepareAbsoluteMovement(int absolute_steps){   //prepareAbsoluteMovementで与えられたステップ数だけモータを回す(main文から）
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	printf("absolute_steps:%d\r\n",absolute_steps);
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	4820      	ldr	r0, [pc, #128]	; (8000854 <prepareAbsoluteMovement+0x8c>)
 80007d4:	f006 fd68 	bl	80072a8 <iprintf>
	volatile stepperInfo* si = &steppers[0];	//steppers[0]のアドレスをstepperInfo* si に代入
 80007d8:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <prepareAbsoluteMovement+0x90>)
 80007da:	60fb      	str	r3, [r7, #12]
	int steps = absolute_steps - si->stepPosition;	//目標値からstepPositionを引いた値（stepposition=毎ステップカウントされるdirの値)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	60bb      	str	r3, [r7, #8]
	printf("steps:%d\r\n",steps);
 80007e6:	68b9      	ldr	r1, [r7, #8]
 80007e8:	481c      	ldr	r0, [pc, #112]	; (800085c <prepareAbsoluteMovement+0x94>)
 80007ea:	f006 fd5d 	bl	80072a8 <iprintf>
	if(steps == 0){
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d02b      	beq.n	800084c <prepareAbsoluteMovement+0x84>
					return;
				}
	si->dirFunc( steps < 0 ? 1 : 0);
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	68ba      	ldr	r2, [r7, #8]
 80007fa:	0fd2      	lsrs	r2, r2, #31
 80007fc:	4610      	mov	r0, r2
 80007fe:	4798      	blx	r3
	si->dir = steps > 0 ? 1:-1;
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	2b00      	cmp	r3, #0
 8000804:	dd01      	ble.n	800080a <prepareAbsoluteMovement+0x42>
 8000806:	2201      	movs	r2, #1
 8000808:	e001      	b.n	800080e <prepareAbsoluteMovement+0x46>
 800080a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	61da      	str	r2, [r3, #28]
	//printf("prepareAbsoluteMovement\r\n");
	si->totalSteps = abs(steps);	//stepsの値をアブソリュートでtotalstepsに格納
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	2b00      	cmp	r3, #0
 8000816:	bfb8      	it	lt
 8000818:	425b      	neglt	r3, r3
 800081a:	461a      	mov	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	635a      	str	r2, [r3, #52]	; 0x34
	printf("steps:%d\r\n",si->totalSteps);
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000824:	4619      	mov	r1, r3
 8000826:	480d      	ldr	r0, [pc, #52]	; (800085c <prepareAbsoluteMovement+0x94>)
 8000828:	f006 fd3e 	bl	80072a8 <iprintf>

	resetStepper(si);
 800082c:	68f8      	ldr	r0, [r7, #12]
 800082e:	f7ff ff4f 	bl	80006d0 <resetStepper>
	printf("steps:%d\r\n",steps);
 8000832:	68b9      	ldr	r1, [r7, #8]
 8000834:	4809      	ldr	r0, [pc, #36]	; (800085c <prepareAbsoluteMovement+0x94>)
 8000836:	f006 fd37 	bl	80072a8 <iprintf>
	remainingSteppersFlag |= (1 << 0);
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <prepareAbsoluteMovement+0x98>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <prepareAbsoluteMovement+0x98>)
 8000848:	701a      	strb	r2, [r3, #0]
 800084a:	e000      	b.n	800084e <prepareAbsoluteMovement+0x86>
					return;
 800084c:	bf00      	nop
}
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	08008480 	.word	0x08008480
 8000858:	2000040c 	.word	0x2000040c
 800085c:	08008494 	.word	0x08008494
 8000860:	200004ee 	.word	0x200004ee

08000864 <setNextInterruptInterval>:
			t->checkcount=0;
		}
}
volatile uint8_t nextStepperFlag = 0;

void setNextInterruptInterval(){
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0

	unsigned int mind = 999999;
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <setNextInterruptInterval+0x7c>)
 800086c:	607b      	str	r3, [r7, #4]
//	currentcheck();
		if( ((1 << 0)& remainingSteppersFlag) && steppers[0].di < mind ){
 800086e:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <setNextInterruptInterval+0x80>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	d007      	beq.n	800088e <setNextInterruptInterval+0x2a>
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <setNextInterruptInterval+0x84>)
 8000880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	429a      	cmp	r2, r3
 8000886:	d902      	bls.n	800088e <setNextInterruptInterval+0x2a>
			mind = steppers[0].di;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <setNextInterruptInterval+0x84>)
 800088a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800088c:	607b      	str	r3, [r7, #4]
		}
		nextStepperFlag = 0;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <setNextInterruptInterval+0x88>)
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]

			if( (1 << 0) && steppers[0].di == mind ){
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <setNextInterruptInterval+0x84>)
 8000896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	429a      	cmp	r2, r3
 800089c:	d107      	bne.n	80008ae <setNextInterruptInterval+0x4a>
				nextStepperFlag |= (1 << 0);
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <setNextInterruptInterval+0x88>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <setNextInterruptInterval+0x88>)
 80008ac:	701a      	strb	r2, [r3, #0]
			}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);		//mindにコンペアを設定
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <setNextInterruptInterval+0x8c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	635a      	str	r2, [r3, #52]	; 0x34
			//printf("mind:%d \r\n",mind);

	if (remainingSteppersFlag == 0){
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <setNextInterruptInterval+0x80>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d104      	bne.n	80008ca <setNextInterruptInterval+0x66>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);    //65500→コンペアマッチさせない
 80008c0:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <setNextInterruptInterval+0x8c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80008c8:	635a      	str	r2, [r3, #52]	; 0x34
	}

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <setNextInterruptInterval+0x8c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 80008d2:	bf00      	nop

}
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	000f423f 	.word	0x000f423f
 80008e4:	200004ee 	.word	0x200004ee
 80008e8:	2000040c 	.word	0x2000040c
 80008ec:	200004ef 	.word	0x200004ef
 80008f0:	200000b4 	.word	0x200000b4

080008f4 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){      //指定したコンペアを超えた時発火
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	//HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);

	if(htim == &htim3){
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a6e      	ldr	r2, [pc, #440]	; (8000ab8 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 8000900:	4293      	cmp	r3, r2
 8000902:	f040 80d5 	bne.w	8000ab0 <HAL_TIM_OC_DelayElapsedCallback+0x1bc>
	unsigned int tmpCtr = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1);	//指定されたタイマーチャンネルのコンペアを所得
 8000906:	4b6c      	ldr	r3, [pc, #432]	; (8000ab8 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800090c:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);			//コンペアを65500にセット
 800090e:	4b6a      	ldr	r3, [pc, #424]	; (8000ab8 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8000916:	635a      	str	r2, [r3, #52]	; 0x34

	if( homing_flag & (1 << 0)){
 8000918:	4b68      	ldr	r3, [pc, #416]	; (8000abc <HAL_TIM_OC_DelayElapsedCallback+0x1c8>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	2b00      	cmp	r3, #0
 8000922:	d00d      	beq.n	8000940 <HAL_TIM_OC_DelayElapsedCallback+0x4c>
				if(end_stop_state & (1 << 0)){
 8000924:	4b66      	ldr	r3, [pc, #408]	; (8000ac0 <HAL_TIM_OC_DelayElapsedCallback+0x1cc>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	2b00      	cmp	r3, #0
 800092e:	d007      	beq.n	8000940 <HAL_TIM_OC_DelayElapsedCallback+0x4c>
					remainingSteppersFlag &= ~(1 << 0);
 8000930:	4b64      	ldr	r3, [pc, #400]	; (8000ac4 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	f023 0301 	bic.w	r3, r3, #1
 800093a:	b2da      	uxtb	r2, r3
 800093c:	4b61      	ldr	r3, [pc, #388]	; (8000ac4 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 800093e:	701a      	strb	r2, [r3, #0]
				}
			}
	if ( ! (nextStepperFlag & (1 << 0)) ){				//nextStepperFlagが真でない(0なら)
 8000940:	4b61      	ldr	r3, [pc, #388]	; (8000ac8 <HAL_TIM_OC_DelayElapsedCallback+0x1d4>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	2b00      	cmp	r3, #0
 800094c:	d105      	bne.n	800095a <HAL_TIM_OC_DelayElapsedCallback+0x66>
			steppers[0].di -= tmpCtr;           //tmpCtrの値からsteppers[i].di引いた値を新しくsteppers[i].diに代入
 800094e:	4b5f      	ldr	r3, [pc, #380]	; (8000acc <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 8000950:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	4a5d      	ldr	r2, [pc, #372]	; (8000acc <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 8000958:	6493      	str	r3, [r2, #72]	; 0x48
		}
		//printf("steppers:%ld \r\n",steppers[0].di);

		volatile stepperInfo* s = &steppers[0];
 800095a:	4b5c      	ldr	r3, [pc, #368]	; (8000acc <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 800095c:	60bb      	str	r3, [r7, #8]

		if( (s->stepCount) < (s->totalSteps)&& !(current_stall)  ){		//1周ごとにカウントしたstepCountがabs(steps)より小さかったら==動作が終了するまで
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000966:	429a      	cmp	r2, r3
 8000968:	d224      	bcs.n	80009b4 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
 800096a:	4b59      	ldr	r3, [pc, #356]	; (8000ad0 <HAL_TIM_OC_DelayElapsedCallback+0x1dc>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d120      	bne.n	80009b4 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
			s->stepFunc();
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	4798      	blx	r3
			s->stepCount++;							//カウントし続ける
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097c:	1c5a      	adds	r2, r3, #1
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	64da      	str	r2, [r3, #76]	; 0x4c
			s->stepPosition += s->dir;		//dir(+もしくはー(dirの向き）を加算してstepPositionに格納
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	69da      	ldr	r2, [r3, #28]
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	441a      	add	r2, r3
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	619a      	str	r2, [r3, #24]
			if ( (s->stepCount) >= (s->totalSteps) ){	//stepCountがtotalStepsを超えたとき
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000998:	429a      	cmp	r2, r3
 800099a:	d30b      	bcc.n	80009b4 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
				s->movementDone = 1;	//movementDoneを1にする
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	2201      	movs	r2, #1
 80009a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				remainingSteppersFlag &= ~(1 << 0);
 80009a4:	4b47      	ldr	r3, [pc, #284]	; (8000ac4 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	f023 0301 	bic.w	r3, r3, #1
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	4b44      	ldr	r3, [pc, #272]	; (8000ac4 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 80009b2:	701a      	strb	r2, [r3, #0]
			}
		}

		if (s->rampUpStepCount == 0){
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d142      	bne.n	8000a42 <HAL_TIM_OC_DelayElapsedCallback+0x14e>
			s->n++;									//sにnを代入して、nをプラス1する
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	1c5a      	adds	r2, r3, #1
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	641a      	str	r2, [r3, #64]	; 0x40
			s->d = s->d - (2*s->d) / (4*s->n +1);	//加減速遅延時間
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80009d2:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	3301      	adds	r3, #1
 80009de:	ee07 3a90 	vmov	s15, r3
 80009e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80009e6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80009ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			if (s->d <= s->minStepInterval ){		//加減速遅延時間がminStepIntervalより短いなら（定数で指定）
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	ee07 3a90 	vmov	s15, r3
 8000a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a0e:	d80c      	bhi.n	8000a2a <HAL_TIM_OC_DelayElapsedCallback+0x136>
				s->d = s->minStepInterval;			//minStepIntervalを加減速遅延時間にする
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	ee07 3a90 	vmov	s15, r3
 8000a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
				s->rampUpStepCount = s->stepCount;	//rampUpStepCountはstepCountとする
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	63da      	str	r2, [r3, #60]	; 0x3c
			}
			if (s->stepCount >= (s->totalSteps / 2) ){  //目標値から現在のステップを引いた値の1/2よりstepCountが大きくなったとき
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a32:	085b      	lsrs	r3, r3, #1
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d32c      	bcc.n	8000a92 <HAL_TIM_OC_DelayElapsedCallback+0x19e>
				s->rampUpStepCount = s->stepCount;		//rampUpStepCountはstepCountとする
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a40:	e027      	b.n	8000a92 <HAL_TIM_OC_DelayElapsedCallback+0x19e>
			}
		} else if ( s->stepCount >= s->totalSteps - s->rampUpStepCount) {	//目標値から現在のステップを引いた値からrampUpStepCountを引いた値がstepCountより小さいなら
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a4e:	1acb      	subs	r3, r1, r3
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d31e      	bcc.n	8000a92 <HAL_TIM_OC_DelayElapsedCallback+0x19e>
			s->d = (s->d * (4 * s->n + 1)) / (4 * s->n + 1 -2);				//減速の時のステップ
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	3301      	adds	r3, #1
 8000a62:	ee07 3a90 	vmov	s15, r3
 8000a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a6a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	3b01      	subs	r3, #1
 8000a76:	ee07 3a90 	vmov	s15, r3
 8000a7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			s->n--;		//sにnを代入し、nから1を引く
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	1e5a      	subs	r2, r3, #1
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	641a      	str	r2, [r3, #64]	; 0x40
		}
		s->di = s->d;	//計算結果sをstepperInfoのメンバdに代入したものをメンバdiに代入
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a9c:	ee17 2a90 	vmov	r2, s15
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	649a      	str	r2, [r3, #72]	; 0x48
//		printf("stepPosition:%ld \r\n",s->stepPosition);
		setNextInterruptInterval();
 8000aa4:	f7ff fede 	bl	8000864 <setNextInterruptInterval>
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2200      	movs	r2, #0
 8000aae:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8000ab0:	bf00      	nop
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200000b4 	.word	0x200000b4
 8000abc:	2000045d 	.word	0x2000045d
 8000ac0:	2000045c 	.word	0x2000045c
 8000ac4:	200004ee 	.word	0x200004ee
 8000ac8:	200004ef 	.word	0x200004ef
 8000acc:	2000040c 	.word	0x2000040c
 8000ad0:	2000045e 	.word	0x2000045e

08000ad4 <stallguard_back>:
	if( ! HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)){	//割り込みピンが真でない(1でない=0なら)
		end_stop_state |= 1;					//end_stop_stateに左辺か右辺が1なら1を代入
	}
}

void stallguard_back(){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	prepareMovement(steppers[0].stall_off);	//stall_off
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <stallguard_back+0x18>)
 8000ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fe29 	bl	8000734 <prepareMovement>
	current_stall=0;
 8000ae2:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <stallguard_back+0x1c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
	return;
 8000ae8:	bf00      	nop
}
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	2000040c 	.word	0x2000040c
 8000af0:	2000045e 	.word	0x2000045e

08000af4 <runAndWait>:

void runAndWait(){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	setNextInterruptInterval();
 8000af8:	f7ff feb4 	bl	8000864 <setNextInterruptInterval>
	while(remainingSteppersFlag && !(current_stall));
 8000afc:	bf00      	nop
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <runAndWait+0x38>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d003      	beq.n	8000b10 <runAndWait+0x1c>
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <runAndWait+0x3c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d0f6      	beq.n	8000afe <runAndWait+0xa>
	if(current_stall==1){
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <runAndWait+0x3c>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d101      	bne.n	8000b1c <runAndWait+0x28>
		stallguard_back();
 8000b18:	f7ff ffdc 	bl	8000ad4 <stallguard_back>
	}
	HAL_Delay(100);
 8000b1c:	2064      	movs	r0, #100	; 0x64
 8000b1e:	f002 f91d 	bl	8002d5c <HAL_Delay>
	end_flag=1;
 8000b22:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <runAndWait+0x40>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
	//printf("posi%d\r\n",re->totalSteps);
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200004ee 	.word	0x200004ee
 8000b30:	2000045e 	.word	0x2000045e
 8000b34:	200004d9 	.word	0x200004d9

08000b38 <AbsoluteReset>:
void AbsoluteReset(){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
	volatile stepperInfo* re = &steppers[0];
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <AbsoluteReset+0x4c>)
 8000b40:	607b      	str	r3, [r7, #4]

	re->n = 0;  //変数*siがメンバnにアクセス.した値に0を代入する
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	641a      	str	r2, [r3, #64]	; 0x40
	re->d = 0;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f04f 0200 	mov.w	r2, #0
 8000b4e:	645a      	str	r2, [r3, #68]	; 0x44
	re->di = 0;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	649a      	str	r2, [r3, #72]	; 0x48
	re->stepCount = 0;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	64da      	str	r2, [r3, #76]	; 0x4c
	re->rampUpStepCount = 0;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	63da      	str	r2, [r3, #60]	; 0x3c
	re->totalSteps = 0;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	635a      	str	r2, [r3, #52]	; 0x34
	re->stepPosition = 0;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	619a      	str	r2, [r3, #24]
	printf("RestOK\r\n");
 8000b6e:	4806      	ldr	r0, [pc, #24]	; (8000b88 <AbsoluteReset+0x50>)
 8000b70:	f006 fc20 	bl	80073b4 <puts>
	end_flag=1;
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <AbsoluteReset+0x54>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000040c 	.word	0x2000040c
 8000b88:	080084b4 	.word	0x080084b4
 8000b8c:	200004d9 	.word	0x200004d9

08000b90 <stepperHoming>:


void stepperHoming(){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	homing_flag |= (1 << 0);
 8000b94:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <stepperHoming+0xc0>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b2c      	ldr	r3, [pc, #176]	; (8000c50 <stepperHoming+0xc0>)
 8000ba0:	701a      	strb	r2, [r3, #0]
	//seeking
	steppers[0].minStepInterval = steppers[0].seeking_vel;	//ホームピンに反応するまでモータ回す
 8000ba2:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <stepperHoming+0xc4>)
 8000ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <stepperHoming+0xc4>)
 8000baa:	605a      	str	r2, [r3, #4]
	prepareMovement( -100000000);
 8000bac:	482a      	ldr	r0, [pc, #168]	; (8000c58 <stepperHoming+0xc8>)
 8000bae:	f7ff fdc1 	bl	8000734 <prepareMovement>
	runAndWait();
 8000bb2:	f7ff ff9f 	bl	8000af4 <runAndWait>
	HAL_Delay(500);
 8000bb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bba:	f002 f8cf 	bl	8002d5c <HAL_Delay>
	//pull-off

	homing_flag &= ~(1 << 0);								//homing_flagが反応したらpull_offだけモータ回す
 8000bbe:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <stepperHoming+0xc0>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	f023 0301 	bic.w	r3, r3, #1
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <stepperHoming+0xc0>)
 8000bca:	701a      	strb	r2, [r3, #0]
	prepareMovement(steppers[0].pull_off);
 8000bcc:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <stepperHoming+0xc4>)
 8000bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fdaf 	bl	8000734 <prepareMovement>
	runAndWait();
 8000bd6:	f7ff ff8d 	bl	8000af4 <runAndWait>
	HAL_Delay(500);
 8000bda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bde:	f002 f8bd 	bl	8002d5c <HAL_Delay>
	//homing

	homing_flag |= (1 << 0);								//ホームピンに反応するまでモータ回す
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <stepperHoming+0xc0>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <stepperHoming+0xc0>)
 8000bee:	701a      	strb	r2, [r3, #0]
	steppers[0].minStepInterval = steppers[0].homing_vel;
 8000bf0:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <stepperHoming+0xc4>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <stepperHoming+0xc4>)
 8000bf8:	605a      	str	r2, [r3, #4]
	prepareMovement( -100000000);
 8000bfa:	4817      	ldr	r0, [pc, #92]	; (8000c58 <stepperHoming+0xc8>)
 8000bfc:	f7ff fd9a 	bl	8000734 <prepareMovement>
	runAndWait();
 8000c00:	f7ff ff78 	bl	8000af4 <runAndWait>
	HAL_Delay(500);
 8000c04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c08:	f002 f8a8 	bl	8002d5c <HAL_Delay>
	//pull-off
	homing_flag &= ~(1 << 0);
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <stepperHoming+0xc0>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	f023 0301 	bic.w	r3, r3, #1
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <stepperHoming+0xc0>)
 8000c18:	701a      	strb	r2, [r3, #0]
	prepareMovement(steppers[0].pull_off);
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <stepperHoming+0xc4>)
 8000c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fd88 	bl	8000734 <prepareMovement>
	runAndWait();
 8000c24:	f7ff ff66 	bl	8000af4 <runAndWait>
	HAL_Delay(500);
 8000c28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c2c:	f002 f896 	bl	8002d5c <HAL_Delay>

	steppers[0].stepPosition = 0;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <stepperHoming+0xc4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
	steppers[0].homing = 1;
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <stepperHoming+0xc4>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	741a      	strb	r2, [r3, #16]
	steppers[0].minStepInterval = 500;
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <stepperHoming+0xc4>)
 8000c3e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c42:	605a      	str	r2, [r3, #4]
	printf("homing:\r\n");
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <stepperHoming+0xcc>)
 8000c46:	f006 fbb5 	bl	80073b4 <puts>

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000045d 	.word	0x2000045d
 8000c54:	2000040c 	.word	0x2000040c
 8000c58:	fa0a1f00 	.word	0xfa0a1f00
 8000c5c:	080084bc 	.word	0x080084bc

08000c60 <MotorOFF>:
void MotorOFF(){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
	int32_t value = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]

	value = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, value);
 8000c6e:	2110      	movs	r1, #16
 8000c70:	482d      	ldr	r0, [pc, #180]	; (8000d28 <MotorOFF+0xc8>)
 8000c72:	f006 f9eb 	bl	800704c <tmc2209_readInt>
 8000c76:	4603      	mov	r3, r0
 8000c78:	f023 021f 	bic.w	r2, r3, #31
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 031f 	and.w	r3, r3, #31
 8000c82:	4313      	orrs	r3, r2
 8000c84:	461a      	mov	r2, r3
 8000c86:	2110      	movs	r1, #16
 8000c88:	4827      	ldr	r0, [pc, #156]	; (8000d28 <MotorOFF+0xc8>)
 8000c8a:	f006 f98f 	bl	8006fac <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000c8e:	f002 f859 	bl	8002d44 <HAL_GetTick>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4619      	mov	r1, r3
 8000c96:	4824      	ldr	r0, [pc, #144]	; (8000d28 <MotorOFF+0xc8>)
 8000c98:	f006 fac3 	bl	8007222 <tmc2209_periodicJob>
	HAL_Delay(100);
 8000c9c:	2064      	movs	r0, #100	; 0x64
 8000c9e:	f002 f85d 	bl	8002d5c <HAL_Delay>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);	//保持電流
 8000ca2:	2110      	movs	r1, #16
 8000ca4:	4820      	ldr	r0, [pc, #128]	; (8000d28 <MotorOFF+0xc8>)
 8000ca6:	f006 f9d1 	bl	800704c <tmc2209_readInt>
 8000caa:	4603      	mov	r3, r0
 8000cac:	f003 031f 	and.w	r3, r3, #31
 8000cb0:	607b      	str	r3, [r7, #4]
	printf("IHOLD: %ld\r\n", value);
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	481d      	ldr	r0, [pc, #116]	; (8000d2c <MotorOFF+0xcc>)
 8000cb6:	f006 faf7 	bl	80072a8 <iprintf>

	value = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_FREEWHEEL_MASK, 20);
 8000cbe:	2170      	movs	r1, #112	; 0x70
 8000cc0:	4819      	ldr	r0, [pc, #100]	; (8000d28 <MotorOFF+0xc8>)
 8000cc2:	f006 f9c3 	bl	800704c <tmc2209_readInt>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	151b      	asrs	r3, r3, #20
 8000cca:	f003 0303 	and.w	r3, r3, #3
 8000cce:	607b      	str	r3, [r7, #4]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000cd0:	f002 f838 	bl	8002d44 <HAL_GetTick>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4813      	ldr	r0, [pc, #76]	; (8000d28 <MotorOFF+0xc8>)
 8000cda:	f006 faa2 	bl	8007222 <tmc2209_periodicJob>
	printf("Freewheeling: %ld\r\n", value);
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	4813      	ldr	r0, [pc, #76]	; (8000d30 <MotorOFF+0xd0>)
 8000ce2:	f006 fae1 	bl	80072a8 <iprintf>
	HAL_Delay(100);
 8000ce6:	2064      	movs	r0, #100	; 0x64
 8000ce8:	f002 f838 	bl	8002d5c <HAL_Delay>
	value = 1;
 8000cec:	2301      	movs	r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_PWMCONF, TMC2209_FREEWHEEL_MASK, 20, value);
 8000cf0:	2170      	movs	r1, #112	; 0x70
 8000cf2:	480d      	ldr	r0, [pc, #52]	; (8000d28 <MotorOFF+0xc8>)
 8000cf4:	f006 f9aa 	bl	800704c <tmc2209_readInt>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	051b      	lsls	r3, r3, #20
 8000d02:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000d06:	4313      	orrs	r3, r2
 8000d08:	461a      	mov	r2, r3
 8000d0a:	2170      	movs	r1, #112	; 0x70
 8000d0c:	4806      	ldr	r0, [pc, #24]	; (8000d28 <MotorOFF+0xc8>)
 8000d0e:	f006 f94d 	bl	8006fac <tmc2209_writeInt>
	printf("Freewheeling: %ld\r\n", value);
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	4806      	ldr	r0, [pc, #24]	; (8000d30 <MotorOFF+0xd0>)
 8000d16:	f006 fac7 	bl	80072a8 <iprintf>

	end_flag=1;
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MotorOFF+0xd4>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	701a      	strb	r2, [r3, #0]


}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000184 	.word	0x20000184
 8000d2c:	080084c8 	.word	0x080084c8
 8000d30:	080084d8 	.word	0x080084d8
 8000d34:	200004d9 	.word	0x200004d9

08000d38 <TMCsetup>:
	HAL_Delay(100);
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_SHAFT_SHIFT, TMC2209_SHAFT_MASK);	//保持電流
	printf("IHOLD: %ld\r\n", value);
}

void TMCsetup(){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b090      	sub	sp, #64	; 0x40
 8000d3c:	af00      	add	r7, sp, #0
	int32_t mstep_value = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t toff_value = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t microstep_value = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t IRUN_value = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t IHOLD_value = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t IHOLDDELAY_value= 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t stallgard_setup_value=0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t TCOOLTHRS_value=0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]
	int32_t SEMAX_value=0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
	int32_t TBL_value = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61bb      	str	r3, [r7, #24]
	int32_t stealthChop_value = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
	int32_t autoscale_value = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
	int32_t PWMAuto_value = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
	int32_t PWMAuto_scale = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
	int32_t value = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]




	IRUN_value = 28;
 8000d7a:	231c      	movs	r3, #28
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT, IRUN_value);	//実行電流
 8000d7e:	2110      	movs	r1, #16
 8000d80:	48c9      	ldr	r0, [pc, #804]	; (80010a8 <TMCsetup+0x370>)
 8000d82:	f006 f963 	bl	800704c <tmc2209_readInt>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8000d94:	4313      	orrs	r3, r2
 8000d96:	461a      	mov	r2, r3
 8000d98:	2110      	movs	r1, #16
 8000d9a:	48c3      	ldr	r0, [pc, #780]	; (80010a8 <TMCsetup+0x370>)
 8000d9c:	f006 f906 	bl	8006fac <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000da0:	f001 ffd0 	bl	8002d44 <HAL_GetTick>
 8000da4:	4603      	mov	r3, r0
 8000da6:	4619      	mov	r1, r3
 8000da8:	48bf      	ldr	r0, [pc, #764]	; (80010a8 <TMCsetup+0x370>)
 8000daa:	f006 fa3a 	bl	8007222 <tmc2209_periodicJob>
	HAL_Delay(100);
 8000dae:	2064      	movs	r0, #100	; 0x64
 8000db0:	f001 ffd4 	bl	8002d5c <HAL_Delay>
	IRUN_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 8000db4:	2110      	movs	r1, #16
 8000db6:	48bc      	ldr	r0, [pc, #752]	; (80010a8 <TMCsetup+0x370>)
 8000db8:	f006 f948 	bl	800704c <tmc2209_readInt>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	121b      	asrs	r3, r3, #8
 8000dc0:	f003 031f 	and.w	r3, r3, #31
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
	printf("IRUN: %ld\r\n", IRUN_value);
 8000dc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000dc8:	48b8      	ldr	r0, [pc, #736]	; (80010ac <TMCsetup+0x374>)
 8000dca:	f006 fa6d 	bl	80072a8 <iprintf>

	IHOLD_value= 16;																						//モーター待機時の電流の設定
 8000dce:	2310      	movs	r3, #16
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, IHOLD_value);
 8000dd2:	2110      	movs	r1, #16
 8000dd4:	48b4      	ldr	r0, [pc, #720]	; (80010a8 <TMCsetup+0x370>)
 8000dd6:	f006 f939 	bl	800704c <tmc2209_readInt>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	f023 021f 	bic.w	r2, r3, #31
 8000de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de2:	f003 031f 	and.w	r3, r3, #31
 8000de6:	4313      	orrs	r3, r2
 8000de8:	461a      	mov	r2, r3
 8000dea:	2110      	movs	r1, #16
 8000dec:	48ae      	ldr	r0, [pc, #696]	; (80010a8 <TMCsetup+0x370>)
 8000dee:	f006 f8dd 	bl	8006fac <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000df2:	f001 ffa7 	bl	8002d44 <HAL_GetTick>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4619      	mov	r1, r3
 8000dfa:	48ab      	ldr	r0, [pc, #684]	; (80010a8 <TMCsetup+0x370>)
 8000dfc:	f006 fa11 	bl	8007222 <tmc2209_periodicJob>
	HAL_Delay(100);
 8000e00:	2064      	movs	r0, #100	; 0x64
 8000e02:	f001 ffab 	bl	8002d5c <HAL_Delay>
	IHOLD_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);	//保持電流
 8000e06:	2110      	movs	r1, #16
 8000e08:	48a7      	ldr	r0, [pc, #668]	; (80010a8 <TMCsetup+0x370>)
 8000e0a:	f006 f91f 	bl	800704c <tmc2209_readInt>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f003 031f 	and.w	r3, r3, #31
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
	printf("IHOLD: %ld\r\n", IHOLD_value);
 8000e16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000e18:	48a5      	ldr	r0, [pc, #660]	; (80010b0 <TMCsetup+0x378>)
 8000e1a:	f006 fa45 	bl	80072a8 <iprintf>

	value=0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK,TMC2209_PDN_DISABLE_SHIFT);
 8000e22:	2100      	movs	r1, #0
 8000e24:	48a0      	ldr	r0, [pc, #640]	; (80010a8 <TMCsetup+0x370>)
 8000e26:	f006 f911 	bl	800704c <tmc2209_readInt>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	119b      	asrs	r3, r3, #6
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
	printf("pdn_disable : %ld\r\n", value);
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	489f      	ldr	r0, [pc, #636]	; (80010b4 <TMCsetup+0x37c>)
 8000e38:	f006 fa36 	bl	80072a8 <iprintf>
	value = 1;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK, TMC2209_PDN_DISABLE_SHIFT, value);
 8000e40:	2100      	movs	r1, #0
 8000e42:	4899      	ldr	r0, [pc, #612]	; (80010a8 <TMCsetup+0x370>)
 8000e44:	f006 f902 	bl	800704c <tmc2209_readInt>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	019b      	lsls	r3, r3, #6
 8000e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e56:	4313      	orrs	r3, r2
 8000e58:	461a      	mov	r2, r3
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4892      	ldr	r0, [pc, #584]	; (80010a8 <TMCsetup+0x370>)
 8000e5e:	f006 f8a5 	bl	8006fac <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000e62:	f001 ff6f 	bl	8002d44 <HAL_GetTick>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4619      	mov	r1, r3
 8000e6a:	488f      	ldr	r0, [pc, #572]	; (80010a8 <TMCsetup+0x370>)
 8000e6c:	f006 f9d9 	bl	8007222 <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK, TMC2209_PDN_DISABLE_SHIFT);
 8000e70:	2100      	movs	r1, #0
 8000e72:	488d      	ldr	r0, [pc, #564]	; (80010a8 <TMCsetup+0x370>)
 8000e74:	f006 f8ea 	bl	800704c <tmc2209_readInt>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	119b      	asrs	r3, r3, #6
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	607b      	str	r3, [r7, #4]
	printf("pdn_disable : %ld\r\n", value);
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	488b      	ldr	r0, [pc, #556]	; (80010b4 <TMCsetup+0x37c>)
 8000e86:	f006 fa0f 	bl	80072a8 <iprintf>

	TCOOLTHRS_value=1000;
 8000e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8e:	623b      	str	r3, [r7, #32]
	tmc2209_writeInt(&TMC2209, TMC2209_TCOOLTHRS, TCOOLTHRS_value);
 8000e90:	6a3a      	ldr	r2, [r7, #32]
 8000e92:	2114      	movs	r1, #20
 8000e94:	4884      	ldr	r0, [pc, #528]	; (80010a8 <TMCsetup+0x370>)
 8000e96:	f006 f889 	bl	8006fac <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000e9a:	f001 ff53 	bl	8002d44 <HAL_GetTick>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4881      	ldr	r0, [pc, #516]	; (80010a8 <TMCsetup+0x370>)
 8000ea4:	f006 f9bd 	bl	8007222 <tmc2209_periodicJob>
	printf("TCOOLTHRS: %ld\r\n", TCOOLTHRS_value);
 8000ea8:	6a39      	ldr	r1, [r7, #32]
 8000eaa:	4883      	ldr	r0, [pc, #524]	; (80010b8 <TMCsetup+0x380>)
 8000eac:	f006 f9fc 	bl	80072a8 <iprintf>

	value=0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK,TMC2209_EN_SPREADCYCLE_SHIFT);
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	487c      	ldr	r0, [pc, #496]	; (80010a8 <TMCsetup+0x370>)
 8000eb8:	f006 f8c8 	bl	800704c <tmc2209_readInt>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	109b      	asrs	r3, r3, #2
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	607b      	str	r3, [r7, #4]
	printf("SPREADCYCLE : %ld\r\n", value);
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	487c      	ldr	r0, [pc, #496]	; (80010bc <TMCsetup+0x384>)
 8000eca:	f006 f9ed 	bl	80072a8 <iprintf>
	value = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK, TMC2209_EN_SPREADCYCLE_SHIFT ,value);
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4874      	ldr	r0, [pc, #464]	; (80010a8 <TMCsetup+0x370>)
 8000ed6:	f006 f8b9 	bl	800704c <tmc2209_readInt>
 8000eda:	4603      	mov	r3, r0
 8000edc:	f023 0204 	bic.w	r2, r3, #4
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	461a      	mov	r2, r3
 8000eec:	2100      	movs	r1, #0
 8000eee:	486e      	ldr	r0, [pc, #440]	; (80010a8 <TMCsetup+0x370>)
 8000ef0:	f006 f85c 	bl	8006fac <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000ef4:	f001 ff26 	bl	8002d44 <HAL_GetTick>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4619      	mov	r1, r3
 8000efc:	486a      	ldr	r0, [pc, #424]	; (80010a8 <TMCsetup+0x370>)
 8000efe:	f006 f990 	bl	8007222 <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK,TMC2209_EN_SPREADCYCLE_SHIFT);
 8000f02:	2100      	movs	r1, #0
 8000f04:	4868      	ldr	r0, [pc, #416]	; (80010a8 <TMCsetup+0x370>)
 8000f06:	f006 f8a1 	bl	800704c <tmc2209_readInt>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	109b      	asrs	r3, r3, #2
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	607b      	str	r3, [r7, #4]
	printf("SPREADCYCLE : %ld\r\n", value);
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	4869      	ldr	r0, [pc, #420]	; (80010bc <TMCsetup+0x384>)
 8000f18:	f006 f9c6 	bl	80072a8 <iprintf>

	value=10;
 8000f1c:	230a      	movs	r3, #10
 8000f1e:	607b      	str	r3, [r7, #4]
	tmc2209_writeInt(&TMC2209, TMC2209_TPWMTHRS, value);
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	2113      	movs	r1, #19
 8000f24:	4860      	ldr	r0, [pc, #384]	; (80010a8 <TMCsetup+0x370>)
 8000f26:	f006 f841 	bl	8006fac <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000f2a:	f001 ff0b 	bl	8002d44 <HAL_GetTick>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4619      	mov	r1, r3
 8000f32:	485d      	ldr	r0, [pc, #372]	; (80010a8 <TMCsetup+0x370>)
 8000f34:	f006 f975 	bl	8007222 <tmc2209_periodicJob>
	printf("TPWMTHRS: %ld\r\n", value);
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	4861      	ldr	r0, [pc, #388]	; (80010c0 <TMCsetup+0x388>)
 8000f3c:	f006 f9b4 	bl	80072a8 <iprintf>

	value=0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK,TMC2209_INTERNAL_RSENSE_SHIFT);
 8000f44:	2100      	movs	r1, #0
 8000f46:	4858      	ldr	r0, [pc, #352]	; (80010a8 <TMCsetup+0x370>)
 8000f48:	f006 f880 	bl	800704c <tmc2209_readInt>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	105b      	asrs	r3, r3, #1
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	607b      	str	r3, [r7, #4]
	printf("RSENSE : %ld\r\n", value);
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	485a      	ldr	r0, [pc, #360]	; (80010c4 <TMCsetup+0x38c>)
 8000f5a:	f006 f9a5 	bl	80072a8 <iprintf>
	value = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK, TMC2209_INTERNAL_RSENSE_SHIFT, value);
 8000f62:	2100      	movs	r1, #0
 8000f64:	4850      	ldr	r0, [pc, #320]	; (80010a8 <TMCsetup+0x370>)
 8000f66:	f006 f871 	bl	800704c <tmc2209_readInt>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f023 0202 	bic.w	r2, r3, #2
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	484a      	ldr	r0, [pc, #296]	; (80010a8 <TMCsetup+0x370>)
 8000f80:	f006 f814 	bl	8006fac <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000f84:	f001 fede 	bl	8002d44 <HAL_GetTick>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4846      	ldr	r0, [pc, #280]	; (80010a8 <TMCsetup+0x370>)
 8000f8e:	f006 f948 	bl	8007222 <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK, TMC2209_INTERNAL_RSENSE_SHIFT);
 8000f92:	2100      	movs	r1, #0
 8000f94:	4844      	ldr	r0, [pc, #272]	; (80010a8 <TMCsetup+0x370>)
 8000f96:	f006 f859 	bl	800704c <tmc2209_readInt>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	105b      	asrs	r3, r3, #1
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	607b      	str	r3, [r7, #4]
	printf("RSENSE : %ld\r\n", value);
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	4847      	ldr	r0, [pc, #284]	; (80010c4 <TMCsetup+0x38c>)
 8000fa8:	f006 f97e 	bl	80072a8 <iprintf>

	value=0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_FREQ_MASK, TMC2209_PWM_FREQ_SHIFT);
 8000fb0:	2170      	movs	r1, #112	; 0x70
 8000fb2:	483d      	ldr	r0, [pc, #244]	; (80010a8 <TMCsetup+0x370>)
 8000fb4:	f006 f84a 	bl	800704c <tmc2209_readInt>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	141b      	asrs	r3, r3, #16
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	607b      	str	r3, [r7, #4]
	printf("PWM_FREQ : %ld\r\n", value);
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	4840      	ldr	r0, [pc, #256]	; (80010c8 <TMCsetup+0x390>)
 8000fc6:	f006 f96f 	bl	80072a8 <iprintf>
	value=1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_FREQ_MASK, TMC2209_PWM_FREQ_SHIFT, value);
 8000fce:	2170      	movs	r1, #112	; 0x70
 8000fd0:	4835      	ldr	r0, [pc, #212]	; (80010a8 <TMCsetup+0x370>)
 8000fd2:	f006 f83b 	bl	800704c <tmc2209_readInt>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	041b      	lsls	r3, r3, #16
 8000fe0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	2170      	movs	r1, #112	; 0x70
 8000fea:	482f      	ldr	r0, [pc, #188]	; (80010a8 <TMCsetup+0x370>)
 8000fec:	f005 ffde 	bl	8006fac <tmc2209_writeInt>
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_FREQ_MASK, TMC2209_PWM_FREQ_SHIFT);
 8000ff0:	2170      	movs	r1, #112	; 0x70
 8000ff2:	482d      	ldr	r0, [pc, #180]	; (80010a8 <TMCsetup+0x370>)
 8000ff4:	f006 f82a 	bl	800704c <tmc2209_readInt>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	141b      	asrs	r3, r3, #16
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	607b      	str	r3, [r7, #4]
	printf("PWM_FREQ : %ld\r\n", value);
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	4830      	ldr	r0, [pc, #192]	; (80010c8 <TMCsetup+0x390>)
 8001006:	f006 f94f 	bl	80072a8 <iprintf>

	value=0;
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209,TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT);
 800100e:	2142      	movs	r1, #66	; 0x42
 8001010:	4825      	ldr	r0, [pc, #148]	; (80010a8 <TMCsetup+0x370>)
 8001012:	f006 f81b 	bl	800704c <tmc2209_readInt>
 8001016:	4603      	mov	r3, r0
 8001018:	13db      	asrs	r3, r3, #15
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	607b      	str	r3, [r7, #4]
	printf("SEIMIN : %ld\r\n", value);
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	482a      	ldr	r0, [pc, #168]	; (80010cc <TMCsetup+0x394>)
 8001024:	f006 f940 	bl	80072a8 <iprintf>

	value=0;
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_DRVSTATUS, TMC2209_CS_ACTUAL_MASK, TMC2209_CS_ACTUAL_SHIFT);
 800102c:	216f      	movs	r1, #111	; 0x6f
 800102e:	481e      	ldr	r0, [pc, #120]	; (80010a8 <TMCsetup+0x370>)
 8001030:	f006 f80c 	bl	800704c <tmc2209_readInt>
 8001034:	4603      	mov	r3, r0
 8001036:	141b      	asrs	r3, r3, #16
 8001038:	f003 031f 	and.w	r3, r3, #31
 800103c:	607b      	str	r3, [r7, #4]
	printf("DRVSTATUS : %ld\r\n", value);
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	4823      	ldr	r0, [pc, #140]	; (80010d0 <TMCsetup+0x398>)
 8001042:	f006 f931 	bl	80072a8 <iprintf>

	mstep_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK,TMC2209_MSTEP_REG_SELECT_SHIFT);	//uartでのmicrostepの有効化
 8001046:	2100      	movs	r1, #0
 8001048:	4817      	ldr	r0, [pc, #92]	; (80010a8 <TMCsetup+0x370>)
 800104a:	f005 ffff 	bl	800704c <tmc2209_readInt>
 800104e:	4603      	mov	r3, r0
 8001050:	11db      	asrs	r3, r3, #7
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	63fb      	str	r3, [r7, #60]	; 0x3c
	printf("mstep_before : %ld\r\n", mstep_value);
 8001058:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800105a:	481e      	ldr	r0, [pc, #120]	; (80010d4 <TMCsetup+0x39c>)
 800105c:	f006 f924 	bl	80072a8 <iprintf>
	mstep_value = 1;
 8001060:	2301      	movs	r3, #1
 8001062:	63fb      	str	r3, [r7, #60]	; 0x3c
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT,mstep_value);
 8001064:	2100      	movs	r1, #0
 8001066:	4810      	ldr	r0, [pc, #64]	; (80010a8 <TMCsetup+0x370>)
 8001068:	f005 fff0 	bl	800704c <tmc2209_readInt>
 800106c:	4603      	mov	r3, r0
 800106e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001074:	01db      	lsls	r3, r3, #7
 8001076:	b2db      	uxtb	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	461a      	mov	r2, r3
 800107c:	2100      	movs	r1, #0
 800107e:	480a      	ldr	r0, [pc, #40]	; (80010a8 <TMCsetup+0x370>)
 8001080:	f005 ff94 	bl	8006fac <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8001084:	f001 fe5e 	bl	8002d44 <HAL_GetTick>
 8001088:	4603      	mov	r3, r0
 800108a:	4619      	mov	r1, r3
 800108c:	4806      	ldr	r0, [pc, #24]	; (80010a8 <TMCsetup+0x370>)
 800108e:	f006 f8c8 	bl	8007222 <tmc2209_periodicJob>
	mstep_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT);
 8001092:	2100      	movs	r1, #0
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <TMCsetup+0x370>)
 8001096:	f005 ffd9 	bl	800704c <tmc2209_readInt>
 800109a:	4603      	mov	r3, r0
 800109c:	11db      	asrs	r3, r3, #7
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010a4:	e018      	b.n	80010d8 <TMCsetup+0x3a0>
 80010a6:	bf00      	nop
 80010a8:	20000184 	.word	0x20000184
 80010ac:	080084ec 	.word	0x080084ec
 80010b0:	080084c8 	.word	0x080084c8
 80010b4:	080084f8 	.word	0x080084f8
 80010b8:	0800850c 	.word	0x0800850c
 80010bc:	08008520 	.word	0x08008520
 80010c0:	08008534 	.word	0x08008534
 80010c4:	08008544 	.word	0x08008544
 80010c8:	08008554 	.word	0x08008554
 80010cc:	08008568 	.word	0x08008568
 80010d0:	08008578 	.word	0x08008578
 80010d4:	0800858c 	.word	0x0800858c
	printf("mstep_after : %ld\r\n", mstep_value);
 80010d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80010da:	48ca      	ldr	r0, [pc, #808]	; (8001404 <TMCsetup+0x6cc>)
 80010dc:	f006 f8e4 	bl	80072a8 <iprintf>

	toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);	//保持トルクの設定
 80010e0:	216c      	movs	r1, #108	; 0x6c
 80010e2:	48c9      	ldr	r0, [pc, #804]	; (8001408 <TMCsetup+0x6d0>)
 80010e4:	f005 ffb2 	bl	800704c <tmc2209_readInt>
 80010e8:	4603      	mov	r3, r0
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	63bb      	str	r3, [r7, #56]	; 0x38
	printf("toff_before : %ld\r\n", toff_value);
 80010f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80010f2:	48c6      	ldr	r0, [pc, #792]	; (800140c <TMCsetup+0x6d4>)
 80010f4:	f006 f8d8 	bl	80072a8 <iprintf>
	toff_value = 3;
 80010f8:	2303      	movs	r3, #3
 80010fa:	63bb      	str	r3, [r7, #56]	; 0x38
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT,toff_value);
 80010fc:	216c      	movs	r1, #108	; 0x6c
 80010fe:	48c2      	ldr	r0, [pc, #776]	; (8001408 <TMCsetup+0x6d0>)
 8001100:	f005 ffa4 	bl	800704c <tmc2209_readInt>
 8001104:	4603      	mov	r3, r0
 8001106:	f023 020f 	bic.w	r2, r3, #15
 800110a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800110c:	f003 030f 	and.w	r3, r3, #15
 8001110:	4313      	orrs	r3, r2
 8001112:	461a      	mov	r2, r3
 8001114:	216c      	movs	r1, #108	; 0x6c
 8001116:	48bc      	ldr	r0, [pc, #752]	; (8001408 <TMCsetup+0x6d0>)
 8001118:	f005 ff48 	bl	8006fac <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800111c:	f001 fe12 	bl	8002d44 <HAL_GetTick>
 8001120:	4603      	mov	r3, r0
 8001122:	4619      	mov	r1, r3
 8001124:	48b8      	ldr	r0, [pc, #736]	; (8001408 <TMCsetup+0x6d0>)
 8001126:	f006 f87c 	bl	8007222 <tmc2209_periodicJob>
	toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 800112a:	216c      	movs	r1, #108	; 0x6c
 800112c:	48b6      	ldr	r0, [pc, #728]	; (8001408 <TMCsetup+0x6d0>)
 800112e:	f005 ff8d 	bl	800704c <tmc2209_readInt>
 8001132:	4603      	mov	r3, r0
 8001134:	f003 030f 	and.w	r3, r3, #15
 8001138:	63bb      	str	r3, [r7, #56]	; 0x38
	printf("toff_after : %ld\r\n", toff_value);
 800113a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800113c:	48b4      	ldr	r0, [pc, #720]	; (8001410 <TMCsetup+0x6d8>)
 800113e:	f006 f8b3 	bl	80072a8 <iprintf>

	microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);	//microstepの設定
 8001142:	216c      	movs	r1, #108	; 0x6c
 8001144:	48b0      	ldr	r0, [pc, #704]	; (8001408 <TMCsetup+0x6d0>)
 8001146:	f005 ff81 	bl	800704c <tmc2209_readInt>
 800114a:	4603      	mov	r3, r0
 800114c:	161b      	asrs	r3, r3, #24
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001156:	fa42 f303 	asr.w	r3, r2, r3
 800115a:	637b      	str	r3, [r7, #52]	; 0x34
	printf("microstep_before : %ld\r\n", microstep_value);
 800115c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800115e:	48ad      	ldr	r0, [pc, #692]	; (8001414 <TMCsetup+0x6dc>)
 8001160:	f006 f8a2 	bl	80072a8 <iprintf>
	microstep_value = 4;
 8001164:	2304      	movs	r3, #4
 8001166:	637b      	str	r3, [r7, #52]	; 0x34
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT,microstep_value);
 8001168:	216c      	movs	r1, #108	; 0x6c
 800116a:	48a7      	ldr	r0, [pc, #668]	; (8001408 <TMCsetup+0x6d0>)
 800116c:	f005 ff6e 	bl	800704c <tmc2209_readInt>
 8001170:	4603      	mov	r3, r0
 8001172:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001178:	061b      	lsls	r3, r3, #24
 800117a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800117e:	4313      	orrs	r3, r2
 8001180:	461a      	mov	r2, r3
 8001182:	216c      	movs	r1, #108	; 0x6c
 8001184:	48a0      	ldr	r0, [pc, #640]	; (8001408 <TMCsetup+0x6d0>)
 8001186:	f005 ff11 	bl	8006fac <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800118a:	f001 fddb 	bl	8002d44 <HAL_GetTick>
 800118e:	4603      	mov	r3, r0
 8001190:	4619      	mov	r1, r3
 8001192:	489d      	ldr	r0, [pc, #628]	; (8001408 <TMCsetup+0x6d0>)
 8001194:	f006 f845 	bl	8007222 <tmc2209_periodicJob>
	microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);
 8001198:	216c      	movs	r1, #108	; 0x6c
 800119a:	489b      	ldr	r0, [pc, #620]	; (8001408 <TMCsetup+0x6d0>)
 800119c:	f005 ff56 	bl	800704c <tmc2209_readInt>
 80011a0:	4603      	mov	r3, r0
 80011a2:	161b      	asrs	r3, r3, #24
 80011a4:	f003 030f 	and.w	r3, r3, #15
 80011a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ac:	fa42 f303 	asr.w	r3, r2, r3
 80011b0:	637b      	str	r3, [r7, #52]	; 0x34
	printf("microstep_after : %ld\r\n", microstep_value);
 80011b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80011b4:	4898      	ldr	r0, [pc, #608]	; (8001418 <TMCsetup+0x6e0>)
 80011b6:	f006 f877 	bl	80072a8 <iprintf>

	IHOLDDELAY_value=4;
 80011ba:	2304      	movs	r3, #4
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT, IHOLDDELAY_value);
 80011be:	2110      	movs	r1, #16
 80011c0:	4891      	ldr	r0, [pc, #580]	; (8001408 <TMCsetup+0x6d0>)
 80011c2:	f005 ff43 	bl	800704c <tmc2209_readInt>
 80011c6:	4603      	mov	r3, r0
 80011c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80011cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ce:	041b      	lsls	r3, r3, #16
 80011d0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80011d4:	4313      	orrs	r3, r2
 80011d6:	461a      	mov	r2, r3
 80011d8:	2110      	movs	r1, #16
 80011da:	488b      	ldr	r0, [pc, #556]	; (8001408 <TMCsetup+0x6d0>)
 80011dc:	f005 fee6 	bl	8006fac <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80011e0:	f001 fdb0 	bl	8002d44 <HAL_GetTick>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4619      	mov	r1, r3
 80011e8:	4887      	ldr	r0, [pc, #540]	; (8001408 <TMCsetup+0x6d0>)
 80011ea:	f006 f81a 	bl	8007222 <tmc2209_periodicJob>
	IHOLDDELAY_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT);
 80011ee:	2110      	movs	r1, #16
 80011f0:	4885      	ldr	r0, [pc, #532]	; (8001408 <TMCsetup+0x6d0>)
 80011f2:	f005 ff2b 	bl	800704c <tmc2209_readInt>
 80011f6:	4603      	mov	r3, r0
 80011f8:	141b      	asrs	r3, r3, #16
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
	printf("IHOLDDELAY: %ld\r\n", IHOLDDELAY_value);
 8001200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001202:	4886      	ldr	r0, [pc, #536]	; (800141c <TMCsetup+0x6e4>)
 8001204:	f006 f850 	bl	80072a8 <iprintf>

	stallgard_setup_value=400;											//SG_RESULTと比較して、
 8001208:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
	tmc2209_writeInt(&TMC2209, TMC2209_SGTHRS, stallgard_setup_value);
 800120e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001210:	2140      	movs	r1, #64	; 0x40
 8001212:	487d      	ldr	r0, [pc, #500]	; (8001408 <TMCsetup+0x6d0>)
 8001214:	f005 feca 	bl	8006fac <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8001218:	f001 fd94 	bl	8002d44 <HAL_GetTick>
 800121c:	4603      	mov	r3, r0
 800121e:	4619      	mov	r1, r3
 8001220:	4879      	ldr	r0, [pc, #484]	; (8001408 <TMCsetup+0x6d0>)
 8001222:	f005 fffe 	bl	8007222 <tmc2209_periodicJob>
	stallgard_setup_value = tmc2209_readInt(&TMC2209, TMC2209_SGTHRS);
 8001226:	2140      	movs	r1, #64	; 0x40
 8001228:	4877      	ldr	r0, [pc, #476]	; (8001408 <TMCsetup+0x6d0>)
 800122a:	f005 ff0f 	bl	800704c <tmc2209_readInt>
 800122e:	6278      	str	r0, [r7, #36]	; 0x24
	printf("SGTHRS: %ld\r\n", stallgard_setup_value);
 8001230:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001232:	487b      	ldr	r0, [pc, #492]	; (8001420 <TMCsetup+0x6e8>)
 8001234:	f006 f838 	bl	80072a8 <iprintf>

	stealthChop_value = 100;
 8001238:	2364      	movs	r3, #100	; 0x64
 800123a:	617b      	str	r3, [r7, #20]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_GRAD_MASK, TMC2209_PWM_GRAD_SHIFT, stealthChop_value);
 800123c:	2170      	movs	r1, #112	; 0x70
 800123e:	4872      	ldr	r0, [pc, #456]	; (8001408 <TMCsetup+0x6d0>)
 8001240:	f005 ff04 	bl	800704c <tmc2209_readInt>
 8001244:	4603      	mov	r3, r0
 8001246:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b29b      	uxth	r3, r3
 8001250:	4313      	orrs	r3, r2
 8001252:	461a      	mov	r2, r3
 8001254:	2170      	movs	r1, #112	; 0x70
 8001256:	486c      	ldr	r0, [pc, #432]	; (8001408 <TMCsetup+0x6d0>)
 8001258:	f005 fea8 	bl	8006fac <tmc2209_writeInt>
	stealthChop_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_GRAD_MASK, TMC2209_PWM_GRAD_SHIFT);
 800125c:	2170      	movs	r1, #112	; 0x70
 800125e:	486a      	ldr	r0, [pc, #424]	; (8001408 <TMCsetup+0x6d0>)
 8001260:	f005 fef4 	bl	800704c <tmc2209_readInt>
 8001264:	4603      	mov	r3, r0
 8001266:	121b      	asrs	r3, r3, #8
 8001268:	b2db      	uxtb	r3, r3
 800126a:	617b      	str	r3, [r7, #20]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800126c:	f001 fd6a 	bl	8002d44 <HAL_GetTick>
 8001270:	4603      	mov	r3, r0
 8001272:	4619      	mov	r1, r3
 8001274:	4864      	ldr	r0, [pc, #400]	; (8001408 <TMCsetup+0x6d0>)
 8001276:	f005 ffd4 	bl	8007222 <tmc2209_periodicJob>
	printf("PWM_GRAD: %ld\r\n", stealthChop_value);
 800127a:	6979      	ldr	r1, [r7, #20]
 800127c:	4869      	ldr	r0, [pc, #420]	; (8001424 <TMCsetup+0x6ec>)
 800127e:	f006 f813 	bl	80072a8 <iprintf>


	value=5;
 8001282:	2305      	movs	r3, #5
 8001284:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEMIN_MASK, TMC2209_SEMIN_SHIFT, value);
 8001286:	2142      	movs	r1, #66	; 0x42
 8001288:	485f      	ldr	r0, [pc, #380]	; (8001408 <TMCsetup+0x6d0>)
 800128a:	f005 fedf 	bl	800704c <tmc2209_readInt>
 800128e:	4603      	mov	r3, r0
 8001290:	f023 020f 	bic.w	r2, r3, #15
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	4313      	orrs	r3, r2
 800129c:	461a      	mov	r2, r3
 800129e:	2142      	movs	r1, #66	; 0x42
 80012a0:	4859      	ldr	r0, [pc, #356]	; (8001408 <TMCsetup+0x6d0>)
 80012a2:	f005 fe83 	bl	8006fac <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80012a6:	f001 fd4d 	bl	8002d44 <HAL_GetTick>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4619      	mov	r1, r3
 80012ae:	4856      	ldr	r0, [pc, #344]	; (8001408 <TMCsetup+0x6d0>)
 80012b0:	f005 ffb7 	bl	8007222 <tmc2209_periodicJob>
	printf("SEMIN: %ld\r\n", value);
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	485c      	ldr	r0, [pc, #368]	; (8001428 <TMCsetup+0x6f0>)
 80012b8:	f005 fff6 	bl	80072a8 <iprintf>

	SEMAX_value = 2;
 80012bc:	2302      	movs	r3, #2
 80012be:	61fb      	str	r3, [r7, #28]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEMAX_MASK, TMC2209_SEMAX_SHIFT, SEMAX_value);
 80012c0:	2142      	movs	r1, #66	; 0x42
 80012c2:	4851      	ldr	r0, [pc, #324]	; (8001408 <TMCsetup+0x6d0>)
 80012c4:	f005 fec2 	bl	800704c <tmc2209_readInt>
 80012c8:	4603      	mov	r3, r0
 80012ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80012d6:	4313      	orrs	r3, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	2142      	movs	r1, #66	; 0x42
 80012dc:	484a      	ldr	r0, [pc, #296]	; (8001408 <TMCsetup+0x6d0>)
 80012de:	f005 fe65 	bl	8006fac <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80012e2:	f001 fd2f 	bl	8002d44 <HAL_GetTick>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4619      	mov	r1, r3
 80012ea:	4847      	ldr	r0, [pc, #284]	; (8001408 <TMCsetup+0x6d0>)
 80012ec:	f005 ff99 	bl	8007222 <tmc2209_periodicJob>
	printf("SEMAX: %ld\r\n", SEMAX_value);
 80012f0:	69f9      	ldr	r1, [r7, #28]
 80012f2:	484e      	ldr	r0, [pc, #312]	; (800142c <TMCsetup+0x6f4>)
 80012f4:	f005 ffd8 	bl	80072a8 <iprintf>

	TBL_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TBL_MASK, TMC2209_TBL_SHIFT);
 80012f8:	216c      	movs	r1, #108	; 0x6c
 80012fa:	4843      	ldr	r0, [pc, #268]	; (8001408 <TMCsetup+0x6d0>)
 80012fc:	f005 fea6 	bl	800704c <tmc2209_readInt>
 8001300:	4603      	mov	r3, r0
 8001302:	13db      	asrs	r3, r3, #15
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	61bb      	str	r3, [r7, #24]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800130a:	f001 fd1b 	bl	8002d44 <HAL_GetTick>
 800130e:	4603      	mov	r3, r0
 8001310:	4619      	mov	r1, r3
 8001312:	483d      	ldr	r0, [pc, #244]	; (8001408 <TMCsetup+0x6d0>)
 8001314:	f005 ff85 	bl	8007222 <tmc2209_periodicJob>
	TBL_value = 1;
 8001318:	2301      	movs	r3, #1
 800131a:	61bb      	str	r3, [r7, #24]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TBL_MASK, TMC2209_TBL_SHIFT, TBL_value);
 800131c:	216c      	movs	r1, #108	; 0x6c
 800131e:	483a      	ldr	r0, [pc, #232]	; (8001408 <TMCsetup+0x6d0>)
 8001320:	f005 fe94 	bl	800704c <tmc2209_readInt>
 8001324:	4603      	mov	r3, r0
 8001326:	f423 32c0 	bic.w	r2, r3, #98304	; 0x18000
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	03db      	lsls	r3, r3, #15
 800132e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001332:	4313      	orrs	r3, r2
 8001334:	461a      	mov	r2, r3
 8001336:	216c      	movs	r1, #108	; 0x6c
 8001338:	4833      	ldr	r0, [pc, #204]	; (8001408 <TMCsetup+0x6d0>)
 800133a:	f005 fe37 	bl	8006fac <tmc2209_writeInt>
	TBL_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TBL_MASK, TMC2209_TBL_SHIFT);
 800133e:	216c      	movs	r1, #108	; 0x6c
 8001340:	4831      	ldr	r0, [pc, #196]	; (8001408 <TMCsetup+0x6d0>)
 8001342:	f005 fe83 	bl	800704c <tmc2209_readInt>
 8001346:	4603      	mov	r3, r0
 8001348:	13db      	asrs	r3, r3, #15
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	61bb      	str	r3, [r7, #24]
	printf("TBL: %ld\r\n", TBL_value);
 8001350:	69b9      	ldr	r1, [r7, #24]
 8001352:	4837      	ldr	r0, [pc, #220]	; (8001430 <TMCsetup+0x6f8>)
 8001354:	f005 ffa8 	bl	80072a8 <iprintf>

	stealthChop_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_GRAD_MASK, TMC2209_PWM_GRAD_SHIFT);
 8001358:	2170      	movs	r1, #112	; 0x70
 800135a:	482b      	ldr	r0, [pc, #172]	; (8001408 <TMCsetup+0x6d0>)
 800135c:	f005 fe76 	bl	800704c <tmc2209_readInt>
 8001360:	4603      	mov	r3, r0
 8001362:	121b      	asrs	r3, r3, #8
 8001364:	b2db      	uxtb	r3, r3
 8001366:	617b      	str	r3, [r7, #20]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8001368:	f001 fcec 	bl	8002d44 <HAL_GetTick>
 800136c:	4603      	mov	r3, r0
 800136e:	4619      	mov	r1, r3
 8001370:	4825      	ldr	r0, [pc, #148]	; (8001408 <TMCsetup+0x6d0>)
 8001372:	f005 ff56 	bl	8007222 <tmc2209_periodicJob>
	printf("PWM_GRAD: %ld\r\n", stealthChop_value);
 8001376:	6979      	ldr	r1, [r7, #20]
 8001378:	482a      	ldr	r0, [pc, #168]	; (8001424 <TMCsetup+0x6ec>)
 800137a:	f005 ff95 	bl	80072a8 <iprintf>

	autoscale_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_AUTOSCALE_MASK, TMC2209_PWM_AUTOSCALE_SHIFT);
 800137e:	2170      	movs	r1, #112	; 0x70
 8001380:	4821      	ldr	r0, [pc, #132]	; (8001408 <TMCsetup+0x6d0>)
 8001382:	f005 fe63 	bl	800704c <tmc2209_readInt>
 8001386:	4603      	mov	r3, r0
 8001388:	149b      	asrs	r3, r3, #18
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	613b      	str	r3, [r7, #16]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8001390:	f001 fcd8 	bl	8002d44 <HAL_GetTick>
 8001394:	4603      	mov	r3, r0
 8001396:	4619      	mov	r1, r3
 8001398:	481b      	ldr	r0, [pc, #108]	; (8001408 <TMCsetup+0x6d0>)
 800139a:	f005 ff42 	bl	8007222 <tmc2209_periodicJob>
	printf("autoscale: %ld\r\n", autoscale_value);
 800139e:	6939      	ldr	r1, [r7, #16]
 80013a0:	4824      	ldr	r0, [pc, #144]	; (8001434 <TMCsetup+0x6fc>)
 80013a2:	f005 ff81 	bl	80072a8 <iprintf>

	PWMAuto_value = tmc2209_readInt(&TMC2209,TMC2209_PWM_AUTO);
 80013a6:	2172      	movs	r1, #114	; 0x72
 80013a8:	4817      	ldr	r0, [pc, #92]	; (8001408 <TMCsetup+0x6d0>)
 80013aa:	f005 fe4f 	bl	800704c <tmc2209_readInt>
 80013ae:	60f8      	str	r0, [r7, #12]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80013b0:	f001 fcc8 	bl	8002d44 <HAL_GetTick>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4619      	mov	r1, r3
 80013b8:	4813      	ldr	r0, [pc, #76]	; (8001408 <TMCsetup+0x6d0>)
 80013ba:	f005 ff32 	bl	8007222 <tmc2209_periodicJob>
	printf("PWMAuto: %ld\r\n", PWMAuto_value);
 80013be:	68f9      	ldr	r1, [r7, #12]
 80013c0:	481d      	ldr	r0, [pc, #116]	; (8001438 <TMCsetup+0x700>)
 80013c2:	f005 ff71 	bl	80072a8 <iprintf>

	PWMAuto_scale = tmc2209_readInt(&TMC2209,TMC2209_PWMSCALE);
 80013c6:	2171      	movs	r1, #113	; 0x71
 80013c8:	480f      	ldr	r0, [pc, #60]	; (8001408 <TMCsetup+0x6d0>)
 80013ca:	f005 fe3f 	bl	800704c <tmc2209_readInt>
 80013ce:	60b8      	str	r0, [r7, #8]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80013d0:	f001 fcb8 	bl	8002d44 <HAL_GetTick>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4619      	mov	r1, r3
 80013d8:	480b      	ldr	r0, [pc, #44]	; (8001408 <TMCsetup+0x6d0>)
 80013da:	f005 ff22 	bl	8007222 <tmc2209_periodicJob>
	printf("PWMSCALE: %ld\r\n", PWMAuto_scale);
 80013de:	68b9      	ldr	r1, [r7, #8]
 80013e0:	4816      	ldr	r0, [pc, #88]	; (800143c <TMCsetup+0x704>)
 80013e2:	f005 ff61 	bl	80072a8 <iprintf>

	value = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, 0x07, TMC2209_FCLKTRIM_MASK, TMC2209_FCLKTRIM_SHIFT);
 80013ea:	2107      	movs	r1, #7
 80013ec:	4806      	ldr	r0, [pc, #24]	; (8001408 <TMCsetup+0x6d0>)
 80013ee:	f005 fe2d 	bl	800704c <tmc2209_readInt>
 80013f2:	4603      	mov	r3, r0
 80013f4:	f003 031f 	and.w	r3, r3, #31
 80013f8:	607b      	str	r3, [r7, #4]

	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80013fa:	f001 fca3 	bl	8002d44 <HAL_GetTick>
 80013fe:	4603      	mov	r3, r0
 8001400:	4619      	mov	r1, r3
 8001402:	e01d      	b.n	8001440 <TMCsetup+0x708>
 8001404:	080085a4 	.word	0x080085a4
 8001408:	20000184 	.word	0x20000184
 800140c:	080085b8 	.word	0x080085b8
 8001410:	080085cc 	.word	0x080085cc
 8001414:	080085e0 	.word	0x080085e0
 8001418:	080085fc 	.word	0x080085fc
 800141c:	08008614 	.word	0x08008614
 8001420:	08008628 	.word	0x08008628
 8001424:	08008638 	.word	0x08008638
 8001428:	08008648 	.word	0x08008648
 800142c:	08008658 	.word	0x08008658
 8001430:	08008668 	.word	0x08008668
 8001434:	08008674 	.word	0x08008674
 8001438:	08008688 	.word	0x08008688
 800143c:	08008698 	.word	0x08008698
 8001440:	4806      	ldr	r0, [pc, #24]	; (800145c <TMCsetup+0x724>)
 8001442:	f005 feee 	bl	8007222 <tmc2209_periodicJob>
	printf("frequency: %ld\r\n", value);
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <TMCsetup+0x728>)
 800144a:	f005 ff2d 	bl	80072a8 <iprintf>




	end_flag=1;
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <TMCsetup+0x72c>)
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]

}
 8001454:	bf00      	nop
 8001456:	3740      	adds	r7, #64	; 0x40
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000184 	.word	0x20000184
 8001460:	080086a8 	.word	0x080086a8
 8001464:	200004d9 	.word	0x200004d9

08001468 <RMDCommand>:

void RMDCommand(){
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
//	int i = 0;
	int count=0;
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
	TxHeader.StdId=0x141;
 8001472:	4b92      	ldr	r3, [pc, #584]	; (80016bc <RMDCommand+0x254>)
 8001474:	f240 1241 	movw	r2, #321	; 0x141
 8001478:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800147a:	4b90      	ldr	r3, [pc, #576]	; (80016bc <RMDCommand+0x254>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 0x08;
 8001480:	4b8e      	ldr	r3, [pc, #568]	; (80016bc <RMDCommand+0x254>)
 8001482:	2208      	movs	r2, #8
 8001484:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8001486:	4b8d      	ldr	r3, [pc, #564]	; (80016bc <RMDCommand+0x254>)
 8001488:	2200      	movs	r2, #0
 800148a:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 800148c:	4b8b      	ldr	r3, [pc, #556]	; (80016bc <RMDCommand+0x254>)
 800148e:	2200      	movs	r2, #0
 8001490:	751a      	strb	r2, [r3, #20]
	TxData[1] = 0x00;
 8001492:	4b8b      	ldr	r3, [pc, #556]	; (80016c0 <RMDCommand+0x258>)
 8001494:	2200      	movs	r2, #0
 8001496:	705a      	strb	r2, [r3, #1]
	TxData[2] = 0x00;
 8001498:	4b89      	ldr	r3, [pc, #548]	; (80016c0 <RMDCommand+0x258>)
 800149a:	2200      	movs	r2, #0
 800149c:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0x00;
 800149e:	4b88      	ldr	r3, [pc, #544]	; (80016c0 <RMDCommand+0x258>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	70da      	strb	r2, [r3, #3]
	TxData[4] = 0x00;
 80014a4:	4b86      	ldr	r3, [pc, #536]	; (80016c0 <RMDCommand+0x258>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	711a      	strb	r2, [r3, #4]
	TxData[5] = 0x00;
 80014aa:	4b85      	ldr	r3, [pc, #532]	; (80016c0 <RMDCommand+0x258>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	715a      	strb	r2, [r3, #5]
	TxData[6] = 0x00;
 80014b0:	4b83      	ldr	r3, [pc, #524]	; (80016c0 <RMDCommand+0x258>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	719a      	strb	r2, [r3, #6]
	TxData[7] = 0x00;
 80014b6:	4b82      	ldr	r3, [pc, #520]	; (80016c0 <RMDCommand+0x258>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	71da      	strb	r2, [r3, #7]
	switch(Writecom){
 80014bc:	4b81      	ldr	r3, [pc, #516]	; (80016c4 <RMDCommand+0x25c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2ba4      	cmp	r3, #164	; 0xa4
 80014c2:	d077      	beq.n	80015b4 <RMDCommand+0x14c>
 80014c4:	2ba4      	cmp	r3, #164	; 0xa4
 80014c6:	f300 80ae 	bgt.w	8001626 <RMDCommand+0x1be>
 80014ca:	2ba1      	cmp	r3, #161	; 0xa1
 80014cc:	d05d      	beq.n	800158a <RMDCommand+0x122>
 80014ce:	2ba1      	cmp	r3, #161	; 0xa1
 80014d0:	f300 80a9 	bgt.w	8001626 <RMDCommand+0x1be>
 80014d4:	2b91      	cmp	r3, #145	; 0x91
 80014d6:	f000 8088 	beq.w	80015ea <RMDCommand+0x182>
 80014da:	2b91      	cmp	r3, #145	; 0x91
 80014dc:	f300 80a3 	bgt.w	8001626 <RMDCommand+0x1be>
 80014e0:	2b34      	cmp	r3, #52	; 0x34
 80014e2:	d03e      	beq.n	8001562 <RMDCommand+0xfa>
 80014e4:	2b34      	cmp	r3, #52	; 0x34
 80014e6:	f300 809e 	bgt.w	8001626 <RMDCommand+0x1be>
 80014ea:	2b31      	cmp	r3, #49	; 0x31
 80014ec:	d002      	beq.n	80014f4 <RMDCommand+0x8c>
 80014ee:	2b32      	cmp	r3, #50	; 0x32
 80014f0:	d01b      	beq.n	800152a <RMDCommand+0xc2>
 80014f2:	e098      	b.n	8001626 <RMDCommand+0x1be>
		case 0x31:
			TxData[0] = 0x31;	//PI設定
 80014f4:	4b72      	ldr	r3, [pc, #456]	; (80016c0 <RMDCommand+0x258>)
 80014f6:	2231      	movs	r2, #49	; 0x31
 80014f8:	701a      	strb	r2, [r3, #0]
			TxData[2] = UART1_Data[2];	//anglePidKp
 80014fa:	4b73      	ldr	r3, [pc, #460]	; (80016c8 <RMDCommand+0x260>)
 80014fc:	789a      	ldrb	r2, [r3, #2]
 80014fe:	4b70      	ldr	r3, [pc, #448]	; (80016c0 <RMDCommand+0x258>)
 8001500:	709a      	strb	r2, [r3, #2]
			TxData[3] = UART1_Data[3];	//anglePidKi
 8001502:	4b71      	ldr	r3, [pc, #452]	; (80016c8 <RMDCommand+0x260>)
 8001504:	78da      	ldrb	r2, [r3, #3]
 8001506:	4b6e      	ldr	r3, [pc, #440]	; (80016c0 <RMDCommand+0x258>)
 8001508:	70da      	strb	r2, [r3, #3]
			TxData[4] = UART1_Data[4];	//speedPidKp
 800150a:	4b6f      	ldr	r3, [pc, #444]	; (80016c8 <RMDCommand+0x260>)
 800150c:	791a      	ldrb	r2, [r3, #4]
 800150e:	4b6c      	ldr	r3, [pc, #432]	; (80016c0 <RMDCommand+0x258>)
 8001510:	711a      	strb	r2, [r3, #4]
			TxData[5] = UART1_Data[5];	//speedPidKi
 8001512:	4b6d      	ldr	r3, [pc, #436]	; (80016c8 <RMDCommand+0x260>)
 8001514:	795a      	ldrb	r2, [r3, #5]
 8001516:	4b6a      	ldr	r3, [pc, #424]	; (80016c0 <RMDCommand+0x258>)
 8001518:	715a      	strb	r2, [r3, #5]
			TxData[6] = UART1_Data[6];	//iqPidKp
 800151a:	4b6b      	ldr	r3, [pc, #428]	; (80016c8 <RMDCommand+0x260>)
 800151c:	799a      	ldrb	r2, [r3, #6]
 800151e:	4b68      	ldr	r3, [pc, #416]	; (80016c0 <RMDCommand+0x258>)
 8001520:	719a      	strb	r2, [r3, #6]
			TxData[7] = UART1_Data[7];	//iqPidKi
 8001522:	4b69      	ldr	r3, [pc, #420]	; (80016c8 <RMDCommand+0x260>)
 8001524:	79da      	ldrb	r2, [r3, #7]
 8001526:	4b66      	ldr	r3, [pc, #408]	; (80016c0 <RMDCommand+0x258>)
 8001528:	71da      	strb	r2, [r3, #7]
		case 0x32:
			TxData[0] = 0x32;	//PI設定
 800152a:	4b65      	ldr	r3, [pc, #404]	; (80016c0 <RMDCommand+0x258>)
 800152c:	2232      	movs	r2, #50	; 0x32
 800152e:	701a      	strb	r2, [r3, #0]
			TxData[2] = UART1_Data[2];	//anglePidKp
 8001530:	4b65      	ldr	r3, [pc, #404]	; (80016c8 <RMDCommand+0x260>)
 8001532:	789a      	ldrb	r2, [r3, #2]
 8001534:	4b62      	ldr	r3, [pc, #392]	; (80016c0 <RMDCommand+0x258>)
 8001536:	709a      	strb	r2, [r3, #2]
			TxData[3] = UART1_Data[3];	//anglePidKi
 8001538:	4b63      	ldr	r3, [pc, #396]	; (80016c8 <RMDCommand+0x260>)
 800153a:	78da      	ldrb	r2, [r3, #3]
 800153c:	4b60      	ldr	r3, [pc, #384]	; (80016c0 <RMDCommand+0x258>)
 800153e:	70da      	strb	r2, [r3, #3]
			TxData[4] = UART1_Data[4];	//speedPidKp
 8001540:	4b61      	ldr	r3, [pc, #388]	; (80016c8 <RMDCommand+0x260>)
 8001542:	791a      	ldrb	r2, [r3, #4]
 8001544:	4b5e      	ldr	r3, [pc, #376]	; (80016c0 <RMDCommand+0x258>)
 8001546:	711a      	strb	r2, [r3, #4]
			TxData[5] = UART1_Data[5];	//speedPidKi
 8001548:	4b5f      	ldr	r3, [pc, #380]	; (80016c8 <RMDCommand+0x260>)
 800154a:	795a      	ldrb	r2, [r3, #5]
 800154c:	4b5c      	ldr	r3, [pc, #368]	; (80016c0 <RMDCommand+0x258>)
 800154e:	715a      	strb	r2, [r3, #5]
			TxData[6] = UART1_Data[6];	//iqPidKp
 8001550:	4b5d      	ldr	r3, [pc, #372]	; (80016c8 <RMDCommand+0x260>)
 8001552:	799a      	ldrb	r2, [r3, #6]
 8001554:	4b5a      	ldr	r3, [pc, #360]	; (80016c0 <RMDCommand+0x258>)
 8001556:	719a      	strb	r2, [r3, #6]
			TxData[7] = UART1_Data[7];	//iqPidKi
 8001558:	4b5b      	ldr	r3, [pc, #364]	; (80016c8 <RMDCommand+0x260>)
 800155a:	79da      	ldrb	r2, [r3, #7]
 800155c:	4b58      	ldr	r3, [pc, #352]	; (80016c0 <RMDCommand+0x258>)
 800155e:	71da      	strb	r2, [r3, #7]
			break;
 8001560:	e068      	b.n	8001634 <RMDCommand+0x1cc>
		case 0x34:
			TxData[0] = 0x34;	//accelePI設定
 8001562:	4b57      	ldr	r3, [pc, #348]	; (80016c0 <RMDCommand+0x258>)
 8001564:	2234      	movs	r2, #52	; 0x34
 8001566:	701a      	strb	r2, [r3, #0]
			TxData[4] = UART1_Data[4];	//speedI
 8001568:	4b57      	ldr	r3, [pc, #348]	; (80016c8 <RMDCommand+0x260>)
 800156a:	791a      	ldrb	r2, [r3, #4]
 800156c:	4b54      	ldr	r3, [pc, #336]	; (80016c0 <RMDCommand+0x258>)
 800156e:	711a      	strb	r2, [r3, #4]
			TxData[5] = UART1_Data[5];	//TorqueP
 8001570:	4b55      	ldr	r3, [pc, #340]	; (80016c8 <RMDCommand+0x260>)
 8001572:	795a      	ldrb	r2, [r3, #5]
 8001574:	4b52      	ldr	r3, [pc, #328]	; (80016c0 <RMDCommand+0x258>)
 8001576:	715a      	strb	r2, [r3, #5]
			TxData[6] = UART1_Data[6];	//TorqueI
 8001578:	4b53      	ldr	r3, [pc, #332]	; (80016c8 <RMDCommand+0x260>)
 800157a:	799a      	ldrb	r2, [r3, #6]
 800157c:	4b50      	ldr	r3, [pc, #320]	; (80016c0 <RMDCommand+0x258>)
 800157e:	719a      	strb	r2, [r3, #6]
			TxData[7] = UART1_Data[7];	//PosI
 8001580:	4b51      	ldr	r3, [pc, #324]	; (80016c8 <RMDCommand+0x260>)
 8001582:	79da      	ldrb	r2, [r3, #7]
 8001584:	4b4e      	ldr	r3, [pc, #312]	; (80016c0 <RMDCommand+0x258>)
 8001586:	71da      	strb	r2, [r3, #7]
			break;
 8001588:	e054      	b.n	8001634 <RMDCommand+0x1cc>
		case 0xA1:
			TxData[0] = 0xA1;	//Torque設定
 800158a:	4b4d      	ldr	r3, [pc, #308]	; (80016c0 <RMDCommand+0x258>)
 800158c:	22a1      	movs	r2, #161	; 0xa1
 800158e:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x00;
 8001590:	4b4b      	ldr	r3, [pc, #300]	; (80016c0 <RMDCommand+0x258>)
 8001592:	2200      	movs	r2, #0
 8001594:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x2C;	//speed low
 8001596:	4b4a      	ldr	r3, [pc, #296]	; (80016c0 <RMDCommand+0x258>)
 8001598:	222c      	movs	r2, #44	; 0x2c
 800159a:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x01;	//speed high
 800159c:	4b48      	ldr	r3, [pc, #288]	; (80016c0 <RMDCommand+0x258>)
 800159e:	2201      	movs	r2, #1
 80015a0:	70da      	strb	r2, [r3, #3]
			TxData[4] = UART1_Data[4];	//currentlow
 80015a2:	4b49      	ldr	r3, [pc, #292]	; (80016c8 <RMDCommand+0x260>)
 80015a4:	791a      	ldrb	r2, [r3, #4]
 80015a6:	4b46      	ldr	r3, [pc, #280]	; (80016c0 <RMDCommand+0x258>)
 80015a8:	711a      	strb	r2, [r3, #4]
			TxData[5] = UART1_Data[5];	//currenthigh
 80015aa:	4b47      	ldr	r3, [pc, #284]	; (80016c8 <RMDCommand+0x260>)
 80015ac:	795a      	ldrb	r2, [r3, #5]
 80015ae:	4b44      	ldr	r3, [pc, #272]	; (80016c0 <RMDCommand+0x258>)
 80015b0:	715a      	strb	r2, [r3, #5]
			break;
 80015b2:	e03f      	b.n	8001634 <RMDCommand+0x1cc>
		case 0xA4:
			TxData[0] = 0xA4;
 80015b4:	4b42      	ldr	r3, [pc, #264]	; (80016c0 <RMDCommand+0x258>)
 80015b6:	22a4      	movs	r2, #164	; 0xa4
 80015b8:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x00;
 80015ba:	4b41      	ldr	r3, [pc, #260]	; (80016c0 <RMDCommand+0x258>)
 80015bc:	2200      	movs	r2, #0
 80015be:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x2C;	//speed low
 80015c0:	4b3f      	ldr	r3, [pc, #252]	; (80016c0 <RMDCommand+0x258>)
 80015c2:	222c      	movs	r2, #44	; 0x2c
 80015c4:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x01;	//speed high
 80015c6:	4b3e      	ldr	r3, [pc, #248]	; (80016c0 <RMDCommand+0x258>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	70da      	strb	r2, [r3, #3]
			TxData[4] = UART1_Data[4];	//poslow
 80015cc:	4b3e      	ldr	r3, [pc, #248]	; (80016c8 <RMDCommand+0x260>)
 80015ce:	791a      	ldrb	r2, [r3, #4]
 80015d0:	4b3b      	ldr	r3, [pc, #236]	; (80016c0 <RMDCommand+0x258>)
 80015d2:	711a      	strb	r2, [r3, #4]
			TxData[5] = UART1_Data[5];
 80015d4:	4b3c      	ldr	r3, [pc, #240]	; (80016c8 <RMDCommand+0x260>)
 80015d6:	795a      	ldrb	r2, [r3, #5]
 80015d8:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <RMDCommand+0x258>)
 80015da:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 80015dc:	4b38      	ldr	r3, [pc, #224]	; (80016c0 <RMDCommand+0x258>)
 80015de:	2200      	movs	r2, #0
 80015e0:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;	//poshigh
 80015e2:	4b37      	ldr	r3, [pc, #220]	; (80016c0 <RMDCommand+0x258>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	71da      	strb	r2, [r3, #7]
			break;
 80015e8:	e024      	b.n	8001634 <RMDCommand+0x1cc>
		case 0x91:
			TxData[0] = 0x91;
 80015ea:	4b35      	ldr	r3, [pc, #212]	; (80016c0 <RMDCommand+0x258>)
 80015ec:	2291      	movs	r2, #145	; 0x91
 80015ee:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x00;
 80015f0:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <RMDCommand+0x258>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x00;	//speed low
 80015f6:	4b32      	ldr	r3, [pc, #200]	; (80016c0 <RMDCommand+0x258>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;	//speed high
 80015fc:	4b30      	ldr	r3, [pc, #192]	; (80016c0 <RMDCommand+0x258>)
 80015fe:	2200      	movs	r2, #0
 8001600:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x00;	//poslow
 8001602:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <RMDCommand+0x258>)
 8001604:	2200      	movs	r2, #0
 8001606:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8001608:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <RMDCommand+0x258>)
 800160a:	2200      	movs	r2, #0
 800160c:	715a      	strb	r2, [r3, #5]
			TxData[6] = UART1_Data[6];
 800160e:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <RMDCommand+0x260>)
 8001610:	799a      	ldrb	r2, [r3, #6]
 8001612:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <RMDCommand+0x258>)
 8001614:	719a      	strb	r2, [r3, #6]
			TxData[7] = UART1_Data[7];	//poshigh
 8001616:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <RMDCommand+0x260>)
 8001618:	79da      	ldrb	r2, [r3, #7]
 800161a:	4b29      	ldr	r3, [pc, #164]	; (80016c0 <RMDCommand+0x258>)
 800161c:	71da      	strb	r2, [r3, #7]
			printf("0x91\r\n");
 800161e:	482b      	ldr	r0, [pc, #172]	; (80016cc <RMDCommand+0x264>)
 8001620:	f005 fec8 	bl	80073b4 <puts>

			break;
 8001624:	e006      	b.n	8001634 <RMDCommand+0x1cc>

		default:
			printf("No Data Writecom\r\n");
 8001626:	482a      	ldr	r0, [pc, #168]	; (80016d0 <RMDCommand+0x268>)
 8001628:	f005 fec4 	bl	80073b4 <puts>
			end_flag=1;
 800162c:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <RMDCommand+0x26c>)
 800162e:	2201      	movs	r2, #1
 8001630:	701a      	strb	r2, [r3, #0]
			break;
 8001632:	bf00      	nop
		}
	Writecom=0x00;
 8001634:	4b23      	ldr	r3, [pc, #140]	; (80016c4 <RMDCommand+0x25c>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
	switch(Readcom){
 800163a:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <RMDCommand+0x270>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2ba1      	cmp	r3, #161	; 0xa1
 8001640:	d01a      	beq.n	8001678 <RMDCommand+0x210>
 8001642:	2ba1      	cmp	r3, #161	; 0xa1
 8001644:	dc1f      	bgt.n	8001686 <RMDCommand+0x21e>
 8001646:	2b9c      	cmp	r3, #156	; 0x9c
 8001648:	d012      	beq.n	8001670 <RMDCommand+0x208>
 800164a:	2b9c      	cmp	r3, #156	; 0x9c
 800164c:	dc1b      	bgt.n	8001686 <RMDCommand+0x21e>
 800164e:	2b90      	cmp	r3, #144	; 0x90
 8001650:	d015      	beq.n	800167e <RMDCommand+0x216>
 8001652:	2b90      	cmp	r3, #144	; 0x90
 8001654:	dc17      	bgt.n	8001686 <RMDCommand+0x21e>
 8001656:	2b30      	cmp	r3, #48	; 0x30
 8001658:	d002      	beq.n	8001660 <RMDCommand+0x1f8>
 800165a:	2b33      	cmp	r3, #51	; 0x33
 800165c:	d004      	beq.n	8001668 <RMDCommand+0x200>
 800165e:	e012      	b.n	8001686 <RMDCommand+0x21e>
		case 0x30:
			TxData[0] = 0x30;
 8001660:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <RMDCommand+0x258>)
 8001662:	2230      	movs	r2, #48	; 0x30
 8001664:	701a      	strb	r2, [r3, #0]
			break;
 8001666:	e015      	b.n	8001694 <RMDCommand+0x22c>
		case 0x33:
			TxData[0] = 0x33;
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <RMDCommand+0x258>)
 800166a:	2233      	movs	r2, #51	; 0x33
 800166c:	701a      	strb	r2, [r3, #0]
			break;
 800166e:	e011      	b.n	8001694 <RMDCommand+0x22c>
		case 0x9C:
			TxData[0] = 0x9C;
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <RMDCommand+0x258>)
 8001672:	229c      	movs	r2, #156	; 0x9c
 8001674:	701a      	strb	r2, [r3, #0]
			break;
 8001676:	e00d      	b.n	8001694 <RMDCommand+0x22c>
		case 0xA1:
			TxData[0] = 0xA1;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <RMDCommand+0x258>)
 800167a:	22a1      	movs	r2, #161	; 0xa1
 800167c:	701a      	strb	r2, [r3, #0]
		case 0x90:
			TxData[0] = 0x90;
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <RMDCommand+0x258>)
 8001680:	2290      	movs	r2, #144	; 0x90
 8001682:	701a      	strb	r2, [r3, #0]
			break;
 8001684:	e006      	b.n	8001694 <RMDCommand+0x22c>
		default:
			printf("No Data Readcom\r\n");
 8001686:	4815      	ldr	r0, [pc, #84]	; (80016dc <RMDCommand+0x274>)
 8001688:	f005 fe94 	bl	80073b4 <puts>
			end_flag=1;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <RMDCommand+0x26c>)
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
			break;
 8001692:	bf00      	nop
	}
	Readcom=0x00;
 8001694:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <RMDCommand+0x270>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
	if(3== HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) ){
 800169a:	4811      	ldr	r0, [pc, #68]	; (80016e0 <RMDCommand+0x278>)
 800169c:	f001 fec6 	bl	800342c <HAL_CAN_GetTxMailboxesFreeLevel>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d145      	bne.n	8001732 <RMDCommand+0x2ca>
		HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <RMDCommand+0x27c>)
 80016a8:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <RMDCommand+0x258>)
 80016aa:	4904      	ldr	r1, [pc, #16]	; (80016bc <RMDCommand+0x254>)
 80016ac:	480c      	ldr	r0, [pc, #48]	; (80016e0 <RMDCommand+0x278>)
 80016ae:	f001 fde2 	bl	8003276 <HAL_CAN_AddTxMessage>
		HAL_Delay(10);
 80016b2:	200a      	movs	r0, #10
 80016b4:	f001 fb52 	bl	8002d5c <HAL_Delay>
//		printf("Can Send\r\n");
		while(!nextcan_flag){
 80016b8:	e031      	b.n	800171e <RMDCommand+0x2b6>
 80016ba:	bf00      	nop
 80016bc:	20000488 	.word	0x20000488
 80016c0:	200004bc 	.word	0x200004bc
 80016c4:	200004dc 	.word	0x200004dc
 80016c8:	200004d0 	.word	0x200004d0
 80016cc:	080086bc 	.word	0x080086bc
 80016d0:	080086c4 	.word	0x080086c4
 80016d4:	200004d9 	.word	0x200004d9
 80016d8:	200004e0 	.word	0x200004e0
 80016dc:	080086d8 	.word	0x080086d8
 80016e0:	2000008c 	.word	0x2000008c
 80016e4:	200004cc 	.word	0x200004cc
//			printf("Mailboxes: %d\r\n",HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
			HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 80016e8:	4b18      	ldr	r3, [pc, #96]	; (800174c <RMDCommand+0x2e4>)
 80016ea:	4a19      	ldr	r2, [pc, #100]	; (8001750 <RMDCommand+0x2e8>)
 80016ec:	4919      	ldr	r1, [pc, #100]	; (8001754 <RMDCommand+0x2ec>)
 80016ee:	481a      	ldr	r0, [pc, #104]	; (8001758 <RMDCommand+0x2f0>)
 80016f0:	f001 fdc1 	bl	8003276 <HAL_CAN_AddTxMessage>
			HAL_Delay(10);
 80016f4:	200a      	movs	r0, #10
 80016f6:	f001 fb31 	bl	8002d5c <HAL_Delay>
			count++;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3301      	adds	r3, #1
 80016fe:	607b      	str	r3, [r7, #4]
			if(count==10){
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b0a      	cmp	r3, #10
 8001704:	d10b      	bne.n	800171e <RMDCommand+0x2b6>
				nextcan_flag=1;
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <RMDCommand+0x2f4>)
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
				HAL_CAN_Stop (&hcan1);
 800170c:	4812      	ldr	r0, [pc, #72]	; (8001758 <RMDCommand+0x2f0>)
 800170e:	f001 fd69 	bl	80031e4 <HAL_CAN_Stop>
				//HAL_CAN_AbortTxRequest(&hcan1,TxMailbox);
				HAL_CAN_Start(&hcan1);
 8001712:	4811      	ldr	r0, [pc, #68]	; (8001758 <RMDCommand+0x2f0>)
 8001714:	f001 fd22 	bl	800315c <HAL_CAN_Start>
				printf("CAN RESET\r\n");
 8001718:	4811      	ldr	r0, [pc, #68]	; (8001760 <RMDCommand+0x2f8>)
 800171a:	f005 fe4b 	bl	80073b4 <puts>
		while(!nextcan_flag){
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <RMDCommand+0x2f4>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0e0      	beq.n	80016e8 <RMDCommand+0x280>
			}
		}
		nextcan_flag=0;
 8001726:	4b0d      	ldr	r3, [pc, #52]	; (800175c <RMDCommand+0x2f4>)
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
		count=0;
 800172c:	2300      	movs	r3, #0
 800172e:	607b      	str	r3, [r7, #4]
	}else{
		printf("Mailbox_congestion\r\n");
		nextcan_flag=0;
		end_flag=1;
	}
}
 8001730:	e008      	b.n	8001744 <RMDCommand+0x2dc>
		printf("Mailbox_congestion\r\n");
 8001732:	480c      	ldr	r0, [pc, #48]	; (8001764 <RMDCommand+0x2fc>)
 8001734:	f005 fe3e 	bl	80073b4 <puts>
		nextcan_flag=0;
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <RMDCommand+0x2f4>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
		end_flag=1;
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <RMDCommand+0x300>)
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200004cc 	.word	0x200004cc
 8001750:	200004bc 	.word	0x200004bc
 8001754:	20000488 	.word	0x20000488
 8001758:	2000008c 	.word	0x2000008c
 800175c:	200004da 	.word	0x200004da
 8001760:	080086ec 	.word	0x080086ec
 8001764:	080086f8 	.word	0x080086f8
 8001768:	200004d9 	.word	0x200004d9

0800176c <RMDTx>:
void RMDTx(){
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
	int count=0;
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
	TxHeader.StdId=0x141;
 8001776:	4b2c      	ldr	r3, [pc, #176]	; (8001828 <RMDTx+0xbc>)
 8001778:	f240 1241 	movw	r2, #321	; 0x141
 800177c:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800177e:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <RMDTx+0xbc>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 0x08;
 8001784:	4b28      	ldr	r3, [pc, #160]	; (8001828 <RMDTx+0xbc>)
 8001786:	2208      	movs	r2, #8
 8001788:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 800178a:	4b27      	ldr	r3, [pc, #156]	; (8001828 <RMDTx+0xbc>)
 800178c:	2200      	movs	r2, #0
 800178e:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001790:	4b25      	ldr	r3, [pc, #148]	; (8001828 <RMDTx+0xbc>)
 8001792:	2200      	movs	r2, #0
 8001794:	751a      	strb	r2, [r3, #20]
	TxData[1] = 0x00;
 8001796:	4b25      	ldr	r3, [pc, #148]	; (800182c <RMDTx+0xc0>)
 8001798:	2200      	movs	r2, #0
 800179a:	705a      	strb	r2, [r3, #1]

	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) ){
 800179c:	4824      	ldr	r0, [pc, #144]	; (8001830 <RMDTx+0xc4>)
 800179e:	f001 fe45 	bl	800342c <HAL_CAN_GetTxMailboxesFreeLevel>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d03a      	beq.n	800181e <RMDTx+0xb2>
			HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 80017a8:	4b22      	ldr	r3, [pc, #136]	; (8001834 <RMDTx+0xc8>)
 80017aa:	4a20      	ldr	r2, [pc, #128]	; (800182c <RMDTx+0xc0>)
 80017ac:	491e      	ldr	r1, [pc, #120]	; (8001828 <RMDTx+0xbc>)
 80017ae:	4820      	ldr	r0, [pc, #128]	; (8001830 <RMDTx+0xc4>)
 80017b0:	f001 fd61 	bl	8003276 <HAL_CAN_AddTxMessage>
			HAL_Delay(10);
 80017b4:	200a      	movs	r0, #10
 80017b6:	f001 fad1 	bl	8002d5c <HAL_Delay>
	//		printf("Can Send\r\n");
			while(!nextcan_flag){
 80017ba:	e027      	b.n	800180c <RMDTx+0xa0>
		//			printf("Mailboxes: %d\r\n",HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
					if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) ){
 80017bc:	481c      	ldr	r0, [pc, #112]	; (8001830 <RMDTx+0xc4>)
 80017be:	f001 fe35 	bl	800342c <HAL_CAN_GetTxMailboxesFreeLevel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d021      	beq.n	800180c <RMDTx+0xa0>
					HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 80017c8:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <RMDTx+0xc8>)
 80017ca:	4a18      	ldr	r2, [pc, #96]	; (800182c <RMDTx+0xc0>)
 80017cc:	4916      	ldr	r1, [pc, #88]	; (8001828 <RMDTx+0xbc>)
 80017ce:	4818      	ldr	r0, [pc, #96]	; (8001830 <RMDTx+0xc4>)
 80017d0:	f001 fd51 	bl	8003276 <HAL_CAN_AddTxMessage>
					HAL_Delay(10);
 80017d4:	200a      	movs	r0, #10
 80017d6:	f001 fac1 	bl	8002d5c <HAL_Delay>
					if(count==10){
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b0a      	cmp	r3, #10
 80017de:	d10c      	bne.n	80017fa <RMDTx+0x8e>
						nextcan_flag=1;
 80017e0:	4b15      	ldr	r3, [pc, #84]	; (8001838 <RMDTx+0xcc>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
						HAL_CAN_Stop (&hcan1);
 80017e6:	4812      	ldr	r0, [pc, #72]	; (8001830 <RMDTx+0xc4>)
 80017e8:	f001 fcfc 	bl	80031e4 <HAL_CAN_Stop>
						HAL_CAN_Start(&hcan1);
 80017ec:	4810      	ldr	r0, [pc, #64]	; (8001830 <RMDTx+0xc4>)
 80017ee:	f001 fcb5 	bl	800315c <HAL_CAN_Start>
						printf("CAN RESET\r\n");
 80017f2:	4812      	ldr	r0, [pc, #72]	; (800183c <RMDTx+0xd0>)
 80017f4:	f005 fdde 	bl	80073b4 <puts>
 80017f8:	e008      	b.n	800180c <RMDTx+0xa0>
						}else{
						printf("Mailbox_congestion\r\n");
 80017fa:	4811      	ldr	r0, [pc, #68]	; (8001840 <RMDTx+0xd4>)
 80017fc:	f005 fdda 	bl	80073b4 <puts>
								nextcan_flag=0;
 8001800:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <RMDTx+0xcc>)
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
								end_flag=1;
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <RMDTx+0xd8>)
 8001808:	2201      	movs	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]
			while(!nextcan_flag){
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <RMDTx+0xcc>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0d3      	beq.n	80017bc <RMDTx+0x50>
							}
					}
				}
			nextcan_flag=0;
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <RMDTx+0xcc>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
			count=0;
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
	}
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000488 	.word	0x20000488
 800182c:	200004bc 	.word	0x200004bc
 8001830:	2000008c 	.word	0x2000008c
 8001834:	200004cc 	.word	0x200004cc
 8001838:	200004da 	.word	0x200004da
 800183c:	080086ec 	.word	0x080086ec
 8001840:	080086f8 	.word	0x080086f8
 8001844:	200004d9 	.word	0x200004d9

08001848 <SetUpRMD>:
void SetUpRMD(){
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
	UART1_Data[4] = 0x00;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <SetUpRMD+0x20>)
 800184e:	2200      	movs	r2, #0
 8001850:	711a      	strb	r2, [r3, #4]
	UART1_Data[5] = 0x00;
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <SetUpRMD+0x20>)
 8001854:	2200      	movs	r2, #0
 8001856:	715a      	strb	r2, [r3, #5]
	Writecom = 0xA4;
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <SetUpRMD+0x24>)
 800185a:	22a4      	movs	r2, #164	; 0xa4
 800185c:	601a      	str	r2, [r3, #0]
	RMDCommand();
 800185e:	f7ff fe03 	bl	8001468 <RMDCommand>
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200004d0 	.word	0x200004d0
 800186c:	200004dc 	.word	0x200004dc

08001870 <RMDLeftTurn>:
void RMDLeftTurn(){
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	UART1_Data[4] = 0x00;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <RMDLeftTurn+0x20>)
 8001876:	2200      	movs	r2, #0
 8001878:	711a      	strb	r2, [r3, #4]
	UART1_Data[5] = 0x00;
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <RMDLeftTurn+0x20>)
 800187c:	2200      	movs	r2, #0
 800187e:	715a      	strb	r2, [r3, #5]
	Writecom=0xA4;
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <RMDLeftTurn+0x24>)
 8001882:	22a4      	movs	r2, #164	; 0xa4
 8001884:	601a      	str	r2, [r3, #0]
	RMDCommand();
 8001886:	f7ff fdef 	bl	8001468 <RMDCommand>
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200004d0 	.word	0x200004d0
 8001894:	200004dc 	.word	0x200004dc

08001898 <RMDRightTurn>:
void RMDRightTurn(){
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
	UART1_Data[4] = 0x50;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <RMDRightTurn+0x20>)
 800189e:	2250      	movs	r2, #80	; 0x50
 80018a0:	711a      	strb	r2, [r3, #4]
	UART1_Data[5] = 0x46;
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <RMDRightTurn+0x20>)
 80018a4:	2246      	movs	r2, #70	; 0x46
 80018a6:	715a      	strb	r2, [r3, #5]
	Writecom=0xA4;
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <RMDRightTurn+0x24>)
 80018aa:	22a4      	movs	r2, #164	; 0xa4
 80018ac:	601a      	str	r2, [r3, #0]
	RMDCommand();
 80018ae:	f7ff fddb 	bl	8001468 <RMDCommand>
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200004d0 	.word	0x200004d0
 80018bc:	200004dc 	.word	0x200004dc

080018c0 <checkRMDdata>:

void checkRMDdata(){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
	uint16_t RxBitshift[4];
	RxBitshift[0]=0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	803b      	strh	r3, [r7, #0]
	RxBitshift[1]=0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	807b      	strh	r3, [r7, #2]
	RxBitshift[2]=0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	80bb      	strh	r3, [r7, #4]
	RxBitshift[3]=0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	80fb      	strh	r3, [r7, #6]
	Readcom=0x30;
 80018d6:	4b73      	ldr	r3, [pc, #460]	; (8001aa4 <checkRMDdata+0x1e4>)
 80018d8:	2230      	movs	r2, #48	; 0x30
 80018da:	601a      	str	r2, [r3, #0]
	RMDCommand();
 80018dc:	f7ff fdc4 	bl	8001468 <RMDCommand>
	printf("0x30\r\n");
 80018e0:	4871      	ldr	r0, [pc, #452]	; (8001aa8 <checkRMDdata+0x1e8>)
 80018e2:	f005 fd67 	bl	80073b4 <puts>
	printf("Position loop Kp :%d \r\n",RxData[2]);
 80018e6:	4b71      	ldr	r3, [pc, #452]	; (8001aac <checkRMDdata+0x1ec>)
 80018e8:	789b      	ldrb	r3, [r3, #2]
 80018ea:	4619      	mov	r1, r3
 80018ec:	4870      	ldr	r0, [pc, #448]	; (8001ab0 <checkRMDdata+0x1f0>)
 80018ee:	f005 fcdb 	bl	80072a8 <iprintf>
	printf("Position loop Ki :%d \r\n",RxData[3]);
 80018f2:	4b6e      	ldr	r3, [pc, #440]	; (8001aac <checkRMDdata+0x1ec>)
 80018f4:	78db      	ldrb	r3, [r3, #3]
 80018f6:	4619      	mov	r1, r3
 80018f8:	486e      	ldr	r0, [pc, #440]	; (8001ab4 <checkRMDdata+0x1f4>)
 80018fa:	f005 fcd5 	bl	80072a8 <iprintf>
	printf("Speed loop Kp :%d \r\n",RxData[4]);
 80018fe:	4b6b      	ldr	r3, [pc, #428]	; (8001aac <checkRMDdata+0x1ec>)
 8001900:	791b      	ldrb	r3, [r3, #4]
 8001902:	4619      	mov	r1, r3
 8001904:	486c      	ldr	r0, [pc, #432]	; (8001ab8 <checkRMDdata+0x1f8>)
 8001906:	f005 fccf 	bl	80072a8 <iprintf>
	printf("Speed loop Ki :%d \r\n",RxData[5]);
 800190a:	4b68      	ldr	r3, [pc, #416]	; (8001aac <checkRMDdata+0x1ec>)
 800190c:	795b      	ldrb	r3, [r3, #5]
 800190e:	4619      	mov	r1, r3
 8001910:	486a      	ldr	r0, [pc, #424]	; (8001abc <checkRMDdata+0x1fc>)
 8001912:	f005 fcc9 	bl	80072a8 <iprintf>
	printf("Torque loop Kp :%d \r\n",RxData[6]);
 8001916:	4b65      	ldr	r3, [pc, #404]	; (8001aac <checkRMDdata+0x1ec>)
 8001918:	799b      	ldrb	r3, [r3, #6]
 800191a:	4619      	mov	r1, r3
 800191c:	4868      	ldr	r0, [pc, #416]	; (8001ac0 <checkRMDdata+0x200>)
 800191e:	f005 fcc3 	bl	80072a8 <iprintf>
	printf("Torque loop Ki :%d \r\n",RxData[7]);
 8001922:	4b62      	ldr	r3, [pc, #392]	; (8001aac <checkRMDdata+0x1ec>)
 8001924:	79db      	ldrb	r3, [r3, #7]
 8001926:	4619      	mov	r1, r3
 8001928:	4866      	ldr	r0, [pc, #408]	; (8001ac4 <checkRMDdata+0x204>)
 800192a:	f005 fcbd 	bl	80072a8 <iprintf>

	Readcom=0x33;
 800192e:	4b5d      	ldr	r3, [pc, #372]	; (8001aa4 <checkRMDdata+0x1e4>)
 8001930:	2233      	movs	r2, #51	; 0x33
 8001932:	601a      	str	r2, [r3, #0]
	RMDCommand();
 8001934:	f7ff fd98 	bl	8001468 <RMDCommand>
	printf("0x33\r\n");
 8001938:	4863      	ldr	r0, [pc, #396]	; (8001ac8 <checkRMDdata+0x208>)
 800193a:	f005 fd3b 	bl	80073b4 <puts>
	printf("Position loop P:%d \r\n",RxData[2]);
 800193e:	4b5b      	ldr	r3, [pc, #364]	; (8001aac <checkRMDdata+0x1ec>)
 8001940:	789b      	ldrb	r3, [r3, #2]
 8001942:	4619      	mov	r1, r3
 8001944:	4861      	ldr	r0, [pc, #388]	; (8001acc <checkRMDdata+0x20c>)
 8001946:	f005 fcaf 	bl	80072a8 <iprintf>
	printf("Position loop I :%d \r\n",RxData[3]);
 800194a:	4b58      	ldr	r3, [pc, #352]	; (8001aac <checkRMDdata+0x1ec>)
 800194c:	78db      	ldrb	r3, [r3, #3]
 800194e:	4619      	mov	r1, r3
 8001950:	485f      	ldr	r0, [pc, #380]	; (8001ad0 <checkRMDdata+0x210>)
 8001952:	f005 fca9 	bl	80072a8 <iprintf>
	printf("Speed loop P :%d \r\n",RxData[4]);
 8001956:	4b55      	ldr	r3, [pc, #340]	; (8001aac <checkRMDdata+0x1ec>)
 8001958:	791b      	ldrb	r3, [r3, #4]
 800195a:	4619      	mov	r1, r3
 800195c:	485d      	ldr	r0, [pc, #372]	; (8001ad4 <checkRMDdata+0x214>)
 800195e:	f005 fca3 	bl	80072a8 <iprintf>
	printf("Speed loop I :%d \r\n",RxData[5]);
 8001962:	4b52      	ldr	r3, [pc, #328]	; (8001aac <checkRMDdata+0x1ec>)
 8001964:	795b      	ldrb	r3, [r3, #5]
 8001966:	4619      	mov	r1, r3
 8001968:	485b      	ldr	r0, [pc, #364]	; (8001ad8 <checkRMDdata+0x218>)
 800196a:	f005 fc9d 	bl	80072a8 <iprintf>
	printf("Torque loop P :%d \r\n",RxData[6]);
 800196e:	4b4f      	ldr	r3, [pc, #316]	; (8001aac <checkRMDdata+0x1ec>)
 8001970:	799b      	ldrb	r3, [r3, #6]
 8001972:	4619      	mov	r1, r3
 8001974:	4859      	ldr	r0, [pc, #356]	; (8001adc <checkRMDdata+0x21c>)
 8001976:	f005 fc97 	bl	80072a8 <iprintf>
	printf("Torque loop I :%d \r\n",RxData[7]);
 800197a:	4b4c      	ldr	r3, [pc, #304]	; (8001aac <checkRMDdata+0x1ec>)
 800197c:	79db      	ldrb	r3, [r3, #7]
 800197e:	4619      	mov	r1, r3
 8001980:	4857      	ldr	r0, [pc, #348]	; (8001ae0 <checkRMDdata+0x220>)
 8001982:	f005 fc91 	bl	80072a8 <iprintf>

	Readcom=0x9C;
 8001986:	4b47      	ldr	r3, [pc, #284]	; (8001aa4 <checkRMDdata+0x1e4>)
 8001988:	229c      	movs	r2, #156	; 0x9c
 800198a:	601a      	str	r2, [r3, #0]
	RMDCommand();
 800198c:	f7ff fd6c 	bl	8001468 <RMDCommand>
	printf("0x9C\r\n");
 8001990:	4854      	ldr	r0, [pc, #336]	; (8001ae4 <checkRMDdata+0x224>)
 8001992:	f005 fd0f 	bl	80073b4 <puts>
	RxBitshift[0]=RxData[2] & 0xFF;
 8001996:	4b45      	ldr	r3, [pc, #276]	; (8001aac <checkRMDdata+0x1ec>)
 8001998:	789b      	ldrb	r3, [r3, #2]
 800199a:	b29b      	uxth	r3, r3
 800199c:	803b      	strh	r3, [r7, #0]
	RxBitshift[0]+=(RxData[3] & 0xFF) << 8;
 800199e:	883a      	ldrh	r2, [r7, #0]
 80019a0:	4b42      	ldr	r3, [pc, #264]	; (8001aac <checkRMDdata+0x1ec>)
 80019a2:	78db      	ldrb	r3, [r3, #3]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	803b      	strh	r3, [r7, #0]
	RxBitshift[1]=RxData[4] & 0xFF;
 80019b0:	4b3e      	ldr	r3, [pc, #248]	; (8001aac <checkRMDdata+0x1ec>)
 80019b2:	791b      	ldrb	r3, [r3, #4]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	807b      	strh	r3, [r7, #2]
	RxBitshift[1]+=(RxData[5] & 0xFF) << 8;
 80019b8:	887a      	ldrh	r2, [r7, #2]
 80019ba:	4b3c      	ldr	r3, [pc, #240]	; (8001aac <checkRMDdata+0x1ec>)
 80019bc:	795b      	ldrb	r3, [r3, #5]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	4413      	add	r3, r2
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	807b      	strh	r3, [r7, #2]
	RxBitshift[2]=RxData[6] & 0xFF;
 80019ca:	4b38      	ldr	r3, [pc, #224]	; (8001aac <checkRMDdata+0x1ec>)
 80019cc:	799b      	ldrb	r3, [r3, #6]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	80bb      	strh	r3, [r7, #4]
	RxBitshift[2]+=(RxData[7] & 0xFF) << 8;
 80019d2:	88ba      	ldrh	r2, [r7, #4]
 80019d4:	4b35      	ldr	r3, [pc, #212]	; (8001aac <checkRMDdata+0x1ec>)
 80019d6:	79db      	ldrb	r3, [r3, #7]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	b29b      	uxth	r3, r3
 80019de:	4413      	add	r3, r2
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	80bb      	strh	r3, [r7, #4]
	printf("Motor temperature:%d \r\n",RxData[1]);
 80019e4:	4b31      	ldr	r3, [pc, #196]	; (8001aac <checkRMDdata+0x1ec>)
 80019e6:	785b      	ldrb	r3, [r3, #1]
 80019e8:	4619      	mov	r1, r3
 80019ea:	483f      	ldr	r0, [pc, #252]	; (8001ae8 <checkRMDdata+0x228>)
 80019ec:	f005 fc5c 	bl	80072a8 <iprintf>
	printf("Torque current :%d \r\n",RxBitshift[0]);
 80019f0:	883b      	ldrh	r3, [r7, #0]
 80019f2:	4619      	mov	r1, r3
 80019f4:	483d      	ldr	r0, [pc, #244]	; (8001aec <checkRMDdata+0x22c>)
 80019f6:	f005 fc57 	bl	80072a8 <iprintf>
	printf("Speed :%d \r\n",RxBitshift[1]);
 80019fa:	887b      	ldrh	r3, [r7, #2]
 80019fc:	4619      	mov	r1, r3
 80019fe:	483c      	ldr	r0, [pc, #240]	; (8001af0 <checkRMDdata+0x230>)
 8001a00:	f005 fc52 	bl	80072a8 <iprintf>
	printf("Encoder position:%d \r\n",RxBitshift[2]);
 8001a04:	88bb      	ldrh	r3, [r7, #4]
 8001a06:	4619      	mov	r1, r3
 8001a08:	483a      	ldr	r0, [pc, #232]	; (8001af4 <checkRMDdata+0x234>)
 8001a0a:	f005 fc4d 	bl	80072a8 <iprintf>

	Readcom=0x90;
 8001a0e:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <checkRMDdata+0x1e4>)
 8001a10:	2290      	movs	r2, #144	; 0x90
 8001a12:	601a      	str	r2, [r3, #0]
	RMDCommand();
 8001a14:	f7ff fd28 	bl	8001468 <RMDCommand>
	printf("0x90\r\n");
 8001a18:	4837      	ldr	r0, [pc, #220]	; (8001af8 <checkRMDdata+0x238>)
 8001a1a:	f005 fccb 	bl	80073b4 <puts>
	RxBitshift[0]=RxData[2] & 0xFF;
 8001a1e:	4b23      	ldr	r3, [pc, #140]	; (8001aac <checkRMDdata+0x1ec>)
 8001a20:	789b      	ldrb	r3, [r3, #2]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	803b      	strh	r3, [r7, #0]
	RxBitshift[0]+=(RxData[3] & 0xFF) << 8;
 8001a26:	883a      	ldrh	r2, [r7, #0]
 8001a28:	4b20      	ldr	r3, [pc, #128]	; (8001aac <checkRMDdata+0x1ec>)
 8001a2a:	78db      	ldrb	r3, [r3, #3]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	4413      	add	r3, r2
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	803b      	strh	r3, [r7, #0]
//	RxBitshift[0]=RxBitshift[0]-1;
	RxBitshift[0]=RxBitshift[0]<<2;
 8001a38:	883b      	ldrh	r3, [r7, #0]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	803b      	strh	r3, [r7, #0]
	RxBitshift[0]=(RxBitshift[0]>>2);
 8001a40:	883b      	ldrh	r3, [r7, #0]
 8001a42:	089b      	lsrs	r3, r3, #2
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	803b      	strh	r3, [r7, #0]
	RxBitshift[1]=RxData[4] & 0xFF;
 8001a48:	4b18      	ldr	r3, [pc, #96]	; (8001aac <checkRMDdata+0x1ec>)
 8001a4a:	791b      	ldrb	r3, [r3, #4]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	807b      	strh	r3, [r7, #2]
	RxBitshift[1]+=(RxData[5] & 0xFF) << 8;
 8001a50:	887a      	ldrh	r2, [r7, #2]
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <checkRMDdata+0x1ec>)
 8001a54:	795b      	ldrb	r3, [r3, #5]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	807b      	strh	r3, [r7, #2]
	RxBitshift[2]=RxData[6] & 0xFF;
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <checkRMDdata+0x1ec>)
 8001a64:	799b      	ldrb	r3, [r3, #6]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	80bb      	strh	r3, [r7, #4]
	RxBitshift[2]+=(RxData[7] & 0xFF) << 8;
 8001a6a:	88ba      	ldrh	r2, [r7, #4]
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <checkRMDdata+0x1ec>)
 8001a6e:	79db      	ldrb	r3, [r3, #7]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	4413      	add	r3, r2
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	80bb      	strh	r3, [r7, #4]
	printf("Encoder position:%d \r\n",RxBitshift[0]);
 8001a7c:	883b      	ldrh	r3, [r7, #0]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	481c      	ldr	r0, [pc, #112]	; (8001af4 <checkRMDdata+0x234>)
 8001a82:	f005 fc11 	bl	80072a8 <iprintf>
	printf("Encoder original position :%d \r\n",RxBitshift[1]);
 8001a86:	887b      	ldrh	r3, [r7, #2]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	481c      	ldr	r0, [pc, #112]	; (8001afc <checkRMDdata+0x23c>)
 8001a8c:	f005 fc0c 	bl	80072a8 <iprintf>
	printf("Encoder offset :%d \r\n",RxBitshift[2]);
 8001a90:	88bb      	ldrh	r3, [r7, #4]
 8001a92:	4619      	mov	r1, r3
 8001a94:	481a      	ldr	r0, [pc, #104]	; (8001b00 <checkRMDdata+0x240>)
 8001a96:	f005 fc07 	bl	80072a8 <iprintf>

}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200004e0 	.word	0x200004e0
 8001aa8:	0800870c 	.word	0x0800870c
 8001aac:	200004c4 	.word	0x200004c4
 8001ab0:	08008714 	.word	0x08008714
 8001ab4:	0800872c 	.word	0x0800872c
 8001ab8:	08008744 	.word	0x08008744
 8001abc:	0800875c 	.word	0x0800875c
 8001ac0:	08008774 	.word	0x08008774
 8001ac4:	0800878c 	.word	0x0800878c
 8001ac8:	080087a4 	.word	0x080087a4
 8001acc:	080087ac 	.word	0x080087ac
 8001ad0:	080087c4 	.word	0x080087c4
 8001ad4:	080087dc 	.word	0x080087dc
 8001ad8:	080087f0 	.word	0x080087f0
 8001adc:	08008804 	.word	0x08008804
 8001ae0:	0800881c 	.word	0x0800881c
 8001ae4:	08008834 	.word	0x08008834
 8001ae8:	0800883c 	.word	0x0800883c
 8001aec:	08008854 	.word	0x08008854
 8001af0:	0800886c 	.word	0x0800886c
 8001af4:	0800887c 	.word	0x0800887c
 8001af8:	08008894 	.word	0x08008894
 8001afc:	0800889c 	.word	0x0800889c
 8001b00:	080088c0 	.word	0x080088c0

08001b04 <motor_status>:
void motor_status(){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
	uint16_t tx_data[8];
	tx_data[0]=RxData[2] & 0xFF;
 8001b0a:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <motor_status+0x94>)
 8001b0c:	789b      	ldrb	r3, [r3, #2]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	803b      	strh	r3, [r7, #0]
	tx_data[0]+=(RxData[3] & 0xFF) << 8;
 8001b12:	883a      	ldrh	r2, [r7, #0]
 8001b14:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <motor_status+0x94>)
 8001b16:	78db      	ldrb	r3, [r3, #3]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	803b      	strh	r3, [r7, #0]
	tx_data[1]=RxData[4] & 0xFF;
 8001b24:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <motor_status+0x94>)
 8001b26:	791b      	ldrb	r3, [r3, #4]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	807b      	strh	r3, [r7, #2]
	tx_data[1]+=(RxData[5] & 0xFF) << 8;
 8001b2c:	887a      	ldrh	r2, [r7, #2]
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <motor_status+0x94>)
 8001b30:	795b      	ldrb	r3, [r3, #5]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	4413      	add	r3, r2
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	807b      	strh	r3, [r7, #2]
	tx_data[2]=RxData[6] & 0xFF;
 8001b3e:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <motor_status+0x94>)
 8001b40:	799b      	ldrb	r3, [r3, #6]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	80bb      	strh	r3, [r7, #4]
	tx_data[2]+=(RxData[7] & 0xFF) << 8;
 8001b46:	88ba      	ldrh	r2, [r7, #4]
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <motor_status+0x94>)
 8001b4a:	79db      	ldrb	r3, [r3, #7]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	4413      	add	r3, r2
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	80bb      	strh	r3, [r7, #4]
	printf("command_byte:%d \r\n",RxData[0]);
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <motor_status+0x94>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	480f      	ldr	r0, [pc, #60]	; (8001b9c <motor_status+0x98>)
 8001b60:	f005 fba2 	bl	80072a8 <iprintf>
	printf("Motor temperature:%d \r\n",RxData[1]);
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <motor_status+0x94>)
 8001b66:	785b      	ldrb	r3, [r3, #1]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <motor_status+0x9c>)
 8001b6c:	f005 fb9c 	bl	80072a8 <iprintf>
	printf("Torque current :%d \r\n",tx_data[0]);
 8001b70:	883b      	ldrh	r3, [r7, #0]
 8001b72:	4619      	mov	r1, r3
 8001b74:	480b      	ldr	r0, [pc, #44]	; (8001ba4 <motor_status+0xa0>)
 8001b76:	f005 fb97 	bl	80072a8 <iprintf>
	printf("Speed :%d \r\n",tx_data[1]);
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480a      	ldr	r0, [pc, #40]	; (8001ba8 <motor_status+0xa4>)
 8001b80:	f005 fb92 	bl	80072a8 <iprintf>
	printf("Encoder position:%d \r\n",tx_data[2]);
 8001b84:	88bb      	ldrh	r3, [r7, #4]
 8001b86:	4619      	mov	r1, r3
 8001b88:	4808      	ldr	r0, [pc, #32]	; (8001bac <motor_status+0xa8>)
 8001b8a:	f005 fb8d 	bl	80072a8 <iprintf>
}
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200004c4 	.word	0x200004c4
 8001b9c:	080088d8 	.word	0x080088d8
 8001ba0:	0800883c 	.word	0x0800883c
 8001ba4:	08008854 	.word	0x08008854
 8001ba8:	0800886c 	.word	0x0800886c
 8001bac:	0800887c 	.word	0x0800887c

08001bb0 <RMDPIDSetting>:
void RMDPIDSetting(){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
	UART1_Data[2] = 0xC8;	//anglePidKp
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <RMDPIDSetting+0x38>)
 8001bb6:	22c8      	movs	r2, #200	; 0xc8
 8001bb8:	709a      	strb	r2, [r3, #2]
	UART1_Data[3] = 0x64;	//anglePidKi
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <RMDPIDSetting+0x38>)
 8001bbc:	2264      	movs	r2, #100	; 0x64
 8001bbe:	70da      	strb	r2, [r3, #3]
	UART1_Data[4] = 0x64;	//speedPidKp
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <RMDPIDSetting+0x38>)
 8001bc2:	2264      	movs	r2, #100	; 0x64
 8001bc4:	711a      	strb	r2, [r3, #4]
	UART1_Data[5] = 0x32;	//speedPidKi
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <RMDPIDSetting+0x38>)
 8001bc8:	2232      	movs	r2, #50	; 0x32
 8001bca:	715a      	strb	r2, [r3, #5]
	UART1_Data[6] = 0x32;	//iqPidKp
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <RMDPIDSetting+0x38>)
 8001bce:	2232      	movs	r2, #50	; 0x32
 8001bd0:	719a      	strb	r2, [r3, #6]
	UART1_Data[7] = 0x14;	//iqPidKi
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <RMDPIDSetting+0x38>)
 8001bd4:	2214      	movs	r2, #20
 8001bd6:	71da      	strb	r2, [r3, #7]
	Writecom=0x32;
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <RMDPIDSetting+0x3c>)
 8001bda:	2232      	movs	r2, #50	; 0x32
 8001bdc:	601a      	str	r2, [r3, #0]
	RMDCommand();
 8001bde:	f7ff fc43 	bl	8001468 <RMDCommand>
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200004d0 	.word	0x200004d0
 8001bec:	200004dc 	.word	0x200004dc

08001bf0 <UART1_InIt>:

void UART1_InIt(){
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
	UART1_Data[0] = 0x00;
 8001bf4:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <UART1_InIt+0x40>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
	UART1_Data[1] = 0x00;
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <UART1_InIt+0x40>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	705a      	strb	r2, [r3, #1]
	UART1_Data[2] = 0x00;
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <UART1_InIt+0x40>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	709a      	strb	r2, [r3, #2]
	UART1_Data[3] = 0x00;
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <UART1_InIt+0x40>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	70da      	strb	r2, [r3, #3]
	UART1_Data[4] = 0x00;
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <UART1_InIt+0x40>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	711a      	strb	r2, [r3, #4]
	UART1_Data[5] = 0x00;
 8001c12:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <UART1_InIt+0x40>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	715a      	strb	r2, [r3, #5]
	UART1_Data[6] = 0x00;
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <UART1_InIt+0x40>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	719a      	strb	r2, [r3, #6]
	UART1_Data[7] = 0x00;
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <UART1_InIt+0x40>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	71da      	strb	r2, [r3, #7]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	200004d0 	.word	0x200004d0

08001c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8001c3a:	4bba      	ldr	r3, [pc, #744]	; (8001f24 <main+0x2f0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f005 fbbe 	bl	80073c4 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c48:	f001 f816 	bl	8002c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c4c:	f000 fb04 	bl	8002258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c50:	f000 fc6c 	bl	800252c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c54:	f000 fc40 	bl	80024d8 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001c58:	f000 fb6a 	bl	8002330 <MX_CAN1_Init>
  MX_TIM3_Init();
 8001c5c:	f000 fb9e 	bl	800239c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001c60:	f000 fc10 	bl	8002484 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  TMC2209_INIT();
  //rxbufを受信したらフラグを
//  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
  printf("Hello\r\n");
 8001c64:	48b0      	ldr	r0, [pc, #704]	; (8001f28 <main+0x2f4>)
 8001c66:	f005 fba5 	bl	80073b4 <puts>
  steppers[0].dirFunc = Dir0;
 8001c6a:	4bb0      	ldr	r3, [pc, #704]	; (8001f2c <main+0x2f8>)
 8001c6c:	4ab0      	ldr	r2, [pc, #704]	; (8001f30 <main+0x2fc>)
 8001c6e:	609a      	str	r2, [r3, #8]
  steppers[0].stepFunc = Step0;
 8001c70:	4bae      	ldr	r3, [pc, #696]	; (8001f2c <main+0x2f8>)
 8001c72:	4ab0      	ldr	r2, [pc, #704]	; (8001f34 <main+0x300>)
 8001c74:	60da      	str	r2, [r3, #12]
  steppers[0].acceleration = 1000;
 8001c76:	4bad      	ldr	r3, [pc, #692]	; (8001f2c <main+0x2f8>)
 8001c78:	4aaf      	ldr	r2, [pc, #700]	; (8001f38 <main+0x304>)
 8001c7a:	601a      	str	r2, [r3, #0]
  steppers[0].minStepInterval = 100;
 8001c7c:	4bab      	ldr	r3, [pc, #684]	; (8001f2c <main+0x2f8>)
 8001c7e:	2264      	movs	r2, #100	; 0x64
 8001c80:	605a      	str	r2, [r3, #4]
  steppers[0].homing = 0;
 8001c82:	4baa      	ldr	r3, [pc, #680]	; (8001f2c <main+0x2f8>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	741a      	strb	r2, [r3, #16]
  steppers[0].dir_inv = 1;
 8001c88:	4ba8      	ldr	r3, [pc, #672]	; (8001f2c <main+0x2f8>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	621a      	str	r2, [r3, #32]
  steppers[0].seeking_vel = 100;
 8001c8e:	4ba7      	ldr	r3, [pc, #668]	; (8001f2c <main+0x2f8>)
 8001c90:	2264      	movs	r2, #100	; 0x64
 8001c92:	62da      	str	r2, [r3, #44]	; 0x2c
  steppers[0].homing_vel = 200;
 8001c94:	4ba5      	ldr	r3, [pc, #660]	; (8001f2c <main+0x2f8>)
 8001c96:	22c8      	movs	r2, #200	; 0xc8
 8001c98:	631a      	str	r2, [r3, #48]	; 0x30
  steppers[0].pull_off = 500;
 8001c9a:	4ba4      	ldr	r3, [pc, #656]	; (8001f2c <main+0x2f8>)
 8001c9c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24
  steppers[0].stall_off=10000;
 8001ca2:	4ba2      	ldr	r3, [pc, #648]	; (8001f2c <main+0x2f8>)
 8001ca4:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28
  get_uart_flag=0;
 8001caa:	4ba4      	ldr	r3, [pc, #656]	; (8001f3c <main+0x308>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]

sFilterConfig.FilterBank = 0;
 8001cb0:	4ba3      	ldr	r3, [pc, #652]	; (8001f40 <main+0x30c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	615a      	str	r2, [r3, #20]
sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001cb6:	4ba2      	ldr	r3, [pc, #648]	; (8001f40 <main+0x30c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001cbc:	4ba0      	ldr	r3, [pc, #640]	; (8001f40 <main+0x30c>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	61da      	str	r2, [r3, #28]
sFilterConfig.FilterIdHigh = 0x0000;
 8001cc2:	4b9f      	ldr	r3, [pc, #636]	; (8001f40 <main+0x30c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
sFilterConfig.FilterIdLow = 0x0000;
 8001cc8:	4b9d      	ldr	r3, [pc, #628]	; (8001f40 <main+0x30c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	605a      	str	r2, [r3, #4]
sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001cce:	4b9c      	ldr	r3, [pc, #624]	; (8001f40 <main+0x30c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
sFilterConfig.FilterMaskIdLow = 0x0000;
 8001cd4:	4b9a      	ldr	r3, [pc, #616]	; (8001f40 <main+0x30c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001cda:	4b99      	ldr	r3, [pc, #612]	; (8001f40 <main+0x30c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
//	sFilterConfig.FilterFIFOAssignment =CAN_FILTER_FIFO0;
sFilterConfig.FilterActivation=ENABLE;
 8001ce0:	4b97      	ldr	r3, [pc, #604]	; (8001f40 <main+0x30c>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	621a      	str	r2, [r3, #32]
sFilterConfig.SlaveStartFilterBank=14;
 8001ce6:	4b96      	ldr	r3, [pc, #600]	; (8001f40 <main+0x30c>)
 8001ce8:	220e      	movs	r2, #14
 8001cea:	625a      	str	r2, [r3, #36]	; 0x24

if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 8001cec:	4994      	ldr	r1, [pc, #592]	; (8001f40 <main+0x30c>)
 8001cee:	4895      	ldr	r0, [pc, #596]	; (8001f44 <main+0x310>)
 8001cf0:	f001 f954 	bl	8002f9c <HAL_CAN_ConfigFilter>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <main+0xca>
{
	Error_Handler();
 8001cfa:	f000 fd51 	bl	80027a0 <Error_Handler>
}
if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 8001cfe:	4891      	ldr	r0, [pc, #580]	; (8001f44 <main+0x310>)
 8001d00:	f001 fa2c 	bl	800315c <HAL_CAN_Start>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <main+0xda>
{
	Error_Handler();
 8001d0a:	f000 fd49 	bl	80027a0 <Error_Handler>
}

if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8001d0e:	2103      	movs	r1, #3
 8001d10:	488c      	ldr	r0, [pc, #560]	; (8001f44 <main+0x310>)
 8001d12:	f001 fcd2 	bl	80036ba <HAL_CAN_ActivateNotification>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <main+0xec>
{
	Error_Handler();
 8001d1c:	f000 fd40 	bl	80027a0 <Error_Handler>
uint8_t sent_RMD_deg[2];
uint16_t RMD_deg;
int RMD_offset;
uint16_t coordinate_receive;
int sent_step;
KeyCommand[0]=0;
 8001d20:	4b89      	ldr	r3, [pc, #548]	; (8001f48 <main+0x314>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
printf("RMD Start\r\n");
 8001d26:	4889      	ldr	r0, [pc, #548]	; (8001f4c <main+0x318>)
 8001d28:	f005 fb44 	bl	80073b4 <puts>
HAL_UART_Receive_IT(&huart2, (uint8_t *)KeyCommand, 1);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	4986      	ldr	r1, [pc, #536]	; (8001f48 <main+0x314>)
 8001d30:	4887      	ldr	r0, [pc, #540]	; (8001f50 <main+0x31c>)
 8001d32:	f004 f8c3 	bl	8005ebc <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //受信割り込みの開始=6byte受け取ったら次の処理へ
		  get_uart_flag=0;
 8001d36:	4b81      	ldr	r3, [pc, #516]	; (8001f3c <main+0x308>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
		  TxData[0] = 0x00;
 8001d3c:	4b85      	ldr	r3, [pc, #532]	; (8001f54 <main+0x320>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
		  TxData[1] = 0x00;
 8001d42:	4b84      	ldr	r3, [pc, #528]	; (8001f54 <main+0x320>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	705a      	strb	r2, [r3, #1]
		  TxData[2] = 0x00;
 8001d48:	4b82      	ldr	r3, [pc, #520]	; (8001f54 <main+0x320>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	709a      	strb	r2, [r3, #2]
		  TxData[3] = 0x00;
 8001d4e:	4b81      	ldr	r3, [pc, #516]	; (8001f54 <main+0x320>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	70da      	strb	r2, [r3, #3]
		  TxData[4] = 0x00;
 8001d54:	4b7f      	ldr	r3, [pc, #508]	; (8001f54 <main+0x320>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	711a      	strb	r2, [r3, #4]
		  TxData[5] = 0x00;
 8001d5a:	4b7e      	ldr	r3, [pc, #504]	; (8001f54 <main+0x320>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	715a      	strb	r2, [r3, #5]
		  TxData[6] = 0x00;
 8001d60:	4b7c      	ldr	r3, [pc, #496]	; (8001f54 <main+0x320>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	719a      	strb	r2, [r3, #6]
		  TxData[7] = 0x00;
 8001d66:	4b7b      	ldr	r3, [pc, #492]	; (8001f54 <main+0x320>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	71da      	strb	r2, [r3, #7]
//		  int i=0;
	//	  printf("Key %d\r\n",KeyChange);
		  HAL_UART_Transmit(&huart2, (uint8_t *)KeyCommand, 1,300);
 8001d6c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001d70:	2201      	movs	r2, #1
 8001d72:	4975      	ldr	r1, [pc, #468]	; (8001f48 <main+0x314>)
 8001d74:	4876      	ldr	r0, [pc, #472]	; (8001f50 <main+0x31c>)
 8001d76:	f003 ff6d 	bl	8005c54 <HAL_UART_Transmit>
		  //受信するまで待つ
		  while(!get_uart_flag){}
 8001d7a:	bf00      	nop
 8001d7c:	4b6f      	ldr	r3, [pc, #444]	; (8001f3c <main+0x308>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0fb      	beq.n	8001d7c <main+0x148>
		  UART1_InIt();
 8001d84:	f7ff ff34 	bl	8001bf0 <UART1_InIt>
		  end_flag=0;
 8001d88:	4b73      	ldr	r3, [pc, #460]	; (8001f58 <main+0x324>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
	  	   //canデータ受信用のフラグを0に
	//	  printf("beforecase\r\n");
			  if(KeyCommand[0]!=0 ){
 8001d8e:	4b6e      	ldr	r3, [pc, #440]	; (8001f48 <main+0x314>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0cf      	beq.n	8001d36 <main+0x102>
				  switch(KeyCommand[0]){
 8001d96:	4b6c      	ldr	r3, [pc, #432]	; (8001f48 <main+0x314>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	3b30      	subs	r3, #48	; 0x30
 8001d9c:	2b43      	cmp	r3, #67	; 0x43
 8001d9e:	f200 8228 	bhi.w	80021f2 <main+0x5be>
 8001da2:	a201      	add	r2, pc, #4	; (adr r2, 8001da8 <main+0x174>)
 8001da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da8:	08001eb9 	.word	0x08001eb9
 8001dac:	08001ec9 	.word	0x08001ec9
 8001db0:	08001ed9 	.word	0x08001ed9
 8001db4:	08001ee9 	.word	0x08001ee9
 8001db8:	08001ef5 	.word	0x08001ef5
 8001dbc:	08001f07 	.word	0x08001f07
 8001dc0:	08001f69 	.word	0x08001f69
 8001dc4:	08001f9b 	.word	0x08001f9b
 8001dc8:	080021f3 	.word	0x080021f3
 8001dcc:	08001fb9 	.word	0x08001fb9
 8001dd0:	080021f3 	.word	0x080021f3
 8001dd4:	080021f3 	.word	0x080021f3
 8001dd8:	080021f3 	.word	0x080021f3
 8001ddc:	080021f3 	.word	0x080021f3
 8001de0:	080021f3 	.word	0x080021f3
 8001de4:	080021f3 	.word	0x080021f3
 8001de8:	080021f3 	.word	0x080021f3
 8001dec:	080021f3 	.word	0x080021f3
 8001df0:	080021f3 	.word	0x080021f3
 8001df4:	080021f3 	.word	0x080021f3
 8001df8:	080021f3 	.word	0x080021f3
 8001dfc:	080021f3 	.word	0x080021f3
 8001e00:	080021f3 	.word	0x080021f3
 8001e04:	080021f3 	.word	0x080021f3
 8001e08:	080021f3 	.word	0x080021f3
 8001e0c:	080021f3 	.word	0x080021f3
 8001e10:	080021f3 	.word	0x080021f3
 8001e14:	080021f3 	.word	0x080021f3
 8001e18:	080021f3 	.word	0x080021f3
 8001e1c:	080021f3 	.word	0x080021f3
 8001e20:	080021f3 	.word	0x080021f3
 8001e24:	080021f3 	.word	0x080021f3
 8001e28:	080021f3 	.word	0x080021f3
 8001e2c:	080021f3 	.word	0x080021f3
 8001e30:	080021f3 	.word	0x080021f3
 8001e34:	080021f3 	.word	0x080021f3
 8001e38:	080021f3 	.word	0x080021f3
 8001e3c:	080021f3 	.word	0x080021f3
 8001e40:	080021f3 	.word	0x080021f3
 8001e44:	080021f3 	.word	0x080021f3
 8001e48:	080021f3 	.word	0x080021f3
 8001e4c:	080021f3 	.word	0x080021f3
 8001e50:	080021f3 	.word	0x080021f3
 8001e54:	080021f3 	.word	0x080021f3
 8001e58:	080021f3 	.word	0x080021f3
 8001e5c:	080021f3 	.word	0x080021f3
 8001e60:	080021f3 	.word	0x080021f3
 8001e64:	080021f3 	.word	0x080021f3
 8001e68:	080021f3 	.word	0x080021f3
 8001e6c:	08002175 	.word	0x08002175
 8001e70:	080021f3 	.word	0x080021f3
 8001e74:	080021f3 	.word	0x080021f3
 8001e78:	0800219b 	.word	0x0800219b
 8001e7c:	080021f3 	.word	0x080021f3
 8001e80:	080021f3 	.word	0x080021f3
 8001e84:	080021f3 	.word	0x080021f3
 8001e88:	080021bf 	.word	0x080021bf
 8001e8c:	080021f3 	.word	0x080021f3
 8001e90:	080021f3 	.word	0x080021f3
 8001e94:	080021e1 	.word	0x080021e1
 8001e98:	080021f3 	.word	0x080021f3
 8001e9c:	080021f3 	.word	0x080021f3
 8001ea0:	080021f3 	.word	0x080021f3
 8001ea4:	080020b9 	.word	0x080020b9
 8001ea8:	08001fc5 	.word	0x08001fc5
 8001eac:	080021d5 	.word	0x080021d5
 8001eb0:	080021f3 	.word	0x080021f3
 8001eb4:	08002169 	.word	0x08002169
				  case '0':
					  SetUpRMD();
 8001eb8:	f7ff fcc6 	bl	8001848 <SetUpRMD>
					  motor_status();
 8001ebc:	f7ff fe22 	bl	8001b04 <motor_status>
					  KeyCommand[0]=0;
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <main+0x314>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
					  break;
 8001ec6:	e19e      	b.n	8002206 <main+0x5d2>
				  case'1':
					  RMDLeftTurn();
 8001ec8:	f7ff fcd2 	bl	8001870 <RMDLeftTurn>
					  motor_status();
 8001ecc:	f7ff fe1a 	bl	8001b04 <motor_status>
					  KeyCommand[0]=0;
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <main+0x314>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
					  break;
 8001ed6:	e196      	b.n	8002206 <main+0x5d2>
				  case'2':
					  RMDRightTurn();
 8001ed8:	f7ff fcde 	bl	8001898 <RMDRightTurn>
					  motor_status();
 8001edc:	f7ff fe12 	bl	8001b04 <motor_status>
					  KeyCommand[0]=0;
 8001ee0:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <main+0x314>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
					  break;
 8001ee6:	e18e      	b.n	8002206 <main+0x5d2>
				  case'3':
					  checkRMDdata();
 8001ee8:	f7ff fcea 	bl	80018c0 <checkRMDdata>
					  KeyCommand[0]=0;
 8001eec:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <main+0x314>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
					  break;
 8001ef2:	e188      	b.n	8002206 <main+0x5d2>
				  case'4':
					  Readcom=0x90;
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <main+0x328>)
 8001ef6:	2290      	movs	r2, #144	; 0x90
 8001ef8:	601a      	str	r2, [r3, #0]
					  RMDCommand();
 8001efa:	f7ff fab5 	bl	8001468 <RMDCommand>

					  KeyCommand[0]=0;
 8001efe:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <main+0x314>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
					  break;
 8001f04:	e17f      	b.n	8002206 <main+0x5d2>
				  case'5':
					  UART1_Data[6] =0x00;	//position_offset
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <main+0x32c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	719a      	strb	r2, [r3, #6]
					  UART1_Data[7] =0x00;
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <main+0x32c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	71da      	strb	r2, [r3, #7]
					  Writecom=0x91;
 8001f12:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <main+0x330>)
 8001f14:	2291      	movs	r2, #145	; 0x91
 8001f16:	601a      	str	r2, [r3, #0]
					  RMDCommand();
 8001f18:	f7ff faa6 	bl	8001468 <RMDCommand>
					  KeyCommand[0]=0;
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <main+0x314>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
					  break;
 8001f22:	e170      	b.n	8002206 <main+0x5d2>
 8001f24:	2000000c 	.word	0x2000000c
 8001f28:	080088ec 	.word	0x080088ec
 8001f2c:	2000040c 	.word	0x2000040c
 8001f30:	080006ad 	.word	0x080006ad
 8001f34:	0800067d 	.word	0x0800067d
 8001f38:	447a0000 	.word	0x447a0000
 8001f3c:	200004d8 	.word	0x200004d8
 8001f40:	20000460 	.word	0x20000460
 8001f44:	2000008c 	.word	0x2000008c
 8001f48:	200004e4 	.word	0x200004e4
 8001f4c:	080088f4 	.word	0x080088f4
 8001f50:	20000140 	.word	0x20000140
 8001f54:	200004bc 	.word	0x200004bc
 8001f58:	200004d9 	.word	0x200004d9
 8001f5c:	200004e0 	.word	0x200004e0
 8001f60:	200004d0 	.word	0x200004d0
 8001f64:	200004dc 	.word	0x200004dc
				  case'6':
					  RMD_offset=(int)round((90.0/360.0)*65535.0);
 8001f68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f6c:	60fb      	str	r3, [r7, #12]
					  printf("RMD_offset :%d \r\n",RMD_offset);
 8001f6e:	68f9      	ldr	r1, [r7, #12]
 8001f70:	48a8      	ldr	r0, [pc, #672]	; (8002214 <main+0x5e0>)
 8001f72:	f005 f999 	bl	80072a8 <iprintf>

					  UART1_Data[6] = RMD_offset&0xFF;	//position_offset
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4ba7      	ldr	r3, [pc, #668]	; (8002218 <main+0x5e4>)
 8001f7c:	719a      	strb	r2, [r3, #6]
					  UART1_Data[7] = RMD_offset>>8;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	121b      	asrs	r3, r3, #8
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	4ba4      	ldr	r3, [pc, #656]	; (8002218 <main+0x5e4>)
 8001f86:	71da      	strb	r2, [r3, #7]
					  Writecom=0x91;
 8001f88:	4ba4      	ldr	r3, [pc, #656]	; (800221c <main+0x5e8>)
 8001f8a:	2291      	movs	r2, #145	; 0x91
 8001f8c:	601a      	str	r2, [r3, #0]
					  RMDCommand();
 8001f8e:	f7ff fa6b 	bl	8001468 <RMDCommand>
					  KeyCommand[0]=0;
 8001f92:	4ba3      	ldr	r3, [pc, #652]	; (8002220 <main+0x5ec>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]
					  break;
 8001f98:	e135      	b.n	8002206 <main+0x5d2>
				  case'7':

					  UART1_Data[6] = 0x00;
 8001f9a:	4b9f      	ldr	r3, [pc, #636]	; (8002218 <main+0x5e4>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	719a      	strb	r2, [r3, #6]
					  UART1_Data[7] = 0x80;
 8001fa0:	4b9d      	ldr	r3, [pc, #628]	; (8002218 <main+0x5e4>)
 8001fa2:	2280      	movs	r2, #128	; 0x80
 8001fa4:	71da      	strb	r2, [r3, #7]
					  Writecom=0x91;
 8001fa6:	4b9d      	ldr	r3, [pc, #628]	; (800221c <main+0x5e8>)
 8001fa8:	2291      	movs	r2, #145	; 0x91
 8001faa:	601a      	str	r2, [r3, #0]
					  RMDCommand();
 8001fac:	f7ff fa5c 	bl	8001468 <RMDCommand>
					  KeyCommand[0]=0;
 8001fb0:	4b9b      	ldr	r3, [pc, #620]	; (8002220 <main+0x5ec>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
					  break;
 8001fb6:	e126      	b.n	8002206 <main+0x5d2>
				  case'9':
					  RMDPIDSetting();
 8001fb8:	f7ff fdfa 	bl	8001bb0 <RMDPIDSetting>
					  KeyCommand[0]=0;
 8001fbc:	4b98      	ldr	r3, [pc, #608]	; (8002220 <main+0x5ec>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
					  break;
 8001fc2:	e120      	b.n	8002206 <main+0x5d2>
				  case'p':
					  printf("enter rotate deg");
 8001fc4:	4897      	ldr	r0, [pc, #604]	; (8002224 <main+0x5f0>)
 8001fc6:	f005 f96f 	bl	80072a8 <iprintf>
					  get_uart_flag=0;
 8001fca:	4b97      	ldr	r3, [pc, #604]	; (8002228 <main+0x5f4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
					  while(!get_uart_flag){}
 8001fd0:	bf00      	nop
 8001fd2:	4b95      	ldr	r3, [pc, #596]	; (8002228 <main+0x5f4>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0fb      	beq.n	8001fd2 <main+0x39e>
					  RMD_deg=(KeyCommand[0]-48)*10000+(KeyCommand[1]-48)*1000+(KeyCommand[2]-48)*100+(KeyCommand[3]-48)*10+(KeyCommand[4]-48);
 8001fda:	4b91      	ldr	r3, [pc, #580]	; (8002220 <main+0x5ec>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	3b30      	subs	r3, #48	; 0x30
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	0152      	lsls	r2, r2, #5
 8001fe6:	1ad2      	subs	r2, r2, r3
 8001fe8:	0092      	lsls	r2, r2, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	461a      	mov	r2, r3
 8001fee:	0091      	lsls	r1, r2, #2
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	4b89      	ldr	r3, [pc, #548]	; (8002220 <main+0x5ec>)
 8001ffc:	785b      	ldrb	r3, [r3, #1]
 8001ffe:	3b30      	subs	r3, #48	; 0x30
 8002000:	b29b      	uxth	r3, r3
 8002002:	4619      	mov	r1, r3
 8002004:	0149      	lsls	r1, r1, #5
 8002006:	1ac9      	subs	r1, r1, r3
 8002008:	0089      	lsls	r1, r1, #2
 800200a:	440b      	add	r3, r1
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	b29b      	uxth	r3, r3
 8002010:	4413      	add	r3, r2
 8002012:	b29a      	uxth	r2, r3
 8002014:	4b82      	ldr	r3, [pc, #520]	; (8002220 <main+0x5ec>)
 8002016:	78db      	ldrb	r3, [r3, #3]
 8002018:	3b30      	subs	r3, #48	; 0x30
 800201a:	b29b      	uxth	r3, r3
 800201c:	4619      	mov	r1, r3
 800201e:	0089      	lsls	r1, r1, #2
 8002020:	440b      	add	r3, r1
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	b299      	uxth	r1, r3
 8002026:	4b7e      	ldr	r3, [pc, #504]	; (8002220 <main+0x5ec>)
 8002028:	789b      	ldrb	r3, [r3, #2]
 800202a:	3b30      	subs	r3, #48	; 0x30
 800202c:	b29b      	uxth	r3, r3
 800202e:	4618      	mov	r0, r3
 8002030:	0080      	lsls	r0, r0, #2
 8002032:	4403      	add	r3, r0
 8002034:	4618      	mov	r0, r3
 8002036:	0084      	lsls	r4, r0, #2
 8002038:	4618      	mov	r0, r3
 800203a:	4623      	mov	r3, r4
 800203c:	4403      	add	r3, r0
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	b29b      	uxth	r3, r3
 8002042:	440b      	add	r3, r1
 8002044:	b29b      	uxth	r3, r3
 8002046:	4413      	add	r3, r2
 8002048:	b29a      	uxth	r2, r3
 800204a:	4b75      	ldr	r3, [pc, #468]	; (8002220 <main+0x5ec>)
 800204c:	791b      	ldrb	r3, [r3, #4]
 800204e:	b29b      	uxth	r3, r3
 8002050:	4413      	add	r3, r2
 8002052:	b29b      	uxth	r3, r3
 8002054:	3b30      	subs	r3, #48	; 0x30
 8002056:	82fb      	strh	r3, [r7, #22]
					  printf("RMD_deg,%d\r\n",RMD_deg);
 8002058:	8afb      	ldrh	r3, [r7, #22]
 800205a:	4619      	mov	r1, r3
 800205c:	4873      	ldr	r0, [pc, #460]	; (800222c <main+0x5f8>)
 800205e:	f005 f923 	bl	80072a8 <iprintf>
					  for(int i=0;i<5;i++){
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	e00a      	b.n	800207e <main+0x44a>
						  printf("KeyCommand,%d\r\n",KeyCommand[i]);
 8002068:	4a6d      	ldr	r2, [pc, #436]	; (8002220 <main+0x5ec>)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	4413      	add	r3, r2
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	4619      	mov	r1, r3
 8002072:	486f      	ldr	r0, [pc, #444]	; (8002230 <main+0x5fc>)
 8002074:	f005 f918 	bl	80072a8 <iprintf>
					  for(int i=0;i<5;i++){
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	3301      	adds	r3, #1
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	2b04      	cmp	r3, #4
 8002082:	ddf1      	ble.n	8002068 <main+0x434>
					  }
					  TxData[0] = 0xA4;
 8002084:	4b6b      	ldr	r3, [pc, #428]	; (8002234 <main+0x600>)
 8002086:	22a4      	movs	r2, #164	; 0xa4
 8002088:	701a      	strb	r2, [r3, #0]
					  TxData[2] = 0x2C;	//speed low
 800208a:	4b6a      	ldr	r3, [pc, #424]	; (8002234 <main+0x600>)
 800208c:	222c      	movs	r2, #44	; 0x2c
 800208e:	709a      	strb	r2, [r3, #2]
					  TxData[3] = 0x01;	//speed high
 8002090:	4b68      	ldr	r3, [pc, #416]	; (8002234 <main+0x600>)
 8002092:	2201      	movs	r2, #1
 8002094:	70da      	strb	r2, [r3, #3]
					  TxData[4] =(RMD_deg&0xFF);	//poslow
 8002096:	8afb      	ldrh	r3, [r7, #22]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4b66      	ldr	r3, [pc, #408]	; (8002234 <main+0x600>)
 800209c:	711a      	strb	r2, [r3, #4]
					  TxData[5] =(RMD_deg>>8)&0xFF;
 800209e:	8afb      	ldrh	r3, [r7, #22]
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4b63      	ldr	r3, [pc, #396]	; (8002234 <main+0x600>)
 80020a8:	715a      	strb	r2, [r3, #5]
					  RMDTx();
 80020aa:	f7ff fb5f 	bl	800176c <RMDTx>
					  RMD_deg=0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	82fb      	strh	r3, [r7, #22]
					  KeyCommand[0]=0;
 80020b2:	4b5b      	ldr	r3, [pc, #364]	; (8002220 <main+0x5ec>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]
				  case'o':
					  printf("enter stepping deg");
 80020b8:	485f      	ldr	r0, [pc, #380]	; (8002238 <main+0x604>)
 80020ba:	f005 f8f5 	bl	80072a8 <iprintf>
					  get_uart_flag=0;
 80020be:	4b5a      	ldr	r3, [pc, #360]	; (8002228 <main+0x5f4>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]
					  while(!get_uart_flag){}
 80020c4:	bf00      	nop
 80020c6:	4b58      	ldr	r3, [pc, #352]	; (8002228 <main+0x5f4>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0fb      	beq.n	80020c6 <main+0x492>
					  coordinate_receive=(KeyCommand[0]-48)*100+(KeyCommand[1]-48)*10+(KeyCommand[2]-48);
 80020ce:	4b54      	ldr	r3, [pc, #336]	; (8002220 <main+0x5ec>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	3b30      	subs	r3, #48	; 0x30
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	0092      	lsls	r2, r2, #2
 80020da:	4413      	add	r3, r2
 80020dc:	461a      	mov	r2, r3
 80020de:	0091      	lsls	r1, r2, #2
 80020e0:	461a      	mov	r2, r3
 80020e2:	460b      	mov	r3, r1
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	4b4d      	ldr	r3, [pc, #308]	; (8002220 <main+0x5ec>)
 80020ec:	785b      	ldrb	r3, [r3, #1]
 80020ee:	3b30      	subs	r3, #48	; 0x30
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	4619      	mov	r1, r3
 80020f4:	0089      	lsls	r1, r1, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	b29a      	uxth	r2, r3
 8002100:	4b47      	ldr	r3, [pc, #284]	; (8002220 <main+0x5ec>)
 8002102:	789b      	ldrb	r3, [r3, #2]
 8002104:	b29b      	uxth	r3, r3
 8002106:	4413      	add	r3, r2
 8002108:	b29b      	uxth	r3, r3
 800210a:	3b30      	subs	r3, #48	; 0x30
 800210c:	82bb      	strh	r3, [r7, #20]
					  printf("step_receive,%d\r\n",coordinate_receive);
 800210e:	8abb      	ldrh	r3, [r7, #20]
 8002110:	4619      	mov	r1, r3
 8002112:	484a      	ldr	r0, [pc, #296]	; (800223c <main+0x608>)
 8002114:	f005 f8c8 	bl	80072a8 <iprintf>
					  for(int i=0;i<5;i++){
 8002118:	2300      	movs	r3, #0
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	e00a      	b.n	8002134 <main+0x500>
						  printf("KeyCommand,%d\r\n",KeyCommand[i]);
 800211e:	4a40      	ldr	r2, [pc, #256]	; (8002220 <main+0x5ec>)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	4413      	add	r3, r2
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	4619      	mov	r1, r3
 8002128:	4841      	ldr	r0, [pc, #260]	; (8002230 <main+0x5fc>)
 800212a:	f005 f8bd 	bl	80072a8 <iprintf>
					  for(int i=0;i<5;i++){
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	3301      	adds	r3, #1
 8002132:	61bb      	str	r3, [r7, #24]
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	2b04      	cmp	r3, #4
 8002138:	ddf1      	ble.n	800211e <main+0x4ea>
					  }
					  sent_step=(coordinate_receive/10)*3200;
 800213a:	8abb      	ldrh	r3, [r7, #20]
 800213c:	4a40      	ldr	r2, [pc, #256]	; (8002240 <main+0x60c>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	08db      	lsrs	r3, r3, #3
 8002144:	b29b      	uxth	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 800214c:	fb02 f303 	mul.w	r3, r2, r3
 8002150:	613b      	str	r3, [r7, #16]
					  prepareAbsoluteMovement(sent_step);
 8002152:	6938      	ldr	r0, [r7, #16]
 8002154:	f7fe fb38 	bl	80007c8 <prepareAbsoluteMovement>
					  runAndWait();
 8002158:	f7fe fccc 	bl	8000af4 <runAndWait>
					  RMD_deg=0;
 800215c:	2300      	movs	r3, #0
 800215e:	82fb      	strh	r3, [r7, #22]
					  KeyCommand[0]=0;
 8002160:	4b2f      	ldr	r3, [pc, #188]	; (8002220 <main+0x5ec>)
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
					  break;
 8002166:	e04e      	b.n	8002206 <main+0x5d2>
				  case 's':
					  TMCsetup();
 8002168:	f7fe fde6 	bl	8000d38 <TMCsetup>
					  KeyCommand[0]=0;
 800216c:	4b2c      	ldr	r3, [pc, #176]	; (8002220 <main+0x5ec>)
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
					  break;
 8002172:	e048      	b.n	8002206 <main+0x5d2>
				  case 'a':
					  //HAL_UART_Transmit_IT(&huart2,(uint8_t *)front, sizeof(front));
					  printf("1:start\r\n");
 8002174:	4833      	ldr	r0, [pc, #204]	; (8002244 <main+0x610>)
 8002176:	f005 f91d 	bl	80073b4 <puts>
					  prepareAbsoluteMovement(20000);
 800217a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800217e:	f7fe fb23 	bl	80007c8 <prepareAbsoluteMovement>
					  runAndWait();
 8002182:	f7fe fcb7 	bl	8000af4 <runAndWait>
					  HAL_Delay(100);
 8002186:	2064      	movs	r0, #100	; 0x64
 8002188:	f000 fde8 	bl	8002d5c <HAL_Delay>
					  printf("1:end\r\n");
 800218c:	482e      	ldr	r0, [pc, #184]	; (8002248 <main+0x614>)
 800218e:	f005 f911 	bl	80073b4 <puts>
					  KeyCommand[0]=0;
 8002192:	4b23      	ldr	r3, [pc, #140]	; (8002220 <main+0x5ec>)
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
					  break;
 8002198:	e035      	b.n	8002206 <main+0x5d2>

				  case 'd':
					  printf("1:start\r\n");
 800219a:	482a      	ldr	r0, [pc, #168]	; (8002244 <main+0x610>)
 800219c:	f005 f90a 	bl	80073b4 <puts>
					  prepareAbsoluteMovement(-5000);
 80021a0:	482a      	ldr	r0, [pc, #168]	; (800224c <main+0x618>)
 80021a2:	f7fe fb11 	bl	80007c8 <prepareAbsoluteMovement>
					  runAndWait();
 80021a6:	f7fe fca5 	bl	8000af4 <runAndWait>
					  HAL_Delay(100);
 80021aa:	2064      	movs	r0, #100	; 0x64
 80021ac:	f000 fdd6 	bl	8002d5c <HAL_Delay>
					  printf("1:end\r\n");
 80021b0:	4825      	ldr	r0, [pc, #148]	; (8002248 <main+0x614>)
 80021b2:	f005 f8ff 	bl	80073b4 <puts>
					  KeyCommand[0]=0;
 80021b6:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <main+0x5ec>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
					  break;
 80021bc:	e023      	b.n	8002206 <main+0x5d2>

				  case 'h':
					  stepperHoming();
 80021be:	f7fe fce7 	bl	8000b90 <stepperHoming>
					  runAndWait();
 80021c2:	f7fe fc97 	bl	8000af4 <runAndWait>
					  HAL_Delay(100);
 80021c6:	2064      	movs	r0, #100	; 0x64
 80021c8:	f000 fdc8 	bl	8002d5c <HAL_Delay>
					  KeyCommand[0]=0;
 80021cc:	4b14      	ldr	r3, [pc, #80]	; (8002220 <main+0x5ec>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
					  break;
 80021d2:	e018      	b.n	8002206 <main+0x5d2>

				  case 'q':
					  AbsoluteReset();
 80021d4:	f7fe fcb0 	bl	8000b38 <AbsoluteReset>
					  KeyCommand[0]=0;
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <main+0x5ec>)
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
					  break;
 80021de:	e012      	b.n	8002206 <main+0x5d2>

				  case 'k':
					  MotorOFF();
 80021e0:	f7fe fd3e 	bl	8000c60 <MotorOFF>
					  HAL_Delay(100);
 80021e4:	2064      	movs	r0, #100	; 0x64
 80021e6:	f000 fdb9 	bl	8002d5c <HAL_Delay>
					  KeyCommand[0]=0;
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <main+0x5ec>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
					  break;
 80021f0:	e009      	b.n	8002206 <main+0x5d2>

				  default:
					  printf("NoCommand\r\n");
 80021f2:	4817      	ldr	r0, [pc, #92]	; (8002250 <main+0x61c>)
 80021f4:	f005 f8de 	bl	80073b4 <puts>
					  KeyCommand[0]=0;
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <main+0x5ec>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
					  end_flag=1;
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <main+0x620>)
 8002200:	2201      	movs	r2, #1
 8002202:	701a      	strb	r2, [r3, #0]
					  break;
 8002204:	bf00      	nop
				  }
				  while(!end_flag){}
 8002206:	bf00      	nop
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <main+0x620>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0fb      	beq.n	8002208 <main+0x5d4>
		  get_uart_flag=0;
 8002210:	e591      	b.n	8001d36 <main+0x102>
 8002212:	bf00      	nop
 8002214:	08008900 	.word	0x08008900
 8002218:	200004d0 	.word	0x200004d0
 800221c:	200004dc 	.word	0x200004dc
 8002220:	200004e4 	.word	0x200004e4
 8002224:	08008914 	.word	0x08008914
 8002228:	200004d8 	.word	0x200004d8
 800222c:	08008928 	.word	0x08008928
 8002230:	08008938 	.word	0x08008938
 8002234:	200004bc 	.word	0x200004bc
 8002238:	08008948 	.word	0x08008948
 800223c:	0800895c 	.word	0x0800895c
 8002240:	cccccccd 	.word	0xcccccccd
 8002244:	08008970 	.word	0x08008970
 8002248:	0800897c 	.word	0x0800897c
 800224c:	ffffec78 	.word	0xffffec78
 8002250:	08008984 	.word	0x08008984
 8002254:	200004d9 	.word	0x200004d9

08002258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b094      	sub	sp, #80	; 0x50
 800225c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800225e:	f107 031c 	add.w	r3, r7, #28
 8002262:	2234      	movs	r2, #52	; 0x34
 8002264:	2100      	movs	r1, #0
 8002266:	4618      	mov	r0, r3
 8002268:	f005 f816 	bl	8007298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800226c:	f107 0308 	add.w	r3, r7, #8
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800227c:	2300      	movs	r3, #0
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	4b29      	ldr	r3, [pc, #164]	; (8002328 <SystemClock_Config+0xd0>)
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	4a28      	ldr	r2, [pc, #160]	; (8002328 <SystemClock_Config+0xd0>)
 8002286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228a:	6413      	str	r3, [r2, #64]	; 0x40
 800228c:	4b26      	ldr	r3, [pc, #152]	; (8002328 <SystemClock_Config+0xd0>)
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002298:	2300      	movs	r3, #0
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	4b23      	ldr	r3, [pc, #140]	; (800232c <SystemClock_Config+0xd4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a22      	ldr	r2, [pc, #136]	; (800232c <SystemClock_Config+0xd4>)
 80022a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4b20      	ldr	r3, [pc, #128]	; (800232c <SystemClock_Config+0xd4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022b0:	603b      	str	r3, [r7, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022b4:	2302      	movs	r3, #2
 80022b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022b8:	2301      	movs	r3, #1
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022bc:	2310      	movs	r3, #16
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022c0:	2302      	movs	r3, #2
 80022c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022c4:	2300      	movs	r3, #0
 80022c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022c8:	2308      	movs	r3, #8
 80022ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 80022cc:	23a0      	movs	r3, #160	; 0xa0
 80022ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022d0:	2302      	movs	r3, #2
 80022d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80022d4:	2302      	movs	r3, #2
 80022d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80022d8:	2302      	movs	r3, #2
 80022da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022dc:	f107 031c 	add.w	r3, r7, #28
 80022e0:	4618      	mov	r0, r3
 80022e2:	f002 fb01 	bl	80048e8 <HAL_RCC_OscConfig>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80022ec:	f000 fa58 	bl	80027a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022f0:	230f      	movs	r3, #15
 80022f2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022f4:	2302      	movs	r3, #2
 80022f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022f8:	2300      	movs	r3, #0
 80022fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002300:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002306:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002308:	f107 0308 	add.w	r3, r7, #8
 800230c:	2105      	movs	r1, #5
 800230e:	4618      	mov	r0, r3
 8002310:	f001 ffa0 	bl	8004254 <HAL_RCC_ClockConfig>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800231a:	f000 fa41 	bl	80027a0 <Error_Handler>
  }
}
 800231e:	bf00      	nop
 8002320:	3750      	adds	r7, #80	; 0x50
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40023800 	.word	0x40023800
 800232c:	40007000 	.word	0x40007000

08002330 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002334:	4b17      	ldr	r3, [pc, #92]	; (8002394 <MX_CAN1_Init+0x64>)
 8002336:	4a18      	ldr	r2, [pc, #96]	; (8002398 <MX_CAN1_Init+0x68>)
 8002338:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800233a:	4b16      	ldr	r3, [pc, #88]	; (8002394 <MX_CAN1_Init+0x64>)
 800233c:	2204      	movs	r2, #4
 800233e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002340:	4b14      	ldr	r3, [pc, #80]	; (8002394 <MX_CAN1_Init+0x64>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002346:	4b13      	ldr	r3, [pc, #76]	; (8002394 <MX_CAN1_Init+0x64>)
 8002348:	2200      	movs	r2, #0
 800234a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <MX_CAN1_Init+0x64>)
 800234e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002352:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002354:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <MX_CAN1_Init+0x64>)
 8002356:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800235a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800235c:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <MX_CAN1_Init+0x64>)
 800235e:	2200      	movs	r2, #0
 8002360:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002362:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <MX_CAN1_Init+0x64>)
 8002364:	2200      	movs	r2, #0
 8002366:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <MX_CAN1_Init+0x64>)
 800236a:	2200      	movs	r2, #0
 800236c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <MX_CAN1_Init+0x64>)
 8002370:	2200      	movs	r2, #0
 8002372:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <MX_CAN1_Init+0x64>)
 8002376:	2200      	movs	r2, #0
 8002378:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <MX_CAN1_Init+0x64>)
 800237c:	2200      	movs	r2, #0
 800237e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002380:	4804      	ldr	r0, [pc, #16]	; (8002394 <MX_CAN1_Init+0x64>)
 8002382:	f000 fd0f 	bl	8002da4 <HAL_CAN_Init>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800238c:	f000 fa08 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002390:	bf00      	nop
 8002392:	bd80      	pop	{r7, pc}
 8002394:	2000008c 	.word	0x2000008c
 8002398:	40006400 	.word	0x40006400

0800239c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08e      	sub	sp, #56	; 0x38
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	609a      	str	r2, [r3, #8]
 80023ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b0:	f107 0320 	add.w	r3, r7, #32
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
 80023c8:	615a      	str	r2, [r3, #20]
 80023ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023cc:	4b2b      	ldr	r3, [pc, #172]	; (800247c <MX_TIM3_Init+0xe0>)
 80023ce:	4a2c      	ldr	r2, [pc, #176]	; (8002480 <MX_TIM3_Init+0xe4>)
 80023d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160-1;
 80023d2:	4b2a      	ldr	r3, [pc, #168]	; (800247c <MX_TIM3_Init+0xe0>)
 80023d4:	229f      	movs	r2, #159	; 0x9f
 80023d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d8:	4b28      	ldr	r3, [pc, #160]	; (800247c <MX_TIM3_Init+0xe0>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80023de:	4b27      	ldr	r3, [pc, #156]	; (800247c <MX_TIM3_Init+0xe0>)
 80023e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e6:	4b25      	ldr	r3, [pc, #148]	; (800247c <MX_TIM3_Init+0xe0>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ec:	4b23      	ldr	r3, [pc, #140]	; (800247c <MX_TIM3_Init+0xe0>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023f2:	4822      	ldr	r0, [pc, #136]	; (800247c <MX_TIM3_Init+0xe0>)
 80023f4:	f002 fd16 	bl	8004e24 <HAL_TIM_Base_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80023fe:	f000 f9cf 	bl	80027a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002406:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002408:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800240c:	4619      	mov	r1, r3
 800240e:	481b      	ldr	r0, [pc, #108]	; (800247c <MX_TIM3_Init+0xe0>)
 8002410:	f002 ff14 	bl	800523c <HAL_TIM_ConfigClockSource>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800241a:	f000 f9c1 	bl	80027a0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800241e:	4817      	ldr	r0, [pc, #92]	; (800247c <MX_TIM3_Init+0xe0>)
 8002420:	f002 fd4f 	bl	8004ec2 <HAL_TIM_OC_Init>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800242a:	f000 f9b9 	bl	80027a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800242e:	2300      	movs	r3, #0
 8002430:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002432:	2300      	movs	r3, #0
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002436:	f107 0320 	add.w	r3, r7, #32
 800243a:	4619      	mov	r1, r3
 800243c:	480f      	ldr	r0, [pc, #60]	; (800247c <MX_TIM3_Init+0xe0>)
 800243e:	f003 fad7 	bl	80059f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002448:	f000 f9aa 	bl	80027a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800244c:	2300      	movs	r3, #0
 800244e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	2200      	movs	r2, #0
 8002460:	4619      	mov	r1, r3
 8002462:	4806      	ldr	r0, [pc, #24]	; (800247c <MX_TIM3_Init+0xe0>)
 8002464:	f002 fe8e 	bl	8005184 <HAL_TIM_OC_ConfigChannel>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800246e:	f000 f997 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002472:	bf00      	nop
 8002474:	3738      	adds	r7, #56	; 0x38
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	200000b4 	.word	0x200000b4
 8002480:	40000400 	.word	0x40000400

08002484 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002488:	4b10      	ldr	r3, [pc, #64]	; (80024cc <MX_USART1_UART_Init+0x48>)
 800248a:	4a11      	ldr	r2, [pc, #68]	; (80024d0 <MX_USART1_UART_Init+0x4c>)
 800248c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <MX_USART1_UART_Init+0x48>)
 8002490:	4a10      	ldr	r2, [pc, #64]	; (80024d4 <MX_USART1_UART_Init+0x50>)
 8002492:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002494:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <MX_USART1_UART_Init+0x48>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800249a:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <MX_USART1_UART_Init+0x48>)
 800249c:	2200      	movs	r2, #0
 800249e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024a0:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <MX_USART1_UART_Init+0x48>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <MX_USART1_UART_Init+0x48>)
 80024a8:	220c      	movs	r2, #12
 80024aa:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ac:	4b07      	ldr	r3, [pc, #28]	; (80024cc <MX_USART1_UART_Init+0x48>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <MX_USART1_UART_Init+0x48>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80024b8:	4804      	ldr	r0, [pc, #16]	; (80024cc <MX_USART1_UART_Init+0x48>)
 80024ba:	f003 fb76 	bl	8005baa <HAL_HalfDuplex_Init>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 80024c4:	f000 f96c 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	200000fc 	.word	0x200000fc
 80024d0:	40011000 	.word	0x40011000
 80024d4:	0007a120 	.word	0x0007a120

080024d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <MX_USART2_UART_Init+0x4c>)
 80024de:	4a12      	ldr	r2, [pc, #72]	; (8002528 <MX_USART2_UART_Init+0x50>)
 80024e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <MX_USART2_UART_Init+0x4c>)
 80024e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <MX_USART2_UART_Init+0x4c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024f0:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <MX_USART2_UART_Init+0x4c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024f6:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <MX_USART2_UART_Init+0x4c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <MX_USART2_UART_Init+0x4c>)
 80024fe:	220c      	movs	r2, #12
 8002500:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002502:	4b08      	ldr	r3, [pc, #32]	; (8002524 <MX_USART2_UART_Init+0x4c>)
 8002504:	2200      	movs	r2, #0
 8002506:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <MX_USART2_UART_Init+0x4c>)
 800250a:	2200      	movs	r2, #0
 800250c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800250e:	4805      	ldr	r0, [pc, #20]	; (8002524 <MX_USART2_UART_Init+0x4c>)
 8002510:	f003 fafe 	bl	8005b10 <HAL_UART_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800251a:	f000 f941 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000140 	.word	0x20000140
 8002528:	40004400 	.word	0x40004400

0800252c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	; 0x28
 8002530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
 800253c:	609a      	str	r2, [r3, #8]
 800253e:	60da      	str	r2, [r3, #12]
 8002540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	4b54      	ldr	r3, [pc, #336]	; (8002698 <MX_GPIO_Init+0x16c>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	4a53      	ldr	r2, [pc, #332]	; (8002698 <MX_GPIO_Init+0x16c>)
 800254c:	f043 0304 	orr.w	r3, r3, #4
 8002550:	6313      	str	r3, [r2, #48]	; 0x30
 8002552:	4b51      	ldr	r3, [pc, #324]	; (8002698 <MX_GPIO_Init+0x16c>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4b4d      	ldr	r3, [pc, #308]	; (8002698 <MX_GPIO_Init+0x16c>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a4c      	ldr	r2, [pc, #304]	; (8002698 <MX_GPIO_Init+0x16c>)
 8002568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b4a      	ldr	r3, [pc, #296]	; (8002698 <MX_GPIO_Init+0x16c>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	4b46      	ldr	r3, [pc, #280]	; (8002698 <MX_GPIO_Init+0x16c>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a45      	ldr	r2, [pc, #276]	; (8002698 <MX_GPIO_Init+0x16c>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b43      	ldr	r3, [pc, #268]	; (8002698 <MX_GPIO_Init+0x16c>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]
 800259a:	4b3f      	ldr	r3, [pc, #252]	; (8002698 <MX_GPIO_Init+0x16c>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a3e      	ldr	r2, [pc, #248]	; (8002698 <MX_GPIO_Init+0x16c>)
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b3c      	ldr	r3, [pc, #240]	; (8002698 <MX_GPIO_Init+0x16c>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2120      	movs	r1, #32
 80025b6:	4839      	ldr	r0, [pc, #228]	; (800269c <MX_GPIO_Init+0x170>)
 80025b8:	f001 fe1a 	bl	80041f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80025bc:	2200      	movs	r2, #0
 80025be:	f44f 7144 	mov.w	r1, #784	; 0x310
 80025c2:	4837      	ldr	r0, [pc, #220]	; (80026a0 <MX_GPIO_Init+0x174>)
 80025c4:	f001 fe14 	bl	80041f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80025c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80025d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80025d8:	f107 0314 	add.w	r3, r7, #20
 80025dc:	4619      	mov	r1, r3
 80025de:	4831      	ldr	r0, [pc, #196]	; (80026a4 <MX_GPIO_Init+0x178>)
 80025e0:	f001 fc5a 	bl	8003e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80025e4:	2320      	movs	r3, #32
 80025e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e8:	2301      	movs	r3, #1
 80025ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f0:	2300      	movs	r3, #0
 80025f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80025f4:	f107 0314 	add.w	r3, r7, #20
 80025f8:	4619      	mov	r1, r3
 80025fa:	4828      	ldr	r0, [pc, #160]	; (800269c <MX_GPIO_Init+0x170>)
 80025fc:	f001 fc4c 	bl	8003e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002604:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260e:	f107 0314 	add.w	r3, r7, #20
 8002612:	4619      	mov	r1, r3
 8002614:	4821      	ldr	r0, [pc, #132]	; (800269c <MX_GPIO_Init+0x170>)
 8002616:	f001 fc3f 	bl	8003e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800261a:	2310      	movs	r3, #16
 800261c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261e:	2301      	movs	r3, #1
 8002620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002626:	2300      	movs	r3, #0
 8002628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262a:	f107 0314 	add.w	r3, r7, #20
 800262e:	4619      	mov	r1, r3
 8002630:	481b      	ldr	r0, [pc, #108]	; (80026a0 <MX_GPIO_Init+0x174>)
 8002632:	f001 fc31 	bl	8003e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002636:	2340      	movs	r3, #64	; 0x40
 8002638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800263a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800263e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	4619      	mov	r1, r3
 800264a:	4815      	ldr	r0, [pc, #84]	; (80026a0 <MX_GPIO_Init+0x174>)
 800264c:	f001 fc24 	bl	8003e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002650:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002656:	2301      	movs	r3, #1
 8002658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265e:	2303      	movs	r3, #3
 8002660:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002662:	f107 0314 	add.w	r3, r7, #20
 8002666:	4619      	mov	r1, r3
 8002668:	480d      	ldr	r0, [pc, #52]	; (80026a0 <MX_GPIO_Init+0x174>)
 800266a:	f001 fc15 	bl	8003e98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800266e:	2200      	movs	r2, #0
 8002670:	2101      	movs	r1, #1
 8002672:	2017      	movs	r0, #23
 8002674:	f001 fb47 	bl	8003d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002678:	2017      	movs	r0, #23
 800267a:	f001 fb60 	bl	8003d3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800267e:	2200      	movs	r2, #0
 8002680:	2101      	movs	r1, #1
 8002682:	2028      	movs	r0, #40	; 0x28
 8002684:	f001 fb3f 	bl	8003d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002688:	2028      	movs	r0, #40	; 0x28
 800268a:	f001 fb58 	bl	8003d3e <HAL_NVIC_EnableIRQ>

}
 800268e:	bf00      	nop
 8002690:	3728      	adds	r7, #40	; 0x28
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40023800 	.word	0x40023800
 800269c:	40020000 	.word	0x40020000
 80026a0:	40020400 	.word	0x40020400
 80026a4:	40020800 	.word	0x40020800

080026a8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)	//printfに必要
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	230a      	movs	r3, #10
 80026ba:	68b9      	ldr	r1, [r7, #8]
 80026bc:	4803      	ldr	r0, [pc, #12]	; (80026cc <_write+0x24>)
 80026be:	f003 fac9 	bl	8005c54 <HAL_UART_Transmit>
  return len;
 80026c2:	687b      	ldr	r3, [r7, #4]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000140 	.word	0x20000140

080026d0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	get_uart_flag = 1;
 80026d8:	4b11      	ldr	r3, [pc, #68]	; (8002720 <HAL_UART_RxCpltCallback+0x50>)
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
	printf("uart_timer\n\r");
 80026de:	4811      	ldr	r0, [pc, #68]	; (8002724 <HAL_UART_RxCpltCallback+0x54>)
 80026e0:	f004 fde2 	bl	80072a8 <iprintf>
	if(KeyCommand[0]=='p'){
 80026e4:	4b10      	ldr	r3, [pc, #64]	; (8002728 <HAL_UART_RxCpltCallback+0x58>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b70      	cmp	r3, #112	; 0x70
 80026ea:	d105      	bne.n	80026f8 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Receive_IT(&huart2, (uint8_t *)KeyCommand, 5);
 80026ec:	2205      	movs	r2, #5
 80026ee:	490e      	ldr	r1, [pc, #56]	; (8002728 <HAL_UART_RxCpltCallback+0x58>)
 80026f0:	480e      	ldr	r0, [pc, #56]	; (800272c <HAL_UART_RxCpltCallback+0x5c>)
 80026f2:	f003 fbe3 	bl	8005ebc <HAL_UART_Receive_IT>
		HAL_UART_Receive_IT(&huart2, (uint8_t *)KeyCommand, 3);
	}else{
		HAL_UART_Receive_IT(&huart2, (uint8_t *)KeyCommand, 1);
	}

}
 80026f6:	e00e      	b.n	8002716 <HAL_UART_RxCpltCallback+0x46>
	else if(KeyCommand[0]=='o'){
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_UART_RxCpltCallback+0x58>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b6f      	cmp	r3, #111	; 0x6f
 80026fe:	d105      	bne.n	800270c <HAL_UART_RxCpltCallback+0x3c>
		HAL_UART_Receive_IT(&huart2, (uint8_t *)KeyCommand, 3);
 8002700:	2203      	movs	r2, #3
 8002702:	4909      	ldr	r1, [pc, #36]	; (8002728 <HAL_UART_RxCpltCallback+0x58>)
 8002704:	4809      	ldr	r0, [pc, #36]	; (800272c <HAL_UART_RxCpltCallback+0x5c>)
 8002706:	f003 fbd9 	bl	8005ebc <HAL_UART_Receive_IT>
}
 800270a:	e004      	b.n	8002716 <HAL_UART_RxCpltCallback+0x46>
		HAL_UART_Receive_IT(&huart2, (uint8_t *)KeyCommand, 1);
 800270c:	2201      	movs	r2, #1
 800270e:	4906      	ldr	r1, [pc, #24]	; (8002728 <HAL_UART_RxCpltCallback+0x58>)
 8002710:	4806      	ldr	r0, [pc, #24]	; (800272c <HAL_UART_RxCpltCallback+0x5c>)
 8002712:	f003 fbd3 	bl	8005ebc <HAL_UART_Receive_IT>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	200004d8 	.word	0x200004d8
 8002724:	08008990 	.word	0x08008990
 8002728:	200004e4 	.word	0x200004e4
 800272c:	20000140 	.word	0x20000140

08002730 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
	  printf("TxCan\n\r");
 8002738:	4804      	ldr	r0, [pc, #16]	; (800274c <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800273a:	f004 fdb5 	bl	80072a8 <iprintf>
	  nextcan_flag=1;
 800273e:	4b04      	ldr	r3, [pc, #16]	; (8002750 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 8002740:	2201      	movs	r2, #1
 8002742:	701a      	strb	r2, [r3, #0]

}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	080089a0 	.word	0x080089a0
 8002750:	200004da 	.word	0x200004da

08002754 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
	printf("RxCan\n\r");
 800275c:	480a      	ldr	r0, [pc, #40]	; (8002788 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800275e:	f004 fda3 	bl	80072a8 <iprintf>
	HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0, &RxHeader,RxData);
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002764:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002766:	2100      	movs	r1, #0
 8002768:	480a      	ldr	r0, [pc, #40]	; (8002794 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800276a:	f000 fe94 	bl	8003496 <HAL_CAN_GetRxMessage>
	HAL_UART_Transmit(&huart2,RxData,sizeof(RxData),100);//受け取ったデータを送信
 800276e:	2364      	movs	r3, #100	; 0x64
 8002770:	2208      	movs	r2, #8
 8002772:	4906      	ldr	r1, [pc, #24]	; (800278c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002774:	4808      	ldr	r0, [pc, #32]	; (8002798 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8002776:	f003 fa6d 	bl	8005c54 <HAL_UART_Transmit>

	//printf("\r\n");
	end_flag=1;
 800277a:	4b08      	ldr	r3, [pc, #32]	; (800279c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800277c:	2201      	movs	r2, #1
 800277e:	701a      	strb	r2, [r3, #0]
//  if(flag >0){
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
//  }else{
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
//  }
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	080089a8 	.word	0x080089a8
 800278c:	200004c4 	.word	0x200004c4
 8002790:	200004a0 	.word	0x200004a0
 8002794:	2000008c 	.word	0x2000008c
 8002798:	20000140 	.word	0x20000140
 800279c:	200004d9 	.word	0x200004d9

080027a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027a4:	b672      	cpsid	i
}
 80027a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027a8:	e7fe      	b.n	80027a8 <Error_Handler+0x8>
	...

080027ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <HAL_MspInit+0x4c>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	4a0f      	ldr	r2, [pc, #60]	; (80027f8 <HAL_MspInit+0x4c>)
 80027bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c0:	6453      	str	r3, [r2, #68]	; 0x44
 80027c2:	4b0d      	ldr	r3, [pc, #52]	; (80027f8 <HAL_MspInit+0x4c>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_MspInit+0x4c>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a08      	ldr	r2, [pc, #32]	; (80027f8 <HAL_MspInit+0x4c>)
 80027d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_MspInit+0x4c>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800

080027fc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a2a      	ldr	r2, [pc, #168]	; (80028c4 <HAL_CAN_MspInit+0xc8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d14d      	bne.n	80028ba <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	4b29      	ldr	r3, [pc, #164]	; (80028c8 <HAL_CAN_MspInit+0xcc>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	4a28      	ldr	r2, [pc, #160]	; (80028c8 <HAL_CAN_MspInit+0xcc>)
 8002828:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800282c:	6413      	str	r3, [r2, #64]	; 0x40
 800282e:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <HAL_CAN_MspInit+0xcc>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <HAL_CAN_MspInit+0xcc>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a21      	ldr	r2, [pc, #132]	; (80028c8 <HAL_CAN_MspInit+0xcc>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b1f      	ldr	r3, [pc, #124]	; (80028c8 <HAL_CAN_MspInit+0xcc>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002856:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800285a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285c:	2302      	movs	r3, #2
 800285e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002864:	2303      	movs	r3, #3
 8002866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002868:	2309      	movs	r3, #9
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286c:	f107 0314 	add.w	r3, r7, #20
 8002870:	4619      	mov	r1, r3
 8002872:	4816      	ldr	r0, [pc, #88]	; (80028cc <HAL_CAN_MspInit+0xd0>)
 8002874:	f001 fb10 	bl	8003e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800287c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002882:	2301      	movs	r3, #1
 8002884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002886:	2303      	movs	r3, #3
 8002888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800288a:	2309      	movs	r3, #9
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	4619      	mov	r1, r3
 8002894:	480d      	ldr	r0, [pc, #52]	; (80028cc <HAL_CAN_MspInit+0xd0>)
 8002896:	f001 faff 	bl	8003e98 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2100      	movs	r1, #0
 800289e:	2013      	movs	r0, #19
 80028a0:	f001 fa31 	bl	8003d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80028a4:	2013      	movs	r0, #19
 80028a6:	f001 fa4a 	bl	8003d3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80028aa:	2200      	movs	r2, #0
 80028ac:	2100      	movs	r1, #0
 80028ae:	2014      	movs	r0, #20
 80028b0:	f001 fa29 	bl	8003d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80028b4:	2014      	movs	r0, #20
 80028b6:	f001 fa42 	bl	8003d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80028ba:	bf00      	nop
 80028bc:	3728      	adds	r7, #40	; 0x28
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40006400 	.word	0x40006400
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40020000 	.word	0x40020000

080028d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0e      	ldr	r2, [pc, #56]	; (8002918 <HAL_TIM_Base_MspInit+0x48>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d115      	bne.n	800290e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	4b0d      	ldr	r3, [pc, #52]	; (800291c <HAL_TIM_Base_MspInit+0x4c>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	4a0c      	ldr	r2, [pc, #48]	; (800291c <HAL_TIM_Base_MspInit+0x4c>)
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	6413      	str	r3, [r2, #64]	; 0x40
 80028f2:	4b0a      	ldr	r3, [pc, #40]	; (800291c <HAL_TIM_Base_MspInit+0x4c>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 80028fe:	2200      	movs	r2, #0
 8002900:	2102      	movs	r1, #2
 8002902:	201d      	movs	r0, #29
 8002904:	f001 f9ff 	bl	8003d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002908:	201d      	movs	r0, #29
 800290a:	f001 fa18 	bl	8003d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40000400 	.word	0x40000400
 800291c:	40023800 	.word	0x40023800

08002920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08c      	sub	sp, #48	; 0x30
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002928:	f107 031c 	add.w	r3, r7, #28
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a36      	ldr	r2, [pc, #216]	; (8002a18 <HAL_UART_MspInit+0xf8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d12d      	bne.n	800299e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	4b35      	ldr	r3, [pc, #212]	; (8002a1c <HAL_UART_MspInit+0xfc>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	4a34      	ldr	r2, [pc, #208]	; (8002a1c <HAL_UART_MspInit+0xfc>)
 800294c:	f043 0310 	orr.w	r3, r3, #16
 8002950:	6453      	str	r3, [r2, #68]	; 0x44
 8002952:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <HAL_UART_MspInit+0xfc>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	61bb      	str	r3, [r7, #24]
 800295c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	4b2e      	ldr	r3, [pc, #184]	; (8002a1c <HAL_UART_MspInit+0xfc>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4a2d      	ldr	r2, [pc, #180]	; (8002a1c <HAL_UART_MspInit+0xfc>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	6313      	str	r3, [r2, #48]	; 0x30
 800296e:	4b2b      	ldr	r3, [pc, #172]	; (8002a1c <HAL_UART_MspInit+0xfc>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800297a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800297e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002980:	2312      	movs	r3, #18
 8002982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002988:	2302      	movs	r3, #2
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800298c:	2307      	movs	r3, #7
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002990:	f107 031c 	add.w	r3, r7, #28
 8002994:	4619      	mov	r1, r3
 8002996:	4822      	ldr	r0, [pc, #136]	; (8002a20 <HAL_UART_MspInit+0x100>)
 8002998:	f001 fa7e 	bl	8003e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800299c:	e038      	b.n	8002a10 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a20      	ldr	r2, [pc, #128]	; (8002a24 <HAL_UART_MspInit+0x104>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d133      	bne.n	8002a10 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80029a8:	2300      	movs	r3, #0
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <HAL_UART_MspInit+0xfc>)
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	4a1a      	ldr	r2, [pc, #104]	; (8002a1c <HAL_UART_MspInit+0xfc>)
 80029b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b6:	6413      	str	r3, [r2, #64]	; 0x40
 80029b8:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <HAL_UART_MspInit+0xfc>)
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	4b14      	ldr	r3, [pc, #80]	; (8002a1c <HAL_UART_MspInit+0xfc>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	4a13      	ldr	r2, [pc, #76]	; (8002a1c <HAL_UART_MspInit+0xfc>)
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	6313      	str	r3, [r2, #48]	; 0x30
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <HAL_UART_MspInit+0xfc>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029e0:	230c      	movs	r3, #12
 80029e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e4:	2302      	movs	r3, #2
 80029e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ec:	2303      	movs	r3, #3
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029f0:	2307      	movs	r3, #7
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f4:	f107 031c 	add.w	r3, r7, #28
 80029f8:	4619      	mov	r1, r3
 80029fa:	4809      	ldr	r0, [pc, #36]	; (8002a20 <HAL_UART_MspInit+0x100>)
 80029fc:	f001 fa4c 	bl	8003e98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a00:	2200      	movs	r2, #0
 8002a02:	2100      	movs	r1, #0
 8002a04:	2026      	movs	r0, #38	; 0x26
 8002a06:	f001 f97e 	bl	8003d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a0a:	2026      	movs	r0, #38	; 0x26
 8002a0c:	f001 f997 	bl	8003d3e <HAL_NVIC_EnableIRQ>
}
 8002a10:	bf00      	nop
 8002a12:	3730      	adds	r7, #48	; 0x30
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40011000 	.word	0x40011000
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40020000 	.word	0x40020000
 8002a24:	40004400 	.word	0x40004400

08002a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a2c:	e7fe      	b.n	8002a2c <NMI_Handler+0x4>

08002a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a32:	e7fe      	b.n	8002a32 <HardFault_Handler+0x4>

08002a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a38:	e7fe      	b.n	8002a38 <MemManage_Handler+0x4>

08002a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a3e:	e7fe      	b.n	8002a3e <BusFault_Handler+0x4>

08002a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a44:	e7fe      	b.n	8002a44 <UsageFault_Handler+0x4>

08002a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a62:	b480      	push	{r7}
 8002a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a74:	f000 f952 	bl	8002d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a78:	bf00      	nop
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002a80:	4802      	ldr	r0, [pc, #8]	; (8002a8c <CAN1_TX_IRQHandler+0x10>)
 8002a82:	f000 fe40 	bl	8003706 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	2000008c 	.word	0x2000008c

08002a90 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002a94:	4802      	ldr	r0, [pc, #8]	; (8002aa0 <CAN1_RX0_IRQHandler+0x10>)
 8002a96:	f000 fe36 	bl	8003706 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	2000008c 	.word	0x2000008c

08002aa4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002aa8:	2040      	movs	r0, #64	; 0x40
 8002aaa:	f001 fbbb 	bl	8004224 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002aae:	2080      	movs	r0, #128	; 0x80
 8002ab0:	f001 fbb8 	bl	8004224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ab4:	bf00      	nop
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002abc:	4802      	ldr	r0, [pc, #8]	; (8002ac8 <TIM3_IRQHandler+0x10>)
 8002abe:	f002 fa59 	bl	8004f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	200000b4 	.word	0x200000b4

08002acc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ad0:	4802      	ldr	r0, [pc, #8]	; (8002adc <USART2_IRQHandler+0x10>)
 8002ad2:	f003 fa23 	bl	8005f1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000140 	.word	0x20000140

08002ae0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002ae4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002ae8:	f001 fb9c 	bl	8004224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	e00a      	b.n	8002b18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b02:	f3af 8000 	nop.w
 8002b06:	4601      	mov	r1, r0
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	60ba      	str	r2, [r7, #8]
 8002b0e:	b2ca      	uxtb	r2, r1
 8002b10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	3301      	adds	r3, #1
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	dbf0      	blt.n	8002b02 <_read+0x12>
	}

return len;
 8002b20:	687b      	ldr	r3, [r7, #4]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <_close>:
	}
	return len;
}

int _close(int file)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
	return -1;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b52:	605a      	str	r2, [r3, #4]
	return 0;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <_isatty>:

int _isatty(int file)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
	return 1;
 8002b6a:	2301      	movs	r3, #1
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
	return 0;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b9c:	4a14      	ldr	r2, [pc, #80]	; (8002bf0 <_sbrk+0x5c>)
 8002b9e:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <_sbrk+0x60>)
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ba8:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <_sbrk+0x64>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d102      	bne.n	8002bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bb0:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <_sbrk+0x64>)
 8002bb2:	4a12      	ldr	r2, [pc, #72]	; (8002bfc <_sbrk+0x68>)
 8002bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bb6:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <_sbrk+0x64>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d207      	bcs.n	8002bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bc4:	f004 fb3e 	bl	8007244 <__errno>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	220c      	movs	r2, #12
 8002bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bd2:	e009      	b.n	8002be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bd4:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <_sbrk+0x64>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bda:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <_sbrk+0x64>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	4a05      	ldr	r2, [pc, #20]	; (8002bf8 <_sbrk+0x64>)
 8002be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002be6:	68fb      	ldr	r3, [r7, #12]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20020000 	.word	0x20020000
 8002bf4:	00000400 	.word	0x00000400
 8002bf8:	200004f0 	.word	0x200004f0
 8002bfc:	20000710 	.word	0x20000710

08002c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <SystemInit+0x20>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0a:	4a05      	ldr	r2, [pc, #20]	; (8002c20 <SystemInit+0x20>)
 8002c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c28:	480d      	ldr	r0, [pc, #52]	; (8002c60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c2a:	490e      	ldr	r1, [pc, #56]	; (8002c64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c2c:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c30:	e002      	b.n	8002c38 <LoopCopyDataInit>

08002c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c36:	3304      	adds	r3, #4

08002c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c3c:	d3f9      	bcc.n	8002c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c3e:	4a0b      	ldr	r2, [pc, #44]	; (8002c6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c40:	4c0b      	ldr	r4, [pc, #44]	; (8002c70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c44:	e001      	b.n	8002c4a <LoopFillZerobss>

08002c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c48:	3204      	adds	r2, #4

08002c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c4c:	d3fb      	bcc.n	8002c46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c4e:	f7ff ffd7 	bl	8002c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c52:	f004 fafd 	bl	8007250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c56:	f7fe ffed 	bl	8001c34 <main>
  bx  lr    
 8002c5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002c68:	08008a70 	.word	0x08008a70
  ldr r2, =_sbss
 8002c6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002c70:	2000070c 	.word	0x2000070c

08002c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c74:	e7fe      	b.n	8002c74 <ADC_IRQHandler>
	...

08002c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <HAL_Init+0x40>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a0d      	ldr	r2, [pc, #52]	; (8002cb8 <HAL_Init+0x40>)
 8002c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_Init+0x40>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <HAL_Init+0x40>)
 8002c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_Init+0x40>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <HAL_Init+0x40>)
 8002c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ca0:	2003      	movs	r0, #3
 8002ca2:	f001 f825 	bl	8003cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f000 f808 	bl	8002cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cac:	f7ff fd7e 	bl	80027ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023c00 	.word	0x40023c00

08002cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cc4:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <HAL_InitTick+0x54>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <HAL_InitTick+0x58>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f001 f83d 	bl	8003d5a <HAL_SYSTICK_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e00e      	b.n	8002d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b0f      	cmp	r3, #15
 8002cee:	d80a      	bhi.n	8002d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cf8:	f001 f805 	bl	8003d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cfc:	4a06      	ldr	r2, [pc, #24]	; (8002d18 <HAL_InitTick+0x5c>)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e000      	b.n	8002d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20000000 	.word	0x20000000
 8002d14:	20000008 	.word	0x20000008
 8002d18:	20000004 	.word	0x20000004

08002d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_IncTick+0x20>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_IncTick+0x24>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <HAL_IncTick+0x24>)
 8002d2e:	6013      	str	r3, [r2, #0]
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	20000008 	.word	0x20000008
 8002d40:	200004f4 	.word	0x200004f4

08002d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return uwTick;
 8002d48:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <HAL_GetTick+0x14>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	200004f4 	.word	0x200004f4

08002d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d64:	f7ff ffee 	bl	8002d44 <HAL_GetTick>
 8002d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d74:	d005      	beq.n	8002d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <HAL_Delay+0x44>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4413      	add	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d82:	bf00      	nop
 8002d84:	f7ff ffde 	bl	8002d44 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d8f7      	bhi.n	8002d84 <HAL_Delay+0x28>
  {
  }
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000008 	.word	0x20000008

08002da4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e0ed      	b.n	8002f92 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d102      	bne.n	8002dc8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff fd1a 	bl	80027fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dd8:	f7ff ffb4 	bl	8002d44 <HAL_GetTick>
 8002ddc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002dde:	e012      	b.n	8002e06 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002de0:	f7ff ffb0 	bl	8002d44 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b0a      	cmp	r3, #10
 8002dec:	d90b      	bls.n	8002e06 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2205      	movs	r2, #5
 8002dfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e0c5      	b.n	8002f92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0e5      	beq.n	8002de0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0202 	bic.w	r2, r2, #2
 8002e22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e24:	f7ff ff8e 	bl	8002d44 <HAL_GetTick>
 8002e28:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e2a:	e012      	b.n	8002e52 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e2c:	f7ff ff8a 	bl	8002d44 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b0a      	cmp	r3, #10
 8002e38:	d90b      	bls.n	8002e52 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2205      	movs	r2, #5
 8002e4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e09f      	b.n	8002f92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1e5      	bne.n	8002e2c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	7e1b      	ldrb	r3, [r3, #24]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d108      	bne.n	8002e7a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	e007      	b.n	8002e8a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	7e5b      	ldrb	r3, [r3, #25]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d108      	bne.n	8002ea4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	e007      	b.n	8002eb4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	7e9b      	ldrb	r3, [r3, #26]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d108      	bne.n	8002ece <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0220 	orr.w	r2, r2, #32
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	e007      	b.n	8002ede <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0220 	bic.w	r2, r2, #32
 8002edc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	7edb      	ldrb	r3, [r3, #27]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d108      	bne.n	8002ef8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0210 	bic.w	r2, r2, #16
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	e007      	b.n	8002f08 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0210 	orr.w	r2, r2, #16
 8002f06:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	7f1b      	ldrb	r3, [r3, #28]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d108      	bne.n	8002f22 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0208 	orr.w	r2, r2, #8
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	e007      	b.n	8002f32 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0208 	bic.w	r2, r2, #8
 8002f30:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	7f5b      	ldrb	r3, [r3, #29]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d108      	bne.n	8002f4c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 0204 	orr.w	r2, r2, #4
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	e007      	b.n	8002f5c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0204 	bic.w	r2, r2, #4
 8002f5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	ea42 0103 	orr.w	r1, r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	1e5a      	subs	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fb2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002fb4:	7cfb      	ldrb	r3, [r7, #19]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d003      	beq.n	8002fc2 <HAL_CAN_ConfigFilter+0x26>
 8002fba:	7cfb      	ldrb	r3, [r7, #19]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	f040 80be 	bne.w	800313e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002fc2:	4b65      	ldr	r3, [pc, #404]	; (8003158 <HAL_CAN_ConfigFilter+0x1bc>)
 8002fc4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002fcc:	f043 0201 	orr.w	r2, r3, #1
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002fdc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	021b      	lsls	r3, r3, #8
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f003 031f 	and.w	r3, r3, #31
 8003002:	2201      	movs	r2, #1
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	43db      	mvns	r3, r3
 8003014:	401a      	ands	r2, r3
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d123      	bne.n	800306c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	43db      	mvns	r3, r3
 800302e:	401a      	ands	r2, r3
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003046:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	3248      	adds	r2, #72	; 0x48
 800304c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003060:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003062:	6979      	ldr	r1, [r7, #20]
 8003064:	3348      	adds	r3, #72	; 0x48
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	440b      	add	r3, r1
 800306a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d122      	bne.n	80030ba <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	431a      	orrs	r2, r3
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003094:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	3248      	adds	r2, #72	; 0x48
 800309a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030ae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030b0:	6979      	ldr	r1, [r7, #20]
 80030b2:	3348      	adds	r3, #72	; 0x48
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	440b      	add	r3, r1
 80030b8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	43db      	mvns	r3, r3
 80030cc:	401a      	ands	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80030d4:	e007      	b.n	80030e6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	431a      	orrs	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	43db      	mvns	r3, r3
 80030f8:	401a      	ands	r2, r3
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003100:	e007      	b.n	8003112 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	431a      	orrs	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d107      	bne.n	800312a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	431a      	orrs	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003130:	f023 0201 	bic.w	r2, r3, #1
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800313a:	2300      	movs	r3, #0
 800313c:	e006      	b.n	800314c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
  }
}
 800314c:	4618      	mov	r0, r3
 800314e:	371c      	adds	r7, #28
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	40006400 	.word	0x40006400

0800315c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3020 	ldrb.w	r3, [r3, #32]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b01      	cmp	r3, #1
 800316e:	d12e      	bne.n	80031ce <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0201 	bic.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003188:	f7ff fddc 	bl	8002d44 <HAL_GetTick>
 800318c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800318e:	e012      	b.n	80031b6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003190:	f7ff fdd8 	bl	8002d44 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b0a      	cmp	r3, #10
 800319c:	d90b      	bls.n	80031b6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2205      	movs	r2, #5
 80031ae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e012      	b.n	80031dc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1e5      	bne.n	8003190 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e006      	b.n	80031dc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
  }
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d133      	bne.n	8003260 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0201 	orr.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003208:	f7ff fd9c 	bl	8002d44 <HAL_GetTick>
 800320c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800320e:	e012      	b.n	8003236 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003210:	f7ff fd98 	bl	8002d44 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b0a      	cmp	r3, #10
 800321c:	d90b      	bls.n	8003236 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2205      	movs	r2, #5
 800322e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e01b      	b.n	800326e <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0e5      	beq.n	8003210 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0202 	bic.w	r2, r2, #2
 8003252:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	e006      	b.n	800326e <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
  }
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003276:	b480      	push	{r7}
 8003278:	b089      	sub	sp, #36	; 0x24
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
 8003282:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800328a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003294:	7ffb      	ldrb	r3, [r7, #31]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d003      	beq.n	80032a2 <HAL_CAN_AddTxMessage+0x2c>
 800329a:	7ffb      	ldrb	r3, [r7, #31]
 800329c:	2b02      	cmp	r3, #2
 800329e:	f040 80b8 	bne.w	8003412 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10a      	bne.n	80032c2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d105      	bne.n	80032c2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80a0 	beq.w	8003402 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	0e1b      	lsrs	r3, r3, #24
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d907      	bls.n	80032e2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e09e      	b.n	8003420 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80032e2:	2201      	movs	r2, #1
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	409a      	lsls	r2, r3
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10d      	bne.n	8003310 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80032fe:	68f9      	ldr	r1, [r7, #12]
 8003300:	6809      	ldr	r1, [r1, #0]
 8003302:	431a      	orrs	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	3318      	adds	r3, #24
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	440b      	add	r3, r1
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	e00f      	b.n	8003330 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800331a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003320:	68f9      	ldr	r1, [r7, #12]
 8003322:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003324:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	3318      	adds	r3, #24
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	440b      	add	r3, r1
 800332e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6819      	ldr	r1, [r3, #0]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	3318      	adds	r3, #24
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	440b      	add	r3, r1
 8003340:	3304      	adds	r3, #4
 8003342:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	7d1b      	ldrb	r3, [r3, #20]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d111      	bne.n	8003370 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	3318      	adds	r3, #24
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	4413      	add	r3, r2
 8003358:	3304      	adds	r3, #4
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	6811      	ldr	r1, [r2, #0]
 8003360:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	3318      	adds	r3, #24
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	440b      	add	r3, r1
 800336c:	3304      	adds	r3, #4
 800336e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3307      	adds	r3, #7
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	061a      	lsls	r2, r3, #24
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3306      	adds	r3, #6
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	041b      	lsls	r3, r3, #16
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3305      	adds	r3, #5
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	4313      	orrs	r3, r2
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	3204      	adds	r2, #4
 8003390:	7812      	ldrb	r2, [r2, #0]
 8003392:	4610      	mov	r0, r2
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	6811      	ldr	r1, [r2, #0]
 8003398:	ea43 0200 	orr.w	r2, r3, r0
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	440b      	add	r3, r1
 80033a2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80033a6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3303      	adds	r3, #3
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	061a      	lsls	r2, r3, #24
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3302      	adds	r3, #2
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	041b      	lsls	r3, r3, #16
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3301      	adds	r3, #1
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	021b      	lsls	r3, r3, #8
 80033c2:	4313      	orrs	r3, r2
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	7812      	ldrb	r2, [r2, #0]
 80033c8:	4610      	mov	r0, r2
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	6811      	ldr	r1, [r2, #0]
 80033ce:	ea43 0200 	orr.w	r2, r3, r0
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	440b      	add	r3, r1
 80033d8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80033dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	3318      	adds	r3, #24
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	4413      	add	r3, r2
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	6811      	ldr	r1, [r2, #0]
 80033f0:	f043 0201 	orr.w	r2, r3, #1
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	3318      	adds	r3, #24
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	440b      	add	r3, r1
 80033fc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	e00e      	b.n	8003420 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e006      	b.n	8003420 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
  }
}
 8003420:	4618      	mov	r0, r3
 8003422:	3724      	adds	r7, #36	; 0x24
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800343e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003440:	7afb      	ldrb	r3, [r7, #11]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d002      	beq.n	800344c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003446:	7afb      	ldrb	r3, [r7, #11]
 8003448:	2b02      	cmp	r3, #2
 800344a:	d11d      	bne.n	8003488 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	3301      	adds	r3, #1
 800345e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	3301      	adds	r3, #1
 8003472:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	3301      	adds	r3, #1
 8003486:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003488:	68fb      	ldr	r3, [r7, #12]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003496:	b480      	push	{r7}
 8003498:	b087      	sub	sp, #28
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034aa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80034ac:	7dfb      	ldrb	r3, [r7, #23]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d003      	beq.n	80034ba <HAL_CAN_GetRxMessage+0x24>
 80034b2:	7dfb      	ldrb	r3, [r7, #23]
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	f040 80f3 	bne.w	80036a0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10e      	bne.n	80034de <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d116      	bne.n	80034fc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e0e7      	b.n	80036ae <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d107      	bne.n	80034fc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0d8      	b.n	80036ae <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	331b      	adds	r3, #27
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	4413      	add	r3, r2
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0204 	and.w	r2, r3, #4
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10c      	bne.n	8003534 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	331b      	adds	r3, #27
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	4413      	add	r3, r2
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	0d5b      	lsrs	r3, r3, #21
 800352a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	e00b      	b.n	800354c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	331b      	adds	r3, #27
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	4413      	add	r3, r2
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	08db      	lsrs	r3, r3, #3
 8003544:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	331b      	adds	r3, #27
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	4413      	add	r3, r2
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0202 	and.w	r2, r3, #2
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	331b      	adds	r3, #27
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	4413      	add	r3, r2
 800356e:	3304      	adds	r3, #4
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 020f 	and.w	r2, r3, #15
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	331b      	adds	r3, #27
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	4413      	add	r3, r2
 8003586:	3304      	adds	r3, #4
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	0a1b      	lsrs	r3, r3, #8
 800358c:	b2da      	uxtb	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	331b      	adds	r3, #27
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	4413      	add	r3, r2
 800359e:	3304      	adds	r3, #4
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	0c1b      	lsrs	r3, r3, #16
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	0a1a      	lsrs	r2, r3, #8
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	3301      	adds	r3, #1
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	0c1a      	lsrs	r2, r3, #16
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	3302      	adds	r3, #2
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	0e1a      	lsrs	r2, r3, #24
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	3303      	adds	r3, #3
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	4413      	add	r3, r2
 8003618:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	3304      	adds	r3, #4
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	4413      	add	r3, r2
 8003630:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	0a1a      	lsrs	r2, r3, #8
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	3305      	adds	r3, #5
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	4413      	add	r3, r2
 800364a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	0c1a      	lsrs	r2, r3, #16
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	3306      	adds	r3, #6
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	4413      	add	r3, r2
 8003664:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	0e1a      	lsrs	r2, r3, #24
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	3307      	adds	r3, #7
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d108      	bne.n	800368c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0220 	orr.w	r2, r2, #32
 8003688:	60da      	str	r2, [r3, #12]
 800368a:	e007      	b.n	800369c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0220 	orr.w	r2, r2, #32
 800369a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	e006      	b.n	80036ae <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
  }
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	371c      	adds	r7, #28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b085      	sub	sp, #20
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036ca:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d002      	beq.n	80036d8 <HAL_CAN_ActivateNotification+0x1e>
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d109      	bne.n	80036ec <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6959      	ldr	r1, [r3, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	e006      	b.n	80036fa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
  }
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b08a      	sub	sp, #40	; 0x28
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800370e:	2300      	movs	r3, #0
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d07c      	beq.n	8003846 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d023      	beq.n	800379e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2201      	movs	r2, #1
 800375c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7fe ffe1 	bl	8002730 <HAL_CAN_TxMailbox0CompleteCallback>
 800376e:	e016      	b.n	800379e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	f003 0304 	and.w	r3, r3, #4
 8003776:	2b00      	cmp	r3, #0
 8003778:	d004      	beq.n	8003784 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
 8003782:	e00c      	b.n	800379e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d004      	beq.n	8003798 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
 8003796:	e002      	b.n	800379e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f97f 	bl	8003a9c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d024      	beq.n	80037f2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f959 	bl	8003a74 <HAL_CAN_TxMailbox1CompleteCallback>
 80037c2:	e016      	b.n	80037f2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d004      	beq.n	80037d8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
 80037d6:	e00c      	b.n	80037f2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d004      	beq.n	80037ec <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ea:	e002      	b.n	80037f2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f95f 	bl	8003ab0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d024      	beq.n	8003846 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003804:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f939 	bl	8003a88 <HAL_CAN_TxMailbox2CompleteCallback>
 8003816:	e016      	b.n	8003846 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d004      	beq.n	800382c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
 800382a:	e00c      	b.n	8003846 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d004      	beq.n	8003840 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383c:	627b      	str	r3, [r7, #36]	; 0x24
 800383e:	e002      	b.n	8003846 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f93f 	bl	8003ac4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00c      	beq.n	800386a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003860:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2210      	movs	r2, #16
 8003868:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00b      	beq.n	800388c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d006      	beq.n	800388c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2208      	movs	r2, #8
 8003884:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f926 	bl	8003ad8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7fe ff55 	bl	8002754 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00c      	beq.n	80038ce <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d007      	beq.n	80038ce <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2210      	movs	r2, #16
 80038cc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00b      	beq.n	80038f0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d006      	beq.n	80038f0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2208      	movs	r2, #8
 80038e8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f908 	bl	8003b00 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d009      	beq.n	800390e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f8ef 	bl	8003aec <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00b      	beq.n	8003930 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	d006      	beq.n	8003930 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2210      	movs	r2, #16
 8003928:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f8f2 	bl	8003b14 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00b      	beq.n	8003952 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f003 0308 	and.w	r3, r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	d006      	beq.n	8003952 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2208      	movs	r2, #8
 800394a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f8eb 	bl	8003b28 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d07b      	beq.n	8003a54 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	d072      	beq.n	8003a4c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	f043 0301 	orr.w	r3, r3, #1
 8003980:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	f043 0302 	orr.w	r3, r3, #2
 800399c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	f043 0304 	orr.w	r3, r3, #4
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d043      	beq.n	8003a4c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d03e      	beq.n	8003a4c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039d4:	2b60      	cmp	r3, #96	; 0x60
 80039d6:	d02b      	beq.n	8003a30 <HAL_CAN_IRQHandler+0x32a>
 80039d8:	2b60      	cmp	r3, #96	; 0x60
 80039da:	d82e      	bhi.n	8003a3a <HAL_CAN_IRQHandler+0x334>
 80039dc:	2b50      	cmp	r3, #80	; 0x50
 80039de:	d022      	beq.n	8003a26 <HAL_CAN_IRQHandler+0x320>
 80039e0:	2b50      	cmp	r3, #80	; 0x50
 80039e2:	d82a      	bhi.n	8003a3a <HAL_CAN_IRQHandler+0x334>
 80039e4:	2b40      	cmp	r3, #64	; 0x40
 80039e6:	d019      	beq.n	8003a1c <HAL_CAN_IRQHandler+0x316>
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d826      	bhi.n	8003a3a <HAL_CAN_IRQHandler+0x334>
 80039ec:	2b30      	cmp	r3, #48	; 0x30
 80039ee:	d010      	beq.n	8003a12 <HAL_CAN_IRQHandler+0x30c>
 80039f0:	2b30      	cmp	r3, #48	; 0x30
 80039f2:	d822      	bhi.n	8003a3a <HAL_CAN_IRQHandler+0x334>
 80039f4:	2b10      	cmp	r3, #16
 80039f6:	d002      	beq.n	80039fe <HAL_CAN_IRQHandler+0x2f8>
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d005      	beq.n	8003a08 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80039fc:	e01d      	b.n	8003a3a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	f043 0308 	orr.w	r3, r3, #8
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a06:	e019      	b.n	8003a3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	f043 0310 	orr.w	r3, r3, #16
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a10:	e014      	b.n	8003a3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	f043 0320 	orr.w	r3, r3, #32
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a1a:	e00f      	b.n	8003a3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a24:	e00a      	b.n	8003a3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a2e:	e005      	b.n	8003a3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a38:	e000      	b.n	8003a3c <HAL_CAN_IRQHandler+0x336>
            break;
 8003a3a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699a      	ldr	r2, [r3, #24]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a4a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2204      	movs	r2, #4
 8003a52:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d008      	beq.n	8003a6c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f868 	bl	8003b3c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	3728      	adds	r7, #40	; 0x28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b60:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <__NVIC_SetPriorityGrouping+0x44>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b82:	4a04      	ldr	r2, [pc, #16]	; (8003b94 <__NVIC_SetPriorityGrouping+0x44>)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	60d3      	str	r3, [r2, #12]
}
 8003b88:	bf00      	nop
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	e000ed00 	.word	0xe000ed00

08003b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b9c:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	0a1b      	lsrs	r3, r3, #8
 8003ba2:	f003 0307 	and.w	r3, r3, #7
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	e000ed00 	.word	0xe000ed00

08003bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	4603      	mov	r3, r0
 8003bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	db0b      	blt.n	8003bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	f003 021f 	and.w	r2, r3, #31
 8003bcc:	4907      	ldr	r1, [pc, #28]	; (8003bec <__NVIC_EnableIRQ+0x38>)
 8003bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	e000e100 	.word	0xe000e100

08003bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	6039      	str	r1, [r7, #0]
 8003bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	db0a      	blt.n	8003c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	490c      	ldr	r1, [pc, #48]	; (8003c3c <__NVIC_SetPriority+0x4c>)
 8003c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0e:	0112      	lsls	r2, r2, #4
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	440b      	add	r3, r1
 8003c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c18:	e00a      	b.n	8003c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	4908      	ldr	r1, [pc, #32]	; (8003c40 <__NVIC_SetPriority+0x50>)
 8003c20:	79fb      	ldrb	r3, [r7, #7]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	3b04      	subs	r3, #4
 8003c28:	0112      	lsls	r2, r2, #4
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	761a      	strb	r2, [r3, #24]
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	e000e100 	.word	0xe000e100
 8003c40:	e000ed00 	.word	0xe000ed00

08003c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b089      	sub	sp, #36	; 0x24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f1c3 0307 	rsb	r3, r3, #7
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	bf28      	it	cs
 8003c62:	2304      	movcs	r3, #4
 8003c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	2b06      	cmp	r3, #6
 8003c6c:	d902      	bls.n	8003c74 <NVIC_EncodePriority+0x30>
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3b03      	subs	r3, #3
 8003c72:	e000      	b.n	8003c76 <NVIC_EncodePriority+0x32>
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43da      	mvns	r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	401a      	ands	r2, r3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	fa01 f303 	lsl.w	r3, r1, r3
 8003c96:	43d9      	mvns	r1, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c9c:	4313      	orrs	r3, r2
         );
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3724      	adds	r7, #36	; 0x24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cbc:	d301      	bcc.n	8003cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e00f      	b.n	8003ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cc2:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <SysTick_Config+0x40>)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cca:	210f      	movs	r1, #15
 8003ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cd0:	f7ff ff8e 	bl	8003bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cd4:	4b05      	ldr	r3, [pc, #20]	; (8003cec <SysTick_Config+0x40>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cda:	4b04      	ldr	r3, [pc, #16]	; (8003cec <SysTick_Config+0x40>)
 8003cdc:	2207      	movs	r2, #7
 8003cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	e000e010 	.word	0xe000e010

08003cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7ff ff29 	bl	8003b50 <__NVIC_SetPriorityGrouping>
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b086      	sub	sp, #24
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	607a      	str	r2, [r7, #4]
 8003d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d18:	f7ff ff3e 	bl	8003b98 <__NVIC_GetPriorityGrouping>
 8003d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	68b9      	ldr	r1, [r7, #8]
 8003d22:	6978      	ldr	r0, [r7, #20]
 8003d24:	f7ff ff8e 	bl	8003c44 <NVIC_EncodePriority>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d2e:	4611      	mov	r1, r2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff ff5d 	bl	8003bf0 <__NVIC_SetPriority>
}
 8003d36:	bf00      	nop
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	4603      	mov	r3, r0
 8003d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff ff31 	bl	8003bb4 <__NVIC_EnableIRQ>
}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff ffa2 	bl	8003cac <SysTick_Config>
 8003d68:	4603      	mov	r3, r0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b084      	sub	sp, #16
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d80:	f7fe ffe0 	bl	8002d44 <HAL_GetTick>
 8003d84:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d008      	beq.n	8003da4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2280      	movs	r2, #128	; 0x80
 8003d96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e052      	b.n	8003e4a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0216 	bic.w	r2, r2, #22
 8003db2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695a      	ldr	r2, [r3, #20]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dc2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d103      	bne.n	8003dd4 <HAL_DMA_Abort+0x62>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d007      	beq.n	8003de4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0208 	bic.w	r2, r2, #8
 8003de2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0201 	bic.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003df4:	e013      	b.n	8003e1e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003df6:	f7fe ffa5 	bl	8002d44 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b05      	cmp	r3, #5
 8003e02:	d90c      	bls.n	8003e1e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e015      	b.n	8003e4a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e4      	bne.n	8003df6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e30:	223f      	movs	r2, #63	; 0x3f
 8003e32:	409a      	lsls	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d004      	beq.n	8003e70 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2280      	movs	r2, #128	; 0x80
 8003e6a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e00c      	b.n	8003e8a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2205      	movs	r2, #5
 8003e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0201 	bic.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b089      	sub	sp, #36	; 0x24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	e165      	b.n	8004180 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	f040 8154 	bne.w	800417a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d005      	beq.n	8003eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d130      	bne.n	8003f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	2203      	movs	r2, #3
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f20:	2201      	movs	r2, #1
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	f003 0201 	and.w	r2, r3, #1
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d017      	beq.n	8003f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	2203      	movs	r2, #3
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f003 0303 	and.w	r3, r3, #3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d123      	bne.n	8003fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	08da      	lsrs	r2, r3, #3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3208      	adds	r2, #8
 8003f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	220f      	movs	r2, #15
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	08da      	lsrs	r2, r3, #3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3208      	adds	r2, #8
 8003fd6:	69b9      	ldr	r1, [r7, #24]
 8003fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f003 0203 	and.w	r2, r3, #3
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	4313      	orrs	r3, r2
 8004008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 80ae 	beq.w	800417a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	4b5d      	ldr	r3, [pc, #372]	; (8004198 <HAL_GPIO_Init+0x300>)
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	4a5c      	ldr	r2, [pc, #368]	; (8004198 <HAL_GPIO_Init+0x300>)
 8004028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800402c:	6453      	str	r3, [r2, #68]	; 0x44
 800402e:	4b5a      	ldr	r3, [pc, #360]	; (8004198 <HAL_GPIO_Init+0x300>)
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800403a:	4a58      	ldr	r2, [pc, #352]	; (800419c <HAL_GPIO_Init+0x304>)
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	089b      	lsrs	r3, r3, #2
 8004040:	3302      	adds	r3, #2
 8004042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	220f      	movs	r2, #15
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	43db      	mvns	r3, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4013      	ands	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a4f      	ldr	r2, [pc, #316]	; (80041a0 <HAL_GPIO_Init+0x308>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d025      	beq.n	80040b2 <HAL_GPIO_Init+0x21a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a4e      	ldr	r2, [pc, #312]	; (80041a4 <HAL_GPIO_Init+0x30c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d01f      	beq.n	80040ae <HAL_GPIO_Init+0x216>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a4d      	ldr	r2, [pc, #308]	; (80041a8 <HAL_GPIO_Init+0x310>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d019      	beq.n	80040aa <HAL_GPIO_Init+0x212>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a4c      	ldr	r2, [pc, #304]	; (80041ac <HAL_GPIO_Init+0x314>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d013      	beq.n	80040a6 <HAL_GPIO_Init+0x20e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a4b      	ldr	r2, [pc, #300]	; (80041b0 <HAL_GPIO_Init+0x318>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00d      	beq.n	80040a2 <HAL_GPIO_Init+0x20a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a4a      	ldr	r2, [pc, #296]	; (80041b4 <HAL_GPIO_Init+0x31c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d007      	beq.n	800409e <HAL_GPIO_Init+0x206>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a49      	ldr	r2, [pc, #292]	; (80041b8 <HAL_GPIO_Init+0x320>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d101      	bne.n	800409a <HAL_GPIO_Init+0x202>
 8004096:	2306      	movs	r3, #6
 8004098:	e00c      	b.n	80040b4 <HAL_GPIO_Init+0x21c>
 800409a:	2307      	movs	r3, #7
 800409c:	e00a      	b.n	80040b4 <HAL_GPIO_Init+0x21c>
 800409e:	2305      	movs	r3, #5
 80040a0:	e008      	b.n	80040b4 <HAL_GPIO_Init+0x21c>
 80040a2:	2304      	movs	r3, #4
 80040a4:	e006      	b.n	80040b4 <HAL_GPIO_Init+0x21c>
 80040a6:	2303      	movs	r3, #3
 80040a8:	e004      	b.n	80040b4 <HAL_GPIO_Init+0x21c>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e002      	b.n	80040b4 <HAL_GPIO_Init+0x21c>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <HAL_GPIO_Init+0x21c>
 80040b2:	2300      	movs	r3, #0
 80040b4:	69fa      	ldr	r2, [r7, #28]
 80040b6:	f002 0203 	and.w	r2, r2, #3
 80040ba:	0092      	lsls	r2, r2, #2
 80040bc:	4093      	lsls	r3, r2
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040c4:	4935      	ldr	r1, [pc, #212]	; (800419c <HAL_GPIO_Init+0x304>)
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	089b      	lsrs	r3, r3, #2
 80040ca:	3302      	adds	r3, #2
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040d2:	4b3a      	ldr	r3, [pc, #232]	; (80041bc <HAL_GPIO_Init+0x324>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	43db      	mvns	r3, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4013      	ands	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040f6:	4a31      	ldr	r2, [pc, #196]	; (80041bc <HAL_GPIO_Init+0x324>)
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040fc:	4b2f      	ldr	r3, [pc, #188]	; (80041bc <HAL_GPIO_Init+0x324>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	43db      	mvns	r3, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4013      	ands	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004120:	4a26      	ldr	r2, [pc, #152]	; (80041bc <HAL_GPIO_Init+0x324>)
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004126:	4b25      	ldr	r3, [pc, #148]	; (80041bc <HAL_GPIO_Init+0x324>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	43db      	mvns	r3, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4013      	ands	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800414a:	4a1c      	ldr	r2, [pc, #112]	; (80041bc <HAL_GPIO_Init+0x324>)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004150:	4b1a      	ldr	r3, [pc, #104]	; (80041bc <HAL_GPIO_Init+0x324>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	43db      	mvns	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004174:	4a11      	ldr	r2, [pc, #68]	; (80041bc <HAL_GPIO_Init+0x324>)
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	3301      	adds	r3, #1
 800417e:	61fb      	str	r3, [r7, #28]
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	2b0f      	cmp	r3, #15
 8004184:	f67f ae96 	bls.w	8003eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004188:	bf00      	nop
 800418a:	bf00      	nop
 800418c:	3724      	adds	r7, #36	; 0x24
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40023800 	.word	0x40023800
 800419c:	40013800 	.word	0x40013800
 80041a0:	40020000 	.word	0x40020000
 80041a4:	40020400 	.word	0x40020400
 80041a8:	40020800 	.word	0x40020800
 80041ac:	40020c00 	.word	0x40020c00
 80041b0:	40021000 	.word	0x40021000
 80041b4:	40021400 	.word	0x40021400
 80041b8:	40021800 	.word	0x40021800
 80041bc:	40013c00 	.word	0x40013c00

080041c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	887b      	ldrh	r3, [r7, #2]
 80041d2:	4013      	ands	r3, r2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041d8:	2301      	movs	r3, #1
 80041da:	73fb      	strb	r3, [r7, #15]
 80041dc:	e001      	b.n	80041e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041de:	2300      	movs	r3, #0
 80041e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	807b      	strh	r3, [r7, #2]
 80041fc:	4613      	mov	r3, r2
 80041fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004200:	787b      	ldrb	r3, [r7, #1]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004206:	887a      	ldrh	r2, [r7, #2]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800420c:	e003      	b.n	8004216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800420e:	887b      	ldrh	r3, [r7, #2]
 8004210:	041a      	lsls	r2, r3, #16
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	619a      	str	r2, [r3, #24]
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800422e:	4b08      	ldr	r3, [pc, #32]	; (8004250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004230:	695a      	ldr	r2, [r3, #20]
 8004232:	88fb      	ldrh	r3, [r7, #6]
 8004234:	4013      	ands	r3, r2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d006      	beq.n	8004248 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800423a:	4a05      	ldr	r2, [pc, #20]	; (8004250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800423c:	88fb      	ldrh	r3, [r7, #6]
 800423e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004240:	88fb      	ldrh	r3, [r7, #6]
 8004242:	4618      	mov	r0, r3
 8004244:	f7fc f9ee 	bl	8000624 <HAL_GPIO_EXTI_Callback>
  }
}
 8004248:	bf00      	nop
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40013c00 	.word	0x40013c00

08004254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e0cc      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004268:	4b68      	ldr	r3, [pc, #416]	; (800440c <HAL_RCC_ClockConfig+0x1b8>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	429a      	cmp	r2, r3
 8004274:	d90c      	bls.n	8004290 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004276:	4b65      	ldr	r3, [pc, #404]	; (800440c <HAL_RCC_ClockConfig+0x1b8>)
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800427e:	4b63      	ldr	r3, [pc, #396]	; (800440c <HAL_RCC_ClockConfig+0x1b8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d001      	beq.n	8004290 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0b8      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d020      	beq.n	80042de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d005      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042a8:	4b59      	ldr	r3, [pc, #356]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	4a58      	ldr	r2, [pc, #352]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042c0:	4b53      	ldr	r3, [pc, #332]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	4a52      	ldr	r2, [pc, #328]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042cc:	4b50      	ldr	r3, [pc, #320]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	494d      	ldr	r1, [pc, #308]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d044      	beq.n	8004374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d107      	bne.n	8004302 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f2:	4b47      	ldr	r3, [pc, #284]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d119      	bne.n	8004332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e07f      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d003      	beq.n	8004312 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800430e:	2b03      	cmp	r3, #3
 8004310:	d107      	bne.n	8004322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004312:	4b3f      	ldr	r3, [pc, #252]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d109      	bne.n	8004332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e06f      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004322:	4b3b      	ldr	r3, [pc, #236]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e067      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004332:	4b37      	ldr	r3, [pc, #220]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f023 0203 	bic.w	r2, r3, #3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	4934      	ldr	r1, [pc, #208]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 8004340:	4313      	orrs	r3, r2
 8004342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004344:	f7fe fcfe 	bl	8002d44 <HAL_GetTick>
 8004348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434a:	e00a      	b.n	8004362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800434c:	f7fe fcfa 	bl	8002d44 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	f241 3288 	movw	r2, #5000	; 0x1388
 800435a:	4293      	cmp	r3, r2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e04f      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004362:	4b2b      	ldr	r3, [pc, #172]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 020c 	and.w	r2, r3, #12
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	429a      	cmp	r2, r3
 8004372:	d1eb      	bne.n	800434c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004374:	4b25      	ldr	r3, [pc, #148]	; (800440c <HAL_RCC_ClockConfig+0x1b8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 030f 	and.w	r3, r3, #15
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d20c      	bcs.n	800439c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004382:	4b22      	ldr	r3, [pc, #136]	; (800440c <HAL_RCC_ClockConfig+0x1b8>)
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800438a:	4b20      	ldr	r3, [pc, #128]	; (800440c <HAL_RCC_ClockConfig+0x1b8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d001      	beq.n	800439c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e032      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a8:	4b19      	ldr	r3, [pc, #100]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	4916      	ldr	r1, [pc, #88]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d009      	beq.n	80043da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043c6:	4b12      	ldr	r3, [pc, #72]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	490e      	ldr	r1, [pc, #56]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043da:	f000 f855 	bl	8004488 <HAL_RCC_GetSysClockFreq>
 80043de:	4602      	mov	r2, r0
 80043e0:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	091b      	lsrs	r3, r3, #4
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	490a      	ldr	r1, [pc, #40]	; (8004414 <HAL_RCC_ClockConfig+0x1c0>)
 80043ec:	5ccb      	ldrb	r3, [r1, r3]
 80043ee:	fa22 f303 	lsr.w	r3, r2, r3
 80043f2:	4a09      	ldr	r2, [pc, #36]	; (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 80043f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043f6:	4b09      	ldr	r3, [pc, #36]	; (800441c <HAL_RCC_ClockConfig+0x1c8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fe fc5e 	bl	8002cbc <HAL_InitTick>

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40023c00 	.word	0x40023c00
 8004410:	40023800 	.word	0x40023800
 8004414:	080089b0 	.word	0x080089b0
 8004418:	20000000 	.word	0x20000000
 800441c:	20000004 	.word	0x20000004

08004420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004424:	4b03      	ldr	r3, [pc, #12]	; (8004434 <HAL_RCC_GetHCLKFreq+0x14>)
 8004426:	681b      	ldr	r3, [r3, #0]
}
 8004428:	4618      	mov	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	20000000 	.word	0x20000000

08004438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800443c:	f7ff fff0 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 8004440:	4602      	mov	r2, r0
 8004442:	4b05      	ldr	r3, [pc, #20]	; (8004458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	0a9b      	lsrs	r3, r3, #10
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	4903      	ldr	r1, [pc, #12]	; (800445c <HAL_RCC_GetPCLK1Freq+0x24>)
 800444e:	5ccb      	ldrb	r3, [r1, r3]
 8004450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004454:	4618      	mov	r0, r3
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40023800 	.word	0x40023800
 800445c:	080089c0 	.word	0x080089c0

08004460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004464:	f7ff ffdc 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 8004468:	4602      	mov	r2, r0
 800446a:	4b05      	ldr	r3, [pc, #20]	; (8004480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	0b5b      	lsrs	r3, r3, #13
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	4903      	ldr	r1, [pc, #12]	; (8004484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004476:	5ccb      	ldrb	r3, [r1, r3]
 8004478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800447c:	4618      	mov	r0, r3
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40023800 	.word	0x40023800
 8004484:	080089c0 	.word	0x080089c0

08004488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800448c:	b0ae      	sub	sp, #184	; 0xb8
 800448e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044ae:	4bcb      	ldr	r3, [pc, #812]	; (80047dc <HAL_RCC_GetSysClockFreq+0x354>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 030c 	and.w	r3, r3, #12
 80044b6:	2b0c      	cmp	r3, #12
 80044b8:	f200 8206 	bhi.w	80048c8 <HAL_RCC_GetSysClockFreq+0x440>
 80044bc:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80044be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	080044f9 	.word	0x080044f9
 80044c8:	080048c9 	.word	0x080048c9
 80044cc:	080048c9 	.word	0x080048c9
 80044d0:	080048c9 	.word	0x080048c9
 80044d4:	08004501 	.word	0x08004501
 80044d8:	080048c9 	.word	0x080048c9
 80044dc:	080048c9 	.word	0x080048c9
 80044e0:	080048c9 	.word	0x080048c9
 80044e4:	08004509 	.word	0x08004509
 80044e8:	080048c9 	.word	0x080048c9
 80044ec:	080048c9 	.word	0x080048c9
 80044f0:	080048c9 	.word	0x080048c9
 80044f4:	080046f9 	.word	0x080046f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044f8:	4bb9      	ldr	r3, [pc, #740]	; (80047e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80044fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80044fe:	e1e7      	b.n	80048d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004500:	4bb8      	ldr	r3, [pc, #736]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004502:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004506:	e1e3      	b.n	80048d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004508:	4bb4      	ldr	r3, [pc, #720]	; (80047dc <HAL_RCC_GetSysClockFreq+0x354>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004510:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004514:	4bb1      	ldr	r3, [pc, #708]	; (80047dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d071      	beq.n	8004604 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004520:	4bae      	ldr	r3, [pc, #696]	; (80047dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	099b      	lsrs	r3, r3, #6
 8004526:	2200      	movs	r2, #0
 8004528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800452c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004530:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004538:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800453c:	2300      	movs	r3, #0
 800453e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004542:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004546:	4622      	mov	r2, r4
 8004548:	462b      	mov	r3, r5
 800454a:	f04f 0000 	mov.w	r0, #0
 800454e:	f04f 0100 	mov.w	r1, #0
 8004552:	0159      	lsls	r1, r3, #5
 8004554:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004558:	0150      	lsls	r0, r2, #5
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	4621      	mov	r1, r4
 8004560:	1a51      	subs	r1, r2, r1
 8004562:	6439      	str	r1, [r7, #64]	; 0x40
 8004564:	4629      	mov	r1, r5
 8004566:	eb63 0301 	sbc.w	r3, r3, r1
 800456a:	647b      	str	r3, [r7, #68]	; 0x44
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004578:	4649      	mov	r1, r9
 800457a:	018b      	lsls	r3, r1, #6
 800457c:	4641      	mov	r1, r8
 800457e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004582:	4641      	mov	r1, r8
 8004584:	018a      	lsls	r2, r1, #6
 8004586:	4641      	mov	r1, r8
 8004588:	1a51      	subs	r1, r2, r1
 800458a:	63b9      	str	r1, [r7, #56]	; 0x38
 800458c:	4649      	mov	r1, r9
 800458e:	eb63 0301 	sbc.w	r3, r3, r1
 8004592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80045a0:	4649      	mov	r1, r9
 80045a2:	00cb      	lsls	r3, r1, #3
 80045a4:	4641      	mov	r1, r8
 80045a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045aa:	4641      	mov	r1, r8
 80045ac:	00ca      	lsls	r2, r1, #3
 80045ae:	4610      	mov	r0, r2
 80045b0:	4619      	mov	r1, r3
 80045b2:	4603      	mov	r3, r0
 80045b4:	4622      	mov	r2, r4
 80045b6:	189b      	adds	r3, r3, r2
 80045b8:	633b      	str	r3, [r7, #48]	; 0x30
 80045ba:	462b      	mov	r3, r5
 80045bc:	460a      	mov	r2, r1
 80045be:	eb42 0303 	adc.w	r3, r2, r3
 80045c2:	637b      	str	r3, [r7, #52]	; 0x34
 80045c4:	f04f 0200 	mov.w	r2, #0
 80045c8:	f04f 0300 	mov.w	r3, #0
 80045cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80045d0:	4629      	mov	r1, r5
 80045d2:	024b      	lsls	r3, r1, #9
 80045d4:	4621      	mov	r1, r4
 80045d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045da:	4621      	mov	r1, r4
 80045dc:	024a      	lsls	r2, r1, #9
 80045de:	4610      	mov	r0, r2
 80045e0:	4619      	mov	r1, r3
 80045e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80045f4:	f7fb fe5c 	bl	80002b0 <__aeabi_uldivmod>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	4613      	mov	r3, r2
 80045fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004602:	e067      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004604:	4b75      	ldr	r3, [pc, #468]	; (80047dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	099b      	lsrs	r3, r3, #6
 800460a:	2200      	movs	r2, #0
 800460c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004610:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004614:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800461c:	67bb      	str	r3, [r7, #120]	; 0x78
 800461e:	2300      	movs	r3, #0
 8004620:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004622:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004626:	4622      	mov	r2, r4
 8004628:	462b      	mov	r3, r5
 800462a:	f04f 0000 	mov.w	r0, #0
 800462e:	f04f 0100 	mov.w	r1, #0
 8004632:	0159      	lsls	r1, r3, #5
 8004634:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004638:	0150      	lsls	r0, r2, #5
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	4621      	mov	r1, r4
 8004640:	1a51      	subs	r1, r2, r1
 8004642:	62b9      	str	r1, [r7, #40]	; 0x28
 8004644:	4629      	mov	r1, r5
 8004646:	eb63 0301 	sbc.w	r3, r3, r1
 800464a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004658:	4649      	mov	r1, r9
 800465a:	018b      	lsls	r3, r1, #6
 800465c:	4641      	mov	r1, r8
 800465e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004662:	4641      	mov	r1, r8
 8004664:	018a      	lsls	r2, r1, #6
 8004666:	4641      	mov	r1, r8
 8004668:	ebb2 0a01 	subs.w	sl, r2, r1
 800466c:	4649      	mov	r1, r9
 800466e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800467e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004682:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004686:	4692      	mov	sl, r2
 8004688:	469b      	mov	fp, r3
 800468a:	4623      	mov	r3, r4
 800468c:	eb1a 0303 	adds.w	r3, sl, r3
 8004690:	623b      	str	r3, [r7, #32]
 8004692:	462b      	mov	r3, r5
 8004694:	eb4b 0303 	adc.w	r3, fp, r3
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
 800469a:	f04f 0200 	mov.w	r2, #0
 800469e:	f04f 0300 	mov.w	r3, #0
 80046a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80046a6:	4629      	mov	r1, r5
 80046a8:	028b      	lsls	r3, r1, #10
 80046aa:	4621      	mov	r1, r4
 80046ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046b0:	4621      	mov	r1, r4
 80046b2:	028a      	lsls	r2, r1, #10
 80046b4:	4610      	mov	r0, r2
 80046b6:	4619      	mov	r1, r3
 80046b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046bc:	2200      	movs	r2, #0
 80046be:	673b      	str	r3, [r7, #112]	; 0x70
 80046c0:	677a      	str	r2, [r7, #116]	; 0x74
 80046c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80046c6:	f7fb fdf3 	bl	80002b0 <__aeabi_uldivmod>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4613      	mov	r3, r2
 80046d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046d4:	4b41      	ldr	r3, [pc, #260]	; (80047dc <HAL_RCC_GetSysClockFreq+0x354>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	0c1b      	lsrs	r3, r3, #16
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	3301      	adds	r3, #1
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80046e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80046f6:	e0eb      	b.n	80048d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046f8:	4b38      	ldr	r3, [pc, #224]	; (80047dc <HAL_RCC_GetSysClockFreq+0x354>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004700:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004704:	4b35      	ldr	r3, [pc, #212]	; (80047dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d06b      	beq.n	80047e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004710:	4b32      	ldr	r3, [pc, #200]	; (80047dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	099b      	lsrs	r3, r3, #6
 8004716:	2200      	movs	r2, #0
 8004718:	66bb      	str	r3, [r7, #104]	; 0x68
 800471a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800471c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800471e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004722:	663b      	str	r3, [r7, #96]	; 0x60
 8004724:	2300      	movs	r3, #0
 8004726:	667b      	str	r3, [r7, #100]	; 0x64
 8004728:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800472c:	4622      	mov	r2, r4
 800472e:	462b      	mov	r3, r5
 8004730:	f04f 0000 	mov.w	r0, #0
 8004734:	f04f 0100 	mov.w	r1, #0
 8004738:	0159      	lsls	r1, r3, #5
 800473a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800473e:	0150      	lsls	r0, r2, #5
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4621      	mov	r1, r4
 8004746:	1a51      	subs	r1, r2, r1
 8004748:	61b9      	str	r1, [r7, #24]
 800474a:	4629      	mov	r1, r5
 800474c:	eb63 0301 	sbc.w	r3, r3, r1
 8004750:	61fb      	str	r3, [r7, #28]
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800475e:	4659      	mov	r1, fp
 8004760:	018b      	lsls	r3, r1, #6
 8004762:	4651      	mov	r1, sl
 8004764:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004768:	4651      	mov	r1, sl
 800476a:	018a      	lsls	r2, r1, #6
 800476c:	4651      	mov	r1, sl
 800476e:	ebb2 0801 	subs.w	r8, r2, r1
 8004772:	4659      	mov	r1, fp
 8004774:	eb63 0901 	sbc.w	r9, r3, r1
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004784:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004788:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800478c:	4690      	mov	r8, r2
 800478e:	4699      	mov	r9, r3
 8004790:	4623      	mov	r3, r4
 8004792:	eb18 0303 	adds.w	r3, r8, r3
 8004796:	613b      	str	r3, [r7, #16]
 8004798:	462b      	mov	r3, r5
 800479a:	eb49 0303 	adc.w	r3, r9, r3
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	f04f 0300 	mov.w	r3, #0
 80047a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80047ac:	4629      	mov	r1, r5
 80047ae:	024b      	lsls	r3, r1, #9
 80047b0:	4621      	mov	r1, r4
 80047b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047b6:	4621      	mov	r1, r4
 80047b8:	024a      	lsls	r2, r1, #9
 80047ba:	4610      	mov	r0, r2
 80047bc:	4619      	mov	r1, r3
 80047be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047c2:	2200      	movs	r2, #0
 80047c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80047c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80047c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047cc:	f7fb fd70 	bl	80002b0 <__aeabi_uldivmod>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4613      	mov	r3, r2
 80047d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047da:	e065      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x420>
 80047dc:	40023800 	.word	0x40023800
 80047e0:	00f42400 	.word	0x00f42400
 80047e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e8:	4b3d      	ldr	r3, [pc, #244]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	099b      	lsrs	r3, r3, #6
 80047ee:	2200      	movs	r2, #0
 80047f0:	4618      	mov	r0, r3
 80047f2:	4611      	mov	r1, r2
 80047f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047f8:	653b      	str	r3, [r7, #80]	; 0x50
 80047fa:	2300      	movs	r3, #0
 80047fc:	657b      	str	r3, [r7, #84]	; 0x54
 80047fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004802:	4642      	mov	r2, r8
 8004804:	464b      	mov	r3, r9
 8004806:	f04f 0000 	mov.w	r0, #0
 800480a:	f04f 0100 	mov.w	r1, #0
 800480e:	0159      	lsls	r1, r3, #5
 8004810:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004814:	0150      	lsls	r0, r2, #5
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	4641      	mov	r1, r8
 800481c:	1a51      	subs	r1, r2, r1
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	4649      	mov	r1, r9
 8004822:	eb63 0301 	sbc.w	r3, r3, r1
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004834:	4659      	mov	r1, fp
 8004836:	018b      	lsls	r3, r1, #6
 8004838:	4651      	mov	r1, sl
 800483a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800483e:	4651      	mov	r1, sl
 8004840:	018a      	lsls	r2, r1, #6
 8004842:	4651      	mov	r1, sl
 8004844:	1a54      	subs	r4, r2, r1
 8004846:	4659      	mov	r1, fp
 8004848:	eb63 0501 	sbc.w	r5, r3, r1
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	00eb      	lsls	r3, r5, #3
 8004856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800485a:	00e2      	lsls	r2, r4, #3
 800485c:	4614      	mov	r4, r2
 800485e:	461d      	mov	r5, r3
 8004860:	4643      	mov	r3, r8
 8004862:	18e3      	adds	r3, r4, r3
 8004864:	603b      	str	r3, [r7, #0]
 8004866:	464b      	mov	r3, r9
 8004868:	eb45 0303 	adc.w	r3, r5, r3
 800486c:	607b      	str	r3, [r7, #4]
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800487a:	4629      	mov	r1, r5
 800487c:	028b      	lsls	r3, r1, #10
 800487e:	4621      	mov	r1, r4
 8004880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004884:	4621      	mov	r1, r4
 8004886:	028a      	lsls	r2, r1, #10
 8004888:	4610      	mov	r0, r2
 800488a:	4619      	mov	r1, r3
 800488c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004890:	2200      	movs	r2, #0
 8004892:	64bb      	str	r3, [r7, #72]	; 0x48
 8004894:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004896:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800489a:	f7fb fd09 	bl	80002b0 <__aeabi_uldivmod>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4613      	mov	r3, r2
 80048a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80048a8:	4b0d      	ldr	r3, [pc, #52]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	0f1b      	lsrs	r3, r3, #28
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80048b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80048be:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80048c6:	e003      	b.n	80048d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048c8:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80048ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80048ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	37b8      	adds	r7, #184	; 0xb8
 80048d8:	46bd      	mov	sp, r7
 80048da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048de:	bf00      	nop
 80048e0:	40023800 	.word	0x40023800
 80048e4:	00f42400 	.word	0x00f42400

080048e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e28d      	b.n	8004e16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 8083 	beq.w	8004a0e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004908:	4b94      	ldr	r3, [pc, #592]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 030c 	and.w	r3, r3, #12
 8004910:	2b04      	cmp	r3, #4
 8004912:	d019      	beq.n	8004948 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004914:	4b91      	ldr	r3, [pc, #580]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800491c:	2b08      	cmp	r3, #8
 800491e:	d106      	bne.n	800492e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004920:	4b8e      	ldr	r3, [pc, #568]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004928:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800492c:	d00c      	beq.n	8004948 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800492e:	4b8b      	ldr	r3, [pc, #556]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004936:	2b0c      	cmp	r3, #12
 8004938:	d112      	bne.n	8004960 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800493a:	4b88      	ldr	r3, [pc, #544]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004946:	d10b      	bne.n	8004960 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004948:	4b84      	ldr	r3, [pc, #528]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d05b      	beq.n	8004a0c <HAL_RCC_OscConfig+0x124>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d157      	bne.n	8004a0c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e25a      	b.n	8004e16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004968:	d106      	bne.n	8004978 <HAL_RCC_OscConfig+0x90>
 800496a:	4b7c      	ldr	r3, [pc, #496]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a7b      	ldr	r2, [pc, #492]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	e01d      	b.n	80049b4 <HAL_RCC_OscConfig+0xcc>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004980:	d10c      	bne.n	800499c <HAL_RCC_OscConfig+0xb4>
 8004982:	4b76      	ldr	r3, [pc, #472]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a75      	ldr	r2, [pc, #468]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800498c:	6013      	str	r3, [r2, #0]
 800498e:	4b73      	ldr	r3, [pc, #460]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a72      	ldr	r2, [pc, #456]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	e00b      	b.n	80049b4 <HAL_RCC_OscConfig+0xcc>
 800499c:	4b6f      	ldr	r3, [pc, #444]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a6e      	ldr	r2, [pc, #440]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 80049a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	4b6c      	ldr	r3, [pc, #432]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a6b      	ldr	r2, [pc, #428]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 80049ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d013      	beq.n	80049e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049bc:	f7fe f9c2 	bl	8002d44 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049c4:	f7fe f9be 	bl	8002d44 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b64      	cmp	r3, #100	; 0x64
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e21f      	b.n	8004e16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d6:	4b61      	ldr	r3, [pc, #388]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0f0      	beq.n	80049c4 <HAL_RCC_OscConfig+0xdc>
 80049e2:	e014      	b.n	8004a0e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e4:	f7fe f9ae 	bl	8002d44 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049ec:	f7fe f9aa 	bl	8002d44 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b64      	cmp	r3, #100	; 0x64
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e20b      	b.n	8004e16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049fe:	4b57      	ldr	r3, [pc, #348]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1f0      	bne.n	80049ec <HAL_RCC_OscConfig+0x104>
 8004a0a:	e000      	b.n	8004a0e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d06f      	beq.n	8004afa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a1a:	4b50      	ldr	r3, [pc, #320]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 030c 	and.w	r3, r3, #12
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d017      	beq.n	8004a56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a26:	4b4d      	ldr	r3, [pc, #308]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a2e:	2b08      	cmp	r3, #8
 8004a30:	d105      	bne.n	8004a3e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a32:	4b4a      	ldr	r3, [pc, #296]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00b      	beq.n	8004a56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a3e:	4b47      	ldr	r3, [pc, #284]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a46:	2b0c      	cmp	r3, #12
 8004a48:	d11c      	bne.n	8004a84 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a4a:	4b44      	ldr	r3, [pc, #272]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d116      	bne.n	8004a84 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a56:	4b41      	ldr	r3, [pc, #260]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d005      	beq.n	8004a6e <HAL_RCC_OscConfig+0x186>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d001      	beq.n	8004a6e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e1d3      	b.n	8004e16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a6e:	4b3b      	ldr	r3, [pc, #236]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	4937      	ldr	r1, [pc, #220]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a82:	e03a      	b.n	8004afa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d020      	beq.n	8004ace <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a8c:	4b34      	ldr	r3, [pc, #208]	; (8004b60 <HAL_RCC_OscConfig+0x278>)
 8004a8e:	2201      	movs	r2, #1
 8004a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a92:	f7fe f957 	bl	8002d44 <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a98:	e008      	b.n	8004aac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a9a:	f7fe f953 	bl	8002d44 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e1b4      	b.n	8004e16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aac:	4b2b      	ldr	r3, [pc, #172]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0f0      	beq.n	8004a9a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab8:	4b28      	ldr	r3, [pc, #160]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	4925      	ldr	r1, [pc, #148]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	600b      	str	r3, [r1, #0]
 8004acc:	e015      	b.n	8004afa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ace:	4b24      	ldr	r3, [pc, #144]	; (8004b60 <HAL_RCC_OscConfig+0x278>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad4:	f7fe f936 	bl	8002d44 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004adc:	f7fe f932 	bl	8002d44 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e193      	b.n	8004e16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aee:	4b1b      	ldr	r3, [pc, #108]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f0      	bne.n	8004adc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d036      	beq.n	8004b74 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d016      	beq.n	8004b3c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b0e:	4b15      	ldr	r3, [pc, #84]	; (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004b10:	2201      	movs	r2, #1
 8004b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b14:	f7fe f916 	bl	8002d44 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b1c:	f7fe f912 	bl	8002d44 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e173      	b.n	8004e16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b2e:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0f0      	beq.n	8004b1c <HAL_RCC_OscConfig+0x234>
 8004b3a:	e01b      	b.n	8004b74 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b3c:	4b09      	ldr	r3, [pc, #36]	; (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b42:	f7fe f8ff 	bl	8002d44 <HAL_GetTick>
 8004b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b48:	e00e      	b.n	8004b68 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b4a:	f7fe f8fb 	bl	8002d44 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d907      	bls.n	8004b68 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e15c      	b.n	8004e16 <HAL_RCC_OscConfig+0x52e>
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	42470000 	.word	0x42470000
 8004b64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b68:	4b8a      	ldr	r3, [pc, #552]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1ea      	bne.n	8004b4a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 8097 	beq.w	8004cb0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b82:	2300      	movs	r3, #0
 8004b84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b86:	4b83      	ldr	r3, [pc, #524]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10f      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b92:	2300      	movs	r3, #0
 8004b94:	60bb      	str	r3, [r7, #8]
 8004b96:	4b7f      	ldr	r3, [pc, #508]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	4a7e      	ldr	r2, [pc, #504]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ba2:	4b7c      	ldr	r3, [pc, #496]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004baa:	60bb      	str	r3, [r7, #8]
 8004bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb2:	4b79      	ldr	r3, [pc, #484]	; (8004d98 <HAL_RCC_OscConfig+0x4b0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d118      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bbe:	4b76      	ldr	r3, [pc, #472]	; (8004d98 <HAL_RCC_OscConfig+0x4b0>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a75      	ldr	r2, [pc, #468]	; (8004d98 <HAL_RCC_OscConfig+0x4b0>)
 8004bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bca:	f7fe f8bb 	bl	8002d44 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd2:	f7fe f8b7 	bl	8002d44 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e118      	b.n	8004e16 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be4:	4b6c      	ldr	r3, [pc, #432]	; (8004d98 <HAL_RCC_OscConfig+0x4b0>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0f0      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d106      	bne.n	8004c06 <HAL_RCC_OscConfig+0x31e>
 8004bf8:	4b66      	ldr	r3, [pc, #408]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfc:	4a65      	ldr	r2, [pc, #404]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004bfe:	f043 0301 	orr.w	r3, r3, #1
 8004c02:	6713      	str	r3, [r2, #112]	; 0x70
 8004c04:	e01c      	b.n	8004c40 <HAL_RCC_OscConfig+0x358>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	2b05      	cmp	r3, #5
 8004c0c:	d10c      	bne.n	8004c28 <HAL_RCC_OscConfig+0x340>
 8004c0e:	4b61      	ldr	r3, [pc, #388]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c12:	4a60      	ldr	r2, [pc, #384]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004c14:	f043 0304 	orr.w	r3, r3, #4
 8004c18:	6713      	str	r3, [r2, #112]	; 0x70
 8004c1a:	4b5e      	ldr	r3, [pc, #376]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1e:	4a5d      	ldr	r2, [pc, #372]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004c20:	f043 0301 	orr.w	r3, r3, #1
 8004c24:	6713      	str	r3, [r2, #112]	; 0x70
 8004c26:	e00b      	b.n	8004c40 <HAL_RCC_OscConfig+0x358>
 8004c28:	4b5a      	ldr	r3, [pc, #360]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2c:	4a59      	ldr	r2, [pc, #356]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004c2e:	f023 0301 	bic.w	r3, r3, #1
 8004c32:	6713      	str	r3, [r2, #112]	; 0x70
 8004c34:	4b57      	ldr	r3, [pc, #348]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c38:	4a56      	ldr	r2, [pc, #344]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004c3a:	f023 0304 	bic.w	r3, r3, #4
 8004c3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d015      	beq.n	8004c74 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c48:	f7fe f87c 	bl	8002d44 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c4e:	e00a      	b.n	8004c66 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c50:	f7fe f878 	bl	8002d44 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e0d7      	b.n	8004e16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c66:	4b4b      	ldr	r3, [pc, #300]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0ee      	beq.n	8004c50 <HAL_RCC_OscConfig+0x368>
 8004c72:	e014      	b.n	8004c9e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c74:	f7fe f866 	bl	8002d44 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c7a:	e00a      	b.n	8004c92 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c7c:	f7fe f862 	bl	8002d44 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e0c1      	b.n	8004e16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c92:	4b40      	ldr	r3, [pc, #256]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1ee      	bne.n	8004c7c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d105      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ca4:	4b3b      	ldr	r3, [pc, #236]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca8:	4a3a      	ldr	r2, [pc, #232]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 80ad 	beq.w	8004e14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cba:	4b36      	ldr	r3, [pc, #216]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f003 030c 	and.w	r3, r3, #12
 8004cc2:	2b08      	cmp	r3, #8
 8004cc4:	d060      	beq.n	8004d88 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d145      	bne.n	8004d5a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cce:	4b33      	ldr	r3, [pc, #204]	; (8004d9c <HAL_RCC_OscConfig+0x4b4>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fe f836 	bl	8002d44 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cdc:	f7fe f832 	bl	8002d44 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e093      	b.n	8004e16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cee:	4b29      	ldr	r3, [pc, #164]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f0      	bne.n	8004cdc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69da      	ldr	r2, [r3, #28]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	019b      	lsls	r3, r3, #6
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	085b      	lsrs	r3, r3, #1
 8004d12:	3b01      	subs	r3, #1
 8004d14:	041b      	lsls	r3, r3, #16
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	061b      	lsls	r3, r3, #24
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d24:	071b      	lsls	r3, r3, #28
 8004d26:	491b      	ldr	r1, [pc, #108]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d2c:	4b1b      	ldr	r3, [pc, #108]	; (8004d9c <HAL_RCC_OscConfig+0x4b4>)
 8004d2e:	2201      	movs	r2, #1
 8004d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d32:	f7fe f807 	bl	8002d44 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d3a:	f7fe f803 	bl	8002d44 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e064      	b.n	8004e16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d4c:	4b11      	ldr	r3, [pc, #68]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f0      	beq.n	8004d3a <HAL_RCC_OscConfig+0x452>
 8004d58:	e05c      	b.n	8004e14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d5a:	4b10      	ldr	r3, [pc, #64]	; (8004d9c <HAL_RCC_OscConfig+0x4b4>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d60:	f7fd fff0 	bl	8002d44 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d68:	f7fd ffec 	bl	8002d44 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e04d      	b.n	8004e16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d7a:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <HAL_RCC_OscConfig+0x4ac>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1f0      	bne.n	8004d68 <HAL_RCC_OscConfig+0x480>
 8004d86:	e045      	b.n	8004e14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d107      	bne.n	8004da0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e040      	b.n	8004e16 <HAL_RCC_OscConfig+0x52e>
 8004d94:	40023800 	.word	0x40023800
 8004d98:	40007000 	.word	0x40007000
 8004d9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004da0:	4b1f      	ldr	r3, [pc, #124]	; (8004e20 <HAL_RCC_OscConfig+0x538>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d030      	beq.n	8004e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d129      	bne.n	8004e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d122      	bne.n	8004e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d119      	bne.n	8004e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de6:	085b      	lsrs	r3, r3, #1
 8004de8:	3b01      	subs	r3, #1
 8004dea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d10f      	bne.n	8004e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d107      	bne.n	8004e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d001      	beq.n	8004e14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e000      	b.n	8004e16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40023800 	.word	0x40023800

08004e24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e041      	b.n	8004eba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fd fd40 	bl	80028d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	4619      	mov	r1, r3
 8004e62:	4610      	mov	r0, r2
 8004e64:	f000 fada 	bl	800541c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e041      	b.n	8004f58 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d106      	bne.n	8004eee <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f839 	bl	8004f60 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	3304      	adds	r3, #4
 8004efe:	4619      	mov	r1, r3
 8004f00:	4610      	mov	r0, r2
 8004f02:	f000 fa8b 	bl	800541c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d122      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d11b      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0202 	mvn.w	r2, #2
 8004fa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fa11 	bl	80053de <HAL_TIM_IC_CaptureCallback>
 8004fbc:	e005      	b.n	8004fca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fb fc98 	bl	80008f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 fa14 	bl	80053f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d122      	bne.n	8005024 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d11b      	bne.n	8005024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f06f 0204 	mvn.w	r2, #4
 8004ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f9e7 	bl	80053de <HAL_TIM_IC_CaptureCallback>
 8005010:	e005      	b.n	800501e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7fb fc6e 	bl	80008f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f9ea 	bl	80053f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b08      	cmp	r3, #8
 8005030:	d122      	bne.n	8005078 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b08      	cmp	r3, #8
 800503e:	d11b      	bne.n	8005078 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0208 	mvn.w	r2, #8
 8005048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2204      	movs	r2, #4
 800504e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f9bd 	bl	80053de <HAL_TIM_IC_CaptureCallback>
 8005064:	e005      	b.n	8005072 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7fb fc44 	bl	80008f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f9c0 	bl	80053f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	2b10      	cmp	r3, #16
 8005084:	d122      	bne.n	80050cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	2b10      	cmp	r3, #16
 8005092:	d11b      	bne.n	80050cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0210 	mvn.w	r2, #16
 800509c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2208      	movs	r2, #8
 80050a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f993 	bl	80053de <HAL_TIM_IC_CaptureCallback>
 80050b8:	e005      	b.n	80050c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fb fc1a 	bl	80008f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f996 	bl	80053f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d10e      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d107      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f06f 0201 	mvn.w	r2, #1
 80050f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f969 	bl	80053ca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005102:	2b80      	cmp	r3, #128	; 0x80
 8005104:	d10e      	bne.n	8005124 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005110:	2b80      	cmp	r3, #128	; 0x80
 8005112:	d107      	bne.n	8005124 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800511c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fcec 	bl	8005afc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512e:	2b40      	cmp	r3, #64	; 0x40
 8005130:	d10e      	bne.n	8005150 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513c:	2b40      	cmp	r3, #64	; 0x40
 800513e:	d107      	bne.n	8005150 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f95b 	bl	8005406 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f003 0320 	and.w	r3, r3, #32
 800515a:	2b20      	cmp	r3, #32
 800515c:	d10e      	bne.n	800517c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f003 0320 	and.w	r3, r3, #32
 8005168:	2b20      	cmp	r3, #32
 800516a:	d107      	bne.n	800517c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f06f 0220 	mvn.w	r2, #32
 8005174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fcb6 	bl	8005ae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800517c:	bf00      	nop
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005190:	2300      	movs	r3, #0
 8005192:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800519e:	2302      	movs	r3, #2
 80051a0:	e048      	b.n	8005234 <HAL_TIM_OC_ConfigChannel+0xb0>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b0c      	cmp	r3, #12
 80051ae:	d839      	bhi.n	8005224 <HAL_TIM_OC_ConfigChannel+0xa0>
 80051b0:	a201      	add	r2, pc, #4	; (adr r2, 80051b8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80051b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b6:	bf00      	nop
 80051b8:	080051ed 	.word	0x080051ed
 80051bc:	08005225 	.word	0x08005225
 80051c0:	08005225 	.word	0x08005225
 80051c4:	08005225 	.word	0x08005225
 80051c8:	080051fb 	.word	0x080051fb
 80051cc:	08005225 	.word	0x08005225
 80051d0:	08005225 	.word	0x08005225
 80051d4:	08005225 	.word	0x08005225
 80051d8:	08005209 	.word	0x08005209
 80051dc:	08005225 	.word	0x08005225
 80051e0:	08005225 	.word	0x08005225
 80051e4:	08005225 	.word	0x08005225
 80051e8:	08005217 	.word	0x08005217
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 f9b2 	bl	800555c <TIM_OC1_SetConfig>
      break;
 80051f8:	e017      	b.n	800522a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68b9      	ldr	r1, [r7, #8]
 8005200:	4618      	mov	r0, r3
 8005202:	f000 fa1b 	bl	800563c <TIM_OC2_SetConfig>
      break;
 8005206:	e010      	b.n	800522a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fa8a 	bl	8005728 <TIM_OC3_SetConfig>
      break;
 8005214:	e009      	b.n	800522a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68b9      	ldr	r1, [r7, #8]
 800521c:	4618      	mov	r0, r3
 800521e:	f000 faf7 	bl	8005810 <TIM_OC4_SetConfig>
      break;
 8005222:	e002      	b.n	800522a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	75fb      	strb	r3, [r7, #23]
      break;
 8005228:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005232:	7dfb      	ldrb	r3, [r7, #23]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_TIM_ConfigClockSource+0x1c>
 8005254:	2302      	movs	r3, #2
 8005256:	e0b4      	b.n	80053c2 <HAL_TIM_ConfigClockSource+0x186>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800527e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005290:	d03e      	beq.n	8005310 <HAL_TIM_ConfigClockSource+0xd4>
 8005292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005296:	f200 8087 	bhi.w	80053a8 <HAL_TIM_ConfigClockSource+0x16c>
 800529a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800529e:	f000 8086 	beq.w	80053ae <HAL_TIM_ConfigClockSource+0x172>
 80052a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a6:	d87f      	bhi.n	80053a8 <HAL_TIM_ConfigClockSource+0x16c>
 80052a8:	2b70      	cmp	r3, #112	; 0x70
 80052aa:	d01a      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0xa6>
 80052ac:	2b70      	cmp	r3, #112	; 0x70
 80052ae:	d87b      	bhi.n	80053a8 <HAL_TIM_ConfigClockSource+0x16c>
 80052b0:	2b60      	cmp	r3, #96	; 0x60
 80052b2:	d050      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x11a>
 80052b4:	2b60      	cmp	r3, #96	; 0x60
 80052b6:	d877      	bhi.n	80053a8 <HAL_TIM_ConfigClockSource+0x16c>
 80052b8:	2b50      	cmp	r3, #80	; 0x50
 80052ba:	d03c      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0xfa>
 80052bc:	2b50      	cmp	r3, #80	; 0x50
 80052be:	d873      	bhi.n	80053a8 <HAL_TIM_ConfigClockSource+0x16c>
 80052c0:	2b40      	cmp	r3, #64	; 0x40
 80052c2:	d058      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x13a>
 80052c4:	2b40      	cmp	r3, #64	; 0x40
 80052c6:	d86f      	bhi.n	80053a8 <HAL_TIM_ConfigClockSource+0x16c>
 80052c8:	2b30      	cmp	r3, #48	; 0x30
 80052ca:	d064      	beq.n	8005396 <HAL_TIM_ConfigClockSource+0x15a>
 80052cc:	2b30      	cmp	r3, #48	; 0x30
 80052ce:	d86b      	bhi.n	80053a8 <HAL_TIM_ConfigClockSource+0x16c>
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	d060      	beq.n	8005396 <HAL_TIM_ConfigClockSource+0x15a>
 80052d4:	2b20      	cmp	r3, #32
 80052d6:	d867      	bhi.n	80053a8 <HAL_TIM_ConfigClockSource+0x16c>
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d05c      	beq.n	8005396 <HAL_TIM_ConfigClockSource+0x15a>
 80052dc:	2b10      	cmp	r3, #16
 80052de:	d05a      	beq.n	8005396 <HAL_TIM_ConfigClockSource+0x15a>
 80052e0:	e062      	b.n	80053a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	6899      	ldr	r1, [r3, #8]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f000 fb5d 	bl	80059b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005304:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	609a      	str	r2, [r3, #8]
      break;
 800530e:	e04f      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6818      	ldr	r0, [r3, #0]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	6899      	ldr	r1, [r3, #8]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f000 fb46 	bl	80059b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689a      	ldr	r2, [r3, #8]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005332:	609a      	str	r2, [r3, #8]
      break;
 8005334:	e03c      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	6859      	ldr	r1, [r3, #4]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	461a      	mov	r2, r3
 8005344:	f000 faba 	bl	80058bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2150      	movs	r1, #80	; 0x50
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fb13 	bl	800597a <TIM_ITRx_SetConfig>
      break;
 8005354:	e02c      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6818      	ldr	r0, [r3, #0]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	6859      	ldr	r1, [r3, #4]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	461a      	mov	r2, r3
 8005364:	f000 fad9 	bl	800591a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2160      	movs	r1, #96	; 0x60
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fb03 	bl	800597a <TIM_ITRx_SetConfig>
      break;
 8005374:	e01c      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	6859      	ldr	r1, [r3, #4]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	461a      	mov	r2, r3
 8005384:	f000 fa9a 	bl	80058bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2140      	movs	r1, #64	; 0x40
 800538e:	4618      	mov	r0, r3
 8005390:	f000 faf3 	bl	800597a <TIM_ITRx_SetConfig>
      break;
 8005394:	e00c      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4619      	mov	r1, r3
 80053a0:	4610      	mov	r0, r2
 80053a2:	f000 faea 	bl	800597a <TIM_ITRx_SetConfig>
      break;
 80053a6:	e003      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	73fb      	strb	r3, [r7, #15]
      break;
 80053ac:	e000      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80053ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053e6:	bf00      	nop
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
	...

0800541c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a40      	ldr	r2, [pc, #256]	; (8005530 <TIM_Base_SetConfig+0x114>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d013      	beq.n	800545c <TIM_Base_SetConfig+0x40>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543a:	d00f      	beq.n	800545c <TIM_Base_SetConfig+0x40>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a3d      	ldr	r2, [pc, #244]	; (8005534 <TIM_Base_SetConfig+0x118>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00b      	beq.n	800545c <TIM_Base_SetConfig+0x40>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a3c      	ldr	r2, [pc, #240]	; (8005538 <TIM_Base_SetConfig+0x11c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d007      	beq.n	800545c <TIM_Base_SetConfig+0x40>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a3b      	ldr	r2, [pc, #236]	; (800553c <TIM_Base_SetConfig+0x120>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d003      	beq.n	800545c <TIM_Base_SetConfig+0x40>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a3a      	ldr	r2, [pc, #232]	; (8005540 <TIM_Base_SetConfig+0x124>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d108      	bne.n	800546e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a2f      	ldr	r2, [pc, #188]	; (8005530 <TIM_Base_SetConfig+0x114>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d02b      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800547c:	d027      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a2c      	ldr	r2, [pc, #176]	; (8005534 <TIM_Base_SetConfig+0x118>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d023      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a2b      	ldr	r2, [pc, #172]	; (8005538 <TIM_Base_SetConfig+0x11c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d01f      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a2a      	ldr	r2, [pc, #168]	; (800553c <TIM_Base_SetConfig+0x120>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d01b      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a29      	ldr	r2, [pc, #164]	; (8005540 <TIM_Base_SetConfig+0x124>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d017      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a28      	ldr	r2, [pc, #160]	; (8005544 <TIM_Base_SetConfig+0x128>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d013      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a27      	ldr	r2, [pc, #156]	; (8005548 <TIM_Base_SetConfig+0x12c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00f      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a26      	ldr	r2, [pc, #152]	; (800554c <TIM_Base_SetConfig+0x130>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00b      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a25      	ldr	r2, [pc, #148]	; (8005550 <TIM_Base_SetConfig+0x134>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d007      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a24      	ldr	r2, [pc, #144]	; (8005554 <TIM_Base_SetConfig+0x138>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d003      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a23      	ldr	r2, [pc, #140]	; (8005558 <TIM_Base_SetConfig+0x13c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d108      	bne.n	80054e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a0a      	ldr	r2, [pc, #40]	; (8005530 <TIM_Base_SetConfig+0x114>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d003      	beq.n	8005514 <TIM_Base_SetConfig+0xf8>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a0c      	ldr	r2, [pc, #48]	; (8005540 <TIM_Base_SetConfig+0x124>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d103      	bne.n	800551c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	691a      	ldr	r2, [r3, #16]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	615a      	str	r2, [r3, #20]
}
 8005522:	bf00      	nop
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40010000 	.word	0x40010000
 8005534:	40000400 	.word	0x40000400
 8005538:	40000800 	.word	0x40000800
 800553c:	40000c00 	.word	0x40000c00
 8005540:	40010400 	.word	0x40010400
 8005544:	40014000 	.word	0x40014000
 8005548:	40014400 	.word	0x40014400
 800554c:	40014800 	.word	0x40014800
 8005550:	40001800 	.word	0x40001800
 8005554:	40001c00 	.word	0x40001c00
 8005558:	40002000 	.word	0x40002000

0800555c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	f023 0201 	bic.w	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0303 	bic.w	r3, r3, #3
 8005592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f023 0302 	bic.w	r3, r3, #2
 80055a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a20      	ldr	r2, [pc, #128]	; (8005634 <TIM_OC1_SetConfig+0xd8>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d003      	beq.n	80055c0 <TIM_OC1_SetConfig+0x64>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a1f      	ldr	r2, [pc, #124]	; (8005638 <TIM_OC1_SetConfig+0xdc>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d10c      	bne.n	80055da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f023 0308 	bic.w	r3, r3, #8
 80055c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f023 0304 	bic.w	r3, r3, #4
 80055d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a15      	ldr	r2, [pc, #84]	; (8005634 <TIM_OC1_SetConfig+0xd8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d003      	beq.n	80055ea <TIM_OC1_SetConfig+0x8e>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a14      	ldr	r2, [pc, #80]	; (8005638 <TIM_OC1_SetConfig+0xdc>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d111      	bne.n	800560e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4313      	orrs	r3, r2
 800560c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	621a      	str	r2, [r3, #32]
}
 8005628:	bf00      	nop
 800562a:	371c      	adds	r7, #28
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	40010000 	.word	0x40010000
 8005638:	40010400 	.word	0x40010400

0800563c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	f023 0210 	bic.w	r2, r3, #16
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800566a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f023 0320 	bic.w	r3, r3, #32
 8005686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a22      	ldr	r2, [pc, #136]	; (8005720 <TIM_OC2_SetConfig+0xe4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <TIM_OC2_SetConfig+0x68>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a21      	ldr	r2, [pc, #132]	; (8005724 <TIM_OC2_SetConfig+0xe8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d10d      	bne.n	80056c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a17      	ldr	r2, [pc, #92]	; (8005720 <TIM_OC2_SetConfig+0xe4>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d003      	beq.n	80056d0 <TIM_OC2_SetConfig+0x94>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a16      	ldr	r2, [pc, #88]	; (8005724 <TIM_OC2_SetConfig+0xe8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d113      	bne.n	80056f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	621a      	str	r2, [r3, #32]
}
 8005712:	bf00      	nop
 8005714:	371c      	adds	r7, #28
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	40010000 	.word	0x40010000
 8005724:	40010400 	.word	0x40010400

08005728 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005728:	b480      	push	{r7}
 800572a:	b087      	sub	sp, #28
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0303 	bic.w	r3, r3, #3
 800575e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	021b      	lsls	r3, r3, #8
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a21      	ldr	r2, [pc, #132]	; (8005808 <TIM_OC3_SetConfig+0xe0>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d003      	beq.n	800578e <TIM_OC3_SetConfig+0x66>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a20      	ldr	r2, [pc, #128]	; (800580c <TIM_OC3_SetConfig+0xe4>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d10d      	bne.n	80057aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	021b      	lsls	r3, r3, #8
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a16      	ldr	r2, [pc, #88]	; (8005808 <TIM_OC3_SetConfig+0xe0>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d003      	beq.n	80057ba <TIM_OC3_SetConfig+0x92>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a15      	ldr	r2, [pc, #84]	; (800580c <TIM_OC3_SetConfig+0xe4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d113      	bne.n	80057e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	4313      	orrs	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	621a      	str	r2, [r3, #32]
}
 80057fc:	bf00      	nop
 80057fe:	371c      	adds	r7, #28
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	40010000 	.word	0x40010000
 800580c:	40010400 	.word	0x40010400

08005810 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800583e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	021b      	lsls	r3, r3, #8
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800585a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	031b      	lsls	r3, r3, #12
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a12      	ldr	r2, [pc, #72]	; (80058b4 <TIM_OC4_SetConfig+0xa4>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d003      	beq.n	8005878 <TIM_OC4_SetConfig+0x68>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a11      	ldr	r2, [pc, #68]	; (80058b8 <TIM_OC4_SetConfig+0xa8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d109      	bne.n	800588c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800587e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	019b      	lsls	r3, r3, #6
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	621a      	str	r2, [r3, #32]
}
 80058a6:	bf00      	nop
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40010000 	.word	0x40010000
 80058b8:	40010400 	.word	0x40010400

080058bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	f023 0201 	bic.w	r2, r3, #1
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f023 030a 	bic.w	r3, r3, #10
 80058f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	621a      	str	r2, [r3, #32]
}
 800590e:	bf00      	nop
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800591a:	b480      	push	{r7}
 800591c:	b087      	sub	sp, #28
 800591e:	af00      	add	r7, sp, #0
 8005920:	60f8      	str	r0, [r7, #12]
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	f023 0210 	bic.w	r2, r3, #16
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005944:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	031b      	lsls	r3, r3, #12
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	4313      	orrs	r3, r2
 800594e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005956:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	011b      	lsls	r3, r3, #4
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	621a      	str	r2, [r3, #32]
}
 800596e:	bf00      	nop
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800597a:	b480      	push	{r7}
 800597c:	b085      	sub	sp, #20
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005990:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	f043 0307 	orr.w	r3, r3, #7
 800599c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	609a      	str	r2, [r3, #8]
}
 80059a4:	bf00      	nop
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	021a      	lsls	r2, r3, #8
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	609a      	str	r2, [r3, #8]
}
 80059e4:	bf00      	nop
 80059e6:	371c      	adds	r7, #28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d101      	bne.n	8005a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a04:	2302      	movs	r3, #2
 8005a06:	e05a      	b.n	8005abe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a21      	ldr	r2, [pc, #132]	; (8005acc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d022      	beq.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a54:	d01d      	beq.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a1d      	ldr	r2, [pc, #116]	; (8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d018      	beq.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a1b      	ldr	r2, [pc, #108]	; (8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d013      	beq.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a1a      	ldr	r2, [pc, #104]	; (8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d00e      	beq.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a18      	ldr	r2, [pc, #96]	; (8005adc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d009      	beq.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a17      	ldr	r2, [pc, #92]	; (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d004      	beq.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a15      	ldr	r2, [pc, #84]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d10c      	bne.n	8005aac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	40010000 	.word	0x40010000
 8005ad0:	40000400 	.word	0x40000400
 8005ad4:	40000800 	.word	0x40000800
 8005ad8:	40000c00 	.word	0x40000c00
 8005adc:	40010400 	.word	0x40010400
 8005ae0:	40014000 	.word	0x40014000
 8005ae4:	40001800 	.word	0x40001800

08005ae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e03f      	b.n	8005ba2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fc fef2 	bl	8002920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2224      	movs	r2, #36	; 0x24
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 ff3d 	bl	80069d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	691a      	ldr	r2, [r3, #16]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695a      	ldr	r2, [r3, #20]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b082      	sub	sp, #8
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e047      	b.n	8005c4c <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d106      	bne.n	8005bd6 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7fc fea5 	bl	8002920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2224      	movs	r2, #36	; 0x24
 8005bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fef0 	bl	80069d4 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691a      	ldr	r2, [r3, #16]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c02:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	695a      	ldr	r2, [r3, #20]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8005c12:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695a      	ldr	r2, [r3, #20]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0208 	orr.w	r2, r2, #8
 8005c22:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c32:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b08a      	sub	sp, #40	; 0x28
 8005c58:	af02      	add	r7, sp, #8
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	603b      	str	r3, [r7, #0]
 8005c60:	4613      	mov	r3, r2
 8005c62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d17c      	bne.n	8005d6e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <HAL_UART_Transmit+0x2c>
 8005c7a:	88fb      	ldrh	r3, [r7, #6]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e075      	b.n	8005d70 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d101      	bne.n	8005c92 <HAL_UART_Transmit+0x3e>
 8005c8e:	2302      	movs	r3, #2
 8005c90:	e06e      	b.n	8005d70 <HAL_UART_Transmit+0x11c>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2221      	movs	r2, #33	; 0x21
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ca8:	f7fd f84c 	bl	8002d44 <HAL_GetTick>
 8005cac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	88fa      	ldrh	r2, [r7, #6]
 8005cb2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	88fa      	ldrh	r2, [r7, #6]
 8005cb8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc2:	d108      	bne.n	8005cd6 <HAL_UART_Transmit+0x82>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d104      	bne.n	8005cd6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	61bb      	str	r3, [r7, #24]
 8005cd4:	e003      	b.n	8005cde <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ce6:	e02a      	b.n	8005d3e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	2180      	movs	r1, #128	; 0x80
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 fc28 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e036      	b.n	8005d70 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10b      	bne.n	8005d20 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d16:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	3302      	adds	r3, #2
 8005d1c:	61bb      	str	r3, [r7, #24]
 8005d1e:	e007      	b.n	8005d30 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	781a      	ldrb	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	3b01      	subs	r3, #1
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1cf      	bne.n	8005ce8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	2140      	movs	r1, #64	; 0x40
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 fbf8 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e006      	b.n	8005d70 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e000      	b.n	8005d70 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005d6e:	2302      	movs	r3, #2
  }
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3720      	adds	r7, #32
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08a      	sub	sp, #40	; 0x28
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	603b      	str	r3, [r7, #0]
 8005d84:	4613      	mov	r3, r2
 8005d86:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b20      	cmp	r3, #32
 8005d96:	f040 808c 	bne.w	8005eb2 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d002      	beq.n	8005da6 <HAL_UART_Receive+0x2e>
 8005da0:	88fb      	ldrh	r3, [r7, #6]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e084      	b.n	8005eb4 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <HAL_UART_Receive+0x40>
 8005db4:	2302      	movs	r3, #2
 8005db6:	e07d      	b.n	8005eb4 <HAL_UART_Receive+0x13c>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2222      	movs	r2, #34	; 0x22
 8005dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dd4:	f7fc ffb6 	bl	8002d44 <HAL_GetTick>
 8005dd8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	88fa      	ldrh	r2, [r7, #6]
 8005dde:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	88fa      	ldrh	r2, [r7, #6]
 8005de4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dee:	d108      	bne.n	8005e02 <HAL_UART_Receive+0x8a>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d104      	bne.n	8005e02 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	61bb      	str	r3, [r7, #24]
 8005e00:	e003      	b.n	8005e0a <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e06:	2300      	movs	r3, #0
 8005e08:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005e12:	e043      	b.n	8005e9c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	2120      	movs	r1, #32
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 fb92 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d001      	beq.n	8005e2e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e042      	b.n	8005eb4 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10c      	bne.n	8005e4e <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	3302      	adds	r3, #2
 8005e4a:	61bb      	str	r3, [r7, #24]
 8005e4c:	e01f      	b.n	8005e8e <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e56:	d007      	beq.n	8005e68 <HAL_UART_Receive+0xf0>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10a      	bne.n	8005e76 <HAL_UART_Receive+0xfe>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d106      	bne.n	8005e76 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	701a      	strb	r2, [r3, #0]
 8005e74:	e008      	b.n	8005e88 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1b6      	bne.n	8005e14 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	e000      	b.n	8005eb4 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005eb2:	2302      	movs	r3, #2
  }
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3720      	adds	r7, #32
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b20      	cmp	r3, #32
 8005ed4:	d11d      	bne.n	8005f12 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <HAL_UART_Receive_IT+0x26>
 8005edc:	88fb      	ldrh	r3, [r7, #6]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e016      	b.n	8005f14 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d101      	bne.n	8005ef4 <HAL_UART_Receive_IT+0x38>
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	e00f      	b.n	8005f14 <HAL_UART_Receive_IT+0x58>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f02:	88fb      	ldrh	r3, [r7, #6]
 8005f04:	461a      	mov	r2, r3
 8005f06:	68b9      	ldr	r1, [r7, #8]
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 fb8b 	bl	8006624 <UART_Start_Receive_IT>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	e000      	b.n	8005f14 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005f12:	2302      	movs	r3, #2
  }
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b0ba      	sub	sp, #232	; 0xe8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f52:	f003 030f 	and.w	r3, r3, #15
 8005f56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005f5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10f      	bne.n	8005f82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f66:	f003 0320 	and.w	r3, r3, #32
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d009      	beq.n	8005f82 <HAL_UART_IRQHandler+0x66>
 8005f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f72:	f003 0320 	and.w	r3, r3, #32
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fc6f 	bl	800685e <UART_Receive_IT>
      return;
 8005f80:	e256      	b.n	8006430 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 80de 	beq.w	8006148 <HAL_UART_IRQHandler+0x22c>
 8005f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d106      	bne.n	8005fa6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 80d1 	beq.w	8006148 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00b      	beq.n	8005fca <HAL_UART_IRQHandler+0xae>
 8005fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d005      	beq.n	8005fca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	f043 0201 	orr.w	r2, r3, #1
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fce:	f003 0304 	and.w	r3, r3, #4
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00b      	beq.n	8005fee <HAL_UART_IRQHandler+0xd2>
 8005fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d005      	beq.n	8005fee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe6:	f043 0202 	orr.w	r2, r3, #2
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00b      	beq.n	8006012 <HAL_UART_IRQHandler+0xf6>
 8005ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d005      	beq.n	8006012 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	f043 0204 	orr.w	r2, r3, #4
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006016:	f003 0308 	and.w	r3, r3, #8
 800601a:	2b00      	cmp	r3, #0
 800601c:	d011      	beq.n	8006042 <HAL_UART_IRQHandler+0x126>
 800601e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006022:	f003 0320 	and.w	r3, r3, #32
 8006026:	2b00      	cmp	r3, #0
 8006028:	d105      	bne.n	8006036 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800602a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d005      	beq.n	8006042 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603a:	f043 0208 	orr.w	r2, r3, #8
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 81ed 	beq.w	8006426 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800604c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b00      	cmp	r3, #0
 8006056:	d008      	beq.n	800606a <HAL_UART_IRQHandler+0x14e>
 8006058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800605c:	f003 0320 	and.w	r3, r3, #32
 8006060:	2b00      	cmp	r3, #0
 8006062:	d002      	beq.n	800606a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fbfa 	bl	800685e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006074:	2b40      	cmp	r3, #64	; 0x40
 8006076:	bf0c      	ite	eq
 8006078:	2301      	moveq	r3, #1
 800607a:	2300      	movne	r3, #0
 800607c:	b2db      	uxtb	r3, r3
 800607e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b00      	cmp	r3, #0
 800608c:	d103      	bne.n	8006096 <HAL_UART_IRQHandler+0x17a>
 800608e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006092:	2b00      	cmp	r3, #0
 8006094:	d04f      	beq.n	8006136 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fb02 	bl	80066a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a6:	2b40      	cmp	r3, #64	; 0x40
 80060a8:	d141      	bne.n	800612e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3314      	adds	r3, #20
 80060b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80060c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3314      	adds	r3, #20
 80060d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80060d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80060da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80060e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80060ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1d9      	bne.n	80060aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d013      	beq.n	8006126 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006102:	4a7d      	ldr	r2, [pc, #500]	; (80062f8 <HAL_UART_IRQHandler+0x3dc>)
 8006104:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610a:	4618      	mov	r0, r3
 800610c:	f7fd fea1 	bl	8003e52 <HAL_DMA_Abort_IT>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d016      	beq.n	8006144 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006120:	4610      	mov	r0, r2
 8006122:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006124:	e00e      	b.n	8006144 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f990 	bl	800644c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800612c:	e00a      	b.n	8006144 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f98c 	bl	800644c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006134:	e006      	b.n	8006144 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f988 	bl	800644c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006142:	e170      	b.n	8006426 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006144:	bf00      	nop
    return;
 8006146:	e16e      	b.n	8006426 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614c:	2b01      	cmp	r3, #1
 800614e:	f040 814a 	bne.w	80063e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006156:	f003 0310 	and.w	r3, r3, #16
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 8143 	beq.w	80063e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006164:	f003 0310 	and.w	r3, r3, #16
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 813c 	beq.w	80063e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800616e:	2300      	movs	r3, #0
 8006170:	60bb      	str	r3, [r7, #8]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	60bb      	str	r3, [r7, #8]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	60bb      	str	r3, [r7, #8]
 8006182:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618e:	2b40      	cmp	r3, #64	; 0x40
 8006190:	f040 80b4 	bne.w	80062fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 8140 	beq.w	800642a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061b2:	429a      	cmp	r2, r3
 80061b4:	f080 8139 	bcs.w	800642a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ca:	f000 8088 	beq.w	80062de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	330c      	adds	r3, #12
 80061d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061dc:	e853 3f00 	ldrex	r3, [r3]
 80061e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80061e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	330c      	adds	r3, #12
 80061f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80061fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006202:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006206:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006212:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1d9      	bne.n	80061ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3314      	adds	r3, #20
 8006220:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006224:	e853 3f00 	ldrex	r3, [r3]
 8006228:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800622a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800622c:	f023 0301 	bic.w	r3, r3, #1
 8006230:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3314      	adds	r3, #20
 800623a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800623e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006242:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006244:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006246:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800624a:	e841 2300 	strex	r3, r2, [r1]
 800624e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1e1      	bne.n	800621a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3314      	adds	r3, #20
 800625c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006260:	e853 3f00 	ldrex	r3, [r3]
 8006264:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800626c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3314      	adds	r3, #20
 8006276:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800627a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800627c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006280:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006282:	e841 2300 	strex	r3, r2, [r1]
 8006286:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1e3      	bne.n	8006256 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2220      	movs	r2, #32
 8006292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	330c      	adds	r3, #12
 80062a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062a6:	e853 3f00 	ldrex	r3, [r3]
 80062aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ae:	f023 0310 	bic.w	r3, r3, #16
 80062b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	330c      	adds	r3, #12
 80062bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80062c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80062c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062c8:	e841 2300 	strex	r3, r2, [r1]
 80062cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80062ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1e3      	bne.n	800629c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d8:	4618      	mov	r0, r3
 80062da:	f7fd fd4a 	bl	8003d72 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	4619      	mov	r1, r3
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f8b6 	bl	8006460 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062f4:	e099      	b.n	800642a <HAL_UART_IRQHandler+0x50e>
 80062f6:	bf00      	nop
 80062f8:	08006767 	.word	0x08006767
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006304:	b29b      	uxth	r3, r3
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 808b 	beq.w	800642e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006318:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 8086 	beq.w	800642e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	330c      	adds	r3, #12
 8006328:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006334:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006338:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	330c      	adds	r3, #12
 8006342:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006346:	647a      	str	r2, [r7, #68]	; 0x44
 8006348:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800634c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e3      	bne.n	8006322 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3314      	adds	r3, #20
 8006360:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	623b      	str	r3, [r7, #32]
   return(result);
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	f023 0301 	bic.w	r3, r3, #1
 8006370:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3314      	adds	r3, #20
 800637a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800637e:	633a      	str	r2, [r7, #48]	; 0x30
 8006380:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e3      	bne.n	800635a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2220      	movs	r2, #32
 8006396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	330c      	adds	r3, #12
 80063a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	e853 3f00 	ldrex	r3, [r3]
 80063ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0310 	bic.w	r3, r3, #16
 80063b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	330c      	adds	r3, #12
 80063c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80063c4:	61fa      	str	r2, [r7, #28]
 80063c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c8:	69b9      	ldr	r1, [r7, #24]
 80063ca:	69fa      	ldr	r2, [r7, #28]
 80063cc:	e841 2300 	strex	r3, r2, [r1]
 80063d0:	617b      	str	r3, [r7, #20]
   return(result);
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e3      	bne.n	80063a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063dc:	4619      	mov	r1, r3
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f83e 	bl	8006460 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063e4:	e023      	b.n	800642e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d009      	beq.n	8006406 <HAL_UART_IRQHandler+0x4ea>
 80063f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f9c5 	bl	800678e <UART_Transmit_IT>
    return;
 8006404:	e014      	b.n	8006430 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800640a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00e      	beq.n	8006430 <HAL_UART_IRQHandler+0x514>
 8006412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641a:	2b00      	cmp	r3, #0
 800641c:	d008      	beq.n	8006430 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fa05 	bl	800682e <UART_EndTransmit_IT>
    return;
 8006424:	e004      	b.n	8006430 <HAL_UART_IRQHandler+0x514>
    return;
 8006426:	bf00      	nop
 8006428:	e002      	b.n	8006430 <HAL_UART_IRQHandler+0x514>
      return;
 800642a:	bf00      	nop
 800642c:	e000      	b.n	8006430 <HAL_UART_IRQHandler+0x514>
      return;
 800642e:	bf00      	nop
  }
}
 8006430:	37e8      	adds	r7, #232	; 0xe8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop

08006438 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8006480:	2300      	movs	r3, #0
 8006482:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800648a:	2b01      	cmp	r3, #1
 800648c:	d101      	bne.n	8006492 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 800648e:	2302      	movs	r3, #2
 8006490:	e020      	b.n	80064d4 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2224      	movs	r2, #36	; 0x24
 800649e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f023 030c 	bic.w	r3, r3, #12
 80064b0:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f043 0308 	orr.w	r3, r3, #8
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3714      	adds	r7, #20
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d101      	bne.n	80064fa <HAL_HalfDuplex_EnableReceiver+0x1a>
 80064f6:	2302      	movs	r3, #2
 80064f8:	e020      	b.n	800653c <HAL_HalfDuplex_EnableReceiver+0x5c>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2224      	movs	r2, #36	; 0x24
 8006506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f023 030c 	bic.w	r3, r3, #12
 8006518:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f043 0304 	orr.w	r3, r3, #4
 8006520:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2220      	movs	r2, #32
 800652e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b090      	sub	sp, #64	; 0x40
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	603b      	str	r3, [r7, #0]
 8006554:	4613      	mov	r3, r2
 8006556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006558:	e050      	b.n	80065fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800655a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800655c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006560:	d04c      	beq.n	80065fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006564:	2b00      	cmp	r3, #0
 8006566:	d007      	beq.n	8006578 <UART_WaitOnFlagUntilTimeout+0x30>
 8006568:	f7fc fbec 	bl	8002d44 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006574:	429a      	cmp	r2, r3
 8006576:	d241      	bcs.n	80065fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	330c      	adds	r3, #12
 800657e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800658e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	330c      	adds	r3, #12
 8006596:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006598:	637a      	str	r2, [r7, #52]	; 0x34
 800659a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800659e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065a0:	e841 2300 	strex	r3, r2, [r1]
 80065a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e5      	bne.n	8006578 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3314      	adds	r3, #20
 80065b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	e853 3f00 	ldrex	r3, [r3]
 80065ba:	613b      	str	r3, [r7, #16]
   return(result);
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f023 0301 	bic.w	r3, r3, #1
 80065c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3314      	adds	r3, #20
 80065ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065cc:	623a      	str	r2, [r7, #32]
 80065ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d0:	69f9      	ldr	r1, [r7, #28]
 80065d2:	6a3a      	ldr	r2, [r7, #32]
 80065d4:	e841 2300 	strex	r3, r2, [r1]
 80065d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1e5      	bne.n	80065ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2220      	movs	r2, #32
 80065ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e00f      	b.n	800661c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	4013      	ands	r3, r2
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	429a      	cmp	r2, r3
 800660a:	bf0c      	ite	eq
 800660c:	2301      	moveq	r3, #1
 800660e:	2300      	movne	r3, #0
 8006610:	b2db      	uxtb	r3, r3
 8006612:	461a      	mov	r2, r3
 8006614:	79fb      	ldrb	r3, [r7, #7]
 8006616:	429a      	cmp	r2, r3
 8006618:	d09f      	beq.n	800655a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3740      	adds	r7, #64	; 0x40
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	4613      	mov	r3, r2
 8006630:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	88fa      	ldrh	r2, [r7, #6]
 800663c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	88fa      	ldrh	r2, [r7, #6]
 8006642:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2222      	movs	r2, #34	; 0x22
 800664e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d007      	beq.n	8006672 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006670:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	695a      	ldr	r2, [r3, #20]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f042 0201 	orr.w	r2, r2, #1
 8006680:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68da      	ldr	r2, [r3, #12]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f042 0220 	orr.w	r2, r2, #32
 8006690:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b095      	sub	sp, #84	; 0x54
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	330c      	adds	r3, #12
 80066ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b2:	e853 3f00 	ldrex	r3, [r3]
 80066b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	330c      	adds	r3, #12
 80066c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066c8:	643a      	str	r2, [r7, #64]	; 0x40
 80066ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066d0:	e841 2300 	strex	r3, r2, [r1]
 80066d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1e5      	bne.n	80066a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3314      	adds	r3, #20
 80066e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	e853 3f00 	ldrex	r3, [r3]
 80066ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	f023 0301 	bic.w	r3, r3, #1
 80066f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3314      	adds	r3, #20
 80066fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006700:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006704:	e841 2300 	strex	r3, r2, [r1]
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e5      	bne.n	80066dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006714:	2b01      	cmp	r3, #1
 8006716:	d119      	bne.n	800674c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	330c      	adds	r3, #12
 800671e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	60bb      	str	r3, [r7, #8]
   return(result);
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f023 0310 	bic.w	r3, r3, #16
 800672e:	647b      	str	r3, [r7, #68]	; 0x44
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	330c      	adds	r3, #12
 8006736:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006738:	61ba      	str	r2, [r7, #24]
 800673a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673c:	6979      	ldr	r1, [r7, #20]
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	e841 2300 	strex	r3, r2, [r1]
 8006744:	613b      	str	r3, [r7, #16]
   return(result);
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1e5      	bne.n	8006718 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2220      	movs	r2, #32
 8006750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	631a      	str	r2, [r3, #48]	; 0x30
}
 800675a:	bf00      	nop
 800675c:	3754      	adds	r7, #84	; 0x54
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b084      	sub	sp, #16
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006772:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f7ff fe63 	bl	800644c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006786:	bf00      	nop
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800678e:	b480      	push	{r7}
 8006790:	b085      	sub	sp, #20
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b21      	cmp	r3, #33	; 0x21
 80067a0:	d13e      	bne.n	8006820 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067aa:	d114      	bne.n	80067d6 <UART_Transmit_IT+0x48>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d110      	bne.n	80067d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	881b      	ldrh	r3, [r3, #0]
 80067be:	461a      	mov	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	1c9a      	adds	r2, r3, #2
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	621a      	str	r2, [r3, #32]
 80067d4:	e008      	b.n	80067e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	1c59      	adds	r1, r3, #1
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	6211      	str	r1, [r2, #32]
 80067e0:	781a      	ldrb	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	3b01      	subs	r3, #1
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	4619      	mov	r1, r3
 80067f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10f      	bne.n	800681c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68da      	ldr	r2, [r3, #12]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800680a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800681a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800681c:	2300      	movs	r3, #0
 800681e:	e000      	b.n	8006822 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006820:	2302      	movs	r3, #2
  }
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b082      	sub	sp, #8
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68da      	ldr	r2, [r3, #12]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006844:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2220      	movs	r2, #32
 800684a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff fdf2 	bl	8006438 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b08c      	sub	sp, #48	; 0x30
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b22      	cmp	r3, #34	; 0x22
 8006870:	f040 80ab 	bne.w	80069ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800687c:	d117      	bne.n	80068ae <UART_Receive_IT+0x50>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d113      	bne.n	80068ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006886:	2300      	movs	r3, #0
 8006888:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	b29b      	uxth	r3, r3
 8006898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800689c:	b29a      	uxth	r2, r3
 800689e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a6:	1c9a      	adds	r2, r3, #2
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	629a      	str	r2, [r3, #40]	; 0x28
 80068ac:	e026      	b.n	80068fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80068b4:	2300      	movs	r3, #0
 80068b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c0:	d007      	beq.n	80068d2 <UART_Receive_IT+0x74>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10a      	bne.n	80068e0 <UART_Receive_IT+0x82>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d106      	bne.n	80068e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	b2da      	uxtb	r2, r3
 80068da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068dc:	701a      	strb	r2, [r3, #0]
 80068de:	e008      	b.n	80068f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006900:	b29b      	uxth	r3, r3
 8006902:	3b01      	subs	r3, #1
 8006904:	b29b      	uxth	r3, r3
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	4619      	mov	r1, r3
 800690a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800690c:	2b00      	cmp	r3, #0
 800690e:	d15a      	bne.n	80069c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68da      	ldr	r2, [r3, #12]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0220 	bic.w	r2, r2, #32
 800691e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68da      	ldr	r2, [r3, #12]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800692e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	695a      	ldr	r2, [r3, #20]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0201 	bic.w	r2, r2, #1
 800693e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2220      	movs	r2, #32
 8006944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694c:	2b01      	cmp	r3, #1
 800694e:	d135      	bne.n	80069bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	330c      	adds	r3, #12
 800695c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	613b      	str	r3, [r7, #16]
   return(result);
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f023 0310 	bic.w	r3, r3, #16
 800696c:	627b      	str	r3, [r7, #36]	; 0x24
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	330c      	adds	r3, #12
 8006974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006976:	623a      	str	r2, [r7, #32]
 8006978:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697a:	69f9      	ldr	r1, [r7, #28]
 800697c:	6a3a      	ldr	r2, [r7, #32]
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	61bb      	str	r3, [r7, #24]
   return(result);
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e5      	bne.n	8006956 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0310 	and.w	r3, r3, #16
 8006994:	2b10      	cmp	r3, #16
 8006996:	d10a      	bne.n	80069ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006998:	2300      	movs	r3, #0
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff fd53 	bl	8006460 <HAL_UARTEx_RxEventCallback>
 80069ba:	e002      	b.n	80069c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7fb fe87 	bl	80026d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	e002      	b.n	80069cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	e000      	b.n	80069cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80069ca:	2302      	movs	r3, #2
  }
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3730      	adds	r7, #48	; 0x30
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069d8:	b0c0      	sub	sp, #256	; 0x100
 80069da:	af00      	add	r7, sp, #0
 80069dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80069ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f0:	68d9      	ldr	r1, [r3, #12]
 80069f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	ea40 0301 	orr.w	r3, r0, r1
 80069fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	431a      	orrs	r2, r3
 8006a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a2c:	f021 010c 	bic.w	r1, r1, #12
 8006a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a3a:	430b      	orrs	r3, r1
 8006a3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a4e:	6999      	ldr	r1, [r3, #24]
 8006a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	ea40 0301 	orr.w	r3, r0, r1
 8006a5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	4b8f      	ldr	r3, [pc, #572]	; (8006ca0 <UART_SetConfig+0x2cc>)
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d005      	beq.n	8006a74 <UART_SetConfig+0xa0>
 8006a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	4b8d      	ldr	r3, [pc, #564]	; (8006ca4 <UART_SetConfig+0x2d0>)
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d104      	bne.n	8006a7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a74:	f7fd fcf4 	bl	8004460 <HAL_RCC_GetPCLK2Freq>
 8006a78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a7c:	e003      	b.n	8006a86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a7e:	f7fd fcdb 	bl	8004438 <HAL_RCC_GetPCLK1Freq>
 8006a82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a90:	f040 810c 	bne.w	8006cac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006aa2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006aa6:	4622      	mov	r2, r4
 8006aa8:	462b      	mov	r3, r5
 8006aaa:	1891      	adds	r1, r2, r2
 8006aac:	65b9      	str	r1, [r7, #88]	; 0x58
 8006aae:	415b      	adcs	r3, r3
 8006ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ab2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006ab6:	4621      	mov	r1, r4
 8006ab8:	eb12 0801 	adds.w	r8, r2, r1
 8006abc:	4629      	mov	r1, r5
 8006abe:	eb43 0901 	adc.w	r9, r3, r1
 8006ac2:	f04f 0200 	mov.w	r2, #0
 8006ac6:	f04f 0300 	mov.w	r3, #0
 8006aca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ace:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ad2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ad6:	4690      	mov	r8, r2
 8006ad8:	4699      	mov	r9, r3
 8006ada:	4623      	mov	r3, r4
 8006adc:	eb18 0303 	adds.w	r3, r8, r3
 8006ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ae4:	462b      	mov	r3, r5
 8006ae6:	eb49 0303 	adc.w	r3, r9, r3
 8006aea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006afa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006afe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006b02:	460b      	mov	r3, r1
 8006b04:	18db      	adds	r3, r3, r3
 8006b06:	653b      	str	r3, [r7, #80]	; 0x50
 8006b08:	4613      	mov	r3, r2
 8006b0a:	eb42 0303 	adc.w	r3, r2, r3
 8006b0e:	657b      	str	r3, [r7, #84]	; 0x54
 8006b10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006b14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006b18:	f7f9 fbca 	bl	80002b0 <__aeabi_uldivmod>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4b61      	ldr	r3, [pc, #388]	; (8006ca8 <UART_SetConfig+0x2d4>)
 8006b22:	fba3 2302 	umull	r2, r3, r3, r2
 8006b26:	095b      	lsrs	r3, r3, #5
 8006b28:	011c      	lsls	r4, r3, #4
 8006b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006b3c:	4642      	mov	r2, r8
 8006b3e:	464b      	mov	r3, r9
 8006b40:	1891      	adds	r1, r2, r2
 8006b42:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b44:	415b      	adcs	r3, r3
 8006b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b4c:	4641      	mov	r1, r8
 8006b4e:	eb12 0a01 	adds.w	sl, r2, r1
 8006b52:	4649      	mov	r1, r9
 8006b54:	eb43 0b01 	adc.w	fp, r3, r1
 8006b58:	f04f 0200 	mov.w	r2, #0
 8006b5c:	f04f 0300 	mov.w	r3, #0
 8006b60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b6c:	4692      	mov	sl, r2
 8006b6e:	469b      	mov	fp, r3
 8006b70:	4643      	mov	r3, r8
 8006b72:	eb1a 0303 	adds.w	r3, sl, r3
 8006b76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b7a:	464b      	mov	r3, r9
 8006b7c:	eb4b 0303 	adc.w	r3, fp, r3
 8006b80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	18db      	adds	r3, r3, r3
 8006b9c:	643b      	str	r3, [r7, #64]	; 0x40
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	eb42 0303 	adc.w	r3, r2, r3
 8006ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ba6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006baa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006bae:	f7f9 fb7f 	bl	80002b0 <__aeabi_uldivmod>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	4b3b      	ldr	r3, [pc, #236]	; (8006ca8 <UART_SetConfig+0x2d4>)
 8006bba:	fba3 2301 	umull	r2, r3, r3, r1
 8006bbe:	095b      	lsrs	r3, r3, #5
 8006bc0:	2264      	movs	r2, #100	; 0x64
 8006bc2:	fb02 f303 	mul.w	r3, r2, r3
 8006bc6:	1acb      	subs	r3, r1, r3
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006bce:	4b36      	ldr	r3, [pc, #216]	; (8006ca8 <UART_SetConfig+0x2d4>)
 8006bd0:	fba3 2302 	umull	r2, r3, r3, r2
 8006bd4:	095b      	lsrs	r3, r3, #5
 8006bd6:	005b      	lsls	r3, r3, #1
 8006bd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bdc:	441c      	add	r4, r3
 8006bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006be8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006bec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006bf0:	4642      	mov	r2, r8
 8006bf2:	464b      	mov	r3, r9
 8006bf4:	1891      	adds	r1, r2, r2
 8006bf6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006bf8:	415b      	adcs	r3, r3
 8006bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c00:	4641      	mov	r1, r8
 8006c02:	1851      	adds	r1, r2, r1
 8006c04:	6339      	str	r1, [r7, #48]	; 0x30
 8006c06:	4649      	mov	r1, r9
 8006c08:	414b      	adcs	r3, r1
 8006c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	f04f 0300 	mov.w	r3, #0
 8006c14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006c18:	4659      	mov	r1, fp
 8006c1a:	00cb      	lsls	r3, r1, #3
 8006c1c:	4651      	mov	r1, sl
 8006c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c22:	4651      	mov	r1, sl
 8006c24:	00ca      	lsls	r2, r1, #3
 8006c26:	4610      	mov	r0, r2
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	4642      	mov	r2, r8
 8006c2e:	189b      	adds	r3, r3, r2
 8006c30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c34:	464b      	mov	r3, r9
 8006c36:	460a      	mov	r2, r1
 8006c38:	eb42 0303 	adc.w	r3, r2, r3
 8006c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c54:	460b      	mov	r3, r1
 8006c56:	18db      	adds	r3, r3, r3
 8006c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	eb42 0303 	adc.w	r3, r2, r3
 8006c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c6a:	f7f9 fb21 	bl	80002b0 <__aeabi_uldivmod>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4b0d      	ldr	r3, [pc, #52]	; (8006ca8 <UART_SetConfig+0x2d4>)
 8006c74:	fba3 1302 	umull	r1, r3, r3, r2
 8006c78:	095b      	lsrs	r3, r3, #5
 8006c7a:	2164      	movs	r1, #100	; 0x64
 8006c7c:	fb01 f303 	mul.w	r3, r1, r3
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	00db      	lsls	r3, r3, #3
 8006c84:	3332      	adds	r3, #50	; 0x32
 8006c86:	4a08      	ldr	r2, [pc, #32]	; (8006ca8 <UART_SetConfig+0x2d4>)
 8006c88:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8c:	095b      	lsrs	r3, r3, #5
 8006c8e:	f003 0207 	and.w	r2, r3, #7
 8006c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4422      	add	r2, r4
 8006c9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c9c:	e105      	b.n	8006eaa <UART_SetConfig+0x4d6>
 8006c9e:	bf00      	nop
 8006ca0:	40011000 	.word	0x40011000
 8006ca4:	40011400 	.word	0x40011400
 8006ca8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006cb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006cba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006cbe:	4642      	mov	r2, r8
 8006cc0:	464b      	mov	r3, r9
 8006cc2:	1891      	adds	r1, r2, r2
 8006cc4:	6239      	str	r1, [r7, #32]
 8006cc6:	415b      	adcs	r3, r3
 8006cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8006cca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cce:	4641      	mov	r1, r8
 8006cd0:	1854      	adds	r4, r2, r1
 8006cd2:	4649      	mov	r1, r9
 8006cd4:	eb43 0501 	adc.w	r5, r3, r1
 8006cd8:	f04f 0200 	mov.w	r2, #0
 8006cdc:	f04f 0300 	mov.w	r3, #0
 8006ce0:	00eb      	lsls	r3, r5, #3
 8006ce2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ce6:	00e2      	lsls	r2, r4, #3
 8006ce8:	4614      	mov	r4, r2
 8006cea:	461d      	mov	r5, r3
 8006cec:	4643      	mov	r3, r8
 8006cee:	18e3      	adds	r3, r4, r3
 8006cf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cf4:	464b      	mov	r3, r9
 8006cf6:	eb45 0303 	adc.w	r3, r5, r3
 8006cfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d0e:	f04f 0200 	mov.w	r2, #0
 8006d12:	f04f 0300 	mov.w	r3, #0
 8006d16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006d1a:	4629      	mov	r1, r5
 8006d1c:	008b      	lsls	r3, r1, #2
 8006d1e:	4621      	mov	r1, r4
 8006d20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d24:	4621      	mov	r1, r4
 8006d26:	008a      	lsls	r2, r1, #2
 8006d28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006d2c:	f7f9 fac0 	bl	80002b0 <__aeabi_uldivmod>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4b60      	ldr	r3, [pc, #384]	; (8006eb8 <UART_SetConfig+0x4e4>)
 8006d36:	fba3 2302 	umull	r2, r3, r3, r2
 8006d3a:	095b      	lsrs	r3, r3, #5
 8006d3c:	011c      	lsls	r4, r3, #4
 8006d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d50:	4642      	mov	r2, r8
 8006d52:	464b      	mov	r3, r9
 8006d54:	1891      	adds	r1, r2, r2
 8006d56:	61b9      	str	r1, [r7, #24]
 8006d58:	415b      	adcs	r3, r3
 8006d5a:	61fb      	str	r3, [r7, #28]
 8006d5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d60:	4641      	mov	r1, r8
 8006d62:	1851      	adds	r1, r2, r1
 8006d64:	6139      	str	r1, [r7, #16]
 8006d66:	4649      	mov	r1, r9
 8006d68:	414b      	adcs	r3, r1
 8006d6a:	617b      	str	r3, [r7, #20]
 8006d6c:	f04f 0200 	mov.w	r2, #0
 8006d70:	f04f 0300 	mov.w	r3, #0
 8006d74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d78:	4659      	mov	r1, fp
 8006d7a:	00cb      	lsls	r3, r1, #3
 8006d7c:	4651      	mov	r1, sl
 8006d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d82:	4651      	mov	r1, sl
 8006d84:	00ca      	lsls	r2, r1, #3
 8006d86:	4610      	mov	r0, r2
 8006d88:	4619      	mov	r1, r3
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	4642      	mov	r2, r8
 8006d8e:	189b      	adds	r3, r3, r2
 8006d90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d94:	464b      	mov	r3, r9
 8006d96:	460a      	mov	r2, r1
 8006d98:	eb42 0303 	adc.w	r3, r2, r3
 8006d9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006daa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006dac:	f04f 0200 	mov.w	r2, #0
 8006db0:	f04f 0300 	mov.w	r3, #0
 8006db4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006db8:	4649      	mov	r1, r9
 8006dba:	008b      	lsls	r3, r1, #2
 8006dbc:	4641      	mov	r1, r8
 8006dbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dc2:	4641      	mov	r1, r8
 8006dc4:	008a      	lsls	r2, r1, #2
 8006dc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006dca:	f7f9 fa71 	bl	80002b0 <__aeabi_uldivmod>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4b39      	ldr	r3, [pc, #228]	; (8006eb8 <UART_SetConfig+0x4e4>)
 8006dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8006dd8:	095b      	lsrs	r3, r3, #5
 8006dda:	2164      	movs	r1, #100	; 0x64
 8006ddc:	fb01 f303 	mul.w	r3, r1, r3
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	011b      	lsls	r3, r3, #4
 8006de4:	3332      	adds	r3, #50	; 0x32
 8006de6:	4a34      	ldr	r2, [pc, #208]	; (8006eb8 <UART_SetConfig+0x4e4>)
 8006de8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dec:	095b      	lsrs	r3, r3, #5
 8006dee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006df2:	441c      	add	r4, r3
 8006df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006df8:	2200      	movs	r2, #0
 8006dfa:	673b      	str	r3, [r7, #112]	; 0x70
 8006dfc:	677a      	str	r2, [r7, #116]	; 0x74
 8006dfe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006e02:	4642      	mov	r2, r8
 8006e04:	464b      	mov	r3, r9
 8006e06:	1891      	adds	r1, r2, r2
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	415b      	adcs	r3, r3
 8006e0c:	60fb      	str	r3, [r7, #12]
 8006e0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e12:	4641      	mov	r1, r8
 8006e14:	1851      	adds	r1, r2, r1
 8006e16:	6039      	str	r1, [r7, #0]
 8006e18:	4649      	mov	r1, r9
 8006e1a:	414b      	adcs	r3, r1
 8006e1c:	607b      	str	r3, [r7, #4]
 8006e1e:	f04f 0200 	mov.w	r2, #0
 8006e22:	f04f 0300 	mov.w	r3, #0
 8006e26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e2a:	4659      	mov	r1, fp
 8006e2c:	00cb      	lsls	r3, r1, #3
 8006e2e:	4651      	mov	r1, sl
 8006e30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e34:	4651      	mov	r1, sl
 8006e36:	00ca      	lsls	r2, r1, #3
 8006e38:	4610      	mov	r0, r2
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	4642      	mov	r2, r8
 8006e40:	189b      	adds	r3, r3, r2
 8006e42:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e44:	464b      	mov	r3, r9
 8006e46:	460a      	mov	r2, r1
 8006e48:	eb42 0303 	adc.w	r3, r2, r3
 8006e4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	663b      	str	r3, [r7, #96]	; 0x60
 8006e58:	667a      	str	r2, [r7, #100]	; 0x64
 8006e5a:	f04f 0200 	mov.w	r2, #0
 8006e5e:	f04f 0300 	mov.w	r3, #0
 8006e62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e66:	4649      	mov	r1, r9
 8006e68:	008b      	lsls	r3, r1, #2
 8006e6a:	4641      	mov	r1, r8
 8006e6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e70:	4641      	mov	r1, r8
 8006e72:	008a      	lsls	r2, r1, #2
 8006e74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e78:	f7f9 fa1a 	bl	80002b0 <__aeabi_uldivmod>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4b0d      	ldr	r3, [pc, #52]	; (8006eb8 <UART_SetConfig+0x4e4>)
 8006e82:	fba3 1302 	umull	r1, r3, r3, r2
 8006e86:	095b      	lsrs	r3, r3, #5
 8006e88:	2164      	movs	r1, #100	; 0x64
 8006e8a:	fb01 f303 	mul.w	r3, r1, r3
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	011b      	lsls	r3, r3, #4
 8006e92:	3332      	adds	r3, #50	; 0x32
 8006e94:	4a08      	ldr	r2, [pc, #32]	; (8006eb8 <UART_SetConfig+0x4e4>)
 8006e96:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9a:	095b      	lsrs	r3, r3, #5
 8006e9c:	f003 020f 	and.w	r2, r3, #15
 8006ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4422      	add	r2, r4
 8006ea8:	609a      	str	r2, [r3, #8]
}
 8006eaa:	bf00      	nop
 8006eac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eb6:	bf00      	nop
 8006eb8:	51eb851f 	.word	0x51eb851f

08006ebc <tmc_CRC8>:
 *     uint8_t *data: A pointer to the data that will be CRC'd.
 *     uint32_t bytes: The length of the data buffer.
 *     uint8_t index: The index of the CRC table to be used.
 */
uint8_t tmc_CRC8(uint8_t *data, uint32_t bytes, uint8_t index)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	75fb      	strb	r3, [r7, #23]
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8006ece:	79fb      	ldrb	r3, [r7, #7]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d901      	bls.n	8006ed8 <tmc_CRC8+0x1c>
		return 0;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	e02c      	b.n	8006f32 <tmc_CRC8+0x76>

	table = &CRCTables[index].table[0];
 8006ed8:	79fa      	ldrb	r2, [r7, #7]
 8006eda:	4613      	mov	r3, r2
 8006edc:	01db      	lsls	r3, r3, #7
 8006ede:	4413      	add	r3, r2
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	4a16      	ldr	r2, [pc, #88]	; (8006f3c <tmc_CRC8+0x80>)
 8006ee4:	4413      	add	r3, r2
 8006ee6:	613b      	str	r3, [r7, #16]

	while(bytes--)
 8006ee8:	e00b      	b.n	8006f02 <tmc_CRC8+0x46>
		result = table[result ^ *data++];
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	1c5a      	adds	r2, r3, #1
 8006eee:	60fa      	str	r2, [r7, #12]
 8006ef0:	781a      	ldrb	r2, [r3, #0]
 8006ef2:	7dfb      	ldrb	r3, [r7, #23]
 8006ef4:	4053      	eors	r3, r2
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	461a      	mov	r2, r3
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	4413      	add	r3, r2
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	1e5a      	subs	r2, r3, #1
 8006f06:	60ba      	str	r2, [r7, #8]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1ee      	bne.n	8006eea <tmc_CRC8+0x2e>

	return (CRCTables[index].isReflected)? flipByte(result) : result;
 8006f0c:	79fa      	ldrb	r2, [r7, #7]
 8006f0e:	490b      	ldr	r1, [pc, #44]	; (8006f3c <tmc_CRC8+0x80>)
 8006f10:	4613      	mov	r3, r2
 8006f12:	01db      	lsls	r3, r3, #7
 8006f14:	4413      	add	r3, r2
 8006f16:	005b      	lsls	r3, r3, #1
 8006f18:	440b      	add	r3, r1
 8006f1a:	f203 1301 	addw	r3, r3, #257	; 0x101
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d005      	beq.n	8006f30 <tmc_CRC8+0x74>
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 f80a 	bl	8006f40 <flipByte>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	e000      	b.n	8006f32 <tmc_CRC8+0x76>
 8006f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	200004f8 	.word	0x200004f8

08006f40 <flipByte>:
	return CRCTables[index].isReflected;
}

// Helper functions
static uint8_t flipByte(uint8_t value)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	4603      	mov	r3, r0
 8006f48:	71fb      	strb	r3, [r7, #7]
	// swap odd and even bits
	value = ((value >> 1) & 0x55) | ((value & 0x55) << 1);
 8006f4a:	79fb      	ldrb	r3, [r7, #7]
 8006f4c:	085b      	lsrs	r3, r3, #1
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	b25b      	sxtb	r3, r3
 8006f52:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8006f56:	b25a      	sxtb	r2, r3
 8006f58:	79fb      	ldrb	r3, [r7, #7]
 8006f5a:	005b      	lsls	r3, r3, #1
 8006f5c:	b25b      	sxtb	r3, r3
 8006f5e:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8006f62:	b25b      	sxtb	r3, r3
 8006f64:	4313      	orrs	r3, r2
 8006f66:	b25b      	sxtb	r3, r3
 8006f68:	71fb      	strb	r3, [r7, #7]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33) | ((value & 0x33) << 2);
 8006f6a:	79fb      	ldrb	r3, [r7, #7]
 8006f6c:	089b      	lsrs	r3, r3, #2
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	b25b      	sxtb	r3, r3
 8006f72:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8006f76:	b25a      	sxtb	r2, r3
 8006f78:	79fb      	ldrb	r3, [r7, #7]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	b25b      	sxtb	r3, r3
 8006f7e:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8006f82:	b25b      	sxtb	r3, r3
 8006f84:	4313      	orrs	r3, r2
 8006f86:	b25b      	sxtb	r3, r3
 8006f88:	71fb      	strb	r3, [r7, #7]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F) | ((value & 0x0F) << 4);
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	091b      	lsrs	r3, r3, #4
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	b25a      	sxtb	r2, r3
 8006f92:	79fb      	ldrb	r3, [r7, #7]
 8006f94:	011b      	lsls	r3, r3, #4
 8006f96:	b25b      	sxtb	r3, r3
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	b25b      	sxtb	r3, r3
 8006f9c:	71fb      	strb	r3, [r7, #7]

	return value;
 8006f9e:	79fb      	ldrb	r3, [r7, #7]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <tmc2209_writeInt>:
// => CRC wrapper
extern uint8_t tmc2209_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2209_writeInt(TMC2209TypeDef *tmc2209, uint8_t address, int32_t value)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	607a      	str	r2, [r7, #4]
 8006fb8:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8];

	data[0] = 0x05;
 8006fba:	2305      	movs	r3, #5
 8006fbc:	743b      	strb	r3, [r7, #16]
	data[1] = tmc2209->slaveAddress;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8006fc4:	747b      	strb	r3, [r7, #17]
	data[2] = address | TMC_WRITE_BIT;
 8006fc6:	7afb      	ldrb	r3, [r7, #11]
 8006fc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	74bb      	strb	r3, [r7, #18]
	data[3] = (value >> 24) & 0xFF;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	0e1b      	lsrs	r3, r3, #24
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	74fb      	strb	r3, [r7, #19]
	data[4] = (value >> 16) & 0xFF;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	141b      	asrs	r3, r3, #16
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	753b      	strb	r3, [r7, #20]
	data[5] = (value >> 8 ) & 0xFF;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	121b      	asrs	r3, r3, #8
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	757b      	strb	r3, [r7, #21]
	data[6] = (value      ) & 0xFF;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	75bb      	strb	r3, [r7, #22]
	data[7] = tmc2209_CRC8(data, 7);
 8006fee:	f107 0310 	add.w	r3, r7, #16
 8006ff2:	2107      	movs	r1, #7
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7f9 fb05 	bl	8000604 <tmc2209_CRC8>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	75fb      	strb	r3, [r7, #23]

	tmc2209_readWriteArray(tmc2209->config->channel, &data[0], 8, 0);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8007006:	f107 0110 	add.w	r1, r7, #16
 800700a:	2300      	movs	r3, #0
 800700c:	2208      	movs	r2, #8
 800700e:	f7f9 fad1 	bl	80005b4 <tmc2209_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
 8007012:	7afb      	ldrb	r3, [r7, #11]
 8007014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007018:	72fb      	strb	r3, [r7, #11]
	tmc2209->config->shadowRegister[address] = value;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	7afb      	ldrb	r3, [r7, #11]
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	605a      	str	r2, [r3, #4]
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
 8007028:	7afb      	ldrb	r3, [r7, #11]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	4413      	add	r3, r2
 800702e:	f893 2204 	ldrb.w	r2, [r3, #516]	; 0x204
 8007032:	7afb      	ldrb	r3, [r7, #11]
 8007034:	f042 0208 	orr.w	r2, r2, #8
 8007038:	b2d1      	uxtb	r1, r2
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	4413      	add	r3, r2
 800703e:	460a      	mov	r2, r1
 8007040:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 8007044:	bf00      	nop
 8007046:	3718      	adds	r7, #24
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <tmc2209_readInt>:

int32_t tmc2209_readInt(TMC2209TypeDef *tmc2209, uint8_t address)
{
 800704c:	b590      	push	{r4, r7, lr}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	460b      	mov	r3, r1
 8007056:	70fb      	strb	r3, [r7, #3]
	uint8_t data[8] = { 0 };
 8007058:	2300      	movs	r3, #0
 800705a:	60bb      	str	r3, [r7, #8]
 800705c:	2300      	movs	r3, #0
 800705e:	60fb      	str	r3, [r7, #12]

	address = TMC_ADDRESS(address);
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007066:	70fb      	strb	r3, [r7, #3]

	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
 8007068:	78fb      	ldrb	r3, [r7, #3]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	4413      	add	r3, r2
 800706e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b00      	cmp	r3, #0
 8007078:	d106      	bne.n	8007088 <tmc2209_readInt+0x3c>
		return tmc2209->config->shadowRegister[address];
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	78fb      	ldrb	r3, [r7, #3]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	e03f      	b.n	8007108 <tmc2209_readInt+0xbc>

	data[0] = 0x05;
 8007088:	2305      	movs	r3, #5
 800708a:	723b      	strb	r3, [r7, #8]
	data[1] = tmc2209->slaveAddress;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8007092:	727b      	strb	r3, [r7, #9]
	data[2] = address;
 8007094:	78fb      	ldrb	r3, [r7, #3]
 8007096:	72bb      	strb	r3, [r7, #10]
	data[3] = tmc2209_CRC8(data, 3);
 8007098:	f107 0308 	add.w	r3, r7, #8
 800709c:	2103      	movs	r1, #3
 800709e:	4618      	mov	r0, r3
 80070a0:	f7f9 fab0 	bl	8000604 <tmc2209_CRC8>
 80070a4:	4603      	mov	r3, r0
 80070a6:	72fb      	strb	r3, [r7, #11]

	tmc2209_readWriteArray(tmc2209->config->channel, data, 4, 8);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 80070b0:	f107 0108 	add.w	r1, r7, #8
 80070b4:	2308      	movs	r3, #8
 80070b6:	2204      	movs	r2, #4
 80070b8:	f7f9 fa7c 	bl	80005b4 <tmc2209_readWriteArray>

	// Byte 0: Sync nibble correct?
	if (data[0] != 0x05)
 80070bc:	7a3b      	ldrb	r3, [r7, #8]
 80070be:	2b05      	cmp	r3, #5
 80070c0:	d001      	beq.n	80070c6 <tmc2209_readInt+0x7a>
		return 0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	e020      	b.n	8007108 <tmc2209_readInt+0xbc>

	// Byte 1: Master address correct?
	if (data[1] != 0xFF)
 80070c6:	7a7b      	ldrb	r3, [r7, #9]
 80070c8:	2bff      	cmp	r3, #255	; 0xff
 80070ca:	d001      	beq.n	80070d0 <tmc2209_readInt+0x84>
		return 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	e01b      	b.n	8007108 <tmc2209_readInt+0xbc>

	// Byte 2: Address correct?
	if (data[2] != address)
 80070d0:	7abb      	ldrb	r3, [r7, #10]
 80070d2:	78fa      	ldrb	r2, [r7, #3]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d001      	beq.n	80070dc <tmc2209_readInt+0x90>
		return 0;
 80070d8:	2300      	movs	r3, #0
 80070da:	e015      	b.n	8007108 <tmc2209_readInt+0xbc>

	// Byte 7: CRC correct?
	if (data[7] != tmc2209_CRC8(data, 7))
 80070dc:	7bfc      	ldrb	r4, [r7, #15]
 80070de:	f107 0308 	add.w	r3, r7, #8
 80070e2:	2107      	movs	r1, #7
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7f9 fa8d 	bl	8000604 <tmc2209_CRC8>
 80070ea:	4603      	mov	r3, r0
 80070ec:	429c      	cmp	r4, r3
 80070ee:	d001      	beq.n	80070f4 <tmc2209_readInt+0xa8>
		return 0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	e009      	b.n	8007108 <tmc2209_readInt+0xbc>

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
 80070f4:	7afb      	ldrb	r3, [r7, #11]
 80070f6:	061a      	lsls	r2, r3, #24
 80070f8:	7b3b      	ldrb	r3, [r7, #12]
 80070fa:	041b      	lsls	r3, r3, #16
 80070fc:	4313      	orrs	r3, r2
 80070fe:	7b7a      	ldrb	r2, [r7, #13]
 8007100:	0212      	lsls	r2, r2, #8
 8007102:	4313      	orrs	r3, r2
 8007104:	7bba      	ldrb	r2, [r7, #14]
 8007106:	4313      	orrs	r3, r2
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	bd90      	pop	{r4, r7, pc}

08007110 <writeConfiguration>:
		tmc2209->registerResetState[i]  = registerResetState[i];
	}
}

static void writeConfiguration(TMC2209TypeDef *tmc2209)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
	uint8_t *ptr = &tmc2209->config->configIndex;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3301      	adds	r3, #1
 800711e:	60bb      	str	r3, [r7, #8]
	const int32_t *settings;

	if(tmc2209->config->state == CONFIG_RESTORE)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	2b02      	cmp	r3, #2
 8007128:	d131      	bne.n	800718e <writeConfiguration+0x7e>
	{
		settings = tmc2209->config->shadowRegister;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3304      	adds	r3, #4
 8007130:	60fb      	str	r3, [r7, #12]
		// Find the next restorable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8007132:	e005      	b.n	8007140 <writeConfiguration+0x30>
		{
			(*ptr)++;
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	3301      	adds	r3, #1
 800713a:	b2da      	uxtb	r2, r3
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	b25b      	sxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	db3b      	blt.n	80071c2 <writeConfiguration+0xb2>
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4413      	add	r3, r2
 8007154:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b00      	cmp	r3, #0
 800715e:	d0e9      	beq.n	8007134 <writeConfiguration+0x24>
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	461a      	mov	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4413      	add	r3, r2
 800716a:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800716e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007172:	2b00      	cmp	r3, #0
 8007174:	d025      	beq.n	80071c2 <writeConfiguration+0xb2>
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4413      	add	r3, r2
 8007180:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8007184:	f003 0308 	and.w	r3, r3, #8
 8007188:	2b00      	cmp	r3, #0
 800718a:	d0d3      	beq.n	8007134 <writeConfiguration+0x24>
 800718c:	e019      	b.n	80071c2 <writeConfiguration+0xb2>
		}
	}
	else
	{
		settings = tmc2209->registerResetState;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	3304      	adds	r3, #4
 8007192:	60fb      	str	r3, [r7, #12]
		// Find the next resettable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 8007194:	e005      	b.n	80071a2 <writeConfiguration+0x92>
		{
			(*ptr)++;
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	3301      	adds	r3, #1
 800719c:	b2da      	uxtb	r2, r3
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	b25b      	sxtb	r3, r3
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	db0a      	blt.n	80071c2 <writeConfiguration+0xb2>
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	461a      	mov	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4413      	add	r3, r2
 80071b6:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80071ba:	f003 0342 	and.w	r3, r3, #66	; 0x42
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d1e9      	bne.n	8007196 <writeConfiguration+0x86>
		}
	}

	if(*ptr < TMC2209_REGISTER_COUNT)
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	b25b      	sxtb	r3, r3
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	db12      	blt.n	80071f2 <writeConfiguration+0xe2>
	{
		tmc2209_writeInt(tmc2209, *ptr, settings[*ptr]);
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	7819      	ldrb	r1, [r3, #0]
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	4413      	add	r3, r2
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	461a      	mov	r2, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7ff fee4 	bl	8006fac <tmc2209_writeInt>
		(*ptr)++;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	3301      	adds	r3, #1
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	701a      	strb	r2, [r3, #0]
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
		}

		tmc2209->config->state = CONFIG_READY;
	}
}
 80071f0:	e013      	b.n	800721a <writeConfiguration+0x10a>
		if(tmc2209->config->callback)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d009      	beq.n	8007212 <writeConfiguration+0x102>
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	6812      	ldr	r2, [r2, #0]
 800720a:	7812      	ldrb	r2, [r2, #0]
 800720c:	4611      	mov	r1, r2
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	4798      	blx	r3
		tmc2209->config->state = CONFIG_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2200      	movs	r2, #0
 8007218:	701a      	strb	r2, [r3, #0]
}
 800721a:	bf00      	nop
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <tmc2209_periodicJob>:

void tmc2209_periodicJob(TMC2209TypeDef *tmc2209, uint32_t tick)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b082      	sub	sp, #8
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	6039      	str	r1, [r7, #0]
	UNUSED(tick);

	if(tmc2209->config->state != CONFIG_READY)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d003      	beq.n	800723e <tmc2209_periodicJob+0x1c>
	{
		writeConfiguration(tmc2209);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7ff ff6a 	bl	8007110 <writeConfiguration>
		return;
 800723c:	bf00      	nop
	}
}
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <__errno>:
 8007244:	4b01      	ldr	r3, [pc, #4]	; (800724c <__errno+0x8>)
 8007246:	6818      	ldr	r0, [r3, #0]
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	2000000c 	.word	0x2000000c

08007250 <__libc_init_array>:
 8007250:	b570      	push	{r4, r5, r6, lr}
 8007252:	4d0d      	ldr	r5, [pc, #52]	; (8007288 <__libc_init_array+0x38>)
 8007254:	4c0d      	ldr	r4, [pc, #52]	; (800728c <__libc_init_array+0x3c>)
 8007256:	1b64      	subs	r4, r4, r5
 8007258:	10a4      	asrs	r4, r4, #2
 800725a:	2600      	movs	r6, #0
 800725c:	42a6      	cmp	r6, r4
 800725e:	d109      	bne.n	8007274 <__libc_init_array+0x24>
 8007260:	4d0b      	ldr	r5, [pc, #44]	; (8007290 <__libc_init_array+0x40>)
 8007262:	4c0c      	ldr	r4, [pc, #48]	; (8007294 <__libc_init_array+0x44>)
 8007264:	f001 f8fa 	bl	800845c <_init>
 8007268:	1b64      	subs	r4, r4, r5
 800726a:	10a4      	asrs	r4, r4, #2
 800726c:	2600      	movs	r6, #0
 800726e:	42a6      	cmp	r6, r4
 8007270:	d105      	bne.n	800727e <__libc_init_array+0x2e>
 8007272:	bd70      	pop	{r4, r5, r6, pc}
 8007274:	f855 3b04 	ldr.w	r3, [r5], #4
 8007278:	4798      	blx	r3
 800727a:	3601      	adds	r6, #1
 800727c:	e7ee      	b.n	800725c <__libc_init_array+0xc>
 800727e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007282:	4798      	blx	r3
 8007284:	3601      	adds	r6, #1
 8007286:	e7f2      	b.n	800726e <__libc_init_array+0x1e>
 8007288:	08008a68 	.word	0x08008a68
 800728c:	08008a68 	.word	0x08008a68
 8007290:	08008a68 	.word	0x08008a68
 8007294:	08008a6c 	.word	0x08008a6c

08007298 <memset>:
 8007298:	4402      	add	r2, r0
 800729a:	4603      	mov	r3, r0
 800729c:	4293      	cmp	r3, r2
 800729e:	d100      	bne.n	80072a2 <memset+0xa>
 80072a0:	4770      	bx	lr
 80072a2:	f803 1b01 	strb.w	r1, [r3], #1
 80072a6:	e7f9      	b.n	800729c <memset+0x4>

080072a8 <iprintf>:
 80072a8:	b40f      	push	{r0, r1, r2, r3}
 80072aa:	4b0a      	ldr	r3, [pc, #40]	; (80072d4 <iprintf+0x2c>)
 80072ac:	b513      	push	{r0, r1, r4, lr}
 80072ae:	681c      	ldr	r4, [r3, #0]
 80072b0:	b124      	cbz	r4, 80072bc <iprintf+0x14>
 80072b2:	69a3      	ldr	r3, [r4, #24]
 80072b4:	b913      	cbnz	r3, 80072bc <iprintf+0x14>
 80072b6:	4620      	mov	r0, r4
 80072b8:	f000 fb2c 	bl	8007914 <__sinit>
 80072bc:	ab05      	add	r3, sp, #20
 80072be:	9a04      	ldr	r2, [sp, #16]
 80072c0:	68a1      	ldr	r1, [r4, #8]
 80072c2:	9301      	str	r3, [sp, #4]
 80072c4:	4620      	mov	r0, r4
 80072c6:	f000 fd3d 	bl	8007d44 <_vfiprintf_r>
 80072ca:	b002      	add	sp, #8
 80072cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072d0:	b004      	add	sp, #16
 80072d2:	4770      	bx	lr
 80072d4:	2000000c 	.word	0x2000000c

080072d8 <_puts_r>:
 80072d8:	b570      	push	{r4, r5, r6, lr}
 80072da:	460e      	mov	r6, r1
 80072dc:	4605      	mov	r5, r0
 80072de:	b118      	cbz	r0, 80072e8 <_puts_r+0x10>
 80072e0:	6983      	ldr	r3, [r0, #24]
 80072e2:	b90b      	cbnz	r3, 80072e8 <_puts_r+0x10>
 80072e4:	f000 fb16 	bl	8007914 <__sinit>
 80072e8:	69ab      	ldr	r3, [r5, #24]
 80072ea:	68ac      	ldr	r4, [r5, #8]
 80072ec:	b913      	cbnz	r3, 80072f4 <_puts_r+0x1c>
 80072ee:	4628      	mov	r0, r5
 80072f0:	f000 fb10 	bl	8007914 <__sinit>
 80072f4:	4b2c      	ldr	r3, [pc, #176]	; (80073a8 <_puts_r+0xd0>)
 80072f6:	429c      	cmp	r4, r3
 80072f8:	d120      	bne.n	800733c <_puts_r+0x64>
 80072fa:	686c      	ldr	r4, [r5, #4]
 80072fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072fe:	07db      	lsls	r3, r3, #31
 8007300:	d405      	bmi.n	800730e <_puts_r+0x36>
 8007302:	89a3      	ldrh	r3, [r4, #12]
 8007304:	0598      	lsls	r0, r3, #22
 8007306:	d402      	bmi.n	800730e <_puts_r+0x36>
 8007308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800730a:	f000 fba1 	bl	8007a50 <__retarget_lock_acquire_recursive>
 800730e:	89a3      	ldrh	r3, [r4, #12]
 8007310:	0719      	lsls	r1, r3, #28
 8007312:	d51d      	bpl.n	8007350 <_puts_r+0x78>
 8007314:	6923      	ldr	r3, [r4, #16]
 8007316:	b1db      	cbz	r3, 8007350 <_puts_r+0x78>
 8007318:	3e01      	subs	r6, #1
 800731a:	68a3      	ldr	r3, [r4, #8]
 800731c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007320:	3b01      	subs	r3, #1
 8007322:	60a3      	str	r3, [r4, #8]
 8007324:	bb39      	cbnz	r1, 8007376 <_puts_r+0x9e>
 8007326:	2b00      	cmp	r3, #0
 8007328:	da38      	bge.n	800739c <_puts_r+0xc4>
 800732a:	4622      	mov	r2, r4
 800732c:	210a      	movs	r1, #10
 800732e:	4628      	mov	r0, r5
 8007330:	f000 f916 	bl	8007560 <__swbuf_r>
 8007334:	3001      	adds	r0, #1
 8007336:	d011      	beq.n	800735c <_puts_r+0x84>
 8007338:	250a      	movs	r5, #10
 800733a:	e011      	b.n	8007360 <_puts_r+0x88>
 800733c:	4b1b      	ldr	r3, [pc, #108]	; (80073ac <_puts_r+0xd4>)
 800733e:	429c      	cmp	r4, r3
 8007340:	d101      	bne.n	8007346 <_puts_r+0x6e>
 8007342:	68ac      	ldr	r4, [r5, #8]
 8007344:	e7da      	b.n	80072fc <_puts_r+0x24>
 8007346:	4b1a      	ldr	r3, [pc, #104]	; (80073b0 <_puts_r+0xd8>)
 8007348:	429c      	cmp	r4, r3
 800734a:	bf08      	it	eq
 800734c:	68ec      	ldreq	r4, [r5, #12]
 800734e:	e7d5      	b.n	80072fc <_puts_r+0x24>
 8007350:	4621      	mov	r1, r4
 8007352:	4628      	mov	r0, r5
 8007354:	f000 f956 	bl	8007604 <__swsetup_r>
 8007358:	2800      	cmp	r0, #0
 800735a:	d0dd      	beq.n	8007318 <_puts_r+0x40>
 800735c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007360:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007362:	07da      	lsls	r2, r3, #31
 8007364:	d405      	bmi.n	8007372 <_puts_r+0x9a>
 8007366:	89a3      	ldrh	r3, [r4, #12]
 8007368:	059b      	lsls	r3, r3, #22
 800736a:	d402      	bmi.n	8007372 <_puts_r+0x9a>
 800736c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800736e:	f000 fb70 	bl	8007a52 <__retarget_lock_release_recursive>
 8007372:	4628      	mov	r0, r5
 8007374:	bd70      	pop	{r4, r5, r6, pc}
 8007376:	2b00      	cmp	r3, #0
 8007378:	da04      	bge.n	8007384 <_puts_r+0xac>
 800737a:	69a2      	ldr	r2, [r4, #24]
 800737c:	429a      	cmp	r2, r3
 800737e:	dc06      	bgt.n	800738e <_puts_r+0xb6>
 8007380:	290a      	cmp	r1, #10
 8007382:	d004      	beq.n	800738e <_puts_r+0xb6>
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	1c5a      	adds	r2, r3, #1
 8007388:	6022      	str	r2, [r4, #0]
 800738a:	7019      	strb	r1, [r3, #0]
 800738c:	e7c5      	b.n	800731a <_puts_r+0x42>
 800738e:	4622      	mov	r2, r4
 8007390:	4628      	mov	r0, r5
 8007392:	f000 f8e5 	bl	8007560 <__swbuf_r>
 8007396:	3001      	adds	r0, #1
 8007398:	d1bf      	bne.n	800731a <_puts_r+0x42>
 800739a:	e7df      	b.n	800735c <_puts_r+0x84>
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	250a      	movs	r5, #10
 80073a0:	1c5a      	adds	r2, r3, #1
 80073a2:	6022      	str	r2, [r4, #0]
 80073a4:	701d      	strb	r5, [r3, #0]
 80073a6:	e7db      	b.n	8007360 <_puts_r+0x88>
 80073a8:	080089ec 	.word	0x080089ec
 80073ac:	08008a0c 	.word	0x08008a0c
 80073b0:	080089cc 	.word	0x080089cc

080073b4 <puts>:
 80073b4:	4b02      	ldr	r3, [pc, #8]	; (80073c0 <puts+0xc>)
 80073b6:	4601      	mov	r1, r0
 80073b8:	6818      	ldr	r0, [r3, #0]
 80073ba:	f7ff bf8d 	b.w	80072d8 <_puts_r>
 80073be:	bf00      	nop
 80073c0:	2000000c 	.word	0x2000000c

080073c4 <setbuf>:
 80073c4:	2900      	cmp	r1, #0
 80073c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073ca:	bf0c      	ite	eq
 80073cc:	2202      	moveq	r2, #2
 80073ce:	2200      	movne	r2, #0
 80073d0:	f000 b800 	b.w	80073d4 <setvbuf>

080073d4 <setvbuf>:
 80073d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073d8:	461d      	mov	r5, r3
 80073da:	4b5d      	ldr	r3, [pc, #372]	; (8007550 <setvbuf+0x17c>)
 80073dc:	681f      	ldr	r7, [r3, #0]
 80073de:	4604      	mov	r4, r0
 80073e0:	460e      	mov	r6, r1
 80073e2:	4690      	mov	r8, r2
 80073e4:	b127      	cbz	r7, 80073f0 <setvbuf+0x1c>
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	b913      	cbnz	r3, 80073f0 <setvbuf+0x1c>
 80073ea:	4638      	mov	r0, r7
 80073ec:	f000 fa92 	bl	8007914 <__sinit>
 80073f0:	4b58      	ldr	r3, [pc, #352]	; (8007554 <setvbuf+0x180>)
 80073f2:	429c      	cmp	r4, r3
 80073f4:	d167      	bne.n	80074c6 <setvbuf+0xf2>
 80073f6:	687c      	ldr	r4, [r7, #4]
 80073f8:	f1b8 0f02 	cmp.w	r8, #2
 80073fc:	d006      	beq.n	800740c <setvbuf+0x38>
 80073fe:	f1b8 0f01 	cmp.w	r8, #1
 8007402:	f200 809f 	bhi.w	8007544 <setvbuf+0x170>
 8007406:	2d00      	cmp	r5, #0
 8007408:	f2c0 809c 	blt.w	8007544 <setvbuf+0x170>
 800740c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800740e:	07db      	lsls	r3, r3, #31
 8007410:	d405      	bmi.n	800741e <setvbuf+0x4a>
 8007412:	89a3      	ldrh	r3, [r4, #12]
 8007414:	0598      	lsls	r0, r3, #22
 8007416:	d402      	bmi.n	800741e <setvbuf+0x4a>
 8007418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800741a:	f000 fb19 	bl	8007a50 <__retarget_lock_acquire_recursive>
 800741e:	4621      	mov	r1, r4
 8007420:	4638      	mov	r0, r7
 8007422:	f000 f9e3 	bl	80077ec <_fflush_r>
 8007426:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007428:	b141      	cbz	r1, 800743c <setvbuf+0x68>
 800742a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800742e:	4299      	cmp	r1, r3
 8007430:	d002      	beq.n	8007438 <setvbuf+0x64>
 8007432:	4638      	mov	r0, r7
 8007434:	f000 fb7c 	bl	8007b30 <_free_r>
 8007438:	2300      	movs	r3, #0
 800743a:	6363      	str	r3, [r4, #52]	; 0x34
 800743c:	2300      	movs	r3, #0
 800743e:	61a3      	str	r3, [r4, #24]
 8007440:	6063      	str	r3, [r4, #4]
 8007442:	89a3      	ldrh	r3, [r4, #12]
 8007444:	0619      	lsls	r1, r3, #24
 8007446:	d503      	bpl.n	8007450 <setvbuf+0x7c>
 8007448:	6921      	ldr	r1, [r4, #16]
 800744a:	4638      	mov	r0, r7
 800744c:	f000 fb70 	bl	8007b30 <_free_r>
 8007450:	89a3      	ldrh	r3, [r4, #12]
 8007452:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007456:	f023 0303 	bic.w	r3, r3, #3
 800745a:	f1b8 0f02 	cmp.w	r8, #2
 800745e:	81a3      	strh	r3, [r4, #12]
 8007460:	d06c      	beq.n	800753c <setvbuf+0x168>
 8007462:	ab01      	add	r3, sp, #4
 8007464:	466a      	mov	r2, sp
 8007466:	4621      	mov	r1, r4
 8007468:	4638      	mov	r0, r7
 800746a:	f000 faf3 	bl	8007a54 <__swhatbuf_r>
 800746e:	89a3      	ldrh	r3, [r4, #12]
 8007470:	4318      	orrs	r0, r3
 8007472:	81a0      	strh	r0, [r4, #12]
 8007474:	2d00      	cmp	r5, #0
 8007476:	d130      	bne.n	80074da <setvbuf+0x106>
 8007478:	9d00      	ldr	r5, [sp, #0]
 800747a:	4628      	mov	r0, r5
 800747c:	f000 fb50 	bl	8007b20 <malloc>
 8007480:	4606      	mov	r6, r0
 8007482:	2800      	cmp	r0, #0
 8007484:	d155      	bne.n	8007532 <setvbuf+0x15e>
 8007486:	f8dd 9000 	ldr.w	r9, [sp]
 800748a:	45a9      	cmp	r9, r5
 800748c:	d14a      	bne.n	8007524 <setvbuf+0x150>
 800748e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007492:	2200      	movs	r2, #0
 8007494:	60a2      	str	r2, [r4, #8]
 8007496:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800749a:	6022      	str	r2, [r4, #0]
 800749c:	6122      	str	r2, [r4, #16]
 800749e:	2201      	movs	r2, #1
 80074a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074a4:	6162      	str	r2, [r4, #20]
 80074a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074a8:	f043 0302 	orr.w	r3, r3, #2
 80074ac:	07d2      	lsls	r2, r2, #31
 80074ae:	81a3      	strh	r3, [r4, #12]
 80074b0:	d405      	bmi.n	80074be <setvbuf+0xea>
 80074b2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80074b6:	d102      	bne.n	80074be <setvbuf+0xea>
 80074b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074ba:	f000 faca 	bl	8007a52 <__retarget_lock_release_recursive>
 80074be:	4628      	mov	r0, r5
 80074c0:	b003      	add	sp, #12
 80074c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074c6:	4b24      	ldr	r3, [pc, #144]	; (8007558 <setvbuf+0x184>)
 80074c8:	429c      	cmp	r4, r3
 80074ca:	d101      	bne.n	80074d0 <setvbuf+0xfc>
 80074cc:	68bc      	ldr	r4, [r7, #8]
 80074ce:	e793      	b.n	80073f8 <setvbuf+0x24>
 80074d0:	4b22      	ldr	r3, [pc, #136]	; (800755c <setvbuf+0x188>)
 80074d2:	429c      	cmp	r4, r3
 80074d4:	bf08      	it	eq
 80074d6:	68fc      	ldreq	r4, [r7, #12]
 80074d8:	e78e      	b.n	80073f8 <setvbuf+0x24>
 80074da:	2e00      	cmp	r6, #0
 80074dc:	d0cd      	beq.n	800747a <setvbuf+0xa6>
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	b913      	cbnz	r3, 80074e8 <setvbuf+0x114>
 80074e2:	4638      	mov	r0, r7
 80074e4:	f000 fa16 	bl	8007914 <__sinit>
 80074e8:	f1b8 0f01 	cmp.w	r8, #1
 80074ec:	bf08      	it	eq
 80074ee:	89a3      	ldrheq	r3, [r4, #12]
 80074f0:	6026      	str	r6, [r4, #0]
 80074f2:	bf04      	itt	eq
 80074f4:	f043 0301 	orreq.w	r3, r3, #1
 80074f8:	81a3      	strheq	r3, [r4, #12]
 80074fa:	89a2      	ldrh	r2, [r4, #12]
 80074fc:	f012 0308 	ands.w	r3, r2, #8
 8007500:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007504:	d01c      	beq.n	8007540 <setvbuf+0x16c>
 8007506:	07d3      	lsls	r3, r2, #31
 8007508:	bf41      	itttt	mi
 800750a:	2300      	movmi	r3, #0
 800750c:	426d      	negmi	r5, r5
 800750e:	60a3      	strmi	r3, [r4, #8]
 8007510:	61a5      	strmi	r5, [r4, #24]
 8007512:	bf58      	it	pl
 8007514:	60a5      	strpl	r5, [r4, #8]
 8007516:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007518:	f015 0501 	ands.w	r5, r5, #1
 800751c:	d115      	bne.n	800754a <setvbuf+0x176>
 800751e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007522:	e7c8      	b.n	80074b6 <setvbuf+0xe2>
 8007524:	4648      	mov	r0, r9
 8007526:	f000 fafb 	bl	8007b20 <malloc>
 800752a:	4606      	mov	r6, r0
 800752c:	2800      	cmp	r0, #0
 800752e:	d0ae      	beq.n	800748e <setvbuf+0xba>
 8007530:	464d      	mov	r5, r9
 8007532:	89a3      	ldrh	r3, [r4, #12]
 8007534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007538:	81a3      	strh	r3, [r4, #12]
 800753a:	e7d0      	b.n	80074de <setvbuf+0x10a>
 800753c:	2500      	movs	r5, #0
 800753e:	e7a8      	b.n	8007492 <setvbuf+0xbe>
 8007540:	60a3      	str	r3, [r4, #8]
 8007542:	e7e8      	b.n	8007516 <setvbuf+0x142>
 8007544:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007548:	e7b9      	b.n	80074be <setvbuf+0xea>
 800754a:	2500      	movs	r5, #0
 800754c:	e7b7      	b.n	80074be <setvbuf+0xea>
 800754e:	bf00      	nop
 8007550:	2000000c 	.word	0x2000000c
 8007554:	080089ec 	.word	0x080089ec
 8007558:	08008a0c 	.word	0x08008a0c
 800755c:	080089cc 	.word	0x080089cc

08007560 <__swbuf_r>:
 8007560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007562:	460e      	mov	r6, r1
 8007564:	4614      	mov	r4, r2
 8007566:	4605      	mov	r5, r0
 8007568:	b118      	cbz	r0, 8007572 <__swbuf_r+0x12>
 800756a:	6983      	ldr	r3, [r0, #24]
 800756c:	b90b      	cbnz	r3, 8007572 <__swbuf_r+0x12>
 800756e:	f000 f9d1 	bl	8007914 <__sinit>
 8007572:	4b21      	ldr	r3, [pc, #132]	; (80075f8 <__swbuf_r+0x98>)
 8007574:	429c      	cmp	r4, r3
 8007576:	d12b      	bne.n	80075d0 <__swbuf_r+0x70>
 8007578:	686c      	ldr	r4, [r5, #4]
 800757a:	69a3      	ldr	r3, [r4, #24]
 800757c:	60a3      	str	r3, [r4, #8]
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	071a      	lsls	r2, r3, #28
 8007582:	d52f      	bpl.n	80075e4 <__swbuf_r+0x84>
 8007584:	6923      	ldr	r3, [r4, #16]
 8007586:	b36b      	cbz	r3, 80075e4 <__swbuf_r+0x84>
 8007588:	6923      	ldr	r3, [r4, #16]
 800758a:	6820      	ldr	r0, [r4, #0]
 800758c:	1ac0      	subs	r0, r0, r3
 800758e:	6963      	ldr	r3, [r4, #20]
 8007590:	b2f6      	uxtb	r6, r6
 8007592:	4283      	cmp	r3, r0
 8007594:	4637      	mov	r7, r6
 8007596:	dc04      	bgt.n	80075a2 <__swbuf_r+0x42>
 8007598:	4621      	mov	r1, r4
 800759a:	4628      	mov	r0, r5
 800759c:	f000 f926 	bl	80077ec <_fflush_r>
 80075a0:	bb30      	cbnz	r0, 80075f0 <__swbuf_r+0x90>
 80075a2:	68a3      	ldr	r3, [r4, #8]
 80075a4:	3b01      	subs	r3, #1
 80075a6:	60a3      	str	r3, [r4, #8]
 80075a8:	6823      	ldr	r3, [r4, #0]
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	6022      	str	r2, [r4, #0]
 80075ae:	701e      	strb	r6, [r3, #0]
 80075b0:	6963      	ldr	r3, [r4, #20]
 80075b2:	3001      	adds	r0, #1
 80075b4:	4283      	cmp	r3, r0
 80075b6:	d004      	beq.n	80075c2 <__swbuf_r+0x62>
 80075b8:	89a3      	ldrh	r3, [r4, #12]
 80075ba:	07db      	lsls	r3, r3, #31
 80075bc:	d506      	bpl.n	80075cc <__swbuf_r+0x6c>
 80075be:	2e0a      	cmp	r6, #10
 80075c0:	d104      	bne.n	80075cc <__swbuf_r+0x6c>
 80075c2:	4621      	mov	r1, r4
 80075c4:	4628      	mov	r0, r5
 80075c6:	f000 f911 	bl	80077ec <_fflush_r>
 80075ca:	b988      	cbnz	r0, 80075f0 <__swbuf_r+0x90>
 80075cc:	4638      	mov	r0, r7
 80075ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075d0:	4b0a      	ldr	r3, [pc, #40]	; (80075fc <__swbuf_r+0x9c>)
 80075d2:	429c      	cmp	r4, r3
 80075d4:	d101      	bne.n	80075da <__swbuf_r+0x7a>
 80075d6:	68ac      	ldr	r4, [r5, #8]
 80075d8:	e7cf      	b.n	800757a <__swbuf_r+0x1a>
 80075da:	4b09      	ldr	r3, [pc, #36]	; (8007600 <__swbuf_r+0xa0>)
 80075dc:	429c      	cmp	r4, r3
 80075de:	bf08      	it	eq
 80075e0:	68ec      	ldreq	r4, [r5, #12]
 80075e2:	e7ca      	b.n	800757a <__swbuf_r+0x1a>
 80075e4:	4621      	mov	r1, r4
 80075e6:	4628      	mov	r0, r5
 80075e8:	f000 f80c 	bl	8007604 <__swsetup_r>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d0cb      	beq.n	8007588 <__swbuf_r+0x28>
 80075f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80075f4:	e7ea      	b.n	80075cc <__swbuf_r+0x6c>
 80075f6:	bf00      	nop
 80075f8:	080089ec 	.word	0x080089ec
 80075fc:	08008a0c 	.word	0x08008a0c
 8007600:	080089cc 	.word	0x080089cc

08007604 <__swsetup_r>:
 8007604:	4b32      	ldr	r3, [pc, #200]	; (80076d0 <__swsetup_r+0xcc>)
 8007606:	b570      	push	{r4, r5, r6, lr}
 8007608:	681d      	ldr	r5, [r3, #0]
 800760a:	4606      	mov	r6, r0
 800760c:	460c      	mov	r4, r1
 800760e:	b125      	cbz	r5, 800761a <__swsetup_r+0x16>
 8007610:	69ab      	ldr	r3, [r5, #24]
 8007612:	b913      	cbnz	r3, 800761a <__swsetup_r+0x16>
 8007614:	4628      	mov	r0, r5
 8007616:	f000 f97d 	bl	8007914 <__sinit>
 800761a:	4b2e      	ldr	r3, [pc, #184]	; (80076d4 <__swsetup_r+0xd0>)
 800761c:	429c      	cmp	r4, r3
 800761e:	d10f      	bne.n	8007640 <__swsetup_r+0x3c>
 8007620:	686c      	ldr	r4, [r5, #4]
 8007622:	89a3      	ldrh	r3, [r4, #12]
 8007624:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007628:	0719      	lsls	r1, r3, #28
 800762a:	d42c      	bmi.n	8007686 <__swsetup_r+0x82>
 800762c:	06dd      	lsls	r5, r3, #27
 800762e:	d411      	bmi.n	8007654 <__swsetup_r+0x50>
 8007630:	2309      	movs	r3, #9
 8007632:	6033      	str	r3, [r6, #0]
 8007634:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007638:	81a3      	strh	r3, [r4, #12]
 800763a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800763e:	e03e      	b.n	80076be <__swsetup_r+0xba>
 8007640:	4b25      	ldr	r3, [pc, #148]	; (80076d8 <__swsetup_r+0xd4>)
 8007642:	429c      	cmp	r4, r3
 8007644:	d101      	bne.n	800764a <__swsetup_r+0x46>
 8007646:	68ac      	ldr	r4, [r5, #8]
 8007648:	e7eb      	b.n	8007622 <__swsetup_r+0x1e>
 800764a:	4b24      	ldr	r3, [pc, #144]	; (80076dc <__swsetup_r+0xd8>)
 800764c:	429c      	cmp	r4, r3
 800764e:	bf08      	it	eq
 8007650:	68ec      	ldreq	r4, [r5, #12]
 8007652:	e7e6      	b.n	8007622 <__swsetup_r+0x1e>
 8007654:	0758      	lsls	r0, r3, #29
 8007656:	d512      	bpl.n	800767e <__swsetup_r+0x7a>
 8007658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800765a:	b141      	cbz	r1, 800766e <__swsetup_r+0x6a>
 800765c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007660:	4299      	cmp	r1, r3
 8007662:	d002      	beq.n	800766a <__swsetup_r+0x66>
 8007664:	4630      	mov	r0, r6
 8007666:	f000 fa63 	bl	8007b30 <_free_r>
 800766a:	2300      	movs	r3, #0
 800766c:	6363      	str	r3, [r4, #52]	; 0x34
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007674:	81a3      	strh	r3, [r4, #12]
 8007676:	2300      	movs	r3, #0
 8007678:	6063      	str	r3, [r4, #4]
 800767a:	6923      	ldr	r3, [r4, #16]
 800767c:	6023      	str	r3, [r4, #0]
 800767e:	89a3      	ldrh	r3, [r4, #12]
 8007680:	f043 0308 	orr.w	r3, r3, #8
 8007684:	81a3      	strh	r3, [r4, #12]
 8007686:	6923      	ldr	r3, [r4, #16]
 8007688:	b94b      	cbnz	r3, 800769e <__swsetup_r+0x9a>
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007694:	d003      	beq.n	800769e <__swsetup_r+0x9a>
 8007696:	4621      	mov	r1, r4
 8007698:	4630      	mov	r0, r6
 800769a:	f000 fa01 	bl	8007aa0 <__smakebuf_r>
 800769e:	89a0      	ldrh	r0, [r4, #12]
 80076a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076a4:	f010 0301 	ands.w	r3, r0, #1
 80076a8:	d00a      	beq.n	80076c0 <__swsetup_r+0xbc>
 80076aa:	2300      	movs	r3, #0
 80076ac:	60a3      	str	r3, [r4, #8]
 80076ae:	6963      	ldr	r3, [r4, #20]
 80076b0:	425b      	negs	r3, r3
 80076b2:	61a3      	str	r3, [r4, #24]
 80076b4:	6923      	ldr	r3, [r4, #16]
 80076b6:	b943      	cbnz	r3, 80076ca <__swsetup_r+0xc6>
 80076b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076bc:	d1ba      	bne.n	8007634 <__swsetup_r+0x30>
 80076be:	bd70      	pop	{r4, r5, r6, pc}
 80076c0:	0781      	lsls	r1, r0, #30
 80076c2:	bf58      	it	pl
 80076c4:	6963      	ldrpl	r3, [r4, #20]
 80076c6:	60a3      	str	r3, [r4, #8]
 80076c8:	e7f4      	b.n	80076b4 <__swsetup_r+0xb0>
 80076ca:	2000      	movs	r0, #0
 80076cc:	e7f7      	b.n	80076be <__swsetup_r+0xba>
 80076ce:	bf00      	nop
 80076d0:	2000000c 	.word	0x2000000c
 80076d4:	080089ec 	.word	0x080089ec
 80076d8:	08008a0c 	.word	0x08008a0c
 80076dc:	080089cc 	.word	0x080089cc

080076e0 <__sflush_r>:
 80076e0:	898a      	ldrh	r2, [r1, #12]
 80076e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e6:	4605      	mov	r5, r0
 80076e8:	0710      	lsls	r0, r2, #28
 80076ea:	460c      	mov	r4, r1
 80076ec:	d458      	bmi.n	80077a0 <__sflush_r+0xc0>
 80076ee:	684b      	ldr	r3, [r1, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	dc05      	bgt.n	8007700 <__sflush_r+0x20>
 80076f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	dc02      	bgt.n	8007700 <__sflush_r+0x20>
 80076fa:	2000      	movs	r0, #0
 80076fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007700:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007702:	2e00      	cmp	r6, #0
 8007704:	d0f9      	beq.n	80076fa <__sflush_r+0x1a>
 8007706:	2300      	movs	r3, #0
 8007708:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800770c:	682f      	ldr	r7, [r5, #0]
 800770e:	602b      	str	r3, [r5, #0]
 8007710:	d032      	beq.n	8007778 <__sflush_r+0x98>
 8007712:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007714:	89a3      	ldrh	r3, [r4, #12]
 8007716:	075a      	lsls	r2, r3, #29
 8007718:	d505      	bpl.n	8007726 <__sflush_r+0x46>
 800771a:	6863      	ldr	r3, [r4, #4]
 800771c:	1ac0      	subs	r0, r0, r3
 800771e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007720:	b10b      	cbz	r3, 8007726 <__sflush_r+0x46>
 8007722:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007724:	1ac0      	subs	r0, r0, r3
 8007726:	2300      	movs	r3, #0
 8007728:	4602      	mov	r2, r0
 800772a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800772c:	6a21      	ldr	r1, [r4, #32]
 800772e:	4628      	mov	r0, r5
 8007730:	47b0      	blx	r6
 8007732:	1c43      	adds	r3, r0, #1
 8007734:	89a3      	ldrh	r3, [r4, #12]
 8007736:	d106      	bne.n	8007746 <__sflush_r+0x66>
 8007738:	6829      	ldr	r1, [r5, #0]
 800773a:	291d      	cmp	r1, #29
 800773c:	d82c      	bhi.n	8007798 <__sflush_r+0xb8>
 800773e:	4a2a      	ldr	r2, [pc, #168]	; (80077e8 <__sflush_r+0x108>)
 8007740:	40ca      	lsrs	r2, r1
 8007742:	07d6      	lsls	r6, r2, #31
 8007744:	d528      	bpl.n	8007798 <__sflush_r+0xb8>
 8007746:	2200      	movs	r2, #0
 8007748:	6062      	str	r2, [r4, #4]
 800774a:	04d9      	lsls	r1, r3, #19
 800774c:	6922      	ldr	r2, [r4, #16]
 800774e:	6022      	str	r2, [r4, #0]
 8007750:	d504      	bpl.n	800775c <__sflush_r+0x7c>
 8007752:	1c42      	adds	r2, r0, #1
 8007754:	d101      	bne.n	800775a <__sflush_r+0x7a>
 8007756:	682b      	ldr	r3, [r5, #0]
 8007758:	b903      	cbnz	r3, 800775c <__sflush_r+0x7c>
 800775a:	6560      	str	r0, [r4, #84]	; 0x54
 800775c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800775e:	602f      	str	r7, [r5, #0]
 8007760:	2900      	cmp	r1, #0
 8007762:	d0ca      	beq.n	80076fa <__sflush_r+0x1a>
 8007764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007768:	4299      	cmp	r1, r3
 800776a:	d002      	beq.n	8007772 <__sflush_r+0x92>
 800776c:	4628      	mov	r0, r5
 800776e:	f000 f9df 	bl	8007b30 <_free_r>
 8007772:	2000      	movs	r0, #0
 8007774:	6360      	str	r0, [r4, #52]	; 0x34
 8007776:	e7c1      	b.n	80076fc <__sflush_r+0x1c>
 8007778:	6a21      	ldr	r1, [r4, #32]
 800777a:	2301      	movs	r3, #1
 800777c:	4628      	mov	r0, r5
 800777e:	47b0      	blx	r6
 8007780:	1c41      	adds	r1, r0, #1
 8007782:	d1c7      	bne.n	8007714 <__sflush_r+0x34>
 8007784:	682b      	ldr	r3, [r5, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d0c4      	beq.n	8007714 <__sflush_r+0x34>
 800778a:	2b1d      	cmp	r3, #29
 800778c:	d001      	beq.n	8007792 <__sflush_r+0xb2>
 800778e:	2b16      	cmp	r3, #22
 8007790:	d101      	bne.n	8007796 <__sflush_r+0xb6>
 8007792:	602f      	str	r7, [r5, #0]
 8007794:	e7b1      	b.n	80076fa <__sflush_r+0x1a>
 8007796:	89a3      	ldrh	r3, [r4, #12]
 8007798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800779c:	81a3      	strh	r3, [r4, #12]
 800779e:	e7ad      	b.n	80076fc <__sflush_r+0x1c>
 80077a0:	690f      	ldr	r7, [r1, #16]
 80077a2:	2f00      	cmp	r7, #0
 80077a4:	d0a9      	beq.n	80076fa <__sflush_r+0x1a>
 80077a6:	0793      	lsls	r3, r2, #30
 80077a8:	680e      	ldr	r6, [r1, #0]
 80077aa:	bf08      	it	eq
 80077ac:	694b      	ldreq	r3, [r1, #20]
 80077ae:	600f      	str	r7, [r1, #0]
 80077b0:	bf18      	it	ne
 80077b2:	2300      	movne	r3, #0
 80077b4:	eba6 0807 	sub.w	r8, r6, r7
 80077b8:	608b      	str	r3, [r1, #8]
 80077ba:	f1b8 0f00 	cmp.w	r8, #0
 80077be:	dd9c      	ble.n	80076fa <__sflush_r+0x1a>
 80077c0:	6a21      	ldr	r1, [r4, #32]
 80077c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077c4:	4643      	mov	r3, r8
 80077c6:	463a      	mov	r2, r7
 80077c8:	4628      	mov	r0, r5
 80077ca:	47b0      	blx	r6
 80077cc:	2800      	cmp	r0, #0
 80077ce:	dc06      	bgt.n	80077de <__sflush_r+0xfe>
 80077d0:	89a3      	ldrh	r3, [r4, #12]
 80077d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077d6:	81a3      	strh	r3, [r4, #12]
 80077d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077dc:	e78e      	b.n	80076fc <__sflush_r+0x1c>
 80077de:	4407      	add	r7, r0
 80077e0:	eba8 0800 	sub.w	r8, r8, r0
 80077e4:	e7e9      	b.n	80077ba <__sflush_r+0xda>
 80077e6:	bf00      	nop
 80077e8:	20400001 	.word	0x20400001

080077ec <_fflush_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	690b      	ldr	r3, [r1, #16]
 80077f0:	4605      	mov	r5, r0
 80077f2:	460c      	mov	r4, r1
 80077f4:	b913      	cbnz	r3, 80077fc <_fflush_r+0x10>
 80077f6:	2500      	movs	r5, #0
 80077f8:	4628      	mov	r0, r5
 80077fa:	bd38      	pop	{r3, r4, r5, pc}
 80077fc:	b118      	cbz	r0, 8007806 <_fflush_r+0x1a>
 80077fe:	6983      	ldr	r3, [r0, #24]
 8007800:	b90b      	cbnz	r3, 8007806 <_fflush_r+0x1a>
 8007802:	f000 f887 	bl	8007914 <__sinit>
 8007806:	4b14      	ldr	r3, [pc, #80]	; (8007858 <_fflush_r+0x6c>)
 8007808:	429c      	cmp	r4, r3
 800780a:	d11b      	bne.n	8007844 <_fflush_r+0x58>
 800780c:	686c      	ldr	r4, [r5, #4]
 800780e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d0ef      	beq.n	80077f6 <_fflush_r+0xa>
 8007816:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007818:	07d0      	lsls	r0, r2, #31
 800781a:	d404      	bmi.n	8007826 <_fflush_r+0x3a>
 800781c:	0599      	lsls	r1, r3, #22
 800781e:	d402      	bmi.n	8007826 <_fflush_r+0x3a>
 8007820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007822:	f000 f915 	bl	8007a50 <__retarget_lock_acquire_recursive>
 8007826:	4628      	mov	r0, r5
 8007828:	4621      	mov	r1, r4
 800782a:	f7ff ff59 	bl	80076e0 <__sflush_r>
 800782e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007830:	07da      	lsls	r2, r3, #31
 8007832:	4605      	mov	r5, r0
 8007834:	d4e0      	bmi.n	80077f8 <_fflush_r+0xc>
 8007836:	89a3      	ldrh	r3, [r4, #12]
 8007838:	059b      	lsls	r3, r3, #22
 800783a:	d4dd      	bmi.n	80077f8 <_fflush_r+0xc>
 800783c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800783e:	f000 f908 	bl	8007a52 <__retarget_lock_release_recursive>
 8007842:	e7d9      	b.n	80077f8 <_fflush_r+0xc>
 8007844:	4b05      	ldr	r3, [pc, #20]	; (800785c <_fflush_r+0x70>)
 8007846:	429c      	cmp	r4, r3
 8007848:	d101      	bne.n	800784e <_fflush_r+0x62>
 800784a:	68ac      	ldr	r4, [r5, #8]
 800784c:	e7df      	b.n	800780e <_fflush_r+0x22>
 800784e:	4b04      	ldr	r3, [pc, #16]	; (8007860 <_fflush_r+0x74>)
 8007850:	429c      	cmp	r4, r3
 8007852:	bf08      	it	eq
 8007854:	68ec      	ldreq	r4, [r5, #12]
 8007856:	e7da      	b.n	800780e <_fflush_r+0x22>
 8007858:	080089ec 	.word	0x080089ec
 800785c:	08008a0c 	.word	0x08008a0c
 8007860:	080089cc 	.word	0x080089cc

08007864 <std>:
 8007864:	2300      	movs	r3, #0
 8007866:	b510      	push	{r4, lr}
 8007868:	4604      	mov	r4, r0
 800786a:	e9c0 3300 	strd	r3, r3, [r0]
 800786e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007872:	6083      	str	r3, [r0, #8]
 8007874:	8181      	strh	r1, [r0, #12]
 8007876:	6643      	str	r3, [r0, #100]	; 0x64
 8007878:	81c2      	strh	r2, [r0, #14]
 800787a:	6183      	str	r3, [r0, #24]
 800787c:	4619      	mov	r1, r3
 800787e:	2208      	movs	r2, #8
 8007880:	305c      	adds	r0, #92	; 0x5c
 8007882:	f7ff fd09 	bl	8007298 <memset>
 8007886:	4b05      	ldr	r3, [pc, #20]	; (800789c <std+0x38>)
 8007888:	6263      	str	r3, [r4, #36]	; 0x24
 800788a:	4b05      	ldr	r3, [pc, #20]	; (80078a0 <std+0x3c>)
 800788c:	62a3      	str	r3, [r4, #40]	; 0x28
 800788e:	4b05      	ldr	r3, [pc, #20]	; (80078a4 <std+0x40>)
 8007890:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007892:	4b05      	ldr	r3, [pc, #20]	; (80078a8 <std+0x44>)
 8007894:	6224      	str	r4, [r4, #32]
 8007896:	6323      	str	r3, [r4, #48]	; 0x30
 8007898:	bd10      	pop	{r4, pc}
 800789a:	bf00      	nop
 800789c:	080082ed 	.word	0x080082ed
 80078a0:	0800830f 	.word	0x0800830f
 80078a4:	08008347 	.word	0x08008347
 80078a8:	0800836b 	.word	0x0800836b

080078ac <_cleanup_r>:
 80078ac:	4901      	ldr	r1, [pc, #4]	; (80078b4 <_cleanup_r+0x8>)
 80078ae:	f000 b8af 	b.w	8007a10 <_fwalk_reent>
 80078b2:	bf00      	nop
 80078b4:	080077ed 	.word	0x080077ed

080078b8 <__sfmoreglue>:
 80078b8:	b570      	push	{r4, r5, r6, lr}
 80078ba:	2268      	movs	r2, #104	; 0x68
 80078bc:	1e4d      	subs	r5, r1, #1
 80078be:	4355      	muls	r5, r2
 80078c0:	460e      	mov	r6, r1
 80078c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078c6:	f000 f99f 	bl	8007c08 <_malloc_r>
 80078ca:	4604      	mov	r4, r0
 80078cc:	b140      	cbz	r0, 80078e0 <__sfmoreglue+0x28>
 80078ce:	2100      	movs	r1, #0
 80078d0:	e9c0 1600 	strd	r1, r6, [r0]
 80078d4:	300c      	adds	r0, #12
 80078d6:	60a0      	str	r0, [r4, #8]
 80078d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078dc:	f7ff fcdc 	bl	8007298 <memset>
 80078e0:	4620      	mov	r0, r4
 80078e2:	bd70      	pop	{r4, r5, r6, pc}

080078e4 <__sfp_lock_acquire>:
 80078e4:	4801      	ldr	r0, [pc, #4]	; (80078ec <__sfp_lock_acquire+0x8>)
 80078e6:	f000 b8b3 	b.w	8007a50 <__retarget_lock_acquire_recursive>
 80078ea:	bf00      	nop
 80078ec:	200006fd 	.word	0x200006fd

080078f0 <__sfp_lock_release>:
 80078f0:	4801      	ldr	r0, [pc, #4]	; (80078f8 <__sfp_lock_release+0x8>)
 80078f2:	f000 b8ae 	b.w	8007a52 <__retarget_lock_release_recursive>
 80078f6:	bf00      	nop
 80078f8:	200006fd 	.word	0x200006fd

080078fc <__sinit_lock_acquire>:
 80078fc:	4801      	ldr	r0, [pc, #4]	; (8007904 <__sinit_lock_acquire+0x8>)
 80078fe:	f000 b8a7 	b.w	8007a50 <__retarget_lock_acquire_recursive>
 8007902:	bf00      	nop
 8007904:	200006fe 	.word	0x200006fe

08007908 <__sinit_lock_release>:
 8007908:	4801      	ldr	r0, [pc, #4]	; (8007910 <__sinit_lock_release+0x8>)
 800790a:	f000 b8a2 	b.w	8007a52 <__retarget_lock_release_recursive>
 800790e:	bf00      	nop
 8007910:	200006fe 	.word	0x200006fe

08007914 <__sinit>:
 8007914:	b510      	push	{r4, lr}
 8007916:	4604      	mov	r4, r0
 8007918:	f7ff fff0 	bl	80078fc <__sinit_lock_acquire>
 800791c:	69a3      	ldr	r3, [r4, #24]
 800791e:	b11b      	cbz	r3, 8007928 <__sinit+0x14>
 8007920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007924:	f7ff bff0 	b.w	8007908 <__sinit_lock_release>
 8007928:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800792c:	6523      	str	r3, [r4, #80]	; 0x50
 800792e:	4b13      	ldr	r3, [pc, #76]	; (800797c <__sinit+0x68>)
 8007930:	4a13      	ldr	r2, [pc, #76]	; (8007980 <__sinit+0x6c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	62a2      	str	r2, [r4, #40]	; 0x28
 8007936:	42a3      	cmp	r3, r4
 8007938:	bf04      	itt	eq
 800793a:	2301      	moveq	r3, #1
 800793c:	61a3      	streq	r3, [r4, #24]
 800793e:	4620      	mov	r0, r4
 8007940:	f000 f820 	bl	8007984 <__sfp>
 8007944:	6060      	str	r0, [r4, #4]
 8007946:	4620      	mov	r0, r4
 8007948:	f000 f81c 	bl	8007984 <__sfp>
 800794c:	60a0      	str	r0, [r4, #8]
 800794e:	4620      	mov	r0, r4
 8007950:	f000 f818 	bl	8007984 <__sfp>
 8007954:	2200      	movs	r2, #0
 8007956:	60e0      	str	r0, [r4, #12]
 8007958:	2104      	movs	r1, #4
 800795a:	6860      	ldr	r0, [r4, #4]
 800795c:	f7ff ff82 	bl	8007864 <std>
 8007960:	68a0      	ldr	r0, [r4, #8]
 8007962:	2201      	movs	r2, #1
 8007964:	2109      	movs	r1, #9
 8007966:	f7ff ff7d 	bl	8007864 <std>
 800796a:	68e0      	ldr	r0, [r4, #12]
 800796c:	2202      	movs	r2, #2
 800796e:	2112      	movs	r1, #18
 8007970:	f7ff ff78 	bl	8007864 <std>
 8007974:	2301      	movs	r3, #1
 8007976:	61a3      	str	r3, [r4, #24]
 8007978:	e7d2      	b.n	8007920 <__sinit+0xc>
 800797a:	bf00      	nop
 800797c:	080089c8 	.word	0x080089c8
 8007980:	080078ad 	.word	0x080078ad

08007984 <__sfp>:
 8007984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007986:	4607      	mov	r7, r0
 8007988:	f7ff ffac 	bl	80078e4 <__sfp_lock_acquire>
 800798c:	4b1e      	ldr	r3, [pc, #120]	; (8007a08 <__sfp+0x84>)
 800798e:	681e      	ldr	r6, [r3, #0]
 8007990:	69b3      	ldr	r3, [r6, #24]
 8007992:	b913      	cbnz	r3, 800799a <__sfp+0x16>
 8007994:	4630      	mov	r0, r6
 8007996:	f7ff ffbd 	bl	8007914 <__sinit>
 800799a:	3648      	adds	r6, #72	; 0x48
 800799c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80079a0:	3b01      	subs	r3, #1
 80079a2:	d503      	bpl.n	80079ac <__sfp+0x28>
 80079a4:	6833      	ldr	r3, [r6, #0]
 80079a6:	b30b      	cbz	r3, 80079ec <__sfp+0x68>
 80079a8:	6836      	ldr	r6, [r6, #0]
 80079aa:	e7f7      	b.n	800799c <__sfp+0x18>
 80079ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80079b0:	b9d5      	cbnz	r5, 80079e8 <__sfp+0x64>
 80079b2:	4b16      	ldr	r3, [pc, #88]	; (8007a0c <__sfp+0x88>)
 80079b4:	60e3      	str	r3, [r4, #12]
 80079b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80079ba:	6665      	str	r5, [r4, #100]	; 0x64
 80079bc:	f000 f847 	bl	8007a4e <__retarget_lock_init_recursive>
 80079c0:	f7ff ff96 	bl	80078f0 <__sfp_lock_release>
 80079c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80079c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80079cc:	6025      	str	r5, [r4, #0]
 80079ce:	61a5      	str	r5, [r4, #24]
 80079d0:	2208      	movs	r2, #8
 80079d2:	4629      	mov	r1, r5
 80079d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079d8:	f7ff fc5e 	bl	8007298 <memset>
 80079dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079e4:	4620      	mov	r0, r4
 80079e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079e8:	3468      	adds	r4, #104	; 0x68
 80079ea:	e7d9      	b.n	80079a0 <__sfp+0x1c>
 80079ec:	2104      	movs	r1, #4
 80079ee:	4638      	mov	r0, r7
 80079f0:	f7ff ff62 	bl	80078b8 <__sfmoreglue>
 80079f4:	4604      	mov	r4, r0
 80079f6:	6030      	str	r0, [r6, #0]
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d1d5      	bne.n	80079a8 <__sfp+0x24>
 80079fc:	f7ff ff78 	bl	80078f0 <__sfp_lock_release>
 8007a00:	230c      	movs	r3, #12
 8007a02:	603b      	str	r3, [r7, #0]
 8007a04:	e7ee      	b.n	80079e4 <__sfp+0x60>
 8007a06:	bf00      	nop
 8007a08:	080089c8 	.word	0x080089c8
 8007a0c:	ffff0001 	.word	0xffff0001

08007a10 <_fwalk_reent>:
 8007a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a14:	4606      	mov	r6, r0
 8007a16:	4688      	mov	r8, r1
 8007a18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a1c:	2700      	movs	r7, #0
 8007a1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a22:	f1b9 0901 	subs.w	r9, r9, #1
 8007a26:	d505      	bpl.n	8007a34 <_fwalk_reent+0x24>
 8007a28:	6824      	ldr	r4, [r4, #0]
 8007a2a:	2c00      	cmp	r4, #0
 8007a2c:	d1f7      	bne.n	8007a1e <_fwalk_reent+0xe>
 8007a2e:	4638      	mov	r0, r7
 8007a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a34:	89ab      	ldrh	r3, [r5, #12]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d907      	bls.n	8007a4a <_fwalk_reent+0x3a>
 8007a3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	d003      	beq.n	8007a4a <_fwalk_reent+0x3a>
 8007a42:	4629      	mov	r1, r5
 8007a44:	4630      	mov	r0, r6
 8007a46:	47c0      	blx	r8
 8007a48:	4307      	orrs	r7, r0
 8007a4a:	3568      	adds	r5, #104	; 0x68
 8007a4c:	e7e9      	b.n	8007a22 <_fwalk_reent+0x12>

08007a4e <__retarget_lock_init_recursive>:
 8007a4e:	4770      	bx	lr

08007a50 <__retarget_lock_acquire_recursive>:
 8007a50:	4770      	bx	lr

08007a52 <__retarget_lock_release_recursive>:
 8007a52:	4770      	bx	lr

08007a54 <__swhatbuf_r>:
 8007a54:	b570      	push	{r4, r5, r6, lr}
 8007a56:	460e      	mov	r6, r1
 8007a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a5c:	2900      	cmp	r1, #0
 8007a5e:	b096      	sub	sp, #88	; 0x58
 8007a60:	4614      	mov	r4, r2
 8007a62:	461d      	mov	r5, r3
 8007a64:	da08      	bge.n	8007a78 <__swhatbuf_r+0x24>
 8007a66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	602a      	str	r2, [r5, #0]
 8007a6e:	061a      	lsls	r2, r3, #24
 8007a70:	d410      	bmi.n	8007a94 <__swhatbuf_r+0x40>
 8007a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a76:	e00e      	b.n	8007a96 <__swhatbuf_r+0x42>
 8007a78:	466a      	mov	r2, sp
 8007a7a:	f000 fc9d 	bl	80083b8 <_fstat_r>
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	dbf1      	blt.n	8007a66 <__swhatbuf_r+0x12>
 8007a82:	9a01      	ldr	r2, [sp, #4]
 8007a84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a8c:	425a      	negs	r2, r3
 8007a8e:	415a      	adcs	r2, r3
 8007a90:	602a      	str	r2, [r5, #0]
 8007a92:	e7ee      	b.n	8007a72 <__swhatbuf_r+0x1e>
 8007a94:	2340      	movs	r3, #64	; 0x40
 8007a96:	2000      	movs	r0, #0
 8007a98:	6023      	str	r3, [r4, #0]
 8007a9a:	b016      	add	sp, #88	; 0x58
 8007a9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007aa0 <__smakebuf_r>:
 8007aa0:	898b      	ldrh	r3, [r1, #12]
 8007aa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007aa4:	079d      	lsls	r5, r3, #30
 8007aa6:	4606      	mov	r6, r0
 8007aa8:	460c      	mov	r4, r1
 8007aaa:	d507      	bpl.n	8007abc <__smakebuf_r+0x1c>
 8007aac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ab0:	6023      	str	r3, [r4, #0]
 8007ab2:	6123      	str	r3, [r4, #16]
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	6163      	str	r3, [r4, #20]
 8007ab8:	b002      	add	sp, #8
 8007aba:	bd70      	pop	{r4, r5, r6, pc}
 8007abc:	ab01      	add	r3, sp, #4
 8007abe:	466a      	mov	r2, sp
 8007ac0:	f7ff ffc8 	bl	8007a54 <__swhatbuf_r>
 8007ac4:	9900      	ldr	r1, [sp, #0]
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	4630      	mov	r0, r6
 8007aca:	f000 f89d 	bl	8007c08 <_malloc_r>
 8007ace:	b948      	cbnz	r0, 8007ae4 <__smakebuf_r+0x44>
 8007ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ad4:	059a      	lsls	r2, r3, #22
 8007ad6:	d4ef      	bmi.n	8007ab8 <__smakebuf_r+0x18>
 8007ad8:	f023 0303 	bic.w	r3, r3, #3
 8007adc:	f043 0302 	orr.w	r3, r3, #2
 8007ae0:	81a3      	strh	r3, [r4, #12]
 8007ae2:	e7e3      	b.n	8007aac <__smakebuf_r+0xc>
 8007ae4:	4b0d      	ldr	r3, [pc, #52]	; (8007b1c <__smakebuf_r+0x7c>)
 8007ae6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ae8:	89a3      	ldrh	r3, [r4, #12]
 8007aea:	6020      	str	r0, [r4, #0]
 8007aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af0:	81a3      	strh	r3, [r4, #12]
 8007af2:	9b00      	ldr	r3, [sp, #0]
 8007af4:	6163      	str	r3, [r4, #20]
 8007af6:	9b01      	ldr	r3, [sp, #4]
 8007af8:	6120      	str	r0, [r4, #16]
 8007afa:	b15b      	cbz	r3, 8007b14 <__smakebuf_r+0x74>
 8007afc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b00:	4630      	mov	r0, r6
 8007b02:	f000 fc6b 	bl	80083dc <_isatty_r>
 8007b06:	b128      	cbz	r0, 8007b14 <__smakebuf_r+0x74>
 8007b08:	89a3      	ldrh	r3, [r4, #12]
 8007b0a:	f023 0303 	bic.w	r3, r3, #3
 8007b0e:	f043 0301 	orr.w	r3, r3, #1
 8007b12:	81a3      	strh	r3, [r4, #12]
 8007b14:	89a0      	ldrh	r0, [r4, #12]
 8007b16:	4305      	orrs	r5, r0
 8007b18:	81a5      	strh	r5, [r4, #12]
 8007b1a:	e7cd      	b.n	8007ab8 <__smakebuf_r+0x18>
 8007b1c:	080078ad 	.word	0x080078ad

08007b20 <malloc>:
 8007b20:	4b02      	ldr	r3, [pc, #8]	; (8007b2c <malloc+0xc>)
 8007b22:	4601      	mov	r1, r0
 8007b24:	6818      	ldr	r0, [r3, #0]
 8007b26:	f000 b86f 	b.w	8007c08 <_malloc_r>
 8007b2a:	bf00      	nop
 8007b2c:	2000000c 	.word	0x2000000c

08007b30 <_free_r>:
 8007b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b32:	2900      	cmp	r1, #0
 8007b34:	d044      	beq.n	8007bc0 <_free_r+0x90>
 8007b36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b3a:	9001      	str	r0, [sp, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f1a1 0404 	sub.w	r4, r1, #4
 8007b42:	bfb8      	it	lt
 8007b44:	18e4      	addlt	r4, r4, r3
 8007b46:	f000 fc6b 	bl	8008420 <__malloc_lock>
 8007b4a:	4a1e      	ldr	r2, [pc, #120]	; (8007bc4 <_free_r+0x94>)
 8007b4c:	9801      	ldr	r0, [sp, #4]
 8007b4e:	6813      	ldr	r3, [r2, #0]
 8007b50:	b933      	cbnz	r3, 8007b60 <_free_r+0x30>
 8007b52:	6063      	str	r3, [r4, #4]
 8007b54:	6014      	str	r4, [r2, #0]
 8007b56:	b003      	add	sp, #12
 8007b58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b5c:	f000 bc66 	b.w	800842c <__malloc_unlock>
 8007b60:	42a3      	cmp	r3, r4
 8007b62:	d908      	bls.n	8007b76 <_free_r+0x46>
 8007b64:	6825      	ldr	r5, [r4, #0]
 8007b66:	1961      	adds	r1, r4, r5
 8007b68:	428b      	cmp	r3, r1
 8007b6a:	bf01      	itttt	eq
 8007b6c:	6819      	ldreq	r1, [r3, #0]
 8007b6e:	685b      	ldreq	r3, [r3, #4]
 8007b70:	1949      	addeq	r1, r1, r5
 8007b72:	6021      	streq	r1, [r4, #0]
 8007b74:	e7ed      	b.n	8007b52 <_free_r+0x22>
 8007b76:	461a      	mov	r2, r3
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	b10b      	cbz	r3, 8007b80 <_free_r+0x50>
 8007b7c:	42a3      	cmp	r3, r4
 8007b7e:	d9fa      	bls.n	8007b76 <_free_r+0x46>
 8007b80:	6811      	ldr	r1, [r2, #0]
 8007b82:	1855      	adds	r5, r2, r1
 8007b84:	42a5      	cmp	r5, r4
 8007b86:	d10b      	bne.n	8007ba0 <_free_r+0x70>
 8007b88:	6824      	ldr	r4, [r4, #0]
 8007b8a:	4421      	add	r1, r4
 8007b8c:	1854      	adds	r4, r2, r1
 8007b8e:	42a3      	cmp	r3, r4
 8007b90:	6011      	str	r1, [r2, #0]
 8007b92:	d1e0      	bne.n	8007b56 <_free_r+0x26>
 8007b94:	681c      	ldr	r4, [r3, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	6053      	str	r3, [r2, #4]
 8007b9a:	4421      	add	r1, r4
 8007b9c:	6011      	str	r1, [r2, #0]
 8007b9e:	e7da      	b.n	8007b56 <_free_r+0x26>
 8007ba0:	d902      	bls.n	8007ba8 <_free_r+0x78>
 8007ba2:	230c      	movs	r3, #12
 8007ba4:	6003      	str	r3, [r0, #0]
 8007ba6:	e7d6      	b.n	8007b56 <_free_r+0x26>
 8007ba8:	6825      	ldr	r5, [r4, #0]
 8007baa:	1961      	adds	r1, r4, r5
 8007bac:	428b      	cmp	r3, r1
 8007bae:	bf04      	itt	eq
 8007bb0:	6819      	ldreq	r1, [r3, #0]
 8007bb2:	685b      	ldreq	r3, [r3, #4]
 8007bb4:	6063      	str	r3, [r4, #4]
 8007bb6:	bf04      	itt	eq
 8007bb8:	1949      	addeq	r1, r1, r5
 8007bba:	6021      	streq	r1, [r4, #0]
 8007bbc:	6054      	str	r4, [r2, #4]
 8007bbe:	e7ca      	b.n	8007b56 <_free_r+0x26>
 8007bc0:	b003      	add	sp, #12
 8007bc2:	bd30      	pop	{r4, r5, pc}
 8007bc4:	20000700 	.word	0x20000700

08007bc8 <sbrk_aligned>:
 8007bc8:	b570      	push	{r4, r5, r6, lr}
 8007bca:	4e0e      	ldr	r6, [pc, #56]	; (8007c04 <sbrk_aligned+0x3c>)
 8007bcc:	460c      	mov	r4, r1
 8007bce:	6831      	ldr	r1, [r6, #0]
 8007bd0:	4605      	mov	r5, r0
 8007bd2:	b911      	cbnz	r1, 8007bda <sbrk_aligned+0x12>
 8007bd4:	f000 fb7a 	bl	80082cc <_sbrk_r>
 8007bd8:	6030      	str	r0, [r6, #0]
 8007bda:	4621      	mov	r1, r4
 8007bdc:	4628      	mov	r0, r5
 8007bde:	f000 fb75 	bl	80082cc <_sbrk_r>
 8007be2:	1c43      	adds	r3, r0, #1
 8007be4:	d00a      	beq.n	8007bfc <sbrk_aligned+0x34>
 8007be6:	1cc4      	adds	r4, r0, #3
 8007be8:	f024 0403 	bic.w	r4, r4, #3
 8007bec:	42a0      	cmp	r0, r4
 8007bee:	d007      	beq.n	8007c00 <sbrk_aligned+0x38>
 8007bf0:	1a21      	subs	r1, r4, r0
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f000 fb6a 	bl	80082cc <_sbrk_r>
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d101      	bne.n	8007c00 <sbrk_aligned+0x38>
 8007bfc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007c00:	4620      	mov	r0, r4
 8007c02:	bd70      	pop	{r4, r5, r6, pc}
 8007c04:	20000704 	.word	0x20000704

08007c08 <_malloc_r>:
 8007c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0c:	1ccd      	adds	r5, r1, #3
 8007c0e:	f025 0503 	bic.w	r5, r5, #3
 8007c12:	3508      	adds	r5, #8
 8007c14:	2d0c      	cmp	r5, #12
 8007c16:	bf38      	it	cc
 8007c18:	250c      	movcc	r5, #12
 8007c1a:	2d00      	cmp	r5, #0
 8007c1c:	4607      	mov	r7, r0
 8007c1e:	db01      	blt.n	8007c24 <_malloc_r+0x1c>
 8007c20:	42a9      	cmp	r1, r5
 8007c22:	d905      	bls.n	8007c30 <_malloc_r+0x28>
 8007c24:	230c      	movs	r3, #12
 8007c26:	603b      	str	r3, [r7, #0]
 8007c28:	2600      	movs	r6, #0
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c30:	4e2e      	ldr	r6, [pc, #184]	; (8007cec <_malloc_r+0xe4>)
 8007c32:	f000 fbf5 	bl	8008420 <__malloc_lock>
 8007c36:	6833      	ldr	r3, [r6, #0]
 8007c38:	461c      	mov	r4, r3
 8007c3a:	bb34      	cbnz	r4, 8007c8a <_malloc_r+0x82>
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	4638      	mov	r0, r7
 8007c40:	f7ff ffc2 	bl	8007bc8 <sbrk_aligned>
 8007c44:	1c43      	adds	r3, r0, #1
 8007c46:	4604      	mov	r4, r0
 8007c48:	d14d      	bne.n	8007ce6 <_malloc_r+0xde>
 8007c4a:	6834      	ldr	r4, [r6, #0]
 8007c4c:	4626      	mov	r6, r4
 8007c4e:	2e00      	cmp	r6, #0
 8007c50:	d140      	bne.n	8007cd4 <_malloc_r+0xcc>
 8007c52:	6823      	ldr	r3, [r4, #0]
 8007c54:	4631      	mov	r1, r6
 8007c56:	4638      	mov	r0, r7
 8007c58:	eb04 0803 	add.w	r8, r4, r3
 8007c5c:	f000 fb36 	bl	80082cc <_sbrk_r>
 8007c60:	4580      	cmp	r8, r0
 8007c62:	d13a      	bne.n	8007cda <_malloc_r+0xd2>
 8007c64:	6821      	ldr	r1, [r4, #0]
 8007c66:	3503      	adds	r5, #3
 8007c68:	1a6d      	subs	r5, r5, r1
 8007c6a:	f025 0503 	bic.w	r5, r5, #3
 8007c6e:	3508      	adds	r5, #8
 8007c70:	2d0c      	cmp	r5, #12
 8007c72:	bf38      	it	cc
 8007c74:	250c      	movcc	r5, #12
 8007c76:	4629      	mov	r1, r5
 8007c78:	4638      	mov	r0, r7
 8007c7a:	f7ff ffa5 	bl	8007bc8 <sbrk_aligned>
 8007c7e:	3001      	adds	r0, #1
 8007c80:	d02b      	beq.n	8007cda <_malloc_r+0xd2>
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	442b      	add	r3, r5
 8007c86:	6023      	str	r3, [r4, #0]
 8007c88:	e00e      	b.n	8007ca8 <_malloc_r+0xa0>
 8007c8a:	6822      	ldr	r2, [r4, #0]
 8007c8c:	1b52      	subs	r2, r2, r5
 8007c8e:	d41e      	bmi.n	8007cce <_malloc_r+0xc6>
 8007c90:	2a0b      	cmp	r2, #11
 8007c92:	d916      	bls.n	8007cc2 <_malloc_r+0xba>
 8007c94:	1961      	adds	r1, r4, r5
 8007c96:	42a3      	cmp	r3, r4
 8007c98:	6025      	str	r5, [r4, #0]
 8007c9a:	bf18      	it	ne
 8007c9c:	6059      	strne	r1, [r3, #4]
 8007c9e:	6863      	ldr	r3, [r4, #4]
 8007ca0:	bf08      	it	eq
 8007ca2:	6031      	streq	r1, [r6, #0]
 8007ca4:	5162      	str	r2, [r4, r5]
 8007ca6:	604b      	str	r3, [r1, #4]
 8007ca8:	4638      	mov	r0, r7
 8007caa:	f104 060b 	add.w	r6, r4, #11
 8007cae:	f000 fbbd 	bl	800842c <__malloc_unlock>
 8007cb2:	f026 0607 	bic.w	r6, r6, #7
 8007cb6:	1d23      	adds	r3, r4, #4
 8007cb8:	1af2      	subs	r2, r6, r3
 8007cba:	d0b6      	beq.n	8007c2a <_malloc_r+0x22>
 8007cbc:	1b9b      	subs	r3, r3, r6
 8007cbe:	50a3      	str	r3, [r4, r2]
 8007cc0:	e7b3      	b.n	8007c2a <_malloc_r+0x22>
 8007cc2:	6862      	ldr	r2, [r4, #4]
 8007cc4:	42a3      	cmp	r3, r4
 8007cc6:	bf0c      	ite	eq
 8007cc8:	6032      	streq	r2, [r6, #0]
 8007cca:	605a      	strne	r2, [r3, #4]
 8007ccc:	e7ec      	b.n	8007ca8 <_malloc_r+0xa0>
 8007cce:	4623      	mov	r3, r4
 8007cd0:	6864      	ldr	r4, [r4, #4]
 8007cd2:	e7b2      	b.n	8007c3a <_malloc_r+0x32>
 8007cd4:	4634      	mov	r4, r6
 8007cd6:	6876      	ldr	r6, [r6, #4]
 8007cd8:	e7b9      	b.n	8007c4e <_malloc_r+0x46>
 8007cda:	230c      	movs	r3, #12
 8007cdc:	603b      	str	r3, [r7, #0]
 8007cde:	4638      	mov	r0, r7
 8007ce0:	f000 fba4 	bl	800842c <__malloc_unlock>
 8007ce4:	e7a1      	b.n	8007c2a <_malloc_r+0x22>
 8007ce6:	6025      	str	r5, [r4, #0]
 8007ce8:	e7de      	b.n	8007ca8 <_malloc_r+0xa0>
 8007cea:	bf00      	nop
 8007cec:	20000700 	.word	0x20000700

08007cf0 <__sfputc_r>:
 8007cf0:	6893      	ldr	r3, [r2, #8]
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	b410      	push	{r4}
 8007cf8:	6093      	str	r3, [r2, #8]
 8007cfa:	da08      	bge.n	8007d0e <__sfputc_r+0x1e>
 8007cfc:	6994      	ldr	r4, [r2, #24]
 8007cfe:	42a3      	cmp	r3, r4
 8007d00:	db01      	blt.n	8007d06 <__sfputc_r+0x16>
 8007d02:	290a      	cmp	r1, #10
 8007d04:	d103      	bne.n	8007d0e <__sfputc_r+0x1e>
 8007d06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d0a:	f7ff bc29 	b.w	8007560 <__swbuf_r>
 8007d0e:	6813      	ldr	r3, [r2, #0]
 8007d10:	1c58      	adds	r0, r3, #1
 8007d12:	6010      	str	r0, [r2, #0]
 8007d14:	7019      	strb	r1, [r3, #0]
 8007d16:	4608      	mov	r0, r1
 8007d18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <__sfputs_r>:
 8007d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d20:	4606      	mov	r6, r0
 8007d22:	460f      	mov	r7, r1
 8007d24:	4614      	mov	r4, r2
 8007d26:	18d5      	adds	r5, r2, r3
 8007d28:	42ac      	cmp	r4, r5
 8007d2a:	d101      	bne.n	8007d30 <__sfputs_r+0x12>
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	e007      	b.n	8007d40 <__sfputs_r+0x22>
 8007d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d34:	463a      	mov	r2, r7
 8007d36:	4630      	mov	r0, r6
 8007d38:	f7ff ffda 	bl	8007cf0 <__sfputc_r>
 8007d3c:	1c43      	adds	r3, r0, #1
 8007d3e:	d1f3      	bne.n	8007d28 <__sfputs_r+0xa>
 8007d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d44 <_vfiprintf_r>:
 8007d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d48:	460d      	mov	r5, r1
 8007d4a:	b09d      	sub	sp, #116	; 0x74
 8007d4c:	4614      	mov	r4, r2
 8007d4e:	4698      	mov	r8, r3
 8007d50:	4606      	mov	r6, r0
 8007d52:	b118      	cbz	r0, 8007d5c <_vfiprintf_r+0x18>
 8007d54:	6983      	ldr	r3, [r0, #24]
 8007d56:	b90b      	cbnz	r3, 8007d5c <_vfiprintf_r+0x18>
 8007d58:	f7ff fddc 	bl	8007914 <__sinit>
 8007d5c:	4b89      	ldr	r3, [pc, #548]	; (8007f84 <_vfiprintf_r+0x240>)
 8007d5e:	429d      	cmp	r5, r3
 8007d60:	d11b      	bne.n	8007d9a <_vfiprintf_r+0x56>
 8007d62:	6875      	ldr	r5, [r6, #4]
 8007d64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d66:	07d9      	lsls	r1, r3, #31
 8007d68:	d405      	bmi.n	8007d76 <_vfiprintf_r+0x32>
 8007d6a:	89ab      	ldrh	r3, [r5, #12]
 8007d6c:	059a      	lsls	r2, r3, #22
 8007d6e:	d402      	bmi.n	8007d76 <_vfiprintf_r+0x32>
 8007d70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d72:	f7ff fe6d 	bl	8007a50 <__retarget_lock_acquire_recursive>
 8007d76:	89ab      	ldrh	r3, [r5, #12]
 8007d78:	071b      	lsls	r3, r3, #28
 8007d7a:	d501      	bpl.n	8007d80 <_vfiprintf_r+0x3c>
 8007d7c:	692b      	ldr	r3, [r5, #16]
 8007d7e:	b9eb      	cbnz	r3, 8007dbc <_vfiprintf_r+0x78>
 8007d80:	4629      	mov	r1, r5
 8007d82:	4630      	mov	r0, r6
 8007d84:	f7ff fc3e 	bl	8007604 <__swsetup_r>
 8007d88:	b1c0      	cbz	r0, 8007dbc <_vfiprintf_r+0x78>
 8007d8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d8c:	07dc      	lsls	r4, r3, #31
 8007d8e:	d50e      	bpl.n	8007dae <_vfiprintf_r+0x6a>
 8007d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d94:	b01d      	add	sp, #116	; 0x74
 8007d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d9a:	4b7b      	ldr	r3, [pc, #492]	; (8007f88 <_vfiprintf_r+0x244>)
 8007d9c:	429d      	cmp	r5, r3
 8007d9e:	d101      	bne.n	8007da4 <_vfiprintf_r+0x60>
 8007da0:	68b5      	ldr	r5, [r6, #8]
 8007da2:	e7df      	b.n	8007d64 <_vfiprintf_r+0x20>
 8007da4:	4b79      	ldr	r3, [pc, #484]	; (8007f8c <_vfiprintf_r+0x248>)
 8007da6:	429d      	cmp	r5, r3
 8007da8:	bf08      	it	eq
 8007daa:	68f5      	ldreq	r5, [r6, #12]
 8007dac:	e7da      	b.n	8007d64 <_vfiprintf_r+0x20>
 8007dae:	89ab      	ldrh	r3, [r5, #12]
 8007db0:	0598      	lsls	r0, r3, #22
 8007db2:	d4ed      	bmi.n	8007d90 <_vfiprintf_r+0x4c>
 8007db4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007db6:	f7ff fe4c 	bl	8007a52 <__retarget_lock_release_recursive>
 8007dba:	e7e9      	b.n	8007d90 <_vfiprintf_r+0x4c>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8007dc0:	2320      	movs	r3, #32
 8007dc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dca:	2330      	movs	r3, #48	; 0x30
 8007dcc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f90 <_vfiprintf_r+0x24c>
 8007dd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dd4:	f04f 0901 	mov.w	r9, #1
 8007dd8:	4623      	mov	r3, r4
 8007dda:	469a      	mov	sl, r3
 8007ddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007de0:	b10a      	cbz	r2, 8007de6 <_vfiprintf_r+0xa2>
 8007de2:	2a25      	cmp	r2, #37	; 0x25
 8007de4:	d1f9      	bne.n	8007dda <_vfiprintf_r+0x96>
 8007de6:	ebba 0b04 	subs.w	fp, sl, r4
 8007dea:	d00b      	beq.n	8007e04 <_vfiprintf_r+0xc0>
 8007dec:	465b      	mov	r3, fp
 8007dee:	4622      	mov	r2, r4
 8007df0:	4629      	mov	r1, r5
 8007df2:	4630      	mov	r0, r6
 8007df4:	f7ff ff93 	bl	8007d1e <__sfputs_r>
 8007df8:	3001      	adds	r0, #1
 8007dfa:	f000 80aa 	beq.w	8007f52 <_vfiprintf_r+0x20e>
 8007dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e00:	445a      	add	r2, fp
 8007e02:	9209      	str	r2, [sp, #36]	; 0x24
 8007e04:	f89a 3000 	ldrb.w	r3, [sl]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f000 80a2 	beq.w	8007f52 <_vfiprintf_r+0x20e>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e18:	f10a 0a01 	add.w	sl, sl, #1
 8007e1c:	9304      	str	r3, [sp, #16]
 8007e1e:	9307      	str	r3, [sp, #28]
 8007e20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e24:	931a      	str	r3, [sp, #104]	; 0x68
 8007e26:	4654      	mov	r4, sl
 8007e28:	2205      	movs	r2, #5
 8007e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e2e:	4858      	ldr	r0, [pc, #352]	; (8007f90 <_vfiprintf_r+0x24c>)
 8007e30:	f7f8 f9ee 	bl	8000210 <memchr>
 8007e34:	9a04      	ldr	r2, [sp, #16]
 8007e36:	b9d8      	cbnz	r0, 8007e70 <_vfiprintf_r+0x12c>
 8007e38:	06d1      	lsls	r1, r2, #27
 8007e3a:	bf44      	itt	mi
 8007e3c:	2320      	movmi	r3, #32
 8007e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e42:	0713      	lsls	r3, r2, #28
 8007e44:	bf44      	itt	mi
 8007e46:	232b      	movmi	r3, #43	; 0x2b
 8007e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e50:	2b2a      	cmp	r3, #42	; 0x2a
 8007e52:	d015      	beq.n	8007e80 <_vfiprintf_r+0x13c>
 8007e54:	9a07      	ldr	r2, [sp, #28]
 8007e56:	4654      	mov	r4, sl
 8007e58:	2000      	movs	r0, #0
 8007e5a:	f04f 0c0a 	mov.w	ip, #10
 8007e5e:	4621      	mov	r1, r4
 8007e60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e64:	3b30      	subs	r3, #48	; 0x30
 8007e66:	2b09      	cmp	r3, #9
 8007e68:	d94e      	bls.n	8007f08 <_vfiprintf_r+0x1c4>
 8007e6a:	b1b0      	cbz	r0, 8007e9a <_vfiprintf_r+0x156>
 8007e6c:	9207      	str	r2, [sp, #28]
 8007e6e:	e014      	b.n	8007e9a <_vfiprintf_r+0x156>
 8007e70:	eba0 0308 	sub.w	r3, r0, r8
 8007e74:	fa09 f303 	lsl.w	r3, r9, r3
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	9304      	str	r3, [sp, #16]
 8007e7c:	46a2      	mov	sl, r4
 8007e7e:	e7d2      	b.n	8007e26 <_vfiprintf_r+0xe2>
 8007e80:	9b03      	ldr	r3, [sp, #12]
 8007e82:	1d19      	adds	r1, r3, #4
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	9103      	str	r1, [sp, #12]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	bfbb      	ittet	lt
 8007e8c:	425b      	neglt	r3, r3
 8007e8e:	f042 0202 	orrlt.w	r2, r2, #2
 8007e92:	9307      	strge	r3, [sp, #28]
 8007e94:	9307      	strlt	r3, [sp, #28]
 8007e96:	bfb8      	it	lt
 8007e98:	9204      	strlt	r2, [sp, #16]
 8007e9a:	7823      	ldrb	r3, [r4, #0]
 8007e9c:	2b2e      	cmp	r3, #46	; 0x2e
 8007e9e:	d10c      	bne.n	8007eba <_vfiprintf_r+0x176>
 8007ea0:	7863      	ldrb	r3, [r4, #1]
 8007ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ea4:	d135      	bne.n	8007f12 <_vfiprintf_r+0x1ce>
 8007ea6:	9b03      	ldr	r3, [sp, #12]
 8007ea8:	1d1a      	adds	r2, r3, #4
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	9203      	str	r2, [sp, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	bfb8      	it	lt
 8007eb2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007eb6:	3402      	adds	r4, #2
 8007eb8:	9305      	str	r3, [sp, #20]
 8007eba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007fa0 <_vfiprintf_r+0x25c>
 8007ebe:	7821      	ldrb	r1, [r4, #0]
 8007ec0:	2203      	movs	r2, #3
 8007ec2:	4650      	mov	r0, sl
 8007ec4:	f7f8 f9a4 	bl	8000210 <memchr>
 8007ec8:	b140      	cbz	r0, 8007edc <_vfiprintf_r+0x198>
 8007eca:	2340      	movs	r3, #64	; 0x40
 8007ecc:	eba0 000a 	sub.w	r0, r0, sl
 8007ed0:	fa03 f000 	lsl.w	r0, r3, r0
 8007ed4:	9b04      	ldr	r3, [sp, #16]
 8007ed6:	4303      	orrs	r3, r0
 8007ed8:	3401      	adds	r4, #1
 8007eda:	9304      	str	r3, [sp, #16]
 8007edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee0:	482c      	ldr	r0, [pc, #176]	; (8007f94 <_vfiprintf_r+0x250>)
 8007ee2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ee6:	2206      	movs	r2, #6
 8007ee8:	f7f8 f992 	bl	8000210 <memchr>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	d03f      	beq.n	8007f70 <_vfiprintf_r+0x22c>
 8007ef0:	4b29      	ldr	r3, [pc, #164]	; (8007f98 <_vfiprintf_r+0x254>)
 8007ef2:	bb1b      	cbnz	r3, 8007f3c <_vfiprintf_r+0x1f8>
 8007ef4:	9b03      	ldr	r3, [sp, #12]
 8007ef6:	3307      	adds	r3, #7
 8007ef8:	f023 0307 	bic.w	r3, r3, #7
 8007efc:	3308      	adds	r3, #8
 8007efe:	9303      	str	r3, [sp, #12]
 8007f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f02:	443b      	add	r3, r7
 8007f04:	9309      	str	r3, [sp, #36]	; 0x24
 8007f06:	e767      	b.n	8007dd8 <_vfiprintf_r+0x94>
 8007f08:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f0c:	460c      	mov	r4, r1
 8007f0e:	2001      	movs	r0, #1
 8007f10:	e7a5      	b.n	8007e5e <_vfiprintf_r+0x11a>
 8007f12:	2300      	movs	r3, #0
 8007f14:	3401      	adds	r4, #1
 8007f16:	9305      	str	r3, [sp, #20]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	f04f 0c0a 	mov.w	ip, #10
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f24:	3a30      	subs	r2, #48	; 0x30
 8007f26:	2a09      	cmp	r2, #9
 8007f28:	d903      	bls.n	8007f32 <_vfiprintf_r+0x1ee>
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d0c5      	beq.n	8007eba <_vfiprintf_r+0x176>
 8007f2e:	9105      	str	r1, [sp, #20]
 8007f30:	e7c3      	b.n	8007eba <_vfiprintf_r+0x176>
 8007f32:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f36:	4604      	mov	r4, r0
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e7f0      	b.n	8007f1e <_vfiprintf_r+0x1da>
 8007f3c:	ab03      	add	r3, sp, #12
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	462a      	mov	r2, r5
 8007f42:	4b16      	ldr	r3, [pc, #88]	; (8007f9c <_vfiprintf_r+0x258>)
 8007f44:	a904      	add	r1, sp, #16
 8007f46:	4630      	mov	r0, r6
 8007f48:	f3af 8000 	nop.w
 8007f4c:	4607      	mov	r7, r0
 8007f4e:	1c78      	adds	r0, r7, #1
 8007f50:	d1d6      	bne.n	8007f00 <_vfiprintf_r+0x1bc>
 8007f52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f54:	07d9      	lsls	r1, r3, #31
 8007f56:	d405      	bmi.n	8007f64 <_vfiprintf_r+0x220>
 8007f58:	89ab      	ldrh	r3, [r5, #12]
 8007f5a:	059a      	lsls	r2, r3, #22
 8007f5c:	d402      	bmi.n	8007f64 <_vfiprintf_r+0x220>
 8007f5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f60:	f7ff fd77 	bl	8007a52 <__retarget_lock_release_recursive>
 8007f64:	89ab      	ldrh	r3, [r5, #12]
 8007f66:	065b      	lsls	r3, r3, #25
 8007f68:	f53f af12 	bmi.w	8007d90 <_vfiprintf_r+0x4c>
 8007f6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f6e:	e711      	b.n	8007d94 <_vfiprintf_r+0x50>
 8007f70:	ab03      	add	r3, sp, #12
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	462a      	mov	r2, r5
 8007f76:	4b09      	ldr	r3, [pc, #36]	; (8007f9c <_vfiprintf_r+0x258>)
 8007f78:	a904      	add	r1, sp, #16
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	f000 f880 	bl	8008080 <_printf_i>
 8007f80:	e7e4      	b.n	8007f4c <_vfiprintf_r+0x208>
 8007f82:	bf00      	nop
 8007f84:	080089ec 	.word	0x080089ec
 8007f88:	08008a0c 	.word	0x08008a0c
 8007f8c:	080089cc 	.word	0x080089cc
 8007f90:	08008a2c 	.word	0x08008a2c
 8007f94:	08008a36 	.word	0x08008a36
 8007f98:	00000000 	.word	0x00000000
 8007f9c:	08007d1f 	.word	0x08007d1f
 8007fa0:	08008a32 	.word	0x08008a32

08007fa4 <_printf_common>:
 8007fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa8:	4616      	mov	r6, r2
 8007faa:	4699      	mov	r9, r3
 8007fac:	688a      	ldr	r2, [r1, #8]
 8007fae:	690b      	ldr	r3, [r1, #16]
 8007fb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	bfb8      	it	lt
 8007fb8:	4613      	movlt	r3, r2
 8007fba:	6033      	str	r3, [r6, #0]
 8007fbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fc0:	4607      	mov	r7, r0
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	b10a      	cbz	r2, 8007fca <_printf_common+0x26>
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	6033      	str	r3, [r6, #0]
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	0699      	lsls	r1, r3, #26
 8007fce:	bf42      	ittt	mi
 8007fd0:	6833      	ldrmi	r3, [r6, #0]
 8007fd2:	3302      	addmi	r3, #2
 8007fd4:	6033      	strmi	r3, [r6, #0]
 8007fd6:	6825      	ldr	r5, [r4, #0]
 8007fd8:	f015 0506 	ands.w	r5, r5, #6
 8007fdc:	d106      	bne.n	8007fec <_printf_common+0x48>
 8007fde:	f104 0a19 	add.w	sl, r4, #25
 8007fe2:	68e3      	ldr	r3, [r4, #12]
 8007fe4:	6832      	ldr	r2, [r6, #0]
 8007fe6:	1a9b      	subs	r3, r3, r2
 8007fe8:	42ab      	cmp	r3, r5
 8007fea:	dc26      	bgt.n	800803a <_printf_common+0x96>
 8007fec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ff0:	1e13      	subs	r3, r2, #0
 8007ff2:	6822      	ldr	r2, [r4, #0]
 8007ff4:	bf18      	it	ne
 8007ff6:	2301      	movne	r3, #1
 8007ff8:	0692      	lsls	r2, r2, #26
 8007ffa:	d42b      	bmi.n	8008054 <_printf_common+0xb0>
 8007ffc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008000:	4649      	mov	r1, r9
 8008002:	4638      	mov	r0, r7
 8008004:	47c0      	blx	r8
 8008006:	3001      	adds	r0, #1
 8008008:	d01e      	beq.n	8008048 <_printf_common+0xa4>
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	68e5      	ldr	r5, [r4, #12]
 800800e:	6832      	ldr	r2, [r6, #0]
 8008010:	f003 0306 	and.w	r3, r3, #6
 8008014:	2b04      	cmp	r3, #4
 8008016:	bf08      	it	eq
 8008018:	1aad      	subeq	r5, r5, r2
 800801a:	68a3      	ldr	r3, [r4, #8]
 800801c:	6922      	ldr	r2, [r4, #16]
 800801e:	bf0c      	ite	eq
 8008020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008024:	2500      	movne	r5, #0
 8008026:	4293      	cmp	r3, r2
 8008028:	bfc4      	itt	gt
 800802a:	1a9b      	subgt	r3, r3, r2
 800802c:	18ed      	addgt	r5, r5, r3
 800802e:	2600      	movs	r6, #0
 8008030:	341a      	adds	r4, #26
 8008032:	42b5      	cmp	r5, r6
 8008034:	d11a      	bne.n	800806c <_printf_common+0xc8>
 8008036:	2000      	movs	r0, #0
 8008038:	e008      	b.n	800804c <_printf_common+0xa8>
 800803a:	2301      	movs	r3, #1
 800803c:	4652      	mov	r2, sl
 800803e:	4649      	mov	r1, r9
 8008040:	4638      	mov	r0, r7
 8008042:	47c0      	blx	r8
 8008044:	3001      	adds	r0, #1
 8008046:	d103      	bne.n	8008050 <_printf_common+0xac>
 8008048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800804c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008050:	3501      	adds	r5, #1
 8008052:	e7c6      	b.n	8007fe2 <_printf_common+0x3e>
 8008054:	18e1      	adds	r1, r4, r3
 8008056:	1c5a      	adds	r2, r3, #1
 8008058:	2030      	movs	r0, #48	; 0x30
 800805a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800805e:	4422      	add	r2, r4
 8008060:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008064:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008068:	3302      	adds	r3, #2
 800806a:	e7c7      	b.n	8007ffc <_printf_common+0x58>
 800806c:	2301      	movs	r3, #1
 800806e:	4622      	mov	r2, r4
 8008070:	4649      	mov	r1, r9
 8008072:	4638      	mov	r0, r7
 8008074:	47c0      	blx	r8
 8008076:	3001      	adds	r0, #1
 8008078:	d0e6      	beq.n	8008048 <_printf_common+0xa4>
 800807a:	3601      	adds	r6, #1
 800807c:	e7d9      	b.n	8008032 <_printf_common+0x8e>
	...

08008080 <_printf_i>:
 8008080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008084:	7e0f      	ldrb	r7, [r1, #24]
 8008086:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008088:	2f78      	cmp	r7, #120	; 0x78
 800808a:	4691      	mov	r9, r2
 800808c:	4680      	mov	r8, r0
 800808e:	460c      	mov	r4, r1
 8008090:	469a      	mov	sl, r3
 8008092:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008096:	d807      	bhi.n	80080a8 <_printf_i+0x28>
 8008098:	2f62      	cmp	r7, #98	; 0x62
 800809a:	d80a      	bhi.n	80080b2 <_printf_i+0x32>
 800809c:	2f00      	cmp	r7, #0
 800809e:	f000 80d8 	beq.w	8008252 <_printf_i+0x1d2>
 80080a2:	2f58      	cmp	r7, #88	; 0x58
 80080a4:	f000 80a3 	beq.w	80081ee <_printf_i+0x16e>
 80080a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80080b0:	e03a      	b.n	8008128 <_printf_i+0xa8>
 80080b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080b6:	2b15      	cmp	r3, #21
 80080b8:	d8f6      	bhi.n	80080a8 <_printf_i+0x28>
 80080ba:	a101      	add	r1, pc, #4	; (adr r1, 80080c0 <_printf_i+0x40>)
 80080bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080c0:	08008119 	.word	0x08008119
 80080c4:	0800812d 	.word	0x0800812d
 80080c8:	080080a9 	.word	0x080080a9
 80080cc:	080080a9 	.word	0x080080a9
 80080d0:	080080a9 	.word	0x080080a9
 80080d4:	080080a9 	.word	0x080080a9
 80080d8:	0800812d 	.word	0x0800812d
 80080dc:	080080a9 	.word	0x080080a9
 80080e0:	080080a9 	.word	0x080080a9
 80080e4:	080080a9 	.word	0x080080a9
 80080e8:	080080a9 	.word	0x080080a9
 80080ec:	08008239 	.word	0x08008239
 80080f0:	0800815d 	.word	0x0800815d
 80080f4:	0800821b 	.word	0x0800821b
 80080f8:	080080a9 	.word	0x080080a9
 80080fc:	080080a9 	.word	0x080080a9
 8008100:	0800825b 	.word	0x0800825b
 8008104:	080080a9 	.word	0x080080a9
 8008108:	0800815d 	.word	0x0800815d
 800810c:	080080a9 	.word	0x080080a9
 8008110:	080080a9 	.word	0x080080a9
 8008114:	08008223 	.word	0x08008223
 8008118:	682b      	ldr	r3, [r5, #0]
 800811a:	1d1a      	adds	r2, r3, #4
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	602a      	str	r2, [r5, #0]
 8008120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008128:	2301      	movs	r3, #1
 800812a:	e0a3      	b.n	8008274 <_printf_i+0x1f4>
 800812c:	6820      	ldr	r0, [r4, #0]
 800812e:	6829      	ldr	r1, [r5, #0]
 8008130:	0606      	lsls	r6, r0, #24
 8008132:	f101 0304 	add.w	r3, r1, #4
 8008136:	d50a      	bpl.n	800814e <_printf_i+0xce>
 8008138:	680e      	ldr	r6, [r1, #0]
 800813a:	602b      	str	r3, [r5, #0]
 800813c:	2e00      	cmp	r6, #0
 800813e:	da03      	bge.n	8008148 <_printf_i+0xc8>
 8008140:	232d      	movs	r3, #45	; 0x2d
 8008142:	4276      	negs	r6, r6
 8008144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008148:	485e      	ldr	r0, [pc, #376]	; (80082c4 <_printf_i+0x244>)
 800814a:	230a      	movs	r3, #10
 800814c:	e019      	b.n	8008182 <_printf_i+0x102>
 800814e:	680e      	ldr	r6, [r1, #0]
 8008150:	602b      	str	r3, [r5, #0]
 8008152:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008156:	bf18      	it	ne
 8008158:	b236      	sxthne	r6, r6
 800815a:	e7ef      	b.n	800813c <_printf_i+0xbc>
 800815c:	682b      	ldr	r3, [r5, #0]
 800815e:	6820      	ldr	r0, [r4, #0]
 8008160:	1d19      	adds	r1, r3, #4
 8008162:	6029      	str	r1, [r5, #0]
 8008164:	0601      	lsls	r1, r0, #24
 8008166:	d501      	bpl.n	800816c <_printf_i+0xec>
 8008168:	681e      	ldr	r6, [r3, #0]
 800816a:	e002      	b.n	8008172 <_printf_i+0xf2>
 800816c:	0646      	lsls	r6, r0, #25
 800816e:	d5fb      	bpl.n	8008168 <_printf_i+0xe8>
 8008170:	881e      	ldrh	r6, [r3, #0]
 8008172:	4854      	ldr	r0, [pc, #336]	; (80082c4 <_printf_i+0x244>)
 8008174:	2f6f      	cmp	r7, #111	; 0x6f
 8008176:	bf0c      	ite	eq
 8008178:	2308      	moveq	r3, #8
 800817a:	230a      	movne	r3, #10
 800817c:	2100      	movs	r1, #0
 800817e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008182:	6865      	ldr	r5, [r4, #4]
 8008184:	60a5      	str	r5, [r4, #8]
 8008186:	2d00      	cmp	r5, #0
 8008188:	bfa2      	ittt	ge
 800818a:	6821      	ldrge	r1, [r4, #0]
 800818c:	f021 0104 	bicge.w	r1, r1, #4
 8008190:	6021      	strge	r1, [r4, #0]
 8008192:	b90e      	cbnz	r6, 8008198 <_printf_i+0x118>
 8008194:	2d00      	cmp	r5, #0
 8008196:	d04d      	beq.n	8008234 <_printf_i+0x1b4>
 8008198:	4615      	mov	r5, r2
 800819a:	fbb6 f1f3 	udiv	r1, r6, r3
 800819e:	fb03 6711 	mls	r7, r3, r1, r6
 80081a2:	5dc7      	ldrb	r7, [r0, r7]
 80081a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80081a8:	4637      	mov	r7, r6
 80081aa:	42bb      	cmp	r3, r7
 80081ac:	460e      	mov	r6, r1
 80081ae:	d9f4      	bls.n	800819a <_printf_i+0x11a>
 80081b0:	2b08      	cmp	r3, #8
 80081b2:	d10b      	bne.n	80081cc <_printf_i+0x14c>
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	07de      	lsls	r6, r3, #31
 80081b8:	d508      	bpl.n	80081cc <_printf_i+0x14c>
 80081ba:	6923      	ldr	r3, [r4, #16]
 80081bc:	6861      	ldr	r1, [r4, #4]
 80081be:	4299      	cmp	r1, r3
 80081c0:	bfde      	ittt	le
 80081c2:	2330      	movle	r3, #48	; 0x30
 80081c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80081cc:	1b52      	subs	r2, r2, r5
 80081ce:	6122      	str	r2, [r4, #16]
 80081d0:	f8cd a000 	str.w	sl, [sp]
 80081d4:	464b      	mov	r3, r9
 80081d6:	aa03      	add	r2, sp, #12
 80081d8:	4621      	mov	r1, r4
 80081da:	4640      	mov	r0, r8
 80081dc:	f7ff fee2 	bl	8007fa4 <_printf_common>
 80081e0:	3001      	adds	r0, #1
 80081e2:	d14c      	bne.n	800827e <_printf_i+0x1fe>
 80081e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081e8:	b004      	add	sp, #16
 80081ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ee:	4835      	ldr	r0, [pc, #212]	; (80082c4 <_printf_i+0x244>)
 80081f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80081f4:	6829      	ldr	r1, [r5, #0]
 80081f6:	6823      	ldr	r3, [r4, #0]
 80081f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80081fc:	6029      	str	r1, [r5, #0]
 80081fe:	061d      	lsls	r5, r3, #24
 8008200:	d514      	bpl.n	800822c <_printf_i+0x1ac>
 8008202:	07df      	lsls	r7, r3, #31
 8008204:	bf44      	itt	mi
 8008206:	f043 0320 	orrmi.w	r3, r3, #32
 800820a:	6023      	strmi	r3, [r4, #0]
 800820c:	b91e      	cbnz	r6, 8008216 <_printf_i+0x196>
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	f023 0320 	bic.w	r3, r3, #32
 8008214:	6023      	str	r3, [r4, #0]
 8008216:	2310      	movs	r3, #16
 8008218:	e7b0      	b.n	800817c <_printf_i+0xfc>
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	f043 0320 	orr.w	r3, r3, #32
 8008220:	6023      	str	r3, [r4, #0]
 8008222:	2378      	movs	r3, #120	; 0x78
 8008224:	4828      	ldr	r0, [pc, #160]	; (80082c8 <_printf_i+0x248>)
 8008226:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800822a:	e7e3      	b.n	80081f4 <_printf_i+0x174>
 800822c:	0659      	lsls	r1, r3, #25
 800822e:	bf48      	it	mi
 8008230:	b2b6      	uxthmi	r6, r6
 8008232:	e7e6      	b.n	8008202 <_printf_i+0x182>
 8008234:	4615      	mov	r5, r2
 8008236:	e7bb      	b.n	80081b0 <_printf_i+0x130>
 8008238:	682b      	ldr	r3, [r5, #0]
 800823a:	6826      	ldr	r6, [r4, #0]
 800823c:	6961      	ldr	r1, [r4, #20]
 800823e:	1d18      	adds	r0, r3, #4
 8008240:	6028      	str	r0, [r5, #0]
 8008242:	0635      	lsls	r5, r6, #24
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	d501      	bpl.n	800824c <_printf_i+0x1cc>
 8008248:	6019      	str	r1, [r3, #0]
 800824a:	e002      	b.n	8008252 <_printf_i+0x1d2>
 800824c:	0670      	lsls	r0, r6, #25
 800824e:	d5fb      	bpl.n	8008248 <_printf_i+0x1c8>
 8008250:	8019      	strh	r1, [r3, #0]
 8008252:	2300      	movs	r3, #0
 8008254:	6123      	str	r3, [r4, #16]
 8008256:	4615      	mov	r5, r2
 8008258:	e7ba      	b.n	80081d0 <_printf_i+0x150>
 800825a:	682b      	ldr	r3, [r5, #0]
 800825c:	1d1a      	adds	r2, r3, #4
 800825e:	602a      	str	r2, [r5, #0]
 8008260:	681d      	ldr	r5, [r3, #0]
 8008262:	6862      	ldr	r2, [r4, #4]
 8008264:	2100      	movs	r1, #0
 8008266:	4628      	mov	r0, r5
 8008268:	f7f7 ffd2 	bl	8000210 <memchr>
 800826c:	b108      	cbz	r0, 8008272 <_printf_i+0x1f2>
 800826e:	1b40      	subs	r0, r0, r5
 8008270:	6060      	str	r0, [r4, #4]
 8008272:	6863      	ldr	r3, [r4, #4]
 8008274:	6123      	str	r3, [r4, #16]
 8008276:	2300      	movs	r3, #0
 8008278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800827c:	e7a8      	b.n	80081d0 <_printf_i+0x150>
 800827e:	6923      	ldr	r3, [r4, #16]
 8008280:	462a      	mov	r2, r5
 8008282:	4649      	mov	r1, r9
 8008284:	4640      	mov	r0, r8
 8008286:	47d0      	blx	sl
 8008288:	3001      	adds	r0, #1
 800828a:	d0ab      	beq.n	80081e4 <_printf_i+0x164>
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	079b      	lsls	r3, r3, #30
 8008290:	d413      	bmi.n	80082ba <_printf_i+0x23a>
 8008292:	68e0      	ldr	r0, [r4, #12]
 8008294:	9b03      	ldr	r3, [sp, #12]
 8008296:	4298      	cmp	r0, r3
 8008298:	bfb8      	it	lt
 800829a:	4618      	movlt	r0, r3
 800829c:	e7a4      	b.n	80081e8 <_printf_i+0x168>
 800829e:	2301      	movs	r3, #1
 80082a0:	4632      	mov	r2, r6
 80082a2:	4649      	mov	r1, r9
 80082a4:	4640      	mov	r0, r8
 80082a6:	47d0      	blx	sl
 80082a8:	3001      	adds	r0, #1
 80082aa:	d09b      	beq.n	80081e4 <_printf_i+0x164>
 80082ac:	3501      	adds	r5, #1
 80082ae:	68e3      	ldr	r3, [r4, #12]
 80082b0:	9903      	ldr	r1, [sp, #12]
 80082b2:	1a5b      	subs	r3, r3, r1
 80082b4:	42ab      	cmp	r3, r5
 80082b6:	dcf2      	bgt.n	800829e <_printf_i+0x21e>
 80082b8:	e7eb      	b.n	8008292 <_printf_i+0x212>
 80082ba:	2500      	movs	r5, #0
 80082bc:	f104 0619 	add.w	r6, r4, #25
 80082c0:	e7f5      	b.n	80082ae <_printf_i+0x22e>
 80082c2:	bf00      	nop
 80082c4:	08008a3d 	.word	0x08008a3d
 80082c8:	08008a4e 	.word	0x08008a4e

080082cc <_sbrk_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4d06      	ldr	r5, [pc, #24]	; (80082e8 <_sbrk_r+0x1c>)
 80082d0:	2300      	movs	r3, #0
 80082d2:	4604      	mov	r4, r0
 80082d4:	4608      	mov	r0, r1
 80082d6:	602b      	str	r3, [r5, #0]
 80082d8:	f7fa fc5c 	bl	8002b94 <_sbrk>
 80082dc:	1c43      	adds	r3, r0, #1
 80082de:	d102      	bne.n	80082e6 <_sbrk_r+0x1a>
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	b103      	cbz	r3, 80082e6 <_sbrk_r+0x1a>
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	bd38      	pop	{r3, r4, r5, pc}
 80082e8:	20000708 	.word	0x20000708

080082ec <__sread>:
 80082ec:	b510      	push	{r4, lr}
 80082ee:	460c      	mov	r4, r1
 80082f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f4:	f000 f8a0 	bl	8008438 <_read_r>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	bfab      	itete	ge
 80082fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082fe:	89a3      	ldrhlt	r3, [r4, #12]
 8008300:	181b      	addge	r3, r3, r0
 8008302:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008306:	bfac      	ite	ge
 8008308:	6563      	strge	r3, [r4, #84]	; 0x54
 800830a:	81a3      	strhlt	r3, [r4, #12]
 800830c:	bd10      	pop	{r4, pc}

0800830e <__swrite>:
 800830e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008312:	461f      	mov	r7, r3
 8008314:	898b      	ldrh	r3, [r1, #12]
 8008316:	05db      	lsls	r3, r3, #23
 8008318:	4605      	mov	r5, r0
 800831a:	460c      	mov	r4, r1
 800831c:	4616      	mov	r6, r2
 800831e:	d505      	bpl.n	800832c <__swrite+0x1e>
 8008320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008324:	2302      	movs	r3, #2
 8008326:	2200      	movs	r2, #0
 8008328:	f000 f868 	bl	80083fc <_lseek_r>
 800832c:	89a3      	ldrh	r3, [r4, #12]
 800832e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008332:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008336:	81a3      	strh	r3, [r4, #12]
 8008338:	4632      	mov	r2, r6
 800833a:	463b      	mov	r3, r7
 800833c:	4628      	mov	r0, r5
 800833e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008342:	f000 b817 	b.w	8008374 <_write_r>

08008346 <__sseek>:
 8008346:	b510      	push	{r4, lr}
 8008348:	460c      	mov	r4, r1
 800834a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800834e:	f000 f855 	bl	80083fc <_lseek_r>
 8008352:	1c43      	adds	r3, r0, #1
 8008354:	89a3      	ldrh	r3, [r4, #12]
 8008356:	bf15      	itete	ne
 8008358:	6560      	strne	r0, [r4, #84]	; 0x54
 800835a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800835e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008362:	81a3      	strheq	r3, [r4, #12]
 8008364:	bf18      	it	ne
 8008366:	81a3      	strhne	r3, [r4, #12]
 8008368:	bd10      	pop	{r4, pc}

0800836a <__sclose>:
 800836a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800836e:	f000 b813 	b.w	8008398 <_close_r>
	...

08008374 <_write_r>:
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	4d07      	ldr	r5, [pc, #28]	; (8008394 <_write_r+0x20>)
 8008378:	4604      	mov	r4, r0
 800837a:	4608      	mov	r0, r1
 800837c:	4611      	mov	r1, r2
 800837e:	2200      	movs	r2, #0
 8008380:	602a      	str	r2, [r5, #0]
 8008382:	461a      	mov	r2, r3
 8008384:	f7fa f990 	bl	80026a8 <_write>
 8008388:	1c43      	adds	r3, r0, #1
 800838a:	d102      	bne.n	8008392 <_write_r+0x1e>
 800838c:	682b      	ldr	r3, [r5, #0]
 800838e:	b103      	cbz	r3, 8008392 <_write_r+0x1e>
 8008390:	6023      	str	r3, [r4, #0]
 8008392:	bd38      	pop	{r3, r4, r5, pc}
 8008394:	20000708 	.word	0x20000708

08008398 <_close_r>:
 8008398:	b538      	push	{r3, r4, r5, lr}
 800839a:	4d06      	ldr	r5, [pc, #24]	; (80083b4 <_close_r+0x1c>)
 800839c:	2300      	movs	r3, #0
 800839e:	4604      	mov	r4, r0
 80083a0:	4608      	mov	r0, r1
 80083a2:	602b      	str	r3, [r5, #0]
 80083a4:	f7fa fbc1 	bl	8002b2a <_close>
 80083a8:	1c43      	adds	r3, r0, #1
 80083aa:	d102      	bne.n	80083b2 <_close_r+0x1a>
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	b103      	cbz	r3, 80083b2 <_close_r+0x1a>
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	bd38      	pop	{r3, r4, r5, pc}
 80083b4:	20000708 	.word	0x20000708

080083b8 <_fstat_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	4d07      	ldr	r5, [pc, #28]	; (80083d8 <_fstat_r+0x20>)
 80083bc:	2300      	movs	r3, #0
 80083be:	4604      	mov	r4, r0
 80083c0:	4608      	mov	r0, r1
 80083c2:	4611      	mov	r1, r2
 80083c4:	602b      	str	r3, [r5, #0]
 80083c6:	f7fa fbbc 	bl	8002b42 <_fstat>
 80083ca:	1c43      	adds	r3, r0, #1
 80083cc:	d102      	bne.n	80083d4 <_fstat_r+0x1c>
 80083ce:	682b      	ldr	r3, [r5, #0]
 80083d0:	b103      	cbz	r3, 80083d4 <_fstat_r+0x1c>
 80083d2:	6023      	str	r3, [r4, #0]
 80083d4:	bd38      	pop	{r3, r4, r5, pc}
 80083d6:	bf00      	nop
 80083d8:	20000708 	.word	0x20000708

080083dc <_isatty_r>:
 80083dc:	b538      	push	{r3, r4, r5, lr}
 80083de:	4d06      	ldr	r5, [pc, #24]	; (80083f8 <_isatty_r+0x1c>)
 80083e0:	2300      	movs	r3, #0
 80083e2:	4604      	mov	r4, r0
 80083e4:	4608      	mov	r0, r1
 80083e6:	602b      	str	r3, [r5, #0]
 80083e8:	f7fa fbbb 	bl	8002b62 <_isatty>
 80083ec:	1c43      	adds	r3, r0, #1
 80083ee:	d102      	bne.n	80083f6 <_isatty_r+0x1a>
 80083f0:	682b      	ldr	r3, [r5, #0]
 80083f2:	b103      	cbz	r3, 80083f6 <_isatty_r+0x1a>
 80083f4:	6023      	str	r3, [r4, #0]
 80083f6:	bd38      	pop	{r3, r4, r5, pc}
 80083f8:	20000708 	.word	0x20000708

080083fc <_lseek_r>:
 80083fc:	b538      	push	{r3, r4, r5, lr}
 80083fe:	4d07      	ldr	r5, [pc, #28]	; (800841c <_lseek_r+0x20>)
 8008400:	4604      	mov	r4, r0
 8008402:	4608      	mov	r0, r1
 8008404:	4611      	mov	r1, r2
 8008406:	2200      	movs	r2, #0
 8008408:	602a      	str	r2, [r5, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	f7fa fbb4 	bl	8002b78 <_lseek>
 8008410:	1c43      	adds	r3, r0, #1
 8008412:	d102      	bne.n	800841a <_lseek_r+0x1e>
 8008414:	682b      	ldr	r3, [r5, #0]
 8008416:	b103      	cbz	r3, 800841a <_lseek_r+0x1e>
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	bd38      	pop	{r3, r4, r5, pc}
 800841c:	20000708 	.word	0x20000708

08008420 <__malloc_lock>:
 8008420:	4801      	ldr	r0, [pc, #4]	; (8008428 <__malloc_lock+0x8>)
 8008422:	f7ff bb15 	b.w	8007a50 <__retarget_lock_acquire_recursive>
 8008426:	bf00      	nop
 8008428:	200006fc 	.word	0x200006fc

0800842c <__malloc_unlock>:
 800842c:	4801      	ldr	r0, [pc, #4]	; (8008434 <__malloc_unlock+0x8>)
 800842e:	f7ff bb10 	b.w	8007a52 <__retarget_lock_release_recursive>
 8008432:	bf00      	nop
 8008434:	200006fc 	.word	0x200006fc

08008438 <_read_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4d07      	ldr	r5, [pc, #28]	; (8008458 <_read_r+0x20>)
 800843c:	4604      	mov	r4, r0
 800843e:	4608      	mov	r0, r1
 8008440:	4611      	mov	r1, r2
 8008442:	2200      	movs	r2, #0
 8008444:	602a      	str	r2, [r5, #0]
 8008446:	461a      	mov	r2, r3
 8008448:	f7fa fb52 	bl	8002af0 <_read>
 800844c:	1c43      	adds	r3, r0, #1
 800844e:	d102      	bne.n	8008456 <_read_r+0x1e>
 8008450:	682b      	ldr	r3, [r5, #0]
 8008452:	b103      	cbz	r3, 8008456 <_read_r+0x1e>
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	bd38      	pop	{r3, r4, r5, pc}
 8008458:	20000708 	.word	0x20000708

0800845c <_init>:
 800845c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845e:	bf00      	nop
 8008460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008462:	bc08      	pop	{r3}
 8008464:	469e      	mov	lr, r3
 8008466:	4770      	bx	lr

08008468 <_fini>:
 8008468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846a:	bf00      	nop
 800846c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800846e:	bc08      	pop	{r3}
 8008470:	469e      	mov	lr, r3
 8008472:	4770      	bx	lr
