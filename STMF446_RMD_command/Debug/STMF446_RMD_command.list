
STMF446_RMD_command.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005470  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08005640  08005640  00015640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057b0  080057b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080057b0  080057b0  000157b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057b8  080057b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057b8  080057b8  000157b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057bc  080057bc  000157bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080057c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000070  08005830  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08005830  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c43f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db9  00000000  00000000  0002c4df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  0002e298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b0  00000000  00000000  0002ec00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000320b  00000000  00000000  0002f4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be07  00000000  00000000  000326bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd091  00000000  00000000  0003e4c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010b553  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e7c  00000000  00000000  0010b5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005628 	.word	0x08005628

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005628 	.word	0x08005628

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <RMDCommand>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void RMDCommand(uint8_t com){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	uint16_t canget_data[8];
	memset(RMDTx_can_data,0,sizeof(RMDTx_can_data));
 80005be:	2208      	movs	r2, #8
 80005c0:	2100      	movs	r1, #0
 80005c2:	489b      	ldr	r0, [pc, #620]	; (8000830 <RMDCommand+0x27c>)
 80005c4:	f003 ff4e 	bl	8004464 <memset>
	switch(com){
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	2ba7      	cmp	r3, #167	; 0xa7
 80005cc:	f300 8098 	bgt.w	8000700 <RMDCommand+0x14c>
 80005d0:	2b91      	cmp	r3, #145	; 0x91
 80005d2:	da09      	bge.n	80005e8 <RMDCommand+0x34>
 80005d4:	2b34      	cmp	r3, #52	; 0x34
 80005d6:	d057      	beq.n	8000688 <RMDCommand+0xd4>
 80005d8:	2b34      	cmp	r3, #52	; 0x34
 80005da:	f300 8091 	bgt.w	8000700 <RMDCommand+0x14c>
 80005de:	2b31      	cmp	r3, #49	; 0x31
 80005e0:	d038      	beq.n	8000654 <RMDCommand+0xa0>
 80005e2:	2b32      	cmp	r3, #50	; 0x32
 80005e4:	d03a      	beq.n	800065c <RMDCommand+0xa8>
			RMDTx_can_data[5] =RMD_data[5];
			RMDTx_can_data[6] =	0x00;
			RMDTx_can_data[7] = 0x00;
			break;
		default:
			break;
 80005e6:	e08b      	b.n	8000700 <RMDCommand+0x14c>
	switch(com){
 80005e8:	3b91      	subs	r3, #145	; 0x91
 80005ea:	2b16      	cmp	r3, #22
 80005ec:	f200 8088 	bhi.w	8000700 <RMDCommand+0x14c>
 80005f0:	a201      	add	r2, pc, #4	; (adr r2, 80005f8 <RMDCommand+0x44>)
 80005f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f6:	bf00      	nop
 80005f8:	08000691 	.word	0x08000691
 80005fc:	08000701 	.word	0x08000701
 8000600:	08000701 	.word	0x08000701
 8000604:	08000701 	.word	0x08000701
 8000608:	08000701 	.word	0x08000701
 800060c:	08000701 	.word	0x08000701
 8000610:	08000701 	.word	0x08000701
 8000614:	08000701 	.word	0x08000701
 8000618:	08000701 	.word	0x08000701
 800061c:	08000701 	.word	0x08000701
 8000620:	08000701 	.word	0x08000701
 8000624:	08000701 	.word	0x08000701
 8000628:	08000701 	.word	0x08000701
 800062c:	08000701 	.word	0x08000701
 8000630:	08000701 	.word	0x08000701
 8000634:	08000701 	.word	0x08000701
 8000638:	080006a7 	.word	0x080006a7
 800063c:	08000701 	.word	0x08000701
 8000640:	08000701 	.word	0x08000701
 8000644:	080006ad 	.word	0x080006ad
 8000648:	08000701 	.word	0x08000701
 800064c:	08000701 	.word	0x08000701
 8000650:	080006d1 	.word	0x080006d1
			RMDTx_can_data[0] = 0x31;	//PI設定
 8000654:	4b76      	ldr	r3, [pc, #472]	; (8000830 <RMDCommand+0x27c>)
 8000656:	2231      	movs	r2, #49	; 0x31
 8000658:	701a      	strb	r2, [r3, #0]
			break;
 800065a:	e052      	b.n	8000702 <RMDCommand+0x14e>
			RMDTx_can_data[0] = 0x32;	//PI設定
 800065c:	4b74      	ldr	r3, [pc, #464]	; (8000830 <RMDCommand+0x27c>)
 800065e:	2232      	movs	r2, #50	; 0x32
 8000660:	701a      	strb	r2, [r3, #0]
			RMDTx_can_data[2] = 0xC8;	//anglePidKp
 8000662:	4b73      	ldr	r3, [pc, #460]	; (8000830 <RMDCommand+0x27c>)
 8000664:	22c8      	movs	r2, #200	; 0xc8
 8000666:	709a      	strb	r2, [r3, #2]
			RMDTx_can_data[3] = 0x64;	//anglePidKi
 8000668:	4b71      	ldr	r3, [pc, #452]	; (8000830 <RMDCommand+0x27c>)
 800066a:	2264      	movs	r2, #100	; 0x64
 800066c:	70da      	strb	r2, [r3, #3]
			RMDTx_can_data[4] = 0x32;	//speedPidKp
 800066e:	4b70      	ldr	r3, [pc, #448]	; (8000830 <RMDCommand+0x27c>)
 8000670:	2232      	movs	r2, #50	; 0x32
 8000672:	711a      	strb	r2, [r3, #4]
			RMDTx_can_data[5] = 0x14;	//speedPidKi
 8000674:	4b6e      	ldr	r3, [pc, #440]	; (8000830 <RMDCommand+0x27c>)
 8000676:	2214      	movs	r2, #20
 8000678:	715a      	strb	r2, [r3, #5]
			RMDTx_can_data[6] = 0x32;	//iqPidKp
 800067a:	4b6d      	ldr	r3, [pc, #436]	; (8000830 <RMDCommand+0x27c>)
 800067c:	2232      	movs	r2, #50	; 0x32
 800067e:	719a      	strb	r2, [r3, #6]
			RMDTx_can_data[7] = 0x14;	//iqPidKi
 8000680:	4b6b      	ldr	r3, [pc, #428]	; (8000830 <RMDCommand+0x27c>)
 8000682:	2214      	movs	r2, #20
 8000684:	71da      	strb	r2, [r3, #7]
			break;
 8000686:	e03c      	b.n	8000702 <RMDCommand+0x14e>
			RMDTx_can_data[0] = 0x34;	//accelePI設定
 8000688:	4b69      	ldr	r3, [pc, #420]	; (8000830 <RMDCommand+0x27c>)
 800068a:	2234      	movs	r2, #52	; 0x34
 800068c:	701a      	strb	r2, [r3, #0]
			break;
 800068e:	e038      	b.n	8000702 <RMDCommand+0x14e>
			RMDTx_can_data[0] = 0x91;
 8000690:	4b67      	ldr	r3, [pc, #412]	; (8000830 <RMDCommand+0x27c>)
 8000692:	2291      	movs	r2, #145	; 0x91
 8000694:	701a      	strb	r2, [r3, #0]
			RMDTx_can_data[6] = RMD_data[6];
 8000696:	4b67      	ldr	r3, [pc, #412]	; (8000834 <RMDCommand+0x280>)
 8000698:	799a      	ldrb	r2, [r3, #6]
 800069a:	4b65      	ldr	r3, [pc, #404]	; (8000830 <RMDCommand+0x27c>)
 800069c:	719a      	strb	r2, [r3, #6]
			RMDTx_can_data[7] = RMD_data[7];
 800069e:	4b65      	ldr	r3, [pc, #404]	; (8000834 <RMDCommand+0x280>)
 80006a0:	79da      	ldrb	r2, [r3, #7]
 80006a2:	4b63      	ldr	r3, [pc, #396]	; (8000830 <RMDCommand+0x27c>)
 80006a4:	71da      	strb	r2, [r3, #7]
			RMDTx_can_data[0] = 0xA1;	//Torque設定
 80006a6:	4b62      	ldr	r3, [pc, #392]	; (8000830 <RMDCommand+0x27c>)
 80006a8:	22a1      	movs	r2, #161	; 0xa1
 80006aa:	701a      	strb	r2, [r3, #0]
			RMDTx_can_data[0] = 0xA4;
 80006ac:	4b60      	ldr	r3, [pc, #384]	; (8000830 <RMDCommand+0x27c>)
 80006ae:	22a4      	movs	r2, #164	; 0xa4
 80006b0:	701a      	strb	r2, [r3, #0]
			RMDTx_can_data[2] = 0x2C;	//speed low
 80006b2:	4b5f      	ldr	r3, [pc, #380]	; (8000830 <RMDCommand+0x27c>)
 80006b4:	222c      	movs	r2, #44	; 0x2c
 80006b6:	709a      	strb	r2, [r3, #2]
			RMDTx_can_data[3] = 0x01;	//speed high
 80006b8:	4b5d      	ldr	r3, [pc, #372]	; (8000830 <RMDCommand+0x27c>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	70da      	strb	r2, [r3, #3]
			RMDTx_can_data[4] =RMD_data[4];
 80006be:	4b5d      	ldr	r3, [pc, #372]	; (8000834 <RMDCommand+0x280>)
 80006c0:	791a      	ldrb	r2, [r3, #4]
 80006c2:	4b5b      	ldr	r3, [pc, #364]	; (8000830 <RMDCommand+0x27c>)
 80006c4:	711a      	strb	r2, [r3, #4]
			RMDTx_can_data[5] =RMD_data[5];
 80006c6:	4b5b      	ldr	r3, [pc, #364]	; (8000834 <RMDCommand+0x280>)
 80006c8:	795a      	ldrb	r2, [r3, #5]
 80006ca:	4b59      	ldr	r3, [pc, #356]	; (8000830 <RMDCommand+0x27c>)
 80006cc:	715a      	strb	r2, [r3, #5]
			break;
 80006ce:	e018      	b.n	8000702 <RMDCommand+0x14e>
			RMDTx_can_data[0] = 0xA7;
 80006d0:	4b57      	ldr	r3, [pc, #348]	; (8000830 <RMDCommand+0x27c>)
 80006d2:	22a7      	movs	r2, #167	; 0xa7
 80006d4:	701a      	strb	r2, [r3, #0]
			RMDTx_can_data[2] = 0x2C;	//speed low
 80006d6:	4b56      	ldr	r3, [pc, #344]	; (8000830 <RMDCommand+0x27c>)
 80006d8:	222c      	movs	r2, #44	; 0x2c
 80006da:	709a      	strb	r2, [r3, #2]
			RMDTx_can_data[3] = 0x01;	//speed high
 80006dc:	4b54      	ldr	r3, [pc, #336]	; (8000830 <RMDCommand+0x27c>)
 80006de:	2201      	movs	r2, #1
 80006e0:	70da      	strb	r2, [r3, #3]
			RMDTx_can_data[4] =RMD_data[4];
 80006e2:	4b54      	ldr	r3, [pc, #336]	; (8000834 <RMDCommand+0x280>)
 80006e4:	791a      	ldrb	r2, [r3, #4]
 80006e6:	4b52      	ldr	r3, [pc, #328]	; (8000830 <RMDCommand+0x27c>)
 80006e8:	711a      	strb	r2, [r3, #4]
			RMDTx_can_data[5] =RMD_data[5];
 80006ea:	4b52      	ldr	r3, [pc, #328]	; (8000834 <RMDCommand+0x280>)
 80006ec:	795a      	ldrb	r2, [r3, #5]
 80006ee:	4b50      	ldr	r3, [pc, #320]	; (8000830 <RMDCommand+0x27c>)
 80006f0:	715a      	strb	r2, [r3, #5]
			RMDTx_can_data[6] =	0x00;
 80006f2:	4b4f      	ldr	r3, [pc, #316]	; (8000830 <RMDCommand+0x27c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	719a      	strb	r2, [r3, #6]
			RMDTx_can_data[7] = 0x00;
 80006f8:	4b4d      	ldr	r3, [pc, #308]	; (8000830 <RMDCommand+0x27c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	71da      	strb	r2, [r3, #7]
			break;
 80006fe:	e000      	b.n	8000702 <RMDCommand+0x14e>
			break;
 8000700:	bf00      	nop
		}
	TxHeader.StdId=0x141;
 8000702:	4b4d      	ldr	r3, [pc, #308]	; (8000838 <RMDCommand+0x284>)
 8000704:	f240 1241 	movw	r2, #321	; 0x141
 8000708:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0x00;
 800070a:	4b4b      	ldr	r3, [pc, #300]	; (8000838 <RMDCommand+0x284>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8000710:	4b49      	ldr	r3, [pc, #292]	; (8000838 <RMDCommand+0x284>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 0x08;
 8000716:	4b48      	ldr	r3, [pc, #288]	; (8000838 <RMDCommand+0x284>)
 8000718:	2208      	movs	r2, #8
 800071a:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 800071c:	4b46      	ldr	r3, [pc, #280]	; (8000838 <RMDCommand+0x284>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000722:	4b45      	ldr	r3, [pc, #276]	; (8000838 <RMDCommand+0x284>)
 8000724:	2200      	movs	r2, #0
 8000726:	751a      	strb	r2, [r3, #20]
	nextcan_flag=0;
 8000728:	4b44      	ldr	r3, [pc, #272]	; (800083c <RMDCommand+0x288>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)<3){}
 800072e:	bf00      	nop
 8000730:	4843      	ldr	r0, [pc, #268]	; (8000840 <RMDCommand+0x28c>)
 8000732:	f001 f91e 	bl	8001972 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b02      	cmp	r3, #2
 800073a:	d9f9      	bls.n	8000730 <RMDCommand+0x17c>
	HAL_CAN_AddTxMessage(&hcan1,&TxHeader,RMDTx_can_data,&TxMailbox);
 800073c:	4b41      	ldr	r3, [pc, #260]	; (8000844 <RMDCommand+0x290>)
 800073e:	4a3c      	ldr	r2, [pc, #240]	; (8000830 <RMDCommand+0x27c>)
 8000740:	493d      	ldr	r1, [pc, #244]	; (8000838 <RMDCommand+0x284>)
 8000742:	483f      	ldr	r0, [pc, #252]	; (8000840 <RMDCommand+0x28c>)
 8000744:	f001 f83a 	bl	80017bc <HAL_CAN_AddTxMessage>
	HAL_Delay(10);
 8000748:	200a      	movs	r0, #10
 800074a:	f000 fdf3 	bl	8001334 <HAL_Delay>
	printf("HAL_CAN_AddTxMessager\r\n");
 800074e:	483e      	ldr	r0, [pc, #248]	; (8000848 <RMDCommand+0x294>)
 8000750:	f003 ff16 	bl	8004580 <puts>
	switch(com){
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	2ba7      	cmp	r3, #167	; 0xa7
 8000758:	f300 80dd 	bgt.w	8000916 <RMDCommand+0x362>
 800075c:	2b91      	cmp	r3, #145	; 0x91
 800075e:	da09      	bge.n	8000774 <RMDCommand+0x1c0>
 8000760:	2b34      	cmp	r3, #52	; 0x34
 8000762:	d05f      	beq.n	8000824 <RMDCommand+0x270>
 8000764:	2b34      	cmp	r3, #52	; 0x34
 8000766:	f300 80d6 	bgt.w	8000916 <RMDCommand+0x362>
 800076a:	2b31      	cmp	r3, #49	; 0x31
 800076c:	d038      	beq.n	80007e0 <RMDCommand+0x22c>
 800076e:	2b32      	cmp	r3, #50	; 0x32
 8000770:	d03b      	beq.n	80007ea <RMDCommand+0x236>
			canget_data[0] = RMDRx_can_data[0];
			canget_data[1] =(RMDRx_can_data[6]&0xFF) | ((RMDRx_can_data[7]&0xFF)<<8);
			printf("encoder_value : %d\r\n",canget_data[1]);
			break;
		default:
			break;
 8000772:	e0d0      	b.n	8000916 <RMDCommand+0x362>
	switch(com){
 8000774:	3b91      	subs	r3, #145	; 0x91
 8000776:	2b16      	cmp	r3, #22
 8000778:	f200 80cd 	bhi.w	8000916 <RMDCommand+0x362>
 800077c:	a201      	add	r2, pc, #4	; (adr r2, 8000784 <RMDCommand+0x1d0>)
 800077e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000782:	bf00      	nop
 8000784:	08000851 	.word	0x08000851
 8000788:	08000917 	.word	0x08000917
 800078c:	08000917 	.word	0x08000917
 8000790:	08000917 	.word	0x08000917
 8000794:	08000917 	.word	0x08000917
 8000798:	08000917 	.word	0x08000917
 800079c:	08000917 	.word	0x08000917
 80007a0:	08000917 	.word	0x08000917
 80007a4:	08000917 	.word	0x08000917
 80007a8:	08000917 	.word	0x08000917
 80007ac:	08000917 	.word	0x08000917
 80007b0:	08000917 	.word	0x08000917
 80007b4:	08000917 	.word	0x08000917
 80007b8:	08000917 	.word	0x08000917
 80007bc:	08000917 	.word	0x08000917
 80007c0:	08000917 	.word	0x08000917
 80007c4:	08000869 	.word	0x08000869
 80007c8:	08000917 	.word	0x08000917
 80007cc:	08000917 	.word	0x08000917
 80007d0:	08000871 	.word	0x08000871
 80007d4:	08000917 	.word	0x08000917
 80007d8:	08000917 	.word	0x08000917
 80007dc:	080008ed 	.word	0x080008ed
			canget_data[0] = RMDRx_can_data[0];	//PI設定
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <RMDCommand+0x298>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	813b      	strh	r3, [r7, #8]
			break;
 80007e8:	e096      	b.n	8000918 <RMDCommand+0x364>
			canget_data[0] = RMDRx_can_data[0];	//PI設定
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <RMDCommand+0x298>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	813b      	strh	r3, [r7, #8]
			canget_data[1] = RMDRx_can_data[1];	//anglePidKp
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <RMDCommand+0x298>)
 80007f4:	785b      	ldrb	r3, [r3, #1]
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	817b      	strh	r3, [r7, #10]
			canget_data[2] = RMDRx_can_data[2];	//anglePidKi
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <RMDCommand+0x298>)
 80007fc:	789b      	ldrb	r3, [r3, #2]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	81bb      	strh	r3, [r7, #12]
			canget_data[3] = RMDRx_can_data[3];	//speedPidKp
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <RMDCommand+0x298>)
 8000804:	78db      	ldrb	r3, [r3, #3]
 8000806:	b29b      	uxth	r3, r3
 8000808:	81fb      	strh	r3, [r7, #14]
			canget_data[4] = RMDRx_can_data[4];	//speedPidKi
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <RMDCommand+0x298>)
 800080c:	791b      	ldrb	r3, [r3, #4]
 800080e:	b29b      	uxth	r3, r3
 8000810:	823b      	strh	r3, [r7, #16]
			canget_data[5] = RMDRx_can_data[5];	//iqPidKp
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <RMDCommand+0x298>)
 8000814:	795b      	ldrb	r3, [r3, #5]
 8000816:	b29b      	uxth	r3, r3
 8000818:	827b      	strh	r3, [r7, #18]
			canget_data[6] = RMDRx_can_data[6];	//iqPidKi
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <RMDCommand+0x298>)
 800081c:	799b      	ldrb	r3, [r3, #6]
 800081e:	b29b      	uxth	r3, r3
 8000820:	82bb      	strh	r3, [r7, #20]
			break;
 8000822:	e079      	b.n	8000918 <RMDCommand+0x364>
			canget_data[0] = RMDRx_can_data[0];	//accelePI設定
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <RMDCommand+0x298>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b29b      	uxth	r3, r3
 800082a:	813b      	strh	r3, [r7, #8]
			break;
 800082c:	e074      	b.n	8000918 <RMDCommand+0x364>
 800082e:	bf00      	nop
 8000830:	20000164 	.word	0x20000164
 8000834:	20000174 	.word	0x20000174
 8000838:	20000120 	.word	0x20000120
 800083c:	2000017c 	.word	0x2000017c
 8000840:	2000008c 	.word	0x2000008c
 8000844:	2000016c 	.word	0x2000016c
 8000848:	08005640 	.word	0x08005640
 800084c:	2000015c 	.word	0x2000015c
			canget_data[0] = RMDRx_can_data[0];
 8000850:	4b34      	ldr	r3, [pc, #208]	; (8000924 <RMDCommand+0x370>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b29b      	uxth	r3, r3
 8000856:	813b      	strh	r3, [r7, #8]
			canget_data[1] = RMD_data[6];
 8000858:	4b33      	ldr	r3, [pc, #204]	; (8000928 <RMDCommand+0x374>)
 800085a:	799b      	ldrb	r3, [r3, #6]
 800085c:	b29b      	uxth	r3, r3
 800085e:	817b      	strh	r3, [r7, #10]
			canget_data[2] = RMD_data[7];
 8000860:	4b31      	ldr	r3, [pc, #196]	; (8000928 <RMDCommand+0x374>)
 8000862:	79db      	ldrb	r3, [r3, #7]
 8000864:	b29b      	uxth	r3, r3
 8000866:	81bb      	strh	r3, [r7, #12]
			canget_data[0] = RMDRx_can_data[0];	//Torque設定
 8000868:	4b2e      	ldr	r3, [pc, #184]	; (8000924 <RMDCommand+0x370>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b29b      	uxth	r3, r3
 800086e:	813b      	strh	r3, [r7, #8]
			canget_data[0] = RMDRx_can_data[0];
 8000870:	4b2c      	ldr	r3, [pc, #176]	; (8000924 <RMDCommand+0x370>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b29b      	uxth	r3, r3
 8000876:	813b      	strh	r3, [r7, #8]
			canget_data[1] = RMDRx_can_data[1];
 8000878:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <RMDCommand+0x370>)
 800087a:	785b      	ldrb	r3, [r3, #1]
 800087c:	b29b      	uxth	r3, r3
 800087e:	817b      	strh	r3, [r7, #10]
			canget_data[2] = (RMDRx_can_data[2]) | ((RMDRx_can_data[3])<<8);
 8000880:	4b28      	ldr	r3, [pc, #160]	; (8000924 <RMDCommand+0x370>)
 8000882:	789b      	ldrb	r3, [r3, #2]
 8000884:	b21a      	sxth	r2, r3
 8000886:	4b27      	ldr	r3, [pc, #156]	; (8000924 <RMDCommand+0x370>)
 8000888:	78db      	ldrb	r3, [r3, #3]
 800088a:	021b      	lsls	r3, r3, #8
 800088c:	b21b      	sxth	r3, r3
 800088e:	4313      	orrs	r3, r2
 8000890:	b21b      	sxth	r3, r3
 8000892:	b29b      	uxth	r3, r3
 8000894:	81bb      	strh	r3, [r7, #12]
			canget_data[3] = (RMDRx_can_data[4]) | ((RMDRx_can_data[5])<<8);
 8000896:	4b23      	ldr	r3, [pc, #140]	; (8000924 <RMDCommand+0x370>)
 8000898:	791b      	ldrb	r3, [r3, #4]
 800089a:	b21a      	sxth	r2, r3
 800089c:	4b21      	ldr	r3, [pc, #132]	; (8000924 <RMDCommand+0x370>)
 800089e:	795b      	ldrb	r3, [r3, #5]
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	b21b      	sxth	r3, r3
 80008a4:	4313      	orrs	r3, r2
 80008a6:	b21b      	sxth	r3, r3
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	81fb      	strh	r3, [r7, #14]
			canget_data[4] = (RMDRx_can_data[6]) | ((RMDRx_can_data[7])<<8);
 80008ac:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <RMDCommand+0x370>)
 80008ae:	799b      	ldrb	r3, [r3, #6]
 80008b0:	b21a      	sxth	r2, r3
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <RMDCommand+0x370>)
 80008b4:	79db      	ldrb	r3, [r3, #7]
 80008b6:	021b      	lsls	r3, r3, #8
 80008b8:	b21b      	sxth	r3, r3
 80008ba:	4313      	orrs	r3, r2
 80008bc:	b21b      	sxth	r3, r3
 80008be:	b29b      	uxth	r3, r3
 80008c0:	823b      	strh	r3, [r7, #16]
			printf("temp_value : %d\r\n",canget_data[1]);
 80008c2:	897b      	ldrh	r3, [r7, #10]
 80008c4:	4619      	mov	r1, r3
 80008c6:	4819      	ldr	r0, [pc, #100]	; (800092c <RMDCommand+0x378>)
 80008c8:	f003 fdd4 	bl	8004474 <iprintf>
			printf("torque_value : %d\r\n",canget_data[2]);
 80008cc:	89bb      	ldrh	r3, [r7, #12]
 80008ce:	4619      	mov	r1, r3
 80008d0:	4817      	ldr	r0, [pc, #92]	; (8000930 <RMDCommand+0x37c>)
 80008d2:	f003 fdcf 	bl	8004474 <iprintf>
			printf("speed_value : %d\r\n",canget_data[3]);
 80008d6:	89fb      	ldrh	r3, [r7, #14]
 80008d8:	4619      	mov	r1, r3
 80008da:	4816      	ldr	r0, [pc, #88]	; (8000934 <RMDCommand+0x380>)
 80008dc:	f003 fdca 	bl	8004474 <iprintf>
			printf("encoder_value : %d\r\n",canget_data[4]);
 80008e0:	8a3b      	ldrh	r3, [r7, #16]
 80008e2:	4619      	mov	r1, r3
 80008e4:	4814      	ldr	r0, [pc, #80]	; (8000938 <RMDCommand+0x384>)
 80008e6:	f003 fdc5 	bl	8004474 <iprintf>
			break;
 80008ea:	e015      	b.n	8000918 <RMDCommand+0x364>
			canget_data[0] = RMDRx_can_data[0];
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <RMDCommand+0x370>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	813b      	strh	r3, [r7, #8]
			canget_data[1] =(RMDRx_can_data[6]&0xFF) | ((RMDRx_can_data[7]&0xFF)<<8);
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <RMDCommand+0x370>)
 80008f6:	799b      	ldrb	r3, [r3, #6]
 80008f8:	b21a      	sxth	r2, r3
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <RMDCommand+0x370>)
 80008fc:	79db      	ldrb	r3, [r3, #7]
 80008fe:	021b      	lsls	r3, r3, #8
 8000900:	b21b      	sxth	r3, r3
 8000902:	4313      	orrs	r3, r2
 8000904:	b21b      	sxth	r3, r3
 8000906:	b29b      	uxth	r3, r3
 8000908:	817b      	strh	r3, [r7, #10]
			printf("encoder_value : %d\r\n",canget_data[1]);
 800090a:	897b      	ldrh	r3, [r7, #10]
 800090c:	4619      	mov	r1, r3
 800090e:	480a      	ldr	r0, [pc, #40]	; (8000938 <RMDCommand+0x384>)
 8000910:	f003 fdb0 	bl	8004474 <iprintf>
			break;
 8000914:	e000      	b.n	8000918 <RMDCommand+0x364>
			break;
 8000916:	bf00      	nop
		}

	com=0;
 8000918:	2300      	movs	r3, #0
 800091a:	71fb      	strb	r3, [r7, #7]
}
 800091c:	bf00      	nop
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	2000015c 	.word	0x2000015c
 8000928:	20000174 	.word	0x20000174
 800092c:	08005658 	.word	0x08005658
 8000930:	0800566c 	.word	0x0800566c
 8000934:	08005680 	.word	0x08005680
 8000938:	08005694 	.word	0x08005694

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8000942:	4b6a      	ldr	r3, [pc, #424]	; (8000aec <main+0x1b0>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f003 fe20 	bl	8004590 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000950:	f000 fc7e 	bl	8001250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000954:	f000 f8e8 	bl	8000b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000958:	f000 f9b2 	bl	8000cc0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800095c:	f000 f986 	bl	8000c6c <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000960:	f000 f94e 	bl	8000c00 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t com;
  sFilterConfig.FilterBank = 0;
 8000964:	4b62      	ldr	r3, [pc, #392]	; (8000af0 <main+0x1b4>)
 8000966:	2200      	movs	r2, #0
 8000968:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800096a:	4b61      	ldr	r3, [pc, #388]	; (8000af0 <main+0x1b4>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000970:	4b5f      	ldr	r3, [pc, #380]	; (8000af0 <main+0x1b4>)
 8000972:	2201      	movs	r2, #1
 8000974:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000976:	4b5e      	ldr	r3, [pc, #376]	; (8000af0 <main+0x1b4>)
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800097c:	4b5c      	ldr	r3, [pc, #368]	; (8000af0 <main+0x1b4>)
 800097e:	2200      	movs	r2, #0
 8000980:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000982:	4b5b      	ldr	r3, [pc, #364]	; (8000af0 <main+0x1b4>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000988:	4b59      	ldr	r3, [pc, #356]	; (8000af0 <main+0x1b4>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800098e:	4b58      	ldr	r3, [pc, #352]	; (8000af0 <main+0x1b4>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation=ENABLE;
 8000994:	4b56      	ldr	r3, [pc, #344]	; (8000af0 <main+0x1b4>)
 8000996:	2201      	movs	r2, #1
 8000998:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank=14;
 800099a:	4b55      	ldr	r3, [pc, #340]	; (8000af0 <main+0x1b4>)
 800099c:	220e      	movs	r2, #14
 800099e:	625a      	str	r2, [r3, #36]	; 0x24
  if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 80009a0:	4953      	ldr	r1, [pc, #332]	; (8000af0 <main+0x1b4>)
 80009a2:	4854      	ldr	r0, [pc, #336]	; (8000af4 <main+0x1b8>)
 80009a4:	f000 fde6 	bl	8001574 <HAL_CAN_ConfigFilter>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <main+0x76>
  {
	  Error_Handler();
 80009ae:	f000 fa57 	bl	8000e60 <Error_Handler>
  }
  if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 80009b2:	4850      	ldr	r0, [pc, #320]	; (8000af4 <main+0x1b8>)
 80009b4:	f000 febe 	bl	8001734 <HAL_CAN_Start>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <main+0x86>
  {
	  Error_Handler();
 80009be:	f000 fa4f 	bl	8000e60 <Error_Handler>
  }

  if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80009c2:	2103      	movs	r1, #3
 80009c4:	484b      	ldr	r0, [pc, #300]	; (8000af4 <main+0x1b8>)
 80009c6:	f001 f91b 	bl	8001c00 <HAL_CAN_ActivateNotification>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <main+0x98>
  {
	  Error_Handler();
 80009d0:	f000 fa46 	bl	8000e60 <Error_Handler>
  }
  HAL_UART_Receive_IT(&huart2, (uint8_t *)KeyCommand, 1);
 80009d4:	2201      	movs	r2, #1
 80009d6:	4948      	ldr	r1, [pc, #288]	; (8000af8 <main+0x1bc>)
 80009d8:	4848      	ldr	r0, [pc, #288]	; (8000afc <main+0x1c0>)
 80009da:	f002 fd80 	bl	80034de <HAL_UART_Receive_IT>
  printf("InIt end\r\n");
 80009de:	4848      	ldr	r0, [pc, #288]	; (8000b00 <main+0x1c4>)
 80009e0:	f003 fdce 	bl	8004580 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_uart_flag=0;
 80009e4:	4b47      	ldr	r3, [pc, #284]	; (8000b04 <main+0x1c8>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
	  //受信するまで待つ
	  printf("waiting...\r\n");
 80009ea:	4847      	ldr	r0, [pc, #284]	; (8000b08 <main+0x1cc>)
 80009ec:	f003 fdc8 	bl	8004580 <puts>
	  while(!get_uart_flag){}
 80009f0:	bf00      	nop
 80009f2:	4b44      	ldr	r3, [pc, #272]	; (8000b04 <main+0x1c8>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d0fb      	beq.n	80009f2 <main+0xb6>
	  if(KeyCommand[0]!=0 ){
 80009fa:	4b3f      	ldr	r3, [pc, #252]	; (8000af8 <main+0x1bc>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d072      	beq.n	8000ae8 <main+0x1ac>
		  switch(KeyCommand[0]){
 8000a02:	4b3d      	ldr	r3, [pc, #244]	; (8000af8 <main+0x1bc>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	3b30      	subs	r3, #48	; 0x30
 8000a08:	2b04      	cmp	r3, #4
 8000a0a:	d866      	bhi.n	8000ada <main+0x19e>
 8000a0c:	a201      	add	r2, pc, #4	; (adr r2, 8000a14 <main+0xd8>)
 8000a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a12:	bf00      	nop
 8000a14:	08000a29 	.word	0x08000a29
 8000a18:	08000a43 	.word	0x08000a43
 8000a1c:	08000a69 	.word	0x08000a69
 8000a20:	08000a8f 	.word	0x08000a8f
 8000a24:	08000ab5 	.word	0x08000ab5
		  case '0':
			  printf("case:0\r\n");
 8000a28:	4838      	ldr	r0, [pc, #224]	; (8000b0c <main+0x1d0>)
 8000a2a:	f003 fda9 	bl	8004580 <puts>
			  com=0x32;
 8000a2e:	2332      	movs	r3, #50	; 0x32
 8000a30:	71fb      	strb	r3, [r7, #7]
			  RMDCommand(com);
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fdbd 	bl	80005b4 <RMDCommand>
			  KeyCommand[0]=0;
 8000a3a:	4b2f      	ldr	r3, [pc, #188]	; (8000af8 <main+0x1bc>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
			  break;
 8000a40:	e053      	b.n	8000aea <main+0x1ae>
		  case'1':
			  printf("case:1\r\n");
 8000a42:	4833      	ldr	r0, [pc, #204]	; (8000b10 <main+0x1d4>)
 8000a44:	f003 fd9c 	bl	8004580 <puts>
			  com=0xA4;
 8000a48:	23a4      	movs	r3, #164	; 0xa4
 8000a4a:	71fb      	strb	r3, [r7, #7]
			  RMD_data[4] = 0x50;	//poslow
 8000a4c:	4b31      	ldr	r3, [pc, #196]	; (8000b14 <main+0x1d8>)
 8000a4e:	2250      	movs	r2, #80	; 0x50
 8000a50:	711a      	strb	r2, [r3, #4]
			  RMD_data[5] = 0x46;
 8000a52:	4b30      	ldr	r3, [pc, #192]	; (8000b14 <main+0x1d8>)
 8000a54:	2246      	movs	r2, #70	; 0x46
 8000a56:	715a      	strb	r2, [r3, #5]
			  RMDCommand(com);
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fdaa 	bl	80005b4 <RMDCommand>
			  KeyCommand[0]=0;
 8000a60:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <main+0x1bc>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
			  break;
 8000a66:	e040      	b.n	8000aea <main+0x1ae>
		  case'2':
			  printf("case:2\r\n");
 8000a68:	482b      	ldr	r0, [pc, #172]	; (8000b18 <main+0x1dc>)
 8000a6a:	f003 fd89 	bl	8004580 <puts>
			  com=0xA4;
 8000a6e:	23a4      	movs	r3, #164	; 0xa4
 8000a70:	71fb      	strb	r3, [r7, #7]
			  RMD_data[4] = 0x00;	//poslow
 8000a72:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <main+0x1d8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	711a      	strb	r2, [r3, #4]
			  RMD_data[5] = 0x00;
 8000a78:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <main+0x1d8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	715a      	strb	r2, [r3, #5]
			  RMDCommand(com);
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fd97 	bl	80005b4 <RMDCommand>
			  KeyCommand[0]=0;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <main+0x1bc>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
			  break;
 8000a8c:	e02d      	b.n	8000aea <main+0x1ae>
		  case'3':
			  printf("case:3\r\n");
 8000a8e:	4823      	ldr	r0, [pc, #140]	; (8000b1c <main+0x1e0>)
 8000a90:	f003 fd76 	bl	8004580 <puts>
			  com=0xA7;
 8000a94:	23a7      	movs	r3, #167	; 0xa7
 8000a96:	71fb      	strb	r3, [r7, #7]
			  RMD_data[4] = 0x50;	//poslow
 8000a98:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <main+0x1d8>)
 8000a9a:	2250      	movs	r2, #80	; 0x50
 8000a9c:	711a      	strb	r2, [r3, #4]
			  RMD_data[5] = 0x46;
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <main+0x1d8>)
 8000aa0:	2246      	movs	r2, #70	; 0x46
 8000aa2:	715a      	strb	r2, [r3, #5]
			  RMDCommand(com);
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fd84 	bl	80005b4 <RMDCommand>
			  KeyCommand[0]=0;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <main+0x1bc>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
			  break;
 8000ab2:	e01a      	b.n	8000aea <main+0x1ae>
		  case'4':
			  printf("case:4\r\n");
 8000ab4:	481a      	ldr	r0, [pc, #104]	; (8000b20 <main+0x1e4>)
 8000ab6:	f003 fd63 	bl	8004580 <puts>
			  com=0xA7;
 8000aba:	23a7      	movs	r3, #167	; 0xa7
 8000abc:	71fb      	strb	r3, [r7, #7]
			  RMD_data[4] = 0xE8;	//poslow
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <main+0x1d8>)
 8000ac0:	22e8      	movs	r2, #232	; 0xe8
 8000ac2:	711a      	strb	r2, [r3, #4]
			  RMD_data[5] = 0xE9;
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <main+0x1d8>)
 8000ac6:	22e9      	movs	r2, #233	; 0xe9
 8000ac8:	715a      	strb	r2, [r3, #5]
			  RMDCommand(com);
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fd71 	bl	80005b4 <RMDCommand>
			  KeyCommand[0]=0;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <main+0x1bc>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
			  break;
 8000ad8:	e007      	b.n	8000aea <main+0x1ae>
		  default:
			  KeyCommand[0]=0;
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <main+0x1bc>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
			  printf("No,command\r\n");
 8000ae0:	4810      	ldr	r0, [pc, #64]	; (8000b24 <main+0x1e8>)
 8000ae2:	f003 fd4d 	bl	8004580 <puts>
			  break;
 8000ae6:	e000      	b.n	8000aea <main+0x1ae>
		  }
	  }
 8000ae8:	bf00      	nop
	  get_uart_flag=0;
 8000aea:	e77b      	b.n	80009e4 <main+0xa8>
 8000aec:	2000000c 	.word	0x2000000c
 8000af0:	200000f8 	.word	0x200000f8
 8000af4:	2000008c 	.word	0x2000008c
 8000af8:	20000170 	.word	0x20000170
 8000afc:	200000b4 	.word	0x200000b4
 8000b00:	080056ac 	.word	0x080056ac
 8000b04:	20000171 	.word	0x20000171
 8000b08:	080056b8 	.word	0x080056b8
 8000b0c:	080056c4 	.word	0x080056c4
 8000b10:	080056cc 	.word	0x080056cc
 8000b14:	20000174 	.word	0x20000174
 8000b18:	080056d4 	.word	0x080056d4
 8000b1c:	080056dc 	.word	0x080056dc
 8000b20:	080056e4 	.word	0x080056e4
 8000b24:	080056ec 	.word	0x080056ec

08000b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b094      	sub	sp, #80	; 0x50
 8000b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	2234      	movs	r2, #52	; 0x34
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f003 fc94 	bl	8004464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b3c:	f107 0308 	add.w	r3, r7, #8
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <SystemClock_Config+0xd0>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	4a28      	ldr	r2, [pc, #160]	; (8000bf8 <SystemClock_Config+0xd0>)
 8000b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5c:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <SystemClock_Config+0xd0>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b68:	2300      	movs	r3, #0
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <SystemClock_Config+0xd4>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a22      	ldr	r2, [pc, #136]	; (8000bfc <SystemClock_Config+0xd4>)
 8000b72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b76:	6013      	str	r3, [r2, #0]
 8000b78:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <SystemClock_Config+0xd4>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b84:	2302      	movs	r3, #2
 8000b86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b90:	2302      	movs	r3, #2
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b94:	2300      	movs	r3, #0
 8000b96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b98:	2308      	movs	r3, #8
 8000b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000b9c:	23a0      	movs	r3, #160	; 0xa0
 8000b9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f002 f917 	bl	8002de4 <HAL_RCC_OscConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bbc:	f000 f950 	bl	8000e60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bcc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bd0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	2105      	movs	r1, #5
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 fdb6 	bl	8002750 <HAL_RCC_ClockConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bea:	f000 f939 	bl	8000e60 <Error_Handler>
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3750      	adds	r7, #80	; 0x50
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40007000 	.word	0x40007000

08000c00 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c04:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <MX_CAN1_Init+0x64>)
 8000c06:	4a18      	ldr	r2, [pc, #96]	; (8000c68 <MX_CAN1_Init+0x68>)
 8000c08:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <MX_CAN1_Init+0x64>)
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_CAN1_Init+0x64>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <MX_CAN1_Init+0x64>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_CAN1_Init+0x64>)
 8000c1e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000c22:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_CAN1_Init+0x64>)
 8000c26:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c2a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <MX_CAN1_Init+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_CAN1_Init+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <MX_CAN1_Init+0x64>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_CAN1_Init+0x64>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <MX_CAN1_Init+0x64>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_CAN1_Init+0x64>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c50:	4804      	ldr	r0, [pc, #16]	; (8000c64 <MX_CAN1_Init+0x64>)
 8000c52:	f000 fb93 	bl	800137c <HAL_CAN_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000c5c:	f000 f900 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	2000008c 	.word	0x2000008c
 8000c68:	40006400 	.word	0x40006400

08000c6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <MX_USART2_UART_Init+0x50>)
 8000c74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000ca4:	f002 fb3c 	bl	8003320 <HAL_UART_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cae:	f000 f8d7 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200000b4 	.word	0x200000b4
 8000cbc:	40004400 	.word	0x40004400

08000cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b37      	ldr	r3, [pc, #220]	; (8000db8 <MX_GPIO_Init+0xf8>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a36      	ldr	r2, [pc, #216]	; (8000db8 <MX_GPIO_Init+0xf8>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b34      	ldr	r3, [pc, #208]	; (8000db8 <MX_GPIO_Init+0xf8>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b30      	ldr	r3, [pc, #192]	; (8000db8 <MX_GPIO_Init+0xf8>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a2f      	ldr	r2, [pc, #188]	; (8000db8 <MX_GPIO_Init+0xf8>)
 8000cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <MX_GPIO_Init+0xf8>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <MX_GPIO_Init+0xf8>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a28      	ldr	r2, [pc, #160]	; (8000db8 <MX_GPIO_Init+0xf8>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <MX_GPIO_Init+0xf8>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <MX_GPIO_Init+0xf8>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a21      	ldr	r2, [pc, #132]	; (8000db8 <MX_GPIO_Init+0xf8>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <MX_GPIO_Init+0xf8>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2120      	movs	r1, #32
 8000d4a:	481c      	ldr	r0, [pc, #112]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000d4c:	f001 fce6 	bl	800271c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2110      	movs	r1, #16
 8000d54:	481a      	ldr	r0, [pc, #104]	; (8000dc0 <MX_GPIO_Init+0x100>)
 8000d56:	f001 fce1 	bl	800271c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d60:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4814      	ldr	r0, [pc, #80]	; (8000dc4 <MX_GPIO_Init+0x104>)
 8000d72:	f001 fb3f 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d76:	2320      	movs	r3, #32
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480b      	ldr	r0, [pc, #44]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000d8e:	f001 fb31 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d92:	2310      	movs	r3, #16
 8000d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_GPIO_Init+0x100>)
 8000daa:	f001 fb23 	bl	80023f4 <HAL_GPIO_Init>

}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	; 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020000 	.word	0x40020000
 8000dc0:	40020400 	.word	0x40020400
 8000dc4:	40020800 	.word	0x40020800

08000dc8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)	//printfに必要
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	230a      	movs	r3, #10
 8000dda:	68b9      	ldr	r1, [r7, #8]
 8000ddc:	4803      	ldr	r0, [pc, #12]	; (8000dec <_write+0x24>)
 8000dde:	f002 faec 	bl	80033ba <HAL_UART_Transmit>
  return len;
 8000de2:	687b      	ldr	r3, [r7, #4]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200000b4 	.word	0x200000b4

08000df0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef*UartHandle)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

//	HAL_UART_Transmit(&huart2,UART1_Data,1,1000);	//1byte受け取ったら次へ
	get_uart_flag=1;
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_UART_RxCpltCallback+0x20>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, (uint8_t *)KeyCommand, 1);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	4904      	ldr	r1, [pc, #16]	; (8000e14 <HAL_UART_RxCpltCallback+0x24>)
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <HAL_UART_RxCpltCallback+0x28>)
 8000e04:	f002 fb6b 	bl	80034de <HAL_UART_Receive_IT>

}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000171 	.word	0x20000171
 8000e14:	20000170 	.word	0x20000170
 8000e18:	200000b4 	.word	0x200000b4

08000e1c <HAL_CAN_RxFifo0MsgPendingCallback>:
{
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0, &RxHeader, canRxdata);
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000e26:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000e28:	2100      	movs	r1, #0
 8000e2a:	480b      	ldr	r0, [pc, #44]	; (8000e58 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000e2c:	f000 fdd6 	bl	80019dc <HAL_CAN_GetRxMessage>
	if(RxHeader.StdId==0x141){
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f240 1241 	movw	r2, #321	; 0x141
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d105      	bne.n	8000e48 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
		memcpy(RMDRx_can_data, canRxdata, 8);
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000e3e:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000e40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e44:	e883 0003 	stmia.w	r3, {r0, r1}
	}
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000154 	.word	0x20000154
 8000e54:	20000138 	.word	0x20000138
 8000e58:	2000008c 	.word	0x2000008c
 8000e5c:	2000015c 	.word	0x2000015c

08000e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e64:	b672      	cpsid	i
}
 8000e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("error\r\n");
 8000e68:	4801      	ldr	r0, [pc, #4]	; (8000e70 <Error_Handler+0x10>)
 8000e6a:	f003 fb89 	bl	8004580 <puts>
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <Error_Handler+0xe>
 8000e70:	080056f8 	.word	0x080056f8

08000e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <HAL_MspInit+0x4c>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <HAL_MspInit+0x4c>)
 8000e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e88:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <HAL_MspInit+0x4c>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	603b      	str	r3, [r7, #0]
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <HAL_MspInit+0x4c>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <HAL_MspInit+0x4c>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_MspInit+0x4c>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40023800 	.word	0x40023800

08000ec4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a2a      	ldr	r2, [pc, #168]	; (8000f8c <HAL_CAN_MspInit+0xc8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d14d      	bne.n	8000f82 <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	4b29      	ldr	r3, [pc, #164]	; (8000f90 <HAL_CAN_MspInit+0xcc>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a28      	ldr	r2, [pc, #160]	; (8000f90 <HAL_CAN_MspInit+0xcc>)
 8000ef0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b26      	ldr	r3, [pc, #152]	; (8000f90 <HAL_CAN_MspInit+0xcc>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <HAL_CAN_MspInit+0xcc>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a21      	ldr	r2, [pc, #132]	; (8000f90 <HAL_CAN_MspInit+0xcc>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <HAL_CAN_MspInit+0xcc>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f30:	2309      	movs	r3, #9
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4816      	ldr	r0, [pc, #88]	; (8000f94 <HAL_CAN_MspInit+0xd0>)
 8000f3c:	f001 fa5a 	bl	80023f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f52:	2309      	movs	r3, #9
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480d      	ldr	r0, [pc, #52]	; (8000f94 <HAL_CAN_MspInit+0xd0>)
 8000f5e:	f001 fa49 	bl	80023f4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2013      	movs	r0, #19
 8000f68:	f001 f97b 	bl	8002262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000f6c:	2013      	movs	r0, #19
 8000f6e:	f001 f994 	bl	800229a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	2014      	movs	r0, #20
 8000f78:	f001 f973 	bl	8002262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f7c:	2014      	movs	r0, #20
 8000f7e:	f001 f98c 	bl	800229a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f82:	bf00      	nop
 8000f84:	3728      	adds	r7, #40	; 0x28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40006400 	.word	0x40006400
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000

08000f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a1d      	ldr	r2, [pc, #116]	; (800102c <HAL_UART_MspInit+0x94>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d133      	bne.n	8001022 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <HAL_UART_MspInit+0x98>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a1b      	ldr	r2, [pc, #108]	; (8001030 <HAL_UART_MspInit+0x98>)
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b19      	ldr	r3, [pc, #100]	; (8001030 <HAL_UART_MspInit+0x98>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_UART_MspInit+0x98>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a14      	ldr	r2, [pc, #80]	; (8001030 <HAL_UART_MspInit+0x98>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_UART_MspInit+0x98>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ff2:	230c      	movs	r3, #12
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffe:	2303      	movs	r3, #3
 8001000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001002:	2307      	movs	r3, #7
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	4809      	ldr	r0, [pc, #36]	; (8001034 <HAL_UART_MspInit+0x9c>)
 800100e:	f001 f9f1 	bl	80023f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	2026      	movs	r0, #38	; 0x26
 8001018:	f001 f923 	bl	8002262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800101c:	2026      	movs	r0, #38	; 0x26
 800101e:	f001 f93c 	bl	800229a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	; 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40004400 	.word	0x40004400
 8001030:	40023800 	.word	0x40023800
 8001034:	40020000 	.word	0x40020000

08001038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800103c:	e7fe      	b.n	800103c <NMI_Handler+0x4>

0800103e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <MemManage_Handler+0x4>

0800104a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <BusFault_Handler+0x4>

08001050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <UsageFault_Handler+0x4>

08001056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001084:	f000 f936 	bl	80012f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <CAN1_TX_IRQHandler+0x10>)
 8001092:	f000 fddb 	bl	8001c4c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2000008c 	.word	0x2000008c

080010a0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <CAN1_RX0_IRQHandler+0x10>)
 80010a6:	f000 fdd1 	bl	8001c4c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000008c 	.word	0x2000008c

080010b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <USART2_IRQHandler+0x10>)
 80010ba:	f002 fa41 	bl	8003540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200000b4 	.word	0x200000b4

080010c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	e00a      	b.n	80010f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010da:	f3af 8000 	nop.w
 80010de:	4601      	mov	r1, r0
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	60ba      	str	r2, [r7, #8]
 80010e6:	b2ca      	uxtb	r2, r1
 80010e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	3301      	adds	r3, #1
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	dbf0      	blt.n	80010da <_read+0x12>
	}

return len;
 80010f8:	687b      	ldr	r3, [r7, #4]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
	return -1;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800112a:	605a      	str	r2, [r3, #4]
	return 0;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <_isatty>:

int _isatty(int file)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
	return 1;
 8001142:	2301      	movs	r3, #1
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
	return 0;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001174:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <_sbrk+0x5c>)
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <_sbrk+0x60>)
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d102      	bne.n	800118e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <_sbrk+0x64>)
 800118a:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <_sbrk+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	429a      	cmp	r2, r3
 800119a:	d207      	bcs.n	80011ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800119c:	f003 f938 	bl	8004410 <__errno>
 80011a0:	4603      	mov	r3, r0
 80011a2:	220c      	movs	r2, #12
 80011a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011aa:	e009      	b.n	80011c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <_sbrk+0x64>)
 80011bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20020000 	.word	0x20020000
 80011cc:	00000400 	.word	0x00000400
 80011d0:	20000180 	.word	0x20000180
 80011d4:	20000198 	.word	0x20000198

080011d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <SystemInit+0x20>)
 80011de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <SystemInit+0x20>)
 80011e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001234 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001200:	480d      	ldr	r0, [pc, #52]	; (8001238 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001202:	490e      	ldr	r1, [pc, #56]	; (800123c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001204:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001218:	4c0b      	ldr	r4, [pc, #44]	; (8001248 <LoopFillZerobss+0x26>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001226:	f7ff ffd7 	bl	80011d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122a:	f003 f8f7 	bl	800441c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122e:	f7ff fb85 	bl	800093c <main>
  bx  lr    
 8001232:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001234:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001240:	080057c0 	.word	0x080057c0
  ldr r2, =_sbss
 8001244:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001248:	20000198 	.word	0x20000198

0800124c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC_IRQHandler>
	...

08001250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <HAL_Init+0x40>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0d      	ldr	r2, [pc, #52]	; (8001290 <HAL_Init+0x40>)
 800125a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <HAL_Init+0x40>)
 8001266:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800126a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a07      	ldr	r2, [pc, #28]	; (8001290 <HAL_Init+0x40>)
 8001272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001276:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001278:	2003      	movs	r0, #3
 800127a:	f000 ffe7 	bl	800224c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127e:	2000      	movs	r0, #0
 8001280:	f000 f808 	bl	8001294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001284:	f7ff fdf6 	bl	8000e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023c00 	.word	0x40023c00

08001294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_InitTick+0x54>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_InitTick+0x58>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4619      	mov	r1, r3
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 ffff 	bl	80022b6 <HAL_SYSTICK_Config>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e00e      	b.n	80012e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b0f      	cmp	r3, #15
 80012c6:	d80a      	bhi.n	80012de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c8:	2200      	movs	r2, #0
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012d0:	f000 ffc7 	bl	8002262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d4:	4a06      	ldr	r2, [pc, #24]	; (80012f0 <HAL_InitTick+0x5c>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e000      	b.n	80012e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000000 	.word	0x20000000
 80012ec:	20000008 	.word	0x20000008
 80012f0:	20000004 	.word	0x20000004

080012f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_IncTick+0x20>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_IncTick+0x24>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4413      	add	r3, r2
 8001304:	4a04      	ldr	r2, [pc, #16]	; (8001318 <HAL_IncTick+0x24>)
 8001306:	6013      	str	r3, [r2, #0]
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000008 	.word	0x20000008
 8001318:	20000184 	.word	0x20000184

0800131c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return uwTick;
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <HAL_GetTick+0x14>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000184 	.word	0x20000184

08001334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800133c:	f7ff ffee 	bl	800131c <HAL_GetTick>
 8001340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800134c:	d005      	beq.n	800135a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <HAL_Delay+0x44>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800135a:	bf00      	nop
 800135c:	f7ff ffde 	bl	800131c <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	429a      	cmp	r2, r3
 800136a:	d8f7      	bhi.n	800135c <HAL_Delay+0x28>
  {
  }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000008 	.word	0x20000008

0800137c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e0ed      	b.n	800156a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d102      	bne.n	80013a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff fd92 	bl	8000ec4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0201 	orr.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013b0:	f7ff ffb4 	bl	800131c <HAL_GetTick>
 80013b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013b6:	e012      	b.n	80013de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013b8:	f7ff ffb0 	bl	800131c <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b0a      	cmp	r3, #10
 80013c4:	d90b      	bls.n	80013de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2205      	movs	r2, #5
 80013d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e0c5      	b.n	800156a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0e5      	beq.n	80013b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0202 	bic.w	r2, r2, #2
 80013fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013fc:	f7ff ff8e 	bl	800131c <HAL_GetTick>
 8001400:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001402:	e012      	b.n	800142a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001404:	f7ff ff8a 	bl	800131c <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b0a      	cmp	r3, #10
 8001410:	d90b      	bls.n	800142a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2205      	movs	r2, #5
 8001422:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e09f      	b.n	800156a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1e5      	bne.n	8001404 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7e1b      	ldrb	r3, [r3, #24]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d108      	bne.n	8001452 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	e007      	b.n	8001462 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001460:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7e5b      	ldrb	r3, [r3, #25]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d108      	bne.n	800147c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	e007      	b.n	800148c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800148a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	7e9b      	ldrb	r3, [r3, #26]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d108      	bne.n	80014a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0220 	orr.w	r2, r2, #32
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	e007      	b.n	80014b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 0220 	bic.w	r2, r2, #32
 80014b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	7edb      	ldrb	r3, [r3, #27]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d108      	bne.n	80014d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0210 	bic.w	r2, r2, #16
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	e007      	b.n	80014e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f042 0210 	orr.w	r2, r2, #16
 80014de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7f1b      	ldrb	r3, [r3, #28]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d108      	bne.n	80014fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 0208 	orr.w	r2, r2, #8
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	e007      	b.n	800150a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0208 	bic.w	r2, r2, #8
 8001508:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	7f5b      	ldrb	r3, [r3, #29]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d108      	bne.n	8001524 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f042 0204 	orr.w	r2, r2, #4
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	e007      	b.n	8001534 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0204 	bic.w	r2, r2, #4
 8001532:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	431a      	orrs	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	ea42 0103 	orr.w	r1, r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	1e5a      	subs	r2, r3, #1
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001574:	b480      	push	{r7}
 8001576:	b087      	sub	sp, #28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800158a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800158c:	7cfb      	ldrb	r3, [r7, #19]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d003      	beq.n	800159a <HAL_CAN_ConfigFilter+0x26>
 8001592:	7cfb      	ldrb	r3, [r7, #19]
 8001594:	2b02      	cmp	r3, #2
 8001596:	f040 80be 	bne.w	8001716 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800159a:	4b65      	ldr	r3, [pc, #404]	; (8001730 <HAL_CAN_ConfigFilter+0x1bc>)
 800159c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015a4:	f043 0201 	orr.w	r2, r3, #1
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	431a      	orrs	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	f003 031f 	and.w	r3, r3, #31
 80015da:	2201      	movs	r2, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	401a      	ands	r2, r3
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d123      	bne.n	8001644 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	43db      	mvns	r3, r3
 8001606:	401a      	ands	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800161e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	3248      	adds	r2, #72	; 0x48
 8001624:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001638:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800163a:	6979      	ldr	r1, [r7, #20]
 800163c:	3348      	adds	r3, #72	; 0x48
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	440b      	add	r3, r1
 8001642:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d122      	bne.n	8001692 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	431a      	orrs	r2, r3
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800166c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3248      	adds	r2, #72	; 0x48
 8001672:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001686:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001688:	6979      	ldr	r1, [r7, #20]
 800168a:	3348      	adds	r3, #72	; 0x48
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d109      	bne.n	80016ae <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	401a      	ands	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80016ac:	e007      	b.n	80016be <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	431a      	orrs	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d109      	bne.n	80016da <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	401a      	ands	r2, r3
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80016d8:	e007      	b.n	80016ea <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	431a      	orrs	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d107      	bne.n	8001702 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	431a      	orrs	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001708:	f023 0201 	bic.w	r2, r3, #1
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	e006      	b.n	8001724 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
  }
}
 8001724:	4618      	mov	r0, r3
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	40006400 	.word	0x40006400

08001734 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b01      	cmp	r3, #1
 8001746:	d12e      	bne.n	80017a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2202      	movs	r2, #2
 800174c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0201 	bic.w	r2, r2, #1
 800175e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001760:	f7ff fddc 	bl	800131c <HAL_GetTick>
 8001764:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001766:	e012      	b.n	800178e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001768:	f7ff fdd8 	bl	800131c <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b0a      	cmp	r3, #10
 8001774:	d90b      	bls.n	800178e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2205      	movs	r2, #5
 8001786:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e012      	b.n	80017b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1e5      	bne.n	8001768 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e006      	b.n	80017b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
  }
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80017bc:	b480      	push	{r7}
 80017be:	b089      	sub	sp, #36	; 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
 80017c8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80017da:	7ffb      	ldrb	r3, [r7, #31]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d003      	beq.n	80017e8 <HAL_CAN_AddTxMessage+0x2c>
 80017e0:	7ffb      	ldrb	r3, [r7, #31]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	f040 80b8 	bne.w	8001958 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10a      	bne.n	8001808 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d105      	bne.n	8001808 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001802:	2b00      	cmp	r3, #0
 8001804:	f000 80a0 	beq.w	8001948 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	0e1b      	lsrs	r3, r3, #24
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d907      	bls.n	8001828 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e09e      	b.n	8001966 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001828:	2201      	movs	r2, #1
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	409a      	lsls	r2, r3
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10d      	bne.n	8001856 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001844:	68f9      	ldr	r1, [r7, #12]
 8001846:	6809      	ldr	r1, [r1, #0]
 8001848:	431a      	orrs	r2, r3
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	3318      	adds	r3, #24
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	440b      	add	r3, r1
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	e00f      	b.n	8001876 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001860:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001866:	68f9      	ldr	r1, [r7, #12]
 8001868:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800186a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	3318      	adds	r3, #24
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	440b      	add	r3, r1
 8001874:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6819      	ldr	r1, [r3, #0]
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	691a      	ldr	r2, [r3, #16]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	3318      	adds	r3, #24
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	440b      	add	r3, r1
 8001886:	3304      	adds	r3, #4
 8001888:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	7d1b      	ldrb	r3, [r3, #20]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d111      	bne.n	80018b6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3318      	adds	r3, #24
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	4413      	add	r3, r2
 800189e:	3304      	adds	r3, #4
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	6811      	ldr	r1, [r2, #0]
 80018a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	3318      	adds	r3, #24
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	440b      	add	r3, r1
 80018b2:	3304      	adds	r3, #4
 80018b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3307      	adds	r3, #7
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	061a      	lsls	r2, r3, #24
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3306      	adds	r3, #6
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3305      	adds	r3, #5
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	4313      	orrs	r3, r2
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	3204      	adds	r2, #4
 80018d6:	7812      	ldrb	r2, [r2, #0]
 80018d8:	4610      	mov	r0, r2
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	6811      	ldr	r1, [r2, #0]
 80018de:	ea43 0200 	orr.w	r2, r3, r0
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	440b      	add	r3, r1
 80018e8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80018ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3303      	adds	r3, #3
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	061a      	lsls	r2, r3, #24
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3302      	adds	r3, #2
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	041b      	lsls	r3, r3, #16
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3301      	adds	r3, #1
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	021b      	lsls	r3, r3, #8
 8001908:	4313      	orrs	r3, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	7812      	ldrb	r2, [r2, #0]
 800190e:	4610      	mov	r0, r2
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	6811      	ldr	r1, [r2, #0]
 8001914:	ea43 0200 	orr.w	r2, r3, r0
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	440b      	add	r3, r1
 800191e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001922:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3318      	adds	r3, #24
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	4413      	add	r3, r2
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	6811      	ldr	r1, [r2, #0]
 8001936:	f043 0201 	orr.w	r2, r3, #1
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3318      	adds	r3, #24
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	440b      	add	r3, r1
 8001942:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	e00e      	b.n	8001966 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e006      	b.n	8001966 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
  }
}
 8001966:	4618      	mov	r0, r3
 8001968:	3724      	adds	r7, #36	; 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001972:	b480      	push	{r7}
 8001974:	b085      	sub	sp, #20
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001984:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001986:	7afb      	ldrb	r3, [r7, #11]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d002      	beq.n	8001992 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800198c:	7afb      	ldrb	r3, [r7, #11]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d11d      	bne.n	80019ce <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d002      	beq.n	80019a6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3301      	adds	r3, #1
 80019a4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	3301      	adds	r3, #1
 80019b8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	3301      	adds	r3, #1
 80019cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80019dc:	b480      	push	{r7}
 80019de:	b087      	sub	sp, #28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019f0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80019f2:	7dfb      	ldrb	r3, [r7, #23]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d003      	beq.n	8001a00 <HAL_CAN_GetRxMessage+0x24>
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	f040 80f3 	bne.w	8001be6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10e      	bne.n	8001a24 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d116      	bne.n	8001a42 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0e7      	b.n	8001bf4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d107      	bne.n	8001a42 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0d8      	b.n	8001bf4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	331b      	adds	r3, #27
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	4413      	add	r3, r2
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0204 	and.w	r2, r3, #4
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10c      	bne.n	8001a7a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	331b      	adds	r3, #27
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	4413      	add	r3, r2
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	0d5b      	lsrs	r3, r3, #21
 8001a70:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	e00b      	b.n	8001a92 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	331b      	adds	r3, #27
 8001a82:	011b      	lsls	r3, r3, #4
 8001a84:	4413      	add	r3, r2
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	08db      	lsrs	r3, r3, #3
 8001a8a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	331b      	adds	r3, #27
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	4413      	add	r3, r2
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0202 	and.w	r2, r3, #2
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	331b      	adds	r3, #27
 8001ab0:	011b      	lsls	r3, r3, #4
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 020f 	and.w	r2, r3, #15
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	331b      	adds	r3, #27
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	4413      	add	r3, r2
 8001acc:	3304      	adds	r3, #4
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	331b      	adds	r3, #27
 8001ae0:	011b      	lsls	r3, r3, #4
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	0c1b      	lsrs	r3, r3, #16
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	4413      	add	r3, r2
 8001afa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	011b      	lsls	r3, r3, #4
 8001b0e:	4413      	add	r3, r2
 8001b10:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	0a1a      	lsrs	r2, r3, #8
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	011b      	lsls	r3, r3, #4
 8001b28:	4413      	add	r3, r2
 8001b2a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0c1a      	lsrs	r2, r3, #16
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	3302      	adds	r3, #2
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	4413      	add	r3, r2
 8001b44:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	0e1a      	lsrs	r2, r3, #24
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	3303      	adds	r3, #3
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	3304      	adds	r3, #4
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	4413      	add	r3, r2
 8001b76:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0a1a      	lsrs	r2, r3, #8
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	3305      	adds	r3, #5
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	011b      	lsls	r3, r3, #4
 8001b8e:	4413      	add	r3, r2
 8001b90:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	0c1a      	lsrs	r2, r3, #16
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	3306      	adds	r3, #6
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	4413      	add	r3, r2
 8001baa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	0e1a      	lsrs	r2, r3, #24
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	3307      	adds	r3, #7
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d108      	bne.n	8001bd2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0220 	orr.w	r2, r2, #32
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	e007      	b.n	8001be2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	691a      	ldr	r2, [r3, #16]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0220 	orr.w	r2, r2, #32
 8001be0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e006      	b.n	8001bf4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
  }
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	371c      	adds	r7, #28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c10:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d002      	beq.n	8001c1e <HAL_CAN_ActivateNotification+0x1e>
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d109      	bne.n	8001c32 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6959      	ldr	r1, [r3, #20]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e006      	b.n	8001c40 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
  }
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d07c      	beq.n	8001d8c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d023      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f983 	bl	8001fba <HAL_CAN_TxMailbox0CompleteCallback>
 8001cb4:	e016      	b.n	8001ce4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d004      	beq.n	8001cca <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc8:	e00c      	b.n	8001ce4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d004      	beq.n	8001cde <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
 8001cdc:	e002      	b.n	8001ce4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f989 	bl	8001ff6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d024      	beq.n	8001d38 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cf6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f963 	bl	8001fce <HAL_CAN_TxMailbox1CompleteCallback>
 8001d08:	e016      	b.n	8001d38 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d004      	beq.n	8001d1e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1c:	e00c      	b.n	8001d38 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d004      	beq.n	8001d32 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d30:	e002      	b.n	8001d38 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f969 	bl	800200a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d024      	beq.n	8001d8c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d4a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f943 	bl	8001fe2 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d5c:	e016      	b.n	8001d8c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d004      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d70:	e00c      	b.n	8001d8c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d004      	beq.n	8001d86 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
 8001d84:	e002      	b.n	8001d8c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f949 	bl	800201e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00c      	beq.n	8001db0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f003 0310 	and.w	r3, r3, #16
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d007      	beq.n	8001db0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2210      	movs	r2, #16
 8001dae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00b      	beq.n	8001dd2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d006      	beq.n	8001dd2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2208      	movs	r2, #8
 8001dca:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f930 	bl	8002032 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d009      	beq.n	8001df0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d002      	beq.n	8001df0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff f816 	bl	8000e1c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00c      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d007      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2210      	movs	r2, #16
 8001e12:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00b      	beq.n	8001e36 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2208      	movs	r2, #8
 8001e2e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f912 	bl	800205a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	f003 0310 	and.w	r3, r3, #16
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d009      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f8f9 	bl	8002046 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00b      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d006      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2210      	movs	r2, #16
 8001e6e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f8fc 	bl	800206e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00b      	beq.n	8001e98 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d006      	beq.n	8001e98 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2208      	movs	r2, #8
 8001e90:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f8f5 	bl	8002082 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d07b      	beq.n	8001f9a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d072      	beq.n	8001f92 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d008      	beq.n	8001ec8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d008      	beq.n	8001ee4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	f043 0302 	orr.w	r3, r3, #2
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d008      	beq.n	8001f00 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d043      	beq.n	8001f92 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d03e      	beq.n	8001f92 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f1a:	2b60      	cmp	r3, #96	; 0x60
 8001f1c:	d02b      	beq.n	8001f76 <HAL_CAN_IRQHandler+0x32a>
 8001f1e:	2b60      	cmp	r3, #96	; 0x60
 8001f20:	d82e      	bhi.n	8001f80 <HAL_CAN_IRQHandler+0x334>
 8001f22:	2b50      	cmp	r3, #80	; 0x50
 8001f24:	d022      	beq.n	8001f6c <HAL_CAN_IRQHandler+0x320>
 8001f26:	2b50      	cmp	r3, #80	; 0x50
 8001f28:	d82a      	bhi.n	8001f80 <HAL_CAN_IRQHandler+0x334>
 8001f2a:	2b40      	cmp	r3, #64	; 0x40
 8001f2c:	d019      	beq.n	8001f62 <HAL_CAN_IRQHandler+0x316>
 8001f2e:	2b40      	cmp	r3, #64	; 0x40
 8001f30:	d826      	bhi.n	8001f80 <HAL_CAN_IRQHandler+0x334>
 8001f32:	2b30      	cmp	r3, #48	; 0x30
 8001f34:	d010      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x30c>
 8001f36:	2b30      	cmp	r3, #48	; 0x30
 8001f38:	d822      	bhi.n	8001f80 <HAL_CAN_IRQHandler+0x334>
 8001f3a:	2b10      	cmp	r3, #16
 8001f3c:	d002      	beq.n	8001f44 <HAL_CAN_IRQHandler+0x2f8>
 8001f3e:	2b20      	cmp	r3, #32
 8001f40:	d005      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f42:	e01d      	b.n	8001f80 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	f043 0308 	orr.w	r3, r3, #8
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f4c:	e019      	b.n	8001f82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	f043 0310 	orr.w	r3, r3, #16
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f56:	e014      	b.n	8001f82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	f043 0320 	orr.w	r3, r3, #32
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f60:	e00f      	b.n	8001f82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f6a:	e00a      	b.n	8001f82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f74:	e005      	b.n	8001f82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f7e:	e000      	b.n	8001f82 <HAL_CAN_IRQHandler+0x336>
            break;
 8001f80:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	699a      	ldr	r2, [r3, #24]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f90:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2204      	movs	r2, #4
 8001f98:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f872 	bl	8002096 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	3728      	adds	r7, #40	; 0x28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <__NVIC_SetPriorityGrouping+0x44>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c8:	4013      	ands	r3, r2
 80020ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020de:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <__NVIC_SetPriorityGrouping+0x44>)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	60d3      	str	r3, [r2, #12]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f8:	4b04      	ldr	r3, [pc, #16]	; (800210c <__NVIC_GetPriorityGrouping+0x18>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	0a1b      	lsrs	r3, r3, #8
 80020fe:	f003 0307 	and.w	r3, r3, #7
}
 8002102:	4618      	mov	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	2b00      	cmp	r3, #0
 8002120:	db0b      	blt.n	800213a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	f003 021f 	and.w	r2, r3, #31
 8002128:	4907      	ldr	r1, [pc, #28]	; (8002148 <__NVIC_EnableIRQ+0x38>)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	2001      	movs	r0, #1
 8002132:	fa00 f202 	lsl.w	r2, r0, r2
 8002136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000e100 	.word	0xe000e100

0800214c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	6039      	str	r1, [r7, #0]
 8002156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215c:	2b00      	cmp	r3, #0
 800215e:	db0a      	blt.n	8002176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	b2da      	uxtb	r2, r3
 8002164:	490c      	ldr	r1, [pc, #48]	; (8002198 <__NVIC_SetPriority+0x4c>)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	0112      	lsls	r2, r2, #4
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	440b      	add	r3, r1
 8002170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002174:	e00a      	b.n	800218c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	b2da      	uxtb	r2, r3
 800217a:	4908      	ldr	r1, [pc, #32]	; (800219c <__NVIC_SetPriority+0x50>)
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	3b04      	subs	r3, #4
 8002184:	0112      	lsls	r2, r2, #4
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	440b      	add	r3, r1
 800218a:	761a      	strb	r2, [r3, #24]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000e100 	.word	0xe000e100
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b089      	sub	sp, #36	; 0x24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f1c3 0307 	rsb	r3, r3, #7
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	bf28      	it	cs
 80021be:	2304      	movcs	r3, #4
 80021c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3304      	adds	r3, #4
 80021c6:	2b06      	cmp	r3, #6
 80021c8:	d902      	bls.n	80021d0 <NVIC_EncodePriority+0x30>
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3b03      	subs	r3, #3
 80021ce:	e000      	b.n	80021d2 <NVIC_EncodePriority+0x32>
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43da      	mvns	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	401a      	ands	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	43d9      	mvns	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	4313      	orrs	r3, r2
         );
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3724      	adds	r7, #36	; 0x24
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002218:	d301      	bcc.n	800221e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221a:	2301      	movs	r3, #1
 800221c:	e00f      	b.n	800223e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221e:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <SysTick_Config+0x40>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002226:	210f      	movs	r1, #15
 8002228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800222c:	f7ff ff8e 	bl	800214c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <SysTick_Config+0x40>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002236:	4b04      	ldr	r3, [pc, #16]	; (8002248 <SysTick_Config+0x40>)
 8002238:	2207      	movs	r2, #7
 800223a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	e000e010 	.word	0xe000e010

0800224c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ff29 	bl	80020ac <__NVIC_SetPriorityGrouping>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002262:	b580      	push	{r7, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	af00      	add	r7, sp, #0
 8002268:	4603      	mov	r3, r0
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002274:	f7ff ff3e 	bl	80020f4 <__NVIC_GetPriorityGrouping>
 8002278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	6978      	ldr	r0, [r7, #20]
 8002280:	f7ff ff8e 	bl	80021a0 <NVIC_EncodePriority>
 8002284:	4602      	mov	r2, r0
 8002286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff5d 	bl	800214c <__NVIC_SetPriority>
}
 8002292:	bf00      	nop
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff31 	bl	8002110 <__NVIC_EnableIRQ>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff ffa2 	bl	8002208 <SysTick_Config>
 80022c4:	4603      	mov	r3, r0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b084      	sub	sp, #16
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022dc:	f7ff f81e 	bl	800131c <HAL_GetTick>
 80022e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d008      	beq.n	8002300 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2280      	movs	r2, #128	; 0x80
 80022f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e052      	b.n	80023a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0216 	bic.w	r2, r2, #22
 800230e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800231e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d103      	bne.n	8002330 <HAL_DMA_Abort+0x62>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800232c:	2b00      	cmp	r3, #0
 800232e:	d007      	beq.n	8002340 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0208 	bic.w	r2, r2, #8
 800233e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0201 	bic.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002350:	e013      	b.n	800237a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002352:	f7fe ffe3 	bl	800131c <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b05      	cmp	r3, #5
 800235e:	d90c      	bls.n	800237a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2220      	movs	r2, #32
 8002364:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2203      	movs	r2, #3
 800236a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e015      	b.n	80023a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1e4      	bne.n	8002352 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238c:	223f      	movs	r2, #63	; 0x3f
 800238e:	409a      	lsls	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d004      	beq.n	80023cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2280      	movs	r2, #128	; 0x80
 80023c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e00c      	b.n	80023e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2205      	movs	r2, #5
 80023d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0201 	bic.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	; 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002406:	2300      	movs	r3, #0
 8002408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	e165      	b.n	80026dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002410:	2201      	movs	r2, #1
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4013      	ands	r3, r2
 8002422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	429a      	cmp	r2, r3
 800242a:	f040 8154 	bne.w	80026d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d005      	beq.n	8002446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002442:	2b02      	cmp	r3, #2
 8002444:	d130      	bne.n	80024a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	2203      	movs	r2, #3
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800247c:	2201      	movs	r2, #1
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 0201 	and.w	r2, r3, #1
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d017      	beq.n	80024e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	2203      	movs	r2, #3
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d123      	bne.n	8002538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	08da      	lsrs	r2, r3, #3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3208      	adds	r2, #8
 80024f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	220f      	movs	r2, #15
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	08da      	lsrs	r2, r3, #3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3208      	adds	r2, #8
 8002532:	69b9      	ldr	r1, [r7, #24]
 8002534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	2203      	movs	r2, #3
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0203 	and.w	r2, r3, #3
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80ae 	beq.w	80026d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	4b5d      	ldr	r3, [pc, #372]	; (80026f4 <HAL_GPIO_Init+0x300>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	4a5c      	ldr	r2, [pc, #368]	; (80026f4 <HAL_GPIO_Init+0x300>)
 8002584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002588:	6453      	str	r3, [r2, #68]	; 0x44
 800258a:	4b5a      	ldr	r3, [pc, #360]	; (80026f4 <HAL_GPIO_Init+0x300>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002596:	4a58      	ldr	r2, [pc, #352]	; (80026f8 <HAL_GPIO_Init+0x304>)
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	089b      	lsrs	r3, r3, #2
 800259c:	3302      	adds	r3, #2
 800259e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	220f      	movs	r2, #15
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a4f      	ldr	r2, [pc, #316]	; (80026fc <HAL_GPIO_Init+0x308>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d025      	beq.n	800260e <HAL_GPIO_Init+0x21a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a4e      	ldr	r2, [pc, #312]	; (8002700 <HAL_GPIO_Init+0x30c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01f      	beq.n	800260a <HAL_GPIO_Init+0x216>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4d      	ldr	r2, [pc, #308]	; (8002704 <HAL_GPIO_Init+0x310>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d019      	beq.n	8002606 <HAL_GPIO_Init+0x212>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4c      	ldr	r2, [pc, #304]	; (8002708 <HAL_GPIO_Init+0x314>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d013      	beq.n	8002602 <HAL_GPIO_Init+0x20e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4b      	ldr	r2, [pc, #300]	; (800270c <HAL_GPIO_Init+0x318>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00d      	beq.n	80025fe <HAL_GPIO_Init+0x20a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4a      	ldr	r2, [pc, #296]	; (8002710 <HAL_GPIO_Init+0x31c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d007      	beq.n	80025fa <HAL_GPIO_Init+0x206>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a49      	ldr	r2, [pc, #292]	; (8002714 <HAL_GPIO_Init+0x320>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d101      	bne.n	80025f6 <HAL_GPIO_Init+0x202>
 80025f2:	2306      	movs	r3, #6
 80025f4:	e00c      	b.n	8002610 <HAL_GPIO_Init+0x21c>
 80025f6:	2307      	movs	r3, #7
 80025f8:	e00a      	b.n	8002610 <HAL_GPIO_Init+0x21c>
 80025fa:	2305      	movs	r3, #5
 80025fc:	e008      	b.n	8002610 <HAL_GPIO_Init+0x21c>
 80025fe:	2304      	movs	r3, #4
 8002600:	e006      	b.n	8002610 <HAL_GPIO_Init+0x21c>
 8002602:	2303      	movs	r3, #3
 8002604:	e004      	b.n	8002610 <HAL_GPIO_Init+0x21c>
 8002606:	2302      	movs	r3, #2
 8002608:	e002      	b.n	8002610 <HAL_GPIO_Init+0x21c>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <HAL_GPIO_Init+0x21c>
 800260e:	2300      	movs	r3, #0
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	f002 0203 	and.w	r2, r2, #3
 8002616:	0092      	lsls	r2, r2, #2
 8002618:	4093      	lsls	r3, r2
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002620:	4935      	ldr	r1, [pc, #212]	; (80026f8 <HAL_GPIO_Init+0x304>)
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	089b      	lsrs	r3, r3, #2
 8002626:	3302      	adds	r3, #2
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800262e:	4b3a      	ldr	r3, [pc, #232]	; (8002718 <HAL_GPIO_Init+0x324>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002652:	4a31      	ldr	r2, [pc, #196]	; (8002718 <HAL_GPIO_Init+0x324>)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002658:	4b2f      	ldr	r3, [pc, #188]	; (8002718 <HAL_GPIO_Init+0x324>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800267c:	4a26      	ldr	r2, [pc, #152]	; (8002718 <HAL_GPIO_Init+0x324>)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002682:	4b25      	ldr	r3, [pc, #148]	; (8002718 <HAL_GPIO_Init+0x324>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026a6:	4a1c      	ldr	r2, [pc, #112]	; (8002718 <HAL_GPIO_Init+0x324>)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026ac:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <HAL_GPIO_Init+0x324>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026d0:	4a11      	ldr	r2, [pc, #68]	; (8002718 <HAL_GPIO_Init+0x324>)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3301      	adds	r3, #1
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	2b0f      	cmp	r3, #15
 80026e0:	f67f ae96 	bls.w	8002410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3724      	adds	r7, #36	; 0x24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40013800 	.word	0x40013800
 80026fc:	40020000 	.word	0x40020000
 8002700:	40020400 	.word	0x40020400
 8002704:	40020800 	.word	0x40020800
 8002708:	40020c00 	.word	0x40020c00
 800270c:	40021000 	.word	0x40021000
 8002710:	40021400 	.word	0x40021400
 8002714:	40021800 	.word	0x40021800
 8002718:	40013c00 	.word	0x40013c00

0800271c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	807b      	strh	r3, [r7, #2]
 8002728:	4613      	mov	r3, r2
 800272a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800272c:	787b      	ldrb	r3, [r7, #1]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002738:	e003      	b.n	8002742 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800273a:	887b      	ldrh	r3, [r7, #2]
 800273c:	041a      	lsls	r2, r3, #16
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	619a      	str	r2, [r3, #24]
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0cc      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002764:	4b68      	ldr	r3, [pc, #416]	; (8002908 <HAL_RCC_ClockConfig+0x1b8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d90c      	bls.n	800278c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002772:	4b65      	ldr	r3, [pc, #404]	; (8002908 <HAL_RCC_ClockConfig+0x1b8>)
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800277a:	4b63      	ldr	r3, [pc, #396]	; (8002908 <HAL_RCC_ClockConfig+0x1b8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d001      	beq.n	800278c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0b8      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d020      	beq.n	80027da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a4:	4b59      	ldr	r3, [pc, #356]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	4a58      	ldr	r2, [pc, #352]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027bc:	4b53      	ldr	r3, [pc, #332]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	4a52      	ldr	r2, [pc, #328]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c8:	4b50      	ldr	r3, [pc, #320]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	494d      	ldr	r1, [pc, #308]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d044      	beq.n	8002870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d107      	bne.n	80027fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ee:	4b47      	ldr	r3, [pc, #284]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d119      	bne.n	800282e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e07f      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d003      	beq.n	800280e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800280a:	2b03      	cmp	r3, #3
 800280c:	d107      	bne.n	800281e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280e:	4b3f      	ldr	r3, [pc, #252]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d109      	bne.n	800282e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e06f      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281e:	4b3b      	ldr	r3, [pc, #236]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e067      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800282e:	4b37      	ldr	r3, [pc, #220]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f023 0203 	bic.w	r2, r3, #3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	4934      	ldr	r1, [pc, #208]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 800283c:	4313      	orrs	r3, r2
 800283e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002840:	f7fe fd6c 	bl	800131c <HAL_GetTick>
 8002844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002846:	e00a      	b.n	800285e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002848:	f7fe fd68 	bl	800131c <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	f241 3288 	movw	r2, #5000	; 0x1388
 8002856:	4293      	cmp	r3, r2
 8002858:	d901      	bls.n	800285e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e04f      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285e:	4b2b      	ldr	r3, [pc, #172]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 020c 	and.w	r2, r3, #12
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	429a      	cmp	r2, r3
 800286e:	d1eb      	bne.n	8002848 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002870:	4b25      	ldr	r3, [pc, #148]	; (8002908 <HAL_RCC_ClockConfig+0x1b8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 030f 	and.w	r3, r3, #15
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d20c      	bcs.n	8002898 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287e:	4b22      	ldr	r3, [pc, #136]	; (8002908 <HAL_RCC_ClockConfig+0x1b8>)
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002886:	4b20      	ldr	r3, [pc, #128]	; (8002908 <HAL_RCC_ClockConfig+0x1b8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d001      	beq.n	8002898 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e032      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a4:	4b19      	ldr	r3, [pc, #100]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4916      	ldr	r1, [pc, #88]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d009      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028c2:	4b12      	ldr	r3, [pc, #72]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	490e      	ldr	r1, [pc, #56]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028d6:	f000 f855 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 80028da:	4602      	mov	r2, r0
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	091b      	lsrs	r3, r3, #4
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	490a      	ldr	r1, [pc, #40]	; (8002910 <HAL_RCC_ClockConfig+0x1c0>)
 80028e8:	5ccb      	ldrb	r3, [r1, r3]
 80028ea:	fa22 f303 	lsr.w	r3, r2, r3
 80028ee:	4a09      	ldr	r2, [pc, #36]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_RCC_ClockConfig+0x1c8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe fccc 	bl	8001294 <HAL_InitTick>

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40023c00 	.word	0x40023c00
 800290c:	40023800 	.word	0x40023800
 8002910:	08005700 	.word	0x08005700
 8002914:	20000000 	.word	0x20000000
 8002918:	20000004 	.word	0x20000004

0800291c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <HAL_RCC_GetHCLKFreq+0x14>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	20000000 	.word	0x20000000

08002934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002938:	f7ff fff0 	bl	800291c <HAL_RCC_GetHCLKFreq>
 800293c:	4602      	mov	r2, r0
 800293e:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	0a9b      	lsrs	r3, r3, #10
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	4903      	ldr	r1, [pc, #12]	; (8002958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800294a:	5ccb      	ldrb	r3, [r1, r3]
 800294c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002950:	4618      	mov	r0, r3
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40023800 	.word	0x40023800
 8002958:	08005710 	.word	0x08005710

0800295c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002960:	f7ff ffdc 	bl	800291c <HAL_RCC_GetHCLKFreq>
 8002964:	4602      	mov	r2, r0
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	0b5b      	lsrs	r3, r3, #13
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	4903      	ldr	r1, [pc, #12]	; (8002980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002972:	5ccb      	ldrb	r3, [r1, r3]
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002978:	4618      	mov	r0, r3
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40023800 	.word	0x40023800
 8002980:	08005710 	.word	0x08005710

08002984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002988:	b0ae      	sub	sp, #184	; 0xb8
 800298a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029aa:	4bcb      	ldr	r3, [pc, #812]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b0c      	cmp	r3, #12
 80029b4:	f200 8206 	bhi.w	8002dc4 <HAL_RCC_GetSysClockFreq+0x440>
 80029b8:	a201      	add	r2, pc, #4	; (adr r2, 80029c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80029ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029be:	bf00      	nop
 80029c0:	080029f5 	.word	0x080029f5
 80029c4:	08002dc5 	.word	0x08002dc5
 80029c8:	08002dc5 	.word	0x08002dc5
 80029cc:	08002dc5 	.word	0x08002dc5
 80029d0:	080029fd 	.word	0x080029fd
 80029d4:	08002dc5 	.word	0x08002dc5
 80029d8:	08002dc5 	.word	0x08002dc5
 80029dc:	08002dc5 	.word	0x08002dc5
 80029e0:	08002a05 	.word	0x08002a05
 80029e4:	08002dc5 	.word	0x08002dc5
 80029e8:	08002dc5 	.word	0x08002dc5
 80029ec:	08002dc5 	.word	0x08002dc5
 80029f0:	08002bf5 	.word	0x08002bf5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029f4:	4bb9      	ldr	r3, [pc, #740]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x358>)
 80029f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80029fa:	e1e7      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029fc:	4bb8      	ldr	r3, [pc, #736]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80029fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a02:	e1e3      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a04:	4bb4      	ldr	r3, [pc, #720]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a10:	4bb1      	ldr	r3, [pc, #708]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d071      	beq.n	8002b00 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a1c:	4bae      	ldr	r3, [pc, #696]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	099b      	lsrs	r3, r3, #6
 8002a22:	2200      	movs	r2, #0
 8002a24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a28:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a42:	4622      	mov	r2, r4
 8002a44:	462b      	mov	r3, r5
 8002a46:	f04f 0000 	mov.w	r0, #0
 8002a4a:	f04f 0100 	mov.w	r1, #0
 8002a4e:	0159      	lsls	r1, r3, #5
 8002a50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a54:	0150      	lsls	r0, r2, #5
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4621      	mov	r1, r4
 8002a5c:	1a51      	subs	r1, r2, r1
 8002a5e:	6439      	str	r1, [r7, #64]	; 0x40
 8002a60:	4629      	mov	r1, r5
 8002a62:	eb63 0301 	sbc.w	r3, r3, r1
 8002a66:	647b      	str	r3, [r7, #68]	; 0x44
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002a74:	4649      	mov	r1, r9
 8002a76:	018b      	lsls	r3, r1, #6
 8002a78:	4641      	mov	r1, r8
 8002a7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a7e:	4641      	mov	r1, r8
 8002a80:	018a      	lsls	r2, r1, #6
 8002a82:	4641      	mov	r1, r8
 8002a84:	1a51      	subs	r1, r2, r1
 8002a86:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a88:	4649      	mov	r1, r9
 8002a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002a9c:	4649      	mov	r1, r9
 8002a9e:	00cb      	lsls	r3, r1, #3
 8002aa0:	4641      	mov	r1, r8
 8002aa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aa6:	4641      	mov	r1, r8
 8002aa8:	00ca      	lsls	r2, r1, #3
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4622      	mov	r2, r4
 8002ab2:	189b      	adds	r3, r3, r2
 8002ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ab6:	462b      	mov	r3, r5
 8002ab8:	460a      	mov	r2, r1
 8002aba:	eb42 0303 	adc.w	r3, r2, r3
 8002abe:	637b      	str	r3, [r7, #52]	; 0x34
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002acc:	4629      	mov	r1, r5
 8002ace:	024b      	lsls	r3, r1, #9
 8002ad0:	4621      	mov	r1, r4
 8002ad2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	024a      	lsls	r2, r1, #9
 8002ada:	4610      	mov	r0, r2
 8002adc:	4619      	mov	r1, r3
 8002ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ae8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002aec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002af0:	f7fd fbde 	bl	80002b0 <__aeabi_uldivmod>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4613      	mov	r3, r2
 8002afa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002afe:	e067      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b00:	4b75      	ldr	r3, [pc, #468]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	099b      	lsrs	r3, r3, #6
 8002b06:	2200      	movs	r2, #0
 8002b08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b0c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002b10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b18:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b1e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002b22:	4622      	mov	r2, r4
 8002b24:	462b      	mov	r3, r5
 8002b26:	f04f 0000 	mov.w	r0, #0
 8002b2a:	f04f 0100 	mov.w	r1, #0
 8002b2e:	0159      	lsls	r1, r3, #5
 8002b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b34:	0150      	lsls	r0, r2, #5
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4621      	mov	r1, r4
 8002b3c:	1a51      	subs	r1, r2, r1
 8002b3e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002b40:	4629      	mov	r1, r5
 8002b42:	eb63 0301 	sbc.w	r3, r3, r1
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002b54:	4649      	mov	r1, r9
 8002b56:	018b      	lsls	r3, r1, #6
 8002b58:	4641      	mov	r1, r8
 8002b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b5e:	4641      	mov	r1, r8
 8002b60:	018a      	lsls	r2, r1, #6
 8002b62:	4641      	mov	r1, r8
 8002b64:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b68:	4649      	mov	r1, r9
 8002b6a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b7a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b82:	4692      	mov	sl, r2
 8002b84:	469b      	mov	fp, r3
 8002b86:	4623      	mov	r3, r4
 8002b88:	eb1a 0303 	adds.w	r3, sl, r3
 8002b8c:	623b      	str	r3, [r7, #32]
 8002b8e:	462b      	mov	r3, r5
 8002b90:	eb4b 0303 	adc.w	r3, fp, r3
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	028b      	lsls	r3, r1, #10
 8002ba6:	4621      	mov	r1, r4
 8002ba8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bac:	4621      	mov	r1, r4
 8002bae:	028a      	lsls	r2, r1, #10
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bb8:	2200      	movs	r2, #0
 8002bba:	673b      	str	r3, [r7, #112]	; 0x70
 8002bbc:	677a      	str	r2, [r7, #116]	; 0x74
 8002bbe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002bc2:	f7fd fb75 	bl	80002b0 <__aeabi_uldivmod>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4613      	mov	r3, r2
 8002bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bd0:	4b41      	ldr	r3, [pc, #260]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	0c1b      	lsrs	r3, r3, #16
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	3301      	adds	r3, #1
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002be2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002be6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002bf2:	e0eb      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bf4:	4b38      	ldr	r3, [pc, #224]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c00:	4b35      	ldr	r3, [pc, #212]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d06b      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c0c:	4b32      	ldr	r3, [pc, #200]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	099b      	lsrs	r3, r3, #6
 8002c12:	2200      	movs	r2, #0
 8002c14:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c1e:	663b      	str	r3, [r7, #96]	; 0x60
 8002c20:	2300      	movs	r3, #0
 8002c22:	667b      	str	r3, [r7, #100]	; 0x64
 8002c24:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002c28:	4622      	mov	r2, r4
 8002c2a:	462b      	mov	r3, r5
 8002c2c:	f04f 0000 	mov.w	r0, #0
 8002c30:	f04f 0100 	mov.w	r1, #0
 8002c34:	0159      	lsls	r1, r3, #5
 8002c36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c3a:	0150      	lsls	r0, r2, #5
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4621      	mov	r1, r4
 8002c42:	1a51      	subs	r1, r2, r1
 8002c44:	61b9      	str	r1, [r7, #24]
 8002c46:	4629      	mov	r1, r5
 8002c48:	eb63 0301 	sbc.w	r3, r3, r1
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002c5a:	4659      	mov	r1, fp
 8002c5c:	018b      	lsls	r3, r1, #6
 8002c5e:	4651      	mov	r1, sl
 8002c60:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c64:	4651      	mov	r1, sl
 8002c66:	018a      	lsls	r2, r1, #6
 8002c68:	4651      	mov	r1, sl
 8002c6a:	ebb2 0801 	subs.w	r8, r2, r1
 8002c6e:	4659      	mov	r1, fp
 8002c70:	eb63 0901 	sbc.w	r9, r3, r1
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c88:	4690      	mov	r8, r2
 8002c8a:	4699      	mov	r9, r3
 8002c8c:	4623      	mov	r3, r4
 8002c8e:	eb18 0303 	adds.w	r3, r8, r3
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	462b      	mov	r3, r5
 8002c96:	eb49 0303 	adc.w	r3, r9, r3
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ca8:	4629      	mov	r1, r5
 8002caa:	024b      	lsls	r3, r1, #9
 8002cac:	4621      	mov	r1, r4
 8002cae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	024a      	lsls	r2, r1, #9
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	4619      	mov	r1, r3
 8002cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cc2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002cc4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002cc8:	f7fd faf2 	bl	80002b0 <__aeabi_uldivmod>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cd6:	e065      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0x420>
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	00f42400 	.word	0x00f42400
 8002ce0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce4:	4b3d      	ldr	r3, [pc, #244]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x458>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	099b      	lsrs	r3, r3, #6
 8002cea:	2200      	movs	r2, #0
 8002cec:	4618      	mov	r0, r3
 8002cee:	4611      	mov	r1, r2
 8002cf0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cf4:	653b      	str	r3, [r7, #80]	; 0x50
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	657b      	str	r3, [r7, #84]	; 0x54
 8002cfa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002cfe:	4642      	mov	r2, r8
 8002d00:	464b      	mov	r3, r9
 8002d02:	f04f 0000 	mov.w	r0, #0
 8002d06:	f04f 0100 	mov.w	r1, #0
 8002d0a:	0159      	lsls	r1, r3, #5
 8002d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d10:	0150      	lsls	r0, r2, #5
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4641      	mov	r1, r8
 8002d18:	1a51      	subs	r1, r2, r1
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	4649      	mov	r1, r9
 8002d1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002d30:	4659      	mov	r1, fp
 8002d32:	018b      	lsls	r3, r1, #6
 8002d34:	4651      	mov	r1, sl
 8002d36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d3a:	4651      	mov	r1, sl
 8002d3c:	018a      	lsls	r2, r1, #6
 8002d3e:	4651      	mov	r1, sl
 8002d40:	1a54      	subs	r4, r2, r1
 8002d42:	4659      	mov	r1, fp
 8002d44:	eb63 0501 	sbc.w	r5, r3, r1
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	00eb      	lsls	r3, r5, #3
 8002d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d56:	00e2      	lsls	r2, r4, #3
 8002d58:	4614      	mov	r4, r2
 8002d5a:	461d      	mov	r5, r3
 8002d5c:	4643      	mov	r3, r8
 8002d5e:	18e3      	adds	r3, r4, r3
 8002d60:	603b      	str	r3, [r7, #0]
 8002d62:	464b      	mov	r3, r9
 8002d64:	eb45 0303 	adc.w	r3, r5, r3
 8002d68:	607b      	str	r3, [r7, #4]
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d76:	4629      	mov	r1, r5
 8002d78:	028b      	lsls	r3, r1, #10
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d80:	4621      	mov	r1, r4
 8002d82:	028a      	lsls	r2, r1, #10
 8002d84:	4610      	mov	r0, r2
 8002d86:	4619      	mov	r1, r3
 8002d88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d90:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002d92:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d96:	f7fd fa8b 	bl	80002b0 <__aeabi_uldivmod>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4613      	mov	r3, r2
 8002da0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002da4:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x458>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	0f1b      	lsrs	r3, r3, #28
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002db2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002db6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002dc2:	e003      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dc4:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002dca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	37b8      	adds	r7, #184	; 0xb8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	00f42400 	.word	0x00f42400

08002de4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e28d      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 8083 	beq.w	8002f0a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e04:	4b94      	ldr	r3, [pc, #592]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 030c 	and.w	r3, r3, #12
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d019      	beq.n	8002e44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e10:	4b91      	ldr	r3, [pc, #580]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d106      	bne.n	8002e2a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e1c:	4b8e      	ldr	r3, [pc, #568]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e28:	d00c      	beq.n	8002e44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e2a:	4b8b      	ldr	r3, [pc, #556]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e32:	2b0c      	cmp	r3, #12
 8002e34:	d112      	bne.n	8002e5c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e36:	4b88      	ldr	r3, [pc, #544]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e42:	d10b      	bne.n	8002e5c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e44:	4b84      	ldr	r3, [pc, #528]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d05b      	beq.n	8002f08 <HAL_RCC_OscConfig+0x124>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d157      	bne.n	8002f08 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e25a      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e64:	d106      	bne.n	8002e74 <HAL_RCC_OscConfig+0x90>
 8002e66:	4b7c      	ldr	r3, [pc, #496]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a7b      	ldr	r2, [pc, #492]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	e01d      	b.n	8002eb0 <HAL_RCC_OscConfig+0xcc>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCC_OscConfig+0xb4>
 8002e7e:	4b76      	ldr	r3, [pc, #472]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a75      	ldr	r2, [pc, #468]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	4b73      	ldr	r3, [pc, #460]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a72      	ldr	r2, [pc, #456]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e00b      	b.n	8002eb0 <HAL_RCC_OscConfig+0xcc>
 8002e98:	4b6f      	ldr	r3, [pc, #444]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a6e      	ldr	r2, [pc, #440]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	4b6c      	ldr	r3, [pc, #432]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a6b      	ldr	r2, [pc, #428]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d013      	beq.n	8002ee0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7fe fa30 	bl	800131c <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec0:	f7fe fa2c 	bl	800131c <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	; 0x64
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e21f      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed2:	4b61      	ldr	r3, [pc, #388]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0xdc>
 8002ede:	e014      	b.n	8002f0a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fe fa1c 	bl	800131c <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee8:	f7fe fa18 	bl	800131c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	; 0x64
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e20b      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efa:	4b57      	ldr	r3, [pc, #348]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x104>
 8002f06:	e000      	b.n	8002f0a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d06f      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f16:	4b50      	ldr	r3, [pc, #320]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d017      	beq.n	8002f52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f22:	4b4d      	ldr	r3, [pc, #308]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d105      	bne.n	8002f3a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f2e:	4b4a      	ldr	r3, [pc, #296]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00b      	beq.n	8002f52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f3a:	4b47      	ldr	r3, [pc, #284]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f42:	2b0c      	cmp	r3, #12
 8002f44:	d11c      	bne.n	8002f80 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f46:	4b44      	ldr	r3, [pc, #272]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d116      	bne.n	8002f80 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f52:	4b41      	ldr	r3, [pc, #260]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d005      	beq.n	8002f6a <HAL_RCC_OscConfig+0x186>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d001      	beq.n	8002f6a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e1d3      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6a:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4937      	ldr	r1, [pc, #220]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7e:	e03a      	b.n	8002ff6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d020      	beq.n	8002fca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f88:	4b34      	ldr	r3, [pc, #208]	; (800305c <HAL_RCC_OscConfig+0x278>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8e:	f7fe f9c5 	bl	800131c <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f96:	f7fe f9c1 	bl	800131c <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e1b4      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa8:	4b2b      	ldr	r3, [pc, #172]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f0      	beq.n	8002f96 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb4:	4b28      	ldr	r3, [pc, #160]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	4925      	ldr	r1, [pc, #148]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	600b      	str	r3, [r1, #0]
 8002fc8:	e015      	b.n	8002ff6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fca:	4b24      	ldr	r3, [pc, #144]	; (800305c <HAL_RCC_OscConfig+0x278>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd0:	f7fe f9a4 	bl	800131c <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fd8:	f7fe f9a0 	bl	800131c <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e193      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fea:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d036      	beq.n	8003070 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d016      	beq.n	8003038 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800300a:	4b15      	ldr	r3, [pc, #84]	; (8003060 <HAL_RCC_OscConfig+0x27c>)
 800300c:	2201      	movs	r2, #1
 800300e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003010:	f7fe f984 	bl	800131c <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003018:	f7fe f980 	bl	800131c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e173      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 800302c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0x234>
 8003036:	e01b      	b.n	8003070 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003038:	4b09      	ldr	r3, [pc, #36]	; (8003060 <HAL_RCC_OscConfig+0x27c>)
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303e:	f7fe f96d 	bl	800131c <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003044:	e00e      	b.n	8003064 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003046:	f7fe f969 	bl	800131c <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d907      	bls.n	8003064 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e15c      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
 8003058:	40023800 	.word	0x40023800
 800305c:	42470000 	.word	0x42470000
 8003060:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003064:	4b8a      	ldr	r3, [pc, #552]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1ea      	bne.n	8003046 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 8097 	beq.w	80031ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800307e:	2300      	movs	r3, #0
 8003080:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003082:	4b83      	ldr	r3, [pc, #524]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10f      	bne.n	80030ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	4b7f      	ldr	r3, [pc, #508]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	4a7e      	ldr	r2, [pc, #504]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309c:	6413      	str	r3, [r2, #64]	; 0x40
 800309e:	4b7c      	ldr	r3, [pc, #496]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a6:	60bb      	str	r3, [r7, #8]
 80030a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030aa:	2301      	movs	r3, #1
 80030ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ae:	4b79      	ldr	r3, [pc, #484]	; (8003294 <HAL_RCC_OscConfig+0x4b0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d118      	bne.n	80030ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ba:	4b76      	ldr	r3, [pc, #472]	; (8003294 <HAL_RCC_OscConfig+0x4b0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a75      	ldr	r2, [pc, #468]	; (8003294 <HAL_RCC_OscConfig+0x4b0>)
 80030c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c6:	f7fe f929 	bl	800131c <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ce:	f7fe f925 	bl	800131c <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e118      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e0:	4b6c      	ldr	r3, [pc, #432]	; (8003294 <HAL_RCC_OscConfig+0x4b0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d106      	bne.n	8003102 <HAL_RCC_OscConfig+0x31e>
 80030f4:	4b66      	ldr	r3, [pc, #408]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 80030f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f8:	4a65      	ldr	r2, [pc, #404]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 80030fa:	f043 0301 	orr.w	r3, r3, #1
 80030fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003100:	e01c      	b.n	800313c <HAL_RCC_OscConfig+0x358>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b05      	cmp	r3, #5
 8003108:	d10c      	bne.n	8003124 <HAL_RCC_OscConfig+0x340>
 800310a:	4b61      	ldr	r3, [pc, #388]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 800310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310e:	4a60      	ldr	r2, [pc, #384]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003110:	f043 0304 	orr.w	r3, r3, #4
 8003114:	6713      	str	r3, [r2, #112]	; 0x70
 8003116:	4b5e      	ldr	r3, [pc, #376]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311a:	4a5d      	ldr	r2, [pc, #372]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	6713      	str	r3, [r2, #112]	; 0x70
 8003122:	e00b      	b.n	800313c <HAL_RCC_OscConfig+0x358>
 8003124:	4b5a      	ldr	r3, [pc, #360]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003128:	4a59      	ldr	r2, [pc, #356]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 800312a:	f023 0301 	bic.w	r3, r3, #1
 800312e:	6713      	str	r3, [r2, #112]	; 0x70
 8003130:	4b57      	ldr	r3, [pc, #348]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003134:	4a56      	ldr	r2, [pc, #344]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003136:	f023 0304 	bic.w	r3, r3, #4
 800313a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d015      	beq.n	8003170 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003144:	f7fe f8ea 	bl	800131c <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314a:	e00a      	b.n	8003162 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800314c:	f7fe f8e6 	bl	800131c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	; 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e0d7      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003162:	4b4b      	ldr	r3, [pc, #300]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0ee      	beq.n	800314c <HAL_RCC_OscConfig+0x368>
 800316e:	e014      	b.n	800319a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003170:	f7fe f8d4 	bl	800131c <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003176:	e00a      	b.n	800318e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003178:	f7fe f8d0 	bl	800131c <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	f241 3288 	movw	r2, #5000	; 0x1388
 8003186:	4293      	cmp	r3, r2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e0c1      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800318e:	4b40      	ldr	r3, [pc, #256]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1ee      	bne.n	8003178 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800319a:	7dfb      	ldrb	r3, [r7, #23]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d105      	bne.n	80031ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a0:	4b3b      	ldr	r3, [pc, #236]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	4a3a      	ldr	r2, [pc, #232]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 80031a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 80ad 	beq.w	8003310 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031b6:	4b36      	ldr	r3, [pc, #216]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d060      	beq.n	8003284 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d145      	bne.n	8003256 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ca:	4b33      	ldr	r3, [pc, #204]	; (8003298 <HAL_RCC_OscConfig+0x4b4>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fe f8a4 	bl	800131c <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d8:	f7fe f8a0 	bl	800131c <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e093      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ea:	4b29      	ldr	r3, [pc, #164]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69da      	ldr	r2, [r3, #28]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	019b      	lsls	r3, r3, #6
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	085b      	lsrs	r3, r3, #1
 800320e:	3b01      	subs	r3, #1
 8003210:	041b      	lsls	r3, r3, #16
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	061b      	lsls	r3, r3, #24
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	071b      	lsls	r3, r3, #28
 8003222:	491b      	ldr	r1, [pc, #108]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003228:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <HAL_RCC_OscConfig+0x4b4>)
 800322a:	2201      	movs	r2, #1
 800322c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322e:	f7fe f875 	bl	800131c <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003236:	f7fe f871 	bl	800131c <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e064      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003248:	4b11      	ldr	r3, [pc, #68]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x452>
 8003254:	e05c      	b.n	8003310 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003256:	4b10      	ldr	r3, [pc, #64]	; (8003298 <HAL_RCC_OscConfig+0x4b4>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fe f85e 	bl	800131c <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003264:	f7fe f85a 	bl	800131c <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e04d      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003276:	4b06      	ldr	r3, [pc, #24]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x480>
 8003282:	e045      	b.n	8003310 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d107      	bne.n	800329c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e040      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
 8003290:	40023800 	.word	0x40023800
 8003294:	40007000 	.word	0x40007000
 8003298:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800329c:	4b1f      	ldr	r3, [pc, #124]	; (800331c <HAL_RCC_OscConfig+0x538>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d030      	beq.n	800330c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d129      	bne.n	800330c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d122      	bne.n	800330c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032cc:	4013      	ands	r3, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d119      	bne.n	800330c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	085b      	lsrs	r3, r3, #1
 80032e4:	3b01      	subs	r3, #1
 80032e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d10f      	bne.n	800330c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d107      	bne.n	800330c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003308:	429a      	cmp	r2, r3
 800330a:	d001      	beq.n	8003310 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40023800 	.word	0x40023800

08003320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e03f      	b.n	80033b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fd fe26 	bl	8000f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2224      	movs	r2, #36	; 0x24
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003362:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 fddf 	bl	8003f28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695a      	ldr	r2, [r3, #20]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003388:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003398:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b08a      	sub	sp, #40	; 0x28
 80033be:	af02      	add	r7, sp, #8
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	603b      	str	r3, [r7, #0]
 80033c6:	4613      	mov	r3, r2
 80033c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b20      	cmp	r3, #32
 80033d8:	d17c      	bne.n	80034d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <HAL_UART_Transmit+0x2c>
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e075      	b.n	80034d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_UART_Transmit+0x3e>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e06e      	b.n	80034d6 <HAL_UART_Transmit+0x11c>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2221      	movs	r2, #33	; 0x21
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800340e:	f7fd ff85 	bl	800131c <HAL_GetTick>
 8003412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	88fa      	ldrh	r2, [r7, #6]
 8003418:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	88fa      	ldrh	r2, [r7, #6]
 800341e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003428:	d108      	bne.n	800343c <HAL_UART_Transmit+0x82>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d104      	bne.n	800343c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003432:	2300      	movs	r3, #0
 8003434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	e003      	b.n	8003444 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003440:	2300      	movs	r3, #0
 8003442:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800344c:	e02a      	b.n	80034a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2200      	movs	r2, #0
 8003456:	2180      	movs	r1, #128	; 0x80
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 fb1f 	bl	8003a9c <UART_WaitOnFlagUntilTimeout>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e036      	b.n	80034d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10b      	bne.n	8003486 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800347c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	3302      	adds	r3, #2
 8003482:	61bb      	str	r3, [r7, #24]
 8003484:	e007      	b.n	8003496 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	781a      	ldrb	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	3301      	adds	r3, #1
 8003494:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1cf      	bne.n	800344e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2200      	movs	r2, #0
 80034b6:	2140      	movs	r1, #64	; 0x40
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 faef 	bl	8003a9c <UART_WaitOnFlagUntilTimeout>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e006      	b.n	80034d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	e000      	b.n	80034d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034d4:	2302      	movs	r3, #2
  }
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3720      	adds	r7, #32
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b084      	sub	sp, #16
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	4613      	mov	r3, r2
 80034ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d11d      	bne.n	8003534 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <HAL_UART_Receive_IT+0x26>
 80034fe:	88fb      	ldrh	r3, [r7, #6]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e016      	b.n	8003536 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_UART_Receive_IT+0x38>
 8003512:	2302      	movs	r3, #2
 8003514:	e00f      	b.n	8003536 <HAL_UART_Receive_IT+0x58>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003524:	88fb      	ldrh	r3, [r7, #6]
 8003526:	461a      	mov	r2, r3
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 fb24 	bl	8003b78 <UART_Start_Receive_IT>
 8003530:	4603      	mov	r3, r0
 8003532:	e000      	b.n	8003536 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003534:	2302      	movs	r3, #2
  }
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b0ba      	sub	sp, #232	; 0xe8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003566:	2300      	movs	r3, #0
 8003568:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800356c:	2300      	movs	r3, #0
 800356e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800357e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10f      	bne.n	80035a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <HAL_UART_IRQHandler+0x66>
 8003592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fc07 	bl	8003db2 <UART_Receive_IT>
      return;
 80035a4:	e256      	b.n	8003a54 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80035a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 80de 	beq.w	800376c <HAL_UART_IRQHandler+0x22c>
 80035b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d106      	bne.n	80035ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 80d1 	beq.w	800376c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00b      	beq.n	80035ee <HAL_UART_IRQHandler+0xae>
 80035d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f043 0201 	orr.w	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00b      	beq.n	8003612 <HAL_UART_IRQHandler+0xd2>
 80035fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f043 0202 	orr.w	r2, r3, #2
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00b      	beq.n	8003636 <HAL_UART_IRQHandler+0xf6>
 800361e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f043 0204 	orr.w	r2, r3, #4
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d011      	beq.n	8003666 <HAL_UART_IRQHandler+0x126>
 8003642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b00      	cmp	r3, #0
 800364c:	d105      	bne.n	800365a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800364e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f043 0208 	orr.w	r2, r3, #8
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 81ed 	beq.w	8003a4a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_UART_IRQHandler+0x14e>
 800367c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003680:	f003 0320 	and.w	r3, r3, #32
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 fb92 	bl	8003db2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003698:	2b40      	cmp	r3, #64	; 0x40
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d103      	bne.n	80036ba <HAL_UART_IRQHandler+0x17a>
 80036b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d04f      	beq.n	800375a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fa9a 	bl	8003bf4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ca:	2b40      	cmp	r3, #64	; 0x40
 80036cc:	d141      	bne.n	8003752 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3314      	adds	r3, #20
 80036d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80036e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	3314      	adds	r3, #20
 80036f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80036fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80036fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003702:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003706:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800370a:	e841 2300 	strex	r3, r2, [r1]
 800370e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003712:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1d9      	bne.n	80036ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371e:	2b00      	cmp	r3, #0
 8003720:	d013      	beq.n	800374a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003726:	4a7d      	ldr	r2, [pc, #500]	; (800391c <HAL_UART_IRQHandler+0x3dc>)
 8003728:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe fe3d 	bl	80023ae <HAL_DMA_Abort_IT>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d016      	beq.n	8003768 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003744:	4610      	mov	r0, r2
 8003746:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003748:	e00e      	b.n	8003768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f990 	bl	8003a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003750:	e00a      	b.n	8003768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f98c 	bl	8003a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003758:	e006      	b.n	8003768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f988 	bl	8003a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003766:	e170      	b.n	8003a4a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003768:	bf00      	nop
    return;
 800376a:	e16e      	b.n	8003a4a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	2b01      	cmp	r3, #1
 8003772:	f040 814a 	bne.w	8003a0a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800377a:	f003 0310 	and.w	r3, r3, #16
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 8143 	beq.w	8003a0a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 813c 	beq.w	8003a0a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003792:	2300      	movs	r3, #0
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b2:	2b40      	cmp	r3, #64	; 0x40
 80037b4:	f040 80b4 	bne.w	8003920 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 8140 	beq.w	8003a4e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037d6:	429a      	cmp	r2, r3
 80037d8:	f080 8139 	bcs.w	8003a4e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ee:	f000 8088 	beq.w	8003902 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	330c      	adds	r3, #12
 80037f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003800:	e853 3f00 	ldrex	r3, [r3]
 8003804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003808:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800380c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003810:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800381e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003822:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003826:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800382a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800382e:	e841 2300 	strex	r3, r2, [r1]
 8003832:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003836:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1d9      	bne.n	80037f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3314      	adds	r3, #20
 8003844:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003848:	e853 3f00 	ldrex	r3, [r3]
 800384c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800384e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003850:	f023 0301 	bic.w	r3, r3, #1
 8003854:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3314      	adds	r3, #20
 800385e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003862:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003866:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003868:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800386a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800386e:	e841 2300 	strex	r3, r2, [r1]
 8003872:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1e1      	bne.n	800383e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	3314      	adds	r3, #20
 8003880:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003884:	e853 3f00 	ldrex	r3, [r3]
 8003888:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800388a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800388c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3314      	adds	r3, #20
 800389a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800389e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038a6:	e841 2300 	strex	r3, r2, [r1]
 80038aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1e3      	bne.n	800387a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	330c      	adds	r3, #12
 80038c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ca:	e853 3f00 	ldrex	r3, [r3]
 80038ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038d2:	f023 0310 	bic.w	r3, r3, #16
 80038d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	330c      	adds	r3, #12
 80038e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80038e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80038e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038ec:	e841 2300 	strex	r3, r2, [r1]
 80038f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80038f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e3      	bne.n	80038c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fe fce6 	bl	80022ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800390a:	b29b      	uxth	r3, r3
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	b29b      	uxth	r3, r3
 8003910:	4619      	mov	r1, r3
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f8b6 	bl	8003a84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003918:	e099      	b.n	8003a4e <HAL_UART_IRQHandler+0x50e>
 800391a:	bf00      	nop
 800391c:	08003cbb 	.word	0x08003cbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003928:	b29b      	uxth	r3, r3
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 808b 	beq.w	8003a52 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800393c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8086 	beq.w	8003a52 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	330c      	adds	r3, #12
 800394c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003950:	e853 3f00 	ldrex	r3, [r3]
 8003954:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003958:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800395c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	330c      	adds	r3, #12
 8003966:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800396a:	647a      	str	r2, [r7, #68]	; 0x44
 800396c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003970:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003972:	e841 2300 	strex	r3, r2, [r1]
 8003976:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1e3      	bne.n	8003946 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3314      	adds	r3, #20
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	e853 3f00 	ldrex	r3, [r3]
 800398c:	623b      	str	r3, [r7, #32]
   return(result);
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	f023 0301 	bic.w	r3, r3, #1
 8003994:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3314      	adds	r3, #20
 800399e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039a2:	633a      	str	r2, [r7, #48]	; 0x30
 80039a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039aa:	e841 2300 	strex	r3, r2, [r1]
 80039ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1e3      	bne.n	800397e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	330c      	adds	r3, #12
 80039ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0310 	bic.w	r3, r3, #16
 80039da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	330c      	adds	r3, #12
 80039e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80039e8:	61fa      	str	r2, [r7, #28]
 80039ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ec:	69b9      	ldr	r1, [r7, #24]
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	e841 2300 	strex	r3, r2, [r1]
 80039f4:	617b      	str	r3, [r7, #20]
   return(result);
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1e3      	bne.n	80039c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a00:	4619      	mov	r1, r3
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f83e 	bl	8003a84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a08:	e023      	b.n	8003a52 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <HAL_UART_IRQHandler+0x4ea>
 8003a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f95d 	bl	8003ce2 <UART_Transmit_IT>
    return;
 8003a28:	e014      	b.n	8003a54 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00e      	beq.n	8003a54 <HAL_UART_IRQHandler+0x514>
 8003a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d008      	beq.n	8003a54 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f99d 	bl	8003d82 <UART_EndTransmit_IT>
    return;
 8003a48:	e004      	b.n	8003a54 <HAL_UART_IRQHandler+0x514>
    return;
 8003a4a:	bf00      	nop
 8003a4c:	e002      	b.n	8003a54 <HAL_UART_IRQHandler+0x514>
      return;
 8003a4e:	bf00      	nop
 8003a50:	e000      	b.n	8003a54 <HAL_UART_IRQHandler+0x514>
      return;
 8003a52:	bf00      	nop
  }
}
 8003a54:	37e8      	adds	r7, #232	; 0xe8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop

08003a5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b090      	sub	sp, #64	; 0x40
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aac:	e050      	b.n	8003b50 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ab4:	d04c      	beq.n	8003b50 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d007      	beq.n	8003acc <UART_WaitOnFlagUntilTimeout+0x30>
 8003abc:	f7fd fc2e 	bl	800131c <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d241      	bcs.n	8003b50 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	330c      	adds	r3, #12
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	e853 3f00 	ldrex	r3, [r3]
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	330c      	adds	r3, #12
 8003aea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003aec:	637a      	str	r2, [r7, #52]	; 0x34
 8003aee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003af2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003af4:	e841 2300 	strex	r3, r2, [r1]
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1e5      	bne.n	8003acc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3314      	adds	r3, #20
 8003b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	e853 3f00 	ldrex	r3, [r3]
 8003b0e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f023 0301 	bic.w	r3, r3, #1
 8003b16:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3314      	adds	r3, #20
 8003b1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b20:	623a      	str	r2, [r7, #32]
 8003b22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b24:	69f9      	ldr	r1, [r7, #28]
 8003b26:	6a3a      	ldr	r2, [r7, #32]
 8003b28:	e841 2300 	strex	r3, r2, [r1]
 8003b2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1e5      	bne.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e00f      	b.n	8003b70 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	bf0c      	ite	eq
 8003b60:	2301      	moveq	r3, #1
 8003b62:	2300      	movne	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	461a      	mov	r2, r3
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d09f      	beq.n	8003aae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3740      	adds	r7, #64	; 0x40
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	4613      	mov	r3, r2
 8003b84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	88fa      	ldrh	r2, [r7, #6]
 8003b90:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	88fa      	ldrh	r2, [r7, #6]
 8003b96:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2222      	movs	r2, #34	; 0x22
 8003ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d007      	beq.n	8003bc6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bc4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695a      	ldr	r2, [r3, #20]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0201 	orr.w	r2, r2, #1
 8003bd4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f042 0220 	orr.w	r2, r2, #32
 8003be4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b095      	sub	sp, #84	; 0x54
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	330c      	adds	r3, #12
 8003c02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c06:	e853 3f00 	ldrex	r3, [r3]
 8003c0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	330c      	adds	r3, #12
 8003c1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c1c:	643a      	str	r2, [r7, #64]	; 0x40
 8003c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c24:	e841 2300 	strex	r3, r2, [r1]
 8003c28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1e5      	bne.n	8003bfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3314      	adds	r3, #20
 8003c36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f023 0301 	bic.w	r3, r3, #1
 8003c46:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3314      	adds	r3, #20
 8003c4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c58:	e841 2300 	strex	r3, r2, [r1]
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e5      	bne.n	8003c30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d119      	bne.n	8003ca0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	330c      	adds	r3, #12
 8003c72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	e853 3f00 	ldrex	r3, [r3]
 8003c7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f023 0310 	bic.w	r3, r3, #16
 8003c82:	647b      	str	r3, [r7, #68]	; 0x44
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	330c      	adds	r3, #12
 8003c8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c8c:	61ba      	str	r2, [r7, #24]
 8003c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c90:	6979      	ldr	r1, [r7, #20]
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	e841 2300 	strex	r3, r2, [r1]
 8003c98:	613b      	str	r3, [r7, #16]
   return(result);
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e5      	bne.n	8003c6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003cae:	bf00      	nop
 8003cb0:	3754      	adds	r7, #84	; 0x54
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b084      	sub	sp, #16
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f7ff fecb 	bl	8003a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b085      	sub	sp, #20
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b21      	cmp	r3, #33	; 0x21
 8003cf4:	d13e      	bne.n	8003d74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cfe:	d114      	bne.n	8003d2a <UART_Transmit_IT+0x48>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d110      	bne.n	8003d2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	461a      	mov	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	1c9a      	adds	r2, r3, #2
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	621a      	str	r2, [r3, #32]
 8003d28:	e008      	b.n	8003d3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	1c59      	adds	r1, r3, #1
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6211      	str	r1, [r2, #32]
 8003d34:	781a      	ldrb	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10f      	bne.n	8003d70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	e000      	b.n	8003d76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d74:	2302      	movs	r3, #2
  }
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b082      	sub	sp, #8
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff fe5a 	bl	8003a5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b08c      	sub	sp, #48	; 0x30
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b22      	cmp	r3, #34	; 0x22
 8003dc4:	f040 80ab 	bne.w	8003f1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd0:	d117      	bne.n	8003e02 <UART_Receive_IT+0x50>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d113      	bne.n	8003e02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	1c9a      	adds	r2, r3, #2
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	629a      	str	r2, [r3, #40]	; 0x28
 8003e00:	e026      	b.n	8003e50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e14:	d007      	beq.n	8003e26 <UART_Receive_IT+0x74>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10a      	bne.n	8003e34 <UART_Receive_IT+0x82>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e30:	701a      	strb	r2, [r3, #0]
 8003e32:	e008      	b.n	8003e46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d15a      	bne.n	8003f1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0220 	bic.w	r2, r2, #32
 8003e72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695a      	ldr	r2, [r3, #20]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0201 	bic.w	r2, r2, #1
 8003e92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d135      	bne.n	8003f10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	330c      	adds	r3, #12
 8003eb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	613b      	str	r3, [r7, #16]
   return(result);
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f023 0310 	bic.w	r3, r3, #16
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	330c      	adds	r3, #12
 8003ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eca:	623a      	str	r2, [r7, #32]
 8003ecc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ece:	69f9      	ldr	r1, [r7, #28]
 8003ed0:	6a3a      	ldr	r2, [r7, #32]
 8003ed2:	e841 2300 	strex	r3, r2, [r1]
 8003ed6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1e5      	bne.n	8003eaa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0310 	and.w	r3, r3, #16
 8003ee8:	2b10      	cmp	r3, #16
 8003eea:	d10a      	bne.n	8003f02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f06:	4619      	mov	r1, r3
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff fdbb 	bl	8003a84 <HAL_UARTEx_RxEventCallback>
 8003f0e:	e002      	b.n	8003f16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7fc ff6d 	bl	8000df0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	e002      	b.n	8003f20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	e000      	b.n	8003f20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003f1e:	2302      	movs	r3, #2
  }
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3730      	adds	r7, #48	; 0x30
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f2c:	b0c0      	sub	sp, #256	; 0x100
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f44:	68d9      	ldr	r1, [r3, #12]
 8003f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	ea40 0301 	orr.w	r3, r0, r1
 8003f50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	431a      	orrs	r2, r3
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f80:	f021 010c 	bic.w	r1, r1, #12
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f8e:	430b      	orrs	r3, r1
 8003f90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa2:	6999      	ldr	r1, [r3, #24]
 8003fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	ea40 0301 	orr.w	r3, r0, r1
 8003fae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4b8f      	ldr	r3, [pc, #572]	; (80041f4 <UART_SetConfig+0x2cc>)
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d005      	beq.n	8003fc8 <UART_SetConfig+0xa0>
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	4b8d      	ldr	r3, [pc, #564]	; (80041f8 <UART_SetConfig+0x2d0>)
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d104      	bne.n	8003fd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fc8:	f7fe fcc8 	bl	800295c <HAL_RCC_GetPCLK2Freq>
 8003fcc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003fd0:	e003      	b.n	8003fda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fd2:	f7fe fcaf 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 8003fd6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fe4:	f040 810c 	bne.w	8004200 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fec:	2200      	movs	r2, #0
 8003fee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ff2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ff6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ffa:	4622      	mov	r2, r4
 8003ffc:	462b      	mov	r3, r5
 8003ffe:	1891      	adds	r1, r2, r2
 8004000:	65b9      	str	r1, [r7, #88]	; 0x58
 8004002:	415b      	adcs	r3, r3
 8004004:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004006:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800400a:	4621      	mov	r1, r4
 800400c:	eb12 0801 	adds.w	r8, r2, r1
 8004010:	4629      	mov	r1, r5
 8004012:	eb43 0901 	adc.w	r9, r3, r1
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	f04f 0300 	mov.w	r3, #0
 800401e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004022:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004026:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800402a:	4690      	mov	r8, r2
 800402c:	4699      	mov	r9, r3
 800402e:	4623      	mov	r3, r4
 8004030:	eb18 0303 	adds.w	r3, r8, r3
 8004034:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004038:	462b      	mov	r3, r5
 800403a:	eb49 0303 	adc.w	r3, r9, r3
 800403e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800404e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004052:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004056:	460b      	mov	r3, r1
 8004058:	18db      	adds	r3, r3, r3
 800405a:	653b      	str	r3, [r7, #80]	; 0x50
 800405c:	4613      	mov	r3, r2
 800405e:	eb42 0303 	adc.w	r3, r2, r3
 8004062:	657b      	str	r3, [r7, #84]	; 0x54
 8004064:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004068:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800406c:	f7fc f920 	bl	80002b0 <__aeabi_uldivmod>
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	4b61      	ldr	r3, [pc, #388]	; (80041fc <UART_SetConfig+0x2d4>)
 8004076:	fba3 2302 	umull	r2, r3, r3, r2
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	011c      	lsls	r4, r3, #4
 800407e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004082:	2200      	movs	r2, #0
 8004084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004088:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800408c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004090:	4642      	mov	r2, r8
 8004092:	464b      	mov	r3, r9
 8004094:	1891      	adds	r1, r2, r2
 8004096:	64b9      	str	r1, [r7, #72]	; 0x48
 8004098:	415b      	adcs	r3, r3
 800409a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800409c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040a0:	4641      	mov	r1, r8
 80040a2:	eb12 0a01 	adds.w	sl, r2, r1
 80040a6:	4649      	mov	r1, r9
 80040a8:	eb43 0b01 	adc.w	fp, r3, r1
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040c0:	4692      	mov	sl, r2
 80040c2:	469b      	mov	fp, r3
 80040c4:	4643      	mov	r3, r8
 80040c6:	eb1a 0303 	adds.w	r3, sl, r3
 80040ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040ce:	464b      	mov	r3, r9
 80040d0:	eb4b 0303 	adc.w	r3, fp, r3
 80040d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80040d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80040e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80040ec:	460b      	mov	r3, r1
 80040ee:	18db      	adds	r3, r3, r3
 80040f0:	643b      	str	r3, [r7, #64]	; 0x40
 80040f2:	4613      	mov	r3, r2
 80040f4:	eb42 0303 	adc.w	r3, r2, r3
 80040f8:	647b      	str	r3, [r7, #68]	; 0x44
 80040fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004102:	f7fc f8d5 	bl	80002b0 <__aeabi_uldivmod>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4611      	mov	r1, r2
 800410c:	4b3b      	ldr	r3, [pc, #236]	; (80041fc <UART_SetConfig+0x2d4>)
 800410e:	fba3 2301 	umull	r2, r3, r3, r1
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	2264      	movs	r2, #100	; 0x64
 8004116:	fb02 f303 	mul.w	r3, r2, r3
 800411a:	1acb      	subs	r3, r1, r3
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004122:	4b36      	ldr	r3, [pc, #216]	; (80041fc <UART_SetConfig+0x2d4>)
 8004124:	fba3 2302 	umull	r2, r3, r3, r2
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004130:	441c      	add	r4, r3
 8004132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004136:	2200      	movs	r2, #0
 8004138:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800413c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004140:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004144:	4642      	mov	r2, r8
 8004146:	464b      	mov	r3, r9
 8004148:	1891      	adds	r1, r2, r2
 800414a:	63b9      	str	r1, [r7, #56]	; 0x38
 800414c:	415b      	adcs	r3, r3
 800414e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004150:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004154:	4641      	mov	r1, r8
 8004156:	1851      	adds	r1, r2, r1
 8004158:	6339      	str	r1, [r7, #48]	; 0x30
 800415a:	4649      	mov	r1, r9
 800415c:	414b      	adcs	r3, r1
 800415e:	637b      	str	r3, [r7, #52]	; 0x34
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800416c:	4659      	mov	r1, fp
 800416e:	00cb      	lsls	r3, r1, #3
 8004170:	4651      	mov	r1, sl
 8004172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004176:	4651      	mov	r1, sl
 8004178:	00ca      	lsls	r2, r1, #3
 800417a:	4610      	mov	r0, r2
 800417c:	4619      	mov	r1, r3
 800417e:	4603      	mov	r3, r0
 8004180:	4642      	mov	r2, r8
 8004182:	189b      	adds	r3, r3, r2
 8004184:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004188:	464b      	mov	r3, r9
 800418a:	460a      	mov	r2, r1
 800418c:	eb42 0303 	adc.w	r3, r2, r3
 8004190:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80041a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80041a8:	460b      	mov	r3, r1
 80041aa:	18db      	adds	r3, r3, r3
 80041ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ae:	4613      	mov	r3, r2
 80041b0:	eb42 0303 	adc.w	r3, r2, r3
 80041b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041be:	f7fc f877 	bl	80002b0 <__aeabi_uldivmod>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <UART_SetConfig+0x2d4>)
 80041c8:	fba3 1302 	umull	r1, r3, r3, r2
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	2164      	movs	r1, #100	; 0x64
 80041d0:	fb01 f303 	mul.w	r3, r1, r3
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	3332      	adds	r3, #50	; 0x32
 80041da:	4a08      	ldr	r2, [pc, #32]	; (80041fc <UART_SetConfig+0x2d4>)
 80041dc:	fba2 2303 	umull	r2, r3, r2, r3
 80041e0:	095b      	lsrs	r3, r3, #5
 80041e2:	f003 0207 	and.w	r2, r3, #7
 80041e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4422      	add	r2, r4
 80041ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041f0:	e105      	b.n	80043fe <UART_SetConfig+0x4d6>
 80041f2:	bf00      	nop
 80041f4:	40011000 	.word	0x40011000
 80041f8:	40011400 	.word	0x40011400
 80041fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004200:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004204:	2200      	movs	r2, #0
 8004206:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800420a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800420e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004212:	4642      	mov	r2, r8
 8004214:	464b      	mov	r3, r9
 8004216:	1891      	adds	r1, r2, r2
 8004218:	6239      	str	r1, [r7, #32]
 800421a:	415b      	adcs	r3, r3
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
 800421e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004222:	4641      	mov	r1, r8
 8004224:	1854      	adds	r4, r2, r1
 8004226:	4649      	mov	r1, r9
 8004228:	eb43 0501 	adc.w	r5, r3, r1
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	00eb      	lsls	r3, r5, #3
 8004236:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800423a:	00e2      	lsls	r2, r4, #3
 800423c:	4614      	mov	r4, r2
 800423e:	461d      	mov	r5, r3
 8004240:	4643      	mov	r3, r8
 8004242:	18e3      	adds	r3, r4, r3
 8004244:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004248:	464b      	mov	r3, r9
 800424a:	eb45 0303 	adc.w	r3, r5, r3
 800424e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800425e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004262:	f04f 0200 	mov.w	r2, #0
 8004266:	f04f 0300 	mov.w	r3, #0
 800426a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800426e:	4629      	mov	r1, r5
 8004270:	008b      	lsls	r3, r1, #2
 8004272:	4621      	mov	r1, r4
 8004274:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004278:	4621      	mov	r1, r4
 800427a:	008a      	lsls	r2, r1, #2
 800427c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004280:	f7fc f816 	bl	80002b0 <__aeabi_uldivmod>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4b60      	ldr	r3, [pc, #384]	; (800440c <UART_SetConfig+0x4e4>)
 800428a:	fba3 2302 	umull	r2, r3, r3, r2
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	011c      	lsls	r4, r3, #4
 8004292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004296:	2200      	movs	r2, #0
 8004298:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800429c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80042a4:	4642      	mov	r2, r8
 80042a6:	464b      	mov	r3, r9
 80042a8:	1891      	adds	r1, r2, r2
 80042aa:	61b9      	str	r1, [r7, #24]
 80042ac:	415b      	adcs	r3, r3
 80042ae:	61fb      	str	r3, [r7, #28]
 80042b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042b4:	4641      	mov	r1, r8
 80042b6:	1851      	adds	r1, r2, r1
 80042b8:	6139      	str	r1, [r7, #16]
 80042ba:	4649      	mov	r1, r9
 80042bc:	414b      	adcs	r3, r1
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042cc:	4659      	mov	r1, fp
 80042ce:	00cb      	lsls	r3, r1, #3
 80042d0:	4651      	mov	r1, sl
 80042d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042d6:	4651      	mov	r1, sl
 80042d8:	00ca      	lsls	r2, r1, #3
 80042da:	4610      	mov	r0, r2
 80042dc:	4619      	mov	r1, r3
 80042de:	4603      	mov	r3, r0
 80042e0:	4642      	mov	r2, r8
 80042e2:	189b      	adds	r3, r3, r2
 80042e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042e8:	464b      	mov	r3, r9
 80042ea:	460a      	mov	r2, r1
 80042ec:	eb42 0303 	adc.w	r3, r2, r3
 80042f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80042fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800430c:	4649      	mov	r1, r9
 800430e:	008b      	lsls	r3, r1, #2
 8004310:	4641      	mov	r1, r8
 8004312:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004316:	4641      	mov	r1, r8
 8004318:	008a      	lsls	r2, r1, #2
 800431a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800431e:	f7fb ffc7 	bl	80002b0 <__aeabi_uldivmod>
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	4b39      	ldr	r3, [pc, #228]	; (800440c <UART_SetConfig+0x4e4>)
 8004328:	fba3 1302 	umull	r1, r3, r3, r2
 800432c:	095b      	lsrs	r3, r3, #5
 800432e:	2164      	movs	r1, #100	; 0x64
 8004330:	fb01 f303 	mul.w	r3, r1, r3
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	3332      	adds	r3, #50	; 0x32
 800433a:	4a34      	ldr	r2, [pc, #208]	; (800440c <UART_SetConfig+0x4e4>)
 800433c:	fba2 2303 	umull	r2, r3, r2, r3
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004346:	441c      	add	r4, r3
 8004348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800434c:	2200      	movs	r2, #0
 800434e:	673b      	str	r3, [r7, #112]	; 0x70
 8004350:	677a      	str	r2, [r7, #116]	; 0x74
 8004352:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004356:	4642      	mov	r2, r8
 8004358:	464b      	mov	r3, r9
 800435a:	1891      	adds	r1, r2, r2
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	415b      	adcs	r3, r3
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004366:	4641      	mov	r1, r8
 8004368:	1851      	adds	r1, r2, r1
 800436a:	6039      	str	r1, [r7, #0]
 800436c:	4649      	mov	r1, r9
 800436e:	414b      	adcs	r3, r1
 8004370:	607b      	str	r3, [r7, #4]
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800437e:	4659      	mov	r1, fp
 8004380:	00cb      	lsls	r3, r1, #3
 8004382:	4651      	mov	r1, sl
 8004384:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004388:	4651      	mov	r1, sl
 800438a:	00ca      	lsls	r2, r1, #3
 800438c:	4610      	mov	r0, r2
 800438e:	4619      	mov	r1, r3
 8004390:	4603      	mov	r3, r0
 8004392:	4642      	mov	r2, r8
 8004394:	189b      	adds	r3, r3, r2
 8004396:	66bb      	str	r3, [r7, #104]	; 0x68
 8004398:	464b      	mov	r3, r9
 800439a:	460a      	mov	r2, r1
 800439c:	eb42 0303 	adc.w	r3, r2, r3
 80043a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	663b      	str	r3, [r7, #96]	; 0x60
 80043ac:	667a      	str	r2, [r7, #100]	; 0x64
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80043ba:	4649      	mov	r1, r9
 80043bc:	008b      	lsls	r3, r1, #2
 80043be:	4641      	mov	r1, r8
 80043c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043c4:	4641      	mov	r1, r8
 80043c6:	008a      	lsls	r2, r1, #2
 80043c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043cc:	f7fb ff70 	bl	80002b0 <__aeabi_uldivmod>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4b0d      	ldr	r3, [pc, #52]	; (800440c <UART_SetConfig+0x4e4>)
 80043d6:	fba3 1302 	umull	r1, r3, r3, r2
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	2164      	movs	r1, #100	; 0x64
 80043de:	fb01 f303 	mul.w	r3, r1, r3
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	3332      	adds	r3, #50	; 0x32
 80043e8:	4a08      	ldr	r2, [pc, #32]	; (800440c <UART_SetConfig+0x4e4>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	f003 020f 	and.w	r2, r3, #15
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4422      	add	r2, r4
 80043fc:	609a      	str	r2, [r3, #8]
}
 80043fe:	bf00      	nop
 8004400:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004404:	46bd      	mov	sp, r7
 8004406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800440a:	bf00      	nop
 800440c:	51eb851f 	.word	0x51eb851f

08004410 <__errno>:
 8004410:	4b01      	ldr	r3, [pc, #4]	; (8004418 <__errno+0x8>)
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	2000000c 	.word	0x2000000c

0800441c <__libc_init_array>:
 800441c:	b570      	push	{r4, r5, r6, lr}
 800441e:	4d0d      	ldr	r5, [pc, #52]	; (8004454 <__libc_init_array+0x38>)
 8004420:	4c0d      	ldr	r4, [pc, #52]	; (8004458 <__libc_init_array+0x3c>)
 8004422:	1b64      	subs	r4, r4, r5
 8004424:	10a4      	asrs	r4, r4, #2
 8004426:	2600      	movs	r6, #0
 8004428:	42a6      	cmp	r6, r4
 800442a:	d109      	bne.n	8004440 <__libc_init_array+0x24>
 800442c:	4d0b      	ldr	r5, [pc, #44]	; (800445c <__libc_init_array+0x40>)
 800442e:	4c0c      	ldr	r4, [pc, #48]	; (8004460 <__libc_init_array+0x44>)
 8004430:	f001 f8fa 	bl	8005628 <_init>
 8004434:	1b64      	subs	r4, r4, r5
 8004436:	10a4      	asrs	r4, r4, #2
 8004438:	2600      	movs	r6, #0
 800443a:	42a6      	cmp	r6, r4
 800443c:	d105      	bne.n	800444a <__libc_init_array+0x2e>
 800443e:	bd70      	pop	{r4, r5, r6, pc}
 8004440:	f855 3b04 	ldr.w	r3, [r5], #4
 8004444:	4798      	blx	r3
 8004446:	3601      	adds	r6, #1
 8004448:	e7ee      	b.n	8004428 <__libc_init_array+0xc>
 800444a:	f855 3b04 	ldr.w	r3, [r5], #4
 800444e:	4798      	blx	r3
 8004450:	3601      	adds	r6, #1
 8004452:	e7f2      	b.n	800443a <__libc_init_array+0x1e>
 8004454:	080057b8 	.word	0x080057b8
 8004458:	080057b8 	.word	0x080057b8
 800445c:	080057b8 	.word	0x080057b8
 8004460:	080057bc 	.word	0x080057bc

08004464 <memset>:
 8004464:	4402      	add	r2, r0
 8004466:	4603      	mov	r3, r0
 8004468:	4293      	cmp	r3, r2
 800446a:	d100      	bne.n	800446e <memset+0xa>
 800446c:	4770      	bx	lr
 800446e:	f803 1b01 	strb.w	r1, [r3], #1
 8004472:	e7f9      	b.n	8004468 <memset+0x4>

08004474 <iprintf>:
 8004474:	b40f      	push	{r0, r1, r2, r3}
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <iprintf+0x2c>)
 8004478:	b513      	push	{r0, r1, r4, lr}
 800447a:	681c      	ldr	r4, [r3, #0]
 800447c:	b124      	cbz	r4, 8004488 <iprintf+0x14>
 800447e:	69a3      	ldr	r3, [r4, #24]
 8004480:	b913      	cbnz	r3, 8004488 <iprintf+0x14>
 8004482:	4620      	mov	r0, r4
 8004484:	f000 fb2c 	bl	8004ae0 <__sinit>
 8004488:	ab05      	add	r3, sp, #20
 800448a:	9a04      	ldr	r2, [sp, #16]
 800448c:	68a1      	ldr	r1, [r4, #8]
 800448e:	9301      	str	r3, [sp, #4]
 8004490:	4620      	mov	r0, r4
 8004492:	f000 fd3d 	bl	8004f10 <_vfiprintf_r>
 8004496:	b002      	add	sp, #8
 8004498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800449c:	b004      	add	sp, #16
 800449e:	4770      	bx	lr
 80044a0:	2000000c 	.word	0x2000000c

080044a4 <_puts_r>:
 80044a4:	b570      	push	{r4, r5, r6, lr}
 80044a6:	460e      	mov	r6, r1
 80044a8:	4605      	mov	r5, r0
 80044aa:	b118      	cbz	r0, 80044b4 <_puts_r+0x10>
 80044ac:	6983      	ldr	r3, [r0, #24]
 80044ae:	b90b      	cbnz	r3, 80044b4 <_puts_r+0x10>
 80044b0:	f000 fb16 	bl	8004ae0 <__sinit>
 80044b4:	69ab      	ldr	r3, [r5, #24]
 80044b6:	68ac      	ldr	r4, [r5, #8]
 80044b8:	b913      	cbnz	r3, 80044c0 <_puts_r+0x1c>
 80044ba:	4628      	mov	r0, r5
 80044bc:	f000 fb10 	bl	8004ae0 <__sinit>
 80044c0:	4b2c      	ldr	r3, [pc, #176]	; (8004574 <_puts_r+0xd0>)
 80044c2:	429c      	cmp	r4, r3
 80044c4:	d120      	bne.n	8004508 <_puts_r+0x64>
 80044c6:	686c      	ldr	r4, [r5, #4]
 80044c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044ca:	07db      	lsls	r3, r3, #31
 80044cc:	d405      	bmi.n	80044da <_puts_r+0x36>
 80044ce:	89a3      	ldrh	r3, [r4, #12]
 80044d0:	0598      	lsls	r0, r3, #22
 80044d2:	d402      	bmi.n	80044da <_puts_r+0x36>
 80044d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044d6:	f000 fba1 	bl	8004c1c <__retarget_lock_acquire_recursive>
 80044da:	89a3      	ldrh	r3, [r4, #12]
 80044dc:	0719      	lsls	r1, r3, #28
 80044de:	d51d      	bpl.n	800451c <_puts_r+0x78>
 80044e0:	6923      	ldr	r3, [r4, #16]
 80044e2:	b1db      	cbz	r3, 800451c <_puts_r+0x78>
 80044e4:	3e01      	subs	r6, #1
 80044e6:	68a3      	ldr	r3, [r4, #8]
 80044e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044ec:	3b01      	subs	r3, #1
 80044ee:	60a3      	str	r3, [r4, #8]
 80044f0:	bb39      	cbnz	r1, 8004542 <_puts_r+0x9e>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	da38      	bge.n	8004568 <_puts_r+0xc4>
 80044f6:	4622      	mov	r2, r4
 80044f8:	210a      	movs	r1, #10
 80044fa:	4628      	mov	r0, r5
 80044fc:	f000 f916 	bl	800472c <__swbuf_r>
 8004500:	3001      	adds	r0, #1
 8004502:	d011      	beq.n	8004528 <_puts_r+0x84>
 8004504:	250a      	movs	r5, #10
 8004506:	e011      	b.n	800452c <_puts_r+0x88>
 8004508:	4b1b      	ldr	r3, [pc, #108]	; (8004578 <_puts_r+0xd4>)
 800450a:	429c      	cmp	r4, r3
 800450c:	d101      	bne.n	8004512 <_puts_r+0x6e>
 800450e:	68ac      	ldr	r4, [r5, #8]
 8004510:	e7da      	b.n	80044c8 <_puts_r+0x24>
 8004512:	4b1a      	ldr	r3, [pc, #104]	; (800457c <_puts_r+0xd8>)
 8004514:	429c      	cmp	r4, r3
 8004516:	bf08      	it	eq
 8004518:	68ec      	ldreq	r4, [r5, #12]
 800451a:	e7d5      	b.n	80044c8 <_puts_r+0x24>
 800451c:	4621      	mov	r1, r4
 800451e:	4628      	mov	r0, r5
 8004520:	f000 f956 	bl	80047d0 <__swsetup_r>
 8004524:	2800      	cmp	r0, #0
 8004526:	d0dd      	beq.n	80044e4 <_puts_r+0x40>
 8004528:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800452c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800452e:	07da      	lsls	r2, r3, #31
 8004530:	d405      	bmi.n	800453e <_puts_r+0x9a>
 8004532:	89a3      	ldrh	r3, [r4, #12]
 8004534:	059b      	lsls	r3, r3, #22
 8004536:	d402      	bmi.n	800453e <_puts_r+0x9a>
 8004538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800453a:	f000 fb70 	bl	8004c1e <__retarget_lock_release_recursive>
 800453e:	4628      	mov	r0, r5
 8004540:	bd70      	pop	{r4, r5, r6, pc}
 8004542:	2b00      	cmp	r3, #0
 8004544:	da04      	bge.n	8004550 <_puts_r+0xac>
 8004546:	69a2      	ldr	r2, [r4, #24]
 8004548:	429a      	cmp	r2, r3
 800454a:	dc06      	bgt.n	800455a <_puts_r+0xb6>
 800454c:	290a      	cmp	r1, #10
 800454e:	d004      	beq.n	800455a <_puts_r+0xb6>
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	6022      	str	r2, [r4, #0]
 8004556:	7019      	strb	r1, [r3, #0]
 8004558:	e7c5      	b.n	80044e6 <_puts_r+0x42>
 800455a:	4622      	mov	r2, r4
 800455c:	4628      	mov	r0, r5
 800455e:	f000 f8e5 	bl	800472c <__swbuf_r>
 8004562:	3001      	adds	r0, #1
 8004564:	d1bf      	bne.n	80044e6 <_puts_r+0x42>
 8004566:	e7df      	b.n	8004528 <_puts_r+0x84>
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	250a      	movs	r5, #10
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	6022      	str	r2, [r4, #0]
 8004570:	701d      	strb	r5, [r3, #0]
 8004572:	e7db      	b.n	800452c <_puts_r+0x88>
 8004574:	0800573c 	.word	0x0800573c
 8004578:	0800575c 	.word	0x0800575c
 800457c:	0800571c 	.word	0x0800571c

08004580 <puts>:
 8004580:	4b02      	ldr	r3, [pc, #8]	; (800458c <puts+0xc>)
 8004582:	4601      	mov	r1, r0
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	f7ff bf8d 	b.w	80044a4 <_puts_r>
 800458a:	bf00      	nop
 800458c:	2000000c 	.word	0x2000000c

08004590 <setbuf>:
 8004590:	2900      	cmp	r1, #0
 8004592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004596:	bf0c      	ite	eq
 8004598:	2202      	moveq	r2, #2
 800459a:	2200      	movne	r2, #0
 800459c:	f000 b800 	b.w	80045a0 <setvbuf>

080045a0 <setvbuf>:
 80045a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80045a4:	461d      	mov	r5, r3
 80045a6:	4b5d      	ldr	r3, [pc, #372]	; (800471c <setvbuf+0x17c>)
 80045a8:	681f      	ldr	r7, [r3, #0]
 80045aa:	4604      	mov	r4, r0
 80045ac:	460e      	mov	r6, r1
 80045ae:	4690      	mov	r8, r2
 80045b0:	b127      	cbz	r7, 80045bc <setvbuf+0x1c>
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	b913      	cbnz	r3, 80045bc <setvbuf+0x1c>
 80045b6:	4638      	mov	r0, r7
 80045b8:	f000 fa92 	bl	8004ae0 <__sinit>
 80045bc:	4b58      	ldr	r3, [pc, #352]	; (8004720 <setvbuf+0x180>)
 80045be:	429c      	cmp	r4, r3
 80045c0:	d167      	bne.n	8004692 <setvbuf+0xf2>
 80045c2:	687c      	ldr	r4, [r7, #4]
 80045c4:	f1b8 0f02 	cmp.w	r8, #2
 80045c8:	d006      	beq.n	80045d8 <setvbuf+0x38>
 80045ca:	f1b8 0f01 	cmp.w	r8, #1
 80045ce:	f200 809f 	bhi.w	8004710 <setvbuf+0x170>
 80045d2:	2d00      	cmp	r5, #0
 80045d4:	f2c0 809c 	blt.w	8004710 <setvbuf+0x170>
 80045d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045da:	07db      	lsls	r3, r3, #31
 80045dc:	d405      	bmi.n	80045ea <setvbuf+0x4a>
 80045de:	89a3      	ldrh	r3, [r4, #12]
 80045e0:	0598      	lsls	r0, r3, #22
 80045e2:	d402      	bmi.n	80045ea <setvbuf+0x4a>
 80045e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045e6:	f000 fb19 	bl	8004c1c <__retarget_lock_acquire_recursive>
 80045ea:	4621      	mov	r1, r4
 80045ec:	4638      	mov	r0, r7
 80045ee:	f000 f9e3 	bl	80049b8 <_fflush_r>
 80045f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045f4:	b141      	cbz	r1, 8004608 <setvbuf+0x68>
 80045f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045fa:	4299      	cmp	r1, r3
 80045fc:	d002      	beq.n	8004604 <setvbuf+0x64>
 80045fe:	4638      	mov	r0, r7
 8004600:	f000 fb7c 	bl	8004cfc <_free_r>
 8004604:	2300      	movs	r3, #0
 8004606:	6363      	str	r3, [r4, #52]	; 0x34
 8004608:	2300      	movs	r3, #0
 800460a:	61a3      	str	r3, [r4, #24]
 800460c:	6063      	str	r3, [r4, #4]
 800460e:	89a3      	ldrh	r3, [r4, #12]
 8004610:	0619      	lsls	r1, r3, #24
 8004612:	d503      	bpl.n	800461c <setvbuf+0x7c>
 8004614:	6921      	ldr	r1, [r4, #16]
 8004616:	4638      	mov	r0, r7
 8004618:	f000 fb70 	bl	8004cfc <_free_r>
 800461c:	89a3      	ldrh	r3, [r4, #12]
 800461e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004622:	f023 0303 	bic.w	r3, r3, #3
 8004626:	f1b8 0f02 	cmp.w	r8, #2
 800462a:	81a3      	strh	r3, [r4, #12]
 800462c:	d06c      	beq.n	8004708 <setvbuf+0x168>
 800462e:	ab01      	add	r3, sp, #4
 8004630:	466a      	mov	r2, sp
 8004632:	4621      	mov	r1, r4
 8004634:	4638      	mov	r0, r7
 8004636:	f000 faf3 	bl	8004c20 <__swhatbuf_r>
 800463a:	89a3      	ldrh	r3, [r4, #12]
 800463c:	4318      	orrs	r0, r3
 800463e:	81a0      	strh	r0, [r4, #12]
 8004640:	2d00      	cmp	r5, #0
 8004642:	d130      	bne.n	80046a6 <setvbuf+0x106>
 8004644:	9d00      	ldr	r5, [sp, #0]
 8004646:	4628      	mov	r0, r5
 8004648:	f000 fb50 	bl	8004cec <malloc>
 800464c:	4606      	mov	r6, r0
 800464e:	2800      	cmp	r0, #0
 8004650:	d155      	bne.n	80046fe <setvbuf+0x15e>
 8004652:	f8dd 9000 	ldr.w	r9, [sp]
 8004656:	45a9      	cmp	r9, r5
 8004658:	d14a      	bne.n	80046f0 <setvbuf+0x150>
 800465a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800465e:	2200      	movs	r2, #0
 8004660:	60a2      	str	r2, [r4, #8]
 8004662:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004666:	6022      	str	r2, [r4, #0]
 8004668:	6122      	str	r2, [r4, #16]
 800466a:	2201      	movs	r2, #1
 800466c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004670:	6162      	str	r2, [r4, #20]
 8004672:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004674:	f043 0302 	orr.w	r3, r3, #2
 8004678:	07d2      	lsls	r2, r2, #31
 800467a:	81a3      	strh	r3, [r4, #12]
 800467c:	d405      	bmi.n	800468a <setvbuf+0xea>
 800467e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004682:	d102      	bne.n	800468a <setvbuf+0xea>
 8004684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004686:	f000 faca 	bl	8004c1e <__retarget_lock_release_recursive>
 800468a:	4628      	mov	r0, r5
 800468c:	b003      	add	sp, #12
 800468e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004692:	4b24      	ldr	r3, [pc, #144]	; (8004724 <setvbuf+0x184>)
 8004694:	429c      	cmp	r4, r3
 8004696:	d101      	bne.n	800469c <setvbuf+0xfc>
 8004698:	68bc      	ldr	r4, [r7, #8]
 800469a:	e793      	b.n	80045c4 <setvbuf+0x24>
 800469c:	4b22      	ldr	r3, [pc, #136]	; (8004728 <setvbuf+0x188>)
 800469e:	429c      	cmp	r4, r3
 80046a0:	bf08      	it	eq
 80046a2:	68fc      	ldreq	r4, [r7, #12]
 80046a4:	e78e      	b.n	80045c4 <setvbuf+0x24>
 80046a6:	2e00      	cmp	r6, #0
 80046a8:	d0cd      	beq.n	8004646 <setvbuf+0xa6>
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	b913      	cbnz	r3, 80046b4 <setvbuf+0x114>
 80046ae:	4638      	mov	r0, r7
 80046b0:	f000 fa16 	bl	8004ae0 <__sinit>
 80046b4:	f1b8 0f01 	cmp.w	r8, #1
 80046b8:	bf08      	it	eq
 80046ba:	89a3      	ldrheq	r3, [r4, #12]
 80046bc:	6026      	str	r6, [r4, #0]
 80046be:	bf04      	itt	eq
 80046c0:	f043 0301 	orreq.w	r3, r3, #1
 80046c4:	81a3      	strheq	r3, [r4, #12]
 80046c6:	89a2      	ldrh	r2, [r4, #12]
 80046c8:	f012 0308 	ands.w	r3, r2, #8
 80046cc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80046d0:	d01c      	beq.n	800470c <setvbuf+0x16c>
 80046d2:	07d3      	lsls	r3, r2, #31
 80046d4:	bf41      	itttt	mi
 80046d6:	2300      	movmi	r3, #0
 80046d8:	426d      	negmi	r5, r5
 80046da:	60a3      	strmi	r3, [r4, #8]
 80046dc:	61a5      	strmi	r5, [r4, #24]
 80046de:	bf58      	it	pl
 80046e0:	60a5      	strpl	r5, [r4, #8]
 80046e2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80046e4:	f015 0501 	ands.w	r5, r5, #1
 80046e8:	d115      	bne.n	8004716 <setvbuf+0x176>
 80046ea:	f412 7f00 	tst.w	r2, #512	; 0x200
 80046ee:	e7c8      	b.n	8004682 <setvbuf+0xe2>
 80046f0:	4648      	mov	r0, r9
 80046f2:	f000 fafb 	bl	8004cec <malloc>
 80046f6:	4606      	mov	r6, r0
 80046f8:	2800      	cmp	r0, #0
 80046fa:	d0ae      	beq.n	800465a <setvbuf+0xba>
 80046fc:	464d      	mov	r5, r9
 80046fe:	89a3      	ldrh	r3, [r4, #12]
 8004700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004704:	81a3      	strh	r3, [r4, #12]
 8004706:	e7d0      	b.n	80046aa <setvbuf+0x10a>
 8004708:	2500      	movs	r5, #0
 800470a:	e7a8      	b.n	800465e <setvbuf+0xbe>
 800470c:	60a3      	str	r3, [r4, #8]
 800470e:	e7e8      	b.n	80046e2 <setvbuf+0x142>
 8004710:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004714:	e7b9      	b.n	800468a <setvbuf+0xea>
 8004716:	2500      	movs	r5, #0
 8004718:	e7b7      	b.n	800468a <setvbuf+0xea>
 800471a:	bf00      	nop
 800471c:	2000000c 	.word	0x2000000c
 8004720:	0800573c 	.word	0x0800573c
 8004724:	0800575c 	.word	0x0800575c
 8004728:	0800571c 	.word	0x0800571c

0800472c <__swbuf_r>:
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	460e      	mov	r6, r1
 8004730:	4614      	mov	r4, r2
 8004732:	4605      	mov	r5, r0
 8004734:	b118      	cbz	r0, 800473e <__swbuf_r+0x12>
 8004736:	6983      	ldr	r3, [r0, #24]
 8004738:	b90b      	cbnz	r3, 800473e <__swbuf_r+0x12>
 800473a:	f000 f9d1 	bl	8004ae0 <__sinit>
 800473e:	4b21      	ldr	r3, [pc, #132]	; (80047c4 <__swbuf_r+0x98>)
 8004740:	429c      	cmp	r4, r3
 8004742:	d12b      	bne.n	800479c <__swbuf_r+0x70>
 8004744:	686c      	ldr	r4, [r5, #4]
 8004746:	69a3      	ldr	r3, [r4, #24]
 8004748:	60a3      	str	r3, [r4, #8]
 800474a:	89a3      	ldrh	r3, [r4, #12]
 800474c:	071a      	lsls	r2, r3, #28
 800474e:	d52f      	bpl.n	80047b0 <__swbuf_r+0x84>
 8004750:	6923      	ldr	r3, [r4, #16]
 8004752:	b36b      	cbz	r3, 80047b0 <__swbuf_r+0x84>
 8004754:	6923      	ldr	r3, [r4, #16]
 8004756:	6820      	ldr	r0, [r4, #0]
 8004758:	1ac0      	subs	r0, r0, r3
 800475a:	6963      	ldr	r3, [r4, #20]
 800475c:	b2f6      	uxtb	r6, r6
 800475e:	4283      	cmp	r3, r0
 8004760:	4637      	mov	r7, r6
 8004762:	dc04      	bgt.n	800476e <__swbuf_r+0x42>
 8004764:	4621      	mov	r1, r4
 8004766:	4628      	mov	r0, r5
 8004768:	f000 f926 	bl	80049b8 <_fflush_r>
 800476c:	bb30      	cbnz	r0, 80047bc <__swbuf_r+0x90>
 800476e:	68a3      	ldr	r3, [r4, #8]
 8004770:	3b01      	subs	r3, #1
 8004772:	60a3      	str	r3, [r4, #8]
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	6022      	str	r2, [r4, #0]
 800477a:	701e      	strb	r6, [r3, #0]
 800477c:	6963      	ldr	r3, [r4, #20]
 800477e:	3001      	adds	r0, #1
 8004780:	4283      	cmp	r3, r0
 8004782:	d004      	beq.n	800478e <__swbuf_r+0x62>
 8004784:	89a3      	ldrh	r3, [r4, #12]
 8004786:	07db      	lsls	r3, r3, #31
 8004788:	d506      	bpl.n	8004798 <__swbuf_r+0x6c>
 800478a:	2e0a      	cmp	r6, #10
 800478c:	d104      	bne.n	8004798 <__swbuf_r+0x6c>
 800478e:	4621      	mov	r1, r4
 8004790:	4628      	mov	r0, r5
 8004792:	f000 f911 	bl	80049b8 <_fflush_r>
 8004796:	b988      	cbnz	r0, 80047bc <__swbuf_r+0x90>
 8004798:	4638      	mov	r0, r7
 800479a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800479c:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <__swbuf_r+0x9c>)
 800479e:	429c      	cmp	r4, r3
 80047a0:	d101      	bne.n	80047a6 <__swbuf_r+0x7a>
 80047a2:	68ac      	ldr	r4, [r5, #8]
 80047a4:	e7cf      	b.n	8004746 <__swbuf_r+0x1a>
 80047a6:	4b09      	ldr	r3, [pc, #36]	; (80047cc <__swbuf_r+0xa0>)
 80047a8:	429c      	cmp	r4, r3
 80047aa:	bf08      	it	eq
 80047ac:	68ec      	ldreq	r4, [r5, #12]
 80047ae:	e7ca      	b.n	8004746 <__swbuf_r+0x1a>
 80047b0:	4621      	mov	r1, r4
 80047b2:	4628      	mov	r0, r5
 80047b4:	f000 f80c 	bl	80047d0 <__swsetup_r>
 80047b8:	2800      	cmp	r0, #0
 80047ba:	d0cb      	beq.n	8004754 <__swbuf_r+0x28>
 80047bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80047c0:	e7ea      	b.n	8004798 <__swbuf_r+0x6c>
 80047c2:	bf00      	nop
 80047c4:	0800573c 	.word	0x0800573c
 80047c8:	0800575c 	.word	0x0800575c
 80047cc:	0800571c 	.word	0x0800571c

080047d0 <__swsetup_r>:
 80047d0:	4b32      	ldr	r3, [pc, #200]	; (800489c <__swsetup_r+0xcc>)
 80047d2:	b570      	push	{r4, r5, r6, lr}
 80047d4:	681d      	ldr	r5, [r3, #0]
 80047d6:	4606      	mov	r6, r0
 80047d8:	460c      	mov	r4, r1
 80047da:	b125      	cbz	r5, 80047e6 <__swsetup_r+0x16>
 80047dc:	69ab      	ldr	r3, [r5, #24]
 80047de:	b913      	cbnz	r3, 80047e6 <__swsetup_r+0x16>
 80047e0:	4628      	mov	r0, r5
 80047e2:	f000 f97d 	bl	8004ae0 <__sinit>
 80047e6:	4b2e      	ldr	r3, [pc, #184]	; (80048a0 <__swsetup_r+0xd0>)
 80047e8:	429c      	cmp	r4, r3
 80047ea:	d10f      	bne.n	800480c <__swsetup_r+0x3c>
 80047ec:	686c      	ldr	r4, [r5, #4]
 80047ee:	89a3      	ldrh	r3, [r4, #12]
 80047f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047f4:	0719      	lsls	r1, r3, #28
 80047f6:	d42c      	bmi.n	8004852 <__swsetup_r+0x82>
 80047f8:	06dd      	lsls	r5, r3, #27
 80047fa:	d411      	bmi.n	8004820 <__swsetup_r+0x50>
 80047fc:	2309      	movs	r3, #9
 80047fe:	6033      	str	r3, [r6, #0]
 8004800:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004804:	81a3      	strh	r3, [r4, #12]
 8004806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800480a:	e03e      	b.n	800488a <__swsetup_r+0xba>
 800480c:	4b25      	ldr	r3, [pc, #148]	; (80048a4 <__swsetup_r+0xd4>)
 800480e:	429c      	cmp	r4, r3
 8004810:	d101      	bne.n	8004816 <__swsetup_r+0x46>
 8004812:	68ac      	ldr	r4, [r5, #8]
 8004814:	e7eb      	b.n	80047ee <__swsetup_r+0x1e>
 8004816:	4b24      	ldr	r3, [pc, #144]	; (80048a8 <__swsetup_r+0xd8>)
 8004818:	429c      	cmp	r4, r3
 800481a:	bf08      	it	eq
 800481c:	68ec      	ldreq	r4, [r5, #12]
 800481e:	e7e6      	b.n	80047ee <__swsetup_r+0x1e>
 8004820:	0758      	lsls	r0, r3, #29
 8004822:	d512      	bpl.n	800484a <__swsetup_r+0x7a>
 8004824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004826:	b141      	cbz	r1, 800483a <__swsetup_r+0x6a>
 8004828:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800482c:	4299      	cmp	r1, r3
 800482e:	d002      	beq.n	8004836 <__swsetup_r+0x66>
 8004830:	4630      	mov	r0, r6
 8004832:	f000 fa63 	bl	8004cfc <_free_r>
 8004836:	2300      	movs	r3, #0
 8004838:	6363      	str	r3, [r4, #52]	; 0x34
 800483a:	89a3      	ldrh	r3, [r4, #12]
 800483c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004840:	81a3      	strh	r3, [r4, #12]
 8004842:	2300      	movs	r3, #0
 8004844:	6063      	str	r3, [r4, #4]
 8004846:	6923      	ldr	r3, [r4, #16]
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	89a3      	ldrh	r3, [r4, #12]
 800484c:	f043 0308 	orr.w	r3, r3, #8
 8004850:	81a3      	strh	r3, [r4, #12]
 8004852:	6923      	ldr	r3, [r4, #16]
 8004854:	b94b      	cbnz	r3, 800486a <__swsetup_r+0x9a>
 8004856:	89a3      	ldrh	r3, [r4, #12]
 8004858:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800485c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004860:	d003      	beq.n	800486a <__swsetup_r+0x9a>
 8004862:	4621      	mov	r1, r4
 8004864:	4630      	mov	r0, r6
 8004866:	f000 fa01 	bl	8004c6c <__smakebuf_r>
 800486a:	89a0      	ldrh	r0, [r4, #12]
 800486c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004870:	f010 0301 	ands.w	r3, r0, #1
 8004874:	d00a      	beq.n	800488c <__swsetup_r+0xbc>
 8004876:	2300      	movs	r3, #0
 8004878:	60a3      	str	r3, [r4, #8]
 800487a:	6963      	ldr	r3, [r4, #20]
 800487c:	425b      	negs	r3, r3
 800487e:	61a3      	str	r3, [r4, #24]
 8004880:	6923      	ldr	r3, [r4, #16]
 8004882:	b943      	cbnz	r3, 8004896 <__swsetup_r+0xc6>
 8004884:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004888:	d1ba      	bne.n	8004800 <__swsetup_r+0x30>
 800488a:	bd70      	pop	{r4, r5, r6, pc}
 800488c:	0781      	lsls	r1, r0, #30
 800488e:	bf58      	it	pl
 8004890:	6963      	ldrpl	r3, [r4, #20]
 8004892:	60a3      	str	r3, [r4, #8]
 8004894:	e7f4      	b.n	8004880 <__swsetup_r+0xb0>
 8004896:	2000      	movs	r0, #0
 8004898:	e7f7      	b.n	800488a <__swsetup_r+0xba>
 800489a:	bf00      	nop
 800489c:	2000000c 	.word	0x2000000c
 80048a0:	0800573c 	.word	0x0800573c
 80048a4:	0800575c 	.word	0x0800575c
 80048a8:	0800571c 	.word	0x0800571c

080048ac <__sflush_r>:
 80048ac:	898a      	ldrh	r2, [r1, #12]
 80048ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048b2:	4605      	mov	r5, r0
 80048b4:	0710      	lsls	r0, r2, #28
 80048b6:	460c      	mov	r4, r1
 80048b8:	d458      	bmi.n	800496c <__sflush_r+0xc0>
 80048ba:	684b      	ldr	r3, [r1, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	dc05      	bgt.n	80048cc <__sflush_r+0x20>
 80048c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	dc02      	bgt.n	80048cc <__sflush_r+0x20>
 80048c6:	2000      	movs	r0, #0
 80048c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048ce:	2e00      	cmp	r6, #0
 80048d0:	d0f9      	beq.n	80048c6 <__sflush_r+0x1a>
 80048d2:	2300      	movs	r3, #0
 80048d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048d8:	682f      	ldr	r7, [r5, #0]
 80048da:	602b      	str	r3, [r5, #0]
 80048dc:	d032      	beq.n	8004944 <__sflush_r+0x98>
 80048de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048e0:	89a3      	ldrh	r3, [r4, #12]
 80048e2:	075a      	lsls	r2, r3, #29
 80048e4:	d505      	bpl.n	80048f2 <__sflush_r+0x46>
 80048e6:	6863      	ldr	r3, [r4, #4]
 80048e8:	1ac0      	subs	r0, r0, r3
 80048ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048ec:	b10b      	cbz	r3, 80048f2 <__sflush_r+0x46>
 80048ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048f0:	1ac0      	subs	r0, r0, r3
 80048f2:	2300      	movs	r3, #0
 80048f4:	4602      	mov	r2, r0
 80048f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048f8:	6a21      	ldr	r1, [r4, #32]
 80048fa:	4628      	mov	r0, r5
 80048fc:	47b0      	blx	r6
 80048fe:	1c43      	adds	r3, r0, #1
 8004900:	89a3      	ldrh	r3, [r4, #12]
 8004902:	d106      	bne.n	8004912 <__sflush_r+0x66>
 8004904:	6829      	ldr	r1, [r5, #0]
 8004906:	291d      	cmp	r1, #29
 8004908:	d82c      	bhi.n	8004964 <__sflush_r+0xb8>
 800490a:	4a2a      	ldr	r2, [pc, #168]	; (80049b4 <__sflush_r+0x108>)
 800490c:	40ca      	lsrs	r2, r1
 800490e:	07d6      	lsls	r6, r2, #31
 8004910:	d528      	bpl.n	8004964 <__sflush_r+0xb8>
 8004912:	2200      	movs	r2, #0
 8004914:	6062      	str	r2, [r4, #4]
 8004916:	04d9      	lsls	r1, r3, #19
 8004918:	6922      	ldr	r2, [r4, #16]
 800491a:	6022      	str	r2, [r4, #0]
 800491c:	d504      	bpl.n	8004928 <__sflush_r+0x7c>
 800491e:	1c42      	adds	r2, r0, #1
 8004920:	d101      	bne.n	8004926 <__sflush_r+0x7a>
 8004922:	682b      	ldr	r3, [r5, #0]
 8004924:	b903      	cbnz	r3, 8004928 <__sflush_r+0x7c>
 8004926:	6560      	str	r0, [r4, #84]	; 0x54
 8004928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800492a:	602f      	str	r7, [r5, #0]
 800492c:	2900      	cmp	r1, #0
 800492e:	d0ca      	beq.n	80048c6 <__sflush_r+0x1a>
 8004930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004934:	4299      	cmp	r1, r3
 8004936:	d002      	beq.n	800493e <__sflush_r+0x92>
 8004938:	4628      	mov	r0, r5
 800493a:	f000 f9df 	bl	8004cfc <_free_r>
 800493e:	2000      	movs	r0, #0
 8004940:	6360      	str	r0, [r4, #52]	; 0x34
 8004942:	e7c1      	b.n	80048c8 <__sflush_r+0x1c>
 8004944:	6a21      	ldr	r1, [r4, #32]
 8004946:	2301      	movs	r3, #1
 8004948:	4628      	mov	r0, r5
 800494a:	47b0      	blx	r6
 800494c:	1c41      	adds	r1, r0, #1
 800494e:	d1c7      	bne.n	80048e0 <__sflush_r+0x34>
 8004950:	682b      	ldr	r3, [r5, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0c4      	beq.n	80048e0 <__sflush_r+0x34>
 8004956:	2b1d      	cmp	r3, #29
 8004958:	d001      	beq.n	800495e <__sflush_r+0xb2>
 800495a:	2b16      	cmp	r3, #22
 800495c:	d101      	bne.n	8004962 <__sflush_r+0xb6>
 800495e:	602f      	str	r7, [r5, #0]
 8004960:	e7b1      	b.n	80048c6 <__sflush_r+0x1a>
 8004962:	89a3      	ldrh	r3, [r4, #12]
 8004964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004968:	81a3      	strh	r3, [r4, #12]
 800496a:	e7ad      	b.n	80048c8 <__sflush_r+0x1c>
 800496c:	690f      	ldr	r7, [r1, #16]
 800496e:	2f00      	cmp	r7, #0
 8004970:	d0a9      	beq.n	80048c6 <__sflush_r+0x1a>
 8004972:	0793      	lsls	r3, r2, #30
 8004974:	680e      	ldr	r6, [r1, #0]
 8004976:	bf08      	it	eq
 8004978:	694b      	ldreq	r3, [r1, #20]
 800497a:	600f      	str	r7, [r1, #0]
 800497c:	bf18      	it	ne
 800497e:	2300      	movne	r3, #0
 8004980:	eba6 0807 	sub.w	r8, r6, r7
 8004984:	608b      	str	r3, [r1, #8]
 8004986:	f1b8 0f00 	cmp.w	r8, #0
 800498a:	dd9c      	ble.n	80048c6 <__sflush_r+0x1a>
 800498c:	6a21      	ldr	r1, [r4, #32]
 800498e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004990:	4643      	mov	r3, r8
 8004992:	463a      	mov	r2, r7
 8004994:	4628      	mov	r0, r5
 8004996:	47b0      	blx	r6
 8004998:	2800      	cmp	r0, #0
 800499a:	dc06      	bgt.n	80049aa <__sflush_r+0xfe>
 800499c:	89a3      	ldrh	r3, [r4, #12]
 800499e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049a2:	81a3      	strh	r3, [r4, #12]
 80049a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049a8:	e78e      	b.n	80048c8 <__sflush_r+0x1c>
 80049aa:	4407      	add	r7, r0
 80049ac:	eba8 0800 	sub.w	r8, r8, r0
 80049b0:	e7e9      	b.n	8004986 <__sflush_r+0xda>
 80049b2:	bf00      	nop
 80049b4:	20400001 	.word	0x20400001

080049b8 <_fflush_r>:
 80049b8:	b538      	push	{r3, r4, r5, lr}
 80049ba:	690b      	ldr	r3, [r1, #16]
 80049bc:	4605      	mov	r5, r0
 80049be:	460c      	mov	r4, r1
 80049c0:	b913      	cbnz	r3, 80049c8 <_fflush_r+0x10>
 80049c2:	2500      	movs	r5, #0
 80049c4:	4628      	mov	r0, r5
 80049c6:	bd38      	pop	{r3, r4, r5, pc}
 80049c8:	b118      	cbz	r0, 80049d2 <_fflush_r+0x1a>
 80049ca:	6983      	ldr	r3, [r0, #24]
 80049cc:	b90b      	cbnz	r3, 80049d2 <_fflush_r+0x1a>
 80049ce:	f000 f887 	bl	8004ae0 <__sinit>
 80049d2:	4b14      	ldr	r3, [pc, #80]	; (8004a24 <_fflush_r+0x6c>)
 80049d4:	429c      	cmp	r4, r3
 80049d6:	d11b      	bne.n	8004a10 <_fflush_r+0x58>
 80049d8:	686c      	ldr	r4, [r5, #4]
 80049da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0ef      	beq.n	80049c2 <_fflush_r+0xa>
 80049e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049e4:	07d0      	lsls	r0, r2, #31
 80049e6:	d404      	bmi.n	80049f2 <_fflush_r+0x3a>
 80049e8:	0599      	lsls	r1, r3, #22
 80049ea:	d402      	bmi.n	80049f2 <_fflush_r+0x3a>
 80049ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ee:	f000 f915 	bl	8004c1c <__retarget_lock_acquire_recursive>
 80049f2:	4628      	mov	r0, r5
 80049f4:	4621      	mov	r1, r4
 80049f6:	f7ff ff59 	bl	80048ac <__sflush_r>
 80049fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049fc:	07da      	lsls	r2, r3, #31
 80049fe:	4605      	mov	r5, r0
 8004a00:	d4e0      	bmi.n	80049c4 <_fflush_r+0xc>
 8004a02:	89a3      	ldrh	r3, [r4, #12]
 8004a04:	059b      	lsls	r3, r3, #22
 8004a06:	d4dd      	bmi.n	80049c4 <_fflush_r+0xc>
 8004a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a0a:	f000 f908 	bl	8004c1e <__retarget_lock_release_recursive>
 8004a0e:	e7d9      	b.n	80049c4 <_fflush_r+0xc>
 8004a10:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <_fflush_r+0x70>)
 8004a12:	429c      	cmp	r4, r3
 8004a14:	d101      	bne.n	8004a1a <_fflush_r+0x62>
 8004a16:	68ac      	ldr	r4, [r5, #8]
 8004a18:	e7df      	b.n	80049da <_fflush_r+0x22>
 8004a1a:	4b04      	ldr	r3, [pc, #16]	; (8004a2c <_fflush_r+0x74>)
 8004a1c:	429c      	cmp	r4, r3
 8004a1e:	bf08      	it	eq
 8004a20:	68ec      	ldreq	r4, [r5, #12]
 8004a22:	e7da      	b.n	80049da <_fflush_r+0x22>
 8004a24:	0800573c 	.word	0x0800573c
 8004a28:	0800575c 	.word	0x0800575c
 8004a2c:	0800571c 	.word	0x0800571c

08004a30 <std>:
 8004a30:	2300      	movs	r3, #0
 8004a32:	b510      	push	{r4, lr}
 8004a34:	4604      	mov	r4, r0
 8004a36:	e9c0 3300 	strd	r3, r3, [r0]
 8004a3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a3e:	6083      	str	r3, [r0, #8]
 8004a40:	8181      	strh	r1, [r0, #12]
 8004a42:	6643      	str	r3, [r0, #100]	; 0x64
 8004a44:	81c2      	strh	r2, [r0, #14]
 8004a46:	6183      	str	r3, [r0, #24]
 8004a48:	4619      	mov	r1, r3
 8004a4a:	2208      	movs	r2, #8
 8004a4c:	305c      	adds	r0, #92	; 0x5c
 8004a4e:	f7ff fd09 	bl	8004464 <memset>
 8004a52:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <std+0x38>)
 8004a54:	6263      	str	r3, [r4, #36]	; 0x24
 8004a56:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <std+0x3c>)
 8004a58:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a5a:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <std+0x40>)
 8004a5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a5e:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <std+0x44>)
 8004a60:	6224      	str	r4, [r4, #32]
 8004a62:	6323      	str	r3, [r4, #48]	; 0x30
 8004a64:	bd10      	pop	{r4, pc}
 8004a66:	bf00      	nop
 8004a68:	080054b9 	.word	0x080054b9
 8004a6c:	080054db 	.word	0x080054db
 8004a70:	08005513 	.word	0x08005513
 8004a74:	08005537 	.word	0x08005537

08004a78 <_cleanup_r>:
 8004a78:	4901      	ldr	r1, [pc, #4]	; (8004a80 <_cleanup_r+0x8>)
 8004a7a:	f000 b8af 	b.w	8004bdc <_fwalk_reent>
 8004a7e:	bf00      	nop
 8004a80:	080049b9 	.word	0x080049b9

08004a84 <__sfmoreglue>:
 8004a84:	b570      	push	{r4, r5, r6, lr}
 8004a86:	2268      	movs	r2, #104	; 0x68
 8004a88:	1e4d      	subs	r5, r1, #1
 8004a8a:	4355      	muls	r5, r2
 8004a8c:	460e      	mov	r6, r1
 8004a8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a92:	f000 f99f 	bl	8004dd4 <_malloc_r>
 8004a96:	4604      	mov	r4, r0
 8004a98:	b140      	cbz	r0, 8004aac <__sfmoreglue+0x28>
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	e9c0 1600 	strd	r1, r6, [r0]
 8004aa0:	300c      	adds	r0, #12
 8004aa2:	60a0      	str	r0, [r4, #8]
 8004aa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004aa8:	f7ff fcdc 	bl	8004464 <memset>
 8004aac:	4620      	mov	r0, r4
 8004aae:	bd70      	pop	{r4, r5, r6, pc}

08004ab0 <__sfp_lock_acquire>:
 8004ab0:	4801      	ldr	r0, [pc, #4]	; (8004ab8 <__sfp_lock_acquire+0x8>)
 8004ab2:	f000 b8b3 	b.w	8004c1c <__retarget_lock_acquire_recursive>
 8004ab6:	bf00      	nop
 8004ab8:	20000189 	.word	0x20000189

08004abc <__sfp_lock_release>:
 8004abc:	4801      	ldr	r0, [pc, #4]	; (8004ac4 <__sfp_lock_release+0x8>)
 8004abe:	f000 b8ae 	b.w	8004c1e <__retarget_lock_release_recursive>
 8004ac2:	bf00      	nop
 8004ac4:	20000189 	.word	0x20000189

08004ac8 <__sinit_lock_acquire>:
 8004ac8:	4801      	ldr	r0, [pc, #4]	; (8004ad0 <__sinit_lock_acquire+0x8>)
 8004aca:	f000 b8a7 	b.w	8004c1c <__retarget_lock_acquire_recursive>
 8004ace:	bf00      	nop
 8004ad0:	2000018a 	.word	0x2000018a

08004ad4 <__sinit_lock_release>:
 8004ad4:	4801      	ldr	r0, [pc, #4]	; (8004adc <__sinit_lock_release+0x8>)
 8004ad6:	f000 b8a2 	b.w	8004c1e <__retarget_lock_release_recursive>
 8004ada:	bf00      	nop
 8004adc:	2000018a 	.word	0x2000018a

08004ae0 <__sinit>:
 8004ae0:	b510      	push	{r4, lr}
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	f7ff fff0 	bl	8004ac8 <__sinit_lock_acquire>
 8004ae8:	69a3      	ldr	r3, [r4, #24]
 8004aea:	b11b      	cbz	r3, 8004af4 <__sinit+0x14>
 8004aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004af0:	f7ff bff0 	b.w	8004ad4 <__sinit_lock_release>
 8004af4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004af8:	6523      	str	r3, [r4, #80]	; 0x50
 8004afa:	4b13      	ldr	r3, [pc, #76]	; (8004b48 <__sinit+0x68>)
 8004afc:	4a13      	ldr	r2, [pc, #76]	; (8004b4c <__sinit+0x6c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b02:	42a3      	cmp	r3, r4
 8004b04:	bf04      	itt	eq
 8004b06:	2301      	moveq	r3, #1
 8004b08:	61a3      	streq	r3, [r4, #24]
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	f000 f820 	bl	8004b50 <__sfp>
 8004b10:	6060      	str	r0, [r4, #4]
 8004b12:	4620      	mov	r0, r4
 8004b14:	f000 f81c 	bl	8004b50 <__sfp>
 8004b18:	60a0      	str	r0, [r4, #8]
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	f000 f818 	bl	8004b50 <__sfp>
 8004b20:	2200      	movs	r2, #0
 8004b22:	60e0      	str	r0, [r4, #12]
 8004b24:	2104      	movs	r1, #4
 8004b26:	6860      	ldr	r0, [r4, #4]
 8004b28:	f7ff ff82 	bl	8004a30 <std>
 8004b2c:	68a0      	ldr	r0, [r4, #8]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	2109      	movs	r1, #9
 8004b32:	f7ff ff7d 	bl	8004a30 <std>
 8004b36:	68e0      	ldr	r0, [r4, #12]
 8004b38:	2202      	movs	r2, #2
 8004b3a:	2112      	movs	r1, #18
 8004b3c:	f7ff ff78 	bl	8004a30 <std>
 8004b40:	2301      	movs	r3, #1
 8004b42:	61a3      	str	r3, [r4, #24]
 8004b44:	e7d2      	b.n	8004aec <__sinit+0xc>
 8004b46:	bf00      	nop
 8004b48:	08005718 	.word	0x08005718
 8004b4c:	08004a79 	.word	0x08004a79

08004b50 <__sfp>:
 8004b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b52:	4607      	mov	r7, r0
 8004b54:	f7ff ffac 	bl	8004ab0 <__sfp_lock_acquire>
 8004b58:	4b1e      	ldr	r3, [pc, #120]	; (8004bd4 <__sfp+0x84>)
 8004b5a:	681e      	ldr	r6, [r3, #0]
 8004b5c:	69b3      	ldr	r3, [r6, #24]
 8004b5e:	b913      	cbnz	r3, 8004b66 <__sfp+0x16>
 8004b60:	4630      	mov	r0, r6
 8004b62:	f7ff ffbd 	bl	8004ae0 <__sinit>
 8004b66:	3648      	adds	r6, #72	; 0x48
 8004b68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	d503      	bpl.n	8004b78 <__sfp+0x28>
 8004b70:	6833      	ldr	r3, [r6, #0]
 8004b72:	b30b      	cbz	r3, 8004bb8 <__sfp+0x68>
 8004b74:	6836      	ldr	r6, [r6, #0]
 8004b76:	e7f7      	b.n	8004b68 <__sfp+0x18>
 8004b78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b7c:	b9d5      	cbnz	r5, 8004bb4 <__sfp+0x64>
 8004b7e:	4b16      	ldr	r3, [pc, #88]	; (8004bd8 <__sfp+0x88>)
 8004b80:	60e3      	str	r3, [r4, #12]
 8004b82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b86:	6665      	str	r5, [r4, #100]	; 0x64
 8004b88:	f000 f847 	bl	8004c1a <__retarget_lock_init_recursive>
 8004b8c:	f7ff ff96 	bl	8004abc <__sfp_lock_release>
 8004b90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b98:	6025      	str	r5, [r4, #0]
 8004b9a:	61a5      	str	r5, [r4, #24]
 8004b9c:	2208      	movs	r2, #8
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ba4:	f7ff fc5e 	bl	8004464 <memset>
 8004ba8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004bac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bb4:	3468      	adds	r4, #104	; 0x68
 8004bb6:	e7d9      	b.n	8004b6c <__sfp+0x1c>
 8004bb8:	2104      	movs	r1, #4
 8004bba:	4638      	mov	r0, r7
 8004bbc:	f7ff ff62 	bl	8004a84 <__sfmoreglue>
 8004bc0:	4604      	mov	r4, r0
 8004bc2:	6030      	str	r0, [r6, #0]
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	d1d5      	bne.n	8004b74 <__sfp+0x24>
 8004bc8:	f7ff ff78 	bl	8004abc <__sfp_lock_release>
 8004bcc:	230c      	movs	r3, #12
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	e7ee      	b.n	8004bb0 <__sfp+0x60>
 8004bd2:	bf00      	nop
 8004bd4:	08005718 	.word	0x08005718
 8004bd8:	ffff0001 	.word	0xffff0001

08004bdc <_fwalk_reent>:
 8004bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004be0:	4606      	mov	r6, r0
 8004be2:	4688      	mov	r8, r1
 8004be4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004be8:	2700      	movs	r7, #0
 8004bea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bee:	f1b9 0901 	subs.w	r9, r9, #1
 8004bf2:	d505      	bpl.n	8004c00 <_fwalk_reent+0x24>
 8004bf4:	6824      	ldr	r4, [r4, #0]
 8004bf6:	2c00      	cmp	r4, #0
 8004bf8:	d1f7      	bne.n	8004bea <_fwalk_reent+0xe>
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c00:	89ab      	ldrh	r3, [r5, #12]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d907      	bls.n	8004c16 <_fwalk_reent+0x3a>
 8004c06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	d003      	beq.n	8004c16 <_fwalk_reent+0x3a>
 8004c0e:	4629      	mov	r1, r5
 8004c10:	4630      	mov	r0, r6
 8004c12:	47c0      	blx	r8
 8004c14:	4307      	orrs	r7, r0
 8004c16:	3568      	adds	r5, #104	; 0x68
 8004c18:	e7e9      	b.n	8004bee <_fwalk_reent+0x12>

08004c1a <__retarget_lock_init_recursive>:
 8004c1a:	4770      	bx	lr

08004c1c <__retarget_lock_acquire_recursive>:
 8004c1c:	4770      	bx	lr

08004c1e <__retarget_lock_release_recursive>:
 8004c1e:	4770      	bx	lr

08004c20 <__swhatbuf_r>:
 8004c20:	b570      	push	{r4, r5, r6, lr}
 8004c22:	460e      	mov	r6, r1
 8004c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c28:	2900      	cmp	r1, #0
 8004c2a:	b096      	sub	sp, #88	; 0x58
 8004c2c:	4614      	mov	r4, r2
 8004c2e:	461d      	mov	r5, r3
 8004c30:	da08      	bge.n	8004c44 <__swhatbuf_r+0x24>
 8004c32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	602a      	str	r2, [r5, #0]
 8004c3a:	061a      	lsls	r2, r3, #24
 8004c3c:	d410      	bmi.n	8004c60 <__swhatbuf_r+0x40>
 8004c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c42:	e00e      	b.n	8004c62 <__swhatbuf_r+0x42>
 8004c44:	466a      	mov	r2, sp
 8004c46:	f000 fc9d 	bl	8005584 <_fstat_r>
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	dbf1      	blt.n	8004c32 <__swhatbuf_r+0x12>
 8004c4e:	9a01      	ldr	r2, [sp, #4]
 8004c50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c58:	425a      	negs	r2, r3
 8004c5a:	415a      	adcs	r2, r3
 8004c5c:	602a      	str	r2, [r5, #0]
 8004c5e:	e7ee      	b.n	8004c3e <__swhatbuf_r+0x1e>
 8004c60:	2340      	movs	r3, #64	; 0x40
 8004c62:	2000      	movs	r0, #0
 8004c64:	6023      	str	r3, [r4, #0]
 8004c66:	b016      	add	sp, #88	; 0x58
 8004c68:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c6c <__smakebuf_r>:
 8004c6c:	898b      	ldrh	r3, [r1, #12]
 8004c6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c70:	079d      	lsls	r5, r3, #30
 8004c72:	4606      	mov	r6, r0
 8004c74:	460c      	mov	r4, r1
 8004c76:	d507      	bpl.n	8004c88 <__smakebuf_r+0x1c>
 8004c78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	6123      	str	r3, [r4, #16]
 8004c80:	2301      	movs	r3, #1
 8004c82:	6163      	str	r3, [r4, #20]
 8004c84:	b002      	add	sp, #8
 8004c86:	bd70      	pop	{r4, r5, r6, pc}
 8004c88:	ab01      	add	r3, sp, #4
 8004c8a:	466a      	mov	r2, sp
 8004c8c:	f7ff ffc8 	bl	8004c20 <__swhatbuf_r>
 8004c90:	9900      	ldr	r1, [sp, #0]
 8004c92:	4605      	mov	r5, r0
 8004c94:	4630      	mov	r0, r6
 8004c96:	f000 f89d 	bl	8004dd4 <_malloc_r>
 8004c9a:	b948      	cbnz	r0, 8004cb0 <__smakebuf_r+0x44>
 8004c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ca0:	059a      	lsls	r2, r3, #22
 8004ca2:	d4ef      	bmi.n	8004c84 <__smakebuf_r+0x18>
 8004ca4:	f023 0303 	bic.w	r3, r3, #3
 8004ca8:	f043 0302 	orr.w	r3, r3, #2
 8004cac:	81a3      	strh	r3, [r4, #12]
 8004cae:	e7e3      	b.n	8004c78 <__smakebuf_r+0xc>
 8004cb0:	4b0d      	ldr	r3, [pc, #52]	; (8004ce8 <__smakebuf_r+0x7c>)
 8004cb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8004cb4:	89a3      	ldrh	r3, [r4, #12]
 8004cb6:	6020      	str	r0, [r4, #0]
 8004cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cbc:	81a3      	strh	r3, [r4, #12]
 8004cbe:	9b00      	ldr	r3, [sp, #0]
 8004cc0:	6163      	str	r3, [r4, #20]
 8004cc2:	9b01      	ldr	r3, [sp, #4]
 8004cc4:	6120      	str	r0, [r4, #16]
 8004cc6:	b15b      	cbz	r3, 8004ce0 <__smakebuf_r+0x74>
 8004cc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ccc:	4630      	mov	r0, r6
 8004cce:	f000 fc6b 	bl	80055a8 <_isatty_r>
 8004cd2:	b128      	cbz	r0, 8004ce0 <__smakebuf_r+0x74>
 8004cd4:	89a3      	ldrh	r3, [r4, #12]
 8004cd6:	f023 0303 	bic.w	r3, r3, #3
 8004cda:	f043 0301 	orr.w	r3, r3, #1
 8004cde:	81a3      	strh	r3, [r4, #12]
 8004ce0:	89a0      	ldrh	r0, [r4, #12]
 8004ce2:	4305      	orrs	r5, r0
 8004ce4:	81a5      	strh	r5, [r4, #12]
 8004ce6:	e7cd      	b.n	8004c84 <__smakebuf_r+0x18>
 8004ce8:	08004a79 	.word	0x08004a79

08004cec <malloc>:
 8004cec:	4b02      	ldr	r3, [pc, #8]	; (8004cf8 <malloc+0xc>)
 8004cee:	4601      	mov	r1, r0
 8004cf0:	6818      	ldr	r0, [r3, #0]
 8004cf2:	f000 b86f 	b.w	8004dd4 <_malloc_r>
 8004cf6:	bf00      	nop
 8004cf8:	2000000c 	.word	0x2000000c

08004cfc <_free_r>:
 8004cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cfe:	2900      	cmp	r1, #0
 8004d00:	d044      	beq.n	8004d8c <_free_r+0x90>
 8004d02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d06:	9001      	str	r0, [sp, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f1a1 0404 	sub.w	r4, r1, #4
 8004d0e:	bfb8      	it	lt
 8004d10:	18e4      	addlt	r4, r4, r3
 8004d12:	f000 fc6b 	bl	80055ec <__malloc_lock>
 8004d16:	4a1e      	ldr	r2, [pc, #120]	; (8004d90 <_free_r+0x94>)
 8004d18:	9801      	ldr	r0, [sp, #4]
 8004d1a:	6813      	ldr	r3, [r2, #0]
 8004d1c:	b933      	cbnz	r3, 8004d2c <_free_r+0x30>
 8004d1e:	6063      	str	r3, [r4, #4]
 8004d20:	6014      	str	r4, [r2, #0]
 8004d22:	b003      	add	sp, #12
 8004d24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d28:	f000 bc66 	b.w	80055f8 <__malloc_unlock>
 8004d2c:	42a3      	cmp	r3, r4
 8004d2e:	d908      	bls.n	8004d42 <_free_r+0x46>
 8004d30:	6825      	ldr	r5, [r4, #0]
 8004d32:	1961      	adds	r1, r4, r5
 8004d34:	428b      	cmp	r3, r1
 8004d36:	bf01      	itttt	eq
 8004d38:	6819      	ldreq	r1, [r3, #0]
 8004d3a:	685b      	ldreq	r3, [r3, #4]
 8004d3c:	1949      	addeq	r1, r1, r5
 8004d3e:	6021      	streq	r1, [r4, #0]
 8004d40:	e7ed      	b.n	8004d1e <_free_r+0x22>
 8004d42:	461a      	mov	r2, r3
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	b10b      	cbz	r3, 8004d4c <_free_r+0x50>
 8004d48:	42a3      	cmp	r3, r4
 8004d4a:	d9fa      	bls.n	8004d42 <_free_r+0x46>
 8004d4c:	6811      	ldr	r1, [r2, #0]
 8004d4e:	1855      	adds	r5, r2, r1
 8004d50:	42a5      	cmp	r5, r4
 8004d52:	d10b      	bne.n	8004d6c <_free_r+0x70>
 8004d54:	6824      	ldr	r4, [r4, #0]
 8004d56:	4421      	add	r1, r4
 8004d58:	1854      	adds	r4, r2, r1
 8004d5a:	42a3      	cmp	r3, r4
 8004d5c:	6011      	str	r1, [r2, #0]
 8004d5e:	d1e0      	bne.n	8004d22 <_free_r+0x26>
 8004d60:	681c      	ldr	r4, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	6053      	str	r3, [r2, #4]
 8004d66:	4421      	add	r1, r4
 8004d68:	6011      	str	r1, [r2, #0]
 8004d6a:	e7da      	b.n	8004d22 <_free_r+0x26>
 8004d6c:	d902      	bls.n	8004d74 <_free_r+0x78>
 8004d6e:	230c      	movs	r3, #12
 8004d70:	6003      	str	r3, [r0, #0]
 8004d72:	e7d6      	b.n	8004d22 <_free_r+0x26>
 8004d74:	6825      	ldr	r5, [r4, #0]
 8004d76:	1961      	adds	r1, r4, r5
 8004d78:	428b      	cmp	r3, r1
 8004d7a:	bf04      	itt	eq
 8004d7c:	6819      	ldreq	r1, [r3, #0]
 8004d7e:	685b      	ldreq	r3, [r3, #4]
 8004d80:	6063      	str	r3, [r4, #4]
 8004d82:	bf04      	itt	eq
 8004d84:	1949      	addeq	r1, r1, r5
 8004d86:	6021      	streq	r1, [r4, #0]
 8004d88:	6054      	str	r4, [r2, #4]
 8004d8a:	e7ca      	b.n	8004d22 <_free_r+0x26>
 8004d8c:	b003      	add	sp, #12
 8004d8e:	bd30      	pop	{r4, r5, pc}
 8004d90:	2000018c 	.word	0x2000018c

08004d94 <sbrk_aligned>:
 8004d94:	b570      	push	{r4, r5, r6, lr}
 8004d96:	4e0e      	ldr	r6, [pc, #56]	; (8004dd0 <sbrk_aligned+0x3c>)
 8004d98:	460c      	mov	r4, r1
 8004d9a:	6831      	ldr	r1, [r6, #0]
 8004d9c:	4605      	mov	r5, r0
 8004d9e:	b911      	cbnz	r1, 8004da6 <sbrk_aligned+0x12>
 8004da0:	f000 fb7a 	bl	8005498 <_sbrk_r>
 8004da4:	6030      	str	r0, [r6, #0]
 8004da6:	4621      	mov	r1, r4
 8004da8:	4628      	mov	r0, r5
 8004daa:	f000 fb75 	bl	8005498 <_sbrk_r>
 8004dae:	1c43      	adds	r3, r0, #1
 8004db0:	d00a      	beq.n	8004dc8 <sbrk_aligned+0x34>
 8004db2:	1cc4      	adds	r4, r0, #3
 8004db4:	f024 0403 	bic.w	r4, r4, #3
 8004db8:	42a0      	cmp	r0, r4
 8004dba:	d007      	beq.n	8004dcc <sbrk_aligned+0x38>
 8004dbc:	1a21      	subs	r1, r4, r0
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	f000 fb6a 	bl	8005498 <_sbrk_r>
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	d101      	bne.n	8004dcc <sbrk_aligned+0x38>
 8004dc8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004dcc:	4620      	mov	r0, r4
 8004dce:	bd70      	pop	{r4, r5, r6, pc}
 8004dd0:	20000190 	.word	0x20000190

08004dd4 <_malloc_r>:
 8004dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd8:	1ccd      	adds	r5, r1, #3
 8004dda:	f025 0503 	bic.w	r5, r5, #3
 8004dde:	3508      	adds	r5, #8
 8004de0:	2d0c      	cmp	r5, #12
 8004de2:	bf38      	it	cc
 8004de4:	250c      	movcc	r5, #12
 8004de6:	2d00      	cmp	r5, #0
 8004de8:	4607      	mov	r7, r0
 8004dea:	db01      	blt.n	8004df0 <_malloc_r+0x1c>
 8004dec:	42a9      	cmp	r1, r5
 8004dee:	d905      	bls.n	8004dfc <_malloc_r+0x28>
 8004df0:	230c      	movs	r3, #12
 8004df2:	603b      	str	r3, [r7, #0]
 8004df4:	2600      	movs	r6, #0
 8004df6:	4630      	mov	r0, r6
 8004df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dfc:	4e2e      	ldr	r6, [pc, #184]	; (8004eb8 <_malloc_r+0xe4>)
 8004dfe:	f000 fbf5 	bl	80055ec <__malloc_lock>
 8004e02:	6833      	ldr	r3, [r6, #0]
 8004e04:	461c      	mov	r4, r3
 8004e06:	bb34      	cbnz	r4, 8004e56 <_malloc_r+0x82>
 8004e08:	4629      	mov	r1, r5
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	f7ff ffc2 	bl	8004d94 <sbrk_aligned>
 8004e10:	1c43      	adds	r3, r0, #1
 8004e12:	4604      	mov	r4, r0
 8004e14:	d14d      	bne.n	8004eb2 <_malloc_r+0xde>
 8004e16:	6834      	ldr	r4, [r6, #0]
 8004e18:	4626      	mov	r6, r4
 8004e1a:	2e00      	cmp	r6, #0
 8004e1c:	d140      	bne.n	8004ea0 <_malloc_r+0xcc>
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	4631      	mov	r1, r6
 8004e22:	4638      	mov	r0, r7
 8004e24:	eb04 0803 	add.w	r8, r4, r3
 8004e28:	f000 fb36 	bl	8005498 <_sbrk_r>
 8004e2c:	4580      	cmp	r8, r0
 8004e2e:	d13a      	bne.n	8004ea6 <_malloc_r+0xd2>
 8004e30:	6821      	ldr	r1, [r4, #0]
 8004e32:	3503      	adds	r5, #3
 8004e34:	1a6d      	subs	r5, r5, r1
 8004e36:	f025 0503 	bic.w	r5, r5, #3
 8004e3a:	3508      	adds	r5, #8
 8004e3c:	2d0c      	cmp	r5, #12
 8004e3e:	bf38      	it	cc
 8004e40:	250c      	movcc	r5, #12
 8004e42:	4629      	mov	r1, r5
 8004e44:	4638      	mov	r0, r7
 8004e46:	f7ff ffa5 	bl	8004d94 <sbrk_aligned>
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	d02b      	beq.n	8004ea6 <_malloc_r+0xd2>
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	442b      	add	r3, r5
 8004e52:	6023      	str	r3, [r4, #0]
 8004e54:	e00e      	b.n	8004e74 <_malloc_r+0xa0>
 8004e56:	6822      	ldr	r2, [r4, #0]
 8004e58:	1b52      	subs	r2, r2, r5
 8004e5a:	d41e      	bmi.n	8004e9a <_malloc_r+0xc6>
 8004e5c:	2a0b      	cmp	r2, #11
 8004e5e:	d916      	bls.n	8004e8e <_malloc_r+0xba>
 8004e60:	1961      	adds	r1, r4, r5
 8004e62:	42a3      	cmp	r3, r4
 8004e64:	6025      	str	r5, [r4, #0]
 8004e66:	bf18      	it	ne
 8004e68:	6059      	strne	r1, [r3, #4]
 8004e6a:	6863      	ldr	r3, [r4, #4]
 8004e6c:	bf08      	it	eq
 8004e6e:	6031      	streq	r1, [r6, #0]
 8004e70:	5162      	str	r2, [r4, r5]
 8004e72:	604b      	str	r3, [r1, #4]
 8004e74:	4638      	mov	r0, r7
 8004e76:	f104 060b 	add.w	r6, r4, #11
 8004e7a:	f000 fbbd 	bl	80055f8 <__malloc_unlock>
 8004e7e:	f026 0607 	bic.w	r6, r6, #7
 8004e82:	1d23      	adds	r3, r4, #4
 8004e84:	1af2      	subs	r2, r6, r3
 8004e86:	d0b6      	beq.n	8004df6 <_malloc_r+0x22>
 8004e88:	1b9b      	subs	r3, r3, r6
 8004e8a:	50a3      	str	r3, [r4, r2]
 8004e8c:	e7b3      	b.n	8004df6 <_malloc_r+0x22>
 8004e8e:	6862      	ldr	r2, [r4, #4]
 8004e90:	42a3      	cmp	r3, r4
 8004e92:	bf0c      	ite	eq
 8004e94:	6032      	streq	r2, [r6, #0]
 8004e96:	605a      	strne	r2, [r3, #4]
 8004e98:	e7ec      	b.n	8004e74 <_malloc_r+0xa0>
 8004e9a:	4623      	mov	r3, r4
 8004e9c:	6864      	ldr	r4, [r4, #4]
 8004e9e:	e7b2      	b.n	8004e06 <_malloc_r+0x32>
 8004ea0:	4634      	mov	r4, r6
 8004ea2:	6876      	ldr	r6, [r6, #4]
 8004ea4:	e7b9      	b.n	8004e1a <_malloc_r+0x46>
 8004ea6:	230c      	movs	r3, #12
 8004ea8:	603b      	str	r3, [r7, #0]
 8004eaa:	4638      	mov	r0, r7
 8004eac:	f000 fba4 	bl	80055f8 <__malloc_unlock>
 8004eb0:	e7a1      	b.n	8004df6 <_malloc_r+0x22>
 8004eb2:	6025      	str	r5, [r4, #0]
 8004eb4:	e7de      	b.n	8004e74 <_malloc_r+0xa0>
 8004eb6:	bf00      	nop
 8004eb8:	2000018c 	.word	0x2000018c

08004ebc <__sfputc_r>:
 8004ebc:	6893      	ldr	r3, [r2, #8]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	b410      	push	{r4}
 8004ec4:	6093      	str	r3, [r2, #8]
 8004ec6:	da08      	bge.n	8004eda <__sfputc_r+0x1e>
 8004ec8:	6994      	ldr	r4, [r2, #24]
 8004eca:	42a3      	cmp	r3, r4
 8004ecc:	db01      	blt.n	8004ed2 <__sfputc_r+0x16>
 8004ece:	290a      	cmp	r1, #10
 8004ed0:	d103      	bne.n	8004eda <__sfputc_r+0x1e>
 8004ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ed6:	f7ff bc29 	b.w	800472c <__swbuf_r>
 8004eda:	6813      	ldr	r3, [r2, #0]
 8004edc:	1c58      	adds	r0, r3, #1
 8004ede:	6010      	str	r0, [r2, #0]
 8004ee0:	7019      	strb	r1, [r3, #0]
 8004ee2:	4608      	mov	r0, r1
 8004ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <__sfputs_r>:
 8004eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eec:	4606      	mov	r6, r0
 8004eee:	460f      	mov	r7, r1
 8004ef0:	4614      	mov	r4, r2
 8004ef2:	18d5      	adds	r5, r2, r3
 8004ef4:	42ac      	cmp	r4, r5
 8004ef6:	d101      	bne.n	8004efc <__sfputs_r+0x12>
 8004ef8:	2000      	movs	r0, #0
 8004efa:	e007      	b.n	8004f0c <__sfputs_r+0x22>
 8004efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f00:	463a      	mov	r2, r7
 8004f02:	4630      	mov	r0, r6
 8004f04:	f7ff ffda 	bl	8004ebc <__sfputc_r>
 8004f08:	1c43      	adds	r3, r0, #1
 8004f0a:	d1f3      	bne.n	8004ef4 <__sfputs_r+0xa>
 8004f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f10 <_vfiprintf_r>:
 8004f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f14:	460d      	mov	r5, r1
 8004f16:	b09d      	sub	sp, #116	; 0x74
 8004f18:	4614      	mov	r4, r2
 8004f1a:	4698      	mov	r8, r3
 8004f1c:	4606      	mov	r6, r0
 8004f1e:	b118      	cbz	r0, 8004f28 <_vfiprintf_r+0x18>
 8004f20:	6983      	ldr	r3, [r0, #24]
 8004f22:	b90b      	cbnz	r3, 8004f28 <_vfiprintf_r+0x18>
 8004f24:	f7ff fddc 	bl	8004ae0 <__sinit>
 8004f28:	4b89      	ldr	r3, [pc, #548]	; (8005150 <_vfiprintf_r+0x240>)
 8004f2a:	429d      	cmp	r5, r3
 8004f2c:	d11b      	bne.n	8004f66 <_vfiprintf_r+0x56>
 8004f2e:	6875      	ldr	r5, [r6, #4]
 8004f30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f32:	07d9      	lsls	r1, r3, #31
 8004f34:	d405      	bmi.n	8004f42 <_vfiprintf_r+0x32>
 8004f36:	89ab      	ldrh	r3, [r5, #12]
 8004f38:	059a      	lsls	r2, r3, #22
 8004f3a:	d402      	bmi.n	8004f42 <_vfiprintf_r+0x32>
 8004f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f3e:	f7ff fe6d 	bl	8004c1c <__retarget_lock_acquire_recursive>
 8004f42:	89ab      	ldrh	r3, [r5, #12]
 8004f44:	071b      	lsls	r3, r3, #28
 8004f46:	d501      	bpl.n	8004f4c <_vfiprintf_r+0x3c>
 8004f48:	692b      	ldr	r3, [r5, #16]
 8004f4a:	b9eb      	cbnz	r3, 8004f88 <_vfiprintf_r+0x78>
 8004f4c:	4629      	mov	r1, r5
 8004f4e:	4630      	mov	r0, r6
 8004f50:	f7ff fc3e 	bl	80047d0 <__swsetup_r>
 8004f54:	b1c0      	cbz	r0, 8004f88 <_vfiprintf_r+0x78>
 8004f56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f58:	07dc      	lsls	r4, r3, #31
 8004f5a:	d50e      	bpl.n	8004f7a <_vfiprintf_r+0x6a>
 8004f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f60:	b01d      	add	sp, #116	; 0x74
 8004f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f66:	4b7b      	ldr	r3, [pc, #492]	; (8005154 <_vfiprintf_r+0x244>)
 8004f68:	429d      	cmp	r5, r3
 8004f6a:	d101      	bne.n	8004f70 <_vfiprintf_r+0x60>
 8004f6c:	68b5      	ldr	r5, [r6, #8]
 8004f6e:	e7df      	b.n	8004f30 <_vfiprintf_r+0x20>
 8004f70:	4b79      	ldr	r3, [pc, #484]	; (8005158 <_vfiprintf_r+0x248>)
 8004f72:	429d      	cmp	r5, r3
 8004f74:	bf08      	it	eq
 8004f76:	68f5      	ldreq	r5, [r6, #12]
 8004f78:	e7da      	b.n	8004f30 <_vfiprintf_r+0x20>
 8004f7a:	89ab      	ldrh	r3, [r5, #12]
 8004f7c:	0598      	lsls	r0, r3, #22
 8004f7e:	d4ed      	bmi.n	8004f5c <_vfiprintf_r+0x4c>
 8004f80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f82:	f7ff fe4c 	bl	8004c1e <__retarget_lock_release_recursive>
 8004f86:	e7e9      	b.n	8004f5c <_vfiprintf_r+0x4c>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f8c:	2320      	movs	r3, #32
 8004f8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f92:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f96:	2330      	movs	r3, #48	; 0x30
 8004f98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800515c <_vfiprintf_r+0x24c>
 8004f9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fa0:	f04f 0901 	mov.w	r9, #1
 8004fa4:	4623      	mov	r3, r4
 8004fa6:	469a      	mov	sl, r3
 8004fa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fac:	b10a      	cbz	r2, 8004fb2 <_vfiprintf_r+0xa2>
 8004fae:	2a25      	cmp	r2, #37	; 0x25
 8004fb0:	d1f9      	bne.n	8004fa6 <_vfiprintf_r+0x96>
 8004fb2:	ebba 0b04 	subs.w	fp, sl, r4
 8004fb6:	d00b      	beq.n	8004fd0 <_vfiprintf_r+0xc0>
 8004fb8:	465b      	mov	r3, fp
 8004fba:	4622      	mov	r2, r4
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	4630      	mov	r0, r6
 8004fc0:	f7ff ff93 	bl	8004eea <__sfputs_r>
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	f000 80aa 	beq.w	800511e <_vfiprintf_r+0x20e>
 8004fca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fcc:	445a      	add	r2, fp
 8004fce:	9209      	str	r2, [sp, #36]	; 0x24
 8004fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 80a2 	beq.w	800511e <_vfiprintf_r+0x20e>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fe4:	f10a 0a01 	add.w	sl, sl, #1
 8004fe8:	9304      	str	r3, [sp, #16]
 8004fea:	9307      	str	r3, [sp, #28]
 8004fec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ff0:	931a      	str	r3, [sp, #104]	; 0x68
 8004ff2:	4654      	mov	r4, sl
 8004ff4:	2205      	movs	r2, #5
 8004ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ffa:	4858      	ldr	r0, [pc, #352]	; (800515c <_vfiprintf_r+0x24c>)
 8004ffc:	f7fb f908 	bl	8000210 <memchr>
 8005000:	9a04      	ldr	r2, [sp, #16]
 8005002:	b9d8      	cbnz	r0, 800503c <_vfiprintf_r+0x12c>
 8005004:	06d1      	lsls	r1, r2, #27
 8005006:	bf44      	itt	mi
 8005008:	2320      	movmi	r3, #32
 800500a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800500e:	0713      	lsls	r3, r2, #28
 8005010:	bf44      	itt	mi
 8005012:	232b      	movmi	r3, #43	; 0x2b
 8005014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005018:	f89a 3000 	ldrb.w	r3, [sl]
 800501c:	2b2a      	cmp	r3, #42	; 0x2a
 800501e:	d015      	beq.n	800504c <_vfiprintf_r+0x13c>
 8005020:	9a07      	ldr	r2, [sp, #28]
 8005022:	4654      	mov	r4, sl
 8005024:	2000      	movs	r0, #0
 8005026:	f04f 0c0a 	mov.w	ip, #10
 800502a:	4621      	mov	r1, r4
 800502c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005030:	3b30      	subs	r3, #48	; 0x30
 8005032:	2b09      	cmp	r3, #9
 8005034:	d94e      	bls.n	80050d4 <_vfiprintf_r+0x1c4>
 8005036:	b1b0      	cbz	r0, 8005066 <_vfiprintf_r+0x156>
 8005038:	9207      	str	r2, [sp, #28]
 800503a:	e014      	b.n	8005066 <_vfiprintf_r+0x156>
 800503c:	eba0 0308 	sub.w	r3, r0, r8
 8005040:	fa09 f303 	lsl.w	r3, r9, r3
 8005044:	4313      	orrs	r3, r2
 8005046:	9304      	str	r3, [sp, #16]
 8005048:	46a2      	mov	sl, r4
 800504a:	e7d2      	b.n	8004ff2 <_vfiprintf_r+0xe2>
 800504c:	9b03      	ldr	r3, [sp, #12]
 800504e:	1d19      	adds	r1, r3, #4
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	9103      	str	r1, [sp, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	bfbb      	ittet	lt
 8005058:	425b      	neglt	r3, r3
 800505a:	f042 0202 	orrlt.w	r2, r2, #2
 800505e:	9307      	strge	r3, [sp, #28]
 8005060:	9307      	strlt	r3, [sp, #28]
 8005062:	bfb8      	it	lt
 8005064:	9204      	strlt	r2, [sp, #16]
 8005066:	7823      	ldrb	r3, [r4, #0]
 8005068:	2b2e      	cmp	r3, #46	; 0x2e
 800506a:	d10c      	bne.n	8005086 <_vfiprintf_r+0x176>
 800506c:	7863      	ldrb	r3, [r4, #1]
 800506e:	2b2a      	cmp	r3, #42	; 0x2a
 8005070:	d135      	bne.n	80050de <_vfiprintf_r+0x1ce>
 8005072:	9b03      	ldr	r3, [sp, #12]
 8005074:	1d1a      	adds	r2, r3, #4
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	9203      	str	r2, [sp, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	bfb8      	it	lt
 800507e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005082:	3402      	adds	r4, #2
 8005084:	9305      	str	r3, [sp, #20]
 8005086:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800516c <_vfiprintf_r+0x25c>
 800508a:	7821      	ldrb	r1, [r4, #0]
 800508c:	2203      	movs	r2, #3
 800508e:	4650      	mov	r0, sl
 8005090:	f7fb f8be 	bl	8000210 <memchr>
 8005094:	b140      	cbz	r0, 80050a8 <_vfiprintf_r+0x198>
 8005096:	2340      	movs	r3, #64	; 0x40
 8005098:	eba0 000a 	sub.w	r0, r0, sl
 800509c:	fa03 f000 	lsl.w	r0, r3, r0
 80050a0:	9b04      	ldr	r3, [sp, #16]
 80050a2:	4303      	orrs	r3, r0
 80050a4:	3401      	adds	r4, #1
 80050a6:	9304      	str	r3, [sp, #16]
 80050a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ac:	482c      	ldr	r0, [pc, #176]	; (8005160 <_vfiprintf_r+0x250>)
 80050ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050b2:	2206      	movs	r2, #6
 80050b4:	f7fb f8ac 	bl	8000210 <memchr>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	d03f      	beq.n	800513c <_vfiprintf_r+0x22c>
 80050bc:	4b29      	ldr	r3, [pc, #164]	; (8005164 <_vfiprintf_r+0x254>)
 80050be:	bb1b      	cbnz	r3, 8005108 <_vfiprintf_r+0x1f8>
 80050c0:	9b03      	ldr	r3, [sp, #12]
 80050c2:	3307      	adds	r3, #7
 80050c4:	f023 0307 	bic.w	r3, r3, #7
 80050c8:	3308      	adds	r3, #8
 80050ca:	9303      	str	r3, [sp, #12]
 80050cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050ce:	443b      	add	r3, r7
 80050d0:	9309      	str	r3, [sp, #36]	; 0x24
 80050d2:	e767      	b.n	8004fa4 <_vfiprintf_r+0x94>
 80050d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80050d8:	460c      	mov	r4, r1
 80050da:	2001      	movs	r0, #1
 80050dc:	e7a5      	b.n	800502a <_vfiprintf_r+0x11a>
 80050de:	2300      	movs	r3, #0
 80050e0:	3401      	adds	r4, #1
 80050e2:	9305      	str	r3, [sp, #20]
 80050e4:	4619      	mov	r1, r3
 80050e6:	f04f 0c0a 	mov.w	ip, #10
 80050ea:	4620      	mov	r0, r4
 80050ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050f0:	3a30      	subs	r2, #48	; 0x30
 80050f2:	2a09      	cmp	r2, #9
 80050f4:	d903      	bls.n	80050fe <_vfiprintf_r+0x1ee>
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0c5      	beq.n	8005086 <_vfiprintf_r+0x176>
 80050fa:	9105      	str	r1, [sp, #20]
 80050fc:	e7c3      	b.n	8005086 <_vfiprintf_r+0x176>
 80050fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005102:	4604      	mov	r4, r0
 8005104:	2301      	movs	r3, #1
 8005106:	e7f0      	b.n	80050ea <_vfiprintf_r+0x1da>
 8005108:	ab03      	add	r3, sp, #12
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	462a      	mov	r2, r5
 800510e:	4b16      	ldr	r3, [pc, #88]	; (8005168 <_vfiprintf_r+0x258>)
 8005110:	a904      	add	r1, sp, #16
 8005112:	4630      	mov	r0, r6
 8005114:	f3af 8000 	nop.w
 8005118:	4607      	mov	r7, r0
 800511a:	1c78      	adds	r0, r7, #1
 800511c:	d1d6      	bne.n	80050cc <_vfiprintf_r+0x1bc>
 800511e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005120:	07d9      	lsls	r1, r3, #31
 8005122:	d405      	bmi.n	8005130 <_vfiprintf_r+0x220>
 8005124:	89ab      	ldrh	r3, [r5, #12]
 8005126:	059a      	lsls	r2, r3, #22
 8005128:	d402      	bmi.n	8005130 <_vfiprintf_r+0x220>
 800512a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800512c:	f7ff fd77 	bl	8004c1e <__retarget_lock_release_recursive>
 8005130:	89ab      	ldrh	r3, [r5, #12]
 8005132:	065b      	lsls	r3, r3, #25
 8005134:	f53f af12 	bmi.w	8004f5c <_vfiprintf_r+0x4c>
 8005138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800513a:	e711      	b.n	8004f60 <_vfiprintf_r+0x50>
 800513c:	ab03      	add	r3, sp, #12
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	462a      	mov	r2, r5
 8005142:	4b09      	ldr	r3, [pc, #36]	; (8005168 <_vfiprintf_r+0x258>)
 8005144:	a904      	add	r1, sp, #16
 8005146:	4630      	mov	r0, r6
 8005148:	f000 f880 	bl	800524c <_printf_i>
 800514c:	e7e4      	b.n	8005118 <_vfiprintf_r+0x208>
 800514e:	bf00      	nop
 8005150:	0800573c 	.word	0x0800573c
 8005154:	0800575c 	.word	0x0800575c
 8005158:	0800571c 	.word	0x0800571c
 800515c:	0800577c 	.word	0x0800577c
 8005160:	08005786 	.word	0x08005786
 8005164:	00000000 	.word	0x00000000
 8005168:	08004eeb 	.word	0x08004eeb
 800516c:	08005782 	.word	0x08005782

08005170 <_printf_common>:
 8005170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005174:	4616      	mov	r6, r2
 8005176:	4699      	mov	r9, r3
 8005178:	688a      	ldr	r2, [r1, #8]
 800517a:	690b      	ldr	r3, [r1, #16]
 800517c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005180:	4293      	cmp	r3, r2
 8005182:	bfb8      	it	lt
 8005184:	4613      	movlt	r3, r2
 8005186:	6033      	str	r3, [r6, #0]
 8005188:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800518c:	4607      	mov	r7, r0
 800518e:	460c      	mov	r4, r1
 8005190:	b10a      	cbz	r2, 8005196 <_printf_common+0x26>
 8005192:	3301      	adds	r3, #1
 8005194:	6033      	str	r3, [r6, #0]
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	0699      	lsls	r1, r3, #26
 800519a:	bf42      	ittt	mi
 800519c:	6833      	ldrmi	r3, [r6, #0]
 800519e:	3302      	addmi	r3, #2
 80051a0:	6033      	strmi	r3, [r6, #0]
 80051a2:	6825      	ldr	r5, [r4, #0]
 80051a4:	f015 0506 	ands.w	r5, r5, #6
 80051a8:	d106      	bne.n	80051b8 <_printf_common+0x48>
 80051aa:	f104 0a19 	add.w	sl, r4, #25
 80051ae:	68e3      	ldr	r3, [r4, #12]
 80051b0:	6832      	ldr	r2, [r6, #0]
 80051b2:	1a9b      	subs	r3, r3, r2
 80051b4:	42ab      	cmp	r3, r5
 80051b6:	dc26      	bgt.n	8005206 <_printf_common+0x96>
 80051b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051bc:	1e13      	subs	r3, r2, #0
 80051be:	6822      	ldr	r2, [r4, #0]
 80051c0:	bf18      	it	ne
 80051c2:	2301      	movne	r3, #1
 80051c4:	0692      	lsls	r2, r2, #26
 80051c6:	d42b      	bmi.n	8005220 <_printf_common+0xb0>
 80051c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051cc:	4649      	mov	r1, r9
 80051ce:	4638      	mov	r0, r7
 80051d0:	47c0      	blx	r8
 80051d2:	3001      	adds	r0, #1
 80051d4:	d01e      	beq.n	8005214 <_printf_common+0xa4>
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	68e5      	ldr	r5, [r4, #12]
 80051da:	6832      	ldr	r2, [r6, #0]
 80051dc:	f003 0306 	and.w	r3, r3, #6
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	bf08      	it	eq
 80051e4:	1aad      	subeq	r5, r5, r2
 80051e6:	68a3      	ldr	r3, [r4, #8]
 80051e8:	6922      	ldr	r2, [r4, #16]
 80051ea:	bf0c      	ite	eq
 80051ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051f0:	2500      	movne	r5, #0
 80051f2:	4293      	cmp	r3, r2
 80051f4:	bfc4      	itt	gt
 80051f6:	1a9b      	subgt	r3, r3, r2
 80051f8:	18ed      	addgt	r5, r5, r3
 80051fa:	2600      	movs	r6, #0
 80051fc:	341a      	adds	r4, #26
 80051fe:	42b5      	cmp	r5, r6
 8005200:	d11a      	bne.n	8005238 <_printf_common+0xc8>
 8005202:	2000      	movs	r0, #0
 8005204:	e008      	b.n	8005218 <_printf_common+0xa8>
 8005206:	2301      	movs	r3, #1
 8005208:	4652      	mov	r2, sl
 800520a:	4649      	mov	r1, r9
 800520c:	4638      	mov	r0, r7
 800520e:	47c0      	blx	r8
 8005210:	3001      	adds	r0, #1
 8005212:	d103      	bne.n	800521c <_printf_common+0xac>
 8005214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800521c:	3501      	adds	r5, #1
 800521e:	e7c6      	b.n	80051ae <_printf_common+0x3e>
 8005220:	18e1      	adds	r1, r4, r3
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	2030      	movs	r0, #48	; 0x30
 8005226:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800522a:	4422      	add	r2, r4
 800522c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005230:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005234:	3302      	adds	r3, #2
 8005236:	e7c7      	b.n	80051c8 <_printf_common+0x58>
 8005238:	2301      	movs	r3, #1
 800523a:	4622      	mov	r2, r4
 800523c:	4649      	mov	r1, r9
 800523e:	4638      	mov	r0, r7
 8005240:	47c0      	blx	r8
 8005242:	3001      	adds	r0, #1
 8005244:	d0e6      	beq.n	8005214 <_printf_common+0xa4>
 8005246:	3601      	adds	r6, #1
 8005248:	e7d9      	b.n	80051fe <_printf_common+0x8e>
	...

0800524c <_printf_i>:
 800524c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005250:	7e0f      	ldrb	r7, [r1, #24]
 8005252:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005254:	2f78      	cmp	r7, #120	; 0x78
 8005256:	4691      	mov	r9, r2
 8005258:	4680      	mov	r8, r0
 800525a:	460c      	mov	r4, r1
 800525c:	469a      	mov	sl, r3
 800525e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005262:	d807      	bhi.n	8005274 <_printf_i+0x28>
 8005264:	2f62      	cmp	r7, #98	; 0x62
 8005266:	d80a      	bhi.n	800527e <_printf_i+0x32>
 8005268:	2f00      	cmp	r7, #0
 800526a:	f000 80d8 	beq.w	800541e <_printf_i+0x1d2>
 800526e:	2f58      	cmp	r7, #88	; 0x58
 8005270:	f000 80a3 	beq.w	80053ba <_printf_i+0x16e>
 8005274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005278:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800527c:	e03a      	b.n	80052f4 <_printf_i+0xa8>
 800527e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005282:	2b15      	cmp	r3, #21
 8005284:	d8f6      	bhi.n	8005274 <_printf_i+0x28>
 8005286:	a101      	add	r1, pc, #4	; (adr r1, 800528c <_printf_i+0x40>)
 8005288:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800528c:	080052e5 	.word	0x080052e5
 8005290:	080052f9 	.word	0x080052f9
 8005294:	08005275 	.word	0x08005275
 8005298:	08005275 	.word	0x08005275
 800529c:	08005275 	.word	0x08005275
 80052a0:	08005275 	.word	0x08005275
 80052a4:	080052f9 	.word	0x080052f9
 80052a8:	08005275 	.word	0x08005275
 80052ac:	08005275 	.word	0x08005275
 80052b0:	08005275 	.word	0x08005275
 80052b4:	08005275 	.word	0x08005275
 80052b8:	08005405 	.word	0x08005405
 80052bc:	08005329 	.word	0x08005329
 80052c0:	080053e7 	.word	0x080053e7
 80052c4:	08005275 	.word	0x08005275
 80052c8:	08005275 	.word	0x08005275
 80052cc:	08005427 	.word	0x08005427
 80052d0:	08005275 	.word	0x08005275
 80052d4:	08005329 	.word	0x08005329
 80052d8:	08005275 	.word	0x08005275
 80052dc:	08005275 	.word	0x08005275
 80052e0:	080053ef 	.word	0x080053ef
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	1d1a      	adds	r2, r3, #4
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	602a      	str	r2, [r5, #0]
 80052ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052f4:	2301      	movs	r3, #1
 80052f6:	e0a3      	b.n	8005440 <_printf_i+0x1f4>
 80052f8:	6820      	ldr	r0, [r4, #0]
 80052fa:	6829      	ldr	r1, [r5, #0]
 80052fc:	0606      	lsls	r6, r0, #24
 80052fe:	f101 0304 	add.w	r3, r1, #4
 8005302:	d50a      	bpl.n	800531a <_printf_i+0xce>
 8005304:	680e      	ldr	r6, [r1, #0]
 8005306:	602b      	str	r3, [r5, #0]
 8005308:	2e00      	cmp	r6, #0
 800530a:	da03      	bge.n	8005314 <_printf_i+0xc8>
 800530c:	232d      	movs	r3, #45	; 0x2d
 800530e:	4276      	negs	r6, r6
 8005310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005314:	485e      	ldr	r0, [pc, #376]	; (8005490 <_printf_i+0x244>)
 8005316:	230a      	movs	r3, #10
 8005318:	e019      	b.n	800534e <_printf_i+0x102>
 800531a:	680e      	ldr	r6, [r1, #0]
 800531c:	602b      	str	r3, [r5, #0]
 800531e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005322:	bf18      	it	ne
 8005324:	b236      	sxthne	r6, r6
 8005326:	e7ef      	b.n	8005308 <_printf_i+0xbc>
 8005328:	682b      	ldr	r3, [r5, #0]
 800532a:	6820      	ldr	r0, [r4, #0]
 800532c:	1d19      	adds	r1, r3, #4
 800532e:	6029      	str	r1, [r5, #0]
 8005330:	0601      	lsls	r1, r0, #24
 8005332:	d501      	bpl.n	8005338 <_printf_i+0xec>
 8005334:	681e      	ldr	r6, [r3, #0]
 8005336:	e002      	b.n	800533e <_printf_i+0xf2>
 8005338:	0646      	lsls	r6, r0, #25
 800533a:	d5fb      	bpl.n	8005334 <_printf_i+0xe8>
 800533c:	881e      	ldrh	r6, [r3, #0]
 800533e:	4854      	ldr	r0, [pc, #336]	; (8005490 <_printf_i+0x244>)
 8005340:	2f6f      	cmp	r7, #111	; 0x6f
 8005342:	bf0c      	ite	eq
 8005344:	2308      	moveq	r3, #8
 8005346:	230a      	movne	r3, #10
 8005348:	2100      	movs	r1, #0
 800534a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800534e:	6865      	ldr	r5, [r4, #4]
 8005350:	60a5      	str	r5, [r4, #8]
 8005352:	2d00      	cmp	r5, #0
 8005354:	bfa2      	ittt	ge
 8005356:	6821      	ldrge	r1, [r4, #0]
 8005358:	f021 0104 	bicge.w	r1, r1, #4
 800535c:	6021      	strge	r1, [r4, #0]
 800535e:	b90e      	cbnz	r6, 8005364 <_printf_i+0x118>
 8005360:	2d00      	cmp	r5, #0
 8005362:	d04d      	beq.n	8005400 <_printf_i+0x1b4>
 8005364:	4615      	mov	r5, r2
 8005366:	fbb6 f1f3 	udiv	r1, r6, r3
 800536a:	fb03 6711 	mls	r7, r3, r1, r6
 800536e:	5dc7      	ldrb	r7, [r0, r7]
 8005370:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005374:	4637      	mov	r7, r6
 8005376:	42bb      	cmp	r3, r7
 8005378:	460e      	mov	r6, r1
 800537a:	d9f4      	bls.n	8005366 <_printf_i+0x11a>
 800537c:	2b08      	cmp	r3, #8
 800537e:	d10b      	bne.n	8005398 <_printf_i+0x14c>
 8005380:	6823      	ldr	r3, [r4, #0]
 8005382:	07de      	lsls	r6, r3, #31
 8005384:	d508      	bpl.n	8005398 <_printf_i+0x14c>
 8005386:	6923      	ldr	r3, [r4, #16]
 8005388:	6861      	ldr	r1, [r4, #4]
 800538a:	4299      	cmp	r1, r3
 800538c:	bfde      	ittt	le
 800538e:	2330      	movle	r3, #48	; 0x30
 8005390:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005394:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005398:	1b52      	subs	r2, r2, r5
 800539a:	6122      	str	r2, [r4, #16]
 800539c:	f8cd a000 	str.w	sl, [sp]
 80053a0:	464b      	mov	r3, r9
 80053a2:	aa03      	add	r2, sp, #12
 80053a4:	4621      	mov	r1, r4
 80053a6:	4640      	mov	r0, r8
 80053a8:	f7ff fee2 	bl	8005170 <_printf_common>
 80053ac:	3001      	adds	r0, #1
 80053ae:	d14c      	bne.n	800544a <_printf_i+0x1fe>
 80053b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053b4:	b004      	add	sp, #16
 80053b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ba:	4835      	ldr	r0, [pc, #212]	; (8005490 <_printf_i+0x244>)
 80053bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80053c0:	6829      	ldr	r1, [r5, #0]
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80053c8:	6029      	str	r1, [r5, #0]
 80053ca:	061d      	lsls	r5, r3, #24
 80053cc:	d514      	bpl.n	80053f8 <_printf_i+0x1ac>
 80053ce:	07df      	lsls	r7, r3, #31
 80053d0:	bf44      	itt	mi
 80053d2:	f043 0320 	orrmi.w	r3, r3, #32
 80053d6:	6023      	strmi	r3, [r4, #0]
 80053d8:	b91e      	cbnz	r6, 80053e2 <_printf_i+0x196>
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	f023 0320 	bic.w	r3, r3, #32
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	2310      	movs	r3, #16
 80053e4:	e7b0      	b.n	8005348 <_printf_i+0xfc>
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	f043 0320 	orr.w	r3, r3, #32
 80053ec:	6023      	str	r3, [r4, #0]
 80053ee:	2378      	movs	r3, #120	; 0x78
 80053f0:	4828      	ldr	r0, [pc, #160]	; (8005494 <_printf_i+0x248>)
 80053f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053f6:	e7e3      	b.n	80053c0 <_printf_i+0x174>
 80053f8:	0659      	lsls	r1, r3, #25
 80053fa:	bf48      	it	mi
 80053fc:	b2b6      	uxthmi	r6, r6
 80053fe:	e7e6      	b.n	80053ce <_printf_i+0x182>
 8005400:	4615      	mov	r5, r2
 8005402:	e7bb      	b.n	800537c <_printf_i+0x130>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	6826      	ldr	r6, [r4, #0]
 8005408:	6961      	ldr	r1, [r4, #20]
 800540a:	1d18      	adds	r0, r3, #4
 800540c:	6028      	str	r0, [r5, #0]
 800540e:	0635      	lsls	r5, r6, #24
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	d501      	bpl.n	8005418 <_printf_i+0x1cc>
 8005414:	6019      	str	r1, [r3, #0]
 8005416:	e002      	b.n	800541e <_printf_i+0x1d2>
 8005418:	0670      	lsls	r0, r6, #25
 800541a:	d5fb      	bpl.n	8005414 <_printf_i+0x1c8>
 800541c:	8019      	strh	r1, [r3, #0]
 800541e:	2300      	movs	r3, #0
 8005420:	6123      	str	r3, [r4, #16]
 8005422:	4615      	mov	r5, r2
 8005424:	e7ba      	b.n	800539c <_printf_i+0x150>
 8005426:	682b      	ldr	r3, [r5, #0]
 8005428:	1d1a      	adds	r2, r3, #4
 800542a:	602a      	str	r2, [r5, #0]
 800542c:	681d      	ldr	r5, [r3, #0]
 800542e:	6862      	ldr	r2, [r4, #4]
 8005430:	2100      	movs	r1, #0
 8005432:	4628      	mov	r0, r5
 8005434:	f7fa feec 	bl	8000210 <memchr>
 8005438:	b108      	cbz	r0, 800543e <_printf_i+0x1f2>
 800543a:	1b40      	subs	r0, r0, r5
 800543c:	6060      	str	r0, [r4, #4]
 800543e:	6863      	ldr	r3, [r4, #4]
 8005440:	6123      	str	r3, [r4, #16]
 8005442:	2300      	movs	r3, #0
 8005444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005448:	e7a8      	b.n	800539c <_printf_i+0x150>
 800544a:	6923      	ldr	r3, [r4, #16]
 800544c:	462a      	mov	r2, r5
 800544e:	4649      	mov	r1, r9
 8005450:	4640      	mov	r0, r8
 8005452:	47d0      	blx	sl
 8005454:	3001      	adds	r0, #1
 8005456:	d0ab      	beq.n	80053b0 <_printf_i+0x164>
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	079b      	lsls	r3, r3, #30
 800545c:	d413      	bmi.n	8005486 <_printf_i+0x23a>
 800545e:	68e0      	ldr	r0, [r4, #12]
 8005460:	9b03      	ldr	r3, [sp, #12]
 8005462:	4298      	cmp	r0, r3
 8005464:	bfb8      	it	lt
 8005466:	4618      	movlt	r0, r3
 8005468:	e7a4      	b.n	80053b4 <_printf_i+0x168>
 800546a:	2301      	movs	r3, #1
 800546c:	4632      	mov	r2, r6
 800546e:	4649      	mov	r1, r9
 8005470:	4640      	mov	r0, r8
 8005472:	47d0      	blx	sl
 8005474:	3001      	adds	r0, #1
 8005476:	d09b      	beq.n	80053b0 <_printf_i+0x164>
 8005478:	3501      	adds	r5, #1
 800547a:	68e3      	ldr	r3, [r4, #12]
 800547c:	9903      	ldr	r1, [sp, #12]
 800547e:	1a5b      	subs	r3, r3, r1
 8005480:	42ab      	cmp	r3, r5
 8005482:	dcf2      	bgt.n	800546a <_printf_i+0x21e>
 8005484:	e7eb      	b.n	800545e <_printf_i+0x212>
 8005486:	2500      	movs	r5, #0
 8005488:	f104 0619 	add.w	r6, r4, #25
 800548c:	e7f5      	b.n	800547a <_printf_i+0x22e>
 800548e:	bf00      	nop
 8005490:	0800578d 	.word	0x0800578d
 8005494:	0800579e 	.word	0x0800579e

08005498 <_sbrk_r>:
 8005498:	b538      	push	{r3, r4, r5, lr}
 800549a:	4d06      	ldr	r5, [pc, #24]	; (80054b4 <_sbrk_r+0x1c>)
 800549c:	2300      	movs	r3, #0
 800549e:	4604      	mov	r4, r0
 80054a0:	4608      	mov	r0, r1
 80054a2:	602b      	str	r3, [r5, #0]
 80054a4:	f7fb fe62 	bl	800116c <_sbrk>
 80054a8:	1c43      	adds	r3, r0, #1
 80054aa:	d102      	bne.n	80054b2 <_sbrk_r+0x1a>
 80054ac:	682b      	ldr	r3, [r5, #0]
 80054ae:	b103      	cbz	r3, 80054b2 <_sbrk_r+0x1a>
 80054b0:	6023      	str	r3, [r4, #0]
 80054b2:	bd38      	pop	{r3, r4, r5, pc}
 80054b4:	20000194 	.word	0x20000194

080054b8 <__sread>:
 80054b8:	b510      	push	{r4, lr}
 80054ba:	460c      	mov	r4, r1
 80054bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054c0:	f000 f8a0 	bl	8005604 <_read_r>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	bfab      	itete	ge
 80054c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054ca:	89a3      	ldrhlt	r3, [r4, #12]
 80054cc:	181b      	addge	r3, r3, r0
 80054ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054d2:	bfac      	ite	ge
 80054d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80054d6:	81a3      	strhlt	r3, [r4, #12]
 80054d8:	bd10      	pop	{r4, pc}

080054da <__swrite>:
 80054da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054de:	461f      	mov	r7, r3
 80054e0:	898b      	ldrh	r3, [r1, #12]
 80054e2:	05db      	lsls	r3, r3, #23
 80054e4:	4605      	mov	r5, r0
 80054e6:	460c      	mov	r4, r1
 80054e8:	4616      	mov	r6, r2
 80054ea:	d505      	bpl.n	80054f8 <__swrite+0x1e>
 80054ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f0:	2302      	movs	r3, #2
 80054f2:	2200      	movs	r2, #0
 80054f4:	f000 f868 	bl	80055c8 <_lseek_r>
 80054f8:	89a3      	ldrh	r3, [r4, #12]
 80054fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005502:	81a3      	strh	r3, [r4, #12]
 8005504:	4632      	mov	r2, r6
 8005506:	463b      	mov	r3, r7
 8005508:	4628      	mov	r0, r5
 800550a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800550e:	f000 b817 	b.w	8005540 <_write_r>

08005512 <__sseek>:
 8005512:	b510      	push	{r4, lr}
 8005514:	460c      	mov	r4, r1
 8005516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800551a:	f000 f855 	bl	80055c8 <_lseek_r>
 800551e:	1c43      	adds	r3, r0, #1
 8005520:	89a3      	ldrh	r3, [r4, #12]
 8005522:	bf15      	itete	ne
 8005524:	6560      	strne	r0, [r4, #84]	; 0x54
 8005526:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800552a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800552e:	81a3      	strheq	r3, [r4, #12]
 8005530:	bf18      	it	ne
 8005532:	81a3      	strhne	r3, [r4, #12]
 8005534:	bd10      	pop	{r4, pc}

08005536 <__sclose>:
 8005536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800553a:	f000 b813 	b.w	8005564 <_close_r>
	...

08005540 <_write_r>:
 8005540:	b538      	push	{r3, r4, r5, lr}
 8005542:	4d07      	ldr	r5, [pc, #28]	; (8005560 <_write_r+0x20>)
 8005544:	4604      	mov	r4, r0
 8005546:	4608      	mov	r0, r1
 8005548:	4611      	mov	r1, r2
 800554a:	2200      	movs	r2, #0
 800554c:	602a      	str	r2, [r5, #0]
 800554e:	461a      	mov	r2, r3
 8005550:	f7fb fc3a 	bl	8000dc8 <_write>
 8005554:	1c43      	adds	r3, r0, #1
 8005556:	d102      	bne.n	800555e <_write_r+0x1e>
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	b103      	cbz	r3, 800555e <_write_r+0x1e>
 800555c:	6023      	str	r3, [r4, #0]
 800555e:	bd38      	pop	{r3, r4, r5, pc}
 8005560:	20000194 	.word	0x20000194

08005564 <_close_r>:
 8005564:	b538      	push	{r3, r4, r5, lr}
 8005566:	4d06      	ldr	r5, [pc, #24]	; (8005580 <_close_r+0x1c>)
 8005568:	2300      	movs	r3, #0
 800556a:	4604      	mov	r4, r0
 800556c:	4608      	mov	r0, r1
 800556e:	602b      	str	r3, [r5, #0]
 8005570:	f7fb fdc7 	bl	8001102 <_close>
 8005574:	1c43      	adds	r3, r0, #1
 8005576:	d102      	bne.n	800557e <_close_r+0x1a>
 8005578:	682b      	ldr	r3, [r5, #0]
 800557a:	b103      	cbz	r3, 800557e <_close_r+0x1a>
 800557c:	6023      	str	r3, [r4, #0]
 800557e:	bd38      	pop	{r3, r4, r5, pc}
 8005580:	20000194 	.word	0x20000194

08005584 <_fstat_r>:
 8005584:	b538      	push	{r3, r4, r5, lr}
 8005586:	4d07      	ldr	r5, [pc, #28]	; (80055a4 <_fstat_r+0x20>)
 8005588:	2300      	movs	r3, #0
 800558a:	4604      	mov	r4, r0
 800558c:	4608      	mov	r0, r1
 800558e:	4611      	mov	r1, r2
 8005590:	602b      	str	r3, [r5, #0]
 8005592:	f7fb fdc2 	bl	800111a <_fstat>
 8005596:	1c43      	adds	r3, r0, #1
 8005598:	d102      	bne.n	80055a0 <_fstat_r+0x1c>
 800559a:	682b      	ldr	r3, [r5, #0]
 800559c:	b103      	cbz	r3, 80055a0 <_fstat_r+0x1c>
 800559e:	6023      	str	r3, [r4, #0]
 80055a0:	bd38      	pop	{r3, r4, r5, pc}
 80055a2:	bf00      	nop
 80055a4:	20000194 	.word	0x20000194

080055a8 <_isatty_r>:
 80055a8:	b538      	push	{r3, r4, r5, lr}
 80055aa:	4d06      	ldr	r5, [pc, #24]	; (80055c4 <_isatty_r+0x1c>)
 80055ac:	2300      	movs	r3, #0
 80055ae:	4604      	mov	r4, r0
 80055b0:	4608      	mov	r0, r1
 80055b2:	602b      	str	r3, [r5, #0]
 80055b4:	f7fb fdc1 	bl	800113a <_isatty>
 80055b8:	1c43      	adds	r3, r0, #1
 80055ba:	d102      	bne.n	80055c2 <_isatty_r+0x1a>
 80055bc:	682b      	ldr	r3, [r5, #0]
 80055be:	b103      	cbz	r3, 80055c2 <_isatty_r+0x1a>
 80055c0:	6023      	str	r3, [r4, #0]
 80055c2:	bd38      	pop	{r3, r4, r5, pc}
 80055c4:	20000194 	.word	0x20000194

080055c8 <_lseek_r>:
 80055c8:	b538      	push	{r3, r4, r5, lr}
 80055ca:	4d07      	ldr	r5, [pc, #28]	; (80055e8 <_lseek_r+0x20>)
 80055cc:	4604      	mov	r4, r0
 80055ce:	4608      	mov	r0, r1
 80055d0:	4611      	mov	r1, r2
 80055d2:	2200      	movs	r2, #0
 80055d4:	602a      	str	r2, [r5, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	f7fb fdba 	bl	8001150 <_lseek>
 80055dc:	1c43      	adds	r3, r0, #1
 80055de:	d102      	bne.n	80055e6 <_lseek_r+0x1e>
 80055e0:	682b      	ldr	r3, [r5, #0]
 80055e2:	b103      	cbz	r3, 80055e6 <_lseek_r+0x1e>
 80055e4:	6023      	str	r3, [r4, #0]
 80055e6:	bd38      	pop	{r3, r4, r5, pc}
 80055e8:	20000194 	.word	0x20000194

080055ec <__malloc_lock>:
 80055ec:	4801      	ldr	r0, [pc, #4]	; (80055f4 <__malloc_lock+0x8>)
 80055ee:	f7ff bb15 	b.w	8004c1c <__retarget_lock_acquire_recursive>
 80055f2:	bf00      	nop
 80055f4:	20000188 	.word	0x20000188

080055f8 <__malloc_unlock>:
 80055f8:	4801      	ldr	r0, [pc, #4]	; (8005600 <__malloc_unlock+0x8>)
 80055fa:	f7ff bb10 	b.w	8004c1e <__retarget_lock_release_recursive>
 80055fe:	bf00      	nop
 8005600:	20000188 	.word	0x20000188

08005604 <_read_r>:
 8005604:	b538      	push	{r3, r4, r5, lr}
 8005606:	4d07      	ldr	r5, [pc, #28]	; (8005624 <_read_r+0x20>)
 8005608:	4604      	mov	r4, r0
 800560a:	4608      	mov	r0, r1
 800560c:	4611      	mov	r1, r2
 800560e:	2200      	movs	r2, #0
 8005610:	602a      	str	r2, [r5, #0]
 8005612:	461a      	mov	r2, r3
 8005614:	f7fb fd58 	bl	80010c8 <_read>
 8005618:	1c43      	adds	r3, r0, #1
 800561a:	d102      	bne.n	8005622 <_read_r+0x1e>
 800561c:	682b      	ldr	r3, [r5, #0]
 800561e:	b103      	cbz	r3, 8005622 <_read_r+0x1e>
 8005620:	6023      	str	r3, [r4, #0]
 8005622:	bd38      	pop	{r3, r4, r5, pc}
 8005624:	20000194 	.word	0x20000194

08005628 <_init>:
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562a:	bf00      	nop
 800562c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562e:	bc08      	pop	{r3}
 8005630:	469e      	mov	lr, r3
 8005632:	4770      	bx	lr

08005634 <_fini>:
 8005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005636:	bf00      	nop
 8005638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563a:	bc08      	pop	{r3}
 800563c:	469e      	mov	lr, r3
 800563e:	4770      	bx	lr
