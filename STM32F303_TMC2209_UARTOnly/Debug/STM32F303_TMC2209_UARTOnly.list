
STM32F303_TMC2209_UARTOnly.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fcc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800615c  0800615c  0001615c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066c0  080066c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080066c0  080066c0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066c0  080066c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066c0  080066c0  000166c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066c4  080066c4  000166c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080066c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000007e0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000850  20000850  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c7db  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000210b  00000000  00000000  0002c87b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000918  00000000  00000000  0002e988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000840  00000000  00000000  0002f2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c2a2  00000000  00000000  0002fae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c89e  00000000  00000000  0004bd82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fbcc  00000000  00000000  00058620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f81ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bbc  00000000  00000000  000f823c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006144 	.word	0x08006144

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006144 	.word	0x08006144

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <tmc2209_readWriteArray>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void tmc2209_readWriteArray(uint8_t channel, uint8_t *data, size_t writeLength, size_t readLength)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	60b9      	str	r1, [r7, #8]
 8000278:	607a      	str	r2, [r7, #4]
 800027a:	603b      	str	r3, [r7, #0]
 800027c:	4603      	mov	r3, r0
 800027e:	73fb      	strb	r3, [r7, #15]
	//set your uart read write
	//UART_readWrite(channelToUART(channel), data, writeLength, readLength);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8000280:	480e      	ldr	r0, [pc, #56]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000282:	f003 fccf 	bl	8003c24 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart1, data, writeLength,3000);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	b29a      	uxth	r2, r3
 800028a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800028e:	68b9      	ldr	r1, [r7, #8]
 8000290:	480a      	ldr	r0, [pc, #40]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000292:	f003 f815 	bl	80032c0 <HAL_UART_Transmit>
//	HAL_UART_Transmit_IT(&huart1, data, writeLength);


	if(readLength > 0){
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d00a      	beq.n	80002b2 <tmc2209_readWriteArray+0x42>
		HAL_HalfDuplex_EnableReceiver(&huart1);
 800029c:	4807      	ldr	r0, [pc, #28]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 800029e:	f003 fd13 	bl	8003cc8 <HAL_HalfDuplex_EnableReceiver>
		HAL_UART_Receive(&huart1, data, readLength,3000);
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002aa:	68b9      	ldr	r1, [r7, #8]
 80002ac:	4803      	ldr	r0, [pc, #12]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 80002ae:	f003 f89b 	bl	80033e8 <HAL_UART_Receive>
//		HAL_UART_Receive_IT(&huart1, data, readLength);
	}
}
 80002b2:	bf00      	nop
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	2000008c 	.word	0x2000008c

080002c0 <tmc2209_CRC8>:

uint8_t tmc2209_CRC8(uint8_t *data, size_t length)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
	return TMC2209_CRC(data, length);
 80002ca:	2201      	movs	r2, #1
 80002cc:	6839      	ldr	r1, [r7, #0]
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f004 fba0 	bl	8004a14 <tmc_CRC8>
 80002d4:	4603      	mov	r3, r0
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <reset>:

static uint8_t reset()
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	return tmc2209_reset(&TMC2209);
 80002e4:	4802      	ldr	r0, [pc, #8]	; (80002f0 <reset+0x10>)
 80002e6:	f004 fdcd 	bl	8004e84 <tmc2209_reset>
 80002ea:	4603      	mov	r3, r0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000194 	.word	0x20000194

080002f4 <restore>:

static uint8_t restore()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	return tmc2209_restore(&TMC2209);
 80002f8:	4802      	ldr	r0, [pc, #8]	; (8000304 <restore+0x10>)
 80002fa:	f004 fdfd 	bl	8004ef8 <tmc2209_restore>
 80002fe:	4603      	mov	r3, r0
}
 8000300:	4618      	mov	r0, r3
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000194 	.word	0x20000194

08000308 <TMC2209_INIT>:


void TMC2209_INIT()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 800030e:	2201      	movs	r2, #1
 8000310:	2101      	movs	r1, #1
 8000312:	2007      	movs	r0, #7
 8000314:	f004 fac6 	bl	80048a4 <tmc_fillCRC8Table>

	TMC2209_config.reset = reset;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <TMC2209_INIT+0x38>)
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <TMC2209_INIT+0x3c>)
 800031c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	TMC2209_config.restore = restore;
 8000320:	4b07      	ldr	r3, [pc, #28]	; (8000340 <TMC2209_INIT+0x38>)
 8000322:	4a09      	ldr	r2, [pc, #36]	; (8000348 <TMC2209_INIT+0x40>)
 8000324:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	tmc2209_init(&TMC2209, 0, 0, &TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <TMC2209_INIT+0x44>)
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <TMC2209_INIT+0x38>)
 800032e:	2200      	movs	r2, #0
 8000330:	2100      	movs	r1, #0
 8000332:	4807      	ldr	r0, [pc, #28]	; (8000350 <TMC2209_INIT+0x48>)
 8000334:	f004 fcc2 	bl	8004cbc <tmc2209_init>


	//restore();
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	2000041c 	.word	0x2000041c
 8000344:	080002e1 	.word	0x080002e1
 8000348:	080002f5 	.word	0x080002f5
 800034c:	08006370 	.word	0x08006370
 8000350:	20000194 	.word	0x20000194

08000354 <HAL_UART_RxCpltCallback>:
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	//int32_t SGTHRS_value = 0;
	uartflag1 = 1;
 800035c:	4b04      	ldr	r3, [pc, #16]	; (8000370 <HAL_UART_RxCpltCallback+0x1c>)
 800035e:	2201      	movs	r2, #1
 8000360:	701a      	strb	r2, [r3, #0]
	printf("uart_timer\r\n");
 8000362:	4804      	ldr	r0, [pc, #16]	; (8000374 <HAL_UART_RxCpltCallback+0x20>)
 8000364:	f004 fe9a 	bl	800509c <puts>
	//HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);
	//SGTHRS_value = tmc2209_readInt(&TMC2209, TMC2209_SGTHRS);
	//currentdata();
}
 8000368:	bf00      	nop
 800036a:	3708      	adds	r7, #8
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000630 	.word	0x20000630
 8000374:	0800615c 	.word	0x0800615c

08000378 <TMCsetup>:
//			end_stop_state &= ~1;
//		}
//	}
//}

void TMCsetup(){
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
	int32_t value = 0;
 800037e:	2300      	movs	r3, #0
 8000380:	607b      	str	r3, [r7, #4]

	value = 16;
 8000382:	2310      	movs	r3, #16
 8000384:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT, value);	//実行電流
 8000386:	2110      	movs	r1, #16
 8000388:	48c8      	ldr	r0, [pc, #800]	; (80006ac <TMCsetup+0x334>)
 800038a:	f004 fc34 	bl	8004bf6 <tmc2209_readInt>
 800038e:	4603      	mov	r3, r0
 8000390:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	021b      	lsls	r3, r3, #8
 8000398:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800039c:	4313      	orrs	r3, r2
 800039e:	461a      	mov	r2, r3
 80003a0:	2110      	movs	r1, #16
 80003a2:	48c2      	ldr	r0, [pc, #776]	; (80006ac <TMCsetup+0x334>)
 80003a4:	f004 fbd7 	bl	8004b56 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80003a8:	f000 ffe6 	bl	8001378 <HAL_GetTick>
 80003ac:	4603      	mov	r3, r0
 80003ae:	4619      	mov	r1, r3
 80003b0:	48be      	ldr	r0, [pc, #760]	; (80006ac <TMCsetup+0x334>)
 80003b2:	f004 fd56 	bl	8004e62 <tmc2209_periodicJob>
	HAL_Delay(100);
 80003b6:	2064      	movs	r0, #100	; 0x64
 80003b8:	f000 ffea 	bl	8001390 <HAL_Delay>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 80003bc:	2110      	movs	r1, #16
 80003be:	48bb      	ldr	r0, [pc, #748]	; (80006ac <TMCsetup+0x334>)
 80003c0:	f004 fc19 	bl	8004bf6 <tmc2209_readInt>
 80003c4:	4603      	mov	r3, r0
 80003c6:	121b      	asrs	r3, r3, #8
 80003c8:	f003 031f 	and.w	r3, r3, #31
 80003cc:	607b      	str	r3, [r7, #4]
	printf("IRUN: %ld\r\n", value);
 80003ce:	6879      	ldr	r1, [r7, #4]
 80003d0:	48b7      	ldr	r0, [pc, #732]	; (80006b0 <TMCsetup+0x338>)
 80003d2:	f004 fddd 	bl	8004f90 <iprintf>

	value= 16;																						//モーター待機時の電流の設定
 80003d6:	2310      	movs	r3, #16
 80003d8:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, value);
 80003da:	2110      	movs	r1, #16
 80003dc:	48b3      	ldr	r0, [pc, #716]	; (80006ac <TMCsetup+0x334>)
 80003de:	f004 fc0a 	bl	8004bf6 <tmc2209_readInt>
 80003e2:	4603      	mov	r3, r0
 80003e4:	f023 021f 	bic.w	r2, r3, #31
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f003 031f 	and.w	r3, r3, #31
 80003ee:	4313      	orrs	r3, r2
 80003f0:	461a      	mov	r2, r3
 80003f2:	2110      	movs	r1, #16
 80003f4:	48ad      	ldr	r0, [pc, #692]	; (80006ac <TMCsetup+0x334>)
 80003f6:	f004 fbae 	bl	8004b56 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80003fa:	f000 ffbd 	bl	8001378 <HAL_GetTick>
 80003fe:	4603      	mov	r3, r0
 8000400:	4619      	mov	r1, r3
 8000402:	48aa      	ldr	r0, [pc, #680]	; (80006ac <TMCsetup+0x334>)
 8000404:	f004 fd2d 	bl	8004e62 <tmc2209_periodicJob>
	HAL_Delay(100);
 8000408:	2064      	movs	r0, #100	; 0x64
 800040a:	f000 ffc1 	bl	8001390 <HAL_Delay>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);	//保持電流
 800040e:	2110      	movs	r1, #16
 8000410:	48a6      	ldr	r0, [pc, #664]	; (80006ac <TMCsetup+0x334>)
 8000412:	f004 fbf0 	bl	8004bf6 <tmc2209_readInt>
 8000416:	4603      	mov	r3, r0
 8000418:	f003 031f 	and.w	r3, r3, #31
 800041c:	607b      	str	r3, [r7, #4]
	printf("IHOLD: %ld\r\n", value);
 800041e:	6879      	ldr	r1, [r7, #4]
 8000420:	48a4      	ldr	r0, [pc, #656]	; (80006b4 <TMCsetup+0x33c>)
 8000422:	f004 fdb5 	bl	8004f90 <iprintf>

	value=0;
 8000426:	2300      	movs	r3, #0
 8000428:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK,TMC2209_PDN_DISABLE_SHIFT);
 800042a:	2100      	movs	r1, #0
 800042c:	489f      	ldr	r0, [pc, #636]	; (80006ac <TMCsetup+0x334>)
 800042e:	f004 fbe2 	bl	8004bf6 <tmc2209_readInt>
 8000432:	4603      	mov	r3, r0
 8000434:	119b      	asrs	r3, r3, #6
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	607b      	str	r3, [r7, #4]
	printf("pdn_disable : %ld\r\n", value);
 800043c:	6879      	ldr	r1, [r7, #4]
 800043e:	489e      	ldr	r0, [pc, #632]	; (80006b8 <TMCsetup+0x340>)
 8000440:	f004 fda6 	bl	8004f90 <iprintf>
	value = 1;
 8000444:	2301      	movs	r3, #1
 8000446:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK, TMC2209_PDN_DISABLE_SHIFT, value);
 8000448:	2100      	movs	r1, #0
 800044a:	4898      	ldr	r0, [pc, #608]	; (80006ac <TMCsetup+0x334>)
 800044c:	f004 fbd3 	bl	8004bf6 <tmc2209_readInt>
 8000450:	4603      	mov	r3, r0
 8000452:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	019b      	lsls	r3, r3, #6
 800045a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800045e:	4313      	orrs	r3, r2
 8000460:	461a      	mov	r2, r3
 8000462:	2100      	movs	r1, #0
 8000464:	4891      	ldr	r0, [pc, #580]	; (80006ac <TMCsetup+0x334>)
 8000466:	f004 fb76 	bl	8004b56 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800046a:	f000 ff85 	bl	8001378 <HAL_GetTick>
 800046e:	4603      	mov	r3, r0
 8000470:	4619      	mov	r1, r3
 8000472:	488e      	ldr	r0, [pc, #568]	; (80006ac <TMCsetup+0x334>)
 8000474:	f004 fcf5 	bl	8004e62 <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK, TMC2209_PDN_DISABLE_SHIFT);
 8000478:	2100      	movs	r1, #0
 800047a:	488c      	ldr	r0, [pc, #560]	; (80006ac <TMCsetup+0x334>)
 800047c:	f004 fbbb 	bl	8004bf6 <tmc2209_readInt>
 8000480:	4603      	mov	r3, r0
 8000482:	119b      	asrs	r3, r3, #6
 8000484:	f003 0301 	and.w	r3, r3, #1
 8000488:	607b      	str	r3, [r7, #4]
	printf("pdn_disable : %ld\r\n", value);
 800048a:	6879      	ldr	r1, [r7, #4]
 800048c:	488a      	ldr	r0, [pc, #552]	; (80006b8 <TMCsetup+0x340>)
 800048e:	f004 fd7f 	bl	8004f90 <iprintf>

	value=300;
 8000492:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000496:	607b      	str	r3, [r7, #4]
	tmc2209_writeInt(&TMC2209, TMC2209_TCOOLTHRS, value);
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	2114      	movs	r1, #20
 800049c:	4883      	ldr	r0, [pc, #524]	; (80006ac <TMCsetup+0x334>)
 800049e:	f004 fb5a 	bl	8004b56 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80004a2:	f000 ff69 	bl	8001378 <HAL_GetTick>
 80004a6:	4603      	mov	r3, r0
 80004a8:	4619      	mov	r1, r3
 80004aa:	4880      	ldr	r0, [pc, #512]	; (80006ac <TMCsetup+0x334>)
 80004ac:	f004 fcd9 	bl	8004e62 <tmc2209_periodicJob>
	printf("TCOOLTHRS: %ld\r\n", value);
 80004b0:	6879      	ldr	r1, [r7, #4]
 80004b2:	4882      	ldr	r0, [pc, #520]	; (80006bc <TMCsetup+0x344>)
 80004b4:	f004 fd6c 	bl	8004f90 <iprintf>

	value=0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK,TMC2209_EN_SPREADCYCLE_SHIFT);
 80004bc:	2100      	movs	r1, #0
 80004be:	487b      	ldr	r0, [pc, #492]	; (80006ac <TMCsetup+0x334>)
 80004c0:	f004 fb99 	bl	8004bf6 <tmc2209_readInt>
 80004c4:	4603      	mov	r3, r0
 80004c6:	109b      	asrs	r3, r3, #2
 80004c8:	f003 0301 	and.w	r3, r3, #1
 80004cc:	607b      	str	r3, [r7, #4]
	printf("SPREADCYCLE : %ld\r\n", value);
 80004ce:	6879      	ldr	r1, [r7, #4]
 80004d0:	487b      	ldr	r0, [pc, #492]	; (80006c0 <TMCsetup+0x348>)
 80004d2:	f004 fd5d 	bl	8004f90 <iprintf>
	value = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK, TMC2209_EN_SPREADCYCLE_SHIFT ,value);
 80004da:	2100      	movs	r1, #0
 80004dc:	4873      	ldr	r0, [pc, #460]	; (80006ac <TMCsetup+0x334>)
 80004de:	f004 fb8a 	bl	8004bf6 <tmc2209_readInt>
 80004e2:	4603      	mov	r3, r0
 80004e4:	f023 0204 	bic.w	r2, r3, #4
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	f003 0304 	and.w	r3, r3, #4
 80004f0:	4313      	orrs	r3, r2
 80004f2:	461a      	mov	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	486d      	ldr	r0, [pc, #436]	; (80006ac <TMCsetup+0x334>)
 80004f8:	f004 fb2d 	bl	8004b56 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80004fc:	f000 ff3c 	bl	8001378 <HAL_GetTick>
 8000500:	4603      	mov	r3, r0
 8000502:	4619      	mov	r1, r3
 8000504:	4869      	ldr	r0, [pc, #420]	; (80006ac <TMCsetup+0x334>)
 8000506:	f004 fcac 	bl	8004e62 <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK,TMC2209_EN_SPREADCYCLE_SHIFT);
 800050a:	2100      	movs	r1, #0
 800050c:	4867      	ldr	r0, [pc, #412]	; (80006ac <TMCsetup+0x334>)
 800050e:	f004 fb72 	bl	8004bf6 <tmc2209_readInt>
 8000512:	4603      	mov	r3, r0
 8000514:	109b      	asrs	r3, r3, #2
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
	printf("SPREADCYCLE : %ld\r\n", value);
 800051c:	6879      	ldr	r1, [r7, #4]
 800051e:	4868      	ldr	r0, [pc, #416]	; (80006c0 <TMCsetup+0x348>)
 8000520:	f004 fd36 	bl	8004f90 <iprintf>
//	value=10;
//	tmc2209_writeInt(&TMC2209, TMC2209_TPWMTHRS, value);
//	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
//	printf("TPWMTHRS: %ld\r\n", value);

	value=0;
 8000524:	2300      	movs	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK,TMC2209_INTERNAL_RSENSE_SHIFT);
 8000528:	2100      	movs	r1, #0
 800052a:	4860      	ldr	r0, [pc, #384]	; (80006ac <TMCsetup+0x334>)
 800052c:	f004 fb63 	bl	8004bf6 <tmc2209_readInt>
 8000530:	4603      	mov	r3, r0
 8000532:	105b      	asrs	r3, r3, #1
 8000534:	f003 0301 	and.w	r3, r3, #1
 8000538:	607b      	str	r3, [r7, #4]
	printf("RSENSE : %ld\r\n", value);
 800053a:	6879      	ldr	r1, [r7, #4]
 800053c:	4861      	ldr	r0, [pc, #388]	; (80006c4 <TMCsetup+0x34c>)
 800053e:	f004 fd27 	bl	8004f90 <iprintf>
	value = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK, TMC2209_INTERNAL_RSENSE_SHIFT, value);
 8000546:	2100      	movs	r1, #0
 8000548:	4858      	ldr	r0, [pc, #352]	; (80006ac <TMCsetup+0x334>)
 800054a:	f004 fb54 	bl	8004bf6 <tmc2209_readInt>
 800054e:	4603      	mov	r3, r0
 8000550:	f023 0202 	bic.w	r2, r3, #2
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	f003 0302 	and.w	r3, r3, #2
 800055c:	4313      	orrs	r3, r2
 800055e:	461a      	mov	r2, r3
 8000560:	2100      	movs	r1, #0
 8000562:	4852      	ldr	r0, [pc, #328]	; (80006ac <TMCsetup+0x334>)
 8000564:	f004 faf7 	bl	8004b56 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000568:	f000 ff06 	bl	8001378 <HAL_GetTick>
 800056c:	4603      	mov	r3, r0
 800056e:	4619      	mov	r1, r3
 8000570:	484e      	ldr	r0, [pc, #312]	; (80006ac <TMCsetup+0x334>)
 8000572:	f004 fc76 	bl	8004e62 <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK, TMC2209_INTERNAL_RSENSE_SHIFT);
 8000576:	2100      	movs	r1, #0
 8000578:	484c      	ldr	r0, [pc, #304]	; (80006ac <TMCsetup+0x334>)
 800057a:	f004 fb3c 	bl	8004bf6 <tmc2209_readInt>
 800057e:	4603      	mov	r3, r0
 8000580:	105b      	asrs	r3, r3, #1
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	607b      	str	r3, [r7, #4]
	printf("RSENSE : %ld\r\n", value);
 8000588:	6879      	ldr	r1, [r7, #4]
 800058a:	484e      	ldr	r0, [pc, #312]	; (80006c4 <TMCsetup+0x34c>)
 800058c:	f004 fd00 	bl	8004f90 <iprintf>

	value=0;
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_FREQ_MASK, TMC2209_PWM_FREQ_SHIFT);
 8000594:	2170      	movs	r1, #112	; 0x70
 8000596:	4845      	ldr	r0, [pc, #276]	; (80006ac <TMCsetup+0x334>)
 8000598:	f004 fb2d 	bl	8004bf6 <tmc2209_readInt>
 800059c:	4603      	mov	r3, r0
 800059e:	141b      	asrs	r3, r3, #16
 80005a0:	f003 0303 	and.w	r3, r3, #3
 80005a4:	607b      	str	r3, [r7, #4]
	printf("PWM_FREQ : %ld\r\n", value);
 80005a6:	6879      	ldr	r1, [r7, #4]
 80005a8:	4847      	ldr	r0, [pc, #284]	; (80006c8 <TMCsetup+0x350>)
 80005aa:	f004 fcf1 	bl	8004f90 <iprintf>
	value=1;
 80005ae:	2301      	movs	r3, #1
 80005b0:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_FREQ_MASK, TMC2209_PWM_FREQ_SHIFT, value);
 80005b2:	2170      	movs	r1, #112	; 0x70
 80005b4:	483d      	ldr	r0, [pc, #244]	; (80006ac <TMCsetup+0x334>)
 80005b6:	f004 fb1e 	bl	8004bf6 <tmc2209_readInt>
 80005ba:	4603      	mov	r3, r0
 80005bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	041b      	lsls	r3, r3, #16
 80005c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80005c8:	4313      	orrs	r3, r2
 80005ca:	461a      	mov	r2, r3
 80005cc:	2170      	movs	r1, #112	; 0x70
 80005ce:	4837      	ldr	r0, [pc, #220]	; (80006ac <TMCsetup+0x334>)
 80005d0:	f004 fac1 	bl	8004b56 <tmc2209_writeInt>
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_FREQ_MASK, TMC2209_PWM_FREQ_SHIFT);
 80005d4:	2170      	movs	r1, #112	; 0x70
 80005d6:	4835      	ldr	r0, [pc, #212]	; (80006ac <TMCsetup+0x334>)
 80005d8:	f004 fb0d 	bl	8004bf6 <tmc2209_readInt>
 80005dc:	4603      	mov	r3, r0
 80005de:	141b      	asrs	r3, r3, #16
 80005e0:	f003 0303 	and.w	r3, r3, #3
 80005e4:	607b      	str	r3, [r7, #4]
	printf("PWM_FREQ : %ld\r\n", value);
 80005e6:	6879      	ldr	r1, [r7, #4]
 80005e8:	4837      	ldr	r0, [pc, #220]	; (80006c8 <TMCsetup+0x350>)
 80005ea:	f004 fcd1 	bl	8004f90 <iprintf>

	value=0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209,TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT);
 80005f2:	2142      	movs	r1, #66	; 0x42
 80005f4:	482d      	ldr	r0, [pc, #180]	; (80006ac <TMCsetup+0x334>)
 80005f6:	f004 fafe 	bl	8004bf6 <tmc2209_readInt>
 80005fa:	4603      	mov	r3, r0
 80005fc:	13db      	asrs	r3, r3, #15
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	607b      	str	r3, [r7, #4]
	printf("SEIMIN : %ld\r\n", value);
 8000604:	6879      	ldr	r1, [r7, #4]
 8000606:	4831      	ldr	r0, [pc, #196]	; (80006cc <TMCsetup+0x354>)
 8000608:	f004 fcc2 	bl	8004f90 <iprintf>

	value=0;
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_DRVSTATUS, TMC2209_CS_ACTUAL_MASK, TMC2209_CS_ACTUAL_SHIFT);
 8000610:	216f      	movs	r1, #111	; 0x6f
 8000612:	4826      	ldr	r0, [pc, #152]	; (80006ac <TMCsetup+0x334>)
 8000614:	f004 faef 	bl	8004bf6 <tmc2209_readInt>
 8000618:	4603      	mov	r3, r0
 800061a:	141b      	asrs	r3, r3, #16
 800061c:	f003 031f 	and.w	r3, r3, #31
 8000620:	607b      	str	r3, [r7, #4]
	printf("DRVSTATUS : %ld\r\n", value);
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	482a      	ldr	r0, [pc, #168]	; (80006d0 <TMCsetup+0x358>)
 8000626:	f004 fcb3 	bl	8004f90 <iprintf>

	value=0;
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK,TMC2209_MSTEP_REG_SELECT_SHIFT);	//uartでのmicrostepの有効化
 800062e:	2100      	movs	r1, #0
 8000630:	481e      	ldr	r0, [pc, #120]	; (80006ac <TMCsetup+0x334>)
 8000632:	f004 fae0 	bl	8004bf6 <tmc2209_readInt>
 8000636:	4603      	mov	r3, r0
 8000638:	11db      	asrs	r3, r3, #7
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	607b      	str	r3, [r7, #4]
	printf("mstep_before : %ld\r\n", value);
 8000640:	6879      	ldr	r1, [r7, #4]
 8000642:	4824      	ldr	r0, [pc, #144]	; (80006d4 <TMCsetup+0x35c>)
 8000644:	f004 fca4 	bl	8004f90 <iprintf>
	value = 1;
 8000648:	2301      	movs	r3, #1
 800064a:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT,value);
 800064c:	2100      	movs	r1, #0
 800064e:	4817      	ldr	r0, [pc, #92]	; (80006ac <TMCsetup+0x334>)
 8000650:	f004 fad1 	bl	8004bf6 <tmc2209_readInt>
 8000654:	4603      	mov	r3, r0
 8000656:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	01db      	lsls	r3, r3, #7
 800065e:	b2db      	uxtb	r3, r3
 8000660:	4313      	orrs	r3, r2
 8000662:	461a      	mov	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	4811      	ldr	r0, [pc, #68]	; (80006ac <TMCsetup+0x334>)
 8000668:	f004 fa75 	bl	8004b56 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800066c:	f000 fe84 	bl	8001378 <HAL_GetTick>
 8000670:	4603      	mov	r3, r0
 8000672:	4619      	mov	r1, r3
 8000674:	480d      	ldr	r0, [pc, #52]	; (80006ac <TMCsetup+0x334>)
 8000676:	f004 fbf4 	bl	8004e62 <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT);
 800067a:	2100      	movs	r1, #0
 800067c:	480b      	ldr	r0, [pc, #44]	; (80006ac <TMCsetup+0x334>)
 800067e:	f004 faba 	bl	8004bf6 <tmc2209_readInt>
 8000682:	4603      	mov	r3, r0
 8000684:	11db      	asrs	r3, r3, #7
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	607b      	str	r3, [r7, #4]
	printf("mstep_after : %ld\r\n", value);
 800068c:	6879      	ldr	r1, [r7, #4]
 800068e:	4812      	ldr	r0, [pc, #72]	; (80006d8 <TMCsetup+0x360>)
 8000690:	f004 fc7e 	bl	8004f90 <iprintf>

	value=0;
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);	//保持トルクの設定
 8000698:	216c      	movs	r1, #108	; 0x6c
 800069a:	4804      	ldr	r0, [pc, #16]	; (80006ac <TMCsetup+0x334>)
 800069c:	f004 faab 	bl	8004bf6 <tmc2209_readInt>
 80006a0:	4603      	mov	r3, r0
 80006a2:	f003 030f 	and.w	r3, r3, #15
 80006a6:	607b      	str	r3, [r7, #4]
	printf("toff_before : %ld\r\n", value);
 80006a8:	6879      	ldr	r1, [r7, #4]
 80006aa:	e017      	b.n	80006dc <TMCsetup+0x364>
 80006ac:	20000194 	.word	0x20000194
 80006b0:	08006168 	.word	0x08006168
 80006b4:	08006174 	.word	0x08006174
 80006b8:	08006184 	.word	0x08006184
 80006bc:	08006198 	.word	0x08006198
 80006c0:	080061ac 	.word	0x080061ac
 80006c4:	080061c0 	.word	0x080061c0
 80006c8:	080061d0 	.word	0x080061d0
 80006cc:	080061e4 	.word	0x080061e4
 80006d0:	080061f4 	.word	0x080061f4
 80006d4:	08006208 	.word	0x08006208
 80006d8:	08006220 	.word	0x08006220
 80006dc:	48c8      	ldr	r0, [pc, #800]	; (8000a00 <TMCsetup+0x688>)
 80006de:	f004 fc57 	bl	8004f90 <iprintf>
	value = 3;
 80006e2:	2303      	movs	r3, #3
 80006e4:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT,value);
 80006e6:	216c      	movs	r1, #108	; 0x6c
 80006e8:	48c6      	ldr	r0, [pc, #792]	; (8000a04 <TMCsetup+0x68c>)
 80006ea:	f004 fa84 	bl	8004bf6 <tmc2209_readInt>
 80006ee:	4603      	mov	r3, r0
 80006f0:	f023 020f 	bic.w	r2, r3, #15
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f003 030f 	and.w	r3, r3, #15
 80006fa:	4313      	orrs	r3, r2
 80006fc:	461a      	mov	r2, r3
 80006fe:	216c      	movs	r1, #108	; 0x6c
 8000700:	48c0      	ldr	r0, [pc, #768]	; (8000a04 <TMCsetup+0x68c>)
 8000702:	f004 fa28 	bl	8004b56 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000706:	f000 fe37 	bl	8001378 <HAL_GetTick>
 800070a:	4603      	mov	r3, r0
 800070c:	4619      	mov	r1, r3
 800070e:	48bd      	ldr	r0, [pc, #756]	; (8000a04 <TMCsetup+0x68c>)
 8000710:	f004 fba7 	bl	8004e62 <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 8000714:	216c      	movs	r1, #108	; 0x6c
 8000716:	48bb      	ldr	r0, [pc, #748]	; (8000a04 <TMCsetup+0x68c>)
 8000718:	f004 fa6d 	bl	8004bf6 <tmc2209_readInt>
 800071c:	4603      	mov	r3, r0
 800071e:	f003 030f 	and.w	r3, r3, #15
 8000722:	607b      	str	r3, [r7, #4]
	printf("toff_after : %ld\r\n", value);
 8000724:	6879      	ldr	r1, [r7, #4]
 8000726:	48b8      	ldr	r0, [pc, #736]	; (8000a08 <TMCsetup+0x690>)
 8000728:	f004 fc32 	bl	8004f90 <iprintf>

	value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);	//microstepの設定
 800072c:	216c      	movs	r1, #108	; 0x6c
 800072e:	48b5      	ldr	r0, [pc, #724]	; (8000a04 <TMCsetup+0x68c>)
 8000730:	f004 fa61 	bl	8004bf6 <tmc2209_readInt>
 8000734:	4603      	mov	r3, r0
 8000736:	161b      	asrs	r3, r3, #24
 8000738:	f003 030f 	and.w	r3, r3, #15
 800073c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000740:	fa42 f303 	asr.w	r3, r2, r3
 8000744:	607b      	str	r3, [r7, #4]
	printf("microstep_before : %ld\r\n", value);
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	48b0      	ldr	r0, [pc, #704]	; (8000a0c <TMCsetup+0x694>)
 800074a:	f004 fc21 	bl	8004f90 <iprintf>
	value = 4;
 800074e:	2304      	movs	r3, #4
 8000750:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT,value);
 8000752:	216c      	movs	r1, #108	; 0x6c
 8000754:	48ab      	ldr	r0, [pc, #684]	; (8000a04 <TMCsetup+0x68c>)
 8000756:	f004 fa4e 	bl	8004bf6 <tmc2209_readInt>
 800075a:	4603      	mov	r3, r0
 800075c:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	061b      	lsls	r3, r3, #24
 8000764:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000768:	4313      	orrs	r3, r2
 800076a:	461a      	mov	r2, r3
 800076c:	216c      	movs	r1, #108	; 0x6c
 800076e:	48a5      	ldr	r0, [pc, #660]	; (8000a04 <TMCsetup+0x68c>)
 8000770:	f004 f9f1 	bl	8004b56 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000774:	f000 fe00 	bl	8001378 <HAL_GetTick>
 8000778:	4603      	mov	r3, r0
 800077a:	4619      	mov	r1, r3
 800077c:	48a1      	ldr	r0, [pc, #644]	; (8000a04 <TMCsetup+0x68c>)
 800077e:	f004 fb70 	bl	8004e62 <tmc2209_periodicJob>
	value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);
 8000782:	216c      	movs	r1, #108	; 0x6c
 8000784:	489f      	ldr	r0, [pc, #636]	; (8000a04 <TMCsetup+0x68c>)
 8000786:	f004 fa36 	bl	8004bf6 <tmc2209_readInt>
 800078a:	4603      	mov	r3, r0
 800078c:	161b      	asrs	r3, r3, #24
 800078e:	f003 030f 	and.w	r3, r3, #15
 8000792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000796:	fa42 f303 	asr.w	r3, r2, r3
 800079a:	607b      	str	r3, [r7, #4]
	printf("microstep_after : %ld\r\n", value);
 800079c:	6879      	ldr	r1, [r7, #4]
 800079e:	489c      	ldr	r0, [pc, #624]	; (8000a10 <TMCsetup+0x698>)
 80007a0:	f004 fbf6 	bl	8004f90 <iprintf>

	value=4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT, value);
 80007a8:	2110      	movs	r1, #16
 80007aa:	4896      	ldr	r0, [pc, #600]	; (8000a04 <TMCsetup+0x68c>)
 80007ac:	f004 fa23 	bl	8004bf6 <tmc2209_readInt>
 80007b0:	4603      	mov	r3, r0
 80007b2:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	041b      	lsls	r3, r3, #16
 80007ba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80007be:	4313      	orrs	r3, r2
 80007c0:	461a      	mov	r2, r3
 80007c2:	2110      	movs	r1, #16
 80007c4:	488f      	ldr	r0, [pc, #572]	; (8000a04 <TMCsetup+0x68c>)
 80007c6:	f004 f9c6 	bl	8004b56 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80007ca:	f000 fdd5 	bl	8001378 <HAL_GetTick>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4619      	mov	r1, r3
 80007d2:	488c      	ldr	r0, [pc, #560]	; (8000a04 <TMCsetup+0x68c>)
 80007d4:	f004 fb45 	bl	8004e62 <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT);
 80007d8:	2110      	movs	r1, #16
 80007da:	488a      	ldr	r0, [pc, #552]	; (8000a04 <TMCsetup+0x68c>)
 80007dc:	f004 fa0b 	bl	8004bf6 <tmc2209_readInt>
 80007e0:	4603      	mov	r3, r0
 80007e2:	141b      	asrs	r3, r3, #16
 80007e4:	f003 030f 	and.w	r3, r3, #15
 80007e8:	607b      	str	r3, [r7, #4]
	printf("IHOLDDELAY: %ld\r\n", value);
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	4889      	ldr	r0, [pc, #548]	; (8000a14 <TMCsetup+0x69c>)
 80007ee:	f004 fbcf 	bl	8004f90 <iprintf>

	value=50;											//SG_RESULTと比較して、
 80007f2:	2332      	movs	r3, #50	; 0x32
 80007f4:	607b      	str	r3, [r7, #4]
	tmc2209_writeInt(&TMC2209, TMC2209_SGTHRS, value);
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	2140      	movs	r1, #64	; 0x40
 80007fa:	4882      	ldr	r0, [pc, #520]	; (8000a04 <TMCsetup+0x68c>)
 80007fc:	f004 f9ab 	bl	8004b56 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000800:	f000 fdba 	bl	8001378 <HAL_GetTick>
 8000804:	4603      	mov	r3, r0
 8000806:	4619      	mov	r1, r3
 8000808:	487e      	ldr	r0, [pc, #504]	; (8000a04 <TMCsetup+0x68c>)
 800080a:	f004 fb2a 	bl	8004e62 <tmc2209_periodicJob>
	value = tmc2209_readInt(&TMC2209, TMC2209_SGTHRS);
 800080e:	2140      	movs	r1, #64	; 0x40
 8000810:	487c      	ldr	r0, [pc, #496]	; (8000a04 <TMCsetup+0x68c>)
 8000812:	f004 f9f0 	bl	8004bf6 <tmc2209_readInt>
 8000816:	6078      	str	r0, [r7, #4]
	printf("SGTHRS: %ld\r\n", value);
 8000818:	6879      	ldr	r1, [r7, #4]
 800081a:	487f      	ldr	r0, [pc, #508]	; (8000a18 <TMCsetup+0x6a0>)
 800081c:	f004 fbb8 	bl	8004f90 <iprintf>

	value = 100;
 8000820:	2364      	movs	r3, #100	; 0x64
 8000822:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_GRAD_MASK, TMC2209_PWM_GRAD_SHIFT, value);
 8000824:	2170      	movs	r1, #112	; 0x70
 8000826:	4877      	ldr	r0, [pc, #476]	; (8000a04 <TMCsetup+0x68c>)
 8000828:	f004 f9e5 	bl	8004bf6 <tmc2209_readInt>
 800082c:	4603      	mov	r3, r0
 800082e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	021b      	lsls	r3, r3, #8
 8000836:	b29b      	uxth	r3, r3
 8000838:	4313      	orrs	r3, r2
 800083a:	461a      	mov	r2, r3
 800083c:	2170      	movs	r1, #112	; 0x70
 800083e:	4871      	ldr	r0, [pc, #452]	; (8000a04 <TMCsetup+0x68c>)
 8000840:	f004 f989 	bl	8004b56 <tmc2209_writeInt>
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_GRAD_MASK, TMC2209_PWM_GRAD_SHIFT);
 8000844:	2170      	movs	r1, #112	; 0x70
 8000846:	486f      	ldr	r0, [pc, #444]	; (8000a04 <TMCsetup+0x68c>)
 8000848:	f004 f9d5 	bl	8004bf6 <tmc2209_readInt>
 800084c:	4603      	mov	r3, r0
 800084e:	121b      	asrs	r3, r3, #8
 8000850:	b2db      	uxtb	r3, r3
 8000852:	607b      	str	r3, [r7, #4]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000854:	f000 fd90 	bl	8001378 <HAL_GetTick>
 8000858:	4603      	mov	r3, r0
 800085a:	4619      	mov	r1, r3
 800085c:	4869      	ldr	r0, [pc, #420]	; (8000a04 <TMCsetup+0x68c>)
 800085e:	f004 fb00 	bl	8004e62 <tmc2209_periodicJob>
	printf("PWM_GRAD: %ld\r\n", value);
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	486d      	ldr	r0, [pc, #436]	; (8000a1c <TMCsetup+0x6a4>)
 8000866:	f004 fb93 	bl	8004f90 <iprintf>


	value=5;
 800086a:	2305      	movs	r3, #5
 800086c:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEMIN_MASK, TMC2209_SEMIN_SHIFT, value);
 800086e:	2142      	movs	r1, #66	; 0x42
 8000870:	4864      	ldr	r0, [pc, #400]	; (8000a04 <TMCsetup+0x68c>)
 8000872:	f004 f9c0 	bl	8004bf6 <tmc2209_readInt>
 8000876:	4603      	mov	r3, r0
 8000878:	f023 020f 	bic.w	r2, r3, #15
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	4313      	orrs	r3, r2
 8000884:	461a      	mov	r2, r3
 8000886:	2142      	movs	r1, #66	; 0x42
 8000888:	485e      	ldr	r0, [pc, #376]	; (8000a04 <TMCsetup+0x68c>)
 800088a:	f004 f964 	bl	8004b56 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800088e:	f000 fd73 	bl	8001378 <HAL_GetTick>
 8000892:	4603      	mov	r3, r0
 8000894:	4619      	mov	r1, r3
 8000896:	485b      	ldr	r0, [pc, #364]	; (8000a04 <TMCsetup+0x68c>)
 8000898:	f004 fae3 	bl	8004e62 <tmc2209_periodicJob>
	printf("SEMIN: %ld\r\n", value);
 800089c:	6879      	ldr	r1, [r7, #4]
 800089e:	4860      	ldr	r0, [pc, #384]	; (8000a20 <TMCsetup+0x6a8>)
 80008a0:	f004 fb76 	bl	8004f90 <iprintf>

	value = 2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEMAX_MASK, TMC2209_SEMAX_SHIFT, value);
 80008a8:	2142      	movs	r1, #66	; 0x42
 80008aa:	4856      	ldr	r0, [pc, #344]	; (8000a04 <TMCsetup+0x68c>)
 80008ac:	f004 f9a3 	bl	8004bf6 <tmc2209_readInt>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	021b      	lsls	r3, r3, #8
 80008ba:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80008be:	4313      	orrs	r3, r2
 80008c0:	461a      	mov	r2, r3
 80008c2:	2142      	movs	r1, #66	; 0x42
 80008c4:	484f      	ldr	r0, [pc, #316]	; (8000a04 <TMCsetup+0x68c>)
 80008c6:	f004 f946 	bl	8004b56 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80008ca:	f000 fd55 	bl	8001378 <HAL_GetTick>
 80008ce:	4603      	mov	r3, r0
 80008d0:	4619      	mov	r1, r3
 80008d2:	484c      	ldr	r0, [pc, #304]	; (8000a04 <TMCsetup+0x68c>)
 80008d4:	f004 fac5 	bl	8004e62 <tmc2209_periodicJob>
	printf("SEMAX: %ld\r\n", value);
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	4852      	ldr	r0, [pc, #328]	; (8000a24 <TMCsetup+0x6ac>)
 80008dc:	f004 fb58 	bl	8004f90 <iprintf>

	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TBL_MASK, TMC2209_TBL_SHIFT);
 80008e0:	216c      	movs	r1, #108	; 0x6c
 80008e2:	4848      	ldr	r0, [pc, #288]	; (8000a04 <TMCsetup+0x68c>)
 80008e4:	f004 f987 	bl	8004bf6 <tmc2209_readInt>
 80008e8:	4603      	mov	r3, r0
 80008ea:	13db      	asrs	r3, r3, #15
 80008ec:	f003 0303 	and.w	r3, r3, #3
 80008f0:	607b      	str	r3, [r7, #4]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80008f2:	f000 fd41 	bl	8001378 <HAL_GetTick>
 80008f6:	4603      	mov	r3, r0
 80008f8:	4619      	mov	r1, r3
 80008fa:	4842      	ldr	r0, [pc, #264]	; (8000a04 <TMCsetup+0x68c>)
 80008fc:	f004 fab1 	bl	8004e62 <tmc2209_periodicJob>
	value = 1;
 8000900:	2301      	movs	r3, #1
 8000902:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TBL_MASK, TMC2209_TBL_SHIFT, value);
 8000904:	216c      	movs	r1, #108	; 0x6c
 8000906:	483f      	ldr	r0, [pc, #252]	; (8000a04 <TMCsetup+0x68c>)
 8000908:	f004 f975 	bl	8004bf6 <tmc2209_readInt>
 800090c:	4603      	mov	r3, r0
 800090e:	f423 32c0 	bic.w	r2, r3, #98304	; 0x18000
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	03db      	lsls	r3, r3, #15
 8000916:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800091a:	4313      	orrs	r3, r2
 800091c:	461a      	mov	r2, r3
 800091e:	216c      	movs	r1, #108	; 0x6c
 8000920:	4838      	ldr	r0, [pc, #224]	; (8000a04 <TMCsetup+0x68c>)
 8000922:	f004 f918 	bl	8004b56 <tmc2209_writeInt>
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TBL_MASK, TMC2209_TBL_SHIFT);
 8000926:	216c      	movs	r1, #108	; 0x6c
 8000928:	4836      	ldr	r0, [pc, #216]	; (8000a04 <TMCsetup+0x68c>)
 800092a:	f004 f964 	bl	8004bf6 <tmc2209_readInt>
 800092e:	4603      	mov	r3, r0
 8000930:	13db      	asrs	r3, r3, #15
 8000932:	f003 0303 	and.w	r3, r3, #3
 8000936:	607b      	str	r3, [r7, #4]
	printf("TBL: %ld\r\n", value);
 8000938:	6879      	ldr	r1, [r7, #4]
 800093a:	483b      	ldr	r0, [pc, #236]	; (8000a28 <TMCsetup+0x6b0>)
 800093c:	f004 fb28 	bl	8004f90 <iprintf>

	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_GRAD_MASK, TMC2209_PWM_GRAD_SHIFT);
 8000940:	2170      	movs	r1, #112	; 0x70
 8000942:	4830      	ldr	r0, [pc, #192]	; (8000a04 <TMCsetup+0x68c>)
 8000944:	f004 f957 	bl	8004bf6 <tmc2209_readInt>
 8000948:	4603      	mov	r3, r0
 800094a:	121b      	asrs	r3, r3, #8
 800094c:	b2db      	uxtb	r3, r3
 800094e:	607b      	str	r3, [r7, #4]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000950:	f000 fd12 	bl	8001378 <HAL_GetTick>
 8000954:	4603      	mov	r3, r0
 8000956:	4619      	mov	r1, r3
 8000958:	482a      	ldr	r0, [pc, #168]	; (8000a04 <TMCsetup+0x68c>)
 800095a:	f004 fa82 	bl	8004e62 <tmc2209_periodicJob>
	printf("PWM_GRAD: %ld\r\n", value);
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	482e      	ldr	r0, [pc, #184]	; (8000a1c <TMCsetup+0x6a4>)
 8000962:	f004 fb15 	bl	8004f90 <iprintf>

	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_AUTOSCALE_MASK, TMC2209_PWM_AUTOSCALE_SHIFT);
 8000966:	2170      	movs	r1, #112	; 0x70
 8000968:	4826      	ldr	r0, [pc, #152]	; (8000a04 <TMCsetup+0x68c>)
 800096a:	f004 f944 	bl	8004bf6 <tmc2209_readInt>
 800096e:	4603      	mov	r3, r0
 8000970:	149b      	asrs	r3, r3, #18
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	607b      	str	r3, [r7, #4]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000978:	f000 fcfe 	bl	8001378 <HAL_GetTick>
 800097c:	4603      	mov	r3, r0
 800097e:	4619      	mov	r1, r3
 8000980:	4820      	ldr	r0, [pc, #128]	; (8000a04 <TMCsetup+0x68c>)
 8000982:	f004 fa6e 	bl	8004e62 <tmc2209_periodicJob>
	printf("autoscale: %ld\r\n", value);
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	4828      	ldr	r0, [pc, #160]	; (8000a2c <TMCsetup+0x6b4>)
 800098a:	f004 fb01 	bl	8004f90 <iprintf>

	value = tmc2209_readInt(&TMC2209,TMC2209_PWM_AUTO);
 800098e:	2172      	movs	r1, #114	; 0x72
 8000990:	481c      	ldr	r0, [pc, #112]	; (8000a04 <TMCsetup+0x68c>)
 8000992:	f004 f930 	bl	8004bf6 <tmc2209_readInt>
 8000996:	6078      	str	r0, [r7, #4]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000998:	f000 fcee 	bl	8001378 <HAL_GetTick>
 800099c:	4603      	mov	r3, r0
 800099e:	4619      	mov	r1, r3
 80009a0:	4818      	ldr	r0, [pc, #96]	; (8000a04 <TMCsetup+0x68c>)
 80009a2:	f004 fa5e 	bl	8004e62 <tmc2209_periodicJob>
	printf("PWMAuto: %ld\r\n", value);
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	4821      	ldr	r0, [pc, #132]	; (8000a30 <TMCsetup+0x6b8>)
 80009aa:	f004 faf1 	bl	8004f90 <iprintf>

	value = tmc2209_readInt(&TMC2209,TMC2209_PWMSCALE);
 80009ae:	2171      	movs	r1, #113	; 0x71
 80009b0:	4814      	ldr	r0, [pc, #80]	; (8000a04 <TMCsetup+0x68c>)
 80009b2:	f004 f920 	bl	8004bf6 <tmc2209_readInt>
 80009b6:	6078      	str	r0, [r7, #4]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80009b8:	f000 fcde 	bl	8001378 <HAL_GetTick>
 80009bc:	4603      	mov	r3, r0
 80009be:	4619      	mov	r1, r3
 80009c0:	4810      	ldr	r0, [pc, #64]	; (8000a04 <TMCsetup+0x68c>)
 80009c2:	f004 fa4e 	bl	8004e62 <tmc2209_periodicJob>
	printf("PWMSCALE: %ld\r\n", value);
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	481a      	ldr	r0, [pc, #104]	; (8000a34 <TMCsetup+0x6bc>)
 80009ca:	f004 fae1 	bl	8004f90 <iprintf>

	value = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, 0x07, TMC2209_FCLKTRIM_MASK, TMC2209_FCLKTRIM_SHIFT);
 80009d2:	2107      	movs	r1, #7
 80009d4:	480b      	ldr	r0, [pc, #44]	; (8000a04 <TMCsetup+0x68c>)
 80009d6:	f004 f90e 	bl	8004bf6 <tmc2209_readInt>
 80009da:	4603      	mov	r3, r0
 80009dc:	f003 031f 	and.w	r3, r3, #31
 80009e0:	607b      	str	r3, [r7, #4]

	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80009e2:	f000 fcc9 	bl	8001378 <HAL_GetTick>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4619      	mov	r1, r3
 80009ea:	4806      	ldr	r0, [pc, #24]	; (8000a04 <TMCsetup+0x68c>)
 80009ec:	f004 fa39 	bl	8004e62 <tmc2209_periodicJob>
	printf("frequency: %ld\r\n", value);
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	4811      	ldr	r0, [pc, #68]	; (8000a38 <TMCsetup+0x6c0>)
 80009f4:	f004 facc 	bl	8004f90 <iprintf>

//	value = 0;
//	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_INDEX_OTPW_MASK, TMC2209_INDEX_OTPW_SHIFT,value);

}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	08006234 	.word	0x08006234
 8000a04:	20000194 	.word	0x20000194
 8000a08:	08006248 	.word	0x08006248
 8000a0c:	0800625c 	.word	0x0800625c
 8000a10:	08006278 	.word	0x08006278
 8000a14:	08006290 	.word	0x08006290
 8000a18:	080062a4 	.word	0x080062a4
 8000a1c:	080062b4 	.word	0x080062b4
 8000a20:	080062c4 	.word	0x080062c4
 8000a24:	080062d4 	.word	0x080062d4
 8000a28:	080062e4 	.word	0x080062e4
 8000a2c:	080062f0 	.word	0x080062f0
 8000a30:	08006304 	.word	0x08006304
 8000a34:	08006314 	.word	0x08006314
 8000a38:	08006324 	.word	0x08006324

08000a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a3c:	b5b0      	push	{r4, r5, r7, lr}
 8000a3e:	b090      	sub	sp, #64	; 0x40
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8000a42:	4ba4      	ldr	r3, [pc, #656]	; (8000cd4 <main+0x298>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f004 fb2e 	bl	80050ac <setbuf>
	//uint8_t buffer[256];
	//char rxbuf[1];
	char start[] ="1:front,2:back\r\n";
 8000a50:	4ba1      	ldr	r3, [pc, #644]	; (8000cd8 <main+0x29c>)
 8000a52:	f107 0418 	add.w	r4, r7, #24
 8000a56:	461d      	mov	r5, r3
 8000a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a5c:	682b      	ldr	r3, [r5, #0]
 8000a5e:	7023      	strb	r3, [r4, #0]
//	char front[] ="front turn\r\n";
//	char back[] ="back turn\r\n";
	char nonans[] ="Not Understand \r\n";
 8000a60:	4b9e      	ldr	r3, [pc, #632]	; (8000cdc <main+0x2a0>)
 8000a62:	1d3c      	adds	r4, r7, #4
 8000a64:	461d      	mov	r5, r3
 8000a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6a:	682b      	ldr	r3, [r5, #0]
 8000a6c:	8023      	strh	r3, [r4, #0]
	char rxbuf[1];
	int value=0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
	int setvalue=0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	637b      	str	r3, [r7, #52]	; 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a76:	f000 fc25 	bl	80012c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7a:	f000 f93d 	bl	8000cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7e:	f000 f9f3 	bl	8000e68 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a82:	f000 f9c1 	bl	8000e08 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000a86:	f000 f98f 	bl	8000da8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //int getserial=0;
  TMC2209_INIT();
 8000a8a:	f7ff fc3d 	bl	8000308 <TMC2209_INIT>
//  TMCsetup();
  printf("Hello\r\n");
 8000a8e:	4894      	ldr	r0, [pc, #592]	; (8000ce0 <main+0x2a4>)
 8000a90:	f004 fb04 	bl	800509c <puts>
  HAL_UART_Transmit(&huart2,(uint8_t *)start,sizeof(start),3000);
 8000a94:	f107 0118 	add.w	r1, r7, #24
 8000a98:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a9c:	2211      	movs	r2, #17
 8000a9e:	4891      	ldr	r0, [pc, #580]	; (8000ce4 <main+0x2a8>)
 8000aa0:	f002 fc0e 	bl	80032c0 <HAL_UART_Transmit>
  TMCsetup();
 8000aa4:	f7ff fc68 	bl	8000378 <TMCsetup>
  //HAL_TIM_Base_Start_IT(&htim2);
//  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);

  rxbuf[0]=0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	703b      	strb	r3, [r7, #0]
  uartflag1=0;
 8000aac:	4b8e      	ldr	r3, [pc, #568]	; (8000ce8 <main+0x2ac>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
  uint8_t stall_value=0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    /* USER CODE BEGIN 3 */
//	  currentcheck();
	  //example read register value
	  //int32_t value = 0;
	  HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);
 8000ab8:	463b      	mov	r3, r7
 8000aba:	2201      	movs	r2, #1
 8000abc:	4619      	mov	r1, r3
 8000abe:	4889      	ldr	r0, [pc, #548]	; (8000ce4 <main+0x2a8>)
 8000ac0:	f002 fd63 	bl	800358a <HAL_UART_Receive_IT>
//	  while(uartflag1==0){
//		  ;
//	  }
	  HAL_UART_Transmit(&huart2,(uint8_t *)rxbuf,sizeof(rxbuf),100);
 8000ac4:	4639      	mov	r1, r7
 8000ac6:	2364      	movs	r3, #100	; 0x64
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4886      	ldr	r0, [pc, #536]	; (8000ce4 <main+0x2a8>)
 8000acc:	f002 fbf8 	bl	80032c0 <HAL_UART_Transmit>
	  stall_value=0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	  stall_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IOIN, TMC2209_DIAG_MASK, TMC2209_DIAG_SHIFT);
 8000ad6:	2106      	movs	r1, #6
 8000ad8:	4884      	ldr	r0, [pc, #528]	; (8000cec <main+0x2b0>)
 8000ada:	f004 f88c 	bl	8004bf6 <tmc2209_readInt>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	111b      	asrs	r3, r3, #4
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
//	  index_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_MSCNT, TMC2209_MSCNT_MASK, TMC2209_MSCNT_SHIFT);
//	  index_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_MSCURACT, TMC2209_CUR_A_MASK, TMC2209_CUR_A_SHIFT);

//	  index_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_INDEX_STEP_MASK, TMC2209_INDEX_STEP_SHIFT);
//	  index_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_INDEX_OTPW_MASK, TMC2209_INDEX_OTPW_SHIFT);
	  HAL_Delay(10);
 8000aec:	200a      	movs	r0, #10
 8000aee:	f000 fc4f 	bl	8001390 <HAL_Delay>
//	  printf("stall: %d \r\n",stall_value);
//	  printf("index: %d \r\n",index_value);

	  if(stall_value==1){
 8000af2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d11c      	bne.n	8000b34 <main+0xf8>
		  value = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	63bb      	str	r3, [r7, #56]	; 0x38
		  TMC2209_FIELD_UPDATE(&TMC2209, 0x22, TMC2209_VACTUAL_MASK, TMC2209_VACTUAL_SHIFT,value);
 8000afe:	2122      	movs	r1, #34	; 0x22
 8000b00:	487a      	ldr	r0, [pc, #488]	; (8000cec <main+0x2b0>)
 8000b02:	f004 f878 	bl	8004bf6 <tmc2209_readInt>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b0e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000b12:	4313      	orrs	r3, r2
 8000b14:	461a      	mov	r2, r3
 8000b16:	2122      	movs	r1, #34	; 0x22
 8000b18:	4874      	ldr	r0, [pc, #464]	; (8000cec <main+0x2b0>)
 8000b1a:	f004 f81c 	bl	8004b56 <tmc2209_writeInt>
		  printf("stall:\r\n");
 8000b1e:	4874      	ldr	r0, [pc, #464]	; (8000cf0 <main+0x2b4>)
 8000b20:	f004 fabc 	bl	800509c <puts>
		  stall_value=0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  while(uartflag1!=1){
 8000b2a:	bf00      	nop
 8000b2c:	4b6e      	ldr	r3, [pc, #440]	; (8000ce8 <main+0x2ac>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d1fb      	bne.n	8000b2c <main+0xf0>

		  }
	  }

	  if(rxbuf[0]!=0 && uartflag1==1){
 8000b34:	783b      	ldrb	r3, [r7, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f000 80b0 	beq.w	8000c9c <main+0x260>
 8000b3c:	4b6a      	ldr	r3, [pc, #424]	; (8000ce8 <main+0x2ac>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	f040 80ab 	bne.w	8000c9c <main+0x260>
		  switch(rxbuf[0]){
 8000b46:	783b      	ldrb	r3, [r7, #0]
 8000b48:	2b73      	cmp	r3, #115	; 0x73
 8000b4a:	d016      	beq.n	8000b7a <main+0x13e>
 8000b4c:	2b73      	cmp	r3, #115	; 0x73
 8000b4e:	f300 8098 	bgt.w	8000c82 <main+0x246>
 8000b52:	2b64      	cmp	r3, #100	; 0x64
 8000b54:	d02c      	beq.n	8000bb0 <main+0x174>
 8000b56:	2b64      	cmp	r3, #100	; 0x64
 8000b58:	f300 8093 	bgt.w	8000c82 <main+0x246>
 8000b5c:	2b61      	cmp	r3, #97	; 0x61
 8000b5e:	d011      	beq.n	8000b84 <main+0x148>
 8000b60:	2b61      	cmp	r3, #97	; 0x61
 8000b62:	f300 808e 	bgt.w	8000c82 <main+0x246>
 8000b66:	2b33      	cmp	r3, #51	; 0x33
 8000b68:	d075      	beq.n	8000c56 <main+0x21a>
 8000b6a:	2b33      	cmp	r3, #51	; 0x33
 8000b6c:	f300 8089 	bgt.w	8000c82 <main+0x246>
 8000b70:	2b31      	cmp	r3, #49	; 0x31
 8000b72:	d033      	beq.n	8000bdc <main+0x1a0>
 8000b74:	2b32      	cmp	r3, #50	; 0x32
 8000b76:	d059      	beq.n	8000c2c <main+0x1f0>
 8000b78:	e083      	b.n	8000c82 <main+0x246>
		  case's':
			  TMCsetup();
 8000b7a:	f7ff fbfd 	bl	8000378 <TMCsetup>
			  rxbuf[0]=0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	703b      	strb	r3, [r7, #0]
			  break;
 8000b82:	e088      	b.n	8000c96 <main+0x25a>
		  case'a':
			  value = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	63bb      	str	r3, [r7, #56]	; 0x38
			  TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_SHAFT_MASK, TMC2209_SHAFT_SHIFT ,value);
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4858      	ldr	r0, [pc, #352]	; (8000cec <main+0x2b0>)
 8000b8c:	f004 f833 	bl	8004bf6 <tmc2209_readInt>
 8000b90:	4603      	mov	r3, r0
 8000b92:	f023 0208 	bic.w	r2, r3, #8
 8000b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4851      	ldr	r0, [pc, #324]	; (8000cec <main+0x2b0>)
 8000ba6:	f003 ffd6 	bl	8004b56 <tmc2209_writeInt>
			  rxbuf[0]=0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	703b      	strb	r3, [r7, #0]
			  break;
 8000bae:	e072      	b.n	8000c96 <main+0x25a>
		  case'd':
			  value = 1;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	63bb      	str	r3, [r7, #56]	; 0x38
			  TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_SHAFT_MASK, TMC2209_SHAFT_SHIFT ,value);
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	484d      	ldr	r0, [pc, #308]	; (8000cec <main+0x2b0>)
 8000bb8:	f004 f81d 	bl	8004bf6 <tmc2209_readInt>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	f023 0208 	bic.w	r2, r3, #8
 8000bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	f003 0308 	and.w	r3, r3, #8
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	461a      	mov	r2, r3
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4846      	ldr	r0, [pc, #280]	; (8000cec <main+0x2b0>)
 8000bd2:	f003 ffc0 	bl	8004b56 <tmc2209_writeInt>
			  rxbuf[0]=0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	703b      	strb	r3, [r7, #0]
			  break;
 8000bda:	e05c      	b.n	8000c96 <main+0x25a>

		  case'1':
			  setrev = 1000;
 8000bdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
			  setvalue = setrev*setrev;
 8000be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be4:	fb03 f303 	mul.w	r3, r3, r3
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
			  for(int i = 0;i<=10000;i+=100){
 8000bea:	2300      	movs	r3, #0
 8000bec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bee:	e015      	b.n	8000c1c <main+0x1e0>
				  TMC2209_FIELD_UPDATE(&TMC2209, 0x22, TMC2209_VACTUAL_MASK, TMC2209_VACTUAL_SHIFT,i);
 8000bf0:	2122      	movs	r1, #34	; 0x22
 8000bf2:	483e      	ldr	r0, [pc, #248]	; (8000cec <main+0x2b0>)
 8000bf4:	f003 ffff 	bl	8004bf6 <tmc2209_readInt>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000c04:	4313      	orrs	r3, r2
 8000c06:	461a      	mov	r2, r3
 8000c08:	2122      	movs	r1, #34	; 0x22
 8000c0a:	4838      	ldr	r0, [pc, #224]	; (8000cec <main+0x2b0>)
 8000c0c:	f003 ffa3 	bl	8004b56 <tmc2209_writeInt>
				  HAL_Delay(100);
 8000c10:	2064      	movs	r0, #100	; 0x64
 8000c12:	f000 fbbd 	bl	8001390 <HAL_Delay>
			  for(int i = 0;i<=10000;i+=100){
 8000c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c18:	3364      	adds	r3, #100	; 0x64
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c22:	4293      	cmp	r3, r2
 8000c24:	dde4      	ble.n	8000bf0 <main+0x1b4>
//			  for(int i = 0;i<=setrev;i+=10){
//				  motorrev=(10000*((i*i)/setvalue));
//				  TMC2209_FIELD_UPDATE(&TMC2209, 0x22, TMC2209_VACTUAL_MASK, TMC2209_VACTUAL_SHIFT,motorrev);
//				  HAL_Delay(100);
//			  }
			  rxbuf[0]=0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	703b      	strb	r3, [r7, #0]
			  break;
 8000c2a:	e034      	b.n	8000c96 <main+0x25a>

		  case'2':
			  value = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	63bb      	str	r3, [r7, #56]	; 0x38
			  TMC2209_FIELD_UPDATE(&TMC2209, 0x22, TMC2209_VACTUAL_MASK, TMC2209_VACTUAL_SHIFT,value);
 8000c30:	2122      	movs	r1, #34	; 0x22
 8000c32:	482e      	ldr	r0, [pc, #184]	; (8000cec <main+0x2b0>)
 8000c34:	f003 ffdf 	bl	8004bf6 <tmc2209_readInt>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000c44:	4313      	orrs	r3, r2
 8000c46:	461a      	mov	r2, r3
 8000c48:	2122      	movs	r1, #34	; 0x22
 8000c4a:	4828      	ldr	r0, [pc, #160]	; (8000cec <main+0x2b0>)
 8000c4c:	f003 ff83 	bl	8004b56 <tmc2209_writeInt>
			  rxbuf[0]=0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	703b      	strb	r3, [r7, #0]
			  break;
 8000c54:	e01f      	b.n	8000c96 <main+0x25a>

		  case'3':
			  value = 10000;
 8000c56:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c5a:	63bb      	str	r3, [r7, #56]	; 0x38
			  TMC2209_FIELD_UPDATE(&TMC2209, 0x22, TMC2209_VACTUAL_MASK, TMC2209_VACTUAL_SHIFT,value);
 8000c5c:	2122      	movs	r1, #34	; 0x22
 8000c5e:	4823      	ldr	r0, [pc, #140]	; (8000cec <main+0x2b0>)
 8000c60:	f003 ffc9 	bl	8004bf6 <tmc2209_readInt>
 8000c64:	4603      	mov	r3, r0
 8000c66:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000c70:	4313      	orrs	r3, r2
 8000c72:	461a      	mov	r2, r3
 8000c74:	2122      	movs	r1, #34	; 0x22
 8000c76:	481d      	ldr	r0, [pc, #116]	; (8000cec <main+0x2b0>)
 8000c78:	f003 ff6d 	bl	8004b56 <tmc2209_writeInt>
			  rxbuf[0]=0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	703b      	strb	r3, [r7, #0]
			  break;
 8000c80:	e009      	b.n	8000c96 <main+0x25a>

		  default:
			  HAL_UART_Transmit(&huart2,(uint8_t *)nonans, sizeof(nonans),3000);
 8000c82:	1d39      	adds	r1, r7, #4
 8000c84:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000c88:	2212      	movs	r2, #18
 8000c8a:	4816      	ldr	r0, [pc, #88]	; (8000ce4 <main+0x2a8>)
 8000c8c:	f002 fb18 	bl	80032c0 <HAL_UART_Transmit>
			  rxbuf[0]=0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	703b      	strb	r3, [r7, #0]
			  break;
 8000c94:	bf00      	nop

		  }
		  uartflag1=0;
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <main+0x2ac>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
	  }
	  if(end_stop_state==1){
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <main+0x2b8>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	f47f af09 	bne.w	8000ab8 <main+0x7c>
		  value = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	63bb      	str	r3, [r7, #56]	; 0x38
		  TMC2209_FIELD_UPDATE(&TMC2209, 0x22, TMC2209_VACTUAL_MASK, TMC2209_VACTUAL_SHIFT,value);
 8000caa:	2122      	movs	r1, #34	; 0x22
 8000cac:	480f      	ldr	r0, [pc, #60]	; (8000cec <main+0x2b0>)
 8000cae:	f003 ffa2 	bl	8004bf6 <tmc2209_readInt>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	2122      	movs	r1, #34	; 0x22
 8000cc4:	4809      	ldr	r0, [pc, #36]	; (8000cec <main+0x2b0>)
 8000cc6:	f003 ff46 	bl	8004b56 <tmc2209_writeInt>
		  end_stop_state=0;
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <main+0x2b8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);
 8000cd0:	e6f2      	b.n	8000ab8 <main+0x7c>
 8000cd2:	bf00      	nop
 8000cd4:	2000000c 	.word	0x2000000c
 8000cd8:	08006348 	.word	0x08006348
 8000cdc:	0800635c 	.word	0x0800635c
 8000ce0:	08006338 	.word	0x08006338
 8000ce4:	20000110 	.word	0x20000110
 8000ce8:	20000630 	.word	0x20000630
 8000cec:	20000194 	.word	0x20000194
 8000cf0:	08006340 	.word	0x08006340
 8000cf4:	20000631 	.word	0x20000631

08000cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b096      	sub	sp, #88	; 0x58
 8000cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d02:	2228      	movs	r2, #40	; 0x28
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f004 f93a 	bl	8004f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]
 8000d2a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d30:	2301      	movs	r3, #1
 8000d32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d34:	2310      	movs	r3, #16
 8000d36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d40:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d44:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fe7a 	bl	8001a44 <HAL_RCC_OscConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000d56:	f000 f8fb 	bl	8000f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5a:	230f      	movs	r3, #15
 8000d5c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	2102      	movs	r1, #2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 fea2 	bl	8002ac0 <HAL_RCC_ClockConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d82:	f000 f8e5 	bl	8000f50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d86:	2301      	movs	r3, #1
 8000d88:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	4618      	mov	r0, r3
 8000d92:	f002 f8cb 	bl	8002f2c <HAL_RCCEx_PeriphCLKConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000d9c:	f000 f8d8 	bl	8000f50 <Error_Handler>
  }
}
 8000da0:	bf00      	nop
 8000da2:	3758      	adds	r7, #88	; 0x58
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dac:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_USART1_UART_Init+0x54>)
 8000dae:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <MX_USART1_UART_Init+0x58>)
 8000db0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 8000db2:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_USART1_UART_Init+0x54>)
 8000db4:	4a13      	ldr	r2, [pc, #76]	; (8000e04 <MX_USART1_UART_Init+0x5c>)
 8000db6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <MX_USART1_UART_Init+0x54>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_USART1_UART_Init+0x54>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <MX_USART1_UART_Init+0x54>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_USART1_UART_Init+0x54>)
 8000dcc:	220c      	movs	r2, #12
 8000dce:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <MX_USART1_UART_Init+0x54>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_USART1_UART_Init+0x54>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <MX_USART1_UART_Init+0x54>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_USART1_UART_Init+0x54>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000de8:	4804      	ldr	r0, [pc, #16]	; (8000dfc <MX_USART1_UART_Init+0x54>)
 8000dea:	f002 fa13 	bl	8003214 <HAL_HalfDuplex_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8000df4:	f000 f8ac 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	2000008c 	.word	0x2000008c
 8000e00:	40013800 	.word	0x40013800
 8000e04:	0007a120 	.word	0x0007a120

08000e08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <MX_USART2_UART_Init+0x58>)
 8000e0e:	4a15      	ldr	r2, [pc, #84]	; (8000e64 <MX_USART2_UART_Init+0x5c>)
 8000e10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <MX_USART2_UART_Init+0x58>)
 8000e14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_USART2_UART_Init+0x58>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_USART2_UART_Init+0x58>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <MX_USART2_UART_Init+0x58>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_USART2_UART_Init+0x58>)
 8000e2e:	220c      	movs	r2, #12
 8000e30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <MX_USART2_UART_Init+0x58>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_USART2_UART_Init+0x58>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e3e:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <MX_USART2_UART_Init+0x58>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_USART2_UART_Init+0x58>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_USART2_UART_Init+0x58>)
 8000e4c:	f002 f994 	bl	8003178 <HAL_UART_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e56:	f000 f87b 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000110 	.word	0x20000110
 8000e64:	40004400 	.word	0x40004400

08000e68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e7e:	4b28      	ldr	r3, [pc, #160]	; (8000f20 <MX_GPIO_Init+0xb8>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	4a27      	ldr	r2, [pc, #156]	; (8000f20 <MX_GPIO_Init+0xb8>)
 8000e84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e88:	6153      	str	r3, [r2, #20]
 8000e8a:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <MX_GPIO_Init+0xb8>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <MX_GPIO_Init+0xb8>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	4a21      	ldr	r2, [pc, #132]	; (8000f20 <MX_GPIO_Init+0xb8>)
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	6153      	str	r3, [r2, #20]
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <MX_GPIO_Init+0xb8>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <MX_GPIO_Init+0xb8>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	4a1b      	ldr	r2, [pc, #108]	; (8000f20 <MX_GPIO_Init+0xb8>)
 8000eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb8:	6153      	str	r3, [r2, #20]
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <MX_GPIO_Init+0xb8>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2130      	movs	r1, #48	; 0x30
 8000eca:	4816      	ldr	r0, [pc, #88]	; (8000f24 <MX_GPIO_Init+0xbc>)
 8000ecc:	f000 fd7e 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ed0:	2330      	movs	r3, #48	; 0x30
 8000ed2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480f      	ldr	r0, [pc, #60]	; (8000f24 <MX_GPIO_Init+0xbc>)
 8000ee8:	f000 fbfe 	bl	80016e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000eec:	2340      	movs	r3, #64	; 0x40
 8000eee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ef0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000ef4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efa:	f107 030c 	add.w	r3, r7, #12
 8000efe:	4619      	mov	r1, r3
 8000f00:	4808      	ldr	r0, [pc, #32]	; (8000f24 <MX_GPIO_Init+0xbc>)
 8000f02:	f000 fbf1 	bl	80016e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2101      	movs	r1, #1
 8000f0a:	2017      	movs	r0, #23
 8000f0c:	f000 fb3f 	bl	800158e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f10:	2017      	movs	r0, #23
 8000f12:	f000 fb58 	bl	80015c6 <HAL_NVIC_EnableIRQ>

}
 8000f16:	bf00      	nop
 8000f18:	3720      	adds	r7, #32
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40021000 	.word	0x40021000
 8000f24:	48000400 	.word	0x48000400

08000f28 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	230a      	movs	r3, #10
 8000f3a:	68b9      	ldr	r1, [r7, #8]
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <_write+0x24>)
 8000f3e:	f002 f9bf 	bl	80032c0 <HAL_UART_Transmit>
//  HAL_UART_Transmit_IT(&huart2,(uint8_t *)ptr,len);

  return len;
 8000f42:	687b      	ldr	r3, [r7, #4]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000110 	.word	0x20000110

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <Error_Handler+0x8>
	...

08000f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6193      	str	r3, [r2, #24]
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f84:	61d3      	str	r3, [r2, #28]
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08c      	sub	sp, #48	; 0x30
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a38      	ldr	r2, [pc, #224]	; (80010a4 <HAL_UART_MspInit+0x100>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d132      	bne.n	800102c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fc6:	4b38      	ldr	r3, [pc, #224]	; (80010a8 <HAL_UART_MspInit+0x104>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	4a37      	ldr	r2, [pc, #220]	; (80010a8 <HAL_UART_MspInit+0x104>)
 8000fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd0:	6193      	str	r3, [r2, #24]
 8000fd2:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <HAL_UART_MspInit+0x104>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fda:	61bb      	str	r3, [r7, #24]
 8000fdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	4b32      	ldr	r3, [pc, #200]	; (80010a8 <HAL_UART_MspInit+0x104>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	4a31      	ldr	r2, [pc, #196]	; (80010a8 <HAL_UART_MspInit+0x104>)
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe8:	6153      	str	r3, [r2, #20]
 8000fea:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <HAL_UART_MspInit+0x104>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ffc:	2312      	movs	r3, #18
 8000ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001008:	2307      	movs	r3, #7
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001016:	f000 fb67 	bl	80016e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2101      	movs	r1, #1
 800101e:	2025      	movs	r0, #37	; 0x25
 8001020:	f000 fab5 	bl	800158e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001024:	2025      	movs	r0, #37	; 0x25
 8001026:	f000 face 	bl	80015c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800102a:	e036      	b.n	800109a <HAL_UART_MspInit+0xf6>
  else if(huart->Instance==USART2)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a1e      	ldr	r2, [pc, #120]	; (80010ac <HAL_UART_MspInit+0x108>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d131      	bne.n	800109a <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <HAL_UART_MspInit+0x104>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	4a1b      	ldr	r2, [pc, #108]	; (80010a8 <HAL_UART_MspInit+0x104>)
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	61d3      	str	r3, [r2, #28]
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <HAL_UART_MspInit+0x104>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <HAL_UART_MspInit+0x104>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	4a15      	ldr	r2, [pc, #84]	; (80010a8 <HAL_UART_MspInit+0x104>)
 8001054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001058:	6153      	str	r3, [r2, #20]
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <HAL_UART_MspInit+0x104>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001066:	f248 0304 	movw	r3, #32772	; 0x8004
 800106a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001078:	2307      	movs	r3, #7
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 031c 	add.w	r3, r7, #28
 8001080:	4619      	mov	r1, r3
 8001082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001086:	f000 fb2f 	bl	80016e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	2026      	movs	r0, #38	; 0x26
 8001090:	f000 fa7d 	bl	800158e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001094:	2026      	movs	r0, #38	; 0x26
 8001096:	f000 fa96 	bl	80015c6 <HAL_NVIC_EnableIRQ>
}
 800109a:	bf00      	nop
 800109c:	3730      	adds	r7, #48	; 0x30
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40013800 	.word	0x40013800
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40004400 	.word	0x40004400

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <NMI_Handler+0x4>

080010b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <HardFault_Handler+0x4>

080010bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <MemManage_Handler+0x4>

080010c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <BusFault_Handler+0x4>

080010c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <UsageFault_Handler+0x4>

080010ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fc:	f000 f928 	bl	8001350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001108:	2040      	movs	r0, #64	; 0x40
 800110a:	f000 fc77 	bl	80019fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <USART1_IRQHandler+0x10>)
 800111a:	f002 fa85 	bl	8003628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000008c 	.word	0x2000008c

08001128 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <USART2_IRQHandler+0x10>)
 800112e:	f002 fa7b 	bl	8003628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000110 	.word	0x20000110

0800113c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	e00a      	b.n	8001164 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800114e:	f3af 8000 	nop.w
 8001152:	4601      	mov	r1, r0
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	60ba      	str	r2, [r7, #8]
 800115a:	b2ca      	uxtb	r2, r1
 800115c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	3301      	adds	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	697a      	ldr	r2, [r7, #20]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	429a      	cmp	r2, r3
 800116a:	dbf0      	blt.n	800114e <_read+0x12>
	}

return len;
 800116c:	687b      	ldr	r3, [r7, #4]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
	return -1;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800119e:	605a      	str	r2, [r3, #4]
	return 0;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <_isatty>:

int _isatty(int file)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
	return 1;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
	return 0;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e8:	4a14      	ldr	r2, [pc, #80]	; (800123c <_sbrk+0x5c>)
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <_sbrk+0x60>)
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <_sbrk+0x64>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <_sbrk+0x68>)
 8001200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	429a      	cmp	r2, r3
 800120e:	d207      	bcs.n	8001220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001210:	f003 fe8c 	bl	8004f2c <__errno>
 8001214:	4603      	mov	r3, r0
 8001216:	220c      	movs	r2, #12
 8001218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800121e:	e009      	b.n	8001234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <_sbrk+0x64>)
 8001230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20003000 	.word	0x20003000
 8001240:	00000400 	.word	0x00000400
 8001244:	20000634 	.word	0x20000634
 8001248:	20000850 	.word	0x20000850

0800124c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <SystemInit+0x20>)
 8001252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <SystemInit+0x20>)
 8001258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800125c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001274:	480d      	ldr	r0, [pc, #52]	; (80012ac <LoopForever+0x6>)
  ldr r1, =_edata
 8001276:	490e      	ldr	r1, [pc, #56]	; (80012b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001278:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <LoopForever+0xe>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800127c:	e002      	b.n	8001284 <LoopCopyDataInit>

0800127e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001282:	3304      	adds	r3, #4

08001284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001288:	d3f9      	bcc.n	800127e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128a:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800128c:	4c0b      	ldr	r4, [pc, #44]	; (80012bc <LoopForever+0x16>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001290:	e001      	b.n	8001296 <LoopFillZerobss>

08001292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001294:	3204      	adds	r2, #4

08001296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001298:	d3fb      	bcc.n	8001292 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800129a:	f7ff ffd7 	bl	800124c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800129e:	f003 fe4b 	bl	8004f38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012a2:	f7ff fbcb 	bl	8000a3c <main>

080012a6 <LoopForever>:

LoopForever:
    b LoopForever
 80012a6:	e7fe      	b.n	80012a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012a8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80012ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012b4:	080066c8 	.word	0x080066c8
  ldr r2, =_sbss
 80012b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012bc:	20000850 	.word	0x20000850

080012c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012c0:	e7fe      	b.n	80012c0 <ADC1_2_IRQHandler>
	...

080012c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_Init+0x28>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a07      	ldr	r2, [pc, #28]	; (80012ec <HAL_Init+0x28>)
 80012ce:	f043 0310 	orr.w	r3, r3, #16
 80012d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d4:	2003      	movs	r0, #3
 80012d6:	f000 f94f 	bl	8001578 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012da:	2000      	movs	r0, #0
 80012dc:	f000 f808 	bl	80012f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e0:	f7ff fe3c 	bl	8000f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40022000 	.word	0x40022000

080012f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_InitTick+0x54>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_InitTick+0x58>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	fbb3 f3f1 	udiv	r3, r3, r1
 800130a:	fbb2 f3f3 	udiv	r3, r2, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f967 	bl	80015e2 <HAL_SYSTICK_Config>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e00e      	b.n	800133c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b0f      	cmp	r3, #15
 8001322:	d80a      	bhi.n	800133a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001324:	2200      	movs	r2, #0
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800132c:	f000 f92f 	bl	800158e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001330:	4a06      	ldr	r2, [pc, #24]	; (800134c <HAL_InitTick+0x5c>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	e000      	b.n	800133c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000000 	.word	0x20000000
 8001348:	20000008 	.word	0x20000008
 800134c:	20000004 	.word	0x20000004

08001350 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x20>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x24>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <HAL_IncTick+0x24>)
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000008 	.word	0x20000008
 8001374:	20000638 	.word	0x20000638

08001378 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;  
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <HAL_GetTick+0x14>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000638 	.word	0x20000638

08001390 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001398:	f7ff ffee 	bl	8001378 <HAL_GetTick>
 800139c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013a8:	d005      	beq.n	80013b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_Delay+0x44>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4413      	add	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013b6:	bf00      	nop
 80013b8:	f7ff ffde 	bl	8001378 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d8f7      	bhi.n	80013b8 <HAL_Delay+0x28>
  {
  }
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000008 	.word	0x20000008

080013d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <__NVIC_SetPriorityGrouping+0x44>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f4:	4013      	ands	r3, r2
 80013f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140a:	4a04      	ldr	r2, [pc, #16]	; (800141c <__NVIC_SetPriorityGrouping+0x44>)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	60d3      	str	r3, [r2, #12]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <__NVIC_GetPriorityGrouping+0x18>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	0a1b      	lsrs	r3, r3, #8
 800142a:	f003 0307 	and.w	r3, r3, #7
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	2b00      	cmp	r3, #0
 800144c:	db0b      	blt.n	8001466 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	f003 021f 	and.w	r2, r3, #31
 8001454:	4907      	ldr	r1, [pc, #28]	; (8001474 <__NVIC_EnableIRQ+0x38>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	095b      	lsrs	r3, r3, #5
 800145c:	2001      	movs	r0, #1
 800145e:	fa00 f202 	lsl.w	r2, r0, r2
 8001462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000e100 	.word	0xe000e100

08001478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	6039      	str	r1, [r7, #0]
 8001482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	2b00      	cmp	r3, #0
 800148a:	db0a      	blt.n	80014a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	b2da      	uxtb	r2, r3
 8001490:	490c      	ldr	r1, [pc, #48]	; (80014c4 <__NVIC_SetPriority+0x4c>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	0112      	lsls	r2, r2, #4
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	440b      	add	r3, r1
 800149c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a0:	e00a      	b.n	80014b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4908      	ldr	r1, [pc, #32]	; (80014c8 <__NVIC_SetPriority+0x50>)
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	3b04      	subs	r3, #4
 80014b0:	0112      	lsls	r2, r2, #4
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	440b      	add	r3, r1
 80014b6:	761a      	strb	r2, [r3, #24]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000e100 	.word	0xe000e100
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b089      	sub	sp, #36	; 0x24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f1c3 0307 	rsb	r3, r3, #7
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	bf28      	it	cs
 80014ea:	2304      	movcs	r3, #4
 80014ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3304      	adds	r3, #4
 80014f2:	2b06      	cmp	r3, #6
 80014f4:	d902      	bls.n	80014fc <NVIC_EncodePriority+0x30>
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3b03      	subs	r3, #3
 80014fa:	e000      	b.n	80014fe <NVIC_EncodePriority+0x32>
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	401a      	ands	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001514:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	43d9      	mvns	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	4313      	orrs	r3, r2
         );
}
 8001526:	4618      	mov	r0, r3
 8001528:	3724      	adds	r7, #36	; 0x24
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001544:	d301      	bcc.n	800154a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001546:	2301      	movs	r3, #1
 8001548:	e00f      	b.n	800156a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <SysTick_Config+0x40>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001552:	210f      	movs	r1, #15
 8001554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001558:	f7ff ff8e 	bl	8001478 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <SysTick_Config+0x40>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001562:	4b04      	ldr	r3, [pc, #16]	; (8001574 <SysTick_Config+0x40>)
 8001564:	2207      	movs	r2, #7
 8001566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	e000e010 	.word	0xe000e010

08001578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ff29 	bl	80013d8 <__NVIC_SetPriorityGrouping>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
 800159a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a0:	f7ff ff3e 	bl	8001420 <__NVIC_GetPriorityGrouping>
 80015a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	6978      	ldr	r0, [r7, #20]
 80015ac:	f7ff ff8e 	bl	80014cc <NVIC_EncodePriority>
 80015b0:	4602      	mov	r2, r0
 80015b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff5d 	bl	8001478 <__NVIC_SetPriority>
}
 80015be:	bf00      	nop
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff31 	bl	800143c <__NVIC_EnableIRQ>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff ffa2 	bl	8001534 <SysTick_Config>
 80015f0:	4603      	mov	r3, r0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001608:	2b02      	cmp	r3, #2
 800160a:	d008      	beq.n	800161e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2204      	movs	r2, #4
 8001610:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e020      	b.n	8001660 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 020e 	bic.w	r2, r2, #14
 800162c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 0201 	bic.w	r2, r2, #1
 800163c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001646:	2101      	movs	r1, #1
 8001648:	fa01 f202 	lsl.w	r2, r1, r2
 800164c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800167e:	2b02      	cmp	r3, #2
 8001680:	d005      	beq.n	800168e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2204      	movs	r2, #4
 8001686:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	73fb      	strb	r3, [r7, #15]
 800168c:	e027      	b.n	80016de <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 020e 	bic.w	r2, r2, #14
 800169c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0201 	bic.w	r2, r2, #1
 80016ac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b6:	2101      	movs	r1, #1
 80016b8:	fa01 f202 	lsl.w	r2, r1, r2
 80016bc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	4798      	blx	r3
    } 
  }
  return status;
 80016de:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f6:	e14e      	b.n	8001996 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2101      	movs	r1, #1
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
 8001704:	4013      	ands	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 8140 	beq.w	8001990 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b01      	cmp	r3, #1
 800171a:	d005      	beq.n	8001728 <HAL_GPIO_Init+0x40>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d130      	bne.n	800178a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	2203      	movs	r2, #3
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800175e:	2201      	movs	r2, #1
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	f003 0201 	and.w	r2, r3, #1
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b03      	cmp	r3, #3
 8001794:	d017      	beq.n	80017c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	2203      	movs	r2, #3
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d123      	bne.n	800181a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	08da      	lsrs	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3208      	adds	r2, #8
 80017da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	220f      	movs	r2, #15
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	691a      	ldr	r2, [r3, #16]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	08da      	lsrs	r2, r3, #3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3208      	adds	r2, #8
 8001814:	6939      	ldr	r1, [r7, #16]
 8001816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	2203      	movs	r2, #3
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0203 	and.w	r2, r3, #3
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 809a 	beq.w	8001990 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185c:	4b55      	ldr	r3, [pc, #340]	; (80019b4 <HAL_GPIO_Init+0x2cc>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	4a54      	ldr	r2, [pc, #336]	; (80019b4 <HAL_GPIO_Init+0x2cc>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6193      	str	r3, [r2, #24]
 8001868:	4b52      	ldr	r3, [pc, #328]	; (80019b4 <HAL_GPIO_Init+0x2cc>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001874:	4a50      	ldr	r2, [pc, #320]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	3302      	adds	r3, #2
 800187c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	220f      	movs	r2, #15
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800189e:	d013      	beq.n	80018c8 <HAL_GPIO_Init+0x1e0>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a46      	ldr	r2, [pc, #280]	; (80019bc <HAL_GPIO_Init+0x2d4>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d00d      	beq.n	80018c4 <HAL_GPIO_Init+0x1dc>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a45      	ldr	r2, [pc, #276]	; (80019c0 <HAL_GPIO_Init+0x2d8>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d007      	beq.n	80018c0 <HAL_GPIO_Init+0x1d8>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a44      	ldr	r2, [pc, #272]	; (80019c4 <HAL_GPIO_Init+0x2dc>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d101      	bne.n	80018bc <HAL_GPIO_Init+0x1d4>
 80018b8:	2303      	movs	r3, #3
 80018ba:	e006      	b.n	80018ca <HAL_GPIO_Init+0x1e2>
 80018bc:	2305      	movs	r3, #5
 80018be:	e004      	b.n	80018ca <HAL_GPIO_Init+0x1e2>
 80018c0:	2302      	movs	r3, #2
 80018c2:	e002      	b.n	80018ca <HAL_GPIO_Init+0x1e2>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e000      	b.n	80018ca <HAL_GPIO_Init+0x1e2>
 80018c8:	2300      	movs	r3, #0
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	f002 0203 	and.w	r2, r2, #3
 80018d0:	0092      	lsls	r2, r2, #2
 80018d2:	4093      	lsls	r3, r2
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018da:	4937      	ldr	r1, [pc, #220]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	089b      	lsrs	r3, r3, #2
 80018e0:	3302      	adds	r3, #2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018e8:	4b37      	ldr	r3, [pc, #220]	; (80019c8 <HAL_GPIO_Init+0x2e0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800190c:	4a2e      	ldr	r2, [pc, #184]	; (80019c8 <HAL_GPIO_Init+0x2e0>)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001912:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <HAL_GPIO_Init+0x2e0>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001936:	4a24      	ldr	r2, [pc, #144]	; (80019c8 <HAL_GPIO_Init+0x2e0>)
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800193c:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <HAL_GPIO_Init+0x2e0>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001960:	4a19      	ldr	r2, [pc, #100]	; (80019c8 <HAL_GPIO_Init+0x2e0>)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001966:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <HAL_GPIO_Init+0x2e0>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800198a:	4a0f      	ldr	r2, [pc, #60]	; (80019c8 <HAL_GPIO_Init+0x2e0>)
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3301      	adds	r3, #1
 8001994:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	fa22 f303 	lsr.w	r3, r2, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f47f aea9 	bne.w	80016f8 <HAL_GPIO_Init+0x10>
  }
}
 80019a6:	bf00      	nop
 80019a8:	bf00      	nop
 80019aa:	371c      	adds	r7, #28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40010000 	.word	0x40010000
 80019bc:	48000400 	.word	0x48000400
 80019c0:	48000800 	.word	0x48000800
 80019c4:	48000c00 	.word	0x48000c00
 80019c8:	40010400 	.word	0x40010400

080019cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	807b      	strh	r3, [r7, #2]
 80019d8:	4613      	mov	r3, r2
 80019da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019dc:	787b      	ldrb	r3, [r7, #1]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019e2:	887a      	ldrh	r2, [r7, #2]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019e8:	e002      	b.n	80019f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ea:	887a      	ldrh	r2, [r7, #2]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d006      	beq.n	8001a20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a12:	4a05      	ldr	r2, [pc, #20]	; (8001a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f806 	bl	8001a2c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40010400 	.word	0x40010400

08001a2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a54:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	f001 b823 	b.w	8002ab0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 817d 	beq.w	8001d7a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a80:	4bbc      	ldr	r3, [pc, #752]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d00c      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a8c:	4bb9      	ldr	r3, [pc, #740]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d15c      	bne.n	8001b52 <HAL_RCC_OscConfig+0x10e>
 8001a98:	4bb6      	ldr	r3, [pc, #728]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa4:	d155      	bne.n	8001b52 <HAL_RCC_OscConfig+0x10e>
 8001aa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aaa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001ab2:	fa93 f3a3 	rbit	r3, r3
 8001ab6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001aba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abe:	fab3 f383 	clz	r3, r3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	095b      	lsrs	r3, r3, #5
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d102      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x94>
 8001ad2:	4ba8      	ldr	r3, [pc, #672]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	e015      	b.n	8001b04 <HAL_RCC_OscConfig+0xc0>
 8001ad8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001adc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001ae4:	fa93 f3a3 	rbit	r3, r3
 8001ae8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001aec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001af0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001af4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001af8:	fa93 f3a3 	rbit	r3, r3
 8001afc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001b00:	4b9c      	ldr	r3, [pc, #624]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b08:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001b0c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b10:	fa92 f2a2 	rbit	r2, r2
 8001b14:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001b18:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001b1c:	fab2 f282 	clz	r2, r2
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	f042 0220 	orr.w	r2, r2, #32
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	f002 021f 	and.w	r2, r2, #31
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 811f 	beq.w	8001d78 <HAL_RCC_OscConfig+0x334>
 8001b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f040 8116 	bne.w	8001d78 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	f000 bfaf 	b.w	8002ab0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x12e>
 8001b64:	4b83      	ldr	r3, [pc, #524]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a82      	ldr	r2, [pc, #520]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	e036      	b.n	8001be0 <HAL_RCC_OscConfig+0x19c>
 8001b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x158>
 8001b82:	4b7c      	ldr	r3, [pc, #496]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a7b      	ldr	r2, [pc, #492]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b79      	ldr	r3, [pc, #484]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a78      	ldr	r2, [pc, #480]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e021      	b.n	8001be0 <HAL_RCC_OscConfig+0x19c>
 8001b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bac:	d10c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x184>
 8001bae:	4b71      	ldr	r3, [pc, #452]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a70      	ldr	r2, [pc, #448]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	4b6e      	ldr	r3, [pc, #440]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a6d      	ldr	r2, [pc, #436]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e00b      	b.n	8001be0 <HAL_RCC_OscConfig+0x19c>
 8001bc8:	4b6a      	ldr	r3, [pc, #424]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a69      	ldr	r2, [pc, #420]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b67      	ldr	r3, [pc, #412]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a66      	ldr	r2, [pc, #408]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bde:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001be0:	4b64      	ldr	r3, [pc, #400]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be4:	f023 020f 	bic.w	r2, r3, #15
 8001be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	495f      	ldr	r1, [pc, #380]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d059      	beq.n	8001cbe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7ff fbb5 	bl	8001378 <HAL_GetTick>
 8001c0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c12:	e00a      	b.n	8001c2a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c14:	f7ff fbb0 	bl	8001378 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b64      	cmp	r3, #100	; 0x64
 8001c22:	d902      	bls.n	8001c2a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	f000 bf43 	b.w	8002ab0 <HAL_RCC_OscConfig+0x106c>
 8001c2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c2e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001c36:	fa93 f3a3 	rbit	r3, r3
 8001c3a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001c3e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	fab3 f383 	clz	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	095b      	lsrs	r3, r3, #5
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d102      	bne.n	8001c5c <HAL_RCC_OscConfig+0x218>
 8001c56:	4b47      	ldr	r3, [pc, #284]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	e015      	b.n	8001c88 <HAL_RCC_OscConfig+0x244>
 8001c5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c60:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c74:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c78:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001c7c:	fa93 f3a3 	rbit	r3, r3
 8001c80:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001c84:	4b3b      	ldr	r3, [pc, #236]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c8c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001c90:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001c94:	fa92 f2a2 	rbit	r2, r2
 8001c98:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001c9c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001ca0:	fab2 f282 	clz	r2, r2
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	f042 0220 	orr.w	r2, r2, #32
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	f002 021f 	and.w	r2, r2, #31
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0ab      	beq.n	8001c14 <HAL_RCC_OscConfig+0x1d0>
 8001cbc:	e05d      	b.n	8001d7a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbe:	f7ff fb5b 	bl	8001378 <HAL_GetTick>
 8001cc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc6:	e00a      	b.n	8001cde <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff fb56 	bl	8001378 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b64      	cmp	r3, #100	; 0x64
 8001cd6:	d902      	bls.n	8001cde <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	f000 bee9 	b.w	8002ab0 <HAL_RCC_OscConfig+0x106c>
 8001cde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ce2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001cf2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	095b      	lsrs	r3, r3, #5
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d102      	bne.n	8001d10 <HAL_RCC_OscConfig+0x2cc>
 8001d0a:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	e015      	b.n	8001d3c <HAL_RCC_OscConfig+0x2f8>
 8001d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d14:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001d1c:	fa93 f3a3 	rbit	r3, r3
 8001d20:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d28:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d2c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001d30:	fa93 f3a3 	rbit	r3, r3
 8001d34:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001d38:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d40:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001d44:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d48:	fa92 f2a2 	rbit	r2, r2
 8001d4c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001d50:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001d54:	fab2 f282 	clz	r2, r2
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	f042 0220 	orr.w	r2, r2, #32
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	f002 021f 	and.w	r2, r2, #31
 8001d64:	2101      	movs	r1, #1
 8001d66:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1ab      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x284>
 8001d70:	e003      	b.n	8001d7a <HAL_RCC_OscConfig+0x336>
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 817d 	beq.w	800208a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d90:	4ba6      	ldr	r3, [pc, #664]	; (800202c <HAL_RCC_OscConfig+0x5e8>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 030c 	and.w	r3, r3, #12
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00b      	beq.n	8001db4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d9c:	4ba3      	ldr	r3, [pc, #652]	; (800202c <HAL_RCC_OscConfig+0x5e8>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d172      	bne.n	8001e8e <HAL_RCC_OscConfig+0x44a>
 8001da8:	4ba0      	ldr	r3, [pc, #640]	; (800202c <HAL_RCC_OscConfig+0x5e8>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d16c      	bne.n	8001e8e <HAL_RCC_OscConfig+0x44a>
 8001db4:	2302      	movs	r3, #2
 8001db6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001dc6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	095b      	lsrs	r3, r3, #5
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d102      	bne.n	8001de4 <HAL_RCC_OscConfig+0x3a0>
 8001dde:	4b93      	ldr	r3, [pc, #588]	; (800202c <HAL_RCC_OscConfig+0x5e8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	e013      	b.n	8001e0c <HAL_RCC_OscConfig+0x3c8>
 8001de4:	2302      	movs	r3, #2
 8001de6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001df6:	2302      	movs	r3, #2
 8001df8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001dfc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001e08:	4b88      	ldr	r3, [pc, #544]	; (800202c <HAL_RCC_OscConfig+0x5e8>)
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001e12:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e16:	fa92 f2a2 	rbit	r2, r2
 8001e1a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001e1e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001e22:	fab2 f282 	clz	r2, r2
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	f042 0220 	orr.w	r2, r2, #32
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	f002 021f 	and.w	r2, r2, #31
 8001e32:	2101      	movs	r1, #1
 8001e34:	fa01 f202 	lsl.w	r2, r1, r2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00a      	beq.n	8001e54 <HAL_RCC_OscConfig+0x410>
 8001e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d002      	beq.n	8001e54 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	f000 be2e 	b.w	8002ab0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e54:	4b75      	ldr	r3, [pc, #468]	; (800202c <HAL_RCC_OscConfig+0x5e8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	21f8      	movs	r1, #248	; 0xf8
 8001e6a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001e72:	fa91 f1a1 	rbit	r1, r1
 8001e76:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001e7a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001e7e:	fab1 f181 	clz	r1, r1
 8001e82:	b2c9      	uxtb	r1, r1
 8001e84:	408b      	lsls	r3, r1
 8001e86:	4969      	ldr	r1, [pc, #420]	; (800202c <HAL_RCC_OscConfig+0x5e8>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8c:	e0fd      	b.n	800208a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8088 	beq.w	8001fb0 <HAL_RCC_OscConfig+0x56c>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001eb2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ec0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2301      	movs	r3, #1
 8001eca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ecc:	f7ff fa54 	bl	8001378 <HAL_GetTick>
 8001ed0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed4:	e00a      	b.n	8001eec <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed6:	f7ff fa4f 	bl	8001378 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d902      	bls.n	8001eec <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	f000 bde2 	b.w	8002ab0 <HAL_RCC_OscConfig+0x106c>
 8001eec:	2302      	movs	r3, #2
 8001eee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001efe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	095b      	lsrs	r3, r3, #5
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d102      	bne.n	8001f1c <HAL_RCC_OscConfig+0x4d8>
 8001f16:	4b45      	ldr	r3, [pc, #276]	; (800202c <HAL_RCC_OscConfig+0x5e8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	e013      	b.n	8001f44 <HAL_RCC_OscConfig+0x500>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f2e:	2302      	movs	r3, #2
 8001f30:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f34:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001f38:	fa93 f3a3 	rbit	r3, r3
 8001f3c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001f40:	4b3a      	ldr	r3, [pc, #232]	; (800202c <HAL_RCC_OscConfig+0x5e8>)
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	2202      	movs	r2, #2
 8001f46:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001f4a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f4e:	fa92 f2a2 	rbit	r2, r2
 8001f52:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001f56:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001f5a:	fab2 f282 	clz	r2, r2
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	f042 0220 	orr.w	r2, r2, #32
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	f002 021f 	and.w	r2, r2, #31
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0af      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f76:	4b2d      	ldr	r3, [pc, #180]	; (800202c <HAL_RCC_OscConfig+0x5e8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	21f8      	movs	r1, #248	; 0xf8
 8001f8c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001f94:	fa91 f1a1 	rbit	r1, r1
 8001f98:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001f9c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001fa0:	fab1 f181 	clz	r1, r1
 8001fa4:	b2c9      	uxtb	r1, r1
 8001fa6:	408b      	lsls	r3, r1
 8001fa8:	4920      	ldr	r1, [pc, #128]	; (800202c <HAL_RCC_OscConfig+0x5e8>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]
 8001fae:	e06c      	b.n	800208a <HAL_RCC_OscConfig+0x646>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001fc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc6:	fab3 f383 	clz	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	2300      	movs	r3, #0
 8001fda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7ff f9cc 	bl	8001378 <HAL_GetTick>
 8001fe0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe4:	e00a      	b.n	8001ffc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe6:	f7ff f9c7 	bl	8001378 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d902      	bls.n	8001ffc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	f000 bd5a 	b.w	8002ab0 <HAL_RCC_OscConfig+0x106c>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002006:	fa93 f3a3 	rbit	r3, r3
 800200a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800200e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	095b      	lsrs	r3, r3, #5
 800201a:	b2db      	uxtb	r3, r3
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b01      	cmp	r3, #1
 8002024:	d104      	bne.n	8002030 <HAL_RCC_OscConfig+0x5ec>
 8002026:	4b01      	ldr	r3, [pc, #4]	; (800202c <HAL_RCC_OscConfig+0x5e8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	e015      	b.n	8002058 <HAL_RCC_OscConfig+0x614>
 800202c:	40021000 	.word	0x40021000
 8002030:	2302      	movs	r3, #2
 8002032:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800203a:	fa93 f3a3 	rbit	r3, r3
 800203e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002042:	2302      	movs	r3, #2
 8002044:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002048:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800204c:	fa93 f3a3 	rbit	r3, r3
 8002050:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002054:	4bc8      	ldr	r3, [pc, #800]	; (8002378 <HAL_RCC_OscConfig+0x934>)
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	2202      	movs	r2, #2
 800205a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800205e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002062:	fa92 f2a2 	rbit	r2, r2
 8002066:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800206a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800206e:	fab2 f282 	clz	r2, r2
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	f042 0220 	orr.w	r2, r2, #32
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	f002 021f 	and.w	r2, r2, #31
 800207e:	2101      	movs	r1, #1
 8002080:	fa01 f202 	lsl.w	r2, r1, r2
 8002084:	4013      	ands	r3, r2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1ad      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800208a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 8110 	beq.w	80022c0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d079      	beq.n	80021a4 <HAL_RCC_OscConfig+0x760>
 80020b0:	2301      	movs	r3, #1
 80020b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80020c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	4bab      	ldr	r3, [pc, #684]	; (800237c <HAL_RCC_OscConfig+0x938>)
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	461a      	mov	r2, r3
 80020d6:	2301      	movs	r3, #1
 80020d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020da:	f7ff f94d 	bl	8001378 <HAL_GetTick>
 80020de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020e4:	f7ff f948 	bl	8001378 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d902      	bls.n	80020fa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	f000 bcdb 	b.w	8002ab0 <HAL_RCC_OscConfig+0x106c>
 80020fa:	2302      	movs	r3, #2
 80020fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002104:	fa93 f3a3 	rbit	r3, r3
 8002108:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800210c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002110:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002114:	2202      	movs	r2, #2
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	fa93 f2a3 	rbit	r2, r3
 8002126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002138:	2202      	movs	r2, #2
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	fa93 f2a3 	rbit	r2, r3
 800214a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002152:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002154:	4b88      	ldr	r3, [pc, #544]	; (8002378 <HAL_RCC_OscConfig+0x934>)
 8002156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002160:	2102      	movs	r1, #2
 8002162:	6019      	str	r1, [r3, #0]
 8002164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002168:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	fa93 f1a3 	rbit	r1, r3
 8002172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002176:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800217a:	6019      	str	r1, [r3, #0]
  return result;
 800217c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002180:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f003 031f 	and.w	r3, r3, #31
 8002196:	2101      	movs	r1, #1
 8002198:	fa01 f303 	lsl.w	r3, r1, r3
 800219c:	4013      	ands	r3, r2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0a0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x6a0>
 80021a2:	e08d      	b.n	80022c0 <HAL_RCC_OscConfig+0x87c>
 80021a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021ac:	2201      	movs	r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	fa93 f2a3 	rbit	r2, r3
 80021be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021c6:	601a      	str	r2, [r3, #0]
  return result;
 80021c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021d0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	4b68      	ldr	r3, [pc, #416]	; (800237c <HAL_RCC_OscConfig+0x938>)
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	461a      	mov	r2, r3
 80021e2:	2300      	movs	r3, #0
 80021e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e6:	f7ff f8c7 	bl	8001378 <HAL_GetTick>
 80021ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ee:	e00a      	b.n	8002206 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021f0:	f7ff f8c2 	bl	8001378 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d902      	bls.n	8002206 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	f000 bc55 	b.w	8002ab0 <HAL_RCC_OscConfig+0x106c>
 8002206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800220e:	2202      	movs	r2, #2
 8002210:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002216:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	fa93 f2a3 	rbit	r2, r3
 8002220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002224:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002232:	2202      	movs	r2, #2
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	fa93 f2a3 	rbit	r2, r3
 8002244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002248:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002252:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002256:	2202      	movs	r2, #2
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	fa93 f2a3 	rbit	r2, r3
 8002268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002270:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002272:	4b41      	ldr	r3, [pc, #260]	; (8002378 <HAL_RCC_OscConfig+0x934>)
 8002274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800227e:	2102      	movs	r1, #2
 8002280:	6019      	str	r1, [r3, #0]
 8002282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002286:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	fa93 f1a3 	rbit	r1, r3
 8002290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002294:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002298:	6019      	str	r1, [r3, #0]
  return result;
 800229a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	fab3 f383 	clz	r3, r3
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	f003 031f 	and.w	r3, r3, #31
 80022b4:	2101      	movs	r1, #1
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ba:	4013      	ands	r3, r2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d197      	bne.n	80021f0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 81a1 	beq.w	8002618 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d6:	2300      	movs	r3, #0
 80022d8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022dc:	4b26      	ldr	r3, [pc, #152]	; (8002378 <HAL_RCC_OscConfig+0x934>)
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d116      	bne.n	8002316 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e8:	4b23      	ldr	r3, [pc, #140]	; (8002378 <HAL_RCC_OscConfig+0x934>)
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	4a22      	ldr	r2, [pc, #136]	; (8002378 <HAL_RCC_OscConfig+0x934>)
 80022ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f2:	61d3      	str	r3, [r2, #28]
 80022f4:	4b20      	ldr	r3, [pc, #128]	; (8002378 <HAL_RCC_OscConfig+0x934>)
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80022fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002300:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800230e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002310:	2301      	movs	r3, #1
 8002312:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002316:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <HAL_RCC_OscConfig+0x93c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d11a      	bne.n	8002358 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002322:	4b17      	ldr	r3, [pc, #92]	; (8002380 <HAL_RCC_OscConfig+0x93c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a16      	ldr	r2, [pc, #88]	; (8002380 <HAL_RCC_OscConfig+0x93c>)
 8002328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800232e:	f7ff f823 	bl	8001378 <HAL_GetTick>
 8002332:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002336:	e009      	b.n	800234c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002338:	f7ff f81e 	bl	8001378 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b64      	cmp	r3, #100	; 0x64
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e3b1      	b.n	8002ab0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <HAL_RCC_OscConfig+0x93c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0ef      	beq.n	8002338 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d10d      	bne.n	8002384 <HAL_RCC_OscConfig+0x940>
 8002368:	4b03      	ldr	r3, [pc, #12]	; (8002378 <HAL_RCC_OscConfig+0x934>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4a02      	ldr	r2, [pc, #8]	; (8002378 <HAL_RCC_OscConfig+0x934>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6213      	str	r3, [r2, #32]
 8002374:	e03c      	b.n	80023f0 <HAL_RCC_OscConfig+0x9ac>
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	10908120 	.word	0x10908120
 8002380:	40007000 	.word	0x40007000
 8002384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002388:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10c      	bne.n	80023ae <HAL_RCC_OscConfig+0x96a>
 8002394:	4bc1      	ldr	r3, [pc, #772]	; (800269c <HAL_RCC_OscConfig+0xc58>)
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	4ac0      	ldr	r2, [pc, #768]	; (800269c <HAL_RCC_OscConfig+0xc58>)
 800239a:	f023 0301 	bic.w	r3, r3, #1
 800239e:	6213      	str	r3, [r2, #32]
 80023a0:	4bbe      	ldr	r3, [pc, #760]	; (800269c <HAL_RCC_OscConfig+0xc58>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4abd      	ldr	r2, [pc, #756]	; (800269c <HAL_RCC_OscConfig+0xc58>)
 80023a6:	f023 0304 	bic.w	r3, r3, #4
 80023aa:	6213      	str	r3, [r2, #32]
 80023ac:	e020      	b.n	80023f0 <HAL_RCC_OscConfig+0x9ac>
 80023ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	2b05      	cmp	r3, #5
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x994>
 80023be:	4bb7      	ldr	r3, [pc, #732]	; (800269c <HAL_RCC_OscConfig+0xc58>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	4ab6      	ldr	r2, [pc, #728]	; (800269c <HAL_RCC_OscConfig+0xc58>)
 80023c4:	f043 0304 	orr.w	r3, r3, #4
 80023c8:	6213      	str	r3, [r2, #32]
 80023ca:	4bb4      	ldr	r3, [pc, #720]	; (800269c <HAL_RCC_OscConfig+0xc58>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	4ab3      	ldr	r2, [pc, #716]	; (800269c <HAL_RCC_OscConfig+0xc58>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6213      	str	r3, [r2, #32]
 80023d6:	e00b      	b.n	80023f0 <HAL_RCC_OscConfig+0x9ac>
 80023d8:	4bb0      	ldr	r3, [pc, #704]	; (800269c <HAL_RCC_OscConfig+0xc58>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4aaf      	ldr	r2, [pc, #700]	; (800269c <HAL_RCC_OscConfig+0xc58>)
 80023de:	f023 0301 	bic.w	r3, r3, #1
 80023e2:	6213      	str	r3, [r2, #32]
 80023e4:	4bad      	ldr	r3, [pc, #692]	; (800269c <HAL_RCC_OscConfig+0xc58>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4aac      	ldr	r2, [pc, #688]	; (800269c <HAL_RCC_OscConfig+0xc58>)
 80023ea:	f023 0304 	bic.w	r3, r3, #4
 80023ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 8081 	beq.w	8002504 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002402:	f7fe ffb9 	bl	8001378 <HAL_GetTick>
 8002406:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240a:	e00b      	b.n	8002424 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800240c:	f7fe ffb4 	bl	8001378 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	f241 3288 	movw	r2, #5000	; 0x1388
 800241c:	4293      	cmp	r3, r2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e345      	b.n	8002ab0 <HAL_RCC_OscConfig+0x106c>
 8002424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002428:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800242c:	2202      	movs	r2, #2
 800242e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002434:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	fa93 f2a3 	rbit	r2, r3
 800243e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002442:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002450:	2202      	movs	r2, #2
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002458:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	fa93 f2a3 	rbit	r2, r3
 8002462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002466:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800246a:	601a      	str	r2, [r3, #0]
  return result;
 800246c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002470:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002474:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	095b      	lsrs	r3, r3, #5
 800247e:	b2db      	uxtb	r3, r3
 8002480:	f043 0302 	orr.w	r3, r3, #2
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d102      	bne.n	8002490 <HAL_RCC_OscConfig+0xa4c>
 800248a:	4b84      	ldr	r3, [pc, #528]	; (800269c <HAL_RCC_OscConfig+0xc58>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	e013      	b.n	80024b8 <HAL_RCC_OscConfig+0xa74>
 8002490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002494:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002498:	2202      	movs	r2, #2
 800249a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	fa93 f2a3 	rbit	r2, r3
 80024aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	4b79      	ldr	r3, [pc, #484]	; (800269c <HAL_RCC_OscConfig+0xc58>)
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80024c0:	2102      	movs	r1, #2
 80024c2:	6011      	str	r1, [r2, #0]
 80024c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024c8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	fa92 f1a2 	rbit	r1, r2
 80024d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024d6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80024da:	6011      	str	r1, [r2, #0]
  return result;
 80024dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024e0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	fab2 f282 	clz	r2, r2
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	f002 021f 	and.w	r2, r2, #31
 80024f6:	2101      	movs	r1, #1
 80024f8:	fa01 f202 	lsl.w	r2, r1, r2
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d084      	beq.n	800240c <HAL_RCC_OscConfig+0x9c8>
 8002502:	e07f      	b.n	8002604 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002504:	f7fe ff38 	bl	8001378 <HAL_GetTick>
 8002508:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800250c:	e00b      	b.n	8002526 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7fe ff33 	bl	8001378 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	; 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e2c4      	b.n	8002ab0 <HAL_RCC_OscConfig+0x106c>
 8002526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800252e:	2202      	movs	r2, #2
 8002530:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002536:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	fa93 f2a3 	rbit	r2, r3
 8002540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002544:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002552:	2202      	movs	r2, #2
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	fa93 f2a3 	rbit	r2, r3
 8002564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002568:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800256c:	601a      	str	r2, [r3, #0]
  return result;
 800256e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002572:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002576:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002578:	fab3 f383 	clz	r3, r3
 800257c:	b2db      	uxtb	r3, r3
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	b2db      	uxtb	r3, r3
 8002582:	f043 0302 	orr.w	r3, r3, #2
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d102      	bne.n	8002592 <HAL_RCC_OscConfig+0xb4e>
 800258c:	4b43      	ldr	r3, [pc, #268]	; (800269c <HAL_RCC_OscConfig+0xc58>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	e013      	b.n	80025ba <HAL_RCC_OscConfig+0xb76>
 8002592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002596:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800259a:	2202      	movs	r2, #2
 800259c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	fa93 f2a3 	rbit	r2, r3
 80025ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	4b39      	ldr	r3, [pc, #228]	; (800269c <HAL_RCC_OscConfig+0xc58>)
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80025c2:	2102      	movs	r1, #2
 80025c4:	6011      	str	r1, [r2, #0]
 80025c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025ca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	fa92 f1a2 	rbit	r1, r2
 80025d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025d8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80025dc:	6011      	str	r1, [r2, #0]
  return result;
 80025de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025e2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	fab2 f282 	clz	r2, r2
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	f002 021f 	and.w	r2, r2, #31
 80025f8:	2101      	movs	r1, #1
 80025fa:	fa01 f202 	lsl.w	r2, r1, r2
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d184      	bne.n	800250e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002604:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002608:	2b01      	cmp	r3, #1
 800260a:	d105      	bne.n	8002618 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800260c:	4b23      	ldr	r3, [pc, #140]	; (800269c <HAL_RCC_OscConfig+0xc58>)
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	4a22      	ldr	r2, [pc, #136]	; (800269c <HAL_RCC_OscConfig+0xc58>)
 8002612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002616:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8242 	beq.w	8002aae <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800262a:	4b1c      	ldr	r3, [pc, #112]	; (800269c <HAL_RCC_OscConfig+0xc58>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b08      	cmp	r3, #8
 8002634:	f000 8213 	beq.w	8002a5e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	2b02      	cmp	r3, #2
 8002646:	f040 8162 	bne.w	800290e <HAL_RCC_OscConfig+0xeca>
 800264a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002652:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002656:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	fa93 f2a3 	rbit	r2, r3
 8002666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800266e:	601a      	str	r2, [r3, #0]
  return result;
 8002670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002674:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002678:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267a:	fab3 f383 	clz	r3, r3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002684:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	461a      	mov	r2, r3
 800268c:	2300      	movs	r3, #0
 800268e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7fe fe72 	bl	8001378 <HAL_GetTick>
 8002694:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002698:	e00c      	b.n	80026b4 <HAL_RCC_OscConfig+0xc70>
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a0:	f7fe fe6a 	bl	8001378 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e1fd      	b.n	8002ab0 <HAL_RCC_OscConfig+0x106c>
 80026b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80026bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	fa93 f2a3 	rbit	r2, r3
 80026d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026d8:	601a      	str	r2, [r3, #0]
  return result;
 80026da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026de:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e4:	fab3 f383 	clz	r3, r3
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d102      	bne.n	80026fe <HAL_RCC_OscConfig+0xcba>
 80026f8:	4bb0      	ldr	r3, [pc, #704]	; (80029bc <HAL_RCC_OscConfig+0xf78>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	e027      	b.n	800274e <HAL_RCC_OscConfig+0xd0a>
 80026fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002702:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002706:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800270a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002710:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	fa93 f2a3 	rbit	r2, r3
 800271a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002728:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800272c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002736:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	fa93 f2a3 	rbit	r2, r3
 8002740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002744:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	4b9c      	ldr	r3, [pc, #624]	; (80029bc <HAL_RCC_OscConfig+0xf78>)
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002752:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002756:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800275a:	6011      	str	r1, [r2, #0]
 800275c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002760:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	fa92 f1a2 	rbit	r1, r2
 800276a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800276e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002772:	6011      	str	r1, [r2, #0]
  return result;
 8002774:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002778:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	fab2 f282 	clz	r2, r2
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	f042 0220 	orr.w	r2, r2, #32
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	f002 021f 	and.w	r2, r2, #31
 800278e:	2101      	movs	r1, #1
 8002790:	fa01 f202 	lsl.w	r2, r1, r2
 8002794:	4013      	ands	r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d182      	bne.n	80026a0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800279a:	4b88      	ldr	r3, [pc, #544]	; (80029bc <HAL_RCC_OscConfig+0xf78>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80027ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	430b      	orrs	r3, r1
 80027bc:	497f      	ldr	r1, [pc, #508]	; (80029bc <HAL_RCC_OscConfig+0xf78>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]
 80027c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80027ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	fa93 f2a3 	rbit	r2, r3
 80027de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80027e6:	601a      	str	r2, [r3, #0]
  return result;
 80027e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80027f0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	461a      	mov	r2, r3
 8002804:	2301      	movs	r3, #1
 8002806:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7fe fdb6 	bl	8001378 <HAL_GetTick>
 800280c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002810:	e009      	b.n	8002826 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002812:	f7fe fdb1 	bl	8001378 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e144      	b.n	8002ab0 <HAL_RCC_OscConfig+0x106c>
 8002826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800282e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002832:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002838:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	fa93 f2a3 	rbit	r2, r3
 8002842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002846:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800284a:	601a      	str	r2, [r3, #0]
  return result;
 800284c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002850:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002854:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	095b      	lsrs	r3, r3, #5
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b01      	cmp	r3, #1
 8002868:	d102      	bne.n	8002870 <HAL_RCC_OscConfig+0xe2c>
 800286a:	4b54      	ldr	r3, [pc, #336]	; (80029bc <HAL_RCC_OscConfig+0xf78>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	e027      	b.n	80028c0 <HAL_RCC_OscConfig+0xe7c>
 8002870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002874:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002878:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800287c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002882:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	fa93 f2a3 	rbit	r2, r3
 800288c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002890:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800289e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	fa93 f2a3 	rbit	r2, r3
 80028b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	4b3f      	ldr	r3, [pc, #252]	; (80029bc <HAL_RCC_OscConfig+0xf78>)
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028c4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80028c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028cc:	6011      	str	r1, [r2, #0]
 80028ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028d2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	fa92 f1a2 	rbit	r1, r2
 80028dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028e0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80028e4:	6011      	str	r1, [r2, #0]
  return result;
 80028e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028ea:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	fab2 f282 	clz	r2, r2
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	f042 0220 	orr.w	r2, r2, #32
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	f002 021f 	and.w	r2, r2, #31
 8002900:	2101      	movs	r1, #1
 8002902:	fa01 f202 	lsl.w	r2, r1, r2
 8002906:	4013      	ands	r3, r2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d082      	beq.n	8002812 <HAL_RCC_OscConfig+0xdce>
 800290c:	e0cf      	b.n	8002aae <HAL_RCC_OscConfig+0x106a>
 800290e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002912:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002916:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800291a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002920:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	fa93 f2a3 	rbit	r2, r3
 800292a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002932:	601a      	str	r2, [r3, #0]
  return result;
 8002934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002938:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800293c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002948:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	461a      	mov	r2, r3
 8002950:	2300      	movs	r3, #0
 8002952:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe fd10 	bl	8001378 <HAL_GetTick>
 8002958:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800295c:	e009      	b.n	8002972 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295e:	f7fe fd0b 	bl	8001378 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e09e      	b.n	8002ab0 <HAL_RCC_OscConfig+0x106c>
 8002972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002976:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800297a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800297e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002984:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	fa93 f2a3 	rbit	r2, r3
 800298e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002992:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002996:	601a      	str	r2, [r3, #0]
  return result;
 8002998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80029a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a2:	fab3 f383 	clz	r3, r3
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	095b      	lsrs	r3, r3, #5
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d104      	bne.n	80029c0 <HAL_RCC_OscConfig+0xf7c>
 80029b6:	4b01      	ldr	r3, [pc, #4]	; (80029bc <HAL_RCC_OscConfig+0xf78>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	e029      	b.n	8002a10 <HAL_RCC_OscConfig+0xfcc>
 80029bc:	40021000 	.word	0x40021000
 80029c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	fa93 f2a3 	rbit	r2, r3
 80029dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ea:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	fa93 f2a3 	rbit	r2, r3
 8002a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a06:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	4b2b      	ldr	r3, [pc, #172]	; (8002abc <HAL_RCC_OscConfig+0x1078>)
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a14:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a1c:	6011      	str	r1, [r2, #0]
 8002a1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a22:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	fa92 f1a2 	rbit	r1, r2
 8002a2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a30:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a34:	6011      	str	r1, [r2, #0]
  return result;
 8002a36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a3a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	fab2 f282 	clz	r2, r2
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	f042 0220 	orr.w	r2, r2, #32
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	f002 021f 	and.w	r2, r2, #31
 8002a50:	2101      	movs	r1, #1
 8002a52:	fa01 f202 	lsl.w	r2, r1, r2
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d180      	bne.n	800295e <HAL_RCC_OscConfig+0xf1a>
 8002a5c:	e027      	b.n	8002aae <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e01e      	b.n	8002ab0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a72:	4b12      	ldr	r3, [pc, #72]	; (8002abc <HAL_RCC_OscConfig+0x1078>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a7a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a7e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d10b      	bne.n	8002aaa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002a92:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d001      	beq.n	8002aae <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000

08002ac0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b09e      	sub	sp, #120	; 0x78
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e162      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b90      	ldr	r3, [pc, #576]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d910      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b8d      	ldr	r3, [pc, #564]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 0207 	bic.w	r2, r3, #7
 8002aee:	498b      	ldr	r1, [pc, #556]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b89      	ldr	r3, [pc, #548]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e14a      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b14:	4b82      	ldr	r3, [pc, #520]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	497f      	ldr	r1, [pc, #508]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80dc 	beq.w	8002cec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d13c      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xf6>
 8002b3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b40:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4c:	fab3 f383 	clz	r3, r3
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d102      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xa6>
 8002b60:	4b6f      	ldr	r3, [pc, #444]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	e00f      	b.n	8002b86 <HAL_RCC_ClockConfig+0xc6>
 8002b66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	667b      	str	r3, [r7, #100]	; 0x64
 8002b74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b78:	663b      	str	r3, [r7, #96]	; 0x60
 8002b7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b82:	4b67      	ldr	r3, [pc, #412]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b8e:	fa92 f2a2 	rbit	r2, r2
 8002b92:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002b94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b96:	fab2 f282 	clz	r2, r2
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	f042 0220 	orr.w	r2, r2, #32
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	f002 021f 	and.w	r2, r2, #31
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d17b      	bne.n	8002caa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e0f3      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d13c      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x178>
 8002bbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bc2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d102      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x128>
 8002be2:	4b4f      	ldr	r3, [pc, #316]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	e00f      	b.n	8002c08 <HAL_RCC_ClockConfig+0x148>
 8002be8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8002bf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bfa:	643b      	str	r3, [r7, #64]	; 0x40
 8002bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c04:	4b46      	ldr	r3, [pc, #280]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c0c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c10:	fa92 f2a2 	rbit	r2, r2
 8002c14:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c18:	fab2 f282 	clz	r2, r2
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	f042 0220 	orr.w	r2, r2, #32
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	f002 021f 	and.w	r2, r2, #31
 8002c28:	2101      	movs	r1, #1
 8002c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d13a      	bne.n	8002caa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0b2      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	095b      	lsrs	r3, r3, #5
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d102      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x1a0>
 8002c5a:	4b31      	ldr	r3, [pc, #196]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	e00d      	b.n	8002c7c <HAL_RCC_ClockConfig+0x1bc>
 8002c60:	2302      	movs	r3, #2
 8002c62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c66:	fa93 f3a3 	rbit	r3, r3
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	623b      	str	r3, [r7, #32]
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	4b29      	ldr	r3, [pc, #164]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	61ba      	str	r2, [r7, #24]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	fa92 f2a2 	rbit	r2, r2
 8002c86:	617a      	str	r2, [r7, #20]
  return result;
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	fab2 f282 	clz	r2, r2
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	f042 0220 	orr.w	r2, r2, #32
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	f002 021f 	and.w	r2, r2, #31
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e079      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002caa:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f023 0203 	bic.w	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	491a      	ldr	r1, [pc, #104]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cbc:	f7fe fb5c 	bl	8001378 <HAL_GetTick>
 8002cc0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc4:	f7fe fb58 	bl	8001378 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e061      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 020c 	and.w	r2, r3, #12
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d1eb      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d214      	bcs.n	8002d24 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 0207 	bic.w	r2, r3, #7
 8002d02:	4906      	ldr	r1, [pc, #24]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e040      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
 8002d1c:	40022000 	.word	0x40022000
 8002d20:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d008      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d30:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	491a      	ldr	r1, [pc, #104]	; (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d009      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d4e:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4912      	ldr	r1, [pc, #72]	; (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d62:	f000 f829 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002d66:	4601      	mov	r1, r0
 8002d68:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d70:	22f0      	movs	r2, #240	; 0xf0
 8002d72:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	fa92 f2a2 	rbit	r2, r2
 8002d7a:	60fa      	str	r2, [r7, #12]
  return result;
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	fab2 f282 	clz	r2, r2
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	40d3      	lsrs	r3, r2
 8002d86:	4a09      	ldr	r2, [pc, #36]	; (8002dac <HAL_RCC_ClockConfig+0x2ec>)
 8002d88:	5cd3      	ldrb	r3, [r2, r3]
 8002d8a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d8e:	4a08      	ldr	r2, [pc, #32]	; (8002db0 <HAL_RCC_ClockConfig+0x2f0>)
 8002d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d92:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <HAL_RCC_ClockConfig+0x2f4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe faaa 	bl	80012f0 <HAL_InitTick>
  
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3778      	adds	r7, #120	; 0x78
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	08006570 	.word	0x08006570
 8002db0:	20000000 	.word	0x20000000
 8002db4:	20000004 	.word	0x20000004

08002db8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b08b      	sub	sp, #44	; 0x2c
 8002dbc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002dd2:	4b29      	ldr	r3, [pc, #164]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d002      	beq.n	8002de8 <HAL_RCC_GetSysClockFreq+0x30>
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d003      	beq.n	8002dee <HAL_RCC_GetSysClockFreq+0x36>
 8002de6:	e03c      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002de8:	4b24      	ldr	r3, [pc, #144]	; (8002e7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dea:	623b      	str	r3, [r7, #32]
      break;
 8002dec:	e03c      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002df4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002df8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	fa92 f2a2 	rbit	r2, r2
 8002e00:	607a      	str	r2, [r7, #4]
  return result;
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	fab2 f282 	clz	r2, r2
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	40d3      	lsrs	r3, r2
 8002e0c:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e0e:	5cd3      	ldrb	r3, [r2, r3]
 8002e10:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e12:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	220f      	movs	r2, #15
 8002e1c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	fa92 f2a2 	rbit	r2, r2
 8002e24:	60fa      	str	r2, [r7, #12]
  return result;
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	fab2 f282 	clz	r2, r2
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	40d3      	lsrs	r3, r2
 8002e30:	4a14      	ldr	r2, [pc, #80]	; (8002e84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e32:	5cd3      	ldrb	r3, [r2, r3]
 8002e34:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e40:	4a0e      	ldr	r2, [pc, #56]	; (8002e7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	fb02 f303 	mul.w	r3, r2, r3
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e50:	e004      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	4a0c      	ldr	r2, [pc, #48]	; (8002e88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e56:	fb02 f303 	mul.w	r3, r2, r3
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	623b      	str	r3, [r7, #32]
      break;
 8002e60:	e002      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e62:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e64:	623b      	str	r3, [r7, #32]
      break;
 8002e66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e68:	6a3b      	ldr	r3, [r7, #32]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	372c      	adds	r7, #44	; 0x2c
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	007a1200 	.word	0x007a1200
 8002e80:	08006588 	.word	0x08006588
 8002e84:	08006598 	.word	0x08006598
 8002e88:	003d0900 	.word	0x003d0900

08002e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e90:	4b03      	ldr	r3, [pc, #12]	; (8002ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000000 	.word	0x20000000

08002ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002eaa:	f7ff ffef 	bl	8002e8c <HAL_RCC_GetHCLKFreq>
 8002eae:	4601      	mov	r1, r0
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002eb8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ebc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	fa92 f2a2 	rbit	r2, r2
 8002ec4:	603a      	str	r2, [r7, #0]
  return result;
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	fab2 f282 	clz	r2, r2
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	40d3      	lsrs	r3, r2
 8002ed0:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002ed2:	5cd3      	ldrb	r3, [r2, r3]
 8002ed4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	08006580 	.word	0x08006580

08002ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002eee:	f7ff ffcd 	bl	8002e8c <HAL_RCC_GetHCLKFreq>
 8002ef2:	4601      	mov	r1, r0
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002efc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002f00:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	fa92 f2a2 	rbit	r2, r2
 8002f08:	603a      	str	r2, [r7, #0]
  return result;
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	fab2 f282 	clz	r2, r2
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	40d3      	lsrs	r3, r2
 8002f14:	4a04      	ldr	r2, [pc, #16]	; (8002f28 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f16:	5cd3      	ldrb	r3, [r2, r3]
 8002f18:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40021000 	.word	0x40021000
 8002f28:	08006580 	.word	0x08006580

08002f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b092      	sub	sp, #72	; 0x48
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 80cd 	beq.w	80030ea <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f50:	4b86      	ldr	r3, [pc, #536]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10e      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f5c:	4b83      	ldr	r3, [pc, #524]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	4a82      	ldr	r2, [pc, #520]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f66:	61d3      	str	r3, [r2, #28]
 8002f68:	4b80      	ldr	r3, [pc, #512]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f74:	2301      	movs	r3, #1
 8002f76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7a:	4b7d      	ldr	r3, [pc, #500]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d118      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f86:	4b7a      	ldr	r3, [pc, #488]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a79      	ldr	r2, [pc, #484]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f92:	f7fe f9f1 	bl	8001378 <HAL_GetTick>
 8002f96:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f98:	e008      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9a:	f7fe f9ed 	bl	8001378 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b64      	cmp	r3, #100	; 0x64
 8002fa6:	d901      	bls.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e0db      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fac:	4b70      	ldr	r3, [pc, #448]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fb8:	4b6c      	ldr	r3, [pc, #432]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d07d      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d076      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fd6:	4b65      	ldr	r3, [pc, #404]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fe0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fe4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	fa93 f3a3 	rbit	r3, r3
 8002fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ff0:	fab3 f383 	clz	r3, r3
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4b5e      	ldr	r3, [pc, #376]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	461a      	mov	r2, r3
 8003000:	2301      	movs	r3, #1
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003008:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300c:	fa93 f3a3 	rbit	r3, r3
 8003010:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003014:	fab3 f383 	clz	r3, r3
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	4b55      	ldr	r3, [pc, #340]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	461a      	mov	r2, r3
 8003024:	2300      	movs	r3, #0
 8003026:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003028:	4a50      	ldr	r2, [pc, #320]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800302a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800302c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800302e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d045      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fe f99e 	bl	8001378 <HAL_GetTick>
 800303c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303e:	e00a      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003040:	f7fe f99a 	bl	8001378 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	f241 3288 	movw	r2, #5000	; 0x1388
 800304e:	4293      	cmp	r3, r2
 8003050:	d901      	bls.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e086      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003056:	2302      	movs	r3, #2
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	fa93 f3a3 	rbit	r3, r3
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
 8003062:	2302      	movs	r3, #2
 8003064:	623b      	str	r3, [r7, #32]
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	fa93 f3a3 	rbit	r3, r3
 800306c:	61fb      	str	r3, [r7, #28]
  return result;
 800306e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	b2db      	uxtb	r3, r3
 800307a:	f043 0302 	orr.w	r3, r3, #2
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d102      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003084:	4b39      	ldr	r3, [pc, #228]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	e007      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800308a:	2302      	movs	r3, #2
 800308c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	fa93 f3a3 	rbit	r3, r3
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	4b35      	ldr	r3, [pc, #212]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	2202      	movs	r2, #2
 800309c:	613a      	str	r2, [r7, #16]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	fa92 f2a2 	rbit	r2, r2
 80030a4:	60fa      	str	r2, [r7, #12]
  return result;
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	fab2 f282 	clz	r2, r2
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	f002 021f 	and.w	r2, r2, #31
 80030b8:	2101      	movs	r1, #1
 80030ba:	fa01 f202 	lsl.w	r2, r1, r2
 80030be:	4013      	ands	r3, r2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0bd      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80030c4:	4b29      	ldr	r3, [pc, #164]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	4926      	ldr	r1, [pc, #152]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d105      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030de:	4b23      	ldr	r3, [pc, #140]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	4a22      	ldr	r2, [pc, #136]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030f6:	4b1d      	ldr	r3, [pc, #116]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	f023 0203 	bic.w	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	491a      	ldr	r1, [pc, #104]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003104:	4313      	orrs	r3, r2
 8003106:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0320 	and.w	r3, r3, #32
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003114:	4b15      	ldr	r3, [pc, #84]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	f023 0210 	bic.w	r2, r3, #16
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	4912      	ldr	r1, [pc, #72]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003122:	4313      	orrs	r3, r2
 8003124:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312e:	2b00      	cmp	r3, #0
 8003130:	d008      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003132:	4b0e      	ldr	r3, [pc, #56]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	490b      	ldr	r1, [pc, #44]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003140:	4313      	orrs	r3, r2
 8003142:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	4903      	ldr	r1, [pc, #12]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800315e:	4313      	orrs	r3, r2
 8003160:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3748      	adds	r7, #72	; 0x48
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40021000 	.word	0x40021000
 8003170:	40007000 	.word	0x40007000
 8003174:	10908100 	.word	0x10908100

08003178 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e040      	b.n	800320c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fd ff02 	bl	8000fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2224      	movs	r2, #36	; 0x24
 80031a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0201 	bic.w	r2, r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fdd8 	bl	8003d6c <UART_SetConfig>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e022      	b.n	800320c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 ff02 	bl	8003fd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 ff89 	bl	800411c <UART_CheckIdleState>
 800320a:	4603      	mov	r3, r0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e048      	b.n	80032b8 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fd feb4 	bl	8000fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2224      	movs	r2, #36	; 0x24
 8003240:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0201 	bic.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fd8a 	bl	8003d6c <UART_SetConfig>
 8003258:	4603      	mov	r3, r0
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e02a      	b.n	80032b8 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 feb4 	bl	8003fd8 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800327e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800328e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0208 	orr.w	r2, r2, #8
 800329e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 ff33 	bl	800411c <UART_CheckIdleState>
 80032b6:	4603      	mov	r3, r0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	4613      	mov	r3, r2
 80032ce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	f040 8082 	bne.w	80033de <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <HAL_UART_Transmit+0x26>
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e07a      	b.n	80033e0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_UART_Transmit+0x38>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e073      	b.n	80033e0 <HAL_UART_Transmit+0x120>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2221      	movs	r2, #33	; 0x21
 800330c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800330e:	f7fe f833 	bl	8001378 <HAL_GetTick>
 8003312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	88fa      	ldrh	r2, [r7, #6]
 8003318:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	88fa      	ldrh	r2, [r7, #6]
 8003320:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332c:	d108      	bne.n	8003340 <HAL_UART_Transmit+0x80>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d104      	bne.n	8003340 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	61bb      	str	r3, [r7, #24]
 800333e:	e003      	b.n	8003348 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003344:	2300      	movs	r3, #0
 8003346:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003350:	e02d      	b.n	80033ae <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2200      	movs	r2, #0
 800335a:	2180      	movs	r1, #128	; 0x80
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 ff26 	bl	80041ae <UART_WaitOnFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e039      	b.n	80033e0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10b      	bne.n	800338a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	881a      	ldrh	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800337e:	b292      	uxth	r2, r2
 8003380:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	3302      	adds	r3, #2
 8003386:	61bb      	str	r3, [r7, #24]
 8003388:	e008      	b.n	800339c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	781a      	ldrb	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	b292      	uxth	r2, r2
 8003394:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	3301      	adds	r3, #1
 800339a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1cb      	bne.n	8003352 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2200      	movs	r2, #0
 80033c2:	2140      	movs	r1, #64	; 0x40
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 fef2 	bl	80041ae <UART_WaitOnFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e005      	b.n	80033e0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	e000      	b.n	80033e0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80033de:	2302      	movs	r3, #2
  }
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3720      	adds	r7, #32
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08a      	sub	sp, #40	; 0x28
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	4613      	mov	r3, r2
 80033f6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033fc:	2b20      	cmp	r3, #32
 80033fe:	f040 80bf 	bne.w	8003580 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <HAL_UART_Receive+0x26>
 8003408:	88fb      	ldrh	r3, [r7, #6]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e0b7      	b.n	8003582 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_UART_Receive+0x38>
 800341c:	2302      	movs	r3, #2
 800341e:	e0b0      	b.n	8003582 <HAL_UART_Receive+0x19a>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2222      	movs	r2, #34	; 0x22
 8003434:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800343c:	f7fd ff9c 	bl	8001378 <HAL_GetTick>
 8003440:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	88fa      	ldrh	r2, [r7, #6]
 8003446:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	88fa      	ldrh	r2, [r7, #6]
 800344e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345a:	d10e      	bne.n	800347a <HAL_UART_Receive+0x92>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d105      	bne.n	8003470 <HAL_UART_Receive+0x88>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f240 12ff 	movw	r2, #511	; 0x1ff
 800346a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800346e:	e02d      	b.n	80034cc <HAL_UART_Receive+0xe4>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	22ff      	movs	r2, #255	; 0xff
 8003474:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003478:	e028      	b.n	80034cc <HAL_UART_Receive+0xe4>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10d      	bne.n	800349e <HAL_UART_Receive+0xb6>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d104      	bne.n	8003494 <HAL_UART_Receive+0xac>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	22ff      	movs	r2, #255	; 0xff
 800348e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003492:	e01b      	b.n	80034cc <HAL_UART_Receive+0xe4>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	227f      	movs	r2, #127	; 0x7f
 8003498:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800349c:	e016      	b.n	80034cc <HAL_UART_Receive+0xe4>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034a6:	d10d      	bne.n	80034c4 <HAL_UART_Receive+0xdc>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d104      	bne.n	80034ba <HAL_UART_Receive+0xd2>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	227f      	movs	r2, #127	; 0x7f
 80034b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034b8:	e008      	b.n	80034cc <HAL_UART_Receive+0xe4>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	223f      	movs	r2, #63	; 0x3f
 80034be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034c2:	e003      	b.n	80034cc <HAL_UART_Receive+0xe4>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80034d2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034dc:	d108      	bne.n	80034f0 <HAL_UART_Receive+0x108>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d104      	bne.n	80034f0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	61bb      	str	r3, [r7, #24]
 80034ee:	e003      	b.n	80034f8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003500:	e033      	b.n	800356a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2200      	movs	r2, #0
 800350a:	2120      	movs	r1, #32
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 fe4e 	bl	80041ae <UART_WaitOnFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e032      	b.n	8003582 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10c      	bne.n	800353c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003528:	b29a      	uxth	r2, r3
 800352a:	8a7b      	ldrh	r3, [r7, #18]
 800352c:	4013      	ands	r3, r2
 800352e:	b29a      	uxth	r2, r3
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	3302      	adds	r3, #2
 8003538:	61bb      	str	r3, [r7, #24]
 800353a:	e00d      	b.n	8003558 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003542:	b29b      	uxth	r3, r3
 8003544:	b2da      	uxtb	r2, r3
 8003546:	8a7b      	ldrh	r3, [r7, #18]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	4013      	ands	r3, r2
 800354c:	b2da      	uxtb	r2, r3
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	3301      	adds	r3, #1
 8003556:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003570:	b29b      	uxth	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1c5      	bne.n	8003502 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	e000      	b.n	8003582 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003580:	2302      	movs	r3, #2
  }
}
 8003582:	4618      	mov	r0, r3
 8003584:	3720      	adds	r7, #32
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b08a      	sub	sp, #40	; 0x28
 800358e:	af00      	add	r7, sp, #0
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	4613      	mov	r3, r2
 8003596:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800359c:	2b20      	cmp	r3, #32
 800359e:	d13d      	bne.n	800361c <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <HAL_UART_Receive_IT+0x22>
 80035a6:	88fb      	ldrh	r3, [r7, #6]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e036      	b.n	800361e <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_UART_Receive_IT+0x34>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e02f      	b.n	800361e <HAL_UART_Receive_IT+0x94>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d018      	beq.n	800360c <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	e853 3f00 	ldrex	r3, [r3]
 80035e6:	613b      	str	r3, [r7, #16]
   return(result);
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	623b      	str	r3, [r7, #32]
 80035fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fc:	69f9      	ldr	r1, [r7, #28]
 80035fe:	6a3a      	ldr	r2, [r7, #32]
 8003600:	e841 2300 	strex	r3, r2, [r1]
 8003604:	61bb      	str	r3, [r7, #24]
   return(result);
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1e6      	bne.n	80035da <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800360c:	88fb      	ldrh	r3, [r7, #6]
 800360e:	461a      	mov	r2, r3
 8003610:	68b9      	ldr	r1, [r7, #8]
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fe90 	bl	8004338 <UART_Start_Receive_IT>
 8003618:	4603      	mov	r3, r0
 800361a:	e000      	b.n	800361e <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800361c:	2302      	movs	r3, #2
  }
}
 800361e:	4618      	mov	r0, r3
 8003620:	3728      	adds	r7, #40	; 0x28
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b0ba      	sub	sp, #232	; 0xe8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800364e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003652:	f640 030f 	movw	r3, #2063	; 0x80f
 8003656:	4013      	ands	r3, r2
 8003658:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800365c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d115      	bne.n	8003690 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00f      	beq.n	8003690 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d009      	beq.n	8003690 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 82a3 	beq.w	8003bcc <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
      }
      return;
 800368e:	e29d      	b.n	8003bcc <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003690:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 8117 	beq.w	80038c8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800369a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80036a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80036aa:	4b85      	ldr	r3, [pc, #532]	; (80038c0 <HAL_UART_IRQHandler+0x298>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 810a 	beq.w	80038c8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d011      	beq.n	80036e4 <HAL_UART_IRQHandler+0xbc>
 80036c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00b      	beq.n	80036e4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2201      	movs	r2, #1
 80036d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036da:	f043 0201 	orr.w	r2, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d011      	beq.n	8003714 <HAL_UART_IRQHandler+0xec>
 80036f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00b      	beq.n	8003714 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2202      	movs	r2, #2
 8003702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800370a:	f043 0204 	orr.w	r2, r3, #4
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d011      	beq.n	8003744 <HAL_UART_IRQHandler+0x11c>
 8003720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00b      	beq.n	8003744 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2204      	movs	r2, #4
 8003732:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800373a:	f043 0202 	orr.w	r2, r3, #2
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d017      	beq.n	8003780 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d105      	bne.n	8003768 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800375c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003760:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00b      	beq.n	8003780 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2208      	movs	r2, #8
 800376e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003776:	f043 0208 	orr.w	r2, r3, #8
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003788:	2b00      	cmp	r3, #0
 800378a:	d012      	beq.n	80037b2 <HAL_UART_IRQHandler+0x18a>
 800378c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003790:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00c      	beq.n	80037b2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037a8:	f043 0220 	orr.w	r2, r3, #32
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 8209 	beq.w	8003bd0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80037be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00d      	beq.n	80037e6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d007      	beq.n	80037e6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fa:	2b40      	cmp	r3, #64	; 0x40
 80037fc:	d005      	beq.n	800380a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003802:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003806:	2b00      	cmp	r3, #0
 8003808:	d04f      	beq.n	80038aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fe40 	bl	8004490 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381a:	2b40      	cmp	r3, #64	; 0x40
 800381c:	d141      	bne.n	80038a2 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	3308      	adds	r3, #8
 8003824:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003828:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800382c:	e853 3f00 	ldrex	r3, [r3]
 8003830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003834:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800383c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3308      	adds	r3, #8
 8003846:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800384a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800384e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003852:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003856:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800385a:	e841 2300 	strex	r3, r2, [r1]
 800385e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003862:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1d9      	bne.n	800381e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	2b00      	cmp	r3, #0
 8003870:	d013      	beq.n	800389a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003876:	4a13      	ldr	r2, [pc, #76]	; (80038c4 <HAL_UART_IRQHandler+0x29c>)
 8003878:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387e:	4618      	mov	r0, r3
 8003880:	f7fd fef4 	bl	800166c <HAL_DMA_Abort_IT>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d017      	beq.n	80038ba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003894:	4610      	mov	r0, r2
 8003896:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003898:	e00f      	b.n	80038ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f9ac 	bl	8003bf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a0:	e00b      	b.n	80038ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f9a8 	bl	8003bf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a8:	e007      	b.n	80038ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f9a4 	bl	8003bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80038b8:	e18a      	b.n	8003bd0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ba:	bf00      	nop
    return;
 80038bc:	e188      	b.n	8003bd0 <HAL_UART_IRQHandler+0x5a8>
 80038be:	bf00      	nop
 80038c0:	04000120 	.word	0x04000120
 80038c4:	08004557 	.word	0x08004557

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	f040 8143 	bne.w	8003b58 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80038d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038d6:	f003 0310 	and.w	r3, r3, #16
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 813c 	beq.w	8003b58 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80038e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8135 	beq.w	8003b58 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2210      	movs	r2, #16
 80038f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003900:	2b40      	cmp	r3, #64	; 0x40
 8003902:	f040 80b1 	bne.w	8003a68 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003912:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 815c 	beq.w	8003bd4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003922:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003926:	429a      	cmp	r2, r3
 8003928:	f080 8154 	bcs.w	8003bd4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003932:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	2b20      	cmp	r3, #32
 800393e:	f000 8085 	beq.w	8003a4c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800394e:	e853 3f00 	ldrex	r3, [r3]
 8003952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800395a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800395e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800396c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003970:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003974:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003978:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800397c:	e841 2300 	strex	r3, r2, [r1]
 8003980:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003984:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1da      	bne.n	8003942 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3308      	adds	r3, #8
 8003992:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003996:	e853 3f00 	ldrex	r3, [r3]
 800399a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800399c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800399e:	f023 0301 	bic.w	r3, r3, #1
 80039a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	3308      	adds	r3, #8
 80039ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039b0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039b4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039bc:	e841 2300 	strex	r3, r2, [r1]
 80039c0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e1      	bne.n	800398c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3308      	adds	r3, #8
 80039ce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039d2:	e853 3f00 	ldrex	r3, [r3]
 80039d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80039d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	3308      	adds	r3, #8
 80039e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80039ec:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039f4:	e841 2300 	strex	r3, r2, [r1]
 80039f8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1e3      	bne.n	80039c8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a14:	e853 3f00 	ldrex	r3, [r3]
 8003a18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a1c:	f023 0310 	bic.w	r3, r3, #16
 8003a20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a30:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a36:	e841 2300 	strex	r3, r2, [r1]
 8003a3a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1e4      	bne.n	8003a0c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fd fdd7 	bl	80015fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	4619      	mov	r1, r3
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f8d3 	bl	8003c0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a66:	e0b5      	b.n	8003bd4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 80a7 	beq.w	8003bd8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003a8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 80a2 	beq.w	8003bd8 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9c:	e853 3f00 	ldrex	r3, [r3]
 8003aa0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003aa8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ab8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003abc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e4      	bne.n	8003a94 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3308      	adds	r3, #8
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	623b      	str	r3, [r7, #32]
   return(result);
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3308      	adds	r3, #8
 8003aea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003aee:	633a      	str	r2, [r7, #48]	; 0x30
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003af6:	e841 2300 	strex	r3, r2, [r1]
 8003afa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1e3      	bne.n	8003aca <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	e853 3f00 	ldrex	r3, [r3]
 8003b20:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f023 0310 	bic.w	r3, r3, #16
 8003b28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b36:	61fb      	str	r3, [r7, #28]
 8003b38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3a:	69b9      	ldr	r1, [r7, #24]
 8003b3c:	69fa      	ldr	r2, [r7, #28]
 8003b3e:	e841 2300 	strex	r3, r2, [r1]
 8003b42:	617b      	str	r3, [r7, #20]
   return(result);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1e4      	bne.n	8003b14 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b4e:	4619      	mov	r1, r3
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f85b 	bl	8003c0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b56:	e03f      	b.n	8003bd8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00e      	beq.n	8003b82 <HAL_UART_IRQHandler+0x55a>
 8003b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fe87 	bl	800488e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b80:	e02d      	b.n	8003bde <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00e      	beq.n	8003bac <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d008      	beq.n	8003bac <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d01c      	beq.n	8003bdc <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	4798      	blx	r3
    }
    return;
 8003baa:	e017      	b.n	8003bdc <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d012      	beq.n	8003bde <HAL_UART_IRQHandler+0x5b6>
 8003bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00c      	beq.n	8003bde <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 fcdc 	bl	8004582 <UART_EndTransmit_IT>
    return;
 8003bca:	e008      	b.n	8003bde <HAL_UART_IRQHandler+0x5b6>
      return;
 8003bcc:	bf00      	nop
 8003bce:	e006      	b.n	8003bde <HAL_UART_IRQHandler+0x5b6>
    return;
 8003bd0:	bf00      	nop
 8003bd2:	e004      	b.n	8003bde <HAL_UART_IRQHandler+0x5b6>
      return;
 8003bd4:	bf00      	nop
 8003bd6:	e002      	b.n	8003bde <HAL_UART_IRQHandler+0x5b6>
      return;
 8003bd8:	bf00      	nop
 8003bda:	e000      	b.n	8003bde <HAL_UART_IRQHandler+0x5b6>
    return;
 8003bdc:	bf00      	nop
  }

}
 8003bde:	37e8      	adds	r7, #232	; 0xe8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b08f      	sub	sp, #60	; 0x3c
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_HalfDuplex_EnableTransmitter+0x16>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e040      	b.n	8003cbc <HAL_HalfDuplex_EnableTransmitter+0x98>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2224      	movs	r2, #36	; 0x24
 8003c46:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f023 030c 	bic.w	r3, r3, #12
 8003c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c68:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e6      	bne.n	8003c48 <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	e853 3f00 	ldrex	r3, [r3]
 8003c86:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f043 0308 	orr.w	r3, r3, #8
 8003c8e:	633b      	str	r3, [r7, #48]	; 0x30
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	461a      	mov	r2, r3
 8003c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9c:	6979      	ldr	r1, [r7, #20]
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	e841 2300 	strex	r3, r2, [r1]
 8003ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1e6      	bne.n	8003c7a <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	373c      	adds	r7, #60	; 0x3c
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b08f      	sub	sp, #60	; 0x3c
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_HalfDuplex_EnableReceiver+0x16>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e040      	b.n	8003d60 <HAL_HalfDuplex_EnableReceiver+0x98>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2224      	movs	r2, #36	; 0x24
 8003cea:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	e853 3f00 	ldrex	r3, [r3]
 8003cf8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f023 030c 	bic.w	r3, r3, #12
 8003d00:	637b      	str	r3, [r7, #52]	; 0x34
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d0c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e6      	bne.n	8003cec <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f043 0304 	orr.w	r3, r3, #4
 8003d32:	633b      	str	r3, [r7, #48]	; 0x30
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	6979      	ldr	r1, [r7, #20]
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	613b      	str	r3, [r7, #16]
   return(result);
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e6      	bne.n	8003d1e <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	373c      	adds	r7, #60	; 0x3c
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4b8a      	ldr	r3, [pc, #552]	; (8003fc0 <UART_SetConfig+0x254>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6812      	ldr	r2, [r2, #0]
 8003d9e:	6979      	ldr	r1, [r7, #20]
 8003da0:	430b      	orrs	r3, r1
 8003da2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a78      	ldr	r2, [pc, #480]	; (8003fc4 <UART_SetConfig+0x258>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d120      	bne.n	8003e2a <UART_SetConfig+0xbe>
 8003de8:	4b77      	ldr	r3, [pc, #476]	; (8003fc8 <UART_SetConfig+0x25c>)
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	f003 0303 	and.w	r3, r3, #3
 8003df0:	2b03      	cmp	r3, #3
 8003df2:	d817      	bhi.n	8003e24 <UART_SetConfig+0xb8>
 8003df4:	a201      	add	r2, pc, #4	; (adr r2, 8003dfc <UART_SetConfig+0x90>)
 8003df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfa:	bf00      	nop
 8003dfc:	08003e0d 	.word	0x08003e0d
 8003e00:	08003e19 	.word	0x08003e19
 8003e04:	08003e1f 	.word	0x08003e1f
 8003e08:	08003e13 	.word	0x08003e13
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	77fb      	strb	r3, [r7, #31]
 8003e10:	e01d      	b.n	8003e4e <UART_SetConfig+0xe2>
 8003e12:	2302      	movs	r3, #2
 8003e14:	77fb      	strb	r3, [r7, #31]
 8003e16:	e01a      	b.n	8003e4e <UART_SetConfig+0xe2>
 8003e18:	2304      	movs	r3, #4
 8003e1a:	77fb      	strb	r3, [r7, #31]
 8003e1c:	e017      	b.n	8003e4e <UART_SetConfig+0xe2>
 8003e1e:	2308      	movs	r3, #8
 8003e20:	77fb      	strb	r3, [r7, #31]
 8003e22:	e014      	b.n	8003e4e <UART_SetConfig+0xe2>
 8003e24:	2310      	movs	r3, #16
 8003e26:	77fb      	strb	r3, [r7, #31]
 8003e28:	e011      	b.n	8003e4e <UART_SetConfig+0xe2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a67      	ldr	r2, [pc, #412]	; (8003fcc <UART_SetConfig+0x260>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d102      	bne.n	8003e3a <UART_SetConfig+0xce>
 8003e34:	2300      	movs	r3, #0
 8003e36:	77fb      	strb	r3, [r7, #31]
 8003e38:	e009      	b.n	8003e4e <UART_SetConfig+0xe2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a64      	ldr	r2, [pc, #400]	; (8003fd0 <UART_SetConfig+0x264>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d102      	bne.n	8003e4a <UART_SetConfig+0xde>
 8003e44:	2300      	movs	r3, #0
 8003e46:	77fb      	strb	r3, [r7, #31]
 8003e48:	e001      	b.n	8003e4e <UART_SetConfig+0xe2>
 8003e4a:	2310      	movs	r3, #16
 8003e4c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e56:	d15b      	bne.n	8003f10 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003e58:	7ffb      	ldrb	r3, [r7, #31]
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d827      	bhi.n	8003eae <UART_SetConfig+0x142>
 8003e5e:	a201      	add	r2, pc, #4	; (adr r2, 8003e64 <UART_SetConfig+0xf8>)
 8003e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e64:	08003e89 	.word	0x08003e89
 8003e68:	08003e91 	.word	0x08003e91
 8003e6c:	08003e99 	.word	0x08003e99
 8003e70:	08003eaf 	.word	0x08003eaf
 8003e74:	08003e9f 	.word	0x08003e9f
 8003e78:	08003eaf 	.word	0x08003eaf
 8003e7c:	08003eaf 	.word	0x08003eaf
 8003e80:	08003eaf 	.word	0x08003eaf
 8003e84:	08003ea7 	.word	0x08003ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e88:	f7ff f80c 	bl	8002ea4 <HAL_RCC_GetPCLK1Freq>
 8003e8c:	61b8      	str	r0, [r7, #24]
        break;
 8003e8e:	e013      	b.n	8003eb8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e90:	f7ff f82a 	bl	8002ee8 <HAL_RCC_GetPCLK2Freq>
 8003e94:	61b8      	str	r0, [r7, #24]
        break;
 8003e96:	e00f      	b.n	8003eb8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e98:	4b4e      	ldr	r3, [pc, #312]	; (8003fd4 <UART_SetConfig+0x268>)
 8003e9a:	61bb      	str	r3, [r7, #24]
        break;
 8003e9c:	e00c      	b.n	8003eb8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e9e:	f7fe ff8b 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8003ea2:	61b8      	str	r0, [r7, #24]
        break;
 8003ea4:	e008      	b.n	8003eb8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eaa:	61bb      	str	r3, [r7, #24]
        break;
 8003eac:	e004      	b.n	8003eb8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	77bb      	strb	r3, [r7, #30]
        break;
 8003eb6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d074      	beq.n	8003fa8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	005a      	lsls	r2, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	085b      	lsrs	r3, r3, #1
 8003ec8:	441a      	add	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2b0f      	cmp	r3, #15
 8003eda:	d916      	bls.n	8003f0a <UART_SetConfig+0x19e>
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee2:	d212      	bcs.n	8003f0a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f023 030f 	bic.w	r3, r3, #15
 8003eec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	085b      	lsrs	r3, r3, #1
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	89fb      	ldrh	r3, [r7, #14]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	89fa      	ldrh	r2, [r7, #14]
 8003f06:	60da      	str	r2, [r3, #12]
 8003f08:	e04e      	b.n	8003fa8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	77bb      	strb	r3, [r7, #30]
 8003f0e:	e04b      	b.n	8003fa8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f10:	7ffb      	ldrb	r3, [r7, #31]
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d827      	bhi.n	8003f66 <UART_SetConfig+0x1fa>
 8003f16:	a201      	add	r2, pc, #4	; (adr r2, 8003f1c <UART_SetConfig+0x1b0>)
 8003f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1c:	08003f41 	.word	0x08003f41
 8003f20:	08003f49 	.word	0x08003f49
 8003f24:	08003f51 	.word	0x08003f51
 8003f28:	08003f67 	.word	0x08003f67
 8003f2c:	08003f57 	.word	0x08003f57
 8003f30:	08003f67 	.word	0x08003f67
 8003f34:	08003f67 	.word	0x08003f67
 8003f38:	08003f67 	.word	0x08003f67
 8003f3c:	08003f5f 	.word	0x08003f5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f40:	f7fe ffb0 	bl	8002ea4 <HAL_RCC_GetPCLK1Freq>
 8003f44:	61b8      	str	r0, [r7, #24]
        break;
 8003f46:	e013      	b.n	8003f70 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f48:	f7fe ffce 	bl	8002ee8 <HAL_RCC_GetPCLK2Freq>
 8003f4c:	61b8      	str	r0, [r7, #24]
        break;
 8003f4e:	e00f      	b.n	8003f70 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f50:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <UART_SetConfig+0x268>)
 8003f52:	61bb      	str	r3, [r7, #24]
        break;
 8003f54:	e00c      	b.n	8003f70 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f56:	f7fe ff2f 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8003f5a:	61b8      	str	r0, [r7, #24]
        break;
 8003f5c:	e008      	b.n	8003f70 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f62:	61bb      	str	r3, [r7, #24]
        break;
 8003f64:	e004      	b.n	8003f70 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	77bb      	strb	r3, [r7, #30]
        break;
 8003f6e:	bf00      	nop
    }

    if (pclk != 0U)
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d018      	beq.n	8003fa8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	085a      	lsrs	r2, r3, #1
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	441a      	add	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	2b0f      	cmp	r3, #15
 8003f90:	d908      	bls.n	8003fa4 <UART_SetConfig+0x238>
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f98:	d204      	bcs.n	8003fa4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	60da      	str	r2, [r3, #12]
 8003fa2:	e001      	b.n	8003fa8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003fb4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3720      	adds	r7, #32
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	efff69f3 	.word	0xefff69f3
 8003fc4:	40013800 	.word	0x40013800
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	40004400 	.word	0x40004400
 8003fd0:	40004800 	.word	0x40004800
 8003fd4:	007a1200 	.word	0x007a1200

08003fd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	f003 0310 	and.w	r3, r3, #16
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	f003 0320 	and.w	r3, r3, #32
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d01a      	beq.n	80040ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040d6:	d10a      	bne.n	80040ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	605a      	str	r2, [r3, #4]
  }
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af02      	add	r7, sp, #8
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800412c:	f7fd f924 	bl	8001378 <HAL_GetTick>
 8004130:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0308 	and.w	r3, r3, #8
 800413c:	2b08      	cmp	r3, #8
 800413e:	d10e      	bne.n	800415e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004140:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f82d 	bl	80041ae <UART_WaitOnFlagUntilTimeout>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e023      	b.n	80041a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b04      	cmp	r3, #4
 800416a:	d10e      	bne.n	800418a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800416c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f817 	bl	80041ae <UART_WaitOnFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e00d      	b.n	80041a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2220      	movs	r2, #32
 8004194:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b09c      	sub	sp, #112	; 0x70
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	603b      	str	r3, [r7, #0]
 80041ba:	4613      	mov	r3, r2
 80041bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041be:	e0a5      	b.n	800430c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041c6:	f000 80a1 	beq.w	800430c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ca:	f7fd f8d5 	bl	8001378 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d302      	bcc.n	80041e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80041da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d13e      	bne.n	800425e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041e8:	e853 3f00 	ldrex	r3, [r3]
 80041ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041f4:	667b      	str	r3, [r7, #100]	; 0x64
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004200:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004204:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800420c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e6      	bne.n	80041e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3308      	adds	r3, #8
 8004218:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800421c:	e853 3f00 	ldrex	r3, [r3]
 8004220:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004224:	f023 0301 	bic.w	r3, r3, #1
 8004228:	663b      	str	r3, [r7, #96]	; 0x60
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3308      	adds	r3, #8
 8004230:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004232:	64ba      	str	r2, [r7, #72]	; 0x48
 8004234:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004236:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004238:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800423a:	e841 2300 	strex	r3, r2, [r1]
 800423e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1e5      	bne.n	8004212 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2220      	movs	r2, #32
 800424a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e067      	b.n	800432e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d04f      	beq.n	800430c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800427a:	d147      	bne.n	800430c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004284:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800429a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a4:	637b      	str	r3, [r7, #52]	; 0x34
 80042a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042ac:	e841 2300 	strex	r3, r2, [r1]
 80042b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e6      	bne.n	8004286 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3308      	adds	r3, #8
 80042be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	e853 3f00 	ldrex	r3, [r3]
 80042c6:	613b      	str	r3, [r7, #16]
   return(result);
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f023 0301 	bic.w	r3, r3, #1
 80042ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3308      	adds	r3, #8
 80042d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042d8:	623a      	str	r2, [r7, #32]
 80042da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042dc:	69f9      	ldr	r1, [r7, #28]
 80042de:	6a3a      	ldr	r2, [r7, #32]
 80042e0:	e841 2300 	strex	r3, r2, [r1]
 80042e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e5      	bne.n	80042b8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2220      	movs	r2, #32
 80042f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2220      	movs	r2, #32
 80042f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e010      	b.n	800432e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	69da      	ldr	r2, [r3, #28]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	4013      	ands	r3, r2
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	429a      	cmp	r2, r3
 800431a:	bf0c      	ite	eq
 800431c:	2301      	moveq	r3, #1
 800431e:	2300      	movne	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	461a      	mov	r2, r3
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	429a      	cmp	r2, r3
 8004328:	f43f af4a 	beq.w	80041c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3770      	adds	r7, #112	; 0x70
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004338:	b480      	push	{r7}
 800433a:	b091      	sub	sp, #68	; 0x44
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	4613      	mov	r3, r2
 8004344:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	88fa      	ldrh	r2, [r7, #6]
 8004350:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	88fa      	ldrh	r2, [r7, #6]
 8004358:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436a:	d10e      	bne.n	800438a <UART_Start_Receive_IT+0x52>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d105      	bne.n	8004380 <UART_Start_Receive_IT+0x48>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f240 12ff 	movw	r2, #511	; 0x1ff
 800437a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800437e:	e02d      	b.n	80043dc <UART_Start_Receive_IT+0xa4>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	22ff      	movs	r2, #255	; 0xff
 8004384:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004388:	e028      	b.n	80043dc <UART_Start_Receive_IT+0xa4>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10d      	bne.n	80043ae <UART_Start_Receive_IT+0x76>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d104      	bne.n	80043a4 <UART_Start_Receive_IT+0x6c>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	22ff      	movs	r2, #255	; 0xff
 800439e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043a2:	e01b      	b.n	80043dc <UART_Start_Receive_IT+0xa4>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	227f      	movs	r2, #127	; 0x7f
 80043a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043ac:	e016      	b.n	80043dc <UART_Start_Receive_IT+0xa4>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043b6:	d10d      	bne.n	80043d4 <UART_Start_Receive_IT+0x9c>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d104      	bne.n	80043ca <UART_Start_Receive_IT+0x92>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	227f      	movs	r2, #127	; 0x7f
 80043c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043c8:	e008      	b.n	80043dc <UART_Start_Receive_IT+0xa4>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	223f      	movs	r2, #63	; 0x3f
 80043ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043d2:	e003      	b.n	80043dc <UART_Start_Receive_IT+0xa4>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2222      	movs	r2, #34	; 0x22
 80043e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3308      	adds	r3, #8
 80043f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	e853 3f00 	ldrex	r3, [r3]
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3308      	adds	r3, #8
 8004408:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800440a:	637a      	str	r2, [r7, #52]	; 0x34
 800440c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004410:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004412:	e841 2300 	strex	r3, r2, [r1]
 8004416:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1e5      	bne.n	80043ea <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004426:	d107      	bne.n	8004438 <UART_Start_Receive_IT+0x100>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d103      	bne.n	8004438 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4a15      	ldr	r2, [pc, #84]	; (8004488 <UART_Start_Receive_IT+0x150>)
 8004434:	665a      	str	r2, [r3, #100]	; 0x64
 8004436:	e002      	b.n	800443e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4a14      	ldr	r2, [pc, #80]	; (800448c <UART_Start_Receive_IT+0x154>)
 800443c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	613b      	str	r3, [r7, #16]
   return(result);
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800445a:	63bb      	str	r3, [r7, #56]	; 0x38
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	461a      	mov	r2, r3
 8004462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004464:	623b      	str	r3, [r7, #32]
 8004466:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	69f9      	ldr	r1, [r7, #28]
 800446a:	6a3a      	ldr	r2, [r7, #32]
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	61bb      	str	r3, [r7, #24]
   return(result);
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e6      	bne.n	8004446 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3744      	adds	r7, #68	; 0x44
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	08004733 	.word	0x08004733
 800448c:	080045d7 	.word	0x080045d7

08004490 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004490:	b480      	push	{r7}
 8004492:	b095      	sub	sp, #84	; 0x54
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a0:	e853 3f00 	ldrex	r3, [r3]
 80044a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b6:	643b      	str	r3, [r7, #64]	; 0x40
 80044b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044be:	e841 2300 	strex	r3, r2, [r1]
 80044c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1e6      	bne.n	8004498 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3308      	adds	r3, #8
 80044d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	e853 3f00 	ldrex	r3, [r3]
 80044d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	f023 0301 	bic.w	r3, r3, #1
 80044e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3308      	adds	r3, #8
 80044e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044f2:	e841 2300 	strex	r3, r2, [r1]
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1e5      	bne.n	80044ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004502:	2b01      	cmp	r3, #1
 8004504:	d118      	bne.n	8004538 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	e853 3f00 	ldrex	r3, [r3]
 8004512:	60bb      	str	r3, [r7, #8]
   return(result);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f023 0310 	bic.w	r3, r3, #16
 800451a:	647b      	str	r3, [r7, #68]	; 0x44
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004524:	61bb      	str	r3, [r7, #24]
 8004526:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	6979      	ldr	r1, [r7, #20]
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	e841 2300 	strex	r3, r2, [r1]
 8004530:	613b      	str	r3, [r7, #16]
   return(result);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e6      	bne.n	8004506 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	665a      	str	r2, [r3, #100]	; 0x64
}
 800454a:	bf00      	nop
 800454c:	3754      	adds	r7, #84	; 0x54
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b084      	sub	sp, #16
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f7ff fb3f 	bl	8003bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800457a:	bf00      	nop
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b088      	sub	sp, #32
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	e853 3f00 	ldrex	r3, [r3]
 8004596:	60bb      	str	r3, [r7, #8]
   return(result);
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800459e:	61fb      	str	r3, [r7, #28]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	461a      	mov	r2, r3
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	61bb      	str	r3, [r7, #24]
 80045aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ac:	6979      	ldr	r1, [r7, #20]
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	e841 2300 	strex	r3, r2, [r1]
 80045b4:	613b      	str	r3, [r7, #16]
   return(result);
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1e6      	bne.n	800458a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff fb0b 	bl	8003be4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045ce:	bf00      	nop
 80045d0:	3720      	adds	r7, #32
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b096      	sub	sp, #88	; 0x58
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80045e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045ec:	2b22      	cmp	r3, #34	; 0x22
 80045ee:	f040 8094 	bne.w	800471a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80045f8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80045fc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004600:	b2d9      	uxtb	r1, r3
 8004602:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004606:	b2da      	uxtb	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460c:	400a      	ands	r2, r1
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004622:	b29b      	uxth	r3, r3
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d177      	bne.n	800472a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004642:	e853 3f00 	ldrex	r3, [r3]
 8004646:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800464e:	653b      	str	r3, [r7, #80]	; 0x50
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004658:	647b      	str	r3, [r7, #68]	; 0x44
 800465a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800465e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e6      	bne.n	800463a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3308      	adds	r3, #8
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	e853 3f00 	ldrex	r3, [r3]
 800467a:	623b      	str	r3, [r7, #32]
   return(result);
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	f023 0301 	bic.w	r3, r3, #1
 8004682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3308      	adds	r3, #8
 800468a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800468c:	633a      	str	r2, [r7, #48]	; 0x30
 800468e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004690:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004694:	e841 2300 	strex	r3, r2, [r1]
 8004698:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e5      	bne.n	800466c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2220      	movs	r2, #32
 80046a4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d12e      	bne.n	8004712 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	e853 3f00 	ldrex	r3, [r3]
 80046c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0310 	bic.w	r3, r3, #16
 80046ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	461a      	mov	r2, r3
 80046d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046d8:	61fb      	str	r3, [r7, #28]
 80046da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046dc:	69b9      	ldr	r1, [r7, #24]
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	e841 2300 	strex	r3, r2, [r1]
 80046e4:	617b      	str	r3, [r7, #20]
   return(result);
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e6      	bne.n	80046ba <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f003 0310 	and.w	r3, r3, #16
 80046f6:	2b10      	cmp	r3, #16
 80046f8:	d103      	bne.n	8004702 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2210      	movs	r2, #16
 8004700:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004708:	4619      	mov	r1, r3
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7ff fa7e 	bl	8003c0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004710:	e00b      	b.n	800472a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fb fe1e 	bl	8000354 <HAL_UART_RxCpltCallback>
}
 8004718:	e007      	b.n	800472a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699a      	ldr	r2, [r3, #24]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 0208 	orr.w	r2, r2, #8
 8004728:	619a      	str	r2, [r3, #24]
}
 800472a:	bf00      	nop
 800472c:	3758      	adds	r7, #88	; 0x58
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b096      	sub	sp, #88	; 0x58
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004740:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004748:	2b22      	cmp	r3, #34	; 0x22
 800474a:	f040 8094 	bne.w	8004876 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004754:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800475e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004762:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004766:	4013      	ands	r3, r2
 8004768:	b29a      	uxth	r2, r3
 800476a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800476c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004772:	1c9a      	adds	r2, r3, #2
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d177      	bne.n	8004886 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479e:	e853 3f00 	ldrex	r3, [r3]
 80047a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	461a      	mov	r2, r3
 80047b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b4:	643b      	str	r3, [r7, #64]	; 0x40
 80047b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047bc:	e841 2300 	strex	r3, r2, [r1]
 80047c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1e6      	bne.n	8004796 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3308      	adds	r3, #8
 80047ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	e853 3f00 	ldrex	r3, [r3]
 80047d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	f023 0301 	bic.w	r3, r3, #1
 80047de:	64bb      	str	r3, [r7, #72]	; 0x48
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3308      	adds	r3, #8
 80047e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047f0:	e841 2300 	strex	r3, r2, [r1]
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1e5      	bne.n	80047c8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480c:	2b01      	cmp	r3, #1
 800480e:	d12e      	bne.n	800486e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	60bb      	str	r3, [r7, #8]
   return(result);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f023 0310 	bic.w	r3, r3, #16
 800482a:	647b      	str	r3, [r7, #68]	; 0x44
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	6979      	ldr	r1, [r7, #20]
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	e841 2300 	strex	r3, r2, [r1]
 8004840:	613b      	str	r3, [r7, #16]
   return(result);
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e6      	bne.n	8004816 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	2b10      	cmp	r3, #16
 8004854:	d103      	bne.n	800485e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2210      	movs	r2, #16
 800485c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004864:	4619      	mov	r1, r3
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7ff f9d0 	bl	8003c0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800486c:	e00b      	b.n	8004886 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fb fd70 	bl	8000354 <HAL_UART_RxCpltCallback>
}
 8004874:	e007      	b.n	8004886 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	699a      	ldr	r2, [r3, #24]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 0208 	orr.w	r2, r2, #8
 8004884:	619a      	str	r2, [r3, #24]
}
 8004886:	bf00      	nop
 8004888:	3758      	adds	r7, #88	; 0x58
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
	...

080048a4 <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	71fb      	strb	r3, [r7, #7]
 80048ae:	460b      	mov	r3, r1
 80048b0:	71bb      	strb	r3, [r7, #6]
 80048b2:	4613      	mov	r3, r2
 80048b4:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 80048b6:	797b      	ldrb	r3, [r7, #5]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d901      	bls.n	80048c0 <tmc_fillCRC8Table+0x1c>
		return 0;
 80048bc:	2300      	movs	r3, #0
 80048be:	e09e      	b.n	80049fe <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 80048c0:	797a      	ldrb	r2, [r7, #5]
 80048c2:	4951      	ldr	r1, [pc, #324]	; (8004a08 <tmc_fillCRC8Table+0x164>)
 80048c4:	4613      	mov	r3, r2
 80048c6:	01db      	lsls	r3, r3, #7
 80048c8:	4413      	add	r3, r2
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	440b      	add	r3, r1
 80048ce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80048d2:	79fa      	ldrb	r2, [r7, #7]
 80048d4:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 80048d6:	797a      	ldrb	r2, [r7, #5]
 80048d8:	494b      	ldr	r1, [pc, #300]	; (8004a08 <tmc_fillCRC8Table+0x164>)
 80048da:	4613      	mov	r3, r2
 80048dc:	01db      	lsls	r3, r3, #7
 80048de:	4413      	add	r3, r2
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	440b      	add	r3, r1
 80048e4:	f203 1301 	addw	r3, r3, #257	; 0x101
 80048e8:	79ba      	ldrb	r2, [r7, #6]
 80048ea:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 80048ec:	797a      	ldrb	r2, [r7, #5]
 80048ee:	4613      	mov	r3, r2
 80048f0:	01db      	lsls	r3, r3, #7
 80048f2:	4413      	add	r3, r2
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	4a44      	ldr	r2, [pc, #272]	; (8004a08 <tmc_fillCRC8Table+0x164>)
 80048f8:	4413      	add	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 80048fc:	79fb      	ldrb	r3, [r7, #7]
 80048fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004902:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8004904:	4b41      	ldr	r3, [pc, #260]	; (8004a0c <tmc_fillCRC8Table+0x168>)
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	e074      	b.n	80049f4 <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 800490a:	79bb      	ldrb	r3, [r7, #6]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d004      	beq.n	800491a <tmc_fillCRC8Table+0x76>
 8004910:	6978      	ldr	r0, [r7, #20]
 8004912:	f000 f8f7 	bl	8004b04 <flipBitsInBytes>
 8004916:	4603      	mov	r3, r0
 8004918:	e000      	b.n	800491c <tmc_fillCRC8Table+0x78>
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 800491e:	2300      	movs	r3, #0
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	e035      	b.n	8004990 <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	0fdb      	lsrs	r3, r3, #31
 8004928:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <tmc_fillCRC8Table+0x9a>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	e000      	b.n	8004940 <tmc_fillCRC8Table+0x9c>
 800493e:	2300      	movs	r3, #0
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	4053      	eors	r3, r2
 8004944:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <tmc_fillCRC8Table+0xb2>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	021b      	lsls	r3, r3, #8
 8004954:	e000      	b.n	8004958 <tmc_fillCRC8Table+0xb4>
 8004956:	2300      	movs	r3, #0
 8004958:	69fa      	ldr	r2, [r7, #28]
 800495a:	4053      	eors	r3, r2
 800495c:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <tmc_fillCRC8Table+0xca>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	041b      	lsls	r3, r3, #16
 800496c:	e000      	b.n	8004970 <tmc_fillCRC8Table+0xcc>
 800496e:	2300      	movs	r3, #0
 8004970:	69fa      	ldr	r2, [r7, #28]
 8004972:	4053      	eors	r3, r2
 8004974:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 8004976:	7afb      	ldrb	r3, [r7, #11]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <tmc_fillCRC8Table+0xde>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	061b      	lsls	r3, r3, #24
 8004980:	e000      	b.n	8004984 <tmc_fillCRC8Table+0xe0>
 8004982:	2300      	movs	r3, #0
 8004984:	69fa      	ldr	r2, [r7, #28]
 8004986:	4053      	eors	r3, r2
 8004988:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	3301      	adds	r3, #1
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	2b07      	cmp	r3, #7
 8004994:	ddc6      	ble.n	8004924 <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 8004996:	79bb      	ldrb	r3, [r7, #6]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d004      	beq.n	80049a6 <tmc_fillCRC8Table+0x102>
 800499c:	69f8      	ldr	r0, [r7, #28]
 800499e:	f000 f8b1 	bl	8004b04 <flipBitsInBytes>
 80049a2:	4603      	mov	r3, r0
 80049a4:	e000      	b.n	80049a8 <tmc_fillCRC8Table+0x104>
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	61ba      	str	r2, [r7, #24]
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	0a1b      	lsrs	r3, r3, #8
 80049ba:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	61ba      	str	r2, [r7, #24]
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	0a1b      	lsrs	r3, r3, #8
 80049cc:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	61ba      	str	r2, [r7, #24]
 80049d4:	69fa      	ldr	r2, [r7, #28]
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	0a1b      	lsrs	r3, r3, #8
 80049de:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	1c5a      	adds	r2, r3, #1
 80049e4:	61ba      	str	r2, [r7, #24]
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	b2d2      	uxtb	r2, r2
 80049ea:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	4a06      	ldr	r2, [pc, #24]	; (8004a10 <tmc_fillCRC8Table+0x16c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d186      	bne.n	800490a <tmc_fillCRC8Table+0x66>
	}

	return 1;
 80049fc:	2301      	movs	r3, #1
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3720      	adds	r7, #32
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	2000063c 	.word	0x2000063c
 8004a0c:	03020100 	.word	0x03020100
 8004a10:	04030200 	.word	0x04030200

08004a14 <tmc_CRC8>:
 *     uint8_t *data: A pointer to the data that will be CRC'd.
 *     uint32_t bytes: The length of the data buffer.
 *     uint8_t index: The index of the CRC table to be used.
 */
uint8_t tmc_CRC8(uint8_t *data, uint32_t bytes, uint8_t index)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8004a22:	2300      	movs	r3, #0
 8004a24:	75fb      	strb	r3, [r7, #23]
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d901      	bls.n	8004a30 <tmc_CRC8+0x1c>
		return 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	e02c      	b.n	8004a8a <tmc_CRC8+0x76>

	table = &CRCTables[index].table[0];
 8004a30:	79fa      	ldrb	r2, [r7, #7]
 8004a32:	4613      	mov	r3, r2
 8004a34:	01db      	lsls	r3, r3, #7
 8004a36:	4413      	add	r3, r2
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	4a16      	ldr	r2, [pc, #88]	; (8004a94 <tmc_CRC8+0x80>)
 8004a3c:	4413      	add	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]

	while(bytes--)
 8004a40:	e00b      	b.n	8004a5a <tmc_CRC8+0x46>
		result = table[result ^ *data++];
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	60fa      	str	r2, [r7, #12]
 8004a48:	781a      	ldrb	r2, [r3, #0]
 8004a4a:	7dfb      	ldrb	r3, [r7, #23]
 8004a4c:	4053      	eors	r3, r2
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	461a      	mov	r2, r3
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	4413      	add	r3, r2
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	1e5a      	subs	r2, r3, #1
 8004a5e:	60ba      	str	r2, [r7, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1ee      	bne.n	8004a42 <tmc_CRC8+0x2e>

	return (CRCTables[index].isReflected)? flipByte(result) : result;
 8004a64:	79fa      	ldrb	r2, [r7, #7]
 8004a66:	490b      	ldr	r1, [pc, #44]	; (8004a94 <tmc_CRC8+0x80>)
 8004a68:	4613      	mov	r3, r2
 8004a6a:	01db      	lsls	r3, r3, #7
 8004a6c:	4413      	add	r3, r2
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	440b      	add	r3, r1
 8004a72:	f203 1301 	addw	r3, r3, #257	; 0x101
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <tmc_CRC8+0x74>
 8004a7c:	7dfb      	ldrb	r3, [r7, #23]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 f80a 	bl	8004a98 <flipByte>
 8004a84:	4603      	mov	r3, r0
 8004a86:	e000      	b.n	8004a8a <tmc_CRC8+0x76>
 8004a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	2000063c 	.word	0x2000063c

08004a98 <flipByte>:
	return CRCTables[index].isReflected;
}

// Helper functions
static uint8_t flipByte(uint8_t value)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
	// swap odd and even bits
	value = ((value >> 1) & 0x55) | ((value & 0x55) << 1);
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	085b      	lsrs	r3, r3, #1
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	b25b      	sxtb	r3, r3
 8004aaa:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8004aae:	b25a      	sxtb	r2, r3
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	b25b      	sxtb	r3, r3
 8004ab6:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8004aba:	b25b      	sxtb	r3, r3
 8004abc:	4313      	orrs	r3, r2
 8004abe:	b25b      	sxtb	r3, r3
 8004ac0:	71fb      	strb	r3, [r7, #7]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33) | ((value & 0x33) << 2);
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	089b      	lsrs	r3, r3, #2
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	b25b      	sxtb	r3, r3
 8004aca:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8004ace:	b25a      	sxtb	r2, r3
 8004ad0:	79fb      	ldrb	r3, [r7, #7]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	b25b      	sxtb	r3, r3
 8004ad6:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8004ada:	b25b      	sxtb	r3, r3
 8004adc:	4313      	orrs	r3, r2
 8004ade:	b25b      	sxtb	r3, r3
 8004ae0:	71fb      	strb	r3, [r7, #7]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F) | ((value & 0x0F) << 4);
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	091b      	lsrs	r3, r3, #4
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	b25a      	sxtb	r2, r3
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	b25b      	sxtb	r3, r3
 8004af0:	4313      	orrs	r3, r2
 8004af2:	b25b      	sxtb	r3, r3
 8004af4:	71fb      	strb	r3, [r7, #7]

	return value;
 8004af6:	79fb      	ldrb	r3, [r7, #7]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	085b      	lsrs	r3, r3, #1
 8004b10:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	089b      	lsrs	r3, r3, #2
 8004b24:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 8004b30:	4313      	orrs	r3, r2
 8004b32:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	091b      	lsrs	r3, r3, #4
 8004b38:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8004b44:	4313      	orrs	r3, r2
 8004b46:	607b      	str	r3, [r7, #4]

	return value;
 8004b48:	687b      	ldr	r3, [r7, #4]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <tmc2209_writeInt>:
// => CRC wrapper
extern uint8_t tmc2209_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2209_writeInt(TMC2209TypeDef *tmc2209, uint8_t address, int32_t value)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b086      	sub	sp, #24
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	60f8      	str	r0, [r7, #12]
 8004b5e:	460b      	mov	r3, r1
 8004b60:	607a      	str	r2, [r7, #4]
 8004b62:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8];

	data[0] = 0x05;
 8004b64:	2305      	movs	r3, #5
 8004b66:	743b      	strb	r3, [r7, #16]
	data[1] = tmc2209->slaveAddress;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8004b6e:	747b      	strb	r3, [r7, #17]
	data[2] = address | TMC_WRITE_BIT;
 8004b70:	7afb      	ldrb	r3, [r7, #11]
 8004b72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	74bb      	strb	r3, [r7, #18]
	data[3] = (value >> 24) & 0xFF;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	0e1b      	lsrs	r3, r3, #24
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	74fb      	strb	r3, [r7, #19]
	data[4] = (value >> 16) & 0xFF;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	141b      	asrs	r3, r3, #16
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	753b      	strb	r3, [r7, #20]
	data[5] = (value >> 8 ) & 0xFF;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	121b      	asrs	r3, r3, #8
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	757b      	strb	r3, [r7, #21]
	data[6] = (value      ) & 0xFF;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	75bb      	strb	r3, [r7, #22]
	data[7] = tmc2209_CRC8(data, 7);
 8004b98:	f107 0310 	add.w	r3, r7, #16
 8004b9c:	2107      	movs	r1, #7
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fb fb8e 	bl	80002c0 <tmc2209_CRC8>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	75fb      	strb	r3, [r7, #23]

	tmc2209_readWriteArray(tmc2209->config->channel, &data[0], 8, 0);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8004bb0:	f107 0110 	add.w	r1, r7, #16
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	2208      	movs	r2, #8
 8004bb8:	f7fb fb5a 	bl	8000270 <tmc2209_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
 8004bbc:	7afb      	ldrb	r3, [r7, #11]
 8004bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bc2:	72fb      	strb	r3, [r7, #11]
	tmc2209->config->shadowRegister[address] = value;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	7afb      	ldrb	r3, [r7, #11]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	605a      	str	r2, [r3, #4]
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
 8004bd2:	7afb      	ldrb	r3, [r7, #11]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f893 2204 	ldrb.w	r2, [r3, #516]	; 0x204
 8004bdc:	7afb      	ldrb	r3, [r7, #11]
 8004bde:	f042 0208 	orr.w	r2, r2, #8
 8004be2:	b2d1      	uxtb	r1, r2
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4413      	add	r3, r2
 8004be8:	460a      	mov	r2, r1
 8004bea:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 8004bee:	bf00      	nop
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <tmc2209_readInt>:

int32_t tmc2209_readInt(TMC2209TypeDef *tmc2209, uint8_t address)
{
 8004bf6:	b590      	push	{r4, r7, lr}
 8004bf8:	b085      	sub	sp, #20
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
 8004bfe:	460b      	mov	r3, r1
 8004c00:	70fb      	strb	r3, [r7, #3]
	uint8_t data[8] = { 0 };
 8004c02:	2300      	movs	r3, #0
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	2300      	movs	r3, #0
 8004c08:	60fb      	str	r3, [r7, #12]

	address = TMC_ADDRESS(address);
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c10:	70fb      	strb	r3, [r7, #3]

	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
 8004c12:	78fb      	ldrb	r3, [r7, #3]
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	4413      	add	r3, r2
 8004c18:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d106      	bne.n	8004c32 <tmc2209_readInt+0x3c>
		return tmc2209->config->shadowRegister[address];
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	e03f      	b.n	8004cb2 <tmc2209_readInt+0xbc>

	data[0] = 0x05;
 8004c32:	2305      	movs	r3, #5
 8004c34:	723b      	strb	r3, [r7, #8]
	data[1] = tmc2209->slaveAddress;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8004c3c:	727b      	strb	r3, [r7, #9]
	data[2] = address;
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	72bb      	strb	r3, [r7, #10]
	data[3] = tmc2209_CRC8(data, 3);
 8004c42:	f107 0308 	add.w	r3, r7, #8
 8004c46:	2103      	movs	r1, #3
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fb fb39 	bl	80002c0 <tmc2209_CRC8>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	72fb      	strb	r3, [r7, #11]

	tmc2209_readWriteArray(tmc2209->config->channel, data, 4, 8);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8004c5a:	f107 0108 	add.w	r1, r7, #8
 8004c5e:	2308      	movs	r3, #8
 8004c60:	2204      	movs	r2, #4
 8004c62:	f7fb fb05 	bl	8000270 <tmc2209_readWriteArray>

	// Byte 0: Sync nibble correct?
	if (data[0] != 0x05)
 8004c66:	7a3b      	ldrb	r3, [r7, #8]
 8004c68:	2b05      	cmp	r3, #5
 8004c6a:	d001      	beq.n	8004c70 <tmc2209_readInt+0x7a>
		return 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	e020      	b.n	8004cb2 <tmc2209_readInt+0xbc>

	// Byte 1: Master address correct?
	if (data[1] != 0xFF)
 8004c70:	7a7b      	ldrb	r3, [r7, #9]
 8004c72:	2bff      	cmp	r3, #255	; 0xff
 8004c74:	d001      	beq.n	8004c7a <tmc2209_readInt+0x84>
		return 0;
 8004c76:	2300      	movs	r3, #0
 8004c78:	e01b      	b.n	8004cb2 <tmc2209_readInt+0xbc>

	// Byte 2: Address correct?
	if (data[2] != address)
 8004c7a:	7abb      	ldrb	r3, [r7, #10]
 8004c7c:	78fa      	ldrb	r2, [r7, #3]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d001      	beq.n	8004c86 <tmc2209_readInt+0x90>
		return 0;
 8004c82:	2300      	movs	r3, #0
 8004c84:	e015      	b.n	8004cb2 <tmc2209_readInt+0xbc>

	// Byte 7: CRC correct?
	if (data[7] != tmc2209_CRC8(data, 7))
 8004c86:	7bfc      	ldrb	r4, [r7, #15]
 8004c88:	f107 0308 	add.w	r3, r7, #8
 8004c8c:	2107      	movs	r1, #7
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fb fb16 	bl	80002c0 <tmc2209_CRC8>
 8004c94:	4603      	mov	r3, r0
 8004c96:	429c      	cmp	r4, r3
 8004c98:	d001      	beq.n	8004c9e <tmc2209_readInt+0xa8>
		return 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e009      	b.n	8004cb2 <tmc2209_readInt+0xbc>

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
 8004c9e:	7afb      	ldrb	r3, [r7, #11]
 8004ca0:	061a      	lsls	r2, r3, #24
 8004ca2:	7b3b      	ldrb	r3, [r7, #12]
 8004ca4:	041b      	lsls	r3, r3, #16
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	7b7a      	ldrb	r2, [r7, #13]
 8004caa:	0212      	lsls	r2, r2, #8
 8004cac:	4313      	orrs	r3, r2
 8004cae:	7bba      	ldrb	r2, [r7, #14]
 8004cb0:	4313      	orrs	r3, r2
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd90      	pop	{r4, r7, pc}
	...

08004cbc <tmc2209_init>:

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	607b      	str	r3, [r7, #4]
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	72fb      	strb	r3, [r7, #11]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	7aba      	ldrb	r2, [r7, #10]
 8004cd2:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	7afa      	ldrb	r2, [r7, #11]
 8004cec:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	e017      	b.n	8004d36 <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 8004d06:	4a11      	ldr	r2, [pc, #68]	; (8004d4c <tmc2209_init+0x90>)
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	7819      	ldrb	r1, [r3, #0]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004d18:	460a      	mov	r2, r1
 8004d1a:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	6a3a      	ldr	r2, [r7, #32]
 8004d22:	4413      	add	r3, r2
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68f9      	ldr	r1, [r7, #12]
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	3301      	adds	r3, #1
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b7f      	cmp	r3, #127	; 0x7f
 8004d3a:	d9e4      	bls.n	8004d06 <tmc2209_init+0x4a>
	}
}
 8004d3c:	bf00      	nop
 8004d3e:	bf00      	nop
 8004d40:	371c      	adds	r7, #28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	080065a8 	.word	0x080065a8

08004d50 <writeConfiguration>:

static void writeConfiguration(TMC2209TypeDef *tmc2209)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
	uint8_t *ptr = &tmc2209->config->configIndex;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	60bb      	str	r3, [r7, #8]
	const int32_t *settings;

	if(tmc2209->config->state == CONFIG_RESTORE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d131      	bne.n	8004dce <writeConfiguration+0x7e>
	{
		settings = tmc2209->config->shadowRegister;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	60fb      	str	r3, [r7, #12]
		// Find the next restorable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8004d72:	e005      	b.n	8004d80 <writeConfiguration+0x30>
		{
			(*ptr)++;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	b25b      	sxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	db3b      	blt.n	8004e02 <writeConfiguration+0xb2>
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4413      	add	r3, r2
 8004d94:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0e9      	beq.n	8004d74 <writeConfiguration+0x24>
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	461a      	mov	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4413      	add	r3, r2
 8004daa:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d025      	beq.n	8004e02 <writeConfiguration+0xb2>
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0d3      	beq.n	8004d74 <writeConfiguration+0x24>
 8004dcc:	e019      	b.n	8004e02 <writeConfiguration+0xb2>
		}
	}
	else
	{
		settings = tmc2209->registerResetState;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	60fb      	str	r3, [r7, #12]
		// Find the next resettable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 8004dd4:	e005      	b.n	8004de2 <writeConfiguration+0x92>
		{
			(*ptr)++;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	b25b      	sxtb	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	db0a      	blt.n	8004e02 <writeConfiguration+0xb2>
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	461a      	mov	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4413      	add	r3, r2
 8004df6:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004dfa:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d1e9      	bne.n	8004dd6 <writeConfiguration+0x86>
		}
	}

	if(*ptr < TMC2209_REGISTER_COUNT)
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	b25b      	sxtb	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	db12      	blt.n	8004e32 <writeConfiguration+0xe2>
	{
		tmc2209_writeInt(tmc2209, *ptr, settings[*ptr]);
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	7819      	ldrb	r1, [r3, #0]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4413      	add	r3, r2
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff fe99 	bl	8004b56 <tmc2209_writeInt>
		(*ptr)++;
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	701a      	strb	r2, [r3, #0]
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
		}

		tmc2209->config->state = CONFIG_READY;
	}
}
 8004e30:	e013      	b.n	8004e5a <writeConfiguration+0x10a>
		if(tmc2209->config->callback)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d009      	beq.n	8004e52 <writeConfiguration+0x102>
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6812      	ldr	r2, [r2, #0]
 8004e4a:	7812      	ldrb	r2, [r2, #0]
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	4798      	blx	r3
		tmc2209->config->state = CONFIG_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2200      	movs	r2, #0
 8004e58:	701a      	strb	r2, [r3, #0]
}
 8004e5a:	bf00      	nop
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <tmc2209_periodicJob>:

void tmc2209_periodicJob(TMC2209TypeDef *tmc2209, uint32_t tick)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b082      	sub	sp, #8
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	6039      	str	r1, [r7, #0]
	UNUSED(tick);

	if(tmc2209->config->state != CONFIG_READY)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <tmc2209_periodicJob+0x1c>
	{
		writeConfiguration(tmc2209);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7ff ff6a 	bl	8004d50 <writeConfiguration>
		return;
 8004e7c:	bf00      	nop
	}
}
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <tmc2209_reset>:
{
	tmc2209->config->callback = (tmc_callback_config) callback;
}

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <tmc2209_reset+0x16>
		return false;
 8004e96:	2300      	movs	r3, #0
 8004e98:	e028      	b.n	8004eec <tmc2209_reset+0x68>

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	e019      	b.n	8004ed4 <tmc2209_reset+0x50>
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	f023 0308 	bic.w	r3, r3, #8
 8004eb0:	b2d9      	uxtb	r1, r3
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004ebc:	460a      	mov	r2, r1
 8004ebe:	701a      	strb	r2, [r3, #0]
		tmc2209->config->shadowRegister[i] = 0;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	2200      	movs	r2, #0
 8004ecc:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ed8:	d9e2      	bls.n	8004ea0 <tmc2209_reset+0x1c>
	}

	tmc2209->config->state        = CONFIG_RESET;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	705a      	strb	r2, [r3, #1]

	return true;
 8004eea:	2301      	movs	r3, #1
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <tmc2209_restore+0x16>
		return false;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e008      	b.n	8004f20 <tmc2209_restore+0x28>

	tmc2209->config->state        = CONFIG_RESTORE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2202      	movs	r2, #2
 8004f14:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	705a      	strb	r2, [r3, #1]

	return true;
 8004f1e:	2301      	movs	r3, #1
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <__errno>:
 8004f2c:	4b01      	ldr	r3, [pc, #4]	; (8004f34 <__errno+0x8>)
 8004f2e:	6818      	ldr	r0, [r3, #0]
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	2000000c 	.word	0x2000000c

08004f38 <__libc_init_array>:
 8004f38:	b570      	push	{r4, r5, r6, lr}
 8004f3a:	4d0d      	ldr	r5, [pc, #52]	; (8004f70 <__libc_init_array+0x38>)
 8004f3c:	4c0d      	ldr	r4, [pc, #52]	; (8004f74 <__libc_init_array+0x3c>)
 8004f3e:	1b64      	subs	r4, r4, r5
 8004f40:	10a4      	asrs	r4, r4, #2
 8004f42:	2600      	movs	r6, #0
 8004f44:	42a6      	cmp	r6, r4
 8004f46:	d109      	bne.n	8004f5c <__libc_init_array+0x24>
 8004f48:	4d0b      	ldr	r5, [pc, #44]	; (8004f78 <__libc_init_array+0x40>)
 8004f4a:	4c0c      	ldr	r4, [pc, #48]	; (8004f7c <__libc_init_array+0x44>)
 8004f4c:	f001 f8fa 	bl	8006144 <_init>
 8004f50:	1b64      	subs	r4, r4, r5
 8004f52:	10a4      	asrs	r4, r4, #2
 8004f54:	2600      	movs	r6, #0
 8004f56:	42a6      	cmp	r6, r4
 8004f58:	d105      	bne.n	8004f66 <__libc_init_array+0x2e>
 8004f5a:	bd70      	pop	{r4, r5, r6, pc}
 8004f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f60:	4798      	blx	r3
 8004f62:	3601      	adds	r6, #1
 8004f64:	e7ee      	b.n	8004f44 <__libc_init_array+0xc>
 8004f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f6a:	4798      	blx	r3
 8004f6c:	3601      	adds	r6, #1
 8004f6e:	e7f2      	b.n	8004f56 <__libc_init_array+0x1e>
 8004f70:	080066c0 	.word	0x080066c0
 8004f74:	080066c0 	.word	0x080066c0
 8004f78:	080066c0 	.word	0x080066c0
 8004f7c:	080066c4 	.word	0x080066c4

08004f80 <memset>:
 8004f80:	4402      	add	r2, r0
 8004f82:	4603      	mov	r3, r0
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d100      	bne.n	8004f8a <memset+0xa>
 8004f88:	4770      	bx	lr
 8004f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f8e:	e7f9      	b.n	8004f84 <memset+0x4>

08004f90 <iprintf>:
 8004f90:	b40f      	push	{r0, r1, r2, r3}
 8004f92:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <iprintf+0x2c>)
 8004f94:	b513      	push	{r0, r1, r4, lr}
 8004f96:	681c      	ldr	r4, [r3, #0]
 8004f98:	b124      	cbz	r4, 8004fa4 <iprintf+0x14>
 8004f9a:	69a3      	ldr	r3, [r4, #24]
 8004f9c:	b913      	cbnz	r3, 8004fa4 <iprintf+0x14>
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	f000 fb2c 	bl	80055fc <__sinit>
 8004fa4:	ab05      	add	r3, sp, #20
 8004fa6:	9a04      	ldr	r2, [sp, #16]
 8004fa8:	68a1      	ldr	r1, [r4, #8]
 8004faa:	9301      	str	r3, [sp, #4]
 8004fac:	4620      	mov	r0, r4
 8004fae:	f000 fd3d 	bl	8005a2c <_vfiprintf_r>
 8004fb2:	b002      	add	sp, #8
 8004fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fb8:	b004      	add	sp, #16
 8004fba:	4770      	bx	lr
 8004fbc:	2000000c 	.word	0x2000000c

08004fc0 <_puts_r>:
 8004fc0:	b570      	push	{r4, r5, r6, lr}
 8004fc2:	460e      	mov	r6, r1
 8004fc4:	4605      	mov	r5, r0
 8004fc6:	b118      	cbz	r0, 8004fd0 <_puts_r+0x10>
 8004fc8:	6983      	ldr	r3, [r0, #24]
 8004fca:	b90b      	cbnz	r3, 8004fd0 <_puts_r+0x10>
 8004fcc:	f000 fb16 	bl	80055fc <__sinit>
 8004fd0:	69ab      	ldr	r3, [r5, #24]
 8004fd2:	68ac      	ldr	r4, [r5, #8]
 8004fd4:	b913      	cbnz	r3, 8004fdc <_puts_r+0x1c>
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	f000 fb10 	bl	80055fc <__sinit>
 8004fdc:	4b2c      	ldr	r3, [pc, #176]	; (8005090 <_puts_r+0xd0>)
 8004fde:	429c      	cmp	r4, r3
 8004fe0:	d120      	bne.n	8005024 <_puts_r+0x64>
 8004fe2:	686c      	ldr	r4, [r5, #4]
 8004fe4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fe6:	07db      	lsls	r3, r3, #31
 8004fe8:	d405      	bmi.n	8004ff6 <_puts_r+0x36>
 8004fea:	89a3      	ldrh	r3, [r4, #12]
 8004fec:	0598      	lsls	r0, r3, #22
 8004fee:	d402      	bmi.n	8004ff6 <_puts_r+0x36>
 8004ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ff2:	f000 fba1 	bl	8005738 <__retarget_lock_acquire_recursive>
 8004ff6:	89a3      	ldrh	r3, [r4, #12]
 8004ff8:	0719      	lsls	r1, r3, #28
 8004ffa:	d51d      	bpl.n	8005038 <_puts_r+0x78>
 8004ffc:	6923      	ldr	r3, [r4, #16]
 8004ffe:	b1db      	cbz	r3, 8005038 <_puts_r+0x78>
 8005000:	3e01      	subs	r6, #1
 8005002:	68a3      	ldr	r3, [r4, #8]
 8005004:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005008:	3b01      	subs	r3, #1
 800500a:	60a3      	str	r3, [r4, #8]
 800500c:	bb39      	cbnz	r1, 800505e <_puts_r+0x9e>
 800500e:	2b00      	cmp	r3, #0
 8005010:	da38      	bge.n	8005084 <_puts_r+0xc4>
 8005012:	4622      	mov	r2, r4
 8005014:	210a      	movs	r1, #10
 8005016:	4628      	mov	r0, r5
 8005018:	f000 f916 	bl	8005248 <__swbuf_r>
 800501c:	3001      	adds	r0, #1
 800501e:	d011      	beq.n	8005044 <_puts_r+0x84>
 8005020:	250a      	movs	r5, #10
 8005022:	e011      	b.n	8005048 <_puts_r+0x88>
 8005024:	4b1b      	ldr	r3, [pc, #108]	; (8005094 <_puts_r+0xd4>)
 8005026:	429c      	cmp	r4, r3
 8005028:	d101      	bne.n	800502e <_puts_r+0x6e>
 800502a:	68ac      	ldr	r4, [r5, #8]
 800502c:	e7da      	b.n	8004fe4 <_puts_r+0x24>
 800502e:	4b1a      	ldr	r3, [pc, #104]	; (8005098 <_puts_r+0xd8>)
 8005030:	429c      	cmp	r4, r3
 8005032:	bf08      	it	eq
 8005034:	68ec      	ldreq	r4, [r5, #12]
 8005036:	e7d5      	b.n	8004fe4 <_puts_r+0x24>
 8005038:	4621      	mov	r1, r4
 800503a:	4628      	mov	r0, r5
 800503c:	f000 f956 	bl	80052ec <__swsetup_r>
 8005040:	2800      	cmp	r0, #0
 8005042:	d0dd      	beq.n	8005000 <_puts_r+0x40>
 8005044:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005048:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800504a:	07da      	lsls	r2, r3, #31
 800504c:	d405      	bmi.n	800505a <_puts_r+0x9a>
 800504e:	89a3      	ldrh	r3, [r4, #12]
 8005050:	059b      	lsls	r3, r3, #22
 8005052:	d402      	bmi.n	800505a <_puts_r+0x9a>
 8005054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005056:	f000 fb70 	bl	800573a <__retarget_lock_release_recursive>
 800505a:	4628      	mov	r0, r5
 800505c:	bd70      	pop	{r4, r5, r6, pc}
 800505e:	2b00      	cmp	r3, #0
 8005060:	da04      	bge.n	800506c <_puts_r+0xac>
 8005062:	69a2      	ldr	r2, [r4, #24]
 8005064:	429a      	cmp	r2, r3
 8005066:	dc06      	bgt.n	8005076 <_puts_r+0xb6>
 8005068:	290a      	cmp	r1, #10
 800506a:	d004      	beq.n	8005076 <_puts_r+0xb6>
 800506c:	6823      	ldr	r3, [r4, #0]
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	6022      	str	r2, [r4, #0]
 8005072:	7019      	strb	r1, [r3, #0]
 8005074:	e7c5      	b.n	8005002 <_puts_r+0x42>
 8005076:	4622      	mov	r2, r4
 8005078:	4628      	mov	r0, r5
 800507a:	f000 f8e5 	bl	8005248 <__swbuf_r>
 800507e:	3001      	adds	r0, #1
 8005080:	d1bf      	bne.n	8005002 <_puts_r+0x42>
 8005082:	e7df      	b.n	8005044 <_puts_r+0x84>
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	250a      	movs	r5, #10
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	6022      	str	r2, [r4, #0]
 800508c:	701d      	strb	r5, [r3, #0]
 800508e:	e7db      	b.n	8005048 <_puts_r+0x88>
 8005090:	0800664c 	.word	0x0800664c
 8005094:	0800666c 	.word	0x0800666c
 8005098:	0800662c 	.word	0x0800662c

0800509c <puts>:
 800509c:	4b02      	ldr	r3, [pc, #8]	; (80050a8 <puts+0xc>)
 800509e:	4601      	mov	r1, r0
 80050a0:	6818      	ldr	r0, [r3, #0]
 80050a2:	f7ff bf8d 	b.w	8004fc0 <_puts_r>
 80050a6:	bf00      	nop
 80050a8:	2000000c 	.word	0x2000000c

080050ac <setbuf>:
 80050ac:	2900      	cmp	r1, #0
 80050ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050b2:	bf0c      	ite	eq
 80050b4:	2202      	moveq	r2, #2
 80050b6:	2200      	movne	r2, #0
 80050b8:	f000 b800 	b.w	80050bc <setvbuf>

080050bc <setvbuf>:
 80050bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80050c0:	461d      	mov	r5, r3
 80050c2:	4b5d      	ldr	r3, [pc, #372]	; (8005238 <setvbuf+0x17c>)
 80050c4:	681f      	ldr	r7, [r3, #0]
 80050c6:	4604      	mov	r4, r0
 80050c8:	460e      	mov	r6, r1
 80050ca:	4690      	mov	r8, r2
 80050cc:	b127      	cbz	r7, 80050d8 <setvbuf+0x1c>
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	b913      	cbnz	r3, 80050d8 <setvbuf+0x1c>
 80050d2:	4638      	mov	r0, r7
 80050d4:	f000 fa92 	bl	80055fc <__sinit>
 80050d8:	4b58      	ldr	r3, [pc, #352]	; (800523c <setvbuf+0x180>)
 80050da:	429c      	cmp	r4, r3
 80050dc:	d167      	bne.n	80051ae <setvbuf+0xf2>
 80050de:	687c      	ldr	r4, [r7, #4]
 80050e0:	f1b8 0f02 	cmp.w	r8, #2
 80050e4:	d006      	beq.n	80050f4 <setvbuf+0x38>
 80050e6:	f1b8 0f01 	cmp.w	r8, #1
 80050ea:	f200 809f 	bhi.w	800522c <setvbuf+0x170>
 80050ee:	2d00      	cmp	r5, #0
 80050f0:	f2c0 809c 	blt.w	800522c <setvbuf+0x170>
 80050f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050f6:	07db      	lsls	r3, r3, #31
 80050f8:	d405      	bmi.n	8005106 <setvbuf+0x4a>
 80050fa:	89a3      	ldrh	r3, [r4, #12]
 80050fc:	0598      	lsls	r0, r3, #22
 80050fe:	d402      	bmi.n	8005106 <setvbuf+0x4a>
 8005100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005102:	f000 fb19 	bl	8005738 <__retarget_lock_acquire_recursive>
 8005106:	4621      	mov	r1, r4
 8005108:	4638      	mov	r0, r7
 800510a:	f000 f9e3 	bl	80054d4 <_fflush_r>
 800510e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005110:	b141      	cbz	r1, 8005124 <setvbuf+0x68>
 8005112:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005116:	4299      	cmp	r1, r3
 8005118:	d002      	beq.n	8005120 <setvbuf+0x64>
 800511a:	4638      	mov	r0, r7
 800511c:	f000 fb7c 	bl	8005818 <_free_r>
 8005120:	2300      	movs	r3, #0
 8005122:	6363      	str	r3, [r4, #52]	; 0x34
 8005124:	2300      	movs	r3, #0
 8005126:	61a3      	str	r3, [r4, #24]
 8005128:	6063      	str	r3, [r4, #4]
 800512a:	89a3      	ldrh	r3, [r4, #12]
 800512c:	0619      	lsls	r1, r3, #24
 800512e:	d503      	bpl.n	8005138 <setvbuf+0x7c>
 8005130:	6921      	ldr	r1, [r4, #16]
 8005132:	4638      	mov	r0, r7
 8005134:	f000 fb70 	bl	8005818 <_free_r>
 8005138:	89a3      	ldrh	r3, [r4, #12]
 800513a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800513e:	f023 0303 	bic.w	r3, r3, #3
 8005142:	f1b8 0f02 	cmp.w	r8, #2
 8005146:	81a3      	strh	r3, [r4, #12]
 8005148:	d06c      	beq.n	8005224 <setvbuf+0x168>
 800514a:	ab01      	add	r3, sp, #4
 800514c:	466a      	mov	r2, sp
 800514e:	4621      	mov	r1, r4
 8005150:	4638      	mov	r0, r7
 8005152:	f000 faf3 	bl	800573c <__swhatbuf_r>
 8005156:	89a3      	ldrh	r3, [r4, #12]
 8005158:	4318      	orrs	r0, r3
 800515a:	81a0      	strh	r0, [r4, #12]
 800515c:	2d00      	cmp	r5, #0
 800515e:	d130      	bne.n	80051c2 <setvbuf+0x106>
 8005160:	9d00      	ldr	r5, [sp, #0]
 8005162:	4628      	mov	r0, r5
 8005164:	f000 fb50 	bl	8005808 <malloc>
 8005168:	4606      	mov	r6, r0
 800516a:	2800      	cmp	r0, #0
 800516c:	d155      	bne.n	800521a <setvbuf+0x15e>
 800516e:	f8dd 9000 	ldr.w	r9, [sp]
 8005172:	45a9      	cmp	r9, r5
 8005174:	d14a      	bne.n	800520c <setvbuf+0x150>
 8005176:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800517a:	2200      	movs	r2, #0
 800517c:	60a2      	str	r2, [r4, #8]
 800517e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005182:	6022      	str	r2, [r4, #0]
 8005184:	6122      	str	r2, [r4, #16]
 8005186:	2201      	movs	r2, #1
 8005188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800518c:	6162      	str	r2, [r4, #20]
 800518e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005190:	f043 0302 	orr.w	r3, r3, #2
 8005194:	07d2      	lsls	r2, r2, #31
 8005196:	81a3      	strh	r3, [r4, #12]
 8005198:	d405      	bmi.n	80051a6 <setvbuf+0xea>
 800519a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800519e:	d102      	bne.n	80051a6 <setvbuf+0xea>
 80051a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051a2:	f000 faca 	bl	800573a <__retarget_lock_release_recursive>
 80051a6:	4628      	mov	r0, r5
 80051a8:	b003      	add	sp, #12
 80051aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051ae:	4b24      	ldr	r3, [pc, #144]	; (8005240 <setvbuf+0x184>)
 80051b0:	429c      	cmp	r4, r3
 80051b2:	d101      	bne.n	80051b8 <setvbuf+0xfc>
 80051b4:	68bc      	ldr	r4, [r7, #8]
 80051b6:	e793      	b.n	80050e0 <setvbuf+0x24>
 80051b8:	4b22      	ldr	r3, [pc, #136]	; (8005244 <setvbuf+0x188>)
 80051ba:	429c      	cmp	r4, r3
 80051bc:	bf08      	it	eq
 80051be:	68fc      	ldreq	r4, [r7, #12]
 80051c0:	e78e      	b.n	80050e0 <setvbuf+0x24>
 80051c2:	2e00      	cmp	r6, #0
 80051c4:	d0cd      	beq.n	8005162 <setvbuf+0xa6>
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	b913      	cbnz	r3, 80051d0 <setvbuf+0x114>
 80051ca:	4638      	mov	r0, r7
 80051cc:	f000 fa16 	bl	80055fc <__sinit>
 80051d0:	f1b8 0f01 	cmp.w	r8, #1
 80051d4:	bf08      	it	eq
 80051d6:	89a3      	ldrheq	r3, [r4, #12]
 80051d8:	6026      	str	r6, [r4, #0]
 80051da:	bf04      	itt	eq
 80051dc:	f043 0301 	orreq.w	r3, r3, #1
 80051e0:	81a3      	strheq	r3, [r4, #12]
 80051e2:	89a2      	ldrh	r2, [r4, #12]
 80051e4:	f012 0308 	ands.w	r3, r2, #8
 80051e8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80051ec:	d01c      	beq.n	8005228 <setvbuf+0x16c>
 80051ee:	07d3      	lsls	r3, r2, #31
 80051f0:	bf41      	itttt	mi
 80051f2:	2300      	movmi	r3, #0
 80051f4:	426d      	negmi	r5, r5
 80051f6:	60a3      	strmi	r3, [r4, #8]
 80051f8:	61a5      	strmi	r5, [r4, #24]
 80051fa:	bf58      	it	pl
 80051fc:	60a5      	strpl	r5, [r4, #8]
 80051fe:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005200:	f015 0501 	ands.w	r5, r5, #1
 8005204:	d115      	bne.n	8005232 <setvbuf+0x176>
 8005206:	f412 7f00 	tst.w	r2, #512	; 0x200
 800520a:	e7c8      	b.n	800519e <setvbuf+0xe2>
 800520c:	4648      	mov	r0, r9
 800520e:	f000 fafb 	bl	8005808 <malloc>
 8005212:	4606      	mov	r6, r0
 8005214:	2800      	cmp	r0, #0
 8005216:	d0ae      	beq.n	8005176 <setvbuf+0xba>
 8005218:	464d      	mov	r5, r9
 800521a:	89a3      	ldrh	r3, [r4, #12]
 800521c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005220:	81a3      	strh	r3, [r4, #12]
 8005222:	e7d0      	b.n	80051c6 <setvbuf+0x10a>
 8005224:	2500      	movs	r5, #0
 8005226:	e7a8      	b.n	800517a <setvbuf+0xbe>
 8005228:	60a3      	str	r3, [r4, #8]
 800522a:	e7e8      	b.n	80051fe <setvbuf+0x142>
 800522c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005230:	e7b9      	b.n	80051a6 <setvbuf+0xea>
 8005232:	2500      	movs	r5, #0
 8005234:	e7b7      	b.n	80051a6 <setvbuf+0xea>
 8005236:	bf00      	nop
 8005238:	2000000c 	.word	0x2000000c
 800523c:	0800664c 	.word	0x0800664c
 8005240:	0800666c 	.word	0x0800666c
 8005244:	0800662c 	.word	0x0800662c

08005248 <__swbuf_r>:
 8005248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524a:	460e      	mov	r6, r1
 800524c:	4614      	mov	r4, r2
 800524e:	4605      	mov	r5, r0
 8005250:	b118      	cbz	r0, 800525a <__swbuf_r+0x12>
 8005252:	6983      	ldr	r3, [r0, #24]
 8005254:	b90b      	cbnz	r3, 800525a <__swbuf_r+0x12>
 8005256:	f000 f9d1 	bl	80055fc <__sinit>
 800525a:	4b21      	ldr	r3, [pc, #132]	; (80052e0 <__swbuf_r+0x98>)
 800525c:	429c      	cmp	r4, r3
 800525e:	d12b      	bne.n	80052b8 <__swbuf_r+0x70>
 8005260:	686c      	ldr	r4, [r5, #4]
 8005262:	69a3      	ldr	r3, [r4, #24]
 8005264:	60a3      	str	r3, [r4, #8]
 8005266:	89a3      	ldrh	r3, [r4, #12]
 8005268:	071a      	lsls	r2, r3, #28
 800526a:	d52f      	bpl.n	80052cc <__swbuf_r+0x84>
 800526c:	6923      	ldr	r3, [r4, #16]
 800526e:	b36b      	cbz	r3, 80052cc <__swbuf_r+0x84>
 8005270:	6923      	ldr	r3, [r4, #16]
 8005272:	6820      	ldr	r0, [r4, #0]
 8005274:	1ac0      	subs	r0, r0, r3
 8005276:	6963      	ldr	r3, [r4, #20]
 8005278:	b2f6      	uxtb	r6, r6
 800527a:	4283      	cmp	r3, r0
 800527c:	4637      	mov	r7, r6
 800527e:	dc04      	bgt.n	800528a <__swbuf_r+0x42>
 8005280:	4621      	mov	r1, r4
 8005282:	4628      	mov	r0, r5
 8005284:	f000 f926 	bl	80054d4 <_fflush_r>
 8005288:	bb30      	cbnz	r0, 80052d8 <__swbuf_r+0x90>
 800528a:	68a3      	ldr	r3, [r4, #8]
 800528c:	3b01      	subs	r3, #1
 800528e:	60a3      	str	r3, [r4, #8]
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	6022      	str	r2, [r4, #0]
 8005296:	701e      	strb	r6, [r3, #0]
 8005298:	6963      	ldr	r3, [r4, #20]
 800529a:	3001      	adds	r0, #1
 800529c:	4283      	cmp	r3, r0
 800529e:	d004      	beq.n	80052aa <__swbuf_r+0x62>
 80052a0:	89a3      	ldrh	r3, [r4, #12]
 80052a2:	07db      	lsls	r3, r3, #31
 80052a4:	d506      	bpl.n	80052b4 <__swbuf_r+0x6c>
 80052a6:	2e0a      	cmp	r6, #10
 80052a8:	d104      	bne.n	80052b4 <__swbuf_r+0x6c>
 80052aa:	4621      	mov	r1, r4
 80052ac:	4628      	mov	r0, r5
 80052ae:	f000 f911 	bl	80054d4 <_fflush_r>
 80052b2:	b988      	cbnz	r0, 80052d8 <__swbuf_r+0x90>
 80052b4:	4638      	mov	r0, r7
 80052b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052b8:	4b0a      	ldr	r3, [pc, #40]	; (80052e4 <__swbuf_r+0x9c>)
 80052ba:	429c      	cmp	r4, r3
 80052bc:	d101      	bne.n	80052c2 <__swbuf_r+0x7a>
 80052be:	68ac      	ldr	r4, [r5, #8]
 80052c0:	e7cf      	b.n	8005262 <__swbuf_r+0x1a>
 80052c2:	4b09      	ldr	r3, [pc, #36]	; (80052e8 <__swbuf_r+0xa0>)
 80052c4:	429c      	cmp	r4, r3
 80052c6:	bf08      	it	eq
 80052c8:	68ec      	ldreq	r4, [r5, #12]
 80052ca:	e7ca      	b.n	8005262 <__swbuf_r+0x1a>
 80052cc:	4621      	mov	r1, r4
 80052ce:	4628      	mov	r0, r5
 80052d0:	f000 f80c 	bl	80052ec <__swsetup_r>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	d0cb      	beq.n	8005270 <__swbuf_r+0x28>
 80052d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80052dc:	e7ea      	b.n	80052b4 <__swbuf_r+0x6c>
 80052de:	bf00      	nop
 80052e0:	0800664c 	.word	0x0800664c
 80052e4:	0800666c 	.word	0x0800666c
 80052e8:	0800662c 	.word	0x0800662c

080052ec <__swsetup_r>:
 80052ec:	4b32      	ldr	r3, [pc, #200]	; (80053b8 <__swsetup_r+0xcc>)
 80052ee:	b570      	push	{r4, r5, r6, lr}
 80052f0:	681d      	ldr	r5, [r3, #0]
 80052f2:	4606      	mov	r6, r0
 80052f4:	460c      	mov	r4, r1
 80052f6:	b125      	cbz	r5, 8005302 <__swsetup_r+0x16>
 80052f8:	69ab      	ldr	r3, [r5, #24]
 80052fa:	b913      	cbnz	r3, 8005302 <__swsetup_r+0x16>
 80052fc:	4628      	mov	r0, r5
 80052fe:	f000 f97d 	bl	80055fc <__sinit>
 8005302:	4b2e      	ldr	r3, [pc, #184]	; (80053bc <__swsetup_r+0xd0>)
 8005304:	429c      	cmp	r4, r3
 8005306:	d10f      	bne.n	8005328 <__swsetup_r+0x3c>
 8005308:	686c      	ldr	r4, [r5, #4]
 800530a:	89a3      	ldrh	r3, [r4, #12]
 800530c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005310:	0719      	lsls	r1, r3, #28
 8005312:	d42c      	bmi.n	800536e <__swsetup_r+0x82>
 8005314:	06dd      	lsls	r5, r3, #27
 8005316:	d411      	bmi.n	800533c <__swsetup_r+0x50>
 8005318:	2309      	movs	r3, #9
 800531a:	6033      	str	r3, [r6, #0]
 800531c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005320:	81a3      	strh	r3, [r4, #12]
 8005322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005326:	e03e      	b.n	80053a6 <__swsetup_r+0xba>
 8005328:	4b25      	ldr	r3, [pc, #148]	; (80053c0 <__swsetup_r+0xd4>)
 800532a:	429c      	cmp	r4, r3
 800532c:	d101      	bne.n	8005332 <__swsetup_r+0x46>
 800532e:	68ac      	ldr	r4, [r5, #8]
 8005330:	e7eb      	b.n	800530a <__swsetup_r+0x1e>
 8005332:	4b24      	ldr	r3, [pc, #144]	; (80053c4 <__swsetup_r+0xd8>)
 8005334:	429c      	cmp	r4, r3
 8005336:	bf08      	it	eq
 8005338:	68ec      	ldreq	r4, [r5, #12]
 800533a:	e7e6      	b.n	800530a <__swsetup_r+0x1e>
 800533c:	0758      	lsls	r0, r3, #29
 800533e:	d512      	bpl.n	8005366 <__swsetup_r+0x7a>
 8005340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005342:	b141      	cbz	r1, 8005356 <__swsetup_r+0x6a>
 8005344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005348:	4299      	cmp	r1, r3
 800534a:	d002      	beq.n	8005352 <__swsetup_r+0x66>
 800534c:	4630      	mov	r0, r6
 800534e:	f000 fa63 	bl	8005818 <_free_r>
 8005352:	2300      	movs	r3, #0
 8005354:	6363      	str	r3, [r4, #52]	; 0x34
 8005356:	89a3      	ldrh	r3, [r4, #12]
 8005358:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800535c:	81a3      	strh	r3, [r4, #12]
 800535e:	2300      	movs	r3, #0
 8005360:	6063      	str	r3, [r4, #4]
 8005362:	6923      	ldr	r3, [r4, #16]
 8005364:	6023      	str	r3, [r4, #0]
 8005366:	89a3      	ldrh	r3, [r4, #12]
 8005368:	f043 0308 	orr.w	r3, r3, #8
 800536c:	81a3      	strh	r3, [r4, #12]
 800536e:	6923      	ldr	r3, [r4, #16]
 8005370:	b94b      	cbnz	r3, 8005386 <__swsetup_r+0x9a>
 8005372:	89a3      	ldrh	r3, [r4, #12]
 8005374:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800537c:	d003      	beq.n	8005386 <__swsetup_r+0x9a>
 800537e:	4621      	mov	r1, r4
 8005380:	4630      	mov	r0, r6
 8005382:	f000 fa01 	bl	8005788 <__smakebuf_r>
 8005386:	89a0      	ldrh	r0, [r4, #12]
 8005388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800538c:	f010 0301 	ands.w	r3, r0, #1
 8005390:	d00a      	beq.n	80053a8 <__swsetup_r+0xbc>
 8005392:	2300      	movs	r3, #0
 8005394:	60a3      	str	r3, [r4, #8]
 8005396:	6963      	ldr	r3, [r4, #20]
 8005398:	425b      	negs	r3, r3
 800539a:	61a3      	str	r3, [r4, #24]
 800539c:	6923      	ldr	r3, [r4, #16]
 800539e:	b943      	cbnz	r3, 80053b2 <__swsetup_r+0xc6>
 80053a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80053a4:	d1ba      	bne.n	800531c <__swsetup_r+0x30>
 80053a6:	bd70      	pop	{r4, r5, r6, pc}
 80053a8:	0781      	lsls	r1, r0, #30
 80053aa:	bf58      	it	pl
 80053ac:	6963      	ldrpl	r3, [r4, #20]
 80053ae:	60a3      	str	r3, [r4, #8]
 80053b0:	e7f4      	b.n	800539c <__swsetup_r+0xb0>
 80053b2:	2000      	movs	r0, #0
 80053b4:	e7f7      	b.n	80053a6 <__swsetup_r+0xba>
 80053b6:	bf00      	nop
 80053b8:	2000000c 	.word	0x2000000c
 80053bc:	0800664c 	.word	0x0800664c
 80053c0:	0800666c 	.word	0x0800666c
 80053c4:	0800662c 	.word	0x0800662c

080053c8 <__sflush_r>:
 80053c8:	898a      	ldrh	r2, [r1, #12]
 80053ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ce:	4605      	mov	r5, r0
 80053d0:	0710      	lsls	r0, r2, #28
 80053d2:	460c      	mov	r4, r1
 80053d4:	d458      	bmi.n	8005488 <__sflush_r+0xc0>
 80053d6:	684b      	ldr	r3, [r1, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	dc05      	bgt.n	80053e8 <__sflush_r+0x20>
 80053dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053de:	2b00      	cmp	r3, #0
 80053e0:	dc02      	bgt.n	80053e8 <__sflush_r+0x20>
 80053e2:	2000      	movs	r0, #0
 80053e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053ea:	2e00      	cmp	r6, #0
 80053ec:	d0f9      	beq.n	80053e2 <__sflush_r+0x1a>
 80053ee:	2300      	movs	r3, #0
 80053f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053f4:	682f      	ldr	r7, [r5, #0]
 80053f6:	602b      	str	r3, [r5, #0]
 80053f8:	d032      	beq.n	8005460 <__sflush_r+0x98>
 80053fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053fc:	89a3      	ldrh	r3, [r4, #12]
 80053fe:	075a      	lsls	r2, r3, #29
 8005400:	d505      	bpl.n	800540e <__sflush_r+0x46>
 8005402:	6863      	ldr	r3, [r4, #4]
 8005404:	1ac0      	subs	r0, r0, r3
 8005406:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005408:	b10b      	cbz	r3, 800540e <__sflush_r+0x46>
 800540a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800540c:	1ac0      	subs	r0, r0, r3
 800540e:	2300      	movs	r3, #0
 8005410:	4602      	mov	r2, r0
 8005412:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005414:	6a21      	ldr	r1, [r4, #32]
 8005416:	4628      	mov	r0, r5
 8005418:	47b0      	blx	r6
 800541a:	1c43      	adds	r3, r0, #1
 800541c:	89a3      	ldrh	r3, [r4, #12]
 800541e:	d106      	bne.n	800542e <__sflush_r+0x66>
 8005420:	6829      	ldr	r1, [r5, #0]
 8005422:	291d      	cmp	r1, #29
 8005424:	d82c      	bhi.n	8005480 <__sflush_r+0xb8>
 8005426:	4a2a      	ldr	r2, [pc, #168]	; (80054d0 <__sflush_r+0x108>)
 8005428:	40ca      	lsrs	r2, r1
 800542a:	07d6      	lsls	r6, r2, #31
 800542c:	d528      	bpl.n	8005480 <__sflush_r+0xb8>
 800542e:	2200      	movs	r2, #0
 8005430:	6062      	str	r2, [r4, #4]
 8005432:	04d9      	lsls	r1, r3, #19
 8005434:	6922      	ldr	r2, [r4, #16]
 8005436:	6022      	str	r2, [r4, #0]
 8005438:	d504      	bpl.n	8005444 <__sflush_r+0x7c>
 800543a:	1c42      	adds	r2, r0, #1
 800543c:	d101      	bne.n	8005442 <__sflush_r+0x7a>
 800543e:	682b      	ldr	r3, [r5, #0]
 8005440:	b903      	cbnz	r3, 8005444 <__sflush_r+0x7c>
 8005442:	6560      	str	r0, [r4, #84]	; 0x54
 8005444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005446:	602f      	str	r7, [r5, #0]
 8005448:	2900      	cmp	r1, #0
 800544a:	d0ca      	beq.n	80053e2 <__sflush_r+0x1a>
 800544c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005450:	4299      	cmp	r1, r3
 8005452:	d002      	beq.n	800545a <__sflush_r+0x92>
 8005454:	4628      	mov	r0, r5
 8005456:	f000 f9df 	bl	8005818 <_free_r>
 800545a:	2000      	movs	r0, #0
 800545c:	6360      	str	r0, [r4, #52]	; 0x34
 800545e:	e7c1      	b.n	80053e4 <__sflush_r+0x1c>
 8005460:	6a21      	ldr	r1, [r4, #32]
 8005462:	2301      	movs	r3, #1
 8005464:	4628      	mov	r0, r5
 8005466:	47b0      	blx	r6
 8005468:	1c41      	adds	r1, r0, #1
 800546a:	d1c7      	bne.n	80053fc <__sflush_r+0x34>
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0c4      	beq.n	80053fc <__sflush_r+0x34>
 8005472:	2b1d      	cmp	r3, #29
 8005474:	d001      	beq.n	800547a <__sflush_r+0xb2>
 8005476:	2b16      	cmp	r3, #22
 8005478:	d101      	bne.n	800547e <__sflush_r+0xb6>
 800547a:	602f      	str	r7, [r5, #0]
 800547c:	e7b1      	b.n	80053e2 <__sflush_r+0x1a>
 800547e:	89a3      	ldrh	r3, [r4, #12]
 8005480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005484:	81a3      	strh	r3, [r4, #12]
 8005486:	e7ad      	b.n	80053e4 <__sflush_r+0x1c>
 8005488:	690f      	ldr	r7, [r1, #16]
 800548a:	2f00      	cmp	r7, #0
 800548c:	d0a9      	beq.n	80053e2 <__sflush_r+0x1a>
 800548e:	0793      	lsls	r3, r2, #30
 8005490:	680e      	ldr	r6, [r1, #0]
 8005492:	bf08      	it	eq
 8005494:	694b      	ldreq	r3, [r1, #20]
 8005496:	600f      	str	r7, [r1, #0]
 8005498:	bf18      	it	ne
 800549a:	2300      	movne	r3, #0
 800549c:	eba6 0807 	sub.w	r8, r6, r7
 80054a0:	608b      	str	r3, [r1, #8]
 80054a2:	f1b8 0f00 	cmp.w	r8, #0
 80054a6:	dd9c      	ble.n	80053e2 <__sflush_r+0x1a>
 80054a8:	6a21      	ldr	r1, [r4, #32]
 80054aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80054ac:	4643      	mov	r3, r8
 80054ae:	463a      	mov	r2, r7
 80054b0:	4628      	mov	r0, r5
 80054b2:	47b0      	blx	r6
 80054b4:	2800      	cmp	r0, #0
 80054b6:	dc06      	bgt.n	80054c6 <__sflush_r+0xfe>
 80054b8:	89a3      	ldrh	r3, [r4, #12]
 80054ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054be:	81a3      	strh	r3, [r4, #12]
 80054c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054c4:	e78e      	b.n	80053e4 <__sflush_r+0x1c>
 80054c6:	4407      	add	r7, r0
 80054c8:	eba8 0800 	sub.w	r8, r8, r0
 80054cc:	e7e9      	b.n	80054a2 <__sflush_r+0xda>
 80054ce:	bf00      	nop
 80054d0:	20400001 	.word	0x20400001

080054d4 <_fflush_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	690b      	ldr	r3, [r1, #16]
 80054d8:	4605      	mov	r5, r0
 80054da:	460c      	mov	r4, r1
 80054dc:	b913      	cbnz	r3, 80054e4 <_fflush_r+0x10>
 80054de:	2500      	movs	r5, #0
 80054e0:	4628      	mov	r0, r5
 80054e2:	bd38      	pop	{r3, r4, r5, pc}
 80054e4:	b118      	cbz	r0, 80054ee <_fflush_r+0x1a>
 80054e6:	6983      	ldr	r3, [r0, #24]
 80054e8:	b90b      	cbnz	r3, 80054ee <_fflush_r+0x1a>
 80054ea:	f000 f887 	bl	80055fc <__sinit>
 80054ee:	4b14      	ldr	r3, [pc, #80]	; (8005540 <_fflush_r+0x6c>)
 80054f0:	429c      	cmp	r4, r3
 80054f2:	d11b      	bne.n	800552c <_fflush_r+0x58>
 80054f4:	686c      	ldr	r4, [r5, #4]
 80054f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d0ef      	beq.n	80054de <_fflush_r+0xa>
 80054fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005500:	07d0      	lsls	r0, r2, #31
 8005502:	d404      	bmi.n	800550e <_fflush_r+0x3a>
 8005504:	0599      	lsls	r1, r3, #22
 8005506:	d402      	bmi.n	800550e <_fflush_r+0x3a>
 8005508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800550a:	f000 f915 	bl	8005738 <__retarget_lock_acquire_recursive>
 800550e:	4628      	mov	r0, r5
 8005510:	4621      	mov	r1, r4
 8005512:	f7ff ff59 	bl	80053c8 <__sflush_r>
 8005516:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005518:	07da      	lsls	r2, r3, #31
 800551a:	4605      	mov	r5, r0
 800551c:	d4e0      	bmi.n	80054e0 <_fflush_r+0xc>
 800551e:	89a3      	ldrh	r3, [r4, #12]
 8005520:	059b      	lsls	r3, r3, #22
 8005522:	d4dd      	bmi.n	80054e0 <_fflush_r+0xc>
 8005524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005526:	f000 f908 	bl	800573a <__retarget_lock_release_recursive>
 800552a:	e7d9      	b.n	80054e0 <_fflush_r+0xc>
 800552c:	4b05      	ldr	r3, [pc, #20]	; (8005544 <_fflush_r+0x70>)
 800552e:	429c      	cmp	r4, r3
 8005530:	d101      	bne.n	8005536 <_fflush_r+0x62>
 8005532:	68ac      	ldr	r4, [r5, #8]
 8005534:	e7df      	b.n	80054f6 <_fflush_r+0x22>
 8005536:	4b04      	ldr	r3, [pc, #16]	; (8005548 <_fflush_r+0x74>)
 8005538:	429c      	cmp	r4, r3
 800553a:	bf08      	it	eq
 800553c:	68ec      	ldreq	r4, [r5, #12]
 800553e:	e7da      	b.n	80054f6 <_fflush_r+0x22>
 8005540:	0800664c 	.word	0x0800664c
 8005544:	0800666c 	.word	0x0800666c
 8005548:	0800662c 	.word	0x0800662c

0800554c <std>:
 800554c:	2300      	movs	r3, #0
 800554e:	b510      	push	{r4, lr}
 8005550:	4604      	mov	r4, r0
 8005552:	e9c0 3300 	strd	r3, r3, [r0]
 8005556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800555a:	6083      	str	r3, [r0, #8]
 800555c:	8181      	strh	r1, [r0, #12]
 800555e:	6643      	str	r3, [r0, #100]	; 0x64
 8005560:	81c2      	strh	r2, [r0, #14]
 8005562:	6183      	str	r3, [r0, #24]
 8005564:	4619      	mov	r1, r3
 8005566:	2208      	movs	r2, #8
 8005568:	305c      	adds	r0, #92	; 0x5c
 800556a:	f7ff fd09 	bl	8004f80 <memset>
 800556e:	4b05      	ldr	r3, [pc, #20]	; (8005584 <std+0x38>)
 8005570:	6263      	str	r3, [r4, #36]	; 0x24
 8005572:	4b05      	ldr	r3, [pc, #20]	; (8005588 <std+0x3c>)
 8005574:	62a3      	str	r3, [r4, #40]	; 0x28
 8005576:	4b05      	ldr	r3, [pc, #20]	; (800558c <std+0x40>)
 8005578:	62e3      	str	r3, [r4, #44]	; 0x2c
 800557a:	4b05      	ldr	r3, [pc, #20]	; (8005590 <std+0x44>)
 800557c:	6224      	str	r4, [r4, #32]
 800557e:	6323      	str	r3, [r4, #48]	; 0x30
 8005580:	bd10      	pop	{r4, pc}
 8005582:	bf00      	nop
 8005584:	08005fd5 	.word	0x08005fd5
 8005588:	08005ff7 	.word	0x08005ff7
 800558c:	0800602f 	.word	0x0800602f
 8005590:	08006053 	.word	0x08006053

08005594 <_cleanup_r>:
 8005594:	4901      	ldr	r1, [pc, #4]	; (800559c <_cleanup_r+0x8>)
 8005596:	f000 b8af 	b.w	80056f8 <_fwalk_reent>
 800559a:	bf00      	nop
 800559c:	080054d5 	.word	0x080054d5

080055a0 <__sfmoreglue>:
 80055a0:	b570      	push	{r4, r5, r6, lr}
 80055a2:	2268      	movs	r2, #104	; 0x68
 80055a4:	1e4d      	subs	r5, r1, #1
 80055a6:	4355      	muls	r5, r2
 80055a8:	460e      	mov	r6, r1
 80055aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80055ae:	f000 f99f 	bl	80058f0 <_malloc_r>
 80055b2:	4604      	mov	r4, r0
 80055b4:	b140      	cbz	r0, 80055c8 <__sfmoreglue+0x28>
 80055b6:	2100      	movs	r1, #0
 80055b8:	e9c0 1600 	strd	r1, r6, [r0]
 80055bc:	300c      	adds	r0, #12
 80055be:	60a0      	str	r0, [r4, #8]
 80055c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80055c4:	f7ff fcdc 	bl	8004f80 <memset>
 80055c8:	4620      	mov	r0, r4
 80055ca:	bd70      	pop	{r4, r5, r6, pc}

080055cc <__sfp_lock_acquire>:
 80055cc:	4801      	ldr	r0, [pc, #4]	; (80055d4 <__sfp_lock_acquire+0x8>)
 80055ce:	f000 b8b3 	b.w	8005738 <__retarget_lock_acquire_recursive>
 80055d2:	bf00      	nop
 80055d4:	20000841 	.word	0x20000841

080055d8 <__sfp_lock_release>:
 80055d8:	4801      	ldr	r0, [pc, #4]	; (80055e0 <__sfp_lock_release+0x8>)
 80055da:	f000 b8ae 	b.w	800573a <__retarget_lock_release_recursive>
 80055de:	bf00      	nop
 80055e0:	20000841 	.word	0x20000841

080055e4 <__sinit_lock_acquire>:
 80055e4:	4801      	ldr	r0, [pc, #4]	; (80055ec <__sinit_lock_acquire+0x8>)
 80055e6:	f000 b8a7 	b.w	8005738 <__retarget_lock_acquire_recursive>
 80055ea:	bf00      	nop
 80055ec:	20000842 	.word	0x20000842

080055f0 <__sinit_lock_release>:
 80055f0:	4801      	ldr	r0, [pc, #4]	; (80055f8 <__sinit_lock_release+0x8>)
 80055f2:	f000 b8a2 	b.w	800573a <__retarget_lock_release_recursive>
 80055f6:	bf00      	nop
 80055f8:	20000842 	.word	0x20000842

080055fc <__sinit>:
 80055fc:	b510      	push	{r4, lr}
 80055fe:	4604      	mov	r4, r0
 8005600:	f7ff fff0 	bl	80055e4 <__sinit_lock_acquire>
 8005604:	69a3      	ldr	r3, [r4, #24]
 8005606:	b11b      	cbz	r3, 8005610 <__sinit+0x14>
 8005608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800560c:	f7ff bff0 	b.w	80055f0 <__sinit_lock_release>
 8005610:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005614:	6523      	str	r3, [r4, #80]	; 0x50
 8005616:	4b13      	ldr	r3, [pc, #76]	; (8005664 <__sinit+0x68>)
 8005618:	4a13      	ldr	r2, [pc, #76]	; (8005668 <__sinit+0x6c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	62a2      	str	r2, [r4, #40]	; 0x28
 800561e:	42a3      	cmp	r3, r4
 8005620:	bf04      	itt	eq
 8005622:	2301      	moveq	r3, #1
 8005624:	61a3      	streq	r3, [r4, #24]
 8005626:	4620      	mov	r0, r4
 8005628:	f000 f820 	bl	800566c <__sfp>
 800562c:	6060      	str	r0, [r4, #4]
 800562e:	4620      	mov	r0, r4
 8005630:	f000 f81c 	bl	800566c <__sfp>
 8005634:	60a0      	str	r0, [r4, #8]
 8005636:	4620      	mov	r0, r4
 8005638:	f000 f818 	bl	800566c <__sfp>
 800563c:	2200      	movs	r2, #0
 800563e:	60e0      	str	r0, [r4, #12]
 8005640:	2104      	movs	r1, #4
 8005642:	6860      	ldr	r0, [r4, #4]
 8005644:	f7ff ff82 	bl	800554c <std>
 8005648:	68a0      	ldr	r0, [r4, #8]
 800564a:	2201      	movs	r2, #1
 800564c:	2109      	movs	r1, #9
 800564e:	f7ff ff7d 	bl	800554c <std>
 8005652:	68e0      	ldr	r0, [r4, #12]
 8005654:	2202      	movs	r2, #2
 8005656:	2112      	movs	r1, #18
 8005658:	f7ff ff78 	bl	800554c <std>
 800565c:	2301      	movs	r3, #1
 800565e:	61a3      	str	r3, [r4, #24]
 8005660:	e7d2      	b.n	8005608 <__sinit+0xc>
 8005662:	bf00      	nop
 8005664:	08006628 	.word	0x08006628
 8005668:	08005595 	.word	0x08005595

0800566c <__sfp>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	4607      	mov	r7, r0
 8005670:	f7ff ffac 	bl	80055cc <__sfp_lock_acquire>
 8005674:	4b1e      	ldr	r3, [pc, #120]	; (80056f0 <__sfp+0x84>)
 8005676:	681e      	ldr	r6, [r3, #0]
 8005678:	69b3      	ldr	r3, [r6, #24]
 800567a:	b913      	cbnz	r3, 8005682 <__sfp+0x16>
 800567c:	4630      	mov	r0, r6
 800567e:	f7ff ffbd 	bl	80055fc <__sinit>
 8005682:	3648      	adds	r6, #72	; 0x48
 8005684:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005688:	3b01      	subs	r3, #1
 800568a:	d503      	bpl.n	8005694 <__sfp+0x28>
 800568c:	6833      	ldr	r3, [r6, #0]
 800568e:	b30b      	cbz	r3, 80056d4 <__sfp+0x68>
 8005690:	6836      	ldr	r6, [r6, #0]
 8005692:	e7f7      	b.n	8005684 <__sfp+0x18>
 8005694:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005698:	b9d5      	cbnz	r5, 80056d0 <__sfp+0x64>
 800569a:	4b16      	ldr	r3, [pc, #88]	; (80056f4 <__sfp+0x88>)
 800569c:	60e3      	str	r3, [r4, #12]
 800569e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056a2:	6665      	str	r5, [r4, #100]	; 0x64
 80056a4:	f000 f847 	bl	8005736 <__retarget_lock_init_recursive>
 80056a8:	f7ff ff96 	bl	80055d8 <__sfp_lock_release>
 80056ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80056b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80056b4:	6025      	str	r5, [r4, #0]
 80056b6:	61a5      	str	r5, [r4, #24]
 80056b8:	2208      	movs	r2, #8
 80056ba:	4629      	mov	r1, r5
 80056bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80056c0:	f7ff fc5e 	bl	8004f80 <memset>
 80056c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80056c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80056cc:	4620      	mov	r0, r4
 80056ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056d0:	3468      	adds	r4, #104	; 0x68
 80056d2:	e7d9      	b.n	8005688 <__sfp+0x1c>
 80056d4:	2104      	movs	r1, #4
 80056d6:	4638      	mov	r0, r7
 80056d8:	f7ff ff62 	bl	80055a0 <__sfmoreglue>
 80056dc:	4604      	mov	r4, r0
 80056de:	6030      	str	r0, [r6, #0]
 80056e0:	2800      	cmp	r0, #0
 80056e2:	d1d5      	bne.n	8005690 <__sfp+0x24>
 80056e4:	f7ff ff78 	bl	80055d8 <__sfp_lock_release>
 80056e8:	230c      	movs	r3, #12
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	e7ee      	b.n	80056cc <__sfp+0x60>
 80056ee:	bf00      	nop
 80056f0:	08006628 	.word	0x08006628
 80056f4:	ffff0001 	.word	0xffff0001

080056f8 <_fwalk_reent>:
 80056f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056fc:	4606      	mov	r6, r0
 80056fe:	4688      	mov	r8, r1
 8005700:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005704:	2700      	movs	r7, #0
 8005706:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800570a:	f1b9 0901 	subs.w	r9, r9, #1
 800570e:	d505      	bpl.n	800571c <_fwalk_reent+0x24>
 8005710:	6824      	ldr	r4, [r4, #0]
 8005712:	2c00      	cmp	r4, #0
 8005714:	d1f7      	bne.n	8005706 <_fwalk_reent+0xe>
 8005716:	4638      	mov	r0, r7
 8005718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800571c:	89ab      	ldrh	r3, [r5, #12]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d907      	bls.n	8005732 <_fwalk_reent+0x3a>
 8005722:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005726:	3301      	adds	r3, #1
 8005728:	d003      	beq.n	8005732 <_fwalk_reent+0x3a>
 800572a:	4629      	mov	r1, r5
 800572c:	4630      	mov	r0, r6
 800572e:	47c0      	blx	r8
 8005730:	4307      	orrs	r7, r0
 8005732:	3568      	adds	r5, #104	; 0x68
 8005734:	e7e9      	b.n	800570a <_fwalk_reent+0x12>

08005736 <__retarget_lock_init_recursive>:
 8005736:	4770      	bx	lr

08005738 <__retarget_lock_acquire_recursive>:
 8005738:	4770      	bx	lr

0800573a <__retarget_lock_release_recursive>:
 800573a:	4770      	bx	lr

0800573c <__swhatbuf_r>:
 800573c:	b570      	push	{r4, r5, r6, lr}
 800573e:	460e      	mov	r6, r1
 8005740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005744:	2900      	cmp	r1, #0
 8005746:	b096      	sub	sp, #88	; 0x58
 8005748:	4614      	mov	r4, r2
 800574a:	461d      	mov	r5, r3
 800574c:	da08      	bge.n	8005760 <__swhatbuf_r+0x24>
 800574e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	602a      	str	r2, [r5, #0]
 8005756:	061a      	lsls	r2, r3, #24
 8005758:	d410      	bmi.n	800577c <__swhatbuf_r+0x40>
 800575a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800575e:	e00e      	b.n	800577e <__swhatbuf_r+0x42>
 8005760:	466a      	mov	r2, sp
 8005762:	f000 fc9d 	bl	80060a0 <_fstat_r>
 8005766:	2800      	cmp	r0, #0
 8005768:	dbf1      	blt.n	800574e <__swhatbuf_r+0x12>
 800576a:	9a01      	ldr	r2, [sp, #4]
 800576c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005770:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005774:	425a      	negs	r2, r3
 8005776:	415a      	adcs	r2, r3
 8005778:	602a      	str	r2, [r5, #0]
 800577a:	e7ee      	b.n	800575a <__swhatbuf_r+0x1e>
 800577c:	2340      	movs	r3, #64	; 0x40
 800577e:	2000      	movs	r0, #0
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	b016      	add	sp, #88	; 0x58
 8005784:	bd70      	pop	{r4, r5, r6, pc}
	...

08005788 <__smakebuf_r>:
 8005788:	898b      	ldrh	r3, [r1, #12]
 800578a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800578c:	079d      	lsls	r5, r3, #30
 800578e:	4606      	mov	r6, r0
 8005790:	460c      	mov	r4, r1
 8005792:	d507      	bpl.n	80057a4 <__smakebuf_r+0x1c>
 8005794:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005798:	6023      	str	r3, [r4, #0]
 800579a:	6123      	str	r3, [r4, #16]
 800579c:	2301      	movs	r3, #1
 800579e:	6163      	str	r3, [r4, #20]
 80057a0:	b002      	add	sp, #8
 80057a2:	bd70      	pop	{r4, r5, r6, pc}
 80057a4:	ab01      	add	r3, sp, #4
 80057a6:	466a      	mov	r2, sp
 80057a8:	f7ff ffc8 	bl	800573c <__swhatbuf_r>
 80057ac:	9900      	ldr	r1, [sp, #0]
 80057ae:	4605      	mov	r5, r0
 80057b0:	4630      	mov	r0, r6
 80057b2:	f000 f89d 	bl	80058f0 <_malloc_r>
 80057b6:	b948      	cbnz	r0, 80057cc <__smakebuf_r+0x44>
 80057b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057bc:	059a      	lsls	r2, r3, #22
 80057be:	d4ef      	bmi.n	80057a0 <__smakebuf_r+0x18>
 80057c0:	f023 0303 	bic.w	r3, r3, #3
 80057c4:	f043 0302 	orr.w	r3, r3, #2
 80057c8:	81a3      	strh	r3, [r4, #12]
 80057ca:	e7e3      	b.n	8005794 <__smakebuf_r+0xc>
 80057cc:	4b0d      	ldr	r3, [pc, #52]	; (8005804 <__smakebuf_r+0x7c>)
 80057ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80057d0:	89a3      	ldrh	r3, [r4, #12]
 80057d2:	6020      	str	r0, [r4, #0]
 80057d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d8:	81a3      	strh	r3, [r4, #12]
 80057da:	9b00      	ldr	r3, [sp, #0]
 80057dc:	6163      	str	r3, [r4, #20]
 80057de:	9b01      	ldr	r3, [sp, #4]
 80057e0:	6120      	str	r0, [r4, #16]
 80057e2:	b15b      	cbz	r3, 80057fc <__smakebuf_r+0x74>
 80057e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057e8:	4630      	mov	r0, r6
 80057ea:	f000 fc6b 	bl	80060c4 <_isatty_r>
 80057ee:	b128      	cbz	r0, 80057fc <__smakebuf_r+0x74>
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	f023 0303 	bic.w	r3, r3, #3
 80057f6:	f043 0301 	orr.w	r3, r3, #1
 80057fa:	81a3      	strh	r3, [r4, #12]
 80057fc:	89a0      	ldrh	r0, [r4, #12]
 80057fe:	4305      	orrs	r5, r0
 8005800:	81a5      	strh	r5, [r4, #12]
 8005802:	e7cd      	b.n	80057a0 <__smakebuf_r+0x18>
 8005804:	08005595 	.word	0x08005595

08005808 <malloc>:
 8005808:	4b02      	ldr	r3, [pc, #8]	; (8005814 <malloc+0xc>)
 800580a:	4601      	mov	r1, r0
 800580c:	6818      	ldr	r0, [r3, #0]
 800580e:	f000 b86f 	b.w	80058f0 <_malloc_r>
 8005812:	bf00      	nop
 8005814:	2000000c 	.word	0x2000000c

08005818 <_free_r>:
 8005818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800581a:	2900      	cmp	r1, #0
 800581c:	d044      	beq.n	80058a8 <_free_r+0x90>
 800581e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005822:	9001      	str	r0, [sp, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	f1a1 0404 	sub.w	r4, r1, #4
 800582a:	bfb8      	it	lt
 800582c:	18e4      	addlt	r4, r4, r3
 800582e:	f000 fc6b 	bl	8006108 <__malloc_lock>
 8005832:	4a1e      	ldr	r2, [pc, #120]	; (80058ac <_free_r+0x94>)
 8005834:	9801      	ldr	r0, [sp, #4]
 8005836:	6813      	ldr	r3, [r2, #0]
 8005838:	b933      	cbnz	r3, 8005848 <_free_r+0x30>
 800583a:	6063      	str	r3, [r4, #4]
 800583c:	6014      	str	r4, [r2, #0]
 800583e:	b003      	add	sp, #12
 8005840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005844:	f000 bc66 	b.w	8006114 <__malloc_unlock>
 8005848:	42a3      	cmp	r3, r4
 800584a:	d908      	bls.n	800585e <_free_r+0x46>
 800584c:	6825      	ldr	r5, [r4, #0]
 800584e:	1961      	adds	r1, r4, r5
 8005850:	428b      	cmp	r3, r1
 8005852:	bf01      	itttt	eq
 8005854:	6819      	ldreq	r1, [r3, #0]
 8005856:	685b      	ldreq	r3, [r3, #4]
 8005858:	1949      	addeq	r1, r1, r5
 800585a:	6021      	streq	r1, [r4, #0]
 800585c:	e7ed      	b.n	800583a <_free_r+0x22>
 800585e:	461a      	mov	r2, r3
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	b10b      	cbz	r3, 8005868 <_free_r+0x50>
 8005864:	42a3      	cmp	r3, r4
 8005866:	d9fa      	bls.n	800585e <_free_r+0x46>
 8005868:	6811      	ldr	r1, [r2, #0]
 800586a:	1855      	adds	r5, r2, r1
 800586c:	42a5      	cmp	r5, r4
 800586e:	d10b      	bne.n	8005888 <_free_r+0x70>
 8005870:	6824      	ldr	r4, [r4, #0]
 8005872:	4421      	add	r1, r4
 8005874:	1854      	adds	r4, r2, r1
 8005876:	42a3      	cmp	r3, r4
 8005878:	6011      	str	r1, [r2, #0]
 800587a:	d1e0      	bne.n	800583e <_free_r+0x26>
 800587c:	681c      	ldr	r4, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	6053      	str	r3, [r2, #4]
 8005882:	4421      	add	r1, r4
 8005884:	6011      	str	r1, [r2, #0]
 8005886:	e7da      	b.n	800583e <_free_r+0x26>
 8005888:	d902      	bls.n	8005890 <_free_r+0x78>
 800588a:	230c      	movs	r3, #12
 800588c:	6003      	str	r3, [r0, #0]
 800588e:	e7d6      	b.n	800583e <_free_r+0x26>
 8005890:	6825      	ldr	r5, [r4, #0]
 8005892:	1961      	adds	r1, r4, r5
 8005894:	428b      	cmp	r3, r1
 8005896:	bf04      	itt	eq
 8005898:	6819      	ldreq	r1, [r3, #0]
 800589a:	685b      	ldreq	r3, [r3, #4]
 800589c:	6063      	str	r3, [r4, #4]
 800589e:	bf04      	itt	eq
 80058a0:	1949      	addeq	r1, r1, r5
 80058a2:	6021      	streq	r1, [r4, #0]
 80058a4:	6054      	str	r4, [r2, #4]
 80058a6:	e7ca      	b.n	800583e <_free_r+0x26>
 80058a8:	b003      	add	sp, #12
 80058aa:	bd30      	pop	{r4, r5, pc}
 80058ac:	20000844 	.word	0x20000844

080058b0 <sbrk_aligned>:
 80058b0:	b570      	push	{r4, r5, r6, lr}
 80058b2:	4e0e      	ldr	r6, [pc, #56]	; (80058ec <sbrk_aligned+0x3c>)
 80058b4:	460c      	mov	r4, r1
 80058b6:	6831      	ldr	r1, [r6, #0]
 80058b8:	4605      	mov	r5, r0
 80058ba:	b911      	cbnz	r1, 80058c2 <sbrk_aligned+0x12>
 80058bc:	f000 fb7a 	bl	8005fb4 <_sbrk_r>
 80058c0:	6030      	str	r0, [r6, #0]
 80058c2:	4621      	mov	r1, r4
 80058c4:	4628      	mov	r0, r5
 80058c6:	f000 fb75 	bl	8005fb4 <_sbrk_r>
 80058ca:	1c43      	adds	r3, r0, #1
 80058cc:	d00a      	beq.n	80058e4 <sbrk_aligned+0x34>
 80058ce:	1cc4      	adds	r4, r0, #3
 80058d0:	f024 0403 	bic.w	r4, r4, #3
 80058d4:	42a0      	cmp	r0, r4
 80058d6:	d007      	beq.n	80058e8 <sbrk_aligned+0x38>
 80058d8:	1a21      	subs	r1, r4, r0
 80058da:	4628      	mov	r0, r5
 80058dc:	f000 fb6a 	bl	8005fb4 <_sbrk_r>
 80058e0:	3001      	adds	r0, #1
 80058e2:	d101      	bne.n	80058e8 <sbrk_aligned+0x38>
 80058e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80058e8:	4620      	mov	r0, r4
 80058ea:	bd70      	pop	{r4, r5, r6, pc}
 80058ec:	20000848 	.word	0x20000848

080058f0 <_malloc_r>:
 80058f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058f4:	1ccd      	adds	r5, r1, #3
 80058f6:	f025 0503 	bic.w	r5, r5, #3
 80058fa:	3508      	adds	r5, #8
 80058fc:	2d0c      	cmp	r5, #12
 80058fe:	bf38      	it	cc
 8005900:	250c      	movcc	r5, #12
 8005902:	2d00      	cmp	r5, #0
 8005904:	4607      	mov	r7, r0
 8005906:	db01      	blt.n	800590c <_malloc_r+0x1c>
 8005908:	42a9      	cmp	r1, r5
 800590a:	d905      	bls.n	8005918 <_malloc_r+0x28>
 800590c:	230c      	movs	r3, #12
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	2600      	movs	r6, #0
 8005912:	4630      	mov	r0, r6
 8005914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005918:	4e2e      	ldr	r6, [pc, #184]	; (80059d4 <_malloc_r+0xe4>)
 800591a:	f000 fbf5 	bl	8006108 <__malloc_lock>
 800591e:	6833      	ldr	r3, [r6, #0]
 8005920:	461c      	mov	r4, r3
 8005922:	bb34      	cbnz	r4, 8005972 <_malloc_r+0x82>
 8005924:	4629      	mov	r1, r5
 8005926:	4638      	mov	r0, r7
 8005928:	f7ff ffc2 	bl	80058b0 <sbrk_aligned>
 800592c:	1c43      	adds	r3, r0, #1
 800592e:	4604      	mov	r4, r0
 8005930:	d14d      	bne.n	80059ce <_malloc_r+0xde>
 8005932:	6834      	ldr	r4, [r6, #0]
 8005934:	4626      	mov	r6, r4
 8005936:	2e00      	cmp	r6, #0
 8005938:	d140      	bne.n	80059bc <_malloc_r+0xcc>
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	4631      	mov	r1, r6
 800593e:	4638      	mov	r0, r7
 8005940:	eb04 0803 	add.w	r8, r4, r3
 8005944:	f000 fb36 	bl	8005fb4 <_sbrk_r>
 8005948:	4580      	cmp	r8, r0
 800594a:	d13a      	bne.n	80059c2 <_malloc_r+0xd2>
 800594c:	6821      	ldr	r1, [r4, #0]
 800594e:	3503      	adds	r5, #3
 8005950:	1a6d      	subs	r5, r5, r1
 8005952:	f025 0503 	bic.w	r5, r5, #3
 8005956:	3508      	adds	r5, #8
 8005958:	2d0c      	cmp	r5, #12
 800595a:	bf38      	it	cc
 800595c:	250c      	movcc	r5, #12
 800595e:	4629      	mov	r1, r5
 8005960:	4638      	mov	r0, r7
 8005962:	f7ff ffa5 	bl	80058b0 <sbrk_aligned>
 8005966:	3001      	adds	r0, #1
 8005968:	d02b      	beq.n	80059c2 <_malloc_r+0xd2>
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	442b      	add	r3, r5
 800596e:	6023      	str	r3, [r4, #0]
 8005970:	e00e      	b.n	8005990 <_malloc_r+0xa0>
 8005972:	6822      	ldr	r2, [r4, #0]
 8005974:	1b52      	subs	r2, r2, r5
 8005976:	d41e      	bmi.n	80059b6 <_malloc_r+0xc6>
 8005978:	2a0b      	cmp	r2, #11
 800597a:	d916      	bls.n	80059aa <_malloc_r+0xba>
 800597c:	1961      	adds	r1, r4, r5
 800597e:	42a3      	cmp	r3, r4
 8005980:	6025      	str	r5, [r4, #0]
 8005982:	bf18      	it	ne
 8005984:	6059      	strne	r1, [r3, #4]
 8005986:	6863      	ldr	r3, [r4, #4]
 8005988:	bf08      	it	eq
 800598a:	6031      	streq	r1, [r6, #0]
 800598c:	5162      	str	r2, [r4, r5]
 800598e:	604b      	str	r3, [r1, #4]
 8005990:	4638      	mov	r0, r7
 8005992:	f104 060b 	add.w	r6, r4, #11
 8005996:	f000 fbbd 	bl	8006114 <__malloc_unlock>
 800599a:	f026 0607 	bic.w	r6, r6, #7
 800599e:	1d23      	adds	r3, r4, #4
 80059a0:	1af2      	subs	r2, r6, r3
 80059a2:	d0b6      	beq.n	8005912 <_malloc_r+0x22>
 80059a4:	1b9b      	subs	r3, r3, r6
 80059a6:	50a3      	str	r3, [r4, r2]
 80059a8:	e7b3      	b.n	8005912 <_malloc_r+0x22>
 80059aa:	6862      	ldr	r2, [r4, #4]
 80059ac:	42a3      	cmp	r3, r4
 80059ae:	bf0c      	ite	eq
 80059b0:	6032      	streq	r2, [r6, #0]
 80059b2:	605a      	strne	r2, [r3, #4]
 80059b4:	e7ec      	b.n	8005990 <_malloc_r+0xa0>
 80059b6:	4623      	mov	r3, r4
 80059b8:	6864      	ldr	r4, [r4, #4]
 80059ba:	e7b2      	b.n	8005922 <_malloc_r+0x32>
 80059bc:	4634      	mov	r4, r6
 80059be:	6876      	ldr	r6, [r6, #4]
 80059c0:	e7b9      	b.n	8005936 <_malloc_r+0x46>
 80059c2:	230c      	movs	r3, #12
 80059c4:	603b      	str	r3, [r7, #0]
 80059c6:	4638      	mov	r0, r7
 80059c8:	f000 fba4 	bl	8006114 <__malloc_unlock>
 80059cc:	e7a1      	b.n	8005912 <_malloc_r+0x22>
 80059ce:	6025      	str	r5, [r4, #0]
 80059d0:	e7de      	b.n	8005990 <_malloc_r+0xa0>
 80059d2:	bf00      	nop
 80059d4:	20000844 	.word	0x20000844

080059d8 <__sfputc_r>:
 80059d8:	6893      	ldr	r3, [r2, #8]
 80059da:	3b01      	subs	r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	b410      	push	{r4}
 80059e0:	6093      	str	r3, [r2, #8]
 80059e2:	da08      	bge.n	80059f6 <__sfputc_r+0x1e>
 80059e4:	6994      	ldr	r4, [r2, #24]
 80059e6:	42a3      	cmp	r3, r4
 80059e8:	db01      	blt.n	80059ee <__sfputc_r+0x16>
 80059ea:	290a      	cmp	r1, #10
 80059ec:	d103      	bne.n	80059f6 <__sfputc_r+0x1e>
 80059ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059f2:	f7ff bc29 	b.w	8005248 <__swbuf_r>
 80059f6:	6813      	ldr	r3, [r2, #0]
 80059f8:	1c58      	adds	r0, r3, #1
 80059fa:	6010      	str	r0, [r2, #0]
 80059fc:	7019      	strb	r1, [r3, #0]
 80059fe:	4608      	mov	r0, r1
 8005a00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <__sfputs_r>:
 8005a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a08:	4606      	mov	r6, r0
 8005a0a:	460f      	mov	r7, r1
 8005a0c:	4614      	mov	r4, r2
 8005a0e:	18d5      	adds	r5, r2, r3
 8005a10:	42ac      	cmp	r4, r5
 8005a12:	d101      	bne.n	8005a18 <__sfputs_r+0x12>
 8005a14:	2000      	movs	r0, #0
 8005a16:	e007      	b.n	8005a28 <__sfputs_r+0x22>
 8005a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a1c:	463a      	mov	r2, r7
 8005a1e:	4630      	mov	r0, r6
 8005a20:	f7ff ffda 	bl	80059d8 <__sfputc_r>
 8005a24:	1c43      	adds	r3, r0, #1
 8005a26:	d1f3      	bne.n	8005a10 <__sfputs_r+0xa>
 8005a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a2c <_vfiprintf_r>:
 8005a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a30:	460d      	mov	r5, r1
 8005a32:	b09d      	sub	sp, #116	; 0x74
 8005a34:	4614      	mov	r4, r2
 8005a36:	4698      	mov	r8, r3
 8005a38:	4606      	mov	r6, r0
 8005a3a:	b118      	cbz	r0, 8005a44 <_vfiprintf_r+0x18>
 8005a3c:	6983      	ldr	r3, [r0, #24]
 8005a3e:	b90b      	cbnz	r3, 8005a44 <_vfiprintf_r+0x18>
 8005a40:	f7ff fddc 	bl	80055fc <__sinit>
 8005a44:	4b89      	ldr	r3, [pc, #548]	; (8005c6c <_vfiprintf_r+0x240>)
 8005a46:	429d      	cmp	r5, r3
 8005a48:	d11b      	bne.n	8005a82 <_vfiprintf_r+0x56>
 8005a4a:	6875      	ldr	r5, [r6, #4]
 8005a4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a4e:	07d9      	lsls	r1, r3, #31
 8005a50:	d405      	bmi.n	8005a5e <_vfiprintf_r+0x32>
 8005a52:	89ab      	ldrh	r3, [r5, #12]
 8005a54:	059a      	lsls	r2, r3, #22
 8005a56:	d402      	bmi.n	8005a5e <_vfiprintf_r+0x32>
 8005a58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a5a:	f7ff fe6d 	bl	8005738 <__retarget_lock_acquire_recursive>
 8005a5e:	89ab      	ldrh	r3, [r5, #12]
 8005a60:	071b      	lsls	r3, r3, #28
 8005a62:	d501      	bpl.n	8005a68 <_vfiprintf_r+0x3c>
 8005a64:	692b      	ldr	r3, [r5, #16]
 8005a66:	b9eb      	cbnz	r3, 8005aa4 <_vfiprintf_r+0x78>
 8005a68:	4629      	mov	r1, r5
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	f7ff fc3e 	bl	80052ec <__swsetup_r>
 8005a70:	b1c0      	cbz	r0, 8005aa4 <_vfiprintf_r+0x78>
 8005a72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a74:	07dc      	lsls	r4, r3, #31
 8005a76:	d50e      	bpl.n	8005a96 <_vfiprintf_r+0x6a>
 8005a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a7c:	b01d      	add	sp, #116	; 0x74
 8005a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a82:	4b7b      	ldr	r3, [pc, #492]	; (8005c70 <_vfiprintf_r+0x244>)
 8005a84:	429d      	cmp	r5, r3
 8005a86:	d101      	bne.n	8005a8c <_vfiprintf_r+0x60>
 8005a88:	68b5      	ldr	r5, [r6, #8]
 8005a8a:	e7df      	b.n	8005a4c <_vfiprintf_r+0x20>
 8005a8c:	4b79      	ldr	r3, [pc, #484]	; (8005c74 <_vfiprintf_r+0x248>)
 8005a8e:	429d      	cmp	r5, r3
 8005a90:	bf08      	it	eq
 8005a92:	68f5      	ldreq	r5, [r6, #12]
 8005a94:	e7da      	b.n	8005a4c <_vfiprintf_r+0x20>
 8005a96:	89ab      	ldrh	r3, [r5, #12]
 8005a98:	0598      	lsls	r0, r3, #22
 8005a9a:	d4ed      	bmi.n	8005a78 <_vfiprintf_r+0x4c>
 8005a9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a9e:	f7ff fe4c 	bl	800573a <__retarget_lock_release_recursive>
 8005aa2:	e7e9      	b.n	8005a78 <_vfiprintf_r+0x4c>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa8:	2320      	movs	r3, #32
 8005aaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005aae:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ab2:	2330      	movs	r3, #48	; 0x30
 8005ab4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005c78 <_vfiprintf_r+0x24c>
 8005ab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005abc:	f04f 0901 	mov.w	r9, #1
 8005ac0:	4623      	mov	r3, r4
 8005ac2:	469a      	mov	sl, r3
 8005ac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ac8:	b10a      	cbz	r2, 8005ace <_vfiprintf_r+0xa2>
 8005aca:	2a25      	cmp	r2, #37	; 0x25
 8005acc:	d1f9      	bne.n	8005ac2 <_vfiprintf_r+0x96>
 8005ace:	ebba 0b04 	subs.w	fp, sl, r4
 8005ad2:	d00b      	beq.n	8005aec <_vfiprintf_r+0xc0>
 8005ad4:	465b      	mov	r3, fp
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	4629      	mov	r1, r5
 8005ada:	4630      	mov	r0, r6
 8005adc:	f7ff ff93 	bl	8005a06 <__sfputs_r>
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	f000 80aa 	beq.w	8005c3a <_vfiprintf_r+0x20e>
 8005ae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ae8:	445a      	add	r2, fp
 8005aea:	9209      	str	r2, [sp, #36]	; 0x24
 8005aec:	f89a 3000 	ldrb.w	r3, [sl]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 80a2 	beq.w	8005c3a <_vfiprintf_r+0x20e>
 8005af6:	2300      	movs	r3, #0
 8005af8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005afc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b00:	f10a 0a01 	add.w	sl, sl, #1
 8005b04:	9304      	str	r3, [sp, #16]
 8005b06:	9307      	str	r3, [sp, #28]
 8005b08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b0c:	931a      	str	r3, [sp, #104]	; 0x68
 8005b0e:	4654      	mov	r4, sl
 8005b10:	2205      	movs	r2, #5
 8005b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b16:	4858      	ldr	r0, [pc, #352]	; (8005c78 <_vfiprintf_r+0x24c>)
 8005b18:	f7fa fb5a 	bl	80001d0 <memchr>
 8005b1c:	9a04      	ldr	r2, [sp, #16]
 8005b1e:	b9d8      	cbnz	r0, 8005b58 <_vfiprintf_r+0x12c>
 8005b20:	06d1      	lsls	r1, r2, #27
 8005b22:	bf44      	itt	mi
 8005b24:	2320      	movmi	r3, #32
 8005b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b2a:	0713      	lsls	r3, r2, #28
 8005b2c:	bf44      	itt	mi
 8005b2e:	232b      	movmi	r3, #43	; 0x2b
 8005b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b34:	f89a 3000 	ldrb.w	r3, [sl]
 8005b38:	2b2a      	cmp	r3, #42	; 0x2a
 8005b3a:	d015      	beq.n	8005b68 <_vfiprintf_r+0x13c>
 8005b3c:	9a07      	ldr	r2, [sp, #28]
 8005b3e:	4654      	mov	r4, sl
 8005b40:	2000      	movs	r0, #0
 8005b42:	f04f 0c0a 	mov.w	ip, #10
 8005b46:	4621      	mov	r1, r4
 8005b48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b4c:	3b30      	subs	r3, #48	; 0x30
 8005b4e:	2b09      	cmp	r3, #9
 8005b50:	d94e      	bls.n	8005bf0 <_vfiprintf_r+0x1c4>
 8005b52:	b1b0      	cbz	r0, 8005b82 <_vfiprintf_r+0x156>
 8005b54:	9207      	str	r2, [sp, #28]
 8005b56:	e014      	b.n	8005b82 <_vfiprintf_r+0x156>
 8005b58:	eba0 0308 	sub.w	r3, r0, r8
 8005b5c:	fa09 f303 	lsl.w	r3, r9, r3
 8005b60:	4313      	orrs	r3, r2
 8005b62:	9304      	str	r3, [sp, #16]
 8005b64:	46a2      	mov	sl, r4
 8005b66:	e7d2      	b.n	8005b0e <_vfiprintf_r+0xe2>
 8005b68:	9b03      	ldr	r3, [sp, #12]
 8005b6a:	1d19      	adds	r1, r3, #4
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	9103      	str	r1, [sp, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	bfbb      	ittet	lt
 8005b74:	425b      	neglt	r3, r3
 8005b76:	f042 0202 	orrlt.w	r2, r2, #2
 8005b7a:	9307      	strge	r3, [sp, #28]
 8005b7c:	9307      	strlt	r3, [sp, #28]
 8005b7e:	bfb8      	it	lt
 8005b80:	9204      	strlt	r2, [sp, #16]
 8005b82:	7823      	ldrb	r3, [r4, #0]
 8005b84:	2b2e      	cmp	r3, #46	; 0x2e
 8005b86:	d10c      	bne.n	8005ba2 <_vfiprintf_r+0x176>
 8005b88:	7863      	ldrb	r3, [r4, #1]
 8005b8a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b8c:	d135      	bne.n	8005bfa <_vfiprintf_r+0x1ce>
 8005b8e:	9b03      	ldr	r3, [sp, #12]
 8005b90:	1d1a      	adds	r2, r3, #4
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	9203      	str	r2, [sp, #12]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	bfb8      	it	lt
 8005b9a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005b9e:	3402      	adds	r4, #2
 8005ba0:	9305      	str	r3, [sp, #20]
 8005ba2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005c88 <_vfiprintf_r+0x25c>
 8005ba6:	7821      	ldrb	r1, [r4, #0]
 8005ba8:	2203      	movs	r2, #3
 8005baa:	4650      	mov	r0, sl
 8005bac:	f7fa fb10 	bl	80001d0 <memchr>
 8005bb0:	b140      	cbz	r0, 8005bc4 <_vfiprintf_r+0x198>
 8005bb2:	2340      	movs	r3, #64	; 0x40
 8005bb4:	eba0 000a 	sub.w	r0, r0, sl
 8005bb8:	fa03 f000 	lsl.w	r0, r3, r0
 8005bbc:	9b04      	ldr	r3, [sp, #16]
 8005bbe:	4303      	orrs	r3, r0
 8005bc0:	3401      	adds	r4, #1
 8005bc2:	9304      	str	r3, [sp, #16]
 8005bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bc8:	482c      	ldr	r0, [pc, #176]	; (8005c7c <_vfiprintf_r+0x250>)
 8005bca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bce:	2206      	movs	r2, #6
 8005bd0:	f7fa fafe 	bl	80001d0 <memchr>
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d03f      	beq.n	8005c58 <_vfiprintf_r+0x22c>
 8005bd8:	4b29      	ldr	r3, [pc, #164]	; (8005c80 <_vfiprintf_r+0x254>)
 8005bda:	bb1b      	cbnz	r3, 8005c24 <_vfiprintf_r+0x1f8>
 8005bdc:	9b03      	ldr	r3, [sp, #12]
 8005bde:	3307      	adds	r3, #7
 8005be0:	f023 0307 	bic.w	r3, r3, #7
 8005be4:	3308      	adds	r3, #8
 8005be6:	9303      	str	r3, [sp, #12]
 8005be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bea:	443b      	add	r3, r7
 8005bec:	9309      	str	r3, [sp, #36]	; 0x24
 8005bee:	e767      	b.n	8005ac0 <_vfiprintf_r+0x94>
 8005bf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bf4:	460c      	mov	r4, r1
 8005bf6:	2001      	movs	r0, #1
 8005bf8:	e7a5      	b.n	8005b46 <_vfiprintf_r+0x11a>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	3401      	adds	r4, #1
 8005bfe:	9305      	str	r3, [sp, #20]
 8005c00:	4619      	mov	r1, r3
 8005c02:	f04f 0c0a 	mov.w	ip, #10
 8005c06:	4620      	mov	r0, r4
 8005c08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c0c:	3a30      	subs	r2, #48	; 0x30
 8005c0e:	2a09      	cmp	r2, #9
 8005c10:	d903      	bls.n	8005c1a <_vfiprintf_r+0x1ee>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0c5      	beq.n	8005ba2 <_vfiprintf_r+0x176>
 8005c16:	9105      	str	r1, [sp, #20]
 8005c18:	e7c3      	b.n	8005ba2 <_vfiprintf_r+0x176>
 8005c1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c1e:	4604      	mov	r4, r0
 8005c20:	2301      	movs	r3, #1
 8005c22:	e7f0      	b.n	8005c06 <_vfiprintf_r+0x1da>
 8005c24:	ab03      	add	r3, sp, #12
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	462a      	mov	r2, r5
 8005c2a:	4b16      	ldr	r3, [pc, #88]	; (8005c84 <_vfiprintf_r+0x258>)
 8005c2c:	a904      	add	r1, sp, #16
 8005c2e:	4630      	mov	r0, r6
 8005c30:	f3af 8000 	nop.w
 8005c34:	4607      	mov	r7, r0
 8005c36:	1c78      	adds	r0, r7, #1
 8005c38:	d1d6      	bne.n	8005be8 <_vfiprintf_r+0x1bc>
 8005c3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c3c:	07d9      	lsls	r1, r3, #31
 8005c3e:	d405      	bmi.n	8005c4c <_vfiprintf_r+0x220>
 8005c40:	89ab      	ldrh	r3, [r5, #12]
 8005c42:	059a      	lsls	r2, r3, #22
 8005c44:	d402      	bmi.n	8005c4c <_vfiprintf_r+0x220>
 8005c46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c48:	f7ff fd77 	bl	800573a <__retarget_lock_release_recursive>
 8005c4c:	89ab      	ldrh	r3, [r5, #12]
 8005c4e:	065b      	lsls	r3, r3, #25
 8005c50:	f53f af12 	bmi.w	8005a78 <_vfiprintf_r+0x4c>
 8005c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c56:	e711      	b.n	8005a7c <_vfiprintf_r+0x50>
 8005c58:	ab03      	add	r3, sp, #12
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	462a      	mov	r2, r5
 8005c5e:	4b09      	ldr	r3, [pc, #36]	; (8005c84 <_vfiprintf_r+0x258>)
 8005c60:	a904      	add	r1, sp, #16
 8005c62:	4630      	mov	r0, r6
 8005c64:	f000 f880 	bl	8005d68 <_printf_i>
 8005c68:	e7e4      	b.n	8005c34 <_vfiprintf_r+0x208>
 8005c6a:	bf00      	nop
 8005c6c:	0800664c 	.word	0x0800664c
 8005c70:	0800666c 	.word	0x0800666c
 8005c74:	0800662c 	.word	0x0800662c
 8005c78:	0800668c 	.word	0x0800668c
 8005c7c:	08006696 	.word	0x08006696
 8005c80:	00000000 	.word	0x00000000
 8005c84:	08005a07 	.word	0x08005a07
 8005c88:	08006692 	.word	0x08006692

08005c8c <_printf_common>:
 8005c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c90:	4616      	mov	r6, r2
 8005c92:	4699      	mov	r9, r3
 8005c94:	688a      	ldr	r2, [r1, #8]
 8005c96:	690b      	ldr	r3, [r1, #16]
 8005c98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	bfb8      	it	lt
 8005ca0:	4613      	movlt	r3, r2
 8005ca2:	6033      	str	r3, [r6, #0]
 8005ca4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ca8:	4607      	mov	r7, r0
 8005caa:	460c      	mov	r4, r1
 8005cac:	b10a      	cbz	r2, 8005cb2 <_printf_common+0x26>
 8005cae:	3301      	adds	r3, #1
 8005cb0:	6033      	str	r3, [r6, #0]
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	0699      	lsls	r1, r3, #26
 8005cb6:	bf42      	ittt	mi
 8005cb8:	6833      	ldrmi	r3, [r6, #0]
 8005cba:	3302      	addmi	r3, #2
 8005cbc:	6033      	strmi	r3, [r6, #0]
 8005cbe:	6825      	ldr	r5, [r4, #0]
 8005cc0:	f015 0506 	ands.w	r5, r5, #6
 8005cc4:	d106      	bne.n	8005cd4 <_printf_common+0x48>
 8005cc6:	f104 0a19 	add.w	sl, r4, #25
 8005cca:	68e3      	ldr	r3, [r4, #12]
 8005ccc:	6832      	ldr	r2, [r6, #0]
 8005cce:	1a9b      	subs	r3, r3, r2
 8005cd0:	42ab      	cmp	r3, r5
 8005cd2:	dc26      	bgt.n	8005d22 <_printf_common+0x96>
 8005cd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cd8:	1e13      	subs	r3, r2, #0
 8005cda:	6822      	ldr	r2, [r4, #0]
 8005cdc:	bf18      	it	ne
 8005cde:	2301      	movne	r3, #1
 8005ce0:	0692      	lsls	r2, r2, #26
 8005ce2:	d42b      	bmi.n	8005d3c <_printf_common+0xb0>
 8005ce4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ce8:	4649      	mov	r1, r9
 8005cea:	4638      	mov	r0, r7
 8005cec:	47c0      	blx	r8
 8005cee:	3001      	adds	r0, #1
 8005cf0:	d01e      	beq.n	8005d30 <_printf_common+0xa4>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	68e5      	ldr	r5, [r4, #12]
 8005cf6:	6832      	ldr	r2, [r6, #0]
 8005cf8:	f003 0306 	and.w	r3, r3, #6
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	bf08      	it	eq
 8005d00:	1aad      	subeq	r5, r5, r2
 8005d02:	68a3      	ldr	r3, [r4, #8]
 8005d04:	6922      	ldr	r2, [r4, #16]
 8005d06:	bf0c      	ite	eq
 8005d08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d0c:	2500      	movne	r5, #0
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	bfc4      	itt	gt
 8005d12:	1a9b      	subgt	r3, r3, r2
 8005d14:	18ed      	addgt	r5, r5, r3
 8005d16:	2600      	movs	r6, #0
 8005d18:	341a      	adds	r4, #26
 8005d1a:	42b5      	cmp	r5, r6
 8005d1c:	d11a      	bne.n	8005d54 <_printf_common+0xc8>
 8005d1e:	2000      	movs	r0, #0
 8005d20:	e008      	b.n	8005d34 <_printf_common+0xa8>
 8005d22:	2301      	movs	r3, #1
 8005d24:	4652      	mov	r2, sl
 8005d26:	4649      	mov	r1, r9
 8005d28:	4638      	mov	r0, r7
 8005d2a:	47c0      	blx	r8
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	d103      	bne.n	8005d38 <_printf_common+0xac>
 8005d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d38:	3501      	adds	r5, #1
 8005d3a:	e7c6      	b.n	8005cca <_printf_common+0x3e>
 8005d3c:	18e1      	adds	r1, r4, r3
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	2030      	movs	r0, #48	; 0x30
 8005d42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d46:	4422      	add	r2, r4
 8005d48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d50:	3302      	adds	r3, #2
 8005d52:	e7c7      	b.n	8005ce4 <_printf_common+0x58>
 8005d54:	2301      	movs	r3, #1
 8005d56:	4622      	mov	r2, r4
 8005d58:	4649      	mov	r1, r9
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	47c0      	blx	r8
 8005d5e:	3001      	adds	r0, #1
 8005d60:	d0e6      	beq.n	8005d30 <_printf_common+0xa4>
 8005d62:	3601      	adds	r6, #1
 8005d64:	e7d9      	b.n	8005d1a <_printf_common+0x8e>
	...

08005d68 <_printf_i>:
 8005d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d6c:	7e0f      	ldrb	r7, [r1, #24]
 8005d6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d70:	2f78      	cmp	r7, #120	; 0x78
 8005d72:	4691      	mov	r9, r2
 8005d74:	4680      	mov	r8, r0
 8005d76:	460c      	mov	r4, r1
 8005d78:	469a      	mov	sl, r3
 8005d7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d7e:	d807      	bhi.n	8005d90 <_printf_i+0x28>
 8005d80:	2f62      	cmp	r7, #98	; 0x62
 8005d82:	d80a      	bhi.n	8005d9a <_printf_i+0x32>
 8005d84:	2f00      	cmp	r7, #0
 8005d86:	f000 80d8 	beq.w	8005f3a <_printf_i+0x1d2>
 8005d8a:	2f58      	cmp	r7, #88	; 0x58
 8005d8c:	f000 80a3 	beq.w	8005ed6 <_printf_i+0x16e>
 8005d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d98:	e03a      	b.n	8005e10 <_printf_i+0xa8>
 8005d9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d9e:	2b15      	cmp	r3, #21
 8005da0:	d8f6      	bhi.n	8005d90 <_printf_i+0x28>
 8005da2:	a101      	add	r1, pc, #4	; (adr r1, 8005da8 <_printf_i+0x40>)
 8005da4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005da8:	08005e01 	.word	0x08005e01
 8005dac:	08005e15 	.word	0x08005e15
 8005db0:	08005d91 	.word	0x08005d91
 8005db4:	08005d91 	.word	0x08005d91
 8005db8:	08005d91 	.word	0x08005d91
 8005dbc:	08005d91 	.word	0x08005d91
 8005dc0:	08005e15 	.word	0x08005e15
 8005dc4:	08005d91 	.word	0x08005d91
 8005dc8:	08005d91 	.word	0x08005d91
 8005dcc:	08005d91 	.word	0x08005d91
 8005dd0:	08005d91 	.word	0x08005d91
 8005dd4:	08005f21 	.word	0x08005f21
 8005dd8:	08005e45 	.word	0x08005e45
 8005ddc:	08005f03 	.word	0x08005f03
 8005de0:	08005d91 	.word	0x08005d91
 8005de4:	08005d91 	.word	0x08005d91
 8005de8:	08005f43 	.word	0x08005f43
 8005dec:	08005d91 	.word	0x08005d91
 8005df0:	08005e45 	.word	0x08005e45
 8005df4:	08005d91 	.word	0x08005d91
 8005df8:	08005d91 	.word	0x08005d91
 8005dfc:	08005f0b 	.word	0x08005f0b
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	1d1a      	adds	r2, r3, #4
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	602a      	str	r2, [r5, #0]
 8005e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e10:	2301      	movs	r3, #1
 8005e12:	e0a3      	b.n	8005f5c <_printf_i+0x1f4>
 8005e14:	6820      	ldr	r0, [r4, #0]
 8005e16:	6829      	ldr	r1, [r5, #0]
 8005e18:	0606      	lsls	r6, r0, #24
 8005e1a:	f101 0304 	add.w	r3, r1, #4
 8005e1e:	d50a      	bpl.n	8005e36 <_printf_i+0xce>
 8005e20:	680e      	ldr	r6, [r1, #0]
 8005e22:	602b      	str	r3, [r5, #0]
 8005e24:	2e00      	cmp	r6, #0
 8005e26:	da03      	bge.n	8005e30 <_printf_i+0xc8>
 8005e28:	232d      	movs	r3, #45	; 0x2d
 8005e2a:	4276      	negs	r6, r6
 8005e2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e30:	485e      	ldr	r0, [pc, #376]	; (8005fac <_printf_i+0x244>)
 8005e32:	230a      	movs	r3, #10
 8005e34:	e019      	b.n	8005e6a <_printf_i+0x102>
 8005e36:	680e      	ldr	r6, [r1, #0]
 8005e38:	602b      	str	r3, [r5, #0]
 8005e3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e3e:	bf18      	it	ne
 8005e40:	b236      	sxthne	r6, r6
 8005e42:	e7ef      	b.n	8005e24 <_printf_i+0xbc>
 8005e44:	682b      	ldr	r3, [r5, #0]
 8005e46:	6820      	ldr	r0, [r4, #0]
 8005e48:	1d19      	adds	r1, r3, #4
 8005e4a:	6029      	str	r1, [r5, #0]
 8005e4c:	0601      	lsls	r1, r0, #24
 8005e4e:	d501      	bpl.n	8005e54 <_printf_i+0xec>
 8005e50:	681e      	ldr	r6, [r3, #0]
 8005e52:	e002      	b.n	8005e5a <_printf_i+0xf2>
 8005e54:	0646      	lsls	r6, r0, #25
 8005e56:	d5fb      	bpl.n	8005e50 <_printf_i+0xe8>
 8005e58:	881e      	ldrh	r6, [r3, #0]
 8005e5a:	4854      	ldr	r0, [pc, #336]	; (8005fac <_printf_i+0x244>)
 8005e5c:	2f6f      	cmp	r7, #111	; 0x6f
 8005e5e:	bf0c      	ite	eq
 8005e60:	2308      	moveq	r3, #8
 8005e62:	230a      	movne	r3, #10
 8005e64:	2100      	movs	r1, #0
 8005e66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e6a:	6865      	ldr	r5, [r4, #4]
 8005e6c:	60a5      	str	r5, [r4, #8]
 8005e6e:	2d00      	cmp	r5, #0
 8005e70:	bfa2      	ittt	ge
 8005e72:	6821      	ldrge	r1, [r4, #0]
 8005e74:	f021 0104 	bicge.w	r1, r1, #4
 8005e78:	6021      	strge	r1, [r4, #0]
 8005e7a:	b90e      	cbnz	r6, 8005e80 <_printf_i+0x118>
 8005e7c:	2d00      	cmp	r5, #0
 8005e7e:	d04d      	beq.n	8005f1c <_printf_i+0x1b4>
 8005e80:	4615      	mov	r5, r2
 8005e82:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e86:	fb03 6711 	mls	r7, r3, r1, r6
 8005e8a:	5dc7      	ldrb	r7, [r0, r7]
 8005e8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e90:	4637      	mov	r7, r6
 8005e92:	42bb      	cmp	r3, r7
 8005e94:	460e      	mov	r6, r1
 8005e96:	d9f4      	bls.n	8005e82 <_printf_i+0x11a>
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d10b      	bne.n	8005eb4 <_printf_i+0x14c>
 8005e9c:	6823      	ldr	r3, [r4, #0]
 8005e9e:	07de      	lsls	r6, r3, #31
 8005ea0:	d508      	bpl.n	8005eb4 <_printf_i+0x14c>
 8005ea2:	6923      	ldr	r3, [r4, #16]
 8005ea4:	6861      	ldr	r1, [r4, #4]
 8005ea6:	4299      	cmp	r1, r3
 8005ea8:	bfde      	ittt	le
 8005eaa:	2330      	movle	r3, #48	; 0x30
 8005eac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005eb0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005eb4:	1b52      	subs	r2, r2, r5
 8005eb6:	6122      	str	r2, [r4, #16]
 8005eb8:	f8cd a000 	str.w	sl, [sp]
 8005ebc:	464b      	mov	r3, r9
 8005ebe:	aa03      	add	r2, sp, #12
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	4640      	mov	r0, r8
 8005ec4:	f7ff fee2 	bl	8005c8c <_printf_common>
 8005ec8:	3001      	adds	r0, #1
 8005eca:	d14c      	bne.n	8005f66 <_printf_i+0x1fe>
 8005ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ed0:	b004      	add	sp, #16
 8005ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed6:	4835      	ldr	r0, [pc, #212]	; (8005fac <_printf_i+0x244>)
 8005ed8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005edc:	6829      	ldr	r1, [r5, #0]
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ee4:	6029      	str	r1, [r5, #0]
 8005ee6:	061d      	lsls	r5, r3, #24
 8005ee8:	d514      	bpl.n	8005f14 <_printf_i+0x1ac>
 8005eea:	07df      	lsls	r7, r3, #31
 8005eec:	bf44      	itt	mi
 8005eee:	f043 0320 	orrmi.w	r3, r3, #32
 8005ef2:	6023      	strmi	r3, [r4, #0]
 8005ef4:	b91e      	cbnz	r6, 8005efe <_printf_i+0x196>
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	f023 0320 	bic.w	r3, r3, #32
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	2310      	movs	r3, #16
 8005f00:	e7b0      	b.n	8005e64 <_printf_i+0xfc>
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	f043 0320 	orr.w	r3, r3, #32
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	2378      	movs	r3, #120	; 0x78
 8005f0c:	4828      	ldr	r0, [pc, #160]	; (8005fb0 <_printf_i+0x248>)
 8005f0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f12:	e7e3      	b.n	8005edc <_printf_i+0x174>
 8005f14:	0659      	lsls	r1, r3, #25
 8005f16:	bf48      	it	mi
 8005f18:	b2b6      	uxthmi	r6, r6
 8005f1a:	e7e6      	b.n	8005eea <_printf_i+0x182>
 8005f1c:	4615      	mov	r5, r2
 8005f1e:	e7bb      	b.n	8005e98 <_printf_i+0x130>
 8005f20:	682b      	ldr	r3, [r5, #0]
 8005f22:	6826      	ldr	r6, [r4, #0]
 8005f24:	6961      	ldr	r1, [r4, #20]
 8005f26:	1d18      	adds	r0, r3, #4
 8005f28:	6028      	str	r0, [r5, #0]
 8005f2a:	0635      	lsls	r5, r6, #24
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	d501      	bpl.n	8005f34 <_printf_i+0x1cc>
 8005f30:	6019      	str	r1, [r3, #0]
 8005f32:	e002      	b.n	8005f3a <_printf_i+0x1d2>
 8005f34:	0670      	lsls	r0, r6, #25
 8005f36:	d5fb      	bpl.n	8005f30 <_printf_i+0x1c8>
 8005f38:	8019      	strh	r1, [r3, #0]
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	6123      	str	r3, [r4, #16]
 8005f3e:	4615      	mov	r5, r2
 8005f40:	e7ba      	b.n	8005eb8 <_printf_i+0x150>
 8005f42:	682b      	ldr	r3, [r5, #0]
 8005f44:	1d1a      	adds	r2, r3, #4
 8005f46:	602a      	str	r2, [r5, #0]
 8005f48:	681d      	ldr	r5, [r3, #0]
 8005f4a:	6862      	ldr	r2, [r4, #4]
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	4628      	mov	r0, r5
 8005f50:	f7fa f93e 	bl	80001d0 <memchr>
 8005f54:	b108      	cbz	r0, 8005f5a <_printf_i+0x1f2>
 8005f56:	1b40      	subs	r0, r0, r5
 8005f58:	6060      	str	r0, [r4, #4]
 8005f5a:	6863      	ldr	r3, [r4, #4]
 8005f5c:	6123      	str	r3, [r4, #16]
 8005f5e:	2300      	movs	r3, #0
 8005f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f64:	e7a8      	b.n	8005eb8 <_printf_i+0x150>
 8005f66:	6923      	ldr	r3, [r4, #16]
 8005f68:	462a      	mov	r2, r5
 8005f6a:	4649      	mov	r1, r9
 8005f6c:	4640      	mov	r0, r8
 8005f6e:	47d0      	blx	sl
 8005f70:	3001      	adds	r0, #1
 8005f72:	d0ab      	beq.n	8005ecc <_printf_i+0x164>
 8005f74:	6823      	ldr	r3, [r4, #0]
 8005f76:	079b      	lsls	r3, r3, #30
 8005f78:	d413      	bmi.n	8005fa2 <_printf_i+0x23a>
 8005f7a:	68e0      	ldr	r0, [r4, #12]
 8005f7c:	9b03      	ldr	r3, [sp, #12]
 8005f7e:	4298      	cmp	r0, r3
 8005f80:	bfb8      	it	lt
 8005f82:	4618      	movlt	r0, r3
 8005f84:	e7a4      	b.n	8005ed0 <_printf_i+0x168>
 8005f86:	2301      	movs	r3, #1
 8005f88:	4632      	mov	r2, r6
 8005f8a:	4649      	mov	r1, r9
 8005f8c:	4640      	mov	r0, r8
 8005f8e:	47d0      	blx	sl
 8005f90:	3001      	adds	r0, #1
 8005f92:	d09b      	beq.n	8005ecc <_printf_i+0x164>
 8005f94:	3501      	adds	r5, #1
 8005f96:	68e3      	ldr	r3, [r4, #12]
 8005f98:	9903      	ldr	r1, [sp, #12]
 8005f9a:	1a5b      	subs	r3, r3, r1
 8005f9c:	42ab      	cmp	r3, r5
 8005f9e:	dcf2      	bgt.n	8005f86 <_printf_i+0x21e>
 8005fa0:	e7eb      	b.n	8005f7a <_printf_i+0x212>
 8005fa2:	2500      	movs	r5, #0
 8005fa4:	f104 0619 	add.w	r6, r4, #25
 8005fa8:	e7f5      	b.n	8005f96 <_printf_i+0x22e>
 8005faa:	bf00      	nop
 8005fac:	0800669d 	.word	0x0800669d
 8005fb0:	080066ae 	.word	0x080066ae

08005fb4 <_sbrk_r>:
 8005fb4:	b538      	push	{r3, r4, r5, lr}
 8005fb6:	4d06      	ldr	r5, [pc, #24]	; (8005fd0 <_sbrk_r+0x1c>)
 8005fb8:	2300      	movs	r3, #0
 8005fba:	4604      	mov	r4, r0
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	602b      	str	r3, [r5, #0]
 8005fc0:	f7fb f90e 	bl	80011e0 <_sbrk>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d102      	bne.n	8005fce <_sbrk_r+0x1a>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	b103      	cbz	r3, 8005fce <_sbrk_r+0x1a>
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	2000084c 	.word	0x2000084c

08005fd4 <__sread>:
 8005fd4:	b510      	push	{r4, lr}
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fdc:	f000 f8a0 	bl	8006120 <_read_r>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	bfab      	itete	ge
 8005fe4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fe6:	89a3      	ldrhlt	r3, [r4, #12]
 8005fe8:	181b      	addge	r3, r3, r0
 8005fea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fee:	bfac      	ite	ge
 8005ff0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ff2:	81a3      	strhlt	r3, [r4, #12]
 8005ff4:	bd10      	pop	{r4, pc}

08005ff6 <__swrite>:
 8005ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ffa:	461f      	mov	r7, r3
 8005ffc:	898b      	ldrh	r3, [r1, #12]
 8005ffe:	05db      	lsls	r3, r3, #23
 8006000:	4605      	mov	r5, r0
 8006002:	460c      	mov	r4, r1
 8006004:	4616      	mov	r6, r2
 8006006:	d505      	bpl.n	8006014 <__swrite+0x1e>
 8006008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800600c:	2302      	movs	r3, #2
 800600e:	2200      	movs	r2, #0
 8006010:	f000 f868 	bl	80060e4 <_lseek_r>
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800601a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800601e:	81a3      	strh	r3, [r4, #12]
 8006020:	4632      	mov	r2, r6
 8006022:	463b      	mov	r3, r7
 8006024:	4628      	mov	r0, r5
 8006026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800602a:	f000 b817 	b.w	800605c <_write_r>

0800602e <__sseek>:
 800602e:	b510      	push	{r4, lr}
 8006030:	460c      	mov	r4, r1
 8006032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006036:	f000 f855 	bl	80060e4 <_lseek_r>
 800603a:	1c43      	adds	r3, r0, #1
 800603c:	89a3      	ldrh	r3, [r4, #12]
 800603e:	bf15      	itete	ne
 8006040:	6560      	strne	r0, [r4, #84]	; 0x54
 8006042:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006046:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800604a:	81a3      	strheq	r3, [r4, #12]
 800604c:	bf18      	it	ne
 800604e:	81a3      	strhne	r3, [r4, #12]
 8006050:	bd10      	pop	{r4, pc}

08006052 <__sclose>:
 8006052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006056:	f000 b813 	b.w	8006080 <_close_r>
	...

0800605c <_write_r>:
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	4d07      	ldr	r5, [pc, #28]	; (800607c <_write_r+0x20>)
 8006060:	4604      	mov	r4, r0
 8006062:	4608      	mov	r0, r1
 8006064:	4611      	mov	r1, r2
 8006066:	2200      	movs	r2, #0
 8006068:	602a      	str	r2, [r5, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	f7fa ff5c 	bl	8000f28 <_write>
 8006070:	1c43      	adds	r3, r0, #1
 8006072:	d102      	bne.n	800607a <_write_r+0x1e>
 8006074:	682b      	ldr	r3, [r5, #0]
 8006076:	b103      	cbz	r3, 800607a <_write_r+0x1e>
 8006078:	6023      	str	r3, [r4, #0]
 800607a:	bd38      	pop	{r3, r4, r5, pc}
 800607c:	2000084c 	.word	0x2000084c

08006080 <_close_r>:
 8006080:	b538      	push	{r3, r4, r5, lr}
 8006082:	4d06      	ldr	r5, [pc, #24]	; (800609c <_close_r+0x1c>)
 8006084:	2300      	movs	r3, #0
 8006086:	4604      	mov	r4, r0
 8006088:	4608      	mov	r0, r1
 800608a:	602b      	str	r3, [r5, #0]
 800608c:	f7fb f873 	bl	8001176 <_close>
 8006090:	1c43      	adds	r3, r0, #1
 8006092:	d102      	bne.n	800609a <_close_r+0x1a>
 8006094:	682b      	ldr	r3, [r5, #0]
 8006096:	b103      	cbz	r3, 800609a <_close_r+0x1a>
 8006098:	6023      	str	r3, [r4, #0]
 800609a:	bd38      	pop	{r3, r4, r5, pc}
 800609c:	2000084c 	.word	0x2000084c

080060a0 <_fstat_r>:
 80060a0:	b538      	push	{r3, r4, r5, lr}
 80060a2:	4d07      	ldr	r5, [pc, #28]	; (80060c0 <_fstat_r+0x20>)
 80060a4:	2300      	movs	r3, #0
 80060a6:	4604      	mov	r4, r0
 80060a8:	4608      	mov	r0, r1
 80060aa:	4611      	mov	r1, r2
 80060ac:	602b      	str	r3, [r5, #0]
 80060ae:	f7fb f86e 	bl	800118e <_fstat>
 80060b2:	1c43      	adds	r3, r0, #1
 80060b4:	d102      	bne.n	80060bc <_fstat_r+0x1c>
 80060b6:	682b      	ldr	r3, [r5, #0]
 80060b8:	b103      	cbz	r3, 80060bc <_fstat_r+0x1c>
 80060ba:	6023      	str	r3, [r4, #0]
 80060bc:	bd38      	pop	{r3, r4, r5, pc}
 80060be:	bf00      	nop
 80060c0:	2000084c 	.word	0x2000084c

080060c4 <_isatty_r>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	4d06      	ldr	r5, [pc, #24]	; (80060e0 <_isatty_r+0x1c>)
 80060c8:	2300      	movs	r3, #0
 80060ca:	4604      	mov	r4, r0
 80060cc:	4608      	mov	r0, r1
 80060ce:	602b      	str	r3, [r5, #0]
 80060d0:	f7fb f86d 	bl	80011ae <_isatty>
 80060d4:	1c43      	adds	r3, r0, #1
 80060d6:	d102      	bne.n	80060de <_isatty_r+0x1a>
 80060d8:	682b      	ldr	r3, [r5, #0]
 80060da:	b103      	cbz	r3, 80060de <_isatty_r+0x1a>
 80060dc:	6023      	str	r3, [r4, #0]
 80060de:	bd38      	pop	{r3, r4, r5, pc}
 80060e0:	2000084c 	.word	0x2000084c

080060e4 <_lseek_r>:
 80060e4:	b538      	push	{r3, r4, r5, lr}
 80060e6:	4d07      	ldr	r5, [pc, #28]	; (8006104 <_lseek_r+0x20>)
 80060e8:	4604      	mov	r4, r0
 80060ea:	4608      	mov	r0, r1
 80060ec:	4611      	mov	r1, r2
 80060ee:	2200      	movs	r2, #0
 80060f0:	602a      	str	r2, [r5, #0]
 80060f2:	461a      	mov	r2, r3
 80060f4:	f7fb f866 	bl	80011c4 <_lseek>
 80060f8:	1c43      	adds	r3, r0, #1
 80060fa:	d102      	bne.n	8006102 <_lseek_r+0x1e>
 80060fc:	682b      	ldr	r3, [r5, #0]
 80060fe:	b103      	cbz	r3, 8006102 <_lseek_r+0x1e>
 8006100:	6023      	str	r3, [r4, #0]
 8006102:	bd38      	pop	{r3, r4, r5, pc}
 8006104:	2000084c 	.word	0x2000084c

08006108 <__malloc_lock>:
 8006108:	4801      	ldr	r0, [pc, #4]	; (8006110 <__malloc_lock+0x8>)
 800610a:	f7ff bb15 	b.w	8005738 <__retarget_lock_acquire_recursive>
 800610e:	bf00      	nop
 8006110:	20000840 	.word	0x20000840

08006114 <__malloc_unlock>:
 8006114:	4801      	ldr	r0, [pc, #4]	; (800611c <__malloc_unlock+0x8>)
 8006116:	f7ff bb10 	b.w	800573a <__retarget_lock_release_recursive>
 800611a:	bf00      	nop
 800611c:	20000840 	.word	0x20000840

08006120 <_read_r>:
 8006120:	b538      	push	{r3, r4, r5, lr}
 8006122:	4d07      	ldr	r5, [pc, #28]	; (8006140 <_read_r+0x20>)
 8006124:	4604      	mov	r4, r0
 8006126:	4608      	mov	r0, r1
 8006128:	4611      	mov	r1, r2
 800612a:	2200      	movs	r2, #0
 800612c:	602a      	str	r2, [r5, #0]
 800612e:	461a      	mov	r2, r3
 8006130:	f7fb f804 	bl	800113c <_read>
 8006134:	1c43      	adds	r3, r0, #1
 8006136:	d102      	bne.n	800613e <_read_r+0x1e>
 8006138:	682b      	ldr	r3, [r5, #0]
 800613a:	b103      	cbz	r3, 800613e <_read_r+0x1e>
 800613c:	6023      	str	r3, [r4, #0]
 800613e:	bd38      	pop	{r3, r4, r5, pc}
 8006140:	2000084c 	.word	0x2000084c

08006144 <_init>:
 8006144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006146:	bf00      	nop
 8006148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800614a:	bc08      	pop	{r3}
 800614c:	469e      	mov	lr, r3
 800614e:	4770      	bx	lr

08006150 <_fini>:
 8006150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006152:	bf00      	nop
 8006154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006156:	bc08      	pop	{r3}
 8006158:	469e      	mov	lr, r3
 800615a:	4770      	bx	lr
